<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tools.Runtime.CompilerServices
</name>
</assembly>
<members>
<member name="T:Tools.RuntimeT.CompilerServicesT.AddResourceAttribute">
 <summary>When applied on an assembly or a module indicates tha postrpocessing tool should add resource to the assembly or module</summary>
 <remarks>Applying this attribute on a member causes nothing on itself. You must run supporting post-processsing tool (such as AssemblyPostprocessoer) on your assembly once it's compiled to apply changes denoted by this attributes.
 <para>When applied on an assembly resources are added to main module of the assembly.</para></remarks>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.AddResourceAttribute.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.AddResourceAttribute"/> class</summary>
 <param name="name">Name of the resource</param>
 <param name="file">File that contains resource data. For embedded resource data are red from that file and embedded to assembly (so absolute path may be acceptable), for linked resources this file name is recorded to a module.</param>
 <param name="embedded">True to create embedded resource (data are stored in assembly), false to create linked resource (requires additional file to be distributed with assembly).</param>
 <param name="private">True to create private resource, false to create public resource.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="file"/> is null.</exception>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.AddResourceAttribute.Embedded">
 <summary>Gets value indicating if the resource is embedded (true) or linked (false)</summary>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.AddResourceAttribute.Name">
 <summary>Gets name of the resource</summary>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.AddResourceAttribute.File">
 <summary>Gets path to file that contains resource data</summary>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.AddResourceAttribute.Private">
 <summary>Gets value indicating if the resource is private (true) or public (false)</summary>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute">
 <summary>
 When applied on a method, property or event indicates that postprocessing tool should indicate that the member overrides base class member or implements interface member.
 When applied on a type indicates that postprocessing tool should add base class or interface to the type.
 </summary>
 <remarks>Applying this attribute on a member or type causes nothing on itself. You must run supporting post-processsing tool (such as AssemblyPostprocessoer) on your assembly once it's compiled to apply changes denoted by this attributes.</remarks>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.#ctor(System.Type,System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute"/> class, specifies base class and implemented member name</summary>
 <param name="base">Base type to override member of</param>
 <param name="member">Name of the member to override. The member must have same signature as member this attribute is applied on.
 Can be null if name of member this attribute is applied on is same as name of interface member.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="base"/> is null</exception>
 <remarks>Don't use this constructor when the attribute is applied on a type.</remarks>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.#ctor(System.Type)">
 <summary>Crteates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute"/> class without specifying implemented member name</summary>
 <param name="base">
 Base type to override member of (when applied on a member) or a type to add to types current type implements/inherits from (when applied on a type)
 <note>
 When this attribute is applied on a type and <paramref name="base"/> is not interface current base type of the type is replaced by a tool.
 <para>When this attribute is applied on a type and <paramref name="base"/> is an open generic type and the type attributte is applied on is open or closed generic type with same number of generic parameters as <paramref name="base"/> typeparameters from the type this attribute is applied on are supplied to <paramref name="base"/>.</para>
 </note>
 </param>
 <exception cref="T:System.ArgumentNullException"><paramref name="base"/> is null</exception>
 <remarks>Use this CTor only if name of member this attribute is applied on is same as name of member being overriden/implemented or use this CTor whan the attribute is applied on a type.</remarks>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base">
 <summary>
 Gets base class or interface this instance indicates override or implementation of member of (when applied on a member)
 or type to add to lostz of types current type implements/inherits from (when applied on a type).
 </summary>
 <remarks>When this attribute is applied on a type and <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/> is not an interface current base type of the type is replaced by a tool.</remarks>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Member">
 <summary>Gets name of member to override / implement</summary>
 <returns>Name of member to implement/override. Null if name of member to implement/override is same as name of member this attribute is applied on.</returns>
 <remarks>
 When lookup is done in <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/> only members of same type and with same signature as member this attribute is applied on are considered.
 <para>Not used when thei attribute is applied on a type</para>
 </remarks>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Acceessor">
 <summary>Gets or sets accessor to be implemented.</summary>
 <remarks>
 If <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Acceessor"/> is not <see cref="F:Tools.RuntimeT.CompilerServicesT.Accessor.All"/> <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Member"/> should point to a property or an event (depends on <see cref="T:Tools.RuntimeT.CompilerServicesT.Accessor"/> value) and this attribute should be applied on a method.
 <para>Not used when this attribute is used on a type.</para>
 </remarks>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.GenericParameterSubstitutionWithGenericParameters">
 <summary>Gets or sets generic parameters mapping for <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/> substituting generic parameters from declaring type</summary>
 <value></value>
 <returns></returns>
 <remarks>
 If <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/> is an open generic type and type this attribute is applied to is also open generic type, you can use this array to pass generic parameters of target type to <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/>.
 Every item in this array passes one generic argument to <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/>. Generic arguments are refferenced by position.
 In case <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/> is nested type parent type arguments are before nested type arguments.
 When an item is null value at corresponding index in <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.GenericParameterSubstitutionWithTypes"/> is used.
 Values of item arrays are names of generic arguments of type this attribute is applied on (or parent type of member thia attribute is applied on).
 In case this attribute is applied on nested type generic parameters of parent type can be also referenced if they have different names then generic arguments of nested type.
 </remarks>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.GenericParameterSubstitutionWithTypes">
 <summary>Gets or sets generic parameters mapping for <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/> substituting types</summary>
 <value></value>
 <returns></returns>
 <remarks>
 If <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/> is an open generic type you can pass generic parameters to it using this property.
 You don't have to use this property when you don't use <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.GenericParameterSubstitutionWithGenericParameters"/>.
 This property is mainly intended to be used in combination with <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.GenericParameterSubstitutionWithGenericParameters"/>.
 Every item in this array passes one generic argument to <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/>. Generic arguments are refferenced by position.
 In case <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.Base"/> is nested type parent type arguments are before nested type arguments.
 When an item is null value at corresponding index in <see cref="P:Tools.RuntimeT.CompilerServicesT.ImplementsAttribute.GenericParameterSubstitutionWithGenericParameters"/> is used.
 </remarks>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.Accessor">
 <summary>Enumeration fo comnbined members accessors</summary>
 <version version="1.5.4">The enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.RuntimeT.CompilerServicesT.Accessor.All">
 <summary>Consider all implemented accessors</summary>
</member>
<member name="F:Tools.RuntimeT.CompilerServicesT.Accessor.Get">
 <summary>A method is impelmenting property Get accessor</summary>
</member>
<member name="F:Tools.RuntimeT.CompilerServicesT.Accessor.Set">
 <summary>A method is implementing property Set accessor</summary>
</member>
<member name="F:Tools.RuntimeT.CompilerServicesT.Accessor.Add">
 <summary>A method is implementing event Add accessor</summary>
</member>
<member name="F:Tools.RuntimeT.CompilerServicesT.Accessor.Remove">
 <summary>A method is implementing event Remove accessor</summary>
</member>
<member name="F:Tools.RuntimeT.CompilerServicesT.Accessor.Raise">
 <summary>A method is implemnenting event Raise accessor</summary>
</member>
<member name="F:Tools.RuntimeT.CompilerServicesT.Accessor.Standard">
 <summary>An event or property is implementing only standard (Get/Set or Add/Remove/Raise) accessors. Ignores other accessors.</summary>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.IPostprocessorContext">
 <remarks>This interface is used when post-processing an assembly using <see cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/></remarks>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This interface is new in version 1.5.4</version>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.IPostprocessorContext.LogInfo(System.Object,System.String)">
 <summary>Passes an informative messsage to context. This is used to inform about post-processing operation.</summary>
 <param name="item">Current item being processed. May be null. Sould be <see cref="T:Mono.Cecil.ICustomAttributeProvider"/> otherwise it may be treated as null by implementation.</param>
 <param name="message">The message</param>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.MakePublicAttribute">
 <summary>When applied on a type or a member indicates that postprocessing tool should change visibility of the member to <c>public</c></summary>
 <remarks>Applying this attribute on a type or a member causes nothing on itself. You must run supporting post-processsing tool (such as AssemblyPostprocessoer) on your assembly once it's compiled to apply changes denoted by this attributes.</remarks>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.MakeTypePublicAttribute">
 <summary>When applied a module indicates that a type declared in that module will be made <c>public</c>.</summary>
 <remarks>Applying this attribute on a type or a member causes nothing on itself. You must run supporting post-processsing tool (such as AssemblyPostprocessoer) on your assembly once it's compiled to apply changes denoted by this attributes.
 <para>Use this sttribute instead of <see cref="T:Tools.RuntimeT.CompilerServicesT.MakePublicAttribute"/> if you don't have access to the type (such as <c>&lt;Module></c>). Does not work with nested types.</para></remarks>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.MakeTypePublicAttribute.#ctor(System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.MakeTypePublicAttribute"/> class</summary>
 <param name="typeName">Full name of type to be made public. Do not include any specifiers that are not part of type</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="typeName"/> is null.</exception>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.MakeTypePublicAttribute.TypeName">
 <summary>Gets name of type (in current module) to be made public</summary>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute">
 <summary>Changes attributes of a member</summary>
 <remarks>Applying this attribute on a member causes nothing on itself. You must run supporting post-processsing tool (such as AssemblyPostprocessoer) on your assembly once it's compiled to apply changes denoted by this attributes.</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute.#ctor(System.Reflection.MethodAttributes,System.Reflection.MethodAttributes)">
 <summary>Use this constructor when <see cref="T:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute"/> is applied on a method, constructor and accessor</summary>
 <param name="or">This value will be OR-ed with existing method attributes</param>
 <param name="and">This value will be AND-ed with existing method attributes</param>
 <remarks>When used on inapropriate member types values are treated as values from member-appropriate enumeration. This can lead to unexpected results.</remarks>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute.#ctor(System.Reflection.FieldAttributes,System.Reflection.FieldAttributes)">
 <summary>Use this constructor when <see cref="T:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute"/> is applied on a field</summary>
 <param name="or">This value will be OR-ed with existing field attributes</param>
 <param name="and">This value will be AND-ed with existing field attributes</param>
 <remarks>When used on inapropriate member types values are treated as values from member-appropriate enumeration. This can lead to unexpected results.</remarks>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute.#ctor(System.Reflection.PropertyAttributes,System.Reflection.PropertyAttributes)">
 <summary>Use this constructor when <see cref="T:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute"/> is applied on a property</summary>
 <param name="or">This value will be OR-ed with existing property attributes</param>
 <param name="and">This value will be AND-ed with existing property attributes</param>
 <remarks>When used on inapropriate member types values are treated as values from member-appropriate enumeration. This can lead to unexpected results.</remarks>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute.#ctor(System.Reflection.EventAttributes,System.Reflection.EventAttributes)">
 <summary>Use this constructor when <see cref="T:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute"/> is applied on an event</summary>
 <param name="or">This value will be OR-ed with existing event attributes</param>
 <param name="and">This value will be AND-ed with existing event attributes</param>
 <remarks>When used on inapropriate member types values are treated as values from member-appropriate enumeration. This can lead to unexpected results.</remarks>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute.#ctor(System.Reflection.TypeAttributes,System.Reflection.TypeAttributes)">
 <summary>Use this constructor when <see cref="T:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute"/> is applied on a type (i.e. class, structure, delegate or enumeration)</summary>
 <param name="or">This value will be OR-ed with existing type attributes</param>
 <param name="and">This value will be AND-ed with existing type attributes</param>
 <remarks>When used on inapropriate member types values are treated as values from member-appropriate enumeration. This can lead to unexpected results.</remarks>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute.#ctor(System.Int32,System.Int32)">
 <summary>CTor - creates a new instance of <see cref="T:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute"/> class</summary>
 <param name="or">This value will be OR-ed with existing member attributes</param>
 <param name="and">This value will be AND-ed with existing member attributes</param>
 <remarks>Meaning of value of <paramref name="or"/> and <paramref name="and"/> depends on type of member this attribute is applied on.</remarks>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute.And">
 <summary>Gets attributes to be AND-ed with existing member attributes</summary>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.ChangeAttributesAttribute.Or">
 <summary>Gets attributes to be OR-ed with existing member attributes</summary>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.PostprocessingAttribute">
 <summary>Abstract base class for post-processing attributes. This class defines common properties of postprocessing attributes.</summary>
 <remarks>You typically want to apply <see cref="T:System.AttributeUsageAttribute"/> and <see cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute"/> attributes on class derived from this class.</remarks>
 <seelaso cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute"/>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.PostprocessingAttribute.Remove">
 <summary>Gets or sets value indicating if attribute should be removed from member it decorates once postprocessing is done</summary>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.PostprocessingAttribute.Preorder">
 <summary>Gets or sets value indicating if this attribute should be applied before members of item the attribute is applied on are processed</summary>
 <remarks>AssemblyPostrocessor normally applies attributes first on child objects (e.g. methods of type) and then on type itself.</remarks>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute">
 <summary>
 Apply this attribute on <see cref="T:System.Attribute"/>-derived class to indicate how to perform post-processing the attribute class defines.
 You tipically do not use this attrubute unless you are defining your own post-processor.
 </summary>
 <remarks>It's recomended that your post-processing class derives from <see cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessingAttribute"/>.</remarks>
 <seelaso cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorWithContext`1"/>
 <seelaso cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorWithoutContext`1"/>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.#ctor(System.Type,System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute"/> from type and method name</summary>
 <param name="type">Type method to postprocess this attribute is defined in</param>
 <param name="method">
 Name of postprocessing method. The method must be member of type <paramref name="type"/>, it must be public, static and it must have 2 or 3 parameters.
 1st one must be of type <see cref="T:Mono.Cecil.ICustomAttributeProvider"/>.
 2nd one should accept the type this attribute as applied on.
 3rd (if present) must <see cref="M:System.Type.IsAssignableFrom(System.Type)">be asssignable from</see> <see cref="T:Tools.RuntimeT.CompilerServicesT.IPostprocessorContext"/>.
 If these conditions are not satisfied postprocessing will fail.
 </param>
 <exception cref="T:System.ArgumentNullException">Any argument is null</exception>
 <seelaso cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorWithContext`1"/>
 <seelaso cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorWithoutContext`1"/>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.#ctor(System.String,System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute"/> from type name and method name</summary>
 <param name="type">Name of type method to postprocess this attribute is defined in. You should use name of type in format suitable for <see cref="P:System.Type.AssemblyQualifiedName"/> and <see cref="M:System.Object.GetType"/>.</param>
 <param name="method">
 Name of postprocessing method. The method must be member of type <paramref name="type"/>, it must be public, static and it must have 2 or 3 parameters.
 1st one must be of type <see cref="T:Mono.Cecil.ICustomAttributeProvider"/>.
 2nd one should accept the type this attribute as applied on.
 3rd (if present) must <see cref="M:System.Type.IsAssignableFrom(System.Type)">be asssignable from</see> <see cref="T:Tools.RuntimeT.CompilerServicesT.IPostprocessorContext"/>.
 If these conditions are not satisfied postprocessing will fail.
 </param>
 <exception cref="T:System.ArgumentNullException">Any argument is null</exception>
 <seelaso cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorWithContext`1"/>
 <seelaso cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorWithoutContext`1"/>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.Method">
 <summary>Gets name of postprocessing method</summary>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.Type">
 <summary>Gets type postprocessing method is defined in</summary>
 <returns>If <see cref="T:System.Type"/> was passed to the constructor returns that type. Otherwise returns type obtained using <see cref="M:System.Object.GetType"/> from <see cref="P:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.TypeName"/> (which may return nulll if the type cannot be found).</returns>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.TypeName">
 <summary>Gets name of type postpúrocessing method is defined in</summary>
 <returns>If type name was passed to a constructor returns that name. Otherwise returns <see cref="P:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.Type"/>.<see cref="P:System.Type.AssemblyQualifiedName">AssemblyQualifiedName</see></returns>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.GetMethod">
 <summary>Gets a method to be used for postprocessing</summary>
 <returns>
 A method of type <see cref="P:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.Type"/> with name <see cref="P:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.Method"/>, which is public and static and has 2 or 3 arguments.
 1st argument must be <see cref="T:Mono.Cecil.ICustomAttributeProvider"/>. 2nd one is not checked.
 3rd (if present) must <see cref="M:System.Type.IsAssignableFrom(System.Type)">be asssignable from</see> <see cref="T:Tools.RuntimeT.CompilerServicesT.IPostprocessorContext"/>.
 Returns null if <see cref="P:Tools.RuntimeT.CompilerServicesT.PostprocessorAttribute.Type"/> is null or if such method cannot be found.
 </returns>
 <exception cref="T:System.InvalidOperationException">More than one suitable methods found.</exception>
 <seelaso cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorWithContext`1"/>
 <seelaso cref="T:Tools.RuntimeT.CompilerServicesT.PostprocessorWithoutContext`1"/>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.RemoveAttribute">
 <summary>When applied on an item indicates that postprocessing tool should remove the item from it's parent</summary>
 <remarks>Applying this attribute on a member causes nothing on itself. You must run supporting post-processsing tool (such as AssemblyPostprocessoer) on your assembly once it's compiled to apply changes denoted by this attributes.</remarks>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.RemoveAttribute.#ctor">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.RemoveAttribute"/> class</summary>
 <remarks>Instance created using default constructor does not indicate removal of dependent items</remarks>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.RemoveAttribute.#ctor(System.Boolean)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.RemoveAttribute"/> class indicating if dependent metadata should be deleted as well</summary>
 <param name="removeRelatedMetadata">True to remove related metadata as well, false to keep them</param>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.RemoveAttribute.RemoveRelatedMetadata">
 <summary>Gets value indicating if related metadata are removed or not</summary>
 <remarks>When true current implementation is:
 <list type="bullet">
 <item>When method is removed from type and it is used as property/event accessor on the same type the accessoer is removed. If after this removal the property has neither setter nor getter the property is removed. If it is an event and it has neither adder nor remover its removed, too.</item>
 <item>When property or event is removed accessor methods are removed as well (as long as theyy were declared in the same type and were marked as specialname).</item>
 </list></remarks>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.RemoveReferenceAttribute">
 <summary>When applied module or assembly indicates that postprocessing tool should remove assembly reference from it</summary>
 <remarks>Applying this attribute on a member causes nothing on itself. You must run supporting post-processsing tool (such as AssemblyPostprocessoer) on your assembly once it's compiled to apply changes denoted by this attributes.</remarks>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.RuntimeT.CompilerServicesT.RemoveReferenceAttribute.AssemblyName">
 <summary>Gets name of assembly to remove reference to</summary>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.RemoveReferenceAttribute.#ctor(System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.RemoveReferenceAttribute"/> class from assembly full name</summary>
 <param name="assemblyFullName">Full name of assembly</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="assemblyFullName"/> is null</exception>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.RemoveReferenceAttribute.#ctor(System.Type)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.RemoveReferenceAttribute"/> class from assembly full nametype from assembly</summary>
 <param name="typeFromAssembly">Any type form assembly to remove referecne to</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="typeFromAssembly"/> is null</exception>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.RemoveReferenceAttribute.#ctor(System.Reflection.Assembly)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.RuntimeT.CompilerServicesT.RemoveReferenceAttribute"/> class from assembly</summary>
 <param name="assembly">An assembly to remove reference to</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null</exception>
</member>
<member name="M:Tools.RuntimeT.CompilerServicesT.RemoveReferenceAttribute.ThrowIfNull``1(``0,System.String)">
 <summary>Checks if obkect is null and throws <see cref="T:System.ArgumentException"/></summary>
 <param name="value">Value to check</param>
 <param name="paramName">Name of parameter to be reported to <see cref="P:System.ArgumentException.ParamName"/></param>
 <typeparam name="T">Type of value</typeparam>
 <returns><paramref name="value"/> (if it's not null)</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
</member>
<member name="T:Tools.RuntimeT.CompilerServicesT.RenameAttribute">
 <summary>When applied on a type or a member indicates that postprocessing tool should rename the member</summary>
 <remarks>Applying this attribute on a type or a member causes nothing on itself. You must run supporting post-processsing tool (such as AssemblyPostprocessoer) on your assembly once it's compiled to apply changes denoted by this attributes.</remarks>
 <seealso cref="T:Tools.RuntimeT.CompilerServicesT.AssemblyPostporcessor"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="T:Tools.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.ArrayMustHaveEvenNumberOfItems">
<summary>
  Looks up a localized string similar to The array must have even number of items.
</summary>
</member>
</members>
</doc>
