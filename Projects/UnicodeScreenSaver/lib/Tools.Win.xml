<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tools.Win
</name>
</assembly>
<members>
<member name="T:Tools.API.Messages.lParam.WM_CHAR">
 <summary>Bit-masks used by <see cref="F:Tools.API.Messages.WindowMessages.WM_CHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_DEADCHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_CHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_KEYDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_KEYUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSCHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSDEADCHAR"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYUP"/> message for lParam</summary>
 <remarks>And lParam with mask and to get appropriete value. You can use <see cref="M:Tools.API.Messages.lParam.Macros.CreateWM_CHAR(System.UInt16,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/> to compose value of this type</remarks>
 <seelaso cref="M:Tools.API.Messages.lParam.Macros.CreateWM_CHAR(System.UInt16,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)"/>
</member>
<member name="F:Tools.API.Messages.lParam.WM_CHAR.RepeatCountMask">
 <summary>Bits 0÷15: Specifies the repeat count for the current message. The value is the number of times the keystroke is autorepeated as a result of the user holding down the key. If the keystroke is held long enough, multiple messages are sent. However, the repeat count is not cumulative.</summary>
 <remarks><see cref="F:Tools.API.Messages.WindowMessages.WM_IME_CHAR"/>: Repeat count. Since the first byte and second byte is continuous, this is always 1.</remarks>
</member>
<member name="F:Tools.API.Messages.lParam.WM_CHAR.ScanCodeMask">
 <summary>Bits 16÷23: Specifies the scan code. The value depends on the OEM.</summary>
 <remarks><see cref="F:Tools.API.Messages.WindowMessages.WM_IME_CHAR"/>: Scan code for a complete Asian character.</remarks>
</member>
<member name="F:Tools.API.Messages.lParam.WM_CHAR.ExtendedMask">
 <summary>Bit 24: Specifies whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard. The value is 1 if it is an extended key; otherwise, it is 0.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_CHAR.ReservedMask">
 <summary>Bits 25÷28: Reserved; do not use.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_CHAR.ContextCodeMask">
 <summary>Bit 29: Specifies the context code. The value is 1 if the ALT key is held down while the key is pressed; otherwise, the value is 0.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_CHAR.PreviousKeyStateMask">
 <summary>Bit 30: Specifies the previous key state. The value is 1 if the key is down before the message is sent, or it is 0 if the key is up.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_CHAR.TransitionStateMask">
 <summary>Bit 31: Specifies the transition state. The value is 1 if the key is being released, or it is 0 if the key is being pressed.</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_ENDSESSION">
 <summary>Bit masks used by the <see cref="F:Tools.API.Messages.WindowMessages.WM_ENDSESSION"/> message</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_ENDSESSION.Zero">
 <summary>the system is shutting down or restarting (it is not possible to determine which event is occurring)</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_ENDSESSION.ENDSESSION_CLOSEAPP">
 <summary>f wParam is TRUE, the application must shut down. Any data should be saved automatically without prompting the user (for more information, see Remarks). The Restart Manager sends this message when the application is using a file that needs to be replaced, when it must service the system, or when system resources are exhausted. The application will be restarted if it has registered for restart using the RegisterApplicationRestart function. For more information, see Guidelines for Applications.
 If wParam is FALSE, the application should not shut down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_ENDSESSION.ENDSESSION_LOGOFF">
 <summary>The user is logging off. For more information, see Logging Off (http://msdn2.microsoft.com/en-us/library/aa376876.aspx).</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_HOTKEY_low">
 <summary>Values osed for low word of lParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_HOTKEY"/> message</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_HOTKEY_low.MOD_ALT">
 <summary>Either ALT key was held down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_HOTKEY_low.MOD_CONTROL">
 <summary>Either CTRL key was held down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_HOTKEY_low.MOD_SHIFT">
 <summary>Either SHIFT key was held down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_HOTKEY_low.MOD_WIN">
 <summary>Either WINDOWS key was held down. These keys are labeled with the Microsoft Windows logo. Hotkeys that involve the Windows key are reserved for use by the operating system.</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_IME_COMPOSITION">
 <summary>Values used for lParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_COMPOSITION"/></summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPATTR">
 <summary>Retrieves or updates the attribute of the composition string.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPCLAUSE">
 <summary>Retrieves or updates clause information of the composition string.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPREADSTR">
 <summary> 	Retrieves or updates the reading string of the current composition.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPREADATTR">
 <summary>Retrieves or updates the attributes of the reading string of the current composition.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPREADCLAUSE">
 <summary> 	Retrieves or updates the clause information of the reading string of the composition string.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_COMPSTR">
 <summary> 	Retrieves or updates the current composition string.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_CURSORPOS">
 <summary> 	Retrieves or updates the cursor position in composition string.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_DELTASTART">
 <summary> 	Retrieves or updates the cursor position in composition string.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_RESULTCLAUSE">
 <summary>Retrieves or updates clause information of the result string.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_RESULTREADCLAUSE">
 <summary> 	Retrieves or updates the reading string.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_RESULTREADSTR">
 <summary> 	Retrieves or updates the reading string.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.GCS_RESULTSTR">
 <summary>Retrieves or updates the string of the composition result.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.CS_INSERTCHAR">
 <summary> 	Insert the wParam composition character at the current insertion point. An application should display the composition character if it processes this message.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_COMPOSITION.CS_NOMOVECARET">
 <summary>Do not move the caret position as a result of processing the message. For example, if an IME specifies a combination of CS_INSERTCHAR and CS_NOMOVECARET, the application should insert the specified character at the current caret position but should not move the caret to the next position. A subsequent WM_IME_COMPOSITION message with GCS_RESULTSTR will replace this character.</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_IME_SETCONTEXT">
 <summary>Values used for lparam of <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_SETCONTEXT"/> message</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICOMPOSITIONWINDOW">
 <summary>Show the composition window by user interface window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUIGUIDWINDOW">
 <summary>Show the guide window by user interface window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICANDIDATEWINDOW">
 <summary>Show the candidate window of index 0 by user interface window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUISOFTKBD">
 <summary>Show the soft keyboard by user interface window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICANDIDATEWINDOW_l1">
 <summary>Show the candidate window of index 1 by user interface window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICANDIDATEWINDOW_l2">
 <summary> 	Show the candidate window of index 2 by user interface window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_IME_SETCONTEXT.ISC_SHOWUICANDIDATEWINDOW_l3">
 <summary>Show the candidate window of index 3 by user interface window.</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_NOTIFYFORMAT">
 <summary>Values used for lParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_NOTIFYFORMAT"/> message</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_NOTIFYFORMAT.NF_QUERY">
 <summary>The message is a query to determine whether ANSI or Unicode structures should be used in WM_NOTIFY messages. This command is sent from a control to its parent window during the creation of a control and in response to an NF_REQUERY command.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_NOTIFYFORMAT.NF_REQUERY">
 <summary>The message is a request for a control to send an NF_QUERY form of this message to its parent window. This command is sent from the parent window. The parent window is asking the control to requery it about the type of structures to use in WM_NOTIFY messages. If Command is NF_REQUERY, the return value is the result of the requery operation.</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_PRINT">
 <summary>Values used for lParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_PRINT"/> message</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_CHECKVISIBLE">
 <summary>Draws all visible children System.Windows.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_CHILDREN">
 <summary>Draws all visible children System.Windows.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_CLIENT">
 <summary>Draws the client area of the window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_ERASEBKGND">
 <summary>Erases the background before drawing the window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_NONCLIENT">
 <summary>Draws the nonclient area of the window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_PRINT.PRF_OWNED">
 <summary>Draws all owned System.Windows.</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_QUERYENDSESSION">
 <summary>Values used for lParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_QUERYENDSESSION"/> message</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_QUERYENDSESSION.ENDSESSION_CLOSEAPP">
 <summary>The application is using a file that must be replaced, the system is being serviced, or system resources are exhausted. For more information, see Guidelines for Applications (http://msdn2.microsoft.com/en-us/library/aa373651.aspx).</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_QUERYENDSESSION.ENDSESSION_LOGOFF">
 <summary>The user is logging off. For more information, see Logging Off (http://msdn2.microsoft.com/en-us/library/aa376876.aspx).</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_SHOWWINDOW">
 <summary>Values used for lparam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SHOWWINDOW"/> message</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.zero">
 <summary>the message was sent because of a call to the ShowWindow function</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.SW_OTHERUNZOOM">
 <summary>The window is being uncovered because a maximize window was restored or minimized.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.SW_OTHERZOOM">
 <summary>The window is being covered by another window that has been maximized.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.SW_PARENTCLOSING">
 <summary>The window's owner window is being minimized.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_SHOWWINDOW.SW_PARENTOPENING">
 <summary>The window's owner window is being restored.</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_APPCOMMANDDevices">
 <summary>Device codes used by <see cref="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND"/></summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDDevices.FAPPCOMMAND_KEY">
 <summary>User pressed a key.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDDevices.FAPPCOMMAND_MASK">
 <summary>Mask used by <see cref="M:Tools.API.Messages.lParam.Macros.GET_DEVICE_LPARAM(System.Int32)"/></summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDDevices.FAPPCOMMAND_MOUSE">
 <summary>User clicked a mouse button.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDDevices.FAPPCOMMAND_OEM">
 <summary>An unidentified hardware source generated the event. It could be a mouse or a keyboard event.</summary>
</member>
<member name="T:Tools.API.Messages.lParam.WM_APPCOMMANDCommands">
 <summary>Application commands retrieved from lParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND"/> by <see cref="M:Tools.API.Messages.lParam.Macros.GET_APPCOMMAND_LPARAM(System.Int32)"/></summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BASS_BOOST">
 <summary>Toggle the bass boost on and off.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BASS_DOWN">
 <summary>Decrease the bass.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BASS_UP">
 <summary>	Increase the bass.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BROWSER_BACKWARD">
 <summary>	Navigate backward.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BROWSER_FAVORITES">
 <summary>	Open favorites.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BROWSER_FORWARD">
 <summary>	Navigate forward.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BROWSER_HOME">
 <summary>	Navigate home.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BROWSER_REFRESH">
 <summary>	Refresh page.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BROWSER_SEARCH">
 <summary>Open search.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_BROWSER_STOP">
 <summary>Stop download.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_LAUNCH_APP1">
 <summary>	Start App1.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_LAUNCH_APP2">
 <summary>	Start App2.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_LAUNCH_MAIL">
 <summary>	Open mail.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_LAUNCH_MEDIA_SELECT">
 <summary>	Go to Media Select mode.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_NEXTTRACK">
 <summary>Go to next track.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_PLAY_PAUSE">
 <summary>	Play or pause playback.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_PREVIOUSTRACK">
 <summary>Go to previous track.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_STOP">
 <summary>	Stop playback.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_TREBLE_DOWN">
 <summary>	Decrease the treble.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_TREBLE_UP">
 <summary>	Increase the treble.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_VOLUME_DOWN">
 <summary>	Lower the volume.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_VOLUME_MUTE">
 <summary>	Mute the volume.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_VOLUME_UP">
 <summary>	Raise the volume.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MICROPHONE_VOLUME_MUTE">
 <summary>Windows XP: Mute the microphone.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MICROPHONE_VOLUME_DOWN">
 <summary>Windows XP: Decrease microphone volume.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MICROPHONE_VOLUME_UP">
 <summary>	Windows XP: Increase microphone volume.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_CLOSE">
 <summary>Windows XP: Close the window (not the application).</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_COPY">
 <summary>Windows XP: Copy the selection.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_CORRECTION_LIST">
 <summary>Windows XP: Brings up the correction list when a word is incorrectly identified during speech input.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_CUT">
 <summary>Windows XP: Cut the selection.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE">
 <summary>Windows XP: Toggles between two modes of speech input: dictation and command/control (giving commands to an application or accessing menus).</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_FIND">
 <summary>Windows XP: Open the Find dialog.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_FORWARD_MAIL">
 <summary>Windows XP: Forward a mail message.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_HELP">
 <summary>Windows XP: Open the Help dialog.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_CHANNEL_DOWN">
 <summary>Windows XP SP1: Decrement the channel value, for example, for a TV or radio tuner.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_CHANNEL_UP">
 <summary>Windows XP SP1: Increment the channel value, for example, for a TV or radio tuner.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_FASTFORWARD">
 <summary>Windows XP SP1: Increase the speed of stream playback. This can be implemented in many ways, for example, using a fixed speed or toggling through a series of increasing speeds.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_PAUSE">
 <summary>Windows XP SP1: Pause. If already paused, take no further action. This is a direct PAUSE command that has no state. If there are discrete Play and Pause buttons, applications should take action on this command as well as APPCOMMAND_MEDIA_PLAY_PAUSE.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_PLAY">
 <summary>Windows XP SP1: Begin playing at the current position. If already paused, it will resume. This is a direct PLAY command that has no state. If there are discrete Play and Pause buttons, applications should take action on this command as well as APPCOMMAND_MEDIA_PLAY_PAUSE.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_RECORD">
 <summary>Windows XP SP1: Begin recording the current stream.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MEDIA_REWIND">
 <summary>Windows XP SP1: Go backward in a stream at a higher rate of speed. This can be implemented in many ways, for example, using a fixed speed or toggling through a series of increasing speeds.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_MIC_ON_OFF_TOGGLE">
 <summary>Windows XP: Toggle the microphone.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_NEW">
 <summary>Windows XP: Create a new window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_OPEN">
 <summary>Windows XP: Open a window.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_PASTE">
 <summary>Windows XP: Paste</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_PRINT">
 <summary>Windows XP: Print current document.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_REDO">
 <summary>Windows XP: Redo last action.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_REPLY_TO_MAIL">
 <summary>Windows XP: Reply to a mail message.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_SAVE">
 <summary>Windows XP: Save current document.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_SEND_MAIL">
 <summary>Windows XP: Send a mail message.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_SPELL_CHECK">
 <summary>Windows XP: Initiate a spell check.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_UNDO">
 <summary>Windows XP: Undo last action.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_DELETE">
 <summary>Windows Vista: Delete</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDCommands.APPCOMMAND_DWM_FLIP3D">
 <summary>Windows Vista: Flip 3D (as WinKey+Tab)</summary>
</member>
<member name="T:Tools.API.Messages.lParam.Macros">
 <summary>Defines macros used with lParams of windows messages</summary>
</member>
<member name="M:Tools.API.Messages.lParam.Macros.GET_APPCOMMAND_LPARAM(System.Int32)">
 <summary>retrieves the application command from the specified LPARAM value.</summary>
 <param name="lParam">Specifies the value to be converted. </param>
 <returns>The return value is the bits of the high-order word representing the application command.</returns>
</member>
<member name="M:Tools.API.Messages.lParam.Macros.GET_DEVICE_LPARAM(System.Int32)">
 <summary>retrieves the input device type from the specified LPARAM value</summary>
 <param name="lParam">Specifies the value to be converted. </param>
 <returns>The return value is the bit of the high-order word representing the input device type.</returns>
</member>
<member name="M:Tools.API.Messages.lParam.Macros.GET_KEYSTATE_LPARAM(System.Int32)">
 <summary>Retrieves the state of certain virtual keys from the specified LPARAM value.</summary>
 <param name="lParam">Specifies the value to be converted. </param>
 <returns>The return value is the low-order word representing the virtual key state.</returns>
</member>
<member name="M:Tools.API.Messages.lParam.Macros.CreateWM_CHAR(System.UInt16,System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>Composes value of type <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/> from its components</summary>
 <param name="repeatCount">The repeat count for the current message. The value is the number of times the keystroke is autorepeated as a result of the user holding down the key. If the keystroke is held long enough, multiple messages are sent. However, the repeat count is not cumulative.</param>
 <param name="scanCode">The scan code. The value depends on the OEM.</param>
 <param name="extendedKey">ndicates whether the key is an extended key, such as the right-hand ALT and CTRL keys that appear on an enhanced 101- or 102-key keyboard.</param>
 <param name="contextCode">The context code. For <see cref="F:Tools.API.Messages.WindowMessages.WM_CHAR"/>/<see cref="F:Tools.API.Messages.WindowMessages.WM_SYSCHAR"/> and WM_SYS... this is true when ALT key was hold while the key is pressed.</param>
 <param name="previousState">Indicate previous state of the key. True if it was pressed, false if it was up. So, this is always false fro DOWN messages and always true for UP messages.</param>
 <param name="transitionState">Transition state. True when key is being released, false if key is being pressed. So, this is always true for DOWN messages and always false for UP messages.</param>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="T:Tools.API.Messages.lParam.WM_APPCOMMANDKeyStates">
 <summary>State of certain virtual keys</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDKeyStates.MK_CONTROL">
 <summary>The CTRL key is down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDKeyStates.MK_LBUTTON">
 <summary>The left mouse button is down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDKeyStates.MK_MBUTTON">
 <summary>The middle mouse button is down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDKeyStates.MK_RBUTTON">
 <summary>The right mouse button is down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDKeyStates.MK_SHIFT">
 <summary>The SHIFT key is down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDKeyStates.MK_XBUTTON1">
 <summary>The first X button is down.</summary>
</member>
<member name="F:Tools.API.Messages.lParam.WM_APPCOMMANDKeyStates.MK_XBUTTON2">
 <summary>The second X button is down.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_COMPAREITEM">
 <summary>Return values used by the <see cref="F:Tools.API.Messages.WindowMessages.WM_COMPAREITEM"/> message</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_COMPAREITEM.Smaller">
 <summary>Item 1 precedes item 2 in the sorted order.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_COMPAREITEM.Equal">
 <summary>Items 1 and 2 are equivalent in the sorted order.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_COMPAREITEM.Greater">
 <summary>Item 1 follows item 2 in the sorted order.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE">
 <summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_DEVICECHANGE"/> message</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE.TRUE">
 <summary>Request granted</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE.BROADCAST_QUERY_DENY">
 <summary>Request denied</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_GETDLGCODE">
 <summary>Return values used by the <see cref="F:Tools.API.Messages.WindowMessages.WM_GETDLGCODE"/> message</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_BUTTON">
 <summary>Button.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_DEFPUSHBUTTON">
 <summary>Default push button.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_HASSETSEL">
 <summary>EM_SETSEL messages.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_RADIOBUTTON">
 <summary>Radio button.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_STATIC">
 <summary>Static control.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_UNDEFPUSHBUTTON">
 <summary>Non-default push button.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTALLKEYS">
 <summary>All keyboard input.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTARROWS">
 <summary>Direction keys.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTCHARS">
 <summary>WM_CHAR messages.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTMESSAGE">
 <summary>All keyboard input (the application passes this message in the MSG structure to the control).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETDLGCODE.DLGC_WANTTAB">
 <summary>TAB key.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high">
 <summary>Used for hight word of return value of <see cref="F:Tools.API.Messages.WindowMessages.WM_GETHOTKEY"/> message. It is also used as <see cref="T:System.Int16"/> for high-order word of wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SETHOTKEY"/> message.</summary>
 <remarks>You must left-shift by 24 bits this value before it can be used as return value, or use <see cref="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted"/> that can be directly or-ed with virtual key code. For <see cref="F:Tools.API.Messages.WindowMessages.WM_SETHOTKEY"/>'s wParam it must be left-shifted by 16 converted to <see cref="T:System.Int32"/> and then or-ed with low-order word of wParam.</remarks>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high.HOTKEYF_ALT">
 <summary>ALT key</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high.HOTKEYF_CONTROL">
 <summary>CTRL key</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high.HOTKEYF_EXT">
 <summary>Extended key</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high.HOTKEYF_SHIFT">
 <summary>SHIFT key</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted">
 <summary>Used to be or-ed with virtual key codes and returned as return value for <see cref="F:Tools.API.Messages.WindowMessages.WM_GETHOTKEY"/></summary>
 <remarks>Those values are 24-bits-left-shifted from original values (so they are placed in high byte of double-word) for high word of <see cref="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high"/></remarks>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted.HOTKEYF_ALT">
 <summary>ALT key</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted.HOTKEYF_CONTROL">
 <summary>CTRL key</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted.HOTKEYF_EXT">
 <summary>Extended key</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high_shifted.HOTKEYF_SHIFT">
 <summary>SHIFT key</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_MENUCHAR">
 <summary>Values used as return values for <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUCHAR"/> messages</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MENUCHAR.MNC_IGNORE">
 <summary>Informs the system that it should discard the character the user pressed and create a short beep on the system speaker.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MENUCHAR.MNC_CLOSE">
 <summary>Informs the system that it should close the active menu.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MENUCHAR.MNC_EXECUTE">
 <summary>Informs the system that it should choose the item specified in the low-order word of the return value. The owner window receives a WM_COMMAND message.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MENUCHAR.MNC_SELECT">
 <summary>Informs the system that it should select the item specified in the low-order word of the return value.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_MENUDRAG">
 <summary>Values used as return values for message <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUDRAG"/></summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MENUDRAG.MND_CONTINUE">
 <summary>Menu should remain active. If the mouse is released, it should be ignored.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MENUDRAG.MND_ENDMENU">
 <summary>	Menu should be ended.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_MENUGETOBJECT">
 <summary>Values used as return values for message <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUGETOBJECT"/></summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MENUGETOBJECT.MNGO_NOERROR">
 <summary>An interface pointer was returned in the pvObj member of MENUGETOBJECTINFO</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MENUGETOBJECT.MNGO_NOINTERFACE">
 <summary>The interface is not supported.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE">
 <summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEACTIVATE"/> message</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE.MA_ACTIVATE">
 <summary>	Activates the window, and does not discard the mouse message.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE.MA_ACTIVATEANDEAT">
 <summary>Activates the window, and discards the mouse message.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE.MA_NOACTIVATE">
 <summary>	Does not activate the window, and does not discard the mouse message.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE.MA_NOACTIVATEANDEAT">
 <summary>Does not activate the window, but discards the mouse message.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE">
 <summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_NCCALCSIZE"/> message</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.zero">
 <summary>A zero (0)</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_ALIGNTOP">
 <summary>Specifies that the client area of the window is to be preserved and aligned with the top of the new position of the window. For example, to align the client area to the upper-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_ALIGNRIGHT">
 <summary>	Specifies that the client area of the window is to be preserved and aligned with the right side of the new position of the window. For example, to align the client area to the lower-right corner, return the WVR_ALIGNRIGHT and WVR_ALIGNBOTTOM values.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_ALIGNLEFT">
 <summary>Specifies that the client area of the window is to be preserved and aligned with the bottom of the new position of the window. For example, to align the client area to the top-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_ALIGNBOTTOM">
 <summary>Specifies that the client area of the window is to be preserved and aligned with the bottom of the new position of the window. For example, to align the client area to the top-left corner, return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_HREDRAW">
 <summary>Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size horizontally. This value is similar to CS_HREDRAW class style</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_VREDRAW">
 <summary>Used in combination with any other values, except WVR_VALIDRECTS, causes the window to be completely redrawn if the client rectangle changes size vertically. This value is similar to CS_VREDRAW class style</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_REDRAW">
 <summary>This value causes the entire window to be redrawn. It is a combination of WVR_HREDRAW and WVR_VREDRAW values.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE.WVR_VALIDRECTS">
 <summary>This value indicates that, upon return from WM_NCCALCSIZE, the rectangles specified by the rgrc[1] and rgrc[2] members of the NCCALCSIZE_PARAMS structure contain valid destination and source area rectangles, respectively. The system combines these rectangles to calculate the area of the window to be preserved. The system copies any part of the window image that is within the source rectangle and clips the image to the destination rectangle. Both rectangles are in parent-relative or screen-relative coordinates. This flag cannot be combined with any other flags.</summary>
 <remarks>This return value allows an application to implement more elaborate client-area preservation strategies, such as centering or preserving a subset of the client area.</remarks>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_NCHITTEST">
 <summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_NCHITTEST"/> message</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTBORDER">
 <summary>	In the border of a window that does not have a sizing border.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTBOTTOM">
 <summary>In the lower-horizontal border of a resizable window (the user can click the mouse to resize the window vertically).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTBOTTOMLEFT">
 <summary>In the lower-left corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTBOTTOMRIGHT">
 <summary>In the lower-right corner of a border of a resizable window (the user can click the mouse to resize the window diagonally).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTCAPTION">
 <summary>	In a title bar.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTCLIENT">
 <summary>	In a client area.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTCLOSE">
 <summary>	In a Close button.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTERROR">
 <summary>On the screen background or on a dividing line between windows (same as HTNOWHERE, except that the DefWindowProc function produces a system beep to indicate an error).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTGROWBOX">
 <summary>	In a size box (same as HTSIZE).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTHELP">
 <summary>In a Help button.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTHSCROLL">
 <summary>In a horizontal scroll bar.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTLEFT">
 <summary>In the left border of a resizable window (the user can click the mouse to resize the window horizontally).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTMENU">
 <summary>	In a menu.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTMAXBUTTON">
 <summary>	In a Maximize button.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTMINBUTTON">
 <summary>	In a Minimize button.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTNOWHERE">
 <summary>On the screen background or on a dividing line between System.Windows.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTREDUCE">
 <summary>In a Minimize button.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTRIGHT">
 <summary>In the right border of a resizable window (the user can click the mouse to resize the window horizontally).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTSIZE">
 <summary>In a size box (same as HTGROWBOX).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTSYSMENU">
 <summary>In a window menu or in a Close button in a child window.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTTOP">
 <summary>In the upper-horizontal border of a window.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTTOPLEFT">
 <summary>	In the upper-left corner of a window border.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTTOPRIGHT">
 <summary>In the upper-right corner of a window border.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTTRANSPARENT">
 <summary>	In a window currently covered by another window in the same thread (the message will be sent to underlying windows in the same thread until one of them returns a code that is not HTTRANSPARENT).</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTVSCROLL">
 <summary>In the vertical scroll bar.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NCHITTEST.HTZOOM">
 <summary>In a Maximize button.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT">
 <summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_NOTIFYFORMAT"/> message</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT.NFR_ANSI">
 <summary>ANSI structures should be used in WM_NOTIFY messages sent by the control.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT.NFR_UNICODE">
 <summary>	Unicode structures should be used in WM_NOTIFY messages sent by the control.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT.zero">
 <summary>An error occurred.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_POWER">
 <summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_POWER"/> message</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_POWER.zero">
 <summary>If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDRESUME"/> or <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_CRITICALRESUME"/>, the return value is zero.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_OK">
 <summary>If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDREQUEST"/>, the return value is <see cref="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_OK"/> not to prevent the system from entering the suspended state.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_FAIL">
 <summary>If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDREQUEST"/>, the return value is <see cref="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_FAIL"/> to prevent the system from entering the suspended state.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST">
 <summary>Values used as return values for the <see cref="F:Tools.API.Messages.WindowMessages.WM_POWERBROADCAST"/> messag</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.TRUE">
 <summary>An application should return TRUE if it processes this message.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED">
 <summary>Windows Server 2003, Windows XP, and Windows 2000:  An application can return <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY"/> to deny a <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND"/> or <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED"/> request.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY">
 <summary>Windows Server 2003, Windows XP, and Windows 2000:  An application can return <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY"/> to deny a <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND"/> or <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED"/> request.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND">
 <summary>Windows Server 2003, Windows XP, and Windows 2000:  An application can return <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY"/> to deny a <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND"/> or <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED"/> request.</summary>
</member>
<member name="T:Tools.API.Messages.ReturnValues.WM_SETHOTKEY">
 <summary>Values used as return values for the <see cref="T:Tools.API.Messages.ReturnValues.WM_SETHOTKEY"/> message</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_SETHOTKEY.minus_1">
 <summary>The function is unsuccessful—the hot key is invalid.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_SETHOTKEY.zero">
 <summary>The function is unsuccessful—the window is invalid.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_SETHOTKEY.one">
 <summary>The function is successful, and no other window has the same hot key.</summary>
</member>
<member name="F:Tools.API.Messages.ReturnValues.WM_SETHOTKEY.two">
 <summary>The function is successful, but another window already has the same hot key.</summary>
</member>
<member name="T:Tools.API.Messages.WindowMessages">
 <summary>Window messages</summary>
 <version version="1.5.3">Added TCM_... (Tab control) and CCM_... (commmon control) messages</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ACTIVATE">
 <summary>The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word specifies whether the window is being activated or deactivated. This parameter can be one of the following values. The high-order word specifies the minimized state of the window being activated or deactivated. A nonzero value indicates the window is minimized. <seealso cref="T:Tools.API.Messages.wParam.WM_ACTIVATE"/></description></item>
 <item><term>lParam</term>
 <description>Handle to the window being activated or deactivated, depending on the value of the wParam parameter. If the low-order word of wParam is WA_INACTIVE, lParam is the handle to the window being activated. If the low-order word of wParam is WA_ACTIVE or WA_CLICKACTIVE, lParam is the handle to the window being deactivated. This handle can be NULL.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646274.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ACTIVATEAPP">
 <summary>The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies whether the window is being activated or deactivated. This parameter is TRUE if the window is being activated; it is FALSE if the window is being deactivated.</description></item>
 <item><term>lParam</term>
 <description>Specifies a thread identifier (a DWORD). If the wParam parameter is TRUE, lParam is the identifier of the thread that owns the window being deactivated. If wParam is FALSE, lParam is the identifier of the thread that owns the window being activated.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632614.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_AFXFIRST">
 <summary>The lowest value for AFX message.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_AFXLAST">
 <summary>The highest value for AFX message.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_APP">
 <summary>The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.</summary>
 <remarks>The WM_APP constant is used to distinguish between message values that are reserved for use by the system and values that can be used by an application to send messages within a private window class. The following are the ranges of message numbers available.
 <list type="table">
 <listheader><term>Range</term><description>Meaning</description></listheader>
 <item><term>0 through <see cref="F:Tools.API.Messages.WindowMessages.WM_USER"/> - 1</term>
 <description>Messages reserved for use by the system.</description></item>
 <item><term><see cref="F:Tools.API.Messages.WindowMessages.WM_USER"/> through <see cref="F:Tools.API.Messages.WindowMessages.X7FFF"/></term>
 <description>Integer messages for use by private window classes.</description></item>
 <item><term><see cref="F:Tools.API.Messages.WindowMessages.WM_APP"/> throught <see cref="F:Tools.API.Messages.WindowMessages.XBFFF"/></term>
 <description>Messages available for use by applications.</description></item>
 <item><term><see cref="F:Tools.API.Messages.WindowMessages.XC000"/> through <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/></term>
 <description>String messages for use by applications.</description></item>
 <item><term>Greater than <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/></term>
 <description>Reserved by the system.</description></item>
 </list><seealso></seealso>
 </remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND">
 <summary>The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the window where the user clicked the button or pressed the key. This can be a child window of the window receiving the message. For more information about processing this message, see the Remarks section.</description></item>
 <item><term>lParam</term>
 <description>Use the following code to get the information contained in the lParam parameter.
 <code language="C++"><![CDATA[cmd  = GET_APPCOMMAND_LPARAM(lParam);
 uDevice = GET_DEVICE_LPARAM(lParam);
 dwKeys = GET_KEYSTATE_LPARAM(lParam);]]></code></description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE. For more information about processing the return value, see the Remarks section.</description></item>
 </list>
 <para>DefWindowProc generates the <see cref="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND"/> message when it processes the <see cref="F:Tools.API.Messages.WindowMessages.WM_XBUTTONUP"/> or <see cref="F:Tools.API.Messages.WindowMessages.WM_NCXBUTTONUP"/> message, or when the user types an application command key.</para>
 <para>If a child window does not process this message and instead calls DefWindowProc, DefWindowProc will send the message to its parent window. If a top level window does not process this message and instead calls DefWindowProc, DefWindowProc will call a shell hook with the hook code equal to HSHELL_APPCOMMAND.</para>
 <para>To get the coordinates of the cursor if the message was generated by a button click on the mouse, the application can call GetMessagePos. An application can test whether the message was generated by the mouse by checking whether lParam contains FAPPCOMMAND_MOUSE.</para>
 <para>Unlike other windows messages, an application should return TRUE from this message if it processes it. Doing so will allow software that simulates this message on Microsoft Windows systems earlier than Windows 2000 to determine whether the window procedure processed the message or called DefWindowProc to process it.</para>
 </remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ASKCBFORMATNAME">
 <summary>The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the size, in characters, of the buffer pointed to by the lParam parameter.</description></item>
 <item><term>lParam</term>
 <description>Pointer to the buffer that is to receive the clipboard format name.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649018.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CANCELJOURNAL">
 <summary>The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.</summary>
 <remarks><list type="table">
 <item><term>Return value</term>
 <description>This message does not return a value. It is meant to be processed from within an application's main loop or a GetMessage hook procedure, not from a window procedure.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644971.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CANCELMODE">
 <summary>The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632615.aspx</seealso>
 When the WM_CANCELMODE message is sent, the DefWindowProc function cancels internal processing of standard scroll bar input, cancels internal menu processing, and releases the mouse capture.</remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CAPTURECHANGED">
 <summary>The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used. </description></item>
 <item><term>lParam</term>
 <description>Handle to the window gaining the mouse capture.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645605.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CHANGECBCHAIN">
 <summary>The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the window being removed from the clipboard viewer chain.</description></item>
 <item><term>lParam</term>
 <description>Handle to the next window in the chain following the window being removed. This parameter is NULL if the window being removed is the last window in the chain.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649019.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CHANGEUISTATE">
 <summary>An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word specifies the action to be taken. This member can be one of the following values: <seealso cref="T:Tools.API.Messages.wParam.WM_CHANGEUISTATE"/></description></item>
 <item><term>lParam</term>
 <description>Not used. Must be set to 0.</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646342.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CHARTOITEM">
 <summary>Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word specifies the value of the key the user pressed. The high-order word specifies the current position of the caret.</description></item>
 <item><term>lParam</term>
 <description>Handle to the list box.</description></item>
 <item><term>Return value</term>
 <description>The return value specifies the action that the application performed in response to the message. A return value of –1 or –2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box. A return value of 0 or greater specifies the zero-based index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the specified item.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb761358.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CHILDACTIVATE">
 <summary>The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632616.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CLEAR">
 <summary>An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>This message does not return a value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649020.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CLOSE">
 <summary>The WM_CLOSE message is sent as a signal that a window or an application should terminate.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632617.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_COMMAND">
 <summary>The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>If high word is 0 (message source is menu) or 1 (message source is accelerator), low word is one of <see cref="T:Tools.API.Messages.wParam.WM_COMMAND_low"/> constants (menu identifier or acceleretor identifier). If high word is control-defined notification code (source of message is control), low word is control identifier.</description></item>
 <item><term>lParam</term>
 <description>If high word of wParam is not control defined, low word is zero, otherwise it is handle to control window.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647591.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_COMPACTING">
 <summary>The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
 A window receives this message through its WindowProc function. </summary>
 <remarks>This message is provided only for compatibility with 16-bit Microsoft Windows-based applications.
 <list type="table">
 <item><term>wParam</term>
 <description>Specifies the ratio of central processing unit (CPU) time currently spent by the system compacting memory to CPU time currently spent by the system performing other operations. For example, 0x8000 represents 50 percent of CPU time spent compacting memory.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632618.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_COMPAREITEM">
 <summary>The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the identifier of the control that sent the WM_COMPAREITEM message.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a COMPAREITEMSTRUCT structure that contains the identifiers and application-supplied data for two items in the combo or list box.</description></item>
 <item><term>Return value</term>
 <description>The return value indicates the relative position of the two items. It may be any of the values from <see cref="T:Tools.API.Messages.ReturnValues.WM_COMPAREITEM"/></description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb775921.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CONTEXTMENU">
 <summary>The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the window in which the user right-clicked the mouse. This can be a child window of the window receiving the message. For more information about processing this message, see the Remarks section.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the horizontal position of the cursor, in screen coordinates, at the time of the mouse click.
 The high-order word specifies the vertical position of the cursor, in screen coordinates, at the time of the mouse click. </description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647592.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_COPY">
 <summary>An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>This message does not return a value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649022.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_COPYDATA">
 <summary>An application sends the WM_COPYDATA message to pass data to another application.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the window passing the data.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a COPYDATASTRUCT structure that contains the data to be passed.</description></item>
 <item><term>Return value</term>
 <description>If the receiving application processes this message, it should return TRUE; otherwise, it should return FALSE.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649011.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CREATE">
 <summary>The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a CREATESTRUCT structure that contains information about the window being created.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero to continue creation of the window. If the application returns –1, the window is destroyed and the CreateWindowEx or CreateWindow function returns a NULL handle.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632619.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORBTN">
 <summary>The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>A handle to the display context for the button.</description></item>
 <item><term>lParam</term>
 <description>A handle to the button.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it must return a handle to a brush. The system uses the brush to paint the background of the button. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb761849.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORDLG">
 <summary>The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the device context for the dialog box.</description></item>
 <item><term>lParam</term>
 <description>Handle to the dialog box.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it must return a handle to a brush. The system uses the brush to paint the background of the dialog box.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645417.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLOREDIT">
 <summary>An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>A handle to the device context for the edit control window.</description></item>
 <item><term>lParam</term>
 <description>A handle to the edit control.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it must return the handle of a brush. The system uses the brush to paint the background of the edit control.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb761691.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORLISTBOX">
 <summary>Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the device context for the list box.</description></item>
 <item><term>lParam</term>
 <description>Handle to the list box.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it must return a handle to a brush. The system uses the brush to paint the background of the list box.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb761360.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORMSGBOX">
 <summary>The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Value of wParam. Identifies the device context for the message box. </description></item>
 <item><term>lParam</term>
 <description>Value of lParam. Identifies the message box.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it must return the handle of a brush. Windows uses the brush to paint the background of the message box.</description></item>
 </list><seealso>http://www.piclist.com/techref/os/win/api/win32/mess/src/msg23.htm</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORSCROLLBAR">
 <summary>This message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the specified display context handle to set the background color of the scroll bar control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the device context for the scroll bar control.</description></item>
 <item><term>lParam</term>
 <description>Handle to the scroll bar.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it must return the handle to a brush. The system uses the brush to paint the background of the scroll bar control.
 Default Action: The DefWindowProc function selects the default system colors for the scroll bar control.</description></item>
 </list><seealso>http://mtbeta.msdn.microsoft.com/en-us/library/aa931510.aspx?altlang=en-us</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CTLCOLORSTATIC">
 <summary>A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the device context for the static control window.</description></item>
 <item><term>lParam</term>
 <description>Handle to the static control.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, the return value is a handle to a brush that the system uses to paint the background of the static control.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb787524.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CUT">
 <summary>An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>This message does not return a value. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649023.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DEADCHAR">
 <summary>The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the character code generated by the dead key.</description></item>
 <item><term>lParam</term>
 <description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown by <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646277.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DELETEITEM">
 <summary>Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the identifier of the control that sent the WM_DELETEITEM message.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a DELETEITEMSTRUCT structure that contains information about the item deleted from a list box.</description></item>
 <item><term>Return value</term>
 <description>An application should return TRUE if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb761362.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DESTROY">
 <summary>The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
 This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632620.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DESTROYCLIPBOARD">
 <summary>The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649024.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DEVICECHANGE">
 <summary>Notifies an application of a change to the hardware configuration of a device or the computer.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The event that has occurred. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_DEVICECHANGE"/> values from the Dbt.h header file.</description></item>
 <item><term>lParam</term>
 <description>A pointer to a structure that contains event-specific data. Its format depends on the value of the wParam parameter. For more information, refer to the documentation for each event.</description></item>
 <item><term>Return value</term>
 <description>Return <see cref="F:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE.TRUE"/> to grant the request.
 Return <see cref="F:Tools.API.Messages.ReturnValues.WM_DEVICECHANGE.BROADCAST_QUERY_DENY"/> to deny the request.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/aa363480.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DEVMODECHANGE">
 <summary>The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a string that specifies the device name.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms533204.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DISPLAYCHANGE">
 <summary>The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the new image depth of the display, in bits per pixel.</description></item>
 <item><term>lParam</term>
 <description></description>The low-order word specifies the horizontal resolution of the screen.
 The high-order word specifies the vertical resolution of the screen. </item>
 <item><term>Return value</term>
 <description>N/A</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms534847.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DRAWCLIPBOARD">
 <summary>The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649025.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DRAWITEM">
 <summary>The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the identifier of the control that sent the WM_DRAWITEM message. If the message was sent by a menu, this parameter is zero.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a DRAWITEMSTRUCT structure containing information about the item to be drawn and the type of drawing required.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb775923.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_DROPFILES">
 <summary>Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>A handle to an internal structure describing the dropped files. Pass this handle DragFinish, DragQueryFile, or DragQueryPoint to retrieve information about the dropped files.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb774303.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ENABLE">
 <summary>The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies whether the window has been enabled or disabled. This parameter is TRUE if the window has been enabled or FALSE if the window has been disabled.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632621.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ENDSESSION">
 <summary>The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>If the session is being ended, this parameter is TRUE; the session can end any time after all applications have returned from processing this message. Otherwise, it is FALSE.</description></item>
 <item><term>lParam</term>
 <description>This parameter can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_ENDSESSION"/> values. If this parameter is 0, the system is shutting down or restarting (it is not possible to determine which event is occurring).
 Note that this parameter is a bit mask. To test for this value, use a bit-wise operation; do not test for equality.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso></seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ENTERIDLE">
 <summary>The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies whether the message is the result of a dialog box or a menu being displayed. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_ENTERIDLE"/> values.</description></item>
 <item><term>lParam</term>
 <description>Handle to the dialog box (if wParam is MSGF_DIALOGBOX) or window containing the displayed menu (if wParam is MSGF_MENU).</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645422.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ENTERMENULOOP">
 <summary>The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>    Specifies whether the window menu was entered using the TrackPopupMenu function. This parameter has a value of TRUE if the window menu was entered using TrackPopupMenu, and FALSE if it was not.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647595.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ENTERSIZEMOVE">
 <summary>The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
 The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632622.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ERASEBKGND">
 <summary>The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the device context.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return nonzero if it erases the background; otherwise, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms648055.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_EXITMENULOOP">
 <summary>The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies whether the menu is a shortcut menu. This parameter has a value of TRUE if it is a shortcut menu, FALSE if it is not.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647599.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_EXITSIZEMOVE">
 <summary>The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632623.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_FONTCHANGE">
 <summary>An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
 To send this message, call the SendMessage function with the following parameters. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>lParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>Return value</term>
 <description>N/A</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms533930.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_GETDLGCODE">
 <summary>The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The virtual key, pressed by the user, that prompted Microsoft Windows to issue this notification. The handler must selectively handle these keys. For instance, the handler might accept and process VK_RETURN but delegate VK_TAB to the owner window.</description></item>
 <item><term>lParam</term>
 <description>Pointer to an MSG structure (or NULL if the system is performing a query).</description></item>
 <item><term>Return value</term>
 <description>The return value is one or more of the <see cref="T:Tools.API.Messages.ReturnValues.WM_GETDLGCODE"/> values, indicating which type of input the application processes.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645425.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_GETFONT">
 <summary>An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>The return value is a handle to the font used by the control, or NULL if the control is using the system font. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632624.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_GETHOTKEY">
 <summary>An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>The return value is the virtual-key code and modifiers for the hot key, or NULL if no hot key is associated with the window. The virtual-key code is in the low byte of the return value and the modifiers are in the high byte. The modifiers can be a combination of the <see cref="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high"/> flags.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646278.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_GETICON">
 <summary>The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the type of icon being retrieved. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_GETICON"/> values.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>The return value is a handle to the large or small icon, depending on the value of wParam. When an application receives this message, it can return a handle to a large or small icon, or pass the message to the DefWindowProc function.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632625.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_GETMINMAXINFO">
 <summary>The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>    Pointer to a MINMAXINFO structure that contains the default maximized position and dimensions, and the default minimum and maximum tracking sizes. An application can override the defaults by setting the members of this structure.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632626.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_GETOBJECT">
 <summary>Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application.
 Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Provides additional information about the message and is used only by the system. Servers pass dwFlags as the wParam parameter in the call to LresultFromObject when handling the message.</description></item>
 <item><term>lParam</term>
 <description>Object identifier. This value is one of the object identifier constants or a custom object identifier. Servers usually process WM_GETOBJECT only if the dwObjId is OBJID_CLIENT.</description></item>
 <item><term>Return value</term>
 <description>The return value depends on whether the window or control that receives the message implements IAccessible:
 <list type="list"><item>If implementing IAccessible for the object, the application returns the result obtained from LresultFromObject.</item>
 <item>If not implementing IAccessible, or if dwObjID is not OBJID_CLIENT, server applications should allow the message to pass to DefWindowProc.</item>
 </list></description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms696155.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_GETTEXT">
 <summary>An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the maximum number of TCHARs to be copied, including the terminating null character.
 Windows NT/2000/XP:ANSI applications may have the string in the buffer reduced in size (to a minimum of half that of the wParam value) due to conversion from ANSI to Unicode. </description></item>
 <item><term>lParam</term>
 <description>Pointer to the buffer that is to receive the text.</description></item>
 <item><term>Return value</term>
 <description>    The return value is the number of TCHARs copied, not including the terminating null character.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632627.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_GETTEXTLENGTH">
 <summary>An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used and must be zero.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used and must be zero.</description></item>
 <item><term>Return value</term>
 <description>The return value is the length of the text in TCHARs, not including the terminating null character. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632628.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_HANDHELDFIRST">
 <summary>The lowest value for handheld message.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_HANDHELDLAST">
 <summary>The highest value for handheld message.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_HELP">
 <summary>Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>The address of a HELPINFO structure that contains information about the menu item, control, dialog box, or window for which Help is requested.</description></item>
 <item><term>Return value</term>
 <description>Returns TRUE.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb774305.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_HOTKEY">
 <summary>The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the identifier of the hot key that generated the message. If the message was generated by a system-defined hot key, this parameter will be one of the <see cref="T:Tools.API.Messages.wParam.WM_HOTKEY"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the keys that were to be pressed in combination with the key specified by the high-order word to generate the WM_HOTKEY message. This word can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_HOTKEY_low"/> values. The high-order word specifies the virtual key code of the hot key.</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646279.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_HSCROLL">
 <summary>The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word specifies a scroll bar value that indicates the user's scrolling request. This word can be one of the <see cref="T:Tools.API.Messages.wParam.WM_HSCROLL_low"/> values.
 The high-order word specifies the current position of the scroll box if the low-order word is SB_THUMBPOSITION or SB_THUMBTRACK; otherwise, this word is not used.</description></item>
 <item><term>lParam</term>
 <description>If the message is sent by a scroll bar, then this parameter is the handle to the scroll bar control. If the message is not sent by a scroll bar, this parameter is NULL.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb787575.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_HSCROLLCLIPBOARD">
 <summary>The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the clipboard viewer window.</description></item>
 <item><term>lParam</term>
 <description>The low-order word of lParam specifies a scroll bar event. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_HSCROLL_low"/> values. The high-order word of lParam specifies the current position of the scroll box if the low-order word of lParam is SB_THUMBPOSITION; otherwise, the high-order word is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649026.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_ICONERASEBKGND">
 <summary>Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of System.Windows.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the device context of the icon.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return nonzero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms648056.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_CHAR">
 <summary>Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>DBCS: A single- or double-byte character value. For a double-byte character, (BYTE)(wParam >> 8) contains the lead byte. Note that the parentheses are necessary because the cast operator has higher precedence than the shift operator.
 Unicode: A Unicode character value. </description></item>
 <item><term>lParam</term>
 <description>The repeat count, scan code, extended key flag, context code, previous key state flag, and transition state flag, with values as defined in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
 <item><term>Return value</term>
 <description>N/A</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776090.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_COMPOSITION">
 <summary>Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>DBCS character representing the latest change to the composition string.</description></item>
 <item><term>lParam</term>
 <description>Value specifying how the composition string or character changed. This parameter can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_IME_COMPOSITION"/> values. For more information about these values, see IME Composition String Values (http://msdn2.microsoft.com/en-us/library/ms776087.aspx).</description></item>
 <item><term>Return value</term>
 <description>This message has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776172.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_COMPOSITIONFULL">
 <summary>Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>lParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>Return value</term>
 <description>This message has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776188.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_CONTROL">
 <summary>Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.</summary>
 <remarks>The command. This parameter can have one of the following values:<list type="table">
 <item><term>wParam</term>
 <description>The command. This parameter can have one of the <see cref="T:Tools.API.Messages.wParam.WM_IME_CONTROL"/> values.</description></item>
 <item><term>lParam</term>
 <description>Command-specific data, with format dependent on the value of the wParam parameter. For more information, refer to the documentation for each command.</description></item>
 <item><term>Return value</term>
 <description>The message returns a command-specific value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776174.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_ENDCOMPOSITION">
 <summary>Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>lParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>Return value</term>
 <description>This message has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776081.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_KEYDOWN">
 <summary>Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Virtual key code of the key.</description></item>
 <item><term>lParam</term>
 <description>Repeat count, scan code, extended key flag, context code, previous key state flag, and transition state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
 <item><term>Return value</term>
 <description>An application should return 0 if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776177.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_KEYLAST">
 <summary>The highest value of IME keyboard message.</summary>
 <remarks>Note: There is no WM_IME_KEYFIRST</remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_KEYUP">
 <summary>Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Virtual key code of the key.</description></item>
 <item><term>lParam</term>
 <description>Repeat count, scan code, extended key flag, context code, previous key state flag, and transition state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/> .</description></item>
 <item><term>Return value</term>
 <description>An application should return 0 if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776074.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_NOTIFY">
 <summary>Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The command. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_IME_NOTIFY"/>.</description></item>
 <item><term>lParam</term>
 <description>Command-specific data, with format dependent on the value of the wParam parameter. For more information, refer to the documentation for each command.</description></item>
 <item><term>Return value</term>
 <description>The return value depends on the command sent.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776096.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_REQUEST">
 <summary>Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Command. This parameter can have one of the <see cref="T:Tools.API.Messages.wParam.WM_IME_REQUEST"/> values.</description></item>
 <item><term>lParam</term>
 <description>Command-specific data. For more information, see the description for each command.</description></item>
 <item><term>Return value</term>
 <description>Returns a command-specific value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776130.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_SELECT">
 <summary>Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Selection indicator. This parameter specifies TRUE if the indicated IME is selected. The parameter is set to FALSE if the specified IME is no longer selected.</description></item>
 <item><term>lParam</term>
 <description>Input locale identifier associated with the IME.</description></item>
 <item><term>Return value</term>
 <description>This message has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776083.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_SETCONTEXT">
 <summary>Sent to an application when a window is activated. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>TRUE if the window is active, and FALSE otherwise.</description></item>
 <item><term>lParam</term>
 <description>isplay options. This parameter can have one or more of the <see cref="T:Tools.API.Messages.lParam.WM_IME_SETCONTEXT"/> values:</description></item>
 <item><term>Return value</term>
 <description>Returns the value returned by DefWindowProc or ImmIsUIMessage.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776117.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_IME_STARTCOMPOSITION">
 <summary>Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>lParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>Return value</term>
 <description>This message has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776181.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_INITDIALOG">
 <summary>The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the control to receive the default keyboard focus. The system assigns the default keyboard focus only if the dialog box procedure returns TRUE.</description></item>
 <item><term>lParam</term>
 <description>Specifies additional initialization data. This data is passed to the system as the lParam parameter in a call to the CreateDialogIndirectParam, CreateDialogParam, DialogBoxIndirectParam, or DialogBoxParam function used to create the dialog box. For property sheets, this parameter is a pointer to the PROPSHEETPAGE structure used to create the page. This parameter is zero if any other dialog box creation function is used.</description></item>
 <item><term>Return value</term>
 <description>The dialog box procedure should return TRUE to direct the system to set the keyboard focus to the control specified by wParam. Otherwise, it should return FALSE to prevent the system from setting the default keyboard focus.
 The dialog box procedure should return the value directly. The DWL_MSGRESULT value set by the SetWindowLong function is ignored. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645428.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_INITMENU">
 <summary>The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the menu to be initialized.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646344.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_INITMENUPOPUP">
 <summary>The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the drop-down menu or submenu.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the zero-based relative position of the menu item that opens the drop-down menu or submenu.
 The high-order word indicates whether the drop-down menu is the window menu. If the menu is the window menu, this parameter is TRUE; otherwise, it is FALSE. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646347.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_INPUT">
 <summary>The WM_INPUT message is sent to the window that is getting raw input. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Input code. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_INPUT"/> values. </description></item>
 <item><term>lParam</term>
 <description>Handle to the <see cref="T:Tools.API.RawInput.RAWINPUT_Marshalling"/> structure that contains the raw input from the device. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><para>To get the wParam value, use the GET_RAWINPUT_CODE_WPARAM macro.</para>
 <para>Note that lParam has the handle to the RAWINPUT structure, not a pointer to it. To get the raw data, use the handle in the call to GetRawInputData.</para>
 <para>Raw input is available only when the application calls RegisterRawInputDevices with valid device specifications</para></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_INPUTLANGCHANGE">
 <summary>The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child System.Windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the character set of the new locale.</description></item>
 <item><term>lParam</term>
 <description>Input locale identifier. For more information, see Languages, Locales, and Keyboard Layouts.</description></item>
 <item><term>Return value</term>
 <description>An application should return nonzero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632629.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_INPUTLANGCHANGEREQUEST">
 <summary>The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Information about the new input locale. This parameter can be a combination of the <see cref="T:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST"/> flags.</description></item>
 <item><term>lParam</term>
 <description>Input locale identifier. For more information, see Languages, Locales, and Keyboard Layouts.</description></item>
 <item><term>Return value</term>
 <description>This message is posted, not sent, to the application, so the return value is ignored. To accept the change, the application should pass the message to DefWindowProc. To reject the change, the application should return zero without calling DefWindowProc.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632630.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN">
 <summary>WM_KEYDOWN</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the virtual-key code of the nonsystem key.</description></item>
 <item><term>lParam</term>
 <description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/> table.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646280.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_KEYFIRST">
 <summary>This message filters for keyboard messages. (This is the lowest value of keyboard message.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used.</description></item>
 <item><term>lParam</term>
 <description>Not used.</description></item>
 <item><term>Return value</term>
 <description>None.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/aa931746.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_KEYLAST">
 <summary>This message filters for keyboard messages. (This is the highest value of keyboard message)</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used.</description></item>
 <item><term>lParam</term>
 <description>Not used.</description></item>
 <item><term>Return value</term>
 <description>None.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/aa453875.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_KEYUP">
 <summary>The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the virtual-key code of the nonsystem key.</description></item>
 <item><term>lParam</term>
 <description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646281.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_CHAR">
 <summary>The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the character code of the key.</description></item>
 <item><term>lParam</term>
 <description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646276.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SYSKEYDOWN">
 <summary>The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the virtual-key code of the key being pressed.</description></item>
 <item><term>lParam</term>
 <description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in the <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646286.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SYSKEYUP">
 <summary>The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the virtual-key code of the key being released.</description></item>
 <item><term>lParam</term>
 <description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in the <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646287.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SYSCHAR">
 <summary>The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the character code of the window menu key.</description></item>
 <item><term>lParam</term>
 <description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in the <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646357.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_KILLFOCUS">
 <summary>The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the window that receives the keyboard focus. This parameter can be NULL.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646282.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDBLCLK">
 <summary>The <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDBLCLK"/> message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645606.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDOWN">
 <summary>The <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDOWN"/> message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645607.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_LBUTTONUP">
 <summary>The <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONUP"/> message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645608.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDBLCLK">
 <summary>The <see cref="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDBLCLK"/> message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645609.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDOWN">
 <summary>The <see cref="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDOWN"/> message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645610.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MBUTTONUP">
 <summary>The <see cref="F:Tools.API.Messages.WindowMessages.WM_MBUTTONUP"/> message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645611.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_RBUTTONDBLCLK">
 <summary>The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646241.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_RBUTTONDOWN">
 <summary>The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646242.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_RBUTTONUP">
 <summary>The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646243.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_XBUTTONDBLCLK">
 <summary>The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word indicates whether various virtual keys are down. It can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.
 The high-order word indicates which button was double-clicked. It can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE. For more information about processing the return value, see the Remarks section (http://msdn2.microsoft.com/en-us/library/ms646244.aspx).</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646244.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_XBUTTONDOWN">
 <summary>The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word indicates whether various virtual keys are down. It can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.
 The high-order word indicates which button was clicked. It can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE. For more information about processing the return value, see the Remarks section (http://msdn2.microsoft.com/en-us/library/ms646245.aspx).</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646245.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_XBUTTONUP">
 <summary>The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word indicates whether various virtual keys are down. It can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.
 The high-order word indicates which button was double-clicked. It can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE. For more information about processing the return value, see the Remarks section.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646246.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDIACTIVATE">
 <summary>An application sends the <see cref="F:Tools.API.Messages.WindowMessages.WM_MDIACTIVATE"/> message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the MDI child window to be activated.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application sends this message to an MDI client window, the return value is zero.
 An MDI child window should return zero if it processes this message. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644911.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDICASCADE">
 <summary>An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the cascade behavior. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_MDICASCADE"/> values.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If the message succeeds, the return value is TRUE.
 If the message fails, the return value is FALSE. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644912.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDICREATE">
 <summary>An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Pointer to an MDICREATESTRUCT structure containing information that the system uses to create the MDI child window.</description></item>
 <item><term>Return value</term>
 <description>If the message succeeds, the return value is the handle to the new child window.
 If the message fails, the return value is NULL. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644913.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDIDESTROY">
 <summary>An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the MDI child window to be closed.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>This message always returns zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644914.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDIGETACTIVE">
 <summary>An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Specifies the maximized state. If this parameter is not NULL, it is a pointer to a value that indicates the maximized state of the MDI child window. If the value is TRUE, the window is maximized; a value of FALSE indicates that it is not. If this parameter is NULL, the parameter is ignored.</description></item>
 <item><term>Return value</term>
 <description>The return value is the handle to the active MDI child window. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644915.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDIICONARRANGE">
 <summary>An application sends the WM_MDIICONARRANGE message to a multiple document interface (MDI) client window to arrange all minimized MDI child System.Windows. It does not affect child windows that are not minimized.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>not used; must be zero </description></item>
 <item><term>lParam</term>
 <description>not used; must be zero </description></item>
 <item><term>Return value</term>
 <description>N/A</description></item>
 </list><seealso>http://www.piclist.com/techref/os/win/api/win32/mess/src/msg25_16.htm</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDIMAXIMIZE">
 <summary>An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the MDI child window to be maximized.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>The return value is always zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644917.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDINEXT">
 <summary>An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the MDI child window. The system activates the child window that is immediately before or after the specified child window, depending on the value of the lParam parameter. If the wParam parameter is NULL, the system activates the child window that is immediately before or after the currently active child window.</description></item>
 <item><term>lParam</term>
 <description>If this parameter is zero, the system activates the next MDI child window and places the child window identified by the wParam parameter behind all other child System.Windows. If this parameter is nonzero, the system activates the previous child window, placing it in front of the child window identified by wParam.</description></item>
 <item><term>Return value</term>
 <description>The return value is always zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644918.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDIREFRESHMENU">
 <summary>An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>If the message succeeds, the return value is the handle to the frame window menu.
 If the message fails, the return value is NULL. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644919.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDIRESTORE">
 <summary>An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the MDI child window to be restored.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>The return value is always zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644920.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDISETMENU">
 <summary>Handle to the new frame window menu. If this parameter is NULL, the frame window menu is not changed.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the new frame window menu. If this parameter is NULL, the frame window menu is not changed.</description></item>
 <item><term>lParam</term>
 <description>Handle to the new window menu. If this parameter is NULL, the window menu is not changed.</description></item>
 <item><term>Return value</term>
 <description>If the message succeeds, the return value is the handle to the old frame window menu.
 If the message fails, the return value is zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644921.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MDITILE">
 <summary>An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the tiling option. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_MDITILE"/> values, optionally combined with MDITILE_SKIPDISABLED to prevent disabled MDI child windows from being tiled.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If the message succeeds, the return value is TRUE.
 If the message fails, the return value is FALSE. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644922.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MEASUREITEM">
 <summary>The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Contains the value of the CtlID member of the MEASUREITEMSTRUCT structure pointed to by the lpMeasureItem parameter. This value identifies the control that sent the WM_MEASUREITEM message. If the value is zero, the message was sent by a menu. If the value is nonzero, the message was sent by a combo box or by a list box. If the value is nonzero, and the value of the itemID member of the MEASUREITEMSTRUCT pointed to by lpMeasureItem is (UINT) –1, the message was sent by a combo edit field.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a MEASUREITEMSTRUCT structure that contains the dimensions of the owner-drawn control or menu item.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb775925.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MENUCHAR">
 <summary>The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word specifies the character code that corresponds to the key the user pressed.
 The high-order word specifies the active menu type. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_MENUCHAR_high"/> values.</description></item>
 <item><term>lParam</term>
 <description>Handle to the active menu.</description></item>
 <item><term>Return value</term>
 <description>An application that processes this message should return one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_MENUCHAR"/> values in the high-order word of the return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646349.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MENUCOMMAND">
 <summary>The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the zero-based index of the item selected.
 Windows 98/Me: The high word is the zero-based index of the item selected. The low word is the item ID. </description></item>
 <item><term>lParam</term>
 <description>Handle to the menu for the item selected.</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647603.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MENUDRAG">
 <summary>The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the position of the item where the drag operation began.</description></item>
 <item><term>lParam</term>
 <description>Handle to the menu containing the item.</description></item>
 <item><term>Return value</term>
 <description>The application should return one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_MENUDRAG"/> values.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647606.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MENUGETOBJECT">
 <summary>The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a MENUGETOBJECTINFO structure.</description></item>
 <item><term>Return value</term>
 <description>The application should return one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_MENUGETOBJECT"/> values.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647607.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MENURBUTTONUP">
 <summary>The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the position of the item when the mouse was released.</description></item>
 <item><term>lParam</term>
 <description>Handle to the menu containing the item.</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647610.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MENUSELECT">
 <summary>The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word specifies the menu item or submenu index. If the selected item is a command item, this parameter contains the identifier of the menu item. If the selected item opens a drop-down menu or submenu, this parameter contains the index of the drop-down menu or submenu in the main menu, and the lParam parameter contains the handle to the main (clicked) menu; use the GetSubMenu function to get the menu handle to the drop-down menu or submenu.
 The high-order word specifies one or more menu flags. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_MENUSELECT_high"/> values.</description></item>
 <item><term>lParam</term>
 <description>Handle to the menu that was clicked.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646352.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEACTIVATE">
 <summary>The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the top-level parent window of the window being activated.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.
 The high-order word specifies the identifier of the mouse message generated when the user pressed a mouse button. The mouse message is either discarded or posted to the window, depending on the return value.</description></item>
 <item><term>Return value</term>
 <description>The return value specifies whether the window should be activated and whether the identifier of the mouse message should be discarded. It must be one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_MOUSEACTIVATE"/> values.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645612.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEFIRST">
 <summary>Lowest value of mouse message</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEHOVER">
 <summary>The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645613.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOUSELAST">
 <summary>Highest value of mouse message</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOUSELEAVE">
 <summary>The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645615.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEMOVE">
 <summary>The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645616.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEWHEEL">
 <summary>The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The high-order word indicates the distance the wheel is rotated, expressed in multiples or divisions of WHEEL_DELTA, which is 120. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user.
 The low-order word indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values (but <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> are <see cref="T:System.Int32">Integers</see> while low-order word is <see cref="T:System.Int16"/>). </description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the pointer, relative to the upper-left corner of the screen.
 The high-order word specifies the y-coordinate of the pointer, relative to the upper-left corner of the screen. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645617.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOUSEHWHEEL">
 <summary><para>The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.</para>
 <para>A window receives this message through its WindowProc function.</para></summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The high-order word indicates the distance the wheel is rotated, expressed in multiples or divisions of WHEEL_DELTA, which is 120. A positive value indicates that the wheel was rotated to the right; a negative value indicates that the wheel was rotated to the left. The low-order word indicates whether various virtual keys are down. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> values (but <see cref="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK"/> are <see cref="T:System.Int32">Integers</see> while low-order word is <see cref="T:System.Int16"/>).</description></item>
 <item><term>lParam</term>
 <description><para>The low-order word specifies the x-coordinate of the pointer, relative to the upper-left corner of the screen.</para>
 <para>The high-order word specifies the y-coordinate of the pointer, relative to the upper-left corner of the screen.</para></description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list>
 <para>This message is new in Windows Vista</para></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOVE">
 <summary>The WM_MOVE message is sent after a window has been moved.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Specifies the x and y coordinates of the upper-left corner of the client area of the window. The low-order word contains the x-coordinate while the high-order word contains the y coordinate.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632631.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_MOVING">
 <summary>The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a RECT structure with the current position of the window, in screen coordinates. To change the position of the drag rectangle, an application must change the members of this structure.</description></item>
 <item><term>Return value</term>
 <description>An application should return TRUE if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632632.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCACTIVATE">
 <summary>The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies when a title bar or icon needs to be changed to indicate an active or inactive state. If an active title bar or icon is to be drawn, the wParam parameter is TRUE. It is FALSE for an inactive title bar or icon.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>When the wParam parameter is FALSE, an application should return TRUE to indicate that the system should proceed with the default processing, or it should return FALSE to prevent the title bar or icon from being deactivated. When wParam is TRUE, the return value is ignored. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632633.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCCALCSIZE">
 <summary>The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>If wParam is TRUE, it specifies that the application should indicate which part of the client area contains valid information. The system copies the valid information to the specified area within the new client area.
 If wParam is FALSE, the application does not need to indicate the valid part of the client area.</description></item>
 <item><term>lParam</term>
 <description>If wParam is TRUE, lParam points to an NCCALCSIZE_PARAMS structure that contains information an application can use to calculate the new size and position of the client rectangle.
 If wParam is FALSE, lParam points to a RECT structure. On entry, the structure contains the proposed window rectangle for the window. On exit, the structure should contain the screen coordinates of the corresponding window client area.</description></item>
 <item><term>Return value</term>
 <description>If the wParam parameter is FALSE, the application should return zero.
 If wParam is TRUE, the application should return zero or a combination of the <see cref="T:Tools.API.Messages.ReturnValues.WM_NCCALCSIZE"/> values.
 If wParam is TRUE and an application returns zero, the old client area is preserved and is aligned with the upper-left corner of the new client area.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632634.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCCREATE">
 <summary>The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Pointer to the CREATESTRUCT structure that contains information about the window being created. The members of CREATESTRUCT are identical to the parameters of the CreateWindowEx function.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE to continue creation of the window. If the application returns FALSE, the CreateWindow or CreateWindowEx function will return a NULL handle. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632635.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCDESTROY">
 <summary>The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
 The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632636.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCHITTEST">
 <summary>The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the x-coordinate of the cursor. The coordinate is relative to the upper-left corner of the screen.
 The high-order word specifies the y-coordinate of the cursor. The coordinate is relative to the upper-left corner of the screen. </description></item>
 <item><term>Return value</term>
 <description>The return value of the DefWindowProc function is one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_NCHITTEST"/> values, indicating the position of the cursor hot spot.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645618.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCLBUTTONDBLCLK">
 <summary>The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645619.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCLBUTTONDOWN">
 <summary>The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645620.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCLBUTTONUP">
 <summary>The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645621.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCMBUTTONDBLCLK">
 <summary>The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645622.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCMBUTTONDOWN">
 <summary>The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645623.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCMBUTTONUP">
 <summary>The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645624.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCMOUSEMOVE">
 <summary>The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645627.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCPAINT">
 <summary>The WM_NCPAINT message is sent to a window when its frame must be painted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the update region of the window. The update region is clipped to the window frame.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application returns zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms534905.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCRBUTTONDBLCLK">
 <summary>The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645628.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCRBUTTONDOWN">
 <summary>The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645629.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCRBUTTONUP">
 <summary>The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the hit-test value returned by the DefWindowProc function as a result of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</description></item>
 <item><term>lParam</term>
 <description>Specifies a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645630.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCXBUTTONUP">
 <summary>The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description><para>The low-order word specifies the hit-test value returned by the DefWindowProc function from processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</para>
 <para>The high-order word indicates which button was released. It can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</para></description></item>
 <item><term>lParam</term>
 <description>Pointer to a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE.</description></item>
 </list></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCXBUTTONDOWN">
 <summary>The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description><para>The low-order word specifies the hit-test value returned by the DefWindowProc function from processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</para>
 <para>The high-order word indicates which button was released. It can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</para></description></item>
 <item><term>lParam</term>
 <description>Pointer to a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE.</description></item>
 </list></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NCXBUTTONDBLCLK">
 <summary>The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description><para>The low-order word specifies the hit-test value returned by the DefWindowProc function from processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.</para>
 <para>The high-order word indicates which button was released. It can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</para></description></item>
 <item><term>lParam</term>
 <description>Pointer to a POINTS structure that contains the x- and y-coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE.</description></item>
 </list></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NEXTDLGCTL">
 <summary>The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>If lParam is TRUE, this parameter identifies the control that receives the focus. If lParam is FALSE, this parameter indicates whether the next or previous control with the WS_TABSTOP style receives the focus. If wParam is zero, the next control receives the focus; otherwise, the previous control with the WS_TABSTOP style receives the focus.</description></item>
 <item><term>lParam</term>
 <description>The low-order word indicates how the system uses wParam. If the low-order word is TRUE, wParam is a handle associated with the control that receives the focus; otherwise, wParam is a flag that indicates whether the next or previous control with the WS_TABSTOP style receives the focus.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms645432.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NEXTMENU">
 <summary>The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the virtual-key code of the key.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a MDINEXTMENU structure that contains information about the menu to be activated.</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647612.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NOTIFY">
 <summary>Sent by a common control to its parent window when an event has occurred or the control requires some information.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The identifier of the common control sending the message. This identifier is not guaranteed to be unique. An application should use the hwndFrom or idFrom member of the NMHDR structure (passed as the lParam parameter) to identify the control.</description></item>
 <item><term>lParam</term>
 <description>A pointer to an <see cref="T:Tools.API.Messages.Notifications.NMHDR"/> structure that contains the notification code and additional information. For some notification messages, this parameter points to a larger structure that has the <see cref="T:Tools.API.Messages.Notifications.NMHDR"/> structure as its first member.</description></item>
 <item><term>Return value</term>
 <description>The return value is ignored except for notification messages that specify otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb775583.aspx</seealso>
 <remarks>You can use the <see cref="M:Tools.WindowsT.NativeT.Win32Window.SendNotification(Tools.API.Messages.Notifications.NMHDR)"/> function to send a notification without dealing with structure marshaling.</remarks></remarks>
 <seelaso cref="M:Tools.WindowsT.NativeT.Win32Window.SendNotification(Tools.API.Messages.Notifications.NMHDR)"/>
 <seelaso cref="T:Tools.API.Messages.Notifications.NMHDR"/><seelaso cref="T:Tools.API.Messages.Notifications.Notification"/>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NOTIFYFORMAT">
 <summary>Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>A handle to the window that is sending the WM_NOTIFYFORMAT message. If Command is NF_QUERY, this parameter is the handle to a control. If Command is NF_REQUERY, this parameter is the handle to the parent window of a control.</description></item>
 <item><term>lParam</term>
 <description>The command value that specifies the nature of the WM_NOTIFYFORMAT message. This will be one of the <see cref="T:Tools.API.Messages.lParam.WM_NOTIFYFORMAT"/> values.</description></item>
 <item><term>Return value</term>
 <description>Returns one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_NOTIFYFORMAT"/> values.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb775584.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_NULL">
 <summary>The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application returns zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632637.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PAINT">
 <summary>The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application returns zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms534901.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PAINTCLIPBOARD">
 <summary>The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the clipboard viewer window.</description></item>
 <item><term>lParam</term>
 <description>Handle to a global memory object that contains a PAINTSTRUCT structure. The structure defines the part of the client area to paint.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649027.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PAINTICON">
 <summary>Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms648057.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PALETTECHANGED">
 <summary>The WM_PALETTECHANGED message is sent to all top-level and overlapped windows after the window with the keyboard focus has realized its logical palette, thereby changing the system palette. This message enables a window that uses a color palette but does not have the keyboard focus to realize its logical palette and update its client area.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the window that caused the system palette to change.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>N/A</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms532653.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PALETTEISCHANGING">
 <summary>The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the window that is going to realize its logical palette.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms532632.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PARENTNOTIFY">
 <summary>The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word of wParam specifies the event for which the parent is being notified. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low"/> values.</description></item>
 <item><term>lParam</term>
 <description>Meaning depends on value of low-order word of wParam</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632638.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PASTE">
 <summary>An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>This message does not return a value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649028.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PENWINFIRST">
 <summary>The lowes value for pen messages.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PENWINLAST">
 <summary>The highest value for pen messages.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_POWER">
 <summary>Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
 Note  The WM_POWER message is obsolete. It is provided only for compatibility with 16-bit Windows-based applications. Applications should use the WM_POWERBROADCAST message.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The power-event notification. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_POWER"/> values.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>The value an application returns depends on the value of the wParam parameter. If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDREQUEST"/>, the return value is <see cref="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_FAIL"/> to prevent the system from entering the suspended state; otherwise, it is <see cref="F:Tools.API.Messages.ReturnValues.WM_POWER.PWR_OK"/>. If wParam is <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDRESUME"/> or <see cref="F:Tools.API.Messages.wParam.WM_POWER.PWR_CRITICALRESUME"/>, the return value is zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/aa373245.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_POWERBROADCAST">
 <summary>Notifies applications that a power-management event has occurred.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The power-management event. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_POWERBROADCAST"/> event identifiers.</description></item>
 <item><term>lParam</term>
 <description>    The event-specific data. For most events, this parameter is reserved and not used.
 If the wParam parameter is <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_POWERSETTINGCHANGE"/>, the lParam parameter is a pointer to a POWERBROADCAST_SETTING structure.</description></item>
 <item><term>Return value</term>
 <description>An application should return TRUE if it processes this message.
 Windows Server 2003, Windows XP, and Windows 2000:  An application can return <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.BROADCAST_QUERY_DENY"/> to deny a <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND"/> or <see cref="F:Tools.API.Messages.ReturnValues.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED"/> request.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/aa373247.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PRINT">
 <summary>The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the device context to draw in.</description></item>
 <item><term>lParam</term>
 <description>Specifies the drawing options. This parameter can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_PRINT"/> values.</description></item>
 <item><term>Return value</term>
 <description>N/A</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms534856.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_PRINTCLIENT">
 <summary>The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the device context to draw in.</description></item>
 <item><term>lParam</term>
 <description>Specifies drawing options. This parameter can be one or more of the <see cref="T:Tools.API.Messages.lParam.WM_PRINT"/> values.</description></item>
 <item><term>Return value</term>
 <description>N/A</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms534913.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_QUERYDRAGICON">
 <summary>The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return a handle to a cursor or icon that the system is to display while the user drags the icon. The cursor or icon must be compatible with the display driver's resolution. If the application returns NULL, the system displays the default cursor.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632639.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_QUERYENDSESSION">
 <summary>The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
 After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is reserved for future use.</description></item>
 <item><term>lParam</term>
 <description>This parameter can be one or more of the <seealso cref="T:Tools.API.Messages.lParam.WM_QUERYENDSESSION"/> values. If this parameter is 0, the system is shutting down or restarting (it is not possible to determine which event is occurring).</description></item>
 <item><term>Return value</term>
 <description>Applications should respect the user's intentions and return TRUE. By default, the DefWindowProc function returns TRUE for this message.
 If shutting down would corrupt the system or media that is being burned, the application can return FALSE. However, it is good practice to respect the user's actions.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/aa376890.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_QUERYNEWPALETTE">
 <summary>The WM_QUERYNEWPALETTE message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>lParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>Return value</term>
 <description>If the window realizes its logical palette, it must return TRUE; otherwise, it must return FALSE.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms532654.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_QUERYOPEN">
 <summary>The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If the icon can be opened, an application that processes this message should return TRUE; otherwise, it should return FALSE to prevent the icon from being opened.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632640.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_QUEUESYNC">
 <summary>The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>N/A</description></item>
 <item><term>lParam</term>
 <description>N/A</description></item>
 <item><term>Return value</term>
 <description>A CBT application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644972.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_QUIT">
 <summary>The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the exit code given in the PostQuitMessage function.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>This message does not have a return value because it causes the message loop to terminate before the message is sent to the application's window procedure.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632641.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_RENDERALLFORMATS">
 <summary>The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649029.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_RENDERFORMAT">
 <summary>The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the clipboard format to be rendered.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649030.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SETCURSOR">
 <summary>The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the window that contains the cursor.</description></item>
 <item><term>lParam</term>
 <description>The low-order word of lParam specifies the hit-test code.
 The high-order word of lParam specifies the identifier of the mouse message. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return TRUE to halt further processing or FALSE to continue.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms648382.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SETFOCUS">
 <summary>The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the window that has lost the keyboard focus. This parameter can be NULL.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646283.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SETFONT">
 <summary>An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the font (HFONT). If this parameter is NULL, the control uses the default system font to draw text.</description></item>
 <item><term>lParam</term>
 <description>The low-order word of lParam specifies whether the control should be redrawn immediately upon setting the font. If this parameter is TRUE, the control redraws itself.</description></item>
 <item><term>Return value</term>
 <description>This message does not return a value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632642.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SETHOTKEY">
 <summary>An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word specifies the virtual-key code to associate with the window.
 The high-order word can be one or more of the <see cref="T:Tools.API.Messages.ReturnValues.WM_GETHOTKEY_high"/> values.
 Setting wParam to NULL removes the hot key associated with a window.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>The return value is one of the <see cref="T:Tools.API.Messages.ReturnValues.WM_SETHOTKEY"/>.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646284.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SETICON">
 <summary>An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the type of icon to be set. This parameter can be one of the following values: <see cref="F:Tools.API.Messages.wParam.WM_GETICON.ICON_BIG"/>, <see cref="F:Tools.API.Messages.wParam.WM_GETICON.ICON_SMALL"/>.</description></item>
 <item><term>lParam</term>
 <description>Handle to the new large or small icon. If this parameter is NULL, the icon indicated by wParamis removed.</description></item>
 <item><term>Return value</term>
 <description>The return value is a handle to the previous large or small icon, depending on the value of wParam. It is NULL if the window previously had no icon of the type indicated by wParam.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632643.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SETREDRAW">
 <summary>An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
 To send this message, call the SendMessage function with the following parameters. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the redraw state. If this parameter is TRUE, the content can be redrawn after a change. If this parameter is FALSE, the content cannot be redrawn after a change.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application returns zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms534853.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SETTEXT">
 <summary>An application sends a WM_SETTEXT message to set the text of a window.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a null-terminated string that is the window text.</description></item>
 <item><term>Return value</term>
 <description>The return value is TRUE if the text is set. It is FALSE (for an edit control), LB_ERRSPACE (for a list box), or CB_ERRSPACE (for a combo box) if insufficient space is available to set the text in the edit control. It is CB_ERR if this message is sent to a combo box without an edit control.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632644.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SETTINGCHANGE">
 <summary>A message that is sent to all top-level windows when the SystemParametersInfo function changes a system-wide setting or when policy settings have changed.
 Applications should send WM_SETTINGCHANGE to all top-level windows when they make changes to system parameters. (This message cannot be sent directly to a window.) To send the WM_SETTINGCHANGE message to all top-level windows, use the SendMessageTimeout function with the hwnd parameter set to HWND_BROADCAST.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>When the system sends this message as a result of a SystemParametersInfo call, wParam is a flag that indicates the system parameter that was changed. For a list of values, see SystemParametersInfo.
 When the system sends this message as a result of a change in policy settings, this parameter indicates the type of policy that was applied. This value is 1 if computer policy was applied or zero if user policy was applied.
 When the system sends this message as a result of a change in locale settings, this parameter is zero.
 When an application sends this message, this parameter must be NULL.</description></item>
 <item><term>lParam</term>
 <description>When the system sends this message as a result of a SystemParametersInfo call, lParam is a pointer to a string that indicates the area containing the system parameter that was changed. This parameter does not usually indicate which specific system parameter changed. (Note that some applications send this message with lParam set to NULL.) In general, when you receive this message, you should check and reload any system parameter settings that are used by your application.
 This string can be the name of a registry key or the name of a section in the Win.ini file. When the string is a registry name, it typically indicates only the leaf node in the registry, not the full path.
 When the system sends this message as a result of a change in policy settings, this parameter points to the string "Policy".
 When the system sends this message as a result of a change in locale settings, this parameter points to the string "intl".
 To effect a change in the environment variables for the system or the user, broadcast this message with lParam set to the string "Environment".
 </description></item>
 <item><term>Return value</term>
 <description>If you process this message, return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms725497.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SHOWWINDOW">
 <summary>The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies whether a window is being shown. If wParam is TRUE, the window is being shown. If wParam is FALSE, the window is being hidden.</description></item>
 <item><term>lParam</term>
 <description>Specifies the status of the window being shown. If lParam is zero, the message was sent because of a call to the ShowWindow function; otherwise, lParam is one of the <see cref="T:Tools.API.Messages.lParam.WM_SHOWWINDOW"/> values.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632645.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SIZE">
 <summary>The WM_SIZE message is sent to a window after its size has changed.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the type of resizing requested. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_SIZE"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word of lParam specifies the new width of the client area.
 The high-order word of lParam specifies the new height of the client area. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632646.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SIZECLIPBOARD">
 <summary>The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the clipboard viewer window.</description></item>
 <item><term>lParam</term>
 <description>    Handle to a global memory object that contains a RECT structure. The structure specifies the new dimensions of the clipboard viewer's client area.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649031.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SIZING">
 <summary>The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies which edge of the window is being sized. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_SIZING"/> values.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a RECT structure with the screen coordinates of the drag rectangle. To change the size or position of the drag rectangle, an application must change the members of this structure.</description></item>
 <item><term>Return value</term>
 <description>An application should return TRUE if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632647.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SPOOLERSTATUS">
 <summary>The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the PR_JOBSTATUS flag.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the number of jobs remaining in the Print Manager queue.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms535643.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_STYLECHANGED">
 <summary>The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies whether the window's styles or extended window styles have changed. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_STYLECHANGED"/> values.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a STYLESTRUCT structure that contains the new styles for the window. An application can examine the styles, but cannot change them.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632648.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_STYLECHANGING">
 <summary>The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies whether the window's styles or extended window styles are changing. This parameter can be one or more of the <see cref="T:Tools.API.Messages.wParam.WM_STYLECHANGED"/> values.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a STYLESTRUCT structure that contains the proposed new styles for the window. An application can examine the styles and, if necessary, change them.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632649.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SYNCPAINT">
 <summary>The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>lParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>Return value</term>
 <description>An application returns zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms534855.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SYSCOLORCHANGE">
 <summary>The <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSCOLORCHANGE"/> message is sent to all top-level windows when a change is made to a system color setting.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>lParam</term>
 <description>This message has no parameters.</description></item>
 <item><term>Return value</term>
 <description>N/A</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms532603.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SYSCOMMAND">
 <summary>A window receives this message when the user chooses a command from the Window menu (formerly known as the system or control menu) or when the user chooses the maximize button, minimize button, restore button, or close button.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the type of system command requested. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_SYSCOMMAND"/> values.</description></item>
 <item><term>lParam</term>
 <description>The low-order word specifies the horizontal position of the cursor, in screen coordinates, if a window menu command is chosen with the mouse. Otherwise, this parameter is not used.
 The high-order word specifies the vertical position of the cursor, in screen coordinates, if a window menu command is chosen with the mouse. This parameter is –1 if the command is chosen using a system accelerator, or zero if using a mnemonic. </description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646360.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_SYSDEADCHAR">
 <summary>The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Specifies the character code generated by the system dead key — that is, a dead key that is pressed while holding down the ALT key.</description></item>
 <item><term>lParam</term>
 <description>Specifies the repeat count, scan code, extended-key flag, context code, previous key-state flag, and transition-state flag, as shown in the <see cref="T:Tools.API.Messages.lParam.WM_CHAR"/>.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms646285.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_TCARD">
 <summary>Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>A value that indicates the action the user has taken. This can be one of the <see cref="T:Tools.API.Messages.wParam.WM_TCARD"/> values.</description></item>
 <item><term>lParam</term>
 <description>If idAction specifies HELP_TCARD_DATA, this parameter is a long specified by the Help author. Otherwise, this parameter is zero.</description></item>
 <item><term>Return value</term>
 <description>The return value is ignored; use zero. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb774307.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_TIMECHANGE">
 <summary>A message that is sent whenever there is a change in the system time.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms725498.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_TIMER">
 <summary>The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>[in] Specifies the timer identifier.</description></item>
 <item><term>lParam</term>
 <description>[in] Pointer to an application-defined callback function that was passed to the SetTimer function when the timer was installed.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message. </description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms644902.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_THEMECHANGE">
 <summary>The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Reserved. </description></item>
 <item><term>lParam</term>
 <description>Reserved. </description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/ms632650.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_UNDO">
 <summary>An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>lParam</term>
 <description>Not used; must be zero.</description></item>
 <item><term>Return value</term>
 <description>If the message succeeds, the return value is TRUE.
 If the message fails, the return value is FALSE.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb761693.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_UNINITMENUPOPUP">
 <summary>The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the menu</description></item>
 <item><term>lParam</term>
 <description>The high-order word identifies the menu that was destroyed. Currently, it can only be MF_SYSMENU (the window menu).</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms647614.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_USER">
 <summary>This message is used by applications to help define private messages.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>None.</description></item>
 <item><term>lParam</term>
 <description>None.</description></item>
 <item><term>Return value</term>
 <description>None.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/aa928069.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_USERCHANGED">
 <summary>The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>Return value</term>
 <description>An application should return zero if it processes this message.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632651.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_VKEYTOITEM">
 <summary>Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The low-order word specifies the virtual-key code of the key the user pressed. The high-order word specifies the current position of the caret.</description></item>
 <item><term>lParam</term>
 <description>Handle to the list box.</description></item>
 <item><term>Return value</term>
 <description>The return value specifies the action that the application performed in response to the message. A return value of –2 indicates that the application handled all aspects of selecting the item and requires no further action by the list box. (See Remarks.) A return value of –1 indicates that the list box should perform the default action in response to the keystroke. A return value of 0 or greater specifies the index of an item in the list box and indicates that the list box should perform the default action for the keystroke on the specified item.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb761364.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_VSCROLL">
 <summary>The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The high-order word specifies the current position of the scroll box if the low-order word is SB_THUMBPOSITION or SB_THUMBTRACK; otherwise, this word is not used.
 The low-order word specifies a scroll bar value that indicates the user's scrolling request. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_HSCROLL_low"/> values.</description></item>
 <item><term>lParam</term>
 <description>If the message is sent by a scroll bar, this parameter is the handle to the scroll bar control. If the message is not sent by a scroll bar, this parameter is NULL.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/bb787577.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_VSCROLLCLIPBOARD">
 <summary>The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the clipboard viewer window.</description></item>
 <item><term>lParam</term>
 <description>The low-order word of lParam specifies a scroll bar event. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_HSCROLL_low"/> values. The high-order word of lParam specifies the current position of the scroll box if the low-order word of lParam is SB_THUMBPOSITION; otherwise, the high-order word of lParam is not used.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms649032.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_WINDOWPOSCHANGED">
 <summary>The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a WINDOWPOS structure that contains information about the window's new size and position.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632652.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_WINDOWPOSCHANGING">
 <summary>The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
 A window receives this message through its WindowProc function. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a WINDOWPOS structure that contains information about the window's new size and position.</description></item>
 <item><term>Return value</term>
 <description>If an application processes this message, it should return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms632653.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_WININICHANGE">
 <summary>An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
 Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
 A window receives this message through its WindowProc function.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>This parameter is not used.</description></item>
 <item><term>lParam</term>
 <description>A pointer to a string containing the name of the system parameter that was changed. For example, this string can be the name of a registry key or the name of a section in the Win.ini file. This parameter is not particularly useful in determining which system parameter changed. For example, when the string is a registry name, it typically indicates only the leaf node in the registry, not the whole path. In addition, some applications send this message with lParam set to NULL. In general, when you receive this message, you should check and reload any system parameter settings that are used by your application.</description></item>
 <item><term>Return value</term>
 <description>If you process this message, return zero.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms725499.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessages.X0000">
 <summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.X0000"/> through <see cref="F:Tools.API.Messages.WindowMessages.WM_USER_minus_1"/> are reserved for use by the system.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.WM_USER_minus_1">
 <summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.X0000"/> through <see cref="F:Tools.API.Messages.WindowMessages.WM_USER_minus_1"/> are reserved for use by the system.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.X7FFF">
 <summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.WM_USER"/> through <see cref="F:Tools.API.Messages.WindowMessages.X7FFF"/> are integer messages for use by private window classes.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.XBFFF">
 <summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.WM_APP"/> through <see cref="F:Tools.API.Messages.WindowMessages.XBFFF"/> are available for use by applications.</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.XC000">
 <summary>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.XC000"/> through <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/> are string messages for use by applications</summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.XFFFF">
 <summary><para>Messages in range <see cref="F:Tools.API.Messages.WindowMessages.XC000"/> through <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/> are string messages for use by applications</para>
 <para>Messages greater than <see cref="F:Tools.API.Messages.WindowMessages.XFFFF"/> are reserved by the system</para></summary>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_FIRST">
 <summary>Value of first Tab control message</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_ADJUSTRECT">
 <summary>Calculates a tab control's display area given a window rectangle, or calculates the window rectangle that would correspond to a specified display area.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Operation to perform. If this parameter is TRUE, lParam specifies a display rectangle and receives the corresponding window rectangle. If this parameter is FALSE, lParam specifies a window rectangle and receives the corresponding display area.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a RECT  structure that specifies the given rectangle and receives the calculated rectangle. </description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760573.aspx</seealso>
 This message applies only to tab controls that are at the top. It does not apply to tab controls that are on the sides or bottom.</remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_DELETEALLITEMS">
 <summary>Removes all items from a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns TRUE if successful, or FALSE otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760575.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_DELETEITEM">
 <summary>Removes an item from a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Index of the item to delete.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns TRUE if successful, or FALSE otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760577.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_DESELECTALL">
 <summary>Resets items in a tab control, clearing any that were set to the TCIS_BUTTONPRESSED state.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Flag that specifies the scope of the item deselection. If this parameter is set to FALSE, all tab items will be reset. If it is set to TRUE, then all tab items except for the one currently selected will be reset.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>The return value for this message is not used.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760579.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETCURFOCUS">
 <summary>Returns the index of the item that has the focus in a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the index of the tab item that has the focus.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760581.aspx</seealso>
 The item that has the focus may be different than the selected item. </remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETCURSEL">
 <summary>Determines the currently selected tab in a tab control. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the index of the selected tab if successful, or -1 if no tab is selected.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/ms644927.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETEXTENDEDSTYLE">
 <summary>Retrieves the extended styles that are currently in use for the tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns a DWORD value that represents the extended styles currently in use for the tab control. This value is a combination of tab control extended styles.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760585.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETIMAGELIST">
 <summary>Retrieves the image list associated with a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the handle to the image list if successful, or NULL otherwise. </description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760588.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETITEM">
 <summary>Retrieves information about a tab in a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Index of the tab. </description></item>
 <item><term>lParam</term>
 <description>Pointer to a TCITEM  structure that specifies the information to retrieve and receives information about the tab. When the message is sent, the mask member specifies which attributes to return. If the mask member specifies the TCIF_TEXT value, the pszText member must contain the address of the buffer that receives the item text, and the cchTextMax member must specify the size of the buffer.</description></item>
 <item><term>Return value</term>
 <description>Returns TRUE if successful, or FALSE otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760589.aspx</seealso>
 This constant defines TCM_GETITEMW message (Unicode version), for ansi version see <see cref="F:Tools.API.Messages.WindowMessages.TCM_GETITEMA"/></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETITEMA">
 <summary>Defines ANSI version of then <see cref="F:Tools.API.Messages.WindowMessages.TCM_GETITEM"/> message.</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETITEMCOUNT">
 <summary>Retrieves the number of tabs in the tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the number of items if successful, or zero otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760592.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETITEMRECT">
 <summary>Retrieves the bounding rectangle for a tab in a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Index of the tab. </description></item>
 <item><term>lParam</term>
 <description>A lParam parameter of the message</description></item>
 <item><term>Return value</term>
 <description>Pointer to a RECT  structure that receives the bounding rectangle of the tab, in viewport coordinates. </description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760594.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETROWCOUNT">
 <summary>Retrieves the current number of rows of tabs in a tab control. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the number of rows of tabs.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb7605969.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETTOOLTIPS">
 <summary>Retrieves the handle to the tooltip control associated with a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the handle to the tooltip control if successful, or NULL otherwise. </description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760598.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_GETUNICODEFORMAT">
 <summary>Retrieves the Unicode character format flag for the control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the Unicode format flag for the control. If this value is nonzero, the control is using Unicode characters. If this value is zero, the control is using ANSI characters.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760600.aspx</seealso></remarks>
 <seelaso cref="F:Tools.API.Messages.WindowMessages.CCM_GETUNICODEFORMAT"/>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_HIGHLIGHTITEM">
 <summary>Sets the highlight state of a tab item.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>An INT value that specifies the zero-based index of a tab control item. </description></item>
 <item><term>lParam</term>
 <description>The LOWORD  is a BOOL specifying the highlight state to be set. If this value is TRUE, the tab is highlighted; if FALSE, the tab is set to its default state. The HIWORD  must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns nonzero if successful, or zero otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760602.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_HITTEST">
 <summary>Determines which tab, if any, is at a specified screen position.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a TCHITTESTINFO  structure that specifies the screen position to test. </description></item>
 <item><term>Return value</term>
 <description>Returns the index of the tab, or -1 if no tab is at the specified position. </description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760604.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_INSERTITEM">
 <summary>Inserts a new tab in a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Index of the new tab.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a TCITEM  structure that specifies the attributes of the tab. The dwState  and dwStateMask members of this structure are ignored by this message.</description></item>
 <item><term>Return value</term>
 <description>Returns the index of the new tab if successful, or -1 otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760606.aspx</seealso>
 This constant defines Unicode version of the message (TCM_INSERTITEMW). For ANSI version see <see cref="F:Tools.API.Messages.WindowMessages.TCM_INSERTITEMA"/>.</remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_INSERTITEMA">
 <summary>Defines ANSI version of the <see cref="F:Tools.API.Messages.WindowMessages.TCM_INSERTITEM"/> message.</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_REMOVEIMAGE">
 <summary>Removes an image from a tab control's image list.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Index of the image to remove. </description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760608.aspx</seealso>
 The tab control updates each tab's image index, so each tab remains associated with the same image as before. If a tab is using the image being removed, the tab will be set to have no image. </remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETCURFOCUS">
 <summary>Sets the focus to a specified tab in a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Index of the tab that gets the focus. </description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760610.aspx</seealso>
 If the tab control has the TCS_BUTTONS style (button mode), the tab with the focus may be different from the selected tab. For example, when a tab is selected, the user can press the arrow keys to set the focus to a different tab without changing the selected tab. In button mode, <see cref="F:Tools.API.Messages.WindowMessages.TCM_SETCURFOCUS"/> sets the input focus to the button associated with the specified tab, but it does not change the selected tab.
 <para>If the tab control does not have the TCS_BUTTONS style, changing the focus also changes the selected tab. In this case, the tab control sends the TCN_SELCHANGING and TCN_SELCHANGE notification codes to its parent window.</para></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETCURSEL">
 <summary>Selects a tab in a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>    Index of the tab to select.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the index of the previously selected tab if successful, or -1 otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760612.aspx</seealso>
 A tab control does not send a TCN_SELCHANGING  or TCN_SELCHANGE  notification code when a tab is selected using this message. </remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETEXTENDEDSTYLE">
 <summary>Sets the extended styles that the tab control will use.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>A DWORD value that indicates which styles in lParam are to be affected. Only the extended styles in wParam  will be changed. All other styles will be maintained as they are. If this parameter is zero, then all of the styles in lParam will be affected. </description></item>
 <item><term>lParam</term>
 <description>Value specifying the extended tab control styles. This value is a combination of tab control extended styles.</description></item>
 <item><term>Return value</term>
 <description>Returns a DWORD value that contains the previous tab control extended styles.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760627.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETIMAGELIST">
 <summary>Assigns an image list to a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Handle to the image list to assign to the tab control. </description></item>
 <item><term>Return value</term>
 <description>Returns the handle to the previous image list, or NULL if there is no previous image list.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760629.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETITEM">
 <summary>Sets some or all of a tab's attributes.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Index of the item. </description></item>
 <item><term>lParam</term>
 <description>Pointer to a TCITEM  structure that contains the new item attributes. The mask  member specifies which attributes to set. If the mask member specifies the TCIF_TEXT value, the pszText member is the address of a null-terminated string and the cchTextMax  member is ignored.</description></item>
 <item><term>Return value</term>
 <description>Returns TRUE if successful, or FALSE otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760631.aspx</seealso>
 This constant defines Unicode version of the message (TCM_SETITEMW). For ANSI version see <see cref="F:Tools.API.Messages.WindowMessages.TCM_SETITEMA"/>.</remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETITEMA">
 <summary>Defines ANSI version of then <see cref="F:Tools.API.Messages.WindowMessages.TCM_SETITEM"/> message.</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETITEMEXTRA">
 <summary>Sets the number of bytes per tab reserved for application-defined data in a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Number of extra bytes.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns TRUE if successful, or FALSE otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760633.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETITEMSIZE">
 <summary>Sets the width and height of tabs in a fixed-width or owner-drawn tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>    The LOWORD  is an INT value that specifies the new width, in pixels. The HIWORD  is an INT value that specifies the new height, in pixels.</description></item>
 <item><term>Return value</term>
 <description>Returns the old width and height. The width is in the LOWORD  of the return value, and the height is in the HIWORD.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760635.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETMINTABWIDTH">
 <summary>Sets the minimum width of items in a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Minimum width to be set for a tab control item. If this parameter is set to -1, the control will use the default tab width. </description></item>
 <item><term>Return value</term>
 <description>Returns an INT value that represents the previous minimum tab width.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760637.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETPADDING">
 <summary>Sets the amount of space (padding) around each tab's icon and label in a tab control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>N/A</description></item>
 <item><term>lParam</term>
 <description>The LOWORD  is an INT value that specifies the amount of horizontal padding, in pixels. The HIWORD  is an INT value that specifies the amount of vertical padding, in pixels.</description></item>
 <item><term>Return value</term>
 <description>No return value.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760639.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETTOOLTIPS">
 <summary>Assigns a tooltip control to a tab control</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Handle to the tooltip control. </description></item>
 <item><term>lParam</term>
 <description>    Must be zero.</description></item>
 <item><term>Return value</term>
 <description>You can retrieve the tooltip control associated with a tab control by using the <see cref="F:Tools.API.Messages.WindowMessages.TCM_GETTOOLTIPS"/> message.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760641.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.TCM_SETUNICODEFORMAT">
 <summary>Sets the Unicode character format flag for the control. This message allows you to change the character set used by the control at run time rather than having to re-create the control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters. If this value is zero, the control will use ANSI characters. </description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the previous Unicode format flag for the control. </description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760643.aspx</seealso></remarks>    
 <seelaso cref="F:Tools.API.Messages.WindowMessages.CCM_SETUNICODEFORMAT"/>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_FIRST">
 <summary>Defines a value of first common control message</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_SETBKCOLOR">
 <summary>Sets the background color of the control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>COLORREF  value that contains the new background color. If this value is -1, the control will revert to using the system color for the background color. </description></item>
 <item><term>Return value</term>
 <description>Returns a COLORREF  value that represents the previous background color. If this value is -1, the control was using the system color for the background color.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb773741.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_SETCOLORSCHEME">
 <summary>Sets the color scheme information for the control. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a COLORSCHEME  structure that contains the color scheme information.</description></item>
 <item><term>Return value</term>
 <description>The return value for this message is not used.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb787421.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_GETCOLORSCHEME">
 <summary>Retrieves the color scheme information from the control. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Pointer to a COLORSCHEME  structure that will receive the color scheme information. You must set the cbSize member of this structure to sizeof(COLORSCHEME) before sending this message. </description></item>
 <item><term>Return value</term>
 <description>Returns nonzero if successful, or zero otherwise.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb787327.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_GETDROPTARGET">
 <summary>Retrieves a pager control's IDropTarget  interface pointer</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Pointer to an IDropTarget  pointer that receives the interface pointer. It is the caller's responsibility to call Release on this pointer when it is no longer needed. </description></item>
 <item><term>Return value</term>
 <description>The return value for this message is not used. </description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760872.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_SETUNICODEFORMAT">
 <summary>Sets the Unicode character format flag for the control. This message allows you to change the character set used by the control at run time rather than having to re-create the control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Determines the character set that is used by the control. If this value is nonzero, the control will use Unicode characters. If this value is zero, the control will use ANSI characters. </description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the previous Unicode format flag for the control. </description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760643.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_GETUNICODEFORMAT">
 <summary>Retrieves the Unicode character format flag for the control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the Unicode format flag for the control. If this value is nonzero, the control is using Unicode characters. If this value is zero, the control is using ANSI characters.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb760600.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_SETVERSION">
 <summary>This message is used to inform the control that you are expecting a behavior associated with a particular version.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>The version number. </description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the version specified in the previous <see cref="F:Tools.API.Messages.WindowMessages.CCM_SETVERSION"/>  message. If wParam is set to a value greater than the current DLL version, it returns -1.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb775581.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_GETVERSION">
 <summary>Gets the version number for a control set by the most recent <see cref="F:Tools.API.Messages.WindowMessages.CCM_SETVERSION"/>  message.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>Returns the version number set by the most recent <see cref="F:Tools.API.Messages.WindowMessages.CCM_SETVERSION"/>  message. If no such message has been sent, it returns zero.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb775579.aspx</seealso></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_SETNOTIFYWINDOW">
 <summary>(?) Registers a window that will handle messages in response to all events from an object. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>N/A (window handle to send message to?)</description></item>
 <item><term>lParam</term>
 <description>N/A (pointer to message being send?)</description></item>
 <item><term>Return value</term>
 <description>N/A</description></item>
 </list></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_SETWINDOWTHEME">
 <summary>Sets the visual style of a control.</summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Must be zero.</description></item>
 <item><term>lParam</term>
 <description>A pointer to a Unicode string that contains the control visual style to set.</description></item>
 <item><term>Return value</term>
 <description>The return value is not used.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb775582.aspx</seealso>
 <note>To use this message, you must provide a manifest specifying Comclt32.dll version 6.0. For more information on manifests, see Enabling Visual Styles.</note></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Messages.WindowMessages.CCM_DPISCALE">
 <summary>Enables automatic high dots per inch (dpi) scaling in Tree-View controls, List-View controls, ComboBoxEx controls, Header controls, Buttons, Toolbar controls, Animation controls, and Image Lists. </summary>
 <remarks><list type="table">
 <item><term>wParam</term>
 <description>Set to TRUE.</description></item>
 <item><term>lParam</term>
 <description>Must be zero.</description></item>
 <item><term>Return value</term>
 <description>The return value is not used.</description></item>
 </list><seealso>http://msdn.microsoft.com/en-us/library/bb775574.aspx</seealso>Quick Launch and Taskbar  should not specify a dpi scaling, because the images are already scaled.
 <para>Any control that uses an image list created with the SmallIcon metric should not scale its icons.</para>
 <note>To use this API, you must provide a manifest that specifies Comclt32.dll version 6.0. For more information on manifests, see Enabling Visual Styles.</note></remarks>
 <version version="1.5.3">This message is new in version 1.5.3</version>
</member>
<member name="T:Tools.API.Messages.Notifications.NMHDR">
 <summary>Contains information about a notification message.</summary>
 <remarks>You can use the <see cref="M:Tools.WindowsT.NativeT.Win32Window.SendNotification(Tools.API.Messages.Notifications.NMHDR)"/> function to send a notification without dealing with structure marshaling.</remarks>
 <seelaso cref="F:Tools.API.Messages.WindowMessages.WM_NOTIFY"/><seelaso cref="M:Tools.WindowsT.NativeT.Win32Window.SendNotification(Tools.API.Messages.Notifications.NMHDR)"/>
 <version version="1.5.3">This structure is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.Notifications.NMHDR.#ctor(System.IntPtr,System.IntPtr,Tools.API.Messages.Notifications.Notification)">
 <summary>CTor - initializes a new instance of the <see cref="T:Tools.API.Messages.Notifications.NMHDR"/> structure</summary>
 <param name="hwndFrom">A window handle to the control sending the message.</param>
 <param name="idFrom">An identifier of the control sending the message.</param>
 <param name="code">A notification code. This member can be one of the common notification codes (see Notifications under General Control Reference - http://msdn.microsoft.com/en-us/library/bb775497.aspx), or it can be a control-specific notification code.</param>
</member>
<member name="F:Tools.API.Messages.Notifications.NMHDR.hwndFrom">
 <summary>A window handle to the control sending the message.</summary>
</member>
<member name="F:Tools.API.Messages.Notifications.NMHDR.idFrom">
 <summary>An identifier of the control sending the message.</summary>
</member>
<member name="F:Tools.API.Messages.Notifications.NMHDR.code">
 <summary>A notification code. This member can be one of the common notification codes (see Notifications under General Control Reference - http://msdn.microsoft.com/en-us/library/bb775497.aspx), or it can be a control-specific notification code.</summary>
</member>
<member name="T:Tools.API.Messages.Notifications.Notification">
 <summary>Contains known notification codes</summary>
 <seelaso cref="F:Tools.API.Messages.WindowMessages.WM_NOTIFY"/>
 <version version="1.5.3" stage="Nightly">This enumeration is new in version 1.5.3. As of version 1.5.3 this enumeration is incomplete.</version>
</member>
<member name="F:Tools.API.Messages.Notifications.Notification.TCN_SELCHANGING">
 <summary>Notifies a tab control's parent window that the currently selected tab is about to change. This notification code is sent in the form of a <see cref="F:Tools.API.Messages.WindowMessages.WM_NOTIFY"/> message.</summary>
 <remarks><list type="table">
 <item><term>lParam</term>
 <description>Pointer to an <see cref="T:Tools.API.Messages.Notifications.NMHDR"/> structure that contains additional information about this notification. </description></item>
 <item><term>Return Value</term>
 <description>Returns TRUE to prevent the selection from changing, or FALSE to allow the selection to change.</description></item></list>
 <seealso>http://msdn.microsoft.com/en-us/library/bb760571.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.Notifications.Notification.TCN_SELCHANGE">
 <summary>Notifies a tab control's parent window that the currently selected tab has changed. This notification code is sent in the form of a <see cref="F:Tools.API.Messages.WindowMessages.WM_NOTIFY"/> message.</summary>
 <remarks><list type="table">
 <item><term>lParam</term>
 <description>Pointer to an <see cref="T:Tools.API.Messages.Notifications.NMHDR"/> structure that contains additional information about this notification. </description></item>
 <item><term>Return Value</term>
 <description>No return value.</description></item></list>
 <seealso>http://msdn.microsoft.com/en-us/library/bb760571.aspx</seealso></remarks>
</member>
<member name="T:Tools.API.Messages.WndProc">
 <summary>The WindowProc function is an application-defined function that processes messages sent to a window. The WNDPROC type defines a pointer to this callback function. WindowProc is a placeholder for the application-defined function name.</summary>
 <param name="hWnd">Handle to the window.</param>
 <param name="msg">Specifies the message.</param>
 <param name="wParam">Specifies additional message information. The contents of this parameter depend on the value of the <paramref name="uMsg"/> parameter.</param>
 <param name="lParam">Specifies additional message information. The contents of this parameter depend on the value of the <paramref name="uMsg"/> parameter.</param>
 <returns>The return value is the result of the message processing and depends on the message sent.</returns>
</member>
<member name="T:Tools.API.Messages.IMECompositionStringValues">
 <summary>These values are used with ImmGetCompositionString and <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_COMPOSITION"/>.</summary>
 <remarks><seealso>http://msdn2.microsoft.com/en-us/library/ms776087.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPATTR">
 <summary>Retrieves or updates the attribute of the composition string.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPCLAUSE">
 <summary>Retrieves or updates clause information of the composition string.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPREADATTR">
 <summary>Retrieves or updates the attributes of the reading string of the current composition.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPREADCLAUSE">
 <summary> 	Retrieves or updates the clause information of the reading string of the composition string.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPREADSTR">
 <summary> 	Retrieves or updates the reading string of the current composition.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_COMPSTR">
 <summary> 	Retrieves or updates the current composition string.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_CURSORPOS">
 <summary> 	Retrieves or updates the cursor position in composition string.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_DELTASTART">
 <summary>Retrieves or updates clause information of the result string.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_RESULTCLAUSE">
 <summary>Retrieves or updates clause information of the result string.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_RESULTREADCLAUSE">
 <summary> 	Retrieves or updates the reading string.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_RESULTREADSTR">
 <summary> 	Retrieves or updates the reading string.</summary>
</member>
<member name="F:Tools.API.Messages.IMECompositionStringValues.GCS_RESULTSTR">
 <summary>Retrieves or updates the string of the composition result.</summary>
</member>
<member name="T:Tools.API.Messages.IWindowsMessagesProviderRef">
 <summary>Interface of object that provides event raised when window message processing is required</summary>
 <remarks>This interface uses event with parameter passed by reference. It is is not the option for you to use such event use <see  cref="T:Tools.API.Messages.IWindowsMessagesProviderVal`1"/> interface.
 <para>While designing class that accepts this interface consider accepting <see cref="T:Tools.API.Messages.IWindowsMessagesProviderVal`1"/> as well</para></remarks>
</member>
<member name="E:Tools.API.Messages.IWindowsMessagesProviderRef.WndProc">
 <summary>Raised when window message processing is required</summary>
 <remarks>Caller must pass <paramref name="msg"/>.<see cref="P:System.Windows.Forms.Message.Result">Result</see> as result of message (unless it does own processing of the message and passes own result).
 <para>When this event is raised from <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/> than just raising it is enough (unless event rais method is implemented in non-standard way), because it if passed by reference.</para>
 <para>Calle may require to <paramref name="sender"/> be caller and <paramref name="e"/>.<see cref="P:System.Windows.Forms.Message.HWnd">hWnd</see> to be <see cref="P:System.Windows.Forms.IWin32Window.Handle"/>.</para></remarks>
</member>
<member name="T:Tools.API.Messages.IWindowsMessagesProviderVal`1">
 <summary>Generic interface of object that provides event raised when window message processing is required</summary>
 <remarks>This interface uses event with parameter passed by reference. It is is not the option for you to use such event use <see  cref="T:Tools.API.Messages.IWindowsMessagesProviderVal`1"/> interface.
 <para>While designing class that accepts this interface consider accepting <see cref="T:Tools.API.Messages.IWindowsMessagesProviderVal`1"/> as well</para>.
 <para>In case you want to implement this interface in non-message-specific way, use <see cref="T:Tools.API.Messages.WindowMessage"/> for <typeparamref name="T"/></para></remarks>
 <typeparam name="T">Concrete type of message provided by interface implementation, or <see cref="T:Tools.API.Messages.WindowMessage"/> for non-message-specific implementations</typeparam>
</member>
<member name="E:Tools.API.Messages.IWindowsMessagesProviderVal`1.WndProc">
 <summary>Raised when window message processing is required</summary>
 <remarks>Caller must pass <paramref name="e"/>.<see cref="P:Tools.API.Messages.WindowMessage.ReturnValue">ReturnValue</see> back as result of message (unless it does own processing of the message and passes own result)
 <para>Calle may require to <paramref name="sender"/> be caller and <paramref name="e"/>.<see cref="P:Tools.API.Messages.WindowMessage.hWnd">hWnd</see> to be <see cref="P:System.Windows.Forms.IWin32Window.Handle"/>.</para></remarks>
</member>
<member name="T:Tools.API.Messages.WindowMessage">
 <summary>Implements windows message as reference type</summary>
 <seelaso cref="P:Tools.API.Messages.WindowMessage.Message"/>
 <version version="1.5.3">Methods for sending messages</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.#ctor(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>CTor from all parameters but result</summary>
 <param name="hWnd">Target window handle</param>
 <param name="lParam">lParam</param>
 <param name="wParam">wParam</param>
 <param name="Message">Message code</param>
</member>
<member name="M:Tools.API.Messages.WindowMessage.#ctor(System.Windows.Forms.Message)">
 <summary>CTor from <see cref="T:System.Windows.Forms.Message"/></summary>
 <param name="Message">A <see cref="T:System.Windows.Forms.Message"/></param>
</member>
<member name="M:Tools.API.Messages.WindowMessage.#ctor(Tools.API.Messages.WindowMessage)">
 <summary>Copy CTor - clones given instance</summary>
 <param name="Message">Instance to clone</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Message"/> is null</exception>
</member>
<member name="M:Tools.API.Messages.WindowMessage.#ctor(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32,System.Int32)">
 <summary>CTor from all the parameters</summary>
 <param name="hWnd">Target window handle</param>
 <param name="lParam">lParam</param>
 <param name="wParam">wParam</param>
 <param name="Message">Message code</param>
 <param name="ReturnValue">Return code</param>
</member>
<member name="F:Tools.API.Messages.WindowMessage._Message">
 <summary>Contains value of the <see cref="P:Tools.API.Messages.WindowMessage.Message"/> property</summary>
</member>
<member name="P:Tools.API.Messages.WindowMessage.Message">
 <summary>Gest windows message code, the calue indicating type and meaning of message and its parameters</summary>
 <returns>Windows message code</returns>
</member>
<member name="F:Tools.API.Messages.WindowMessage._wParam">
 <summary>Contains value of the <see cref="P:Tools.API.Messages.WindowMessage.wParam"/> property</summary>
</member>
<member name="P:Tools.API.Messages.WindowMessage.wParam">
 <summary>Gets wParam</summary>
 <returns>wParam</returns>
 <remarks>Meaning depends on <see cref="P:Tools.API.Messages.WindowMessage.Message"/></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessage._lParam">
 <summary>Contains value of the <see cref="P:Tools.API.Messages.WindowMessage.lParam"/> property</summary>
</member>
<member name="P:Tools.API.Messages.WindowMessage.lParam">
 <summary>Gets lParam</summary>
 <returns>lParam</returns>
 <remarks>Meaning depends on <see cref="P:Tools.API.Messages.WindowMessage.Message"/></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessage._ReturnValue">
 <summary>Contains value of the <see cref="P:Tools.API.Messages.WindowMessage.ReturnValue"/> property</summary>
</member>
<member name="P:Tools.API.Messages.WindowMessage.ReturnValue">
 <summary>Gets or sets message return value</summary>
 <returns>Mesfage return value</returns>
 <value>Message return value</value>
 <remarks>Meaning depends on <see cref="P:Tools.API.Messages.WindowMessage.Message"/></remarks>
</member>
<member name="F:Tools.API.Messages.WindowMessage._hWnd">
 <summary>Contains value of the <see cref="P:Tools.API.Messages.WindowMessage.hWnd"/> property</summary>
</member>
<member name="P:Tools.API.Messages.WindowMessage.hWnd">
 <summary>Gets handle of target window of the message</summary>
 <remarks>In Win32 terminology almost any .NET control is a window</remarks>
</member>
<member name="M:Tools.API.Messages.WindowMessage.op_Implicit(Tools.API.Messages.WindowMessage)~System.Windows.Forms.Message">
 <summary>Converts <see cref="T:Tools.API.Messages.WindowMessage"/> to <see cref="T:System.Windows.Forms.Message"/></summary>
 <param name="a">A <see cref="T:Tools.API.Messages.WindowMessage"/></param>
 <returns>Equivalent <see cref="T:System.Windows.Forms.Message"/> (<see cref="P:Tools.API.Messages.WindowMessage.Empty"/> instance when <paramref name="a"/> is null)</returns>
</member>
<member name="M:Tools.API.Messages.WindowMessage.op_Implicit(System.Windows.Forms.Message)~Tools.API.Messages.WindowMessage">
 <summary>Converts <see cref="T:System.Windows.Forms.Message"/> to <see cref="T:Tools.API.Messages.WindowMessage"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.Message"/></param>
 <returns>Equivalent <see cref="T:Tools.API.Messages.WindowMessage"/></returns>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.API.Messages.WindowMessage" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.API.Messages.WindowMessage" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Tools.API.Messages.WindowMessage" />.</param>
 <remarks>Use type-safe overload instead</remarks>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Equals(System.Windows.Forms.Message)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <returns>true if the current object is equal to the 
 <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
 <remarks><see cref="T:Tools.API.Messages.WindowMessage" /> is consideret equal to <see cref="T:System.Windows.Forms.Message"/> when appropriate properties has same values</remarks>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Equals(Tools.API.Messages.WindowMessage)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <returns>true if the current object is equal to the 
 <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
 <remarks><see cref="T:Tools.API.Messages.WindowMessage" /> is considered equal to other <see cref="T:Tools.API.Messages.WindowMessage" /> when all the properties <see cref="P:Tools.API.Messages.WindowMessage.hWnd"/>, <see cref="P:Tools.API.Messages.WindowMessage.Message"/>, <see cref="P:Tools.API.Messages.WindowMessage.wParam"/>, <see cref="P:Tools.API.Messages.WindowMessage.lParam"/> and <see cref="P:Tools.API.Messages.WindowMessage.ReturnValue"/> has the same value.</remarks>
</member>
<member name="M:Tools.API.Messages.WindowMessage.op_Like(Tools.API.Messages.WindowMessage,Tools.API.Messages.WindowMessage)">
 <summary>Loosely compare two <see cref="T:Tools.API.Messages.WindowMessage" /> instances</summary>
 <param name="a">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <param name="b">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <returns>True when <paramref name="a"/> and <paramref name="b"/> has same value of <see cref="P:Tools.API.Messages.WindowMessage.Message"/>, <see cref="P:Tools.API.Messages.WindowMessage.lParam"/> and <see cref="P:Tools.API.Messages.WindowMessage.wParam"/> properties or both are null</returns>
</member>
<member name="M:Tools.API.Messages.WindowMessage.GetHashCode">
 <summary>Serves as a hash function for <see cref="T:Tools.API.Messages.WindowMessage" />.</summary>
 <returns>A hash code for the current <see cref="T:Tools.API.Messages.WindowMessage" />.</returns>
 <remarks>Returns same value as <see cref="M:System.Windows.Forms.Message.GetHashCode"/> for equal instance</remarks>
</member>
<member name="M:Tools.API.Messages.WindowMessage.op_Equality(Tools.API.Messages.WindowMessage,Tools.API.Messages.WindowMessage)">
 <summary>Compares two <see cref="T:Tools.API.Messages.WindowMessage" /> objects</summary>
 <param name="a">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <param name="b">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <returns>True when <paramref name="a"/> and <paramref name="b"/> equals or are both null</returns>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.API.Messages.WindowMessage.op_Equality(Tools.API.Messages.WindowMessage,System.Windows.Forms.Message)">
 <summary>Compares two <see cref="T:Tools.API.Messages.WindowMessage" /> objects</summary>
 <param name="a">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <param name="b">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <returns>True when <paramref name="a"/> and <paramref name="b"/> equals</returns>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.API.Messages.WindowMessage.op_Inequality(Tools.API.Messages.WindowMessage,Tools.API.Messages.WindowMessage)">
 <summary>Compares two <see cref="T:Tools.API.Messages.WindowMessage" /> objects</summary>
 <param name="a">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <param name="b">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <returns>False when <paramref name="a"/> and <paramref name="b"/> equals or are both null</returns>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.API.Messages.WindowMessage.op_Inequality(Tools.API.Messages.WindowMessage,System.Windows.Forms.Message)">
 <summary>Compares two <see cref="T:Tools.API.Messages.WindowMessage" /> objects</summary>
 <param name="a">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <param name="b">A <see cref="T:Tools.API.Messages.WindowMessage" /></param>
 <returns>False when <paramref name="a"/> and <paramref name="b"/> equals</returns>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.API.Messages.WindowMessage.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <remarks>Use type-safe <see cref="M:Tools.API.Messages.WindowMessage.Clone"/> instead</remarks>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="P:Tools.API.Messages.WindowMessage.Empty">
 <summary>Gets an empty instance of the <see cref="T:Tools.API.Messages.WindowMessage" /> class</summary>
</member>
<member name="P:Tools.API.Messages.WindowMessage.lParamLow">
 <summary>Gets low-order word of <see cref="P:Tools.API.Messages.WindowMessage.lParam"/></summary>
 <returns>Low-orded word of <see cref="P:Tools.API.Messages.WindowMessage.lParam"/></returns>
 <seelaso cref="M:Tools.ExtensionsT.Numbers.Low(System.Int16)"/><seelaso cref="P:Tools.API.Messages.WindowMessage.lParam"/>
</member>
<member name="P:Tools.API.Messages.WindowMessage.lParamHigh">
 <summary>Gets high-order word of <see cref="P:Tools.API.Messages.WindowMessage.lParam"/></summary>
 <returns>High-orded word of <see cref="P:Tools.API.Messages.WindowMessage.lParam"/></returns>
 <seelaso cref="M:Tools.ExtensionsT.Numbers.High(System.Int16)"/><seelaso cref="P:Tools.API.Messages.WindowMessage.lParam"/>
</member>
<member name="P:Tools.API.Messages.WindowMessage.wParamLow">
 <summary>Gets low-order word of <see cref="P:Tools.API.Messages.WindowMessage.wParam"/></summary>
 <returns>Low-orded word of <see cref="P:Tools.API.Messages.WindowMessage.wParam"/></returns>
 <seelaso cref="M:Tools.ExtensionsT.Numbers.Low(System.Int16)"/><seelaso cref="P:Tools.API.Messages.WindowMessage.wParam"/>
</member>
<member name="P:Tools.API.Messages.WindowMessage.wParamHigh">
 <summary>Gets high-order word of <see cref="P:Tools.API.Messages.WindowMessage.wParam"/></summary>
 <returns>High-orded word of <see cref="P:Tools.API.Messages.WindowMessage.wParam"/></returns>
 <seelaso cref="M:Tools.ExtensionsT.Numbers.High(System.Int16)"/><seelaso cref="P:Tools.API.Messages.WindowMessage.wParam"/>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Broadcast">
 <summary>Broadcasts message to all top-level windows</summary>
 <returns>Result of message</returns>
 <remarks>This method sets <see cref="P:Tools.API.Messages.WindowMessage.ReturnValue"/> to result of message</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Send(System.IntPtr)">
 <summary>Sends the message to specified window identified by handle</summary>
 <param name="hWnd">Hande of window to send message to</param>
 <returns>Result of message</returns>
 <remarks>This method sets <see cref="P:Tools.API.Messages.WindowMessage.ReturnValue"/> to result of message</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Send(System.Windows.Forms.IWin32Window)">
 <summary>Sends the message to specified window</summary>
 <param name="window">A window to send message to</param>
 <returns>Result of message</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="window"/> is null</exception>
 <remarks>This method sets <see cref="P:Tools.API.Messages.WindowMessage.ReturnValue"/> to result of message</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Send(System.Windows.Forms.IWin32Window,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Sends a message to given window</summary>
 <param name="window">A window to send message to</param>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message wParam parameter</param>
 <param name="lParam">Message lParam parameter</param>
 <returns>Message call result</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="window"/> is null</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Send(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Sends a message to given window</summary>
 <param name="hWnd">Hande of window to send message to</param>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message wParam parameter</param>
 <param name="lParam">Message lParam parameter</param>
 <returns>Message call result</returns>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Send">
 <summary>Sends the message to window specified in the <see cref="P:Tools.API.Messages.WindowMessage.hWnd"/> property</summary>
 <returns>Result of message</returns>
 <remarks>This method sets <see cref="P:Tools.API.Messages.WindowMessage.ReturnValue"/> to result of message</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Post(System.IntPtr)">
 <summary>Posts the message to specified window identified by handle without waiting for window to process the message</summary>
 <param name="hWnd">Hande of window to Post message to</param>
 <exception cref="T:Tools.API.Win32APIException">Failed to post the message</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Post(System.Windows.Forms.IWin32Window)">
 <summary>Posts the message to specified window without waiting for window to process the message</summary>
 <param name="window">A window to Post message to</param>
 <exception cref="T:Tools.API.Win32APIException">Failed to post the message</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="window"/> is null</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Post(System.Windows.Forms.IWin32Window,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Posts a message to given window without waiting for window to process the message</summary>
 <param name="window">A window to Post message to</param>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message wParam parameter</param>
 <param name="lParam">Message lParam parameter</param>
 <exception cref="T:Tools.API.Win32APIException">Failed to post the message</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="window"/> is null</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Post(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Posts a message to given window without waiting for window to process the message</summary>
 <param name="hWnd">Hande of window to Post message to</param>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message wParam parameter</param>
 <param name="lParam">Message lParam parameter</param>
 <exception cref="T:Tools.API.Win32APIException">Failed to post the message</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.WindowMessage.Post">
 <summary>Posts the message to window specified in the <see cref="P:Tools.API.Messages.WindowMessage.hWnd"/> property without waiting for window to process the message</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to post the message</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="T:Tools.API.Messages.WndProcEventArgs">
 <summary>Delegate of procedure that serves as event handler for <see cref="E:Tools.API.Messages.IWindowsMessagesProviderRef.WndProc"/></summary>
 <param name="sender">Source of the event</param>
 <param name="msg">Windows message passes by reference so, calle can change it</param>
</member>
<member name="T:Tools.API.Messages.WndProcEventArgs`1">
 <summary>Delegate of procedure tah serves as event handler for conrete message provider</summary>
 <param name="sender">Source of the event</param>
 <param name="Message">Windows mesage</param>
 <typeparam name="T">Type of message</typeparam>
</member>
<member name="T:Tools.API.Messages.Messages">
 <summary>Defines API functions to worki with windows messages</summary>
 <version version="1.5.3">This module is new in version 1.5.3</version>
</member>
<member name="M:Tools.API.Messages.Messages.SendMessage(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Sends the specified message to a window or System.Windows. The <see cref="M:Tools.API.Messages.Messages.SendMessage(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/>  function calls the window procedure for the specified window and does not return until the window procedure has processed the message.</summary>
 <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <see cref="F:Tools.API.GUI.SpecialWindowHandles.HWND_BROADCAST"/>, the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child System.Windows.</param>
 <param name="msg">The message to be sent.</param>
 <param name="wParam">Additional message-specific information.</param>
 <param name="lParam">Additional message-specific information.</param>
 <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
</member>
<member name="M:Tools.API.Messages.Messages.SendMessage(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Text.StringBuilder)">
 <summary>Sends the specified message to a window or System.Windows. The <see cref="M:Tools.API.Messages.Messages.SendMessage(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/>  function calls the window procedure for the specified window and does not return until the window procedure has processed the message. (<paramref name="lParam"/> as pointer to string)</summary>
 <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <see cref="F:Tools.API.GUI.SpecialWindowHandles.HWND_BROADCAST"/>, the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child System.Windows.</param>
 <param name="msg">The message to be sent.</param>
 <param name="wParam">Additional message-specific information.</param>
 <param name="lParam">Additional message-specific information.</param>
 <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
</member>
<member name="M:Tools.API.Messages.Messages.PostMessage(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.</summary>
 <param name="hWnd">A handle to the window whose window procedure will receive the message. If this parameter is <see cref="F:Tools.API.GUI.SpecialWindowHandles.HWND_BROADCAST"/>, the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child System.Windows.</param>
 <param name="msg">The message to be sent.</param>
 <param name="wParam">Additional message-specific information.</param>
 <param name="lParam">Additional message-specific information.</param>
 <remarks>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</remarks>
</member>
<member name="T:Tools.API.Messages.wParam.WM_ACTIVATE">
 <summary>Values used for wParam used by <see cref="F:Tools.API.Messages.WindowMessages.WM_ACTIVATE"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_ACTIVATE.WA_ACTIVE">
 <summary>Activated by some method other than a mouse click (for example, by a call to the SetActiveWindow function or by use of the keyboard interface to select the window).</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_ACTIVATE.WA_CLICKACTIVE">
 <summary>Activated by a mouse click.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_ACTIVATE.WA_INACTIVE">
 <summary>Deactivated.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_CHANGEUISTATE_low">
 <summary>Values for wParam used by <see cref="F:Tools.API.Messages.WindowMessages.WM_CHANGEUISTATE"/>. Those constants are used for low-order word of wParam.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_low.UIS_CLEAR">
 <summary>The UI state flags specified by the high-order word should be cleared.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_low.UIS_INITIALIZE">
 <summary>The UI state flags specified by the high-order word should be changed based on the last input event. For more information, see Remarks.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_low.UIS_SET">
 <summary>The UI state flags specified by the high-order word should be set.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_CHANGEUISTATE_high">
 <summary>Values for wParam used by <see cref="F:Tools.API.Messages.WindowMessages.WM_CHANGEUISTATE"/>. Those constants are used for high-order word of wParam.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_high.UISF_HIDEACCEL">
 <summary>Keyboard accelerators are hidden.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_high.UISF_HIDEFOCUS">
 <summary>Focus indicators are hidden.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE_high.UISF_ACTIVE">
 <summary>Windows XP: A control should be drawn in the style used for active controls.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_CHANGEUISTATE">
 <summary>Values for wParam used by <see cref="F:Tools.API.Messages.WindowMessages.WM_CHANGEUISTATE"/>.</summary>
 <remarks>Actual value of wParam can be or-ed UIS_* and UISF_* constant</remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UIS_CLEAR">
 <summary>The UI state flags specified by the high-order word should be cleared.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UIS_INITIALIZE">
 <summary>The UI state flags specified by the high-order word should be changed based on the last input event. For more information, see Remarks.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UIS_SET">
 <summary>The UI state flags specified by the high-order word should be set.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UISF_HIDEACCEL">
 <summary>''' <summary>Keyboard accelerators are hidden.</summary></summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UISF_HIDEFOCUS">
 <summary>Focus indicators are hidden.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_CHANGEUISTATE.UISF_ACTIVE">
 <summary>Windows XP: A control should be drawn in the style used for active controls.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_COMMAND_low">
 <summary>Constants used for low word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_COMMAND"/> message</summary>
 <remarks>Sorry, I haven't found any documentation for those constants</remarks>
</member>
<member name="T:Tools.API.Messages.wParam.WM_DEVICECHANGE">
 <summary>Constants used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_DEVICECHANGE"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_CONFIGCHANGECANCELED">
 <summary>A request to change the current configuration (dock or undock) has been canceled.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_CONFIGCHANGED">
 <summary>The current configuration has changed, due to a dock or undock.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_CUSTOMEVENT">
 <summary>A custom event has occurred.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEARRIVAL">
 <summary>A device or piece of media has been inserted and is now available.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEQUERYREMOVE">
 <summary>Permission is requested to remove a device or piece of media. Any application can deny this request and cancel the removal.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEQUERYREMOVEFAILED">
 <summary>A request to remove a device or piece of media has been canceled.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEREMOVECOMPLETE">
 <summary>A device or piece of media has been removed.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICEREMOVEPENDING">
 <summary>A device or piece of media is about to be removed. Cannot be denied.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVICETYPESPECIFIC">
 <summary>A device-specific event has occurred.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_DEVNODES_CHANGED">
 <summary>A device has been added to or removed from the system.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_QUERYCHANGECONFIG">
 <summary>Permission is requested to change the current configuration (dock or undock).</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_DEVICECHANGE.DBT_USERDEFINED">
 <summary>The meaning of this message is user-defined.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_ENTERIDLE">
 <summary>Values used by wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_ENTERIDLE"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_ENTERIDLE.MSGF_DIALOGBOX">
 <summary>The system is idle because a dialog box is displayed.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_ENTERIDLE.MSGF_MENU">
 <summary>The system is idle because a menu is displayed.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_GETICON">
 <summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_GETICON"/> message</summary>
 <remarks><see cref="F:Tools.API.Messages.wParam.WM_GETICON.ICON_BIG"/> and <see cref="F:Tools.API.Messages.wParam.WM_GETICON.ICON_SMALL"/> ia also used by <see cref="F:Tools.API.Messages.WindowMessages.WM_SETICON"/>'s wParam.</remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_GETICON.ICON_BIG">
 <summary>Retrieve the large icon for the window.</summary>
 <remarks><see cref="F:Tools.API.Messages.WindowMessages.WM_SETICON"/>: Set the large icon for the window.</remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_GETICON.ICON_SMALL">
 <summary>Retrieve the small icon for the window.</summary>
 <remarks><see cref="F:Tools.API.Messages.WindowMessages.WM_SETICON"/>: Set the small icon for the window.</remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_GETICON.ICON_SMALL2">
 <summary>Windows XP: Retrieves the small icon provided by the application. If the application does not provide one, the system uses the system-generated icon for that window.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_HOTKEY">
 <summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_HOTKEY"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HOTKEY.IDHOT_SNAPDESKTOP">
 <summary>The "snap desktop" hot key was pressed.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HOTKEY.IDHOT_SNAPWINDOW">
 <summary>The "snap window" hot key was pressed.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_HSCROLL_low">
 <summary>Used for low word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_HSCROLL"/> message and for low word of lParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_HSCROLLCLIPBOARD"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_ENDSCROLL">
 <summary>Ends scroll.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_LEFT">
 <summary>Scrolls to the upper left.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_RIGHT">
 <summary>Scrolls to the lower right.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_LINELEFT">
 <summary>Scrolls left by one unit.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_LINERIGHT">
 <summary>Scrolls right by one unit.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_PAGELEFT">
 <summary>Scrolls left by the width of the window.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_PAGERIGHT">
 <summary>Scrolls right by the width of the window.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_THUMBPOSITION">
 <summary>The user has dragged the scroll box (thumb) and released the mouse button. The high-order word indicates the position of the scroll box at the end of the drag operation.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_HSCROLL_low.SB_THUMBTRACK">
 <summary>The user is dragging the scroll box. This message is sent repeatedly until the user releases the mouse button. The high-order word indicates the position that the scroll box has been dragged to.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_VSCROLL_low">
 <summary>Used for low word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_VSCROLL"/> message and for low word of lParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_VSCROLLCLIPBOARD"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_BOTTOM">
 <summary>Scrolls to the lower right.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_ENDSCROLL">
 <summary>Ends scroll.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_LINEDOWN">
 <summary>Scrolls one line down.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_LINEUP">
 <summary>Scrolls one line up.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_PAGEDOWN">
 <summary>Scrolls one page down.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_PAGEUP">
 <summary>Scrolls one page up.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_THUMBPOSITION">
 <summary>The user has dragged the scroll box (thumb) and released the mouse button. The high-order word indicates the position of the scroll box at the end of the drag operation.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_THUMBTRACK">
 <summary>The user is dragging the scroll box. This message is sent repeatedly until the user releases the mouse button. The high-order word indicates the position that the scroll box has been dragged to.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_VSCROLL_low.SB_TOP">
 <summary>Scrolls to the upper left.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_IME_CONTROL">
 <summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_CONTROL"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_CLOSESTATUSWINDOW">
 <summary>Instructs the IME window to hide the status window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776088.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_GETCANDIDATEPOS">
 <summary>Instructs an IME window to get the position of the candidate window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a CANDIDATEFORM structure that contains the position of the candidate window.</description></item>
 <item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776097.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_GETCOMPOSITIONFONT">
 <summary>Instructs an IME window to retrieve the logical font used for displaying intermediate characters in the composition window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a LOGFONT structure that receives information about the logical font.</description></item>
 <item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776132.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_GETCOMPOSITIONWINDOW">
 <summary>Instructs an IME window to get the position of the composition window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a COMPOSITIONFORM structure that contains the position of the composition window.</description></item>
 <item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776104.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_GETSTATUSWINDOWPOS">
 <summary>Instructs an IME window to get the position of the status window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>Returns a POINTS structure that contains the x coordinate and y coordinate of the status window position in screen coordinates, relative to the upper left corner of the display screen.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776079.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_OPENSTATUSWINDOW">
 <summary>Instructs the IME window to show the status window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776106.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_SETCANDIDATEPOS">
 <summary>Instructs an IME window to set the position of the candidate window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a CANDIDATEFORM structure that contains the x coordinate and y coordinate for the candidate window. The application should set the dwIndex member of this structure.</description></item>
 <item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776165.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_SETCOMPOSITIONFONT">
 <summary>Instructs an IME window to specify the logical font to use for displaying intermediate characters in the composition window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a LOGFONT structure that contains information about the logical font.</description></item>
 <item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776168.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_SETCOMPOSITIONWINDOW">
 <summary>Instructs an IME window to set the style of the composition window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a COMPOSITIONFORM structure that contains the style information.</description></item>
 <item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776180.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_CONTROL.IMC_SETSTATUSWINDOWPOS">
 <summary>Instructs an IME window to set the position of the status window. To send this command, the application uses the WM_IME_CONTROL message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a POINTS structure that contains the x coordinate and y coordinate of the position of the status window. The coordinates are in screen coordinates, relative to the upper left corner of the display screen.</description></item>
 <item><term>Return value</term><description>Returns 0 if successful or a nonzero value otherwise.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776113.aspx</seealso></remarks>
</member>
<member name="T:Tools.API.Messages.wParam.WM_IME_NOTIFY">
 <summary>Values used for wParam of message <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_NOTIFY"/></summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_CHANGECANDIDATE">
 <summary>Notifies the application when an IME is about to change the content of the candidate window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Candidate list flag. Each bit corresponds to a candidate list: bit 0 to the first list, bit 1 to the second list, and so on. If a specified bit is 1, the corresponding candidate window is about to be changed.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776085.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_CLOSECANDIDATE">
 <summary>Notifies an application when an IME is about to close the candidate window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Candidate list flag. Each bit corresponds to a candidate list: bit 0 to the first list, bit 1 to the second, and so on. If a specified bit is 1, the corresponding candidate window is about to be closed.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776137.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_CLOSESTATUSWINDOW">
 <summary>Notifies an application when an IME is about to close the status window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776129.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_GUIDELINE">
 <summary>Notifies an application when an IME is about to show an error message or other information. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776142.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_OPENCANDIDATE">
 <summary>Notifies an application when an IME is about to open the candidate window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Candidate list flag. Each bit corresponds to a candidate list: bit 0 to the first list, bit 1 to the second, and so on. If a specified bit is 1, the corresponding candidate window is about to be opened.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776142.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_OPENSTATUSWINDOW">
 <summary>Notifies an application when an IME is about to open the candidate window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Candidate list flag. Each bit corresponds to a candidate list: bit 0 to the first list, bit 1 to the second, and so on. If a specified bit is 1, the corresponding candidate window is about to be opened.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776148.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETCANDIDATEPOS">
 <summary>Notifies an application when an IME is about to create the status window. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776166.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETCOMPOSITIONFONT">
 <summary>Notifies an application when the font of the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776123.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETCOMPOSITIONWINDOW">
 <summary>Notifies an application when the style or position of the composition window is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776098.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETCONVERSIONMODE">
 <summary>Notifies an application when the conversion mode of the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776163.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETOPENSTATUS">
 <summary>Notifies an application when the open status of the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776139.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETSENTENCEMODE">
 <summary>Notifies an application when the sentence mode of the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso></seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_NOTIFY.IMN_SETSTATUSWINDOWPOS">
 <summary>Notifies an application when the status window position in the input context is updated. The application receives this command through the WM_IME_NOTIFY message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>This parameter is not used.</description></item>
 <item><term>Return value</term><description>This command has no return value.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776184.aspx</seealso></remarks>
</member>
<member name="T:Tools.API.Messages.wParam.WM_IME_REQUEST">
 <summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_IME_REQUEST"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_CANDIDATEWINDOW">
 <summary>Notfies an application when a selected IME needs information about the candidate window. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a buffer containing a CANDIDATEFORM structure. Its dwIndex member contains the index to the candidate window referenced.</description></item>
 <item><term>Return value</term><description>Returns a nonzero value if the application fills in the CANDIDATEFORM structure. Otherwise, the command returns 0.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776080.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_COMPOSITIONFONT">
 <summary>Notifies an application when a selected IME needs information about the font used by the composition window. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a buffer containing a LOGFONT structure. The application fills in the values for the current composition window.</description></item>
 <item><term>Return value</term><description>Returns a nonzero value if the application fills in the LOGFONT structure. Otherwise, the command returns 0.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776149.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_COMPOSITIONWINDOW">
 <summary>Notifies an application when a selected IME needs information about the composition window. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a buffer containing a COMPOSITIONFORM structure.</description></item>
 <item><term>Return value</term><description>Returns a nonzero value if the application fills in the COMPOSITIONFORM structure. Otherwise, the command returns 0.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776169.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_CONFIRMRECONVERTSTRING">
 <summary>Notifies an application when the IME needs to change the RECONVERTSTRING structure. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a RECONVERTSTRING structure from the IME. For more information, see the Remarks section.</description></item>
 <item><term>Return value</term><description>Returns a nonzero value if the application accepts the changed RECONVERTSTRING structure. Otherwise, the command returns 0 and the IME uses the original RECONVERTSTRING structure.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776182.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_DOCUMENTFEED">
 <summary>Notifies an application when the selected IME needs the converted string from the application. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a buffer to contain theRECONVERTSTRING structure.</description></item>
 <item><term>Return value</term><description>Returns the current reconversion string structure. If lParam is set to a null pointer, the application returns the required size for the buffer to hold the structure. The command returns 0 if it does not succeed.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776164.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_QUERYCHARPOSITION">
 <summary>Notifies an application when the selected IME needs information about the coordinates of a character in the composition string. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to an IMECHARPOSITION structure that contains the position of the character in the composition window.</description></item>
 <item><term>Return value</term><description>Returns a nonzero value if the application fills the IMECHARPOSITION structure. Otherwise, the command returns 0.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776110.aspx</seealso></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_IME_REQUEST.IMR_RECONVERTSTRING">
 <summary>Notifies an application when a selected IME needs a string for reconversion. The application receives this command through the WM_IME_REQUEST message with wParam and lParam set as follows.</summary>
 <remarks><list type="table">
 <item><term>lParam</term><description>Pointer to a buffer containing the RECONVERTSTRING structure and strings.</description></item>
 <item><term>Return value</term><description>Returns the current reconversion string structure. If lParam is set to a null pointer, the application returns the size for the buffer required to hold the structure. The command returns 0 if it does not succeed.</description></item>
 </list><seealso>http://msdn2.microsoft.com/en-us/library/ms776135.aspx</seealso></remarks>
</member>
<member name="T:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST">
 <summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUTLANGCHANGEREQUEST"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST.INPUTLANGCHANGE_BACKWARD">
 <summary>Windows 2000/XP: A hot key was used to choose the previous input locale in the installed list of input locales. This flag cannot be used with the INPUTLANGCHANGE_FORWARD flag.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST.INPUTLANGCHANGE_FORWARD">
 <summary>Windows 2000/XP: A hot key was used to choose the next input locale in the installed list of input locales. This flag cannot be used with the INPUTLANGCHANGE_BACKWARD flag.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_INPUTLANGCHANGEREQUEST.INPUTLANGCHANGE_SYSCHARSET">
 <summary>Windows 2000/XP:The new input locale's keyboard layout can be used with the system character set.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK">
 <summary>Values used for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDBLCLK"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDBLCLK"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MBUTTONDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MBUTTONUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEHOVER"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEMOVE"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEWHEEL"/> (low-order word as <see cref="T:System.Int16"/>), <see cref="F:Tools.API.Messages.WindowMessages.WM_RBUTTONDBLCLK"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_RBUTTONDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_RBUTTONUP"/></summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_CONTROL">
 <summary>The CTRL key is down.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_LBUTTON">
 <summary>The left mouse button is down.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_MBUTTON">
 <summary>The middle mouse button is down.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_RBUTTON">
 <summary>The right mouse button is down.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_SHIFT">
 <summary>The SHIFT key is down.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_XBUTTON1">
 <summary>Windows 2000/XP: The first X button is down.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_LBUTTONDBLCLK.MK_XBUTTON2">
 <summary>Windows 2000/XP: The second X button is down.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_MDICASCADE">
 <summary>Values used fro wParam as <see cref="F:Tools.API.Messages.WindowMessages.WM_MDICASCADE"/></summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MDICASCADE.MDITILE_SKIPDISABLED">
 <summary>Prevents disabled MDI child windows from being cascaded.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MDICASCADE.MDITILE_ZORDER">
 <summary>Windows 2000/XP: Arranges the windows in Z order.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_MDITILE">
 <summary>Values for wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_MDITILE"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MDITILE.MDITILE_HORIZONTAL">
 <summary>Tiles windows horizontally.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MDITILE.MDITILE_VERTICAL">
 <summary>Tiles windows vertically.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MDITILE.MDITILE_SKIPDISABLED">
 <summary>prevent disabled MDI child windows from being tiled</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_MENUCHAR_high">
 <summary>Values used for high word of wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUCHAR"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUCHAR_high.MF_POPUP">
 <summary>A drop-down menu, submenu, or shortcut menu.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUCHAR_high.MF_SYSMENU">
 <summary>The window menu.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_MENUSELECT_high">
 <summary>Values used for high word of wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_MENUSELECT"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_BITMAP">
 <summary>Item displays a bitmap.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_CHECKED">
 <summary></summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_DISABLED">
 <summary>Item is disabled.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_GRAYED">
 <summary>Item is grayed.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_HILITE">
 <summary>Item is highlighted.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_MOUSESELECT">
 <summary>Item is selected with the mouse.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_OWNERDRAW">
 <summary>    Item is an owner-drawn item.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_POPUP">
 <summary>Item is contained in the window menu. The lParam parameter contains a handle to the menu associated with the message.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_MENUSELECT_high.MF_SYSMENU">
 <summary>Item is contained in the window menu. The lParam parameter contains a handle to the menu associated with the message.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low">
 <summary>Values used for low word of wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_PARENTNOTIFY"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_CREATE">
 <summary>The child window is being created.</summary>
 <remarks><list type="table">
 <item><term>High-order word of wParam</term><description>Identifier of the child window.</description></item>
 <item><term>lParam</term><description>Handle of the child window.</description></item>
 </list></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_DESTROY">
 <summary>The child window is being destroyed.</summary>
 <remarks><list type="table">
 <item><term>High-order word of wParam</term><description>Identifier of the child window.</description></item>
 <item><term>lParam</term><description>Handle of the child window.</description></item>
 </list></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_LBUTTONDOWN">
 <summary>The user has placed the cursor over the child window and has clicked the left mouse button.</summary>
 <remarks><list type="table">
 <item><term>High-order word of wParam</term><description>Undefined.</description></item>
 <item><term>lParam</term><description>The x-coordinate of the cursor is the low-order word, and the y-coordinate of the cursor is the high-order word.</description></item>
 </list></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_MBUTTONDOWN">
 <summary>The user has placed the cursor over the child window and has clicked the middle mouse button.</summary>
 <remarks><list type="table">
 <item><term>High-order word of wParam</term><description>Undefined.</description></item>
 <item><term>lParam</term><description>The x-coordinate of the cursor is the low-order word, and the y-coordinate of the cursor is the high-order word.</description></item>
 </list></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_RBUTTONDOWN">
 <summary>The user has placed the cursor over the child window and has clicked the right mouse button.</summary>
 <remarks><list type="table">
 <item><term>High-order word of wParam</term><description>Undefined.</description></item>
 <item><term>lParam</term><description>The x-coordinate of the cursor is the low-order word, and the y-coordinate of the cursor is the high-order word.</description></item>
 </list></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_XBUTTONDOWN">
 <summary>Windows 2000/XP: The user has placed the cursor over the child window and has clicked the first or second X button.</summary>
 <remarks><list type="table">
 <item><term>High-order word of wParam</term><description>Windows 2000/XP: Indicates which button was pressed. This parameter can be one of the <see cref="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high"/> values.</description></item>
 <item><term>lParam</term><description>The x-coordinate of the cursor is the low-order word, and the y-coordinate of the cursor is the high-order word.</description></item>
 </list></remarks>
</member>
<member name="T:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high">
 <summary>Values used for high word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_PARENTNOTIFY"/> when low word is <see cref="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_low.WM_XBUTTONDOWN"/> and for high-order word of wParam of <see cref="F:Tools.API.Messages.WindowMessages.WM_XBUTTONDBLCLK"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_XBUTTONDOWN"/> and <see cref="F:Tools.API.Messages.WindowMessages.WM_XBUTTONUP"/></summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high.XBUTTON1">
 <summary>X-button 1</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_PARENTNOTIFY_WM_XBUTTONDOWN_high.XBUTTON2">
 <summary>X-button 2</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_POWER">
 <summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_POWER"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWER.PWR_CRITICALRESUME">
 <summary>Indicates that the system is resuming operation after entering suspended mode without first broadcasting a PWR_SUSPENDREQUEST notification message to the application. An application should perform any necessary recovery actions.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDREQUEST">
 <summary>Indicates that the system is about to enter suspended mode.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWER.PWR_SUSPENDRESUME">
 <summary>Indicates that the system is resuming operation after having entered suspended mode normally—that is, the system broadcast a PWR_SUSPENDREQUEST notification message to the application before the system was suspended. An application should perform any necessary recovery actions.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_POWERBROADCAST">
 <summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_POWERBROADCAST"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMBATTERYLOW">
 <summary>Battery power is low. In Windows Server 2008 and Windows Vista, use <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMPOWERSTATUSCHANGE"/> instead.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMPOWERSTATUSCHANGE">
 <summary>Used in Windows Server 2008 and Windows Vista instead of <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMBATTERYLOW"/></summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMOEMEVENT">
 <summary>OEM-defined event occurred. In Windows Server 2008 and Windows Vista, this event is not available because these operating systems support only ACPI; APM BIOS events are not supported.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMQUERYSUSPEND">
 <summary>Request for permission to suspend. In Windows Server 2008 and Windows Vista, use the SetThreadExecutionState function instead.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMQUERYSUSPENDFAILED">
 <summary>Suspension request denied. In Windows Server 2008 and Windows Vista, use SetThreadExecutionState instead.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMRESUMECRITICAL">
 <summary>Operation resuming after critical suspension. In Windows Server 2008 and Windows Vista, use <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMRESUMEAUTOMATIC"/> instead.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMRESUMEAUTOMATIC">
 <summary>Used in Windows Server 2008 and Windows Vista instead of <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_APMRESUMECRITICAL"/></summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_POWERSETTINGCHANGE">
 <summary>If the wParam parameter is <see cref="F:Tools.API.Messages.wParam.WM_POWERBROADCAST.PBT_POWERSETTINGCHANGE"/>, the lParam parameter is a pointer to a POWERBROADCAST_SETTING structure.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_SIZE">
 <summary>Values used for wParam of the <see cref="T:Tools.API.Messages.wParam.WM_SIZE"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_MAXHIDE">
 <summary>Message is sent to all pop-up windows when some other window is maximized.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_MAXIMIZED">
 <summary>The window has been maximized.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_MAXSHOW">
 <summary>Message is sent to all pop-up windows when some other window has been restored to its former size.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_MINIMIZED">
 <summary>The window has been minimized.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZE.SIZE_RESTORED">
 <summary>The window has been resized, but neither the SIZE_MINIMIZED nor SIZE_MAXIMIZED value applies.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_SIZING">
 <summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SIZING"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_BOTTOM">
 <summary>Bottom edge</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_BOTTOMLEFT">
 <summary>Bottom-left corner</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_BOTTOMRIGHT">
 <summary>Bottom-right corner</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_LEFT">
 <summary>Left edge</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_RIGHT">
 <summary>Right edge</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_TOP">
 <summary>Top edge</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_TOPLEFT">
 <summary>Top-left corner</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SIZING.WMSZ_TOPRIGHT">
 <summary>Top-right corner</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_STYLECHANGED">
 <summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_STYLECHANGED"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_STYLECHANGED.GWL_EXSTYLE">
 <summary>The extended window styles have changed.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_STYLECHANGED.GWL_STYLE">
 <summary>The window styles have changed.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_SYSCOMMAND">
 <summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSCOMMAND"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_CLOSE">
 <summary>Closes the window.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_CONTEXTHELP">
 <summary>Changes the cursor to a question mark with a pointer. If the user then clicks a control in the dialog box, the control receives a WM_HELP message.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_DEFAULT">
 <summary>Activates the window associated with the application-specified hot key. The lParam parameter identifies the window to activate.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_HOTKEY">
 <summary>Activates the window associated with the application-specified hot key. The lParam parameter identifies the window to activate.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_HSCROLL">
 <summary>Scrolls horizontally.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_KEYMENU">
 <summary>Retrieves the window menu as a result of a keystroke. For more information, see the Remarks section.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MAXIMIZE">
 <summary>Maximizes the window.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MINIMIZE">
 <summary>Minimizes the window.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MONITORPOWER">
 <summary>    Sets the state of the display. This command supports devices that have power-saving features, such as a battery-powered personal computer.</summary>
 <remarks>The lParam parameter can have the following values:
 <list type="table">
 <item><term>1</term><description>the display is going to low power</description></item>
 <item><term>2</term><description> the display is being shut off</description></item>
 </list></remarks>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MOUSEMENU">
 <summary>Retrieves the window menu as a result of a mouse click.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_MOVE">
 <summary>Moves the window.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_NEXTWINDOW">
 <summary>Moves to the next window.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_PREVWINDOW">
 <summary>Moves to the previous window.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_RESTORE">
 <summary>Restores the window to its normal position and size.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_SCREENSAVE">
 <summary>Executes the screen saver application specified in the [boot] section of the System.ini file.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_SIZE">
 <summary>Sizes the window.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_TASKLIST">
 <summary>Activates the Start menu.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_SYSCOMMAND.SC_VSCROLL">
 <summary>Scrolls vertically.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_TCARD">
 <summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_TCARD"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.IDABORT">
 <summary>The user clicked an authorable Abort button.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.IDCANCEL">
 <summary>The user clicked an authorable Cancel button.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.IDCLOSE">
 <summary>The user closed the training card.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.IDHELP">
 <summary>The user clicked an authorable Windows Help button.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.IDIGNORE">
 <summary>The user clicked an authorable Ignore button.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.IDOK">
 <summary>The user clicked an authorable OK button.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.IDNO">
 <summary>The user clicked an authorable No button.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.IDRETRY">
 <summary>The user clicked an authorable Retry button.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.HELP_TCARD_DATA">
 <summary>The user clicked an authorable button. The dwActionData parameter contains a long integer specified by the Help author.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.HELP_TCARD_NEXT">
 <summary>The user clicked an authorable Next button.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.HELP_TCARD_OTHER_CALLER">
 <summary>Another application has requested training cards.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_TCARD.IDYES">
 <summary>The user clicked an authorable Yes button.</summary>
</member>
<member name="T:Tools.API.Messages.wParam.WM_INPUT">
 <summary>Values used for wParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_INPUT.RIM_INPUT">
 <summary>Input occurred while the application was in the foreground. The application must call DefWindowProc so the system can perform cleanup.</summary>
</member>
<member name="F:Tools.API.Messages.wParam.WM_INPUT.RIM_INPUTSINK">
 <summary>Input occurred while the application was not in the foreground. The application must call DefWindowProc so the system can perform the cleanup.</summary>
</member>
<member name="T:Tools.API.Threads">
 <summary>Contains Win32 API declarations related to threads</summary>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.DELETE">
 <summary>Required to delete the object.</summary>
 <remarks>This is standard access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.READ_CONTROL">
 <summary>Required to read information in the security descriptor for the object, not including the information in the SACL. To read or write the SACL, you must request the ACCESS_SYSTEM_SECURITY access right. For more information, see SACL Access Right.</summary>
 <remarks>This is standard access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.WRITE_DAC">
 <summary>Required to modify the DACL in the security descriptor for the object.</summary>
 <remarks>This is standard access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.WRITE_OWNER">
 <summary>Required to change the owner in the security descriptor for the object.</summary>
 <remarks>This is standard access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.SYNCHRONIZE">
 <summary>Enables the use of the thread handle in any of the wait functions.</summary>
 <remarks>This both - standard and thread-specific access right. The standard access right is described as: The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_DIRECT_IMPERSONATION">
 <summary>Required for a server thread that impersonates a client.</summary>
 <remarks>This is thread-specific access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_GET_CONTEXT">
 <summary>Required to read the context of a thread using GetThreadContext.</summary>
 <remarks>This is thread-specific access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_IMPERSONATE">
 <summary>Required to use a thread's security information directly without calling it by using a communication mechanism that provides impersonation services.</summary>
 <remarks>This is thread-specific access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_QUERY_INFORMATION">
 <summary>Required to read certain information from the thread object, such as the exit code (see GetExitCodeThread).</summary>
 <remarks>This is thread-specific access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_QUERY_LIMITED_INFORMATION">
 <summary>Required to read certain information from the thread objects (see GetProcessIdOfThread). A handle that has the <see cref="F:Tools.API.Threads.ThreadAccess.THREAD_QUERY_INFORMATION"/> access right is automatically granted <see cref="F:Tools.API.Threads.ThreadAccess.THREAD_QUERY_LIMITED_INFORMATION"/>.</summary>
 <remarks>Windows Server 2003 and Windows XP/2000:  This access right is not supported.
 <para>This is thread-specific access right.</para></remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_SET_CONTEXT">
 <summary>Required to write the context of a thread using SetThreadContext.</summary>
 <remarks>This is thread-specific access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_SET_INFORMATION">
 <summary>Required to set certain information in the thread object.</summary>
 <remarks>This is thread-specific access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_SET_LIMITED_INFORMATION">
 <summary>Required to set certain information in the thread object. A handle that has the <see cref="F:Tools.API.Threads.ThreadAccess.THREAD_SET_INFORMATION"/> access right is automatically granted <see cref="F:Tools.API.Threads.ThreadAccess.THREAD_SET_LIMITED_INFORMATION"/>.</summary>
 <remarks>Windows Server 2003 and Windows XP/2000:  This access right is not supported.
 <para>This is thread-specific access right.</para></remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_SET_THREAD_TOKEN">
 <summary>Required to set the impersonation token for a thread using SetThreadToken.</summary>
 <remarks>This is thread-specific access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_SUSPEND_RESUME">
 <summary>Required to suspend or resume a thread (see <see cref="M:Tools.API.Threads.SuspendThread(System.IntPtr)"/> and <see cref="M:Tools.API.Threads.ResumeThread(System.IntPtr)"/>).</summary>
 <remarks>This is thread-specific access right.</remarks>
</member>
<member name="F:Tools.API.Threads.ThreadAccess.THREAD_TERMINATE">
 <summary>Required to terminate a thread using TerminateThread.</summary>
 <remarks>This is thread-specific access right.</remarks>
</member>
<member name="M:Tools.API.Threads.OpenThread(Tools.API.Threads.ThreadAccess,System.Boolean,System.UInt32)">
 <summary>Opens an existing thread object.</summary>
 <param name="dwDesiredAccess">The access to the thread object. This access right is checked against the security descriptor for the thread. This parameter can be one or more of the thread access rights.
 <para>If the caller has enabled the SeDebugPrivilege privilege, the requested access is granted regardless of the contents of the security descriptor.</para></param>
 <param name="bInheritHandle">If this value is TRUE, processes created by this process will inherit the handle. Otherwise, the processes do not inherit this handle.</param>
 <param name="dwThreadId">The identifier of the thread to be opened.</param>
 <returns>If the function succeeds, the return value is an open handle to the specified thread. If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>.</returns>
</member>
<member name="M:Tools.API.Threads.SuspendThread(System.IntPtr)">
 <summary>Suspends the specified thread.</summary>
 <param name="hThread">A handle to the thread that is to be suspended. </param>
 <returns>If the function succeeds, the return value is the thread's previous suspend count; otherwise, it is -1. </returns>
</member>
<member name="M:Tools.API.Threads.ResumeThread(System.IntPtr)">
 <summary>Decrements a thread's suspend count. When the suspend count is decremented to zero, the execution of the thread is resumed.</summary>
 <param name="hThread">A handle to the thread to be restarted.</param>
 <returns>If the function succeeds, the return value is the thread's previous suspend count. If the function fails, the return value is -1</returns>
</member>
<member name="T:Tools.API.Console">
 <summary>Console-related API declarations</summary>
</member>
<member name="M:Tools.API.Console.AllocConsole">
 <summary>Allocates a new console for the calling process.</summary>
 <returns>If the function succeeds, the return value is nonzero.</returns>
 <remarks>A process can be associated with only one console, so the AllocConsole function fails if the calling process already has a console. A process can use the FreeConsole function to detach itself from its current console, then it can call AllocConsole to create a new console or AttachConsole to attach to another console.</remarks>
</member>
<member name="M:Tools.API.Console.FreeConsole">
 <summary>Detaches the calling process from its console.</summary>
 <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member>
<member name="M:Tools.API.Console.SetConsoleIcon(System.IntPtr)">
 <summary>Sets console icon</summary>
 <param name="hicon">Handle of icon (<see cref="P:System.Drawing.Icon.Handle"/>)</param>
 <returns>True of succes, false on error</returns>
 <remarks>This function is undocumented</remarks>
</member>
<member name="T:Tools.API.Console.HandlerRoutine">
 <summary>An application-defined function used with the SetConsoleCtrlHandler function. A console process uses this function to handle control signals received by the process. When the signal is received, the system creates a new thread in the process to execute the function.</summary>
 <param name="dwCtrlType">The type of control signal received by the handler.</param>
 <returns>If the function handles the control signal, it should return TRUE. If it returns FALSE, the next handler function in the list of handlers for this process is used.</returns>
 <remarks>Because the system creates a new thread in the process to execute the handler function, it is possible that the handler function will be terminated by another thread in the process. Be sure to synchronize threads in the process with the thread for the handler function.</remarks>
</member>
<member name="T:Tools.API.Console.ControlType">
 <summary>Close reasons for <see cref="T:Tools.API.Console.HandlerRoutine"/></summary>
</member>
<member name="F:Tools.API.Console.ControlType.CTRL_C_EVENT">
 <summary>A CTRL+C signal was received, either from keyboard input or from a signal generated by the GenerateConsoleCtrlEvent function.</summary>
</member>
<member name="F:Tools.API.Console.ControlType.CTRL_BREAK_EVENT">
 <summary>A CTRL+BREAK signal was received, either from keyboard input or from a signal generated by GenerateConsoleCtrlEvent.</summary>
</member>
<member name="F:Tools.API.Console.ControlType.CTRL_CLOSE_EVENT">
 <summary>A signal that the system sends to all processes attached to a console when the user closes the console (either by clicking Close on the console window's window menu, or by clicking the End Task button command from Task Manager).</summary>
</member>
<member name="F:Tools.API.Console.ControlType.CTRL_LOGOFF_EVENT">
 <summary><para>A signal that the system sends to all console processes when a user is logging off. This signal does not indicate which user is logging off, so no assumptions can be made.</para>
 <para>Note that this signal is received only by services. Interactive applications are terminated at logoff, so they are not present when the system sends this signal.</para></summary>
</member>
<member name="F:Tools.API.Console.ControlType.CTRL_SHUTDOWN_EVENT">
 <summary><para>A signal that the system sends when the system is shutting down. Interactive applications are not present by the time the system sends this signal, therefore it can be received only be services in this situation. Services also have their own notification mechanism for shutdown events. For more information, see Handler.</para>
 <para>This signal can also be generated by an application using GenerateConsoleCtrlEvent.</para></summary>
</member>
<member name="M:Tools.API.Console.SetConsoleCtrlHandler(Tools.API.Console.HandlerRoutine,System.Boolean)">
 <summary><para>Adds or removes an application-defined HandlerRoutine function from the list of handler functions for the calling process.</para>
 <para>If no handler function is specified, the function sets an inheritable attribute that determines whether the calling process ignores CTRL+C signals.</para></summary>
 <param name="HandlerRoutine">A pointer to the application-defined HandlerRoutine function to be added or removed. This parameter can be NULL. </param>
 <param name="Add"><para>If this parameter is TRUE, the handler is added; if it is FALSE, the handler is removed.</para>
 <para>If the HandlerRoutine parameter is NULL, a TRUE value causes the calling process to ignore CTRL+C input, and a FALSE value restores normal processing of CTRL+C input. This attribute of ignoring or processing CTRL+C is inherited by child processes.</para></param>
 <returns>If the function succeeds, the return value is nonzero.</returns>
</member>
<member name="M:Tools.API.Console.GetConsoleWindow">
 <summary>Retrieves the window handle used by the console associated with the calling process.</summary>
 <returns>The return value is a handle to the window used by the console associated with the calling process or NULL if there is no such associated console.</returns>
</member>
<member name="T:Tools.API.Devices">
 <summary>Contains API declarations for HW devices</summary>
</member>
<member name="M:Tools.API.Devices.GetKeyState(System.Int32)">
 <summary>The GetKeyState function retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or toggled (on, off—alternating each time the key is pressed).</summary>
 <param name="nVirtKey">[in] Specifies a virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0 through 9), nVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key code.
 If a non-English keyboard layout is used, virtual keys with values in the range ASCII A through Z and 0 through 9 are used to specify most of the character keys. For example, for the German keyboard layout, the virtual key of value ASCII O (0x4F) refers to the "o" key, whereas VK_OEM_1 refers to the "o with umlaut" key.</param>
 <returns>The return value specifies the status of the specified virtual key, as follows:
 <list type="bullet">
 <item>If the high-order bit is 1, the key is down; otherwise, it is up.</item>
 <item>If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, is toggled if it is turned on. The key is off and untoggled if the low-order bit is 0. A toggle key's indicator light (if any) on the keyboard will be on when the key is toggled, and off when the key is untoggled.</item>
 </list></returns>
 <remarks><para>The key status returned from this function changes as a thread reads key messages from its message queue. The status does not reflect the interrupt-level state associated with the hardware. Use the GetAsyncKeyState function to retrieve that information.</para>
 <para>An application calls GetKeyState in response to a keyboard-input message. This function retrieves the state of the key when the input message was generated.</para>
 <para>To retrieve state information for all the virtual keys, use the GetKeyboardState function.</para>
 <para>An application can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the nVirtKey parameter. This gives the status of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. An application can also use the following virtual-key code constants as values for nVirtKey to distinguish between the left and right instances of those keys.</para></remarks>
</member>
<member name="M:Tools.API.Devices.GetAsyncKeyState(System.Int32)">
 <summary>The GetAsyncKeyState function determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState. </summary>
 <param name="vKey">[in] Specifies one of 256 possible virtual-key codes. For more information, see Virtual-Key Codes.
 <para>Windows NT/2000/XP: You can use left- and right-distinguishing constants to specify certain keys. See the Remarks section for further information.</para></param>
 <returns>If the function succeeds, the return value specifies whether the key was pressed since the last call to GetAsyncKeyState, and whether the key is currently up or down. If the most significant bit is set, the key is down, and if the least significant bit is set, the key was pressed after the previous call to GetAsyncKeyState. However, you should not rely on this last behavior; for more information, see the Remarks. </returns>
 <remarks>The GetAsyncKeyState function works with mouse buttons. However, it checks on the state of the physical mouse buttons, not on the logical mouse buttons that the physical buttons are mapped to. For example, the call GetAsyncKeyState(VK_LBUTTON) always returns the state of the left physical mouse button, regardless of whether it is mapped to the left or right logical mouse button. You can determine the system's current mapping of physical mouse buttons to logical mouse buttons by calling <code>GetSystemMetrics(SM_SWAPBUTTON) </code>which returns TRUE if the mouse buttons have been swapped.<para>Although the least significant bit of the return value indicates whether the key has been pressed since the last query, due to the pre-emptive multitasking nature of Windows, another application can call GetAsyncKeyState and receive the "recently pressed" bit instead of your application. The behavior of the least significant bit of the return value is retained strictly for compatibility with 16-bit Windows applications (which are non-preemptive) and should not be relied upon.</para><para>You can use the virtual-key code constants VK_SHIFT, VK_CONTROL, and VK_MENU as values for the vKey parameter. This gives the state of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. </para></remarks>
</member>
<member name="T:Tools.API.FileSystem">
 <summary>Contains API decalarations related to file system</summary>
</member>
<member name="T:Tools.API.FileSystem.SHFILEINFO">
 <summary>Contains information about a file object.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHFILEINFO.hIcon">
 <summary>A handle to the icon that represents the file. You are responsible for destroying this handle with DestroyIcon when you no longer need it.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHFILEINFO.iIcon">
 <summary>The index of the icon image within the system image list.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHFILEINFO.dwAttributes">
 <summary>An array of values that indicates the attributes of the file object.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHFILEINFO.szDisplayName">
 <summary>A string that contains the name of the file as it appears in the Microsoft Windows Shell, or the path and file name of the file that contains the icon representing the file.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHFILEINFO.szTypeName">
 <summary>A string that describes the type of file.</summary>
</member>
<member name="T:Tools.API.FileSystem.SHELLEXECUTEINFO">
 <summary>Contains information used by <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.cbSize">
 <summary>The size of the structure, in bytes.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask">
 <summary>An array of flags that indicate the content and validity of the other structure members.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hwnd">
 <summary>A window handle to any message boxes that the system might produce while executing this function.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpVerb">
 <summary>A string, referred to as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. If you set this parameter to NULL:
 <list type="bullet"><item>For systems prior to Windows 2000, the default verb is used if it is valid and available in the registry. If not, the "open" verb is used.</item>
 <item>For Windows 2000 and later systems, the default verb is used if available. If not, the "open" verb is used. If neither verb is available, the system uses the first verb listed in the registry.</item></list></summary>
 <remarks>The following verbs are commonly used.
 <list type="table"><item><term>edit</term><description>Launches an editor and opens the document for editing. If lpFile is not a document file, the function will fail.</description></item>
 <item><term>explore</term><description>Explores the folder specified by lpFile.</description></item>
 <item><term>find</term><description>Initiates a search starting from the specified directory.</description></item>
 <item><term>open</term><description>Opens the file specified by the lpFile parameter. The file can be an executable file, a document file, or a folder.</description></item>
 <item><term>print</term><description>Prints the document file specified by lpFile. If lpFile is not a document file, the function will fail.</description></item>
 <item><term>properties</term><description>Displays the file or folder's properties.</description></item></list></remarks>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpFile">
 <summary>The address of a null-terminated string that specifies the name of the file or object on which <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> will perform the action specified by the lpVerb parameter. The system registry verbs that are supported by the <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> function include "open" for executable files and document files and "print" for document files for which a print handler has been registered. Other applications might have added Shell verbs through the system registry, such as "play" for .avi and .wav files. To specify a Shell namespace object, pass the fully qualified parse name and set the <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_INVOKEIDLIST"/> flag in the <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask"/> parameter.</summary>
 <remarks><note>Note If the <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_INVOKEIDLIST"/> flag is set, you can use either lpFile or lpIDList to identify the item by its file system path or its PIDL respectively.</note><note>Note If the path is not included with the name, the current directory is assumed.</note></remarks>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpParameters">
 <summary>The address of a null-terminated string that contains the application parameters. The parameters must be separated by spaces. If the <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpFile"/> member specifies a document file, <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpParameters"/> should be NULL.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpDirectory">
 <summary>The address of a null-terminated string that specifies the name of the working directory. If this member is not specified, the current directory is used as the working directory.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.nShow">
 <summary>Flags that specify how an application is to be shown when it is opened. It can be one of the SW_ values listed for the ShellExecute function. If lpFile specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hInstApp">
 <summary>If the function succeeds, it sets this member to a value greater than 32. If the function fails, it is set to an <see cref="T:Tools.API.FileSystem.ShellExecuteErrors"/> error value that indicates the cause of the failure. Although <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hInstApp"/> is declared as an HINSTANCE for compatibility with 16-bit Windows applications, it is not a true HINSTANCE. It can be cast only to an int and compared to either 32 or the <see cref="T:Tools.API.FileSystem.ShellExecuteErrors"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpIDList">
 <summary>The address of an ITEMIDLIST structure to contain an item identifier list uniquely identifying the file to execute. This member is ignored if the <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask"/> member does not include <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_IDLIST"/> or <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_INVOKEIDLIST"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpClass">
 <summary>The address of a null-terminated string that specifies the name of a file class or a GUID. This member is ignored if <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask"/> does not include <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_CLASSNAME"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hkeyClass">
 <summary>A handle to the registry key for the file class. This member is ignored if <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask"/> does not include <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_CLASSKEY"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.dwHotKey">
 <summary>A keyboard shortcut to associate with the application. The low-order word is the virtual key code, and the high-order word is a modifier flag (HOTKEYF_). For a list of modifier flags, see the description of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SETHOTKEY"/> message. This member is ignored if <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask"/> does not include <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_HOTKEY"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hIcon">
 <summary>A handle to the icon for the file class. This member is ignored if <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask"/> does not include <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_ICON"/>.</summary>
 <remarks>This value is same as <see cref="P:Tools.API.FileSystem.SHELLEXECUTEINFO.hMonitor"/></remarks>
</member>
<member name="P:Tools.API.FileSystem.SHELLEXECUTEINFO.hMonitor">
 <summary>A handle to the monitor upon which the document is to be displayed. This member is ignored if <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask"/> does not include <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_HMONITOR"/>.</summary>
 <remarks>This value is same as <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hIcon"/></remarks>
</member>
<member name="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hProcess">
 <summary>A handle to the newly started application. This member is set on return and is always NULL unless <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask"/> is set to <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_NOCLOSEPROCESS"/>. Even if <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.fMask"/> is set to <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_NOCLOSEPROCESS"/>, <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hProcess"/> will be NULL if no process was launched. For example, if a document to be launched is a URL and an instance of Internet Explorer is already running, it will display the document. No new process is launched, and <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hProcess"/> will be NULL.</summary>
 <remarks><note><see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> does not always return an <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hProcess"/>, even if a process is launched as the result of the call. For example, an <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hProcess"/> does not return when you use <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_INVOKEIDLIST"/> to invoke IContextMenu.</note></remarks>
</member>
<member name="T:Tools.API.FileSystem.SHARE_INFO_0">
 <summary>contains the name of the shared resource</summary>
</member>
<member name="F:Tools.API.FileSystem.SHARE_INFO_0.shi0_netname">
 <summary>Pointer to a Unicode string specifying the share name of a resource.</summary>
</member>
<member name="T:Tools.API.FileSystem.TOKEN_PRIVILEGES">
 <summary>Contains information about a set of privileges for an access token.</summary>
</member>
<member name="F:Tools.API.FileSystem.TOKEN_PRIVILEGES.PrivilegeCount">
 <summary>This must be set to the number of entries in the <see cref="F:Tools.API.FileSystem.TOKEN_PRIVILEGES.Privileges"/> array.</summary>
</member>
<member name="F:Tools.API.FileSystem.TOKEN_PRIVILEGES.Privileges">
 <summary>Specifies an array of <see cref="T:Tools.API.FileSystem.LUID_AND_ATTRIBUTES"/> structures.</summary>
</member>
<member name="T:Tools.API.FileSystem.LUID_AND_ATTRIBUTES">
 <summary>Represents a locally unique identifier (<see cref="F:Tools.API.FileSystem.LUID_AND_ATTRIBUTES.Luid"/>) and its attributes.</summary>
</member>
<member name="F:Tools.API.FileSystem.LUID_AND_ATTRIBUTES.Luid">
 <summary>Specifies an <see cref="F:Tools.API.FileSystem.LUID_AND_ATTRIBUTES.Luid"/> value.</summary>
</member>
<member name="F:Tools.API.FileSystem.LUID_AND_ATTRIBUTES.Attributes">
 <summary>Specifies attributes of the <see cref="F:Tools.API.FileSystem.LUID_AND_ATTRIBUTES.Luid"/>.</summary>
 <remarks>This value contains up to 32 one-bit flags. Its meaning is dependent on the definition and use of the <see cref="F:Tools.API.FileSystem.LUID_AND_ATTRIBUTES.Luid"/>.</remarks>
</member>
<member name="T:Tools.API.FileSystem.LUID">
 <summary>A 64-bit value guaranteed to be unique only on the system on which it was generated.</summary>
 <remarks>The uniqueness of a locally unique identifier (<see cref="T:Tools.API.FileSystem.LUID"/>) is guaranteed only until the system is restarted.</remarks>
</member>
<member name="F:Tools.API.FileSystem.LUID.LowPart">
 <summary>Low-order bits.</summary>
</member>
<member name="F:Tools.API.FileSystem.LUID.HighPart">
 <summary>High-order bits.</summary>
</member>
<member name="T:Tools.API.FileSystem.REPARSE_DATA_BUFFER">
 <summary>Contains reparse point data for a Microsoft reparse point.</summary>
</member>
<member name="F:Tools.API.FileSystem.REPARSE_DATA_BUFFER.ReparseTag">
 <summary>Reparse point tag. Must be a Microsoft reparse point tag.</summary>
</member>
<member name="F:Tools.API.FileSystem.REPARSE_DATA_BUFFER.ReparseDataLength">
 <summary>Size, in bytes, of the reparse data in the DataBuffer member.</summary>
</member>
<member name="F:Tools.API.FileSystem.REPARSE_DATA_BUFFER.Reserved">
 <summary>Length, in bytes, of the unparsed portion of the file name pointed to by the FileName member of the associated file object.</summary>
</member>
<member name="F:Tools.API.FileSystem.REPARSE_DATA_BUFFER.SubsNameOffset">
 <summary>Offset, in bytes, of the substitute name string in the PathBuffer array. Note that this offset must be divided by sizeof(WCHAR) to get the array index.</summary>
</member>
<member name="F:Tools.API.FileSystem.REPARSE_DATA_BUFFER.SubsNameLength">
 <summary>Length, in bytes, of the substitute name string. If this string is NULL-terminated, SubstituteNameLength does not include space for the UNICODE_NULL character.</summary>
</member>
<member name="F:Tools.API.FileSystem.REPARSE_DATA_BUFFER.PrintNameOffset">
 <summary>Offset, in bytes, of the print name string in the PathBuffer array. Note that this offset must be divided by sizeof(WCHAR) to get the array index.</summary>
</member>
<member name="F:Tools.API.FileSystem.REPARSE_DATA_BUFFER.PrintNameLength">
 <summary>Length, in bytes, of the print name string. If this string is NULL-terminated, PrintNameLength does not include space for the UNICODE_NULL character.</summary>
</member>
<member name="F:Tools.API.FileSystem.MAX_PATH">
 <summary>Maximum length of path for the <see cref="M:Tools.API.FileSystem.SHGetFileInfo(System.String@,Tools.API.FileSystem.FileAttributes,Tools.API.FileSystem.SHFILEINFO@,System.UInt32,Tools.API.FileSystem.FileInformationFlags)"/> function</summary>
</member>
<member name="F:Tools.API.FileSystem.MAX_PREFERRED_LENGTH">
 <summary>Maximum value for prefferred data length of the <see cref="M:Tools.API.FileSystem.NetShareEnum(System.String,Tools.API.FileSystem.NetShareLevel,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32@)"/> function</summary>
</member>
<member name="F:Tools.API.FileSystem.SE_BACKUP_NAME">
 <summary>name of backup privilege</summary>
</member>
<member name="F:Tools.API.FileSystem.FSCTL_GET_REPARSE_POINT">
 <summary>Retrieves the reparse point data associated with the file or directory identified by the specified handle.</summary>
</member>
<member name="F:Tools.API.FileSystem.MAXIMUM_REPARSE_DATA_BUFFER_SIZE">
 <summary>Maximum size of reparse buffer data</summary>
</member>
<member name="M:Tools.API.FileSystem.SHGetFileInfo(System.String@,Tools.API.FileSystem.FileAttributes,Tools.API.FileSystem.SHFILEINFO@,System.UInt32,Tools.API.FileSystem.FileInformationFlags)">
 <summary>Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.</summary>
 <param name="pszPath">[in] A pointer to a null-terminated string of maximum length <see cref="F:Tools.API.FileSystem.MAX_PATH"/> that contains the path and file name. Both absolute and relative paths are valid.
 <para>If the <paramref name="uFlags"/> parameter includes the <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_PIDL"/> flag, this parameter must be the address of an ITEMIDLIST (PIDL) structure that contains the list of item identifiers that uniquely identifies the file within the Shell's namespace. The pointer to an item identifier list (PIDL) must be a fully qualified PIDL. Relative PIDLs are not allowed.</para>
 <para>If the uFlags parameter includes the <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_USEFILEATTRIBUTES"/> flag, this parameter does not have to be a valid file name. The function will proceed as if the file exists with the specified name and with the file attributes passed in the dwFileAttributes parameter. This allows you to obtain information about a file type by passing just the extension for pszPath and passing <see cref="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_NORMAL"/> in dwFileAttributes.</para>
 <para>This string can use either short (the 8.3 form) or long file names.</para>
 </param>
 <param name="dwFileAttributes">[in] A combination of one or more file attribute flags (<see cref="T:Tools.API.FileSystem.FileAttributes">FILE_ATTRIBUTE_</see> values as defined in Winnt.h). If uFlags does not include the <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_USEFILEATTRIBUTES"/> flag, this parameter is ignored.</param>
 <param name="psfi">[out] The address of a <see cref="T:Tools.API.FileSystem.SHFILEINFO"/> structure to receive the file information.</param>
 <param name="cbFileInfo">[in] The size, in bytes, of the <see cref="T:Tools.API.FileSystem.SHFILEINFO"/> structure pointed to by the psfi parameter.</param>
 <param name="uFlags">[in] The flags that specify the file information to retrieve. This parameter can be a combination of the <see cref="T:Tools.API.FileSystem.FileInformationFlags">SHGFI_</see>  values.</param>
 <returns>Returns a value whose meaning depends on the uFlags parameter.<para>If uFlags does not contain SHGFI_EXETYPE or SHGFI_SYSICONINDEX, the return value is nonzero if successful, or zero otherwise.</para><para>If uFlags contains the SHGFI_EXETYPE flag, the return value specifies the type of the executable file.</para></returns>
</member>
<member name="M:Tools.API.FileSystem.CreateFile(System.String@,Tools.API.FileSystem.GenericFileAccess,Tools.API.FileSystem.ShareModes,System.IntPtr,Tools.API.FileSystem.FileCreateDisposition,Tools.API.FileSystem.FileFlagsAndAttributes,System.Int32)">
 <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe. The function returns a handle that can be used to access the file or device for various types of I/O depending on the file or device and the flags and attributes specified.</summary>
 <param name="lpFileName">The name of the file or device to be created or opened. </param>
 <param name="dwDesiredAccess">The requested access to the file or device, which can be summarized as read, write, both or neither (zero).
 <para>If this parameter is zero, the application can query certain metadata such as file, directory, or device attributes without accessing that file or device, even if <see cref="F:Tools.API.FileSystem.GenericFileAccess.GENERIC_READ"/> access would have been denied.</para>
 <para>You cannot request an access mode that conflicts with the sharing mode that is specified by the <paramref name="dwShareMode"/> parameter in an open request that already has an open handle.</para></param>
 <param name="dwShareMode">The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none (refer to the following table). Access requests to attributes or extended attributes are not affected by this flag.
 <para>If this parameter is zero and <see cref="M:Tools.API.FileSystem.CreateFile(System.String@,Tools.API.FileSystem.GenericFileAccess,Tools.API.FileSystem.ShareModes,System.IntPtr,Tools.API.FileSystem.FileCreateDisposition,Tools.API.FileSystem.FileFlagsAndAttributes,System.Int32)"/> succeeds, the file or device cannot be shared and cannot be opened again until the handle to the file or device is closed. For more information, see the Remarks section.</para>
 <para>You cannot request a sharing mode that conflicts with the access mode that is specified in an existing request that has an open handle.</para>
 <para>To enable a process to share a file or device while another process has the file or device open, use a compatible combination of one or more of the <see cref="T:Tools.API.FileSystem.ShareModes"/> values.</para></param>
 <param name="lpSecurityAttributes"><para>A pointer to a <see cref="T:Tools.API.FileSystem.SECURITY_ATTRIBUTES"/> structure that contains two separate but related data members: an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes.</para>
 <para>This parameter can be NULL.</para>
 <para>If this parameter is NULL, the handle returned by CreateFile cannot be inherited by any child processes the application may create and the file or device associated with the returned handle gets a default security descriptor.</para></param>
 <param name="dwCreationDisposition"> <para>An action to take on a file or device that exists or does not exist.</para>
 <para>For devices other than files, this parameter is usually set to <see cref="F:Tools.API.FileSystem.FileCreateDisposition.OPEN_EXISTING"/>.</para></param>
 <param name="dwFlagsAndAttributes"><para>The file or device attributes and flags, <see cref="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_NORMAL"/> being the most common default value for files.</para>
 <para>This parameter can include any combination of the available file attributes (FILE_ATTRIBUTE_*). All other file attributes override <see cref="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_NORMAL"/>.</para>
 <para>This parameter can also contain combinations of flags (FILE_FLAG_*) for control of file or device caching behavior, access modes, and other special-purpose flags. These combine with any FILE_ATTRIBUTE_* values.</para>
 <para>This parameter can also contain Security Quality of Service information by specifying the SECURITY_SQOS_PRESENT flag. Additional SQOS-related flags information is presented in the table following the attributes and flags tables.</para></param>
 <param name="hTemplateFile"> <para>A valid handle to a template file with the GENERIC_READ access right. The template file supplies file attributes and extended attributes for the file that is being created.</para>
 <para>This parameter can be NULL.</para>
 <para>When opening an existing file, CreateFile ignores this parameter.</para>
 <para>When opening a new encrypted file, the file inherits the discretionary access control list from its parent directory. For additional information, see File Encryption</para></param>
 <returns><para>If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.</para>
 <para>If the function fails, the return value is <see cref="F:Tools.API.Common.Errors.INVALID_HANDLE_VALUE"/>.</para></returns>
</member>
<member name="T:Tools.API.FileSystem.GenericFileAccess">
 <summary>Generic file access modes</summary>
</member>
<member name="F:Tools.API.FileSystem.GenericFileAccess.GENERIC_ALL">
 <summary>Read, write, and execute access</summary>
</member>
<member name="F:Tools.API.FileSystem.GenericFileAccess.GENERIC_READ">
 <summary>	Read access</summary>
</member>
<member name="F:Tools.API.FileSystem.GenericFileAccess.GENERIC_WRITE">
 <summary>	Write access</summary>
</member>
<member name="F:Tools.API.FileSystem.GenericFileAccess.GENERIC_EXECUTE">
 <summary>	Execute access</summary>
</member>
<member name="F:Tools.API.FileSystem.GenericFileAccess.None">
 <summary>No access. Allows query some metadata.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShareModes.FILE_SHARE_DELETE">
 <summary><para>Enables subsequent open operations on a file or device to request delete access.</para>
 <para>Otherwise, other processes cannot open the file or device if they request delete access.</para>
 <para>If this flag is not specified, but the file or device has been opened for delete access, the function fails.</para>
 <para>Note  Delete access allows both delete and rename operations.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.ShareModes.FILE_SHARE_READ">
 <summary><para>Enables subsequent open operations on a file or device to request read access.</para>
 <para>Otherwise, other processes cannot open the file or device if they request read access.</para>
 <para>If this flag is not specified, but the file or device has been opened for read access, the function fails.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.ShareModes.FILE_SHARE_WRITE">
 <summary><para>Enables subsequent open operations on a file or device to request write access.</para>
 <para>Otherwise, other processes cannot open the file or device if they request write access.</para>
 <para>If this flag is not specified, but the file or device has been opened for write access or has a file mapping with write access, the function fails.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.ShareModes.None">
 <summary>Prevents other processes from opening a file or device if they request delete, read, or write access.</summary>
</member>
<member name="T:Tools.API.FileSystem.SECURITY_ATTRIBUTES">
 <summary>contains the security descriptor for an object and specifies whether the handle retrieved by specifying this structure is inheritable.</summary>
</member>
<member name="F:Tools.API.FileSystem.SECURITY_ATTRIBUTES.nLength">
 <summary>The size, in bytes, of this structure. Set this value to the size of the <see cref="T:Tools.API.FileSystem.SECURITY_ATTRIBUTES"/> structure.</summary>
</member>
<member name="F:Tools.API.FileSystem.SECURITY_ATTRIBUTES.lpSecurityDescriptor">
 <summary>A pointer to a security descriptor for the object that controls the sharing of it. If NULL is specified for this member, the object is assigned the default security descriptor of the calling process. This is not the same as granting access to everyone by assigning a NULL discretionary access control list (DACL). The default security descriptor is based on the default DACL of the access token belonging to the calling process. By default, the default DACL in the access token of a process allows access only to the user represented by the access token. If other users must access the object, you can either create a security descriptor with the appropriate access, or add ACEs to the DACL that grants access to a group of users.</summary>
</member>
<member name="F:Tools.API.FileSystem.SECURITY_ATTRIBUTES.bInheritHandle">
 <summary>A Boolean value that specifies whether the returned handle is inherited when a new process is created. If this member is TRUE, the new process inherits the handle.</summary>
</member>
<member name="T:Tools.API.FileSystem.FileCreateDisposition">
 <summary>Actions to take on a file or device that exists or does not exist. </summary>
</member>
<member name="F:Tools.API.FileSystem.FileCreateDisposition.CREATE_ALWAYS">
 <summary><para>Creates a new file, always.</para>
 <para>If the specified file exists and is writable, the function overwrites the file, the function succeeds, and last-error code is set to <see cref="F:Tools.API.Common.Errors.ERROR_ALREADY_EXISTS"/> (183).</para>
 <para>If the specified file does not exist and is a valid path, a new file is created, the function succeeds, and the last-error code is set to zero.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileCreateDisposition.CREATE_NEW">
 <summary><para>Creates a new file, only if it does not already exist.</para>
 <para>If the specified file exists, the function fails and the last-error code is set to <see cref="F:Tools.API.Common.Errors.ERROR_FILE_EXISTS"/> (80).</para>
 <para>If the specified file does not exist and is a valid path to a writable location, a new file is created.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileCreateDisposition.OPEN_ALWAYS">
 <summary><para>Opens a file, always.</para>
 <para>If the specified file exists, the function succeeds and the last-error code is set to <see cref="F:Tools.API.Common.Errors.ERROR_ALREADY_EXISTS"/> (183).</para>
 <para>If the specified file does not exist and is a valid path to a writable location, the function creates a file and the last-error code is set to zero.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileCreateDisposition.OPEN_EXISTING">
 <summary><para>Opens a file or device, only if it exists.</para>
 <para>If the specified file or device does not exist, the function fails and the last-error code is set to <see cref="F:Tools.API.Common.Errors.ERROR_FILE_NOT_FOUND"/> (2).</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileCreateDisposition.TRUNCATE_EXISTING">
 <summary><para>Opens a file and truncates it so that its size is zero bytes, only if it exists.</para>
 <para>If the specified file does not exist, the function fails and the last-error code is set to <see cref="F:Tools.API.Common.Errors.ERROR_FILE_NOT_FOUND"/> (2).</para>
 <para>The calling process must open the file with the <see cref="F:Tools.API.FileSystem.GenericFileAccess.GENERIC_WRITE"/> bit set as part of the dwDesiredAccess parameter.</para></summary>
</member>
<member name="T:Tools.API.FileSystem.FileFlagsAndAttributes">
 <summary>Values for the dwFlagsAndAttributes parameter of the <see cref="M:Tools.API.FileSystem.CreateFile(System.String@,Tools.API.FileSystem.GenericFileAccess,Tools.API.FileSystem.ShareModes,System.IntPtr,Tools.API.FileSystem.FileCreateDisposition,Tools.API.FileSystem.FileFlagsAndAttributes,System.Int32)"/> function</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_ARCHIVE">
 <summary>The file should be archived. Applications use this attribute to mark files for backup or removal.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_ENCRYPTED">
 <summary><para>The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories. For more information, see File Encryption.</para>
 <para>This flag has no effect if <see cref="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_SYSTEM"/> is also specified.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_HIDDEN">
 <summary>The file is hidden. Do not include it in an ordinary directory listing.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_NORMAL">
 <summary>The file does not have other attributes set. This attribute is valid only if used alone.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_OFFLINE">
 <summary>The data of a file is not immediately available. This attribute indicates that file data is physically moved to offline storage. This attribute is used by Remote Storage, the hierarchical storage management software. Applications should not arbitrarily change this attribute.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_READONLY">
 <summary>The file is read only. Applications can read the file, but cannot write to or delete it.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_SYSTEM">
 <summary>The file is part of or used exclusively by an operating system.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_ATTRIBUTE_TEMPORARY">
 <summary>The file is being used for temporary storage.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_BACKUP_SEMANTICS">
 <summary><para>The file is being opened or created for a backup or restore operation. The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges. For more information, see Changing Privileges in a Token.</para>
 <para>You must set this flag to obtain a handle to a directory. A directory handle can be passed to some functions instead of a file handle. For more information, see the Remarks section.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_DELETE_ON_CLOSE">
 <summary><para>The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles.</para>
 <para>If there are existing open handles to a file, the call fails unless they were all opened with the <see cref="F:Tools.API.FileSystem.ShareModes.FILE_SHARE_DELETE"/> share mode.</para>
 <para>Subsequent open requests for the file fail, unless the <see cref="F:Tools.API.FileSystem.ShareModes.FILE_SHARE_DELETE"/> share mode is specified.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_NO_BUFFERING">
 <summary><para>The file or device is being opened with no system caching for data reads and writes. This flag does not affect hard disk caching or memory mapped files.</para>
 <para>There are strict requirements for successfully working with files opened with CreateFile using the FILE_FLAG_NO_BUFFERING flag, for details see File Buffering.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_OPEN_NO_RECALL">
 <summary>The file data is requested, but it should continue to be located in remote storage. It should not be transported back to local storage. This flag is for use by remote storage systems.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_OPEN_REPARSE_POINT">
 <summary><para>Normal reparse point processing will not occur; CreateFile will attempt to open the reparse point. When a file is opened, a file handle is returned, whether or not the filter that controls the reparse point is operational.</para>
 <para>This flag cannot be used with the <see cref="F:Tools.API.FileSystem.FileCreateDisposition.CREATE_ALWAYS"/> flag.</para>
 <para>If the file is not a reparse point, then this flag is ignored.</para>
 <para>For more information, see the Remarks section.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_OVERLAPPED">
 <summary><para>The file or device is being opened or created for asynchronous I/O.</para>
 <para>When subsequent I/O operations are completed on this handle, the event specified in the OVERLAPPED structure will be set to the signaled state.</para>
 <para>If this flag is specified, the file can be used for simultaneous read and write operations.</para>
 <para>If this flag is not specified, then I/O operations are serialized, even if the calls to the read and write functions specify an OVERLAPPED structure.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_POSIX_SEMANTICS">
 <summary>Access will occur according to POSIX rules. This includes allowing multiple files with names, differing only in case, for file systems that support that naming. Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit System.Windows.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_RANDOM_ACCESS">
 <summary><para>Access is intended to be random. The system can use this as a hint to optimize file caching.</para>
 <para>This flag has no effect if the file system does not support cached I/O and <see cref="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_NO_BUFFERING"/>.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_SEQUENTIAL_SCAN">
 <summary><para>Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching.</para>
 <para>This flag should not be used if read-behind (that is, backwards scans) will be used.</para>
 <para>This flag has no effect if the file system does not support cached I/O and <see cref="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_NO_BUFFERING"/>.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.FILE_FLAG_WRITE_THROUGH">
 <summary>Write operations will not go through any intermediate cache, they will go directly to disk.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.SECURITY_ANONYMOUS">
 <summary>Impersonates a client at the Anonymous impersonation level.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.SECURITY_CONTEXT_TRACKING">
 <summary>The security tracking mode is dynamic. If this flag is not specified, the security tracking mode is static.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.SECURITY_DELEGATION">
 <summary>Impersonates a client at the Delegation impersonation level.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.SECURITY_EFFECTIVE_ONLY">
 <summary><para>Only the enabled aspects of the client's security context are available to the server. If you do not specify this flag, all aspects of the client's security context are available.</para>
 <para>This allows the client to limit the groups and privileges that a server can use while impersonating the client.</para></summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.SECURITY_IDENTIFICATION">
 <summary>Impersonates a client at the Identification impersonation level.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlagsAndAttributes.SECURITY_IMPERSONATION">
 <summary>Impersonate a client at the impersonation level. This is the default behavior if no other flags are specified along with the SECURITY_SQOS_PRESENT flag.</summary>
</member>
<member name="T:Tools.API.FileSystem.SECURITY_IMPERSONATION_LEVEL">
 <summary>contains values that specify security impersonation levels. Security impersonation levels govern the degree to which a server process can act on behalf of a client process.</summary>
</member>
<member name="F:Tools.API.FileSystem.SECURITY_IMPERSONATION_LEVEL.SecurityAnonymous">
 <summary>The server process cannot obtain identification information about the client, and it cannot impersonate the client. It is defined with no value given, and thus, by ANSI C rules, defaults to a value of zero.</summary>
</member>
<member name="F:Tools.API.FileSystem.SECURITY_IMPERSONATION_LEVEL.SecurityIdentification">
 <summary>The server process can obtain information about the client, such as security identifiers and privileges, but it cannot impersonate the client. This is useful for servers that export their own objects, for example, database products that export tables and views. Using the retrieved client-security information, the server can make access-validation decisions without being able to use other services that are using the client's security context.</summary>
</member>
<member name="F:Tools.API.FileSystem.SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation">
 <summary>The server process can impersonate the client's security context on its local system. The server cannot impersonate the client on remote systems.</summary>
</member>
<member name="F:Tools.API.FileSystem.SECURITY_IMPERSONATION_LEVEL.SecurityDelegation">
 <summary>The server process can impersonate the client's security context on remote systems. </summary>
</member>
<member name="M:Tools.API.FileSystem.SHGetLocalizedName(System.String,System.Text.StringBuilder,System.Int32@,System.Int32@)">
 <summary>Retrieves the localized name of a file in a Shell folder.</summary>
 <param name="pszPath">[in] A pointer to a string that specifies the fully qualified path of the file.</param>
 <param name="pszResModule">[out] When this function returns, contains a pointer to a string resource that specifies the localized version of the file name.</param>
 <param name="cch">[out] When this function returns, contains the size of the string, in WCHARs, at <paramref name="pszResModule"/>.</param>
 <param name="pidsRes">When this function returns, contains a pointer to the ID of the localized file name in the resource file.</param>
 <returns>N/A</returns>
</member>
<member name="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)">
 <summary>Performs an operation on a specified file.</summary>
 <param name="lpExecInfo">The address of a <see cref="T:Tools.API.FileSystem.SHELLEXECUTEINFO"/> structure that contains and receives information about the application being executed. </param>
 <returns>Returns TRUE if successful, or FALSE otherwise. Call GetLastError for error information. </returns>
</member>
<member name="M:Tools.API.FileSystem.NetShareEnum(System.String,Tools.API.FileSystem.NetShareLevel,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
 <summary>retrieves information about each shared resource on a server.</summary>
 <param name="servername">Pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the function is to execute. If this parameter is NULL, the local computer is used.</param>
 <param name="level">Specifies the information level of the data.</param>
 <param name="bufptr">Pointer to the buffer that receives the data. The format of this data depends on the value of the <paramref name="level"/> parameter. 
 <para>This buffer is allocated by the system and must be freed using the NetApiBufferFree function. Note that you must free the buffer even if the function fails with ERROR_MORE_DATA.</para></param>
 <param name="prefmaxlen">Specifies the preferred maximum length of returned data, in bytes. If you specify <see cref="F:Tools.API.FileSystem.MAX_PREFERRED_LENGTH"/>, the function allocates the amount of memory required for the data. If you specify another value in this parameter, it can restrict the number of bytes that the function returns. If the buffer size is insufficient to hold all entries, the function returns ERROR_MORE_DATA. For more information, see Network Management Function Buffers and Network Management Function Buffer Lengths.</param>
 <param name="entriesread">Pointer to a value that receives the count of elements actually enumerated.</param>
 <param name="totalentries">Pointer to a value that receives the total number of entries that could have been enumerated. Note that applications should consider this value only as a hint.</param>
 <param name="resume_handle">Pointer to a value that contains a resume handle which is used to continue an existing share search. The handle should be zero on the first call and left unchanged for subsequent calls. If resume_handle is NULL, then no resume handle is stored.</param>
 <returns>If the function succeeds, the return value is NERR_Success. If the function fails, the return value is a system error code.</returns>
</member>
<member name="M:Tools.API.FileSystem.GetFileAttributes(System.String@)">
 <summary>Retrieves file system attributes for a specified file or directory.</summary>
 <param name="lpFileName">The name of the file or directory.</param>
 <returns>If the function succeeds, the return value contains the attributes of the specified file or directory. For a list of attribute values and their descriptions, see <see cref="T:Tools.API.FileSystem.FileAttributes"/>.
 If the function fails, the return value is <see cref="F:Tools.API.FileSystem.INVALID_FILE_ATTRIBUTES"/>.</returns>
</member>
<member name="F:Tools.API.FileSystem.INVALID_FILE_ATTRIBUTES">
 <summary>Value returned by <see cref="M:Tools.API.FileSystem.GetFileAttributes(System.String@)"/> in case of error</summary>
</member>
<member name="M:Tools.API.FileSystem.CreateSymbolicLink(System.String,System.String,Tools.API.FileSystem.SYMBOLIC_LINK_FLAG)">
 <summary>Creates a symbolic link.</summary>
 <param name="lpSymlinkFileName">The symbolic link to be created.</param>
 <param name="lpTargetFileName">
 The name of the target for the symbolic link to be created.
 <para>If <paramref name="lpTargetFileName"/> has a device name associated with it, the link is treated as an absolute link; otherwise, the link is treated as a relative link.</para>
 </param>
 <param name="dwFlags">Indicates whether the link target, <paramref name="lpTargetFileName"/>, is a directory.</param>
 <returns>If the function succeeds, the return value true.</returns>
 <remarks>Symbolic links can either be absolute or relative links. Absolute links are links that specify each portion of the path name; relative links are determined relative to where relative–link specifiers are in a specified path.</remarks>
</member>
<member name="T:Tools.API.FileSystem.SYMBOLIC_LINK_FLAG">
 <summary>Enumeration indicates if symbolic link is file or directory</summary>
</member>
<member name="F:Tools.API.FileSystem.SYMBOLIC_LINK_FLAG.File">
 <summary>The link target is a file.</summary>
</member>
<member name="F:Tools.API.FileSystem.SYMBOLIC_LINK_FLAG.SYMBOLIC_LINK_FLAG_DIRECTORY">
 <summary>The link target is a directory.</summary>
</member>
<member name="M:Tools.API.FileSystem.CreateHardLink(System.String,System.String,System.IntPtr)">
 <summary>Establishes a hard link between an existing file and a new file.</summary>
 <param name="lpFileName">The name of the new file. This parameter cannot specify the name of a directory.</param>
 <param name="lpExistingFileName">The name of the existing file. This parameter cannot specify the name of a directory.</param>
 <param name="lpSecurityAttributes">Reserved. Must be <see cref="F:System.IntPtr.Zero"/></param>
 <returns>True on success</returns>
 <remarks>This function is only supported on the NTFS file system, and only for files, not directories.</remarks>
</member>
<member name="M:Tools.API.FileSystem.OpenProcessToken(System.IntPtr,Tools.API.FileSystem.AccessRightsForAccessTokenObjects,System.IntPtr@)">
 <summary>Opens the access token associated with a process.</summary>
 <param name="ProcessHandle">A handle to the process whose access token is opened.</param>
 <param name="DesiredAccessas">Specifies an access mask that specifies the requested types of access to the access token. These requested access types are compared with the discretionary access control list (DACL) of the token to determine which accesses are granted or denied.</param>
 <param name="TokenHandle">A pointer to a handle that identifies the newly opened access token when the function returns.</param>
 <returns>True on success</returns>
</member>
<member name="M:Tools.API.FileSystem.GetCurrentProcess">
 <summary>Retrieves a pseudo handle for the current process.</summary>
 <returns>The return value is a pseudo handle to the current process.</returns>
</member>
<member name="M:Tools.API.FileSystem.LookupPrivilegeValue(System.String,System.String,Tools.API.FileSystem.LUID@)">
 <summary>Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name.</summary>
 <param name="lpSystemName">A pointer to a null-terminated string that specifies the name of the system on which the privilege name is retrieved. If a null string is specified, the function attempts to find the privilege name on the local system.</param>
 <param name="lpName">A pointer to a null-terminated string that specifies the name of the privilege, as defined in the Winnt.h header file. For example, this parameter could specify the constant, SE_SECURITY_NAME, or its corresponding string, "SeSecurityPrivilege".</param>
 <param name="lpLuid">A pointer to a variable that receives the LUID by which the privilege is known on the system specified by the lpSystemName parameter.</param>
 <returns>True on success</returns>
</member>
<member name="M:Tools.API.FileSystem.AdjustTokenPrivileges(System.IntPtr,System.Boolean,Tools.API.FileSystem.TOKEN_PRIVILEGES@,System.Int32,System.IntPtr,System.IntPtr)">
 <summary>Enables or disables privileges in the specified access token. </summary>
 <param name="TokenHandle">A handle to the access token that contains the privileges to be modified.</param>
 <param name="DisableAllPrivileges">Specifies whether the function disables all of the token's privileges. If this value is TRUE, the function disables all privileges and ignores the NewState parameter. If it is FALSE, the function modifies privileges based on the information pointed to by the NewState parameter.</param>
 <param name="NewState">A pointer to a TOKEN_PRIVILEGES structure that specifies an array of privileges and their attributes. If the DisableAllPrivileges parameter is FALSE, the AdjustTokenPrivileges function enables, disables, or removes these privileges for the token. The following table describes the action taken by the AdjustTokenPrivileges function, based on the privilege attribute. If DisableAllPrivileges is TRUE, the function ignores this parameter.</param>
 <param name="BufferLength">Specifies the size, in bytes, of the buffer pointed to by the PreviousState parameter. This parameter can be zero if the PreviousState parameter is NULL.</param>
 <param name="PreviousState">A pointer to a buffer that the function fills with a TOKEN_PRIVILEGES structure that contains the previous state of any privileges that the function modifies. </param>
 <param name="ReturnLength">A pointer to a variable that receives the required size, in bytes, of the buffer pointed to by the PreviousState parameter. This parameter can be NULL if PreviousState is NULL.</param>
</member>
<member name="M:Tools.API.FileSystem.DeviceIoControl(System.IntPtr,System.UInt32,System.IntPtr,System.UInt32,Tools.API.FileSystem.REPARSE_DATA_BUFFER@,System.UInt32,System.UInt32@,System.IntPtr)">
 <summary>Sends a control code directly to a specified device driver, causing the corresponding device to perform the corresponding operation.</summary>
 <param name="hDevice">A handle to the device on which the operation is to be performed. The device is typically a volume, directory, file, or stream. To retrieve a device handle, use the CreateFile function. </param>
 <param name="dwIoControlCode">The control code for the operation. This value identifies the specific operation to be performed and the type of device on which to perform it.</param>
 <param name="lpInBuffer">A pointer to the input buffer that contains the data required to perform the operation. The format of this data depends on the value of the dwIoControlCode parameter.</param>
 <param name="nInBufferSize">The size of the input buffer, in bytes.</param>
 <param name="outBuffer">A pointer to the output buffer that is to receive the data returned by the operation. The format of this data depends on the value of the dwIoControlCode parameter.</param>
 <param name="nOutBufferSize">The size of the output buffer, in bytes.</param>
 <param name="lpBytesReturned">A pointer to a variable that receives the size of the data stored in the output buffer, in bytes.</param>
 <param name="lpOverlapped">A pointer to an OVERLAPPED structure.</param>
 <returns>True on success</returns>
</member>
<member name="T:Tools.API.FileSystem.FileInformationFlags">
 <summary>The flags that specify the file information to retrieve. USed by <see cref="M:Tools.API.FileSystem.SHGetFileInfo(System.String@,Tools.API.FileSystem.FileAttributes,Tools.API.FileSystem.SHFILEINFO@,System.UInt32,Tools.API.FileSystem.FileInformationFlags)"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ADDOVERLAYS">
 <summary>Version 5.0. Apply the appropriate overlays to the file's icon. The <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/> flag must also be set.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ATTR_SPECIFIED">
 <summary>Modify <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ATTRIBUTES"/> to indicate that the dwAttributes member of the <see cref="T:Tools.API.FileSystem.SHFILEINFO"/> structure at psfi contains the specific attributes that are desired.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ATTRIBUTES">
 <summary>Retrieve the item attributes. The attributes are copied to the dwAttributes member of the structure specified in the psfi parameter. These are the same attributes that are obtained from IShellFolder::GetAttributesOf.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_DISPLAYNAME">
 <summary>Retrieve the display name for the file. The name is copied to the szDisplayName member of the structure specified in psfi. The returned display name uses the long file name, if there is one, rather than the 8.3 form of the file name.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_EXETYPE">
 <summary>Retrieve the type of the executable file if pszPath identifies an executable file. The information is packed into the return value. This flag cannot be specified with any other flags.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON">
 <summary>Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the hIcon member of the structure specified by psfi, and the index is copied to the iIcon member.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICONLOCATION">
 <summary>Retrieve the name of the file that contains the icon representing the file specified by pszPath, as returned by the IExtractIcon::GetIconLocation method of the file's icon handler. Also retrieve the icon index within that file. The name of the file containing the icon is copied to the szDisplayName member of the structure specified by psfi. The icon's index is copied to that structure's iIcon member.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_LARGEICON">
 <summary>Modify SHGFI_ICON, causing the function to retrieve the file's large icon. The <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/> flag must also be set.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_LINKOVERLAY">
 <summary>Modify <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/>, causing the function to add the link overlay to the file's icon. The <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/> flag must also be set.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_OPENICON">
 <summary>Modify <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/>, causing the function to retrieve the file's open icon. Also used to modify <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_SYSICONINDEX"/>, causing the function to return the handle to the system image list that contains the file's small open icon. A container object displays an open icon to indicate that the container is open. The <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/> and/or <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_SYSICONINDEX"/> flag must also be set.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_OVERLAYINDEX">
 <summary>Version 5.0. Return the index of the overlay icon. The value of the overlay index is returned in the upper eight bits of the iIcon member of the structure specified by psfi. This flag requires that the <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/> be set as well.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_PIDL">
 <summary>Indicate that pszPath is the address of an ITEMIDLIST structure rather than a path name.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_SELECTED">
 <summary>Modify <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/>, causing the function to blend the file's icon with the system highlight color. The <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/> flag must also be set.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_SHELLICONSIZE">
 <summary>Modify <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/>, causing the function to retrieve a Shell-sized icon. If this flag is not specified the function sizes the icon according to the system metric values. The <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/> flag must also be set.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_SMALLICON">
 <summary>Modify <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/>, causing the function to retrieve the file's small icon. Also used to modify <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_SYSICONINDEX"/>, causing the function to return the handle to the system image list that contains small icon images. The <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ICON"/> and/or <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_SYSICONINDEX"/> flag must also be set.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_SYSICONINDEX">
 <summary>Retrieve the index of a system image list icon. If successful, the index is copied to the iIcon member of psfi. The return value is a handle to the system image list. Only those images whose indices are successfully copied to iIcon are valid. Attempting to access other images in the system image list will result in undefined behavior.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_TYPENAME">
 <summary>Retrieve the string that describes the file's type. The string is copied to the szTypeName member of the structure specified in psfi.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_USEFILEATTRIBUTES">
 <summary>Indicates that the function should not attempt to access the file specified by pszPath. Rather, it should act as if the file specified by pszPath exists with the file attributes passed in dwFileAttributes. This flag cannot be combined with the <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_ATTRIBUTES"/>, <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_EXETYPE"/>, or <see cref="F:Tools.API.FileSystem.FileInformationFlags.SHGFI_PIDL"/> flags.</summary>
</member>
<member name="T:Tools.API.FileSystem.FileAttributes">
 <summary>File attributes</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_ARCHIVE">
 <summary>A file or directory that is an archive file or directory. Applications use this attribute to mark files for backup or removal.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_COMPRESSED">
 <summary>A file or directory that is compressed. For a file, all of the data in the file is compressed. For a directory, compression is the default for newly created files and subdirectories.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_DEVICE">
 <summary>Reserved; do not use.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_DIRECTORY">
 <summary>The handle that identifies a directory.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_ENCRYPTED">
 <summary>A file or directory that is encrypted. For a file, all data streams in the file are encrypted. For a directory, encryption is the default for newly created files and subdirectories.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_HIDDEN">
 <summary>The file or directory is hidden. It is not included in an ordinary directory listing.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_NORMAL">
 <summary>A file or directory that does not have other attributes set. This attribute is valid only when used alone.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED">
 <summary>The file is not to be indexed by the content indexing service.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_OFFLINE">
 <summary>The data of a file is not available immediately. This attribute indicates that the file data is physically moved to offline storage. This attribute is used by Remote Storage, which is the hierarchical storage management software. Applications should not arbitrarily change this attribute.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_READONLY">
 <summary>A file or directory that is read-only. For a file, applications can read the file, but cannot write to it or delete it. For a directory, applications cannot delete it.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_REPARSE_POINT">
 <summary>A file or directory that has an associated reparse point, or a file that is a symbolic link.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_SPARSE_FILE">
 <summary>A file that is a sparse file.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_SYSTEM">
 <summary>A file or directory that the operating system uses a part of, or uses exclusively.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_TEMPORARY">
 <summary>A file that is being used for temporary storage. File systems avoid writing data back to mass storage if sufficient cache memory is available, because typically, an application deletes a temporary file after the handle is closed. In that scenario, the system can entirely avoid writing the data. Otherwise, the data is written after the handle is closed.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileAttributes.FILE_ATTRIBUTE_VIRTUAL">
 <summary>A file is a virtual file.</summary>
</member>
<member name="T:Tools.API.FileSystem.DropEfects">
 <summary>Valid drop-effect values are the result of applying the OR operation to the values contained in the <see cref="T:Tools.API.FileSystem.DropEfects">DROPEFFECT</see> enumeration</summary>
</member>
<member name="F:Tools.API.FileSystem.DropEfects.DROPEFFECT_COPY">
 <summary>Drop results in a copy. The original data is untouched by the drag source.</summary>
</member>
<member name="F:Tools.API.FileSystem.DropEfects.DROPEFFECT_LINK">
 <summary>Drag source should create a link to the original data.</summary>
</member>
<member name="F:Tools.API.FileSystem.DropEfects.DROPEFFECT_MOVE">
 <summary>Drag source should remove the data.</summary>
</member>
<member name="F:Tools.API.FileSystem.DropEfects.DROPEFFECT_NONE">
 <summary>Drop target cannot accept the data.</summary>
</member>
<member name="F:Tools.API.FileSystem.DropEfects.DROPEFFECT_SCROLL">
 <summary>Scrolling is about to start or is currently occurring in the target. This value is used in addition to the other values.</summary>
</member>
<member name="T:Tools.API.FileSystem.FileFlags">
 <summary>File flags</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_BROWSABLE">
 <summary>The specified items can be browsed in place. This implies that the client can bind to this object as shown in a general form here.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_CANCOPY">
 <summary>The specified items can be copied (same value as the <see cref="F:Tools.API.FileSystem.DropEfects.DROPEFFECT_COPY"/>) flag).</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_CANDELETE">
 <summary>The specified items can be deleted by selecting Delete from their context menus.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_CANLINK">
 <summary>Shortcuts can be created for the specified items. This flag has the same value as <see cref="F:Tools.API.FileSystem.DropEfects.DROPEFFECT_LINK"/>. The normal use of this flag is to add a Create Shortcut item to the shortcut menu that is displayed during drag-and-drop operations. However, SFGAO_CANLINK also adds a Create Shortcut item to the Microsoft Windows Explorer's File menu and to normal shortcut menus. If this item is selected, your application's IContextMenu::InvokeCommand is invoked with the lpVerb member of the CMINVOKECOMMANDINFO structure set to "link." Your application is responsible for creating the link.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_CANMONIKER">
 <summary>It is possible to create monikers for the specified items.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_CANMOVE">
 <summary>The specified items can be moved (same value as the <see cref="F:Tools.API.FileSystem.DropEfects.DROPEFFECT_MOVE"/> flag).</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_CANRENAME">
 <summary>The specified items can be renamed. Note that this flag is essentially a suggestion. It does not guarantee that a namespace client will rename the file or folder object.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_CAPABILITYMASK">
 <summary>Do not use.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_COMPRESSED">
 <summary>The specified items are compressed.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_CONTENTSMASK">
 <summary>Do not use.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_DISPLAYATTRMASK">
 <summary>Do not use.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_DROPTARGET">
 <summary>The specified items are drop targets.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_ENCRYPTED">
 <summary>The item is encrypted and may require special presentation.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_FILESYSANCESTOR">
 <summary>The specified folder objects are either file system folders or have at least one descendant (child, grandchild, or later) that is a file system folder.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_FILESYSTEM">
 <summary>The specified items are part of the file system (that is, they are files, directories, or root directories). The parsed names of the items can be assumed to be valid Win32 file system paths. These paths can be either Universal Naming Convention (UNC) or drive-letter based.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_FOLDER">
 <summary>The specified items are folders. Some items can be flagged with both <see cref="F:Tools.API.FileSystem.FileFlags.SFGAO_STREAM"/> and <see cref="F:Tools.API.FileSystem.FileFlags.SFGAO_FOLDER"/>, such as a .zip file. Some applications may include this flag when testing for items that are both files and containers.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_GHOSTED">
 <summary>The specified items should be displayed using a ghosted icon.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_HASPROPSHEET">
 <summary>The specified items have property sheets.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_HASSTORAGE">
 <summary>Not supported.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_HASSUBFOLDER">
 <summary>The specified folder objects may have subfolders and are, therefore, expandable in the left pane of Windows Explorer.</summary>
 <remarks>Note  The SFGAO_HASSUBFOLDER attribute is only advisory and may be returned by Shell folder implementations even if they do not contain subfolders. Note, however, that the converse—failing to return SFGAO_HASSUBFOLDER—definitively states that the folder objects do not have subfolders.<para>Returning SFGAO_HASSUBFOLDER is recommended whenever a significant amount of time is required to determine whether or not any subfolders exist. For example, the Shell always returns SFGAO_HASSUBFOLDER when a folder is located on a network drive.</para></remarks>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_HIDDEN">
 <summary>The item is hidden and should not be displayed unless the Show hidden files and folders option is enabled in Folder Settings.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_ISSLOW">
 <summary>Indicates that accessing the object (through IStream or other storage interfaces) is a slow operation. Applications should avoid accessing items flagged with <see cref="F:Tools.API.FileSystem.FileFlags.SFGAO_ISSLOW"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_LINK">
 <summary>The specified items are shortcuts.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_NEWCONTENT">
 <summary>The specified items contain new content.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_NONENUMERATED">
 <summary>The specified items are nonenumerated items. That is, they are not returned by the enumerator created by the IShellFolder::EnumObjects method.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_PKEYSFGAOMASK">
 <summary>Mask for PKEY_SFGAOFlags attributes such as SFGAO_VALIDATE, SFGAO_ISSLOW, and SFGAO_HASSUBFOLDER. They are considered to cause slow calculations or lack context.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_READONLY">
 <summary>The specified items are read-only. In the case of folders, this means that new items cannot be created in those folders. </summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_REMOVABLE">
 <summary>The specified items are on removable media or are themselves removable devices.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_SHARE">
 <summary>The specified folder objects are shared.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_STORAGEANCESTOR">
 <summary>The item can be bound to an IStorage interface through IShellFolder::BindToObject.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_STORAGECAPMASK">
 <summary>This flag is a mask for the storage capability attributes.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_STREAM">
 <summary>Indicates that the item has a stream associated with it that can be accessed by a call to IShellFolder::BindToObject with IID_IStream in the riid parameter. The pbc parameter in that same call provides the IBindCtx interface that specifies the access mode, such as read-only or read-write. Some items can be flagged with both SFGAO_STREAM and SFGAO_FOLDER, such as a .zip file. Some applications may include this flag when testing for items that are both files and containers.</summary>
</member>
<member name="F:Tools.API.FileSystem.FileFlags.SFGAO_VALIDATE">
 <summary>When specified as input, SFGAO_VALIDATE instructs the folder to validate that the items pointed to by the contents of apidl exist. If one or more of those items do not exist, IShellFolder::GetAttributesOf returns a failure code. When used with the file system folder, SFGAO_VALIDATE instructs the folder to discard cached properties retrieved by clients of IShellFolder2::GetDetailsEx that may have accumulated for the specified items.</summary>
</member>
<member name="T:Tools.API.FileSystem.NetShareLevel">
 <summary>Levels for the <see cref="M:Tools.API.FileSystem.NetShareEnum(System.String,Tools.API.FileSystem.NetShareLevel,System.IntPtr@,System.Int32,System.Int32@,System.Int32@,System.Int32@)"/> function</summary>
</member>
<member name="F:Tools.API.FileSystem.NetShareLevel.Names">
 <summary>Return share names. The bufptr parameter points to an array of SHARE_INFO_0 structures.</summary>
</member>
<member name="F:Tools.API.FileSystem.NetShareLevel.Resources">
 <summary>Return information about shared resources, including the name and type of the resource, and a comment associated with the resource. The bufptr parameter points to an array of SHARE_INFO_1 structures. </summary>
</member>
<member name="F:Tools.API.FileSystem.NetShareLevel.ResourecesEx">
 <summary>Return information about shared resources, including name of the resource, type and permissions, password, and number of connections. The bufptr parameter points to an array of SHARE_INFO_2 structures.</summary>
</member>
<member name="F:Tools.API.FileSystem.NetShareLevel.ResourecesSingleScope">
 <summary>Return information about shared resources, including name of the resource, type and permissions, number of connections, and other pertinent information. The bufptr parameter points to an array of SHARE_INFO_502 structures. Shares from different scopes are not returned. For more information about scoping, see the Remarks section of the documentation for the NetServerTransportAddEx function.</summary>
</member>
<member name="F:Tools.API.FileSystem.NetShareLevel.ResourcesAllScopes">
 <summary>Return information about shared resources, including the name of the resource, type and permissions, number of connections, and other pertinent information. The bufptr parameter points to an array of SHARE_INFO_503 structures. Shares from all scopes are returned. If the shi503_servername member of this structure is "*", there is no configured server name and the NetShareEnum function enumerates shares for all the unscoped names.</summary>
 <remarks>Windows Server 2003, Windows XP, Windows 2000 Server, and Windows 2000 Professional:  This information level is not supported.</remarks>
</member>
<member name="T:Tools.API.FileSystem.ShellExecuteErrors">
 <summary><see cref="T:Tools.API.FileSystem.SHELLEXECUTEINFO"/> errors</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_FNF">
 <summary>File not found.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_PNF">
 <summary>Path not found.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_ACCESSDENIED">
 <summary>Access denied.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_OOM">
 <summary>Out of memory.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_DLLNOTFOUND">
 <summary>Dynamic-link library not found.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_SHARE">
 <summary>Cannot share an open file.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_ASSOCINCOMPLETE">
 <summary>File association information not complete.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_DDETIMEOUT">
 <summary>DDE operation timed out.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_DDEFAIL">
 <summary>DDE operation failed.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_DDEBUSY">
 <summary>DDE operation is busy.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteErrors.SE_ERR_NOASSOC">
 <summary>File association not available.</summary>
</member>
<member name="T:Tools.API.FileSystem.ShellExecuteInfoFlags">
 <summary><see cref="T:Tools.API.FileSystem.SHELLEXECUTEINFO"/> flags</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_CLASSNAME">
 <summary>Use the class name given by the lpClass member. If both <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_CLASSKEY"/> and <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_CLASSNAME"/> are set, the class key is used.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_CLASSKEY">
 <summary>Use the class key given by the hkeyClass member. If both <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_CLASSKEY"/> and <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_CLASSNAME"/> are set, the class key is used.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_IDLIST">
 <summary>Use the item identifier list given by the <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpIDList"/> member. The <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpIDList"/> member must point to an ITEMIDLIST structure.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_INVOKEIDLIST">
 <summary>Use the IContextMenu interface of the selected item's shortcut menu handler. Use either <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpFile"/> to identify the item by its file system path or lpIDList to identify the item by its pointer to an item identifier list (PIDL). This flag allows applications to use <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> to invoke verbs from shortcut menu extensions instead of the static verbs listed in the registry.</summary>
 <remarks><note><see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_INVOKEIDLIST"/> overrides <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_IDLIST"/>.</note></remarks>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_ICON">
 <summary>Use the icon given by the <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hIcon"/> member. This flag cannot be combined with <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_HMONITOR"/>.</summary>
 <remarks><note>Note  This flag is available only in Microsoft Windows XP and earlier. It is not available in Windows Vista and later versions of System.Windows.</note></remarks>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_HOTKEY">
 <summary>Use the keyboard shortcut given by the <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.dwHotKey"/> member.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_NOCLOSEPROCESS">
 <summary>Use to indicate that the <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.hProcess"/> member receives the process handle. This handle is typically used to allow an application to find out when a process created with <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> terminates. In some cases, such as when execution is satisfied through a Dynamic Data Exchange (DDE) conversation, no handle will be returned. The calling application is responsible for closing the handle when it is no longer needed.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_CONNECTNETDRV">
 <summary>Validate the share and connect to a drive letter. The <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpFile"/> member is a Universal Naming Convention (UNC) path of a file on a network.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_NOASYNC">
 <summary>Wait for the execute operation to complete before returning. This flag should be used by callers that are using ShellExecute forms that might result in an async activation, for example DDE, and create a process that might be run on a background thread. (Note: <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> runs on a background thread by default if the caller's threading model is not Apartment.) Calls to <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> from processes already running on background threads should always pass this flag. Also, applications that exit immediately after calling <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> should specify this flag.</summary>
 <remarks>If the execute operation is performed on a background thread and the caller did not specify the <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_ASYNCOK"/> flag, then the calling thread waits until the new process has started before returning. This typically means that either CreateProcess has been called, the DDE communication has completed, or that the custom execution delegate has notified <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> that it is done. If the <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_WAITFORINPUTIDLE"/> flag is specified, then <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> calls WaitForInputIdle and waits for the new process to idle before returning, with a maximum timeout of 1 minute.</remarks>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_FLAG_DDEWAIT">
 <summary>Do not use; use <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_NOASYNC"/> instead.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_DOENVSUBST">
 <summary>Expand any environment variables specified in the string given by the <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpDirectory"/> or <see cref="F:Tools.API.FileSystem.SHELLEXECUTEINFO.lpFile"/> member.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_FLAG_NO_UI">
 <summary> Do not display an error message box if an error occurs.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_UNICODE">
 <summary>Use this flag to indicate a Unicode application.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_NO_CONSOLE">
 <summary>Use to create a console for the new process instead of having it inherit the parent's console. It is equivalent to using a CREATE_NEW_CONSOLE flag with CreateProcess.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_ASYNCOK">
 <summary>Microsoft Windows NT 4.0Service Pack 6 (SP6), Windows 2000 Service Pack 3 (SP3) and later. The execution can be performed on a background thread and the call should return immediately without waiting for the background thread to finish. Note that in certain cases <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> ignores this flag and waits for the process to finish before returning.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_NOQUERYCLASSSTORE">
 <summary>Windows Internet Explorer 5.0 and later. Not used.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_HMONITOR">
 <summary>Use this flag when specifying a monitor on multi-monitor systems. The monitor is specified in the hMonitor member. This flag cannot be combined with <see cref="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_ICON"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_NOZONECHECKS">
 <summary>Windows XP Service Pack 1 (SP1) and later. Do not perform a zone check. This flag allows <see cref="M:Tools.API.FileSystem.ShellExecuteEx(Tools.API.FileSystem.SHELLEXECUTEINFO@)"/> to bypass zone checking put into place by IAttachmentExecute.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_WAITFORINPUTIDLE">
 <summary>Internet Explorer 5.0 and later. After the new process is created, wait for the process to become idle before returning, with a one minute timeout. See WaitForInputIdle for more details.</summary>
</member>
<member name="F:Tools.API.FileSystem.ShellExecuteInfoFlags.SEE_MASK_FLAG_LOG_USAGE">
 <summary>Windows XP and later. Keep track of the number of times this application has been launched. Applications with sufficiently high counts appear in the Start Menu's list of most frequently used programs.</summary>
</member>
<member name="T:Tools.API.FileSystem.AccessRightsForAccessTokenObjects">
 <summary>Access flags for acccess to tokens</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.DELETE">
 <summary>The right to delete the object.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.READ_CONTROL">
 <summary>The right to read the information in the object's security descriptor, not including the information in the system access control list (SACL).</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.WRITE_DAC">
 <summary>The right to modify the discretionary access control list (DACL) in the object's security descriptor.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.WRITE_OWNER">
 <summary>The right to change the owner in the object's security descriptor.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.SYNCHRONIZE">
 <summary>The right to use the object for synchronization. This enables a thread to wait until the object is in the signaled state. Some object types do not support this access right.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.STANDARD_RIGHTS_REQUIRED">
 <summary>Combines <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.DELETE"/>, <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.READ_CONTROL"/>, <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.WRITE_DAC"/>, and <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.WRITE_OWNER"/> access.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.STANDARD_RIGHTS_READ">
 <summary>Currently defined to equal <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.READ_CONTROL"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.STANDARD_RIGHTS_WRITE">
 <summary>Currently defined to equal <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.READ_CONTROL"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.STANDARD_RIGHTS_EXECUTE">
 <summary>Currently defined to equal <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.READ_CONTROL"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.STANDARD_RIGHTS_ALL">
 <summary>Combines <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.DELETE"/>, <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.READ_CONTROL"/>, <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.WRITE_DAC"/>, <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.WRITE_OWNER"/>, and <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.SYNCHRONIZE"/> access.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.SPECIFIC_RIGHTS_ALL">
 <summary>All specific rights.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.ACCESS_SYSTEM_SECURITY">
 <summary>controls the ability to get or set the SACL in an object's security descriptor. The system grants this access right only if the SE_SECURITY_NAME privilege is enabled in the access token of the requesting thread.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_ADJUST_DEFAULT">
 <summary>Required to change the default owner, primary group, or DACL of an access token.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_ADJUST_GROUPS">
 <summary>Required to adjust the attributes of the groups in an access token.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_ADJUST_PRIVILEGES">
 <summary>Required to enable or disable the privileges in an access token.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_ADJUST_SESSIONID">
 <summary>Required to adjust the session ID of an access token. The SE_TCB_NAME privilege is required.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_ASSIGN_PRIMARY">
 <summary>Required to attach a primary token to a process. The SE_ASSIGNPRIMARYTOKEN_NAME privilege is also required to accomplish this task.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_DUPLICATE">
 <summary>Required to duplicate an access token.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_EXECUTE">
 <summary>Combines <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.STANDARD_RIGHTS_EXECUTE"/> and <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_IMPERSONATE"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_IMPERSONATE">
 <summary>Required to attach an impersonation access token to a process.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_QUERY">
 <summary>Required to query an access token.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_QUERY_SOURCE">
 <summary>Required to query the source of an access token.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_READ">
 <summary>Combines <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.STANDARD_RIGHTS_READ"/> and <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_QUERY"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_WRITE">
 <summary>Combines <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.STANDARD_RIGHTS_WRITE"/>, <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_ADJUST_PRIVILEGES"/>, <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_ADJUST_GROUPS"/>, and <see cref="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_ADJUST_DEFAULT"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.AccessRightsForAccessTokenObjects.TOKEN_ALL_ACCESS">
 <summary>Combines all possible access rights for a token.</summary>
</member>
<member name="T:Tools.API.FileSystem.PrivilegeAttributes">
 <summary>Privilege attributes</summary>
</member>
<member name="F:Tools.API.FileSystem.PrivilegeAttributes.SE_PRIVILEGE_ENABLED">
 <summary>The privilege is enabled.</summary>
</member>
<member name="F:Tools.API.FileSystem.PrivilegeAttributes.SE_PRIVILEGE_REMOVED">
 <summary>Used to remove a privilege. For details, see <see cref="M:Tools.API.FileSystem.AdjustTokenPrivileges(System.IntPtr,System.Boolean,Tools.API.FileSystem.TOKEN_PRIVILEGES@,System.Int32,System.IntPtr,System.IntPtr)"/>.</summary>
</member>
<member name="F:Tools.API.FileSystem.PrivilegeAttributes.SE_PRIVILEGE_ENABLED_BY_DEFAULT">
 <summary>The privilege is enabled by default.</summary>
</member>
<member name="F:Tools.API.FileSystem.PrivilegeAttributes.SE_PRIVILEGE_USED_FOR_ACCESS">
 <summary>The privilege was used to gain access to an object or service. This flag is used to identify the relevant privileges in a set passed by a client application that may contain unnecessary privileges.</summary>
</member>
<member name="T:Tools.API.FileSystem.FileDeviceTypes">
 <summary>Device types that are availbable for file-like operations</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_8042_PORT">
 <summary>8042 pport</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_ACPI">
 <summary>ACPI device</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_BATTERY">
 <summary>Battery</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_BEEP">
 <summary>Beep</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_BUS_EXTENDER">
 <summary>Bus extender</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_CD_ROM">
 <summary>CR-ROM</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_CD_ROM_FILE_SYSTEM">
 <summary>CD-ROM file system</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_CHANGER">
 <summary>CHanged</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_CONTROLLER">
 <summary>Controller</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_DATALINK">
 <summary>Data-link</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_DFS">
 <summary>DFS</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_DFS_FILE_SYSTEM">
 <summary>DFS file system</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_DFS_VOLUME">
 <summary>DFS volume</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_DISK">
 <summary>Disk</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_DISK_FILE_SYSTEM">
 <summary>Disk file system</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_DVD">
 <summary>DVD</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_FILE_SYSTEM">
 <summary>File system</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_FIPS">
 <summary>FIPS</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_FULLSCREEN_VIDEO">
 <summary>Full-screen video</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_INPORT_PORT">
 <summary>Input port</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_KEYBOARD">
 <summary>Keyboard</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_KS">
 <summary>KS</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_KSEC">
 <summary>KSEC</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_MAILSLOT">
 <summary>MAil slot</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_MASS_STORAGE">
 <summary>Mass Storage device</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_MIDI_IN">
 <summary>MIDI input</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_MIDI_OUT">
 <summary>MIDI output</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_MODEM">
 <summary>Modem</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_MOUSE">
 <summary>Mouse</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_MULTI_UNC_PROVIDER">
 <summary>Multy UNC provider</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_NAMED_PIPE">
 <summary>Named pipe</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_NETWORK">
 <summary>Network</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_NETWORK_BROWSER">
 <summary>Network browser</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_NETWORK_FILE_SYSTEM">
 <summary>Network file system</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_NETWORK_REDIRECTOR">
 <summary>Network redirector</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_NULL">
 <summary>NULL device</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_PARALLEL_PORT">
 <summary>LPT parallel port</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_PHYSICAL_NETCARD">
 <summary>Physical net card</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_PRINTER">
 <summary>Printer</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_SCANNER">
 <summary>Scanner</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_SCREEN">
 <summary>Screen</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_SERENUM">
 <summary>Serial enumerator</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_SERIAL_MOUSE_PORT">
 <summary>Serial mouse port</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_SERIAL_PORT">
 <summary>Serial port</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_SMARTCARD">
 <summary>Smart card</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_SMB">
 <summary>SMB</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_SOUND">
 <summary>Sound device</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_STREAMS">
 <summary>Stream</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_TAPE">
 <summary>Tape</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_TAPE_FILE_SYSTEM">
 <summary>Tape file system</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_TERMSRV">
 <summary>Terminal server</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_TRANSPORT">
 <summary>Transport device</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_UNKNOWN">
 <summary>Unknown device</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_VDM">
 <summary>VDM</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_VIDEO">
 <summary>Video</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_VIRTUAL_DISK">
 <summary>Virtual disk</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_WAVE_IN">
 <summary>Wave input</summary>
</member>
<member name="F:Tools.API.FileSystem.FileDeviceTypes.FILE_DEVICE_WAVE_OUT">
 <summary>Wave output</summary>
</member>
<member name="T:Tools.API.FileSystem.IOMethod">
 <summary>Specifies IO methods</summary>
</member>
<member name="F:Tools.API.FileSystem.IOMethod.METHOD_BUFFERED">
 <summary>Specifies the buffered I/O method, which is typically used for transferring small amounts of data per request. </summary>
</member>
<member name="F:Tools.API.FileSystem.IOMethod.METHOD_IN_DIRECT">
 <summary>Specifies the direct I/O method, which is typically used for reading or writing large amounts of data. Use if caller will pass data to the driver.</summary>
</member>
<member name="F:Tools.API.FileSystem.IOMethod.METHOD_OUT_DIRECT">
 <summary>Specifies the direct I/O method, which is typically used for reading or writing large amounts of data. Use if caller will receive data from the driver.</summary>
</member>
<member name="F:Tools.API.FileSystem.IOMethod.METHOD_NEITHER">
 <summary>Specifies neither buffered nor direct I/O. The I/O manager does not provide any system buffers or MDLs.</summary>
</member>
<member name="T:Tools.API.FileSystem.IOFileAccess">
 <summary>Specifies IO fidle access methods</summary>
</member>
<member name="F:Tools.API.FileSystem.IOFileAccess.FILE_ANY_ACCESS">
 <summary>The I/O manager sends the IRP for any caller that has a handle to the file object that represents the target device object.</summary>
</member>
<member name="F:Tools.API.FileSystem.IOFileAccess.FILE_READ_ACCESS">
 <summary>The I/O manager sends the IRP only for a caller with read access rights, allowing the underlying device driver to transfer data from the device to system memory.</summary>
</member>
<member name="F:Tools.API.FileSystem.IOFileAccess.FILE_WRITE_ACCESS">
 <summary>The I/O manager sends the IRP only for a caller with write access rights, allowing the underlying device driver to transfer data from system memory to its device.</summary>
</member>
<member name="T:Tools.API.FileSystem.ReparseTags">
 <summary>Reparse tags values</summary>
</member>
<member name="F:Tools.API.FileSystem.ReparseTags.IO_REPARSE_TAG_RESERVED_ZERO">
 <summary>Reserved reparse tag value.</summary>
</member>
<member name="F:Tools.API.FileSystem.ReparseTags.IO_REPARSE_TAG_RESERVED_ONE">
 <summary>Reserved reparse tag value.</summary>
</member>
<member name="F:Tools.API.FileSystem.ReparseTags.IO_REPARSE_TAG_MOUNT_POINT">
 <summary>Used for mount point support, specified in section 2.1.2.5.</summary>
</member>
<member name="F:Tools.API.FileSystem.ReparseTags.IO_REPARSE_TAG_HSM">
 <summary>Obsolete. Used by legacy Hierarchical Storage Manager Product.</summary>
</member>
<member name="F:Tools.API.FileSystem.ReparseTags.IO_REPARSE_TAG_HSM2">
 <summary>Obsolete. Used by legacy Hierarchical Storage Manager Product.</summary>
</member>
<member name="F:Tools.API.FileSystem.ReparseTags.IO_REPARSE_TAG_SIS">
 <summary>Used by single-instance storage (SIS) filter driver. Server-side interpretation only, not meaningful over the wire.</summary>
</member>
<member name="F:Tools.API.FileSystem.ReparseTags.IO_REPARSE_TAG_DFS">
 <summary>Used by the DFS filter. The DFS is described in the Distributed File System (DFS): Referral Protocol Specification [MS-DFSC]. Server-side interpretation only, not meaningful over the wire.</summary>
</member>
<member name="F:Tools.API.FileSystem.ReparseTags.IO_REPARSE_TAG_DFSR">
 <summary>Used by the DFS filter. The DFS is described in [MS-DFSC]. Server-side interpretation only, not meaningful over the wire.</summary>
</member>
<member name="F:Tools.API.FileSystem.ReparseTags.IO_REPARSE_TAG_SYMLINK">
 <summary>Used for symbolic link support. See section 2.1.2.</summary>
</member>
<member name="T:Tools.API.GUI">
 <summary>Contains declarations of Win32 API related to GUI</summary>
</member>
<member name="M:Tools.API.GUI.GetSystemMenu(System.IntPtr,Tools.API.Common.APIBool)">
 <summary>The <see cref="M:Tools.API.GUI.GetSystemMenu(System.IntPtr,Tools.API.Common.APIBool)"/> function allows the application to access the window menu (also known as the System menu or the Control menu) for copying and modifying.</summary>
 <param name="hwnd">Identifies the window that will own a copy of the window menu.</param>
 <param name="revert">
 Specifies the action to be taken. If this parameter is <see cref="F:Tools.API.Common.APIBool.FALSE"/>, <see cref="M:Tools.API.GUI.GetSystemMenu(System.IntPtr,Tools.API.Common.APIBool)"/> returns the handle of the copy of the window menu currently in use. The copy is initially identical to the window menu, but it can be modified.
 If this parameter is <see cref="F:Tools.API.Common.APIBool.TRUE"/>, <see cref="M:Tools.API.GUI.GetSystemMenu(System.IntPtr,Tools.API.Common.APIBool)"/> resets the window menu back to the Windows default state. The previous window menu, if any, is destroyed.</param>
 <returns>If the <paramref name="bRevert"/> parameter is <see cref="F:Tools.API.Common.APIBool.FALSE"/>, the return value is the handle of a copy of the window menu. If the <paramref name="bRevert"/> parameter is <see cref="F:Tools.API.Common.APIBool.TRUE"/>, the return value is <see cref="F:Tools.API.Common.NULL"/>. </returns>
</member>
<member name="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)">
 <summary>The <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/> function enables, disables, or grays the specified menu item.</summary>
 <param name="menu">Handle to the menu</param>
 <param name="ideEnableItem">Specifies the menu item to be enabled, disabled, or grayed, as determined by the <paramref name="uEnable"/> parameter. This parameter specifies an item in a menu bar, menu, or submenu. Some menu items that can be manipuleated when <paramref name="enable"/> is combination of <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND"/> are listed in <see cref="T:Tools.API.GUI.SystemMenuItems"/></param>
 <param name="enable">
 Controls the interpretation of the <paramref name="uIDEnableItem"/> parameter and indicate whether the menu item is enabled, disabled, or grayed. This parameter must be a combination of either <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND"/> or <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYPOSITION"/> and <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_ENABLED"/>, <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_DISABLED"/>, or <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_GRAYED"/>. 
 </param>
 <returns>The return value specifies the previous state of the menu item (it is either <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_DISABLED"/>, <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_ENABLED"/>, or <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_GRAYED"/>). If the menu item does not exist, the return value is -1.</returns>
 <remarks>
 <para>An application must use the <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYPOSITION"/> flag to specify the correct menu handle. If the menu handle to the menu bar is specified, the top-level menu item (an item in the menu bar) is affected. To set the state of an item in a drop-down menu or submenu by position, an application must specify a handle to the drop-down menu or submenu. </para>
 <para>When an application specifies the <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND"/> flag, the system checks all items that open submenus in the menu identified by the specified menu handle. Therefore, unless duplicate menu items are present, specifying the menu handle to the menu bar is sufficient. </para>
 <para>The InsertMenu, InsertMenuItem, LoadMenuIndirect, ModifyMenu, and SetMenuItemInfo API functions can also set the state (enabled, disabled, or grayed) of a menu item.</para>
 <para>When you change a window menu, the menu bar is not immediately updated. To force the update, call API DrawMenuBar.</para>
 </remarks>
</member>
<member name="T:Tools.API.GUI.enmEnableMenuItemStatus">
 <summary>Values for <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/>'s enable parameter</summary>
</member>
<member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND">
 <summary>Indicates that uIDEnableItem gives the identifier of the menu item. If neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified, the MF_BYCOMMAND flag is the default flag.</summary>
</member>
<member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYPOSITION">
 <summary>Indicates that uIDEnableItem gives the zero-based relative position of the menu item.</summary>
</member>
<member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_DISABLED">
 <summary>Indicates that the menu item is disabled, but not grayed, so it cannot be selected.</summary>
</member>
<member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_GRAYED">
 <summary>Indicates that the menu item is disabled and grayed so that it cannot be selected.</summary>
</member>
<member name="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_ENABLED">
 <summary>Indicates that the menu item is enabled and restored from a grayed state so that it can be selected.</summary>
</member>
<member name="T:Tools.API.GUI.enmPreviousMenuItemStatus">
 <summary>Values returned by <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/> function</summary>
</member>
<member name="F:Tools.API.GUI.enmPreviousMenuItemStatus.MF_DISABLED">
 <summary>Indicates that the menu item is disabled, but not grayed, so it cannot be selected.</summary>
</member>
<member name="F:Tools.API.GUI.enmPreviousMenuItemStatus.MF_GRAYED">
 <summary>Indicates that the menu item is disabled and grayed so that it cannot be selected.</summary>
</member>
<member name="F:Tools.API.GUI.enmPreviousMenuItemStatus.MF_ENABLED">
 <summary>Indicates that the menu item is enabled and restored from a grayed state so that it can be selected.</summary>
</member>
<member name="F:Tools.API.GUI.enmPreviousMenuItemStatus.DoesNotExist">
 <summary>Indicates that the menu item does not exist.</summary>
</member>
<member name="T:Tools.API.GUI.SystemMenuItems">
 <summary>Win32 window system menu standard items</summary>
 <remarks>Used by <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/>'s ideEnableItem parameter when the enable parameter is combination of <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_BYCOMMAND"/></remarks>
</member>
<member name="F:Tools.API.GUI.SystemMenuItems.SC_CLOSE">
 <summary>Close (X) button</summary>
</member>
<member name="F:Tools.API.GUI.SystemMenuItems.SC_MOVE">
 <summary>Move menu item (doesn't work)</summary>
</member>
<member name="F:Tools.API.GUI.SystemMenuItems.SC_MAXIMIZE">
 <summary>Maximize button (doesn't work)</summary>
</member>
<member name="F:Tools.API.GUI.SystemMenuItems.SC_MINIMIZE">
 <summary>Minimize button (doesn't work)</summary>
</member>
<member name="F:Tools.API.GUI.SystemMenuItems.SC_SIZE">
 <summary>Resize menu item (doesn't work)</summary>
</member>
<member name="F:Tools.API.GUI.SystemMenuItems.SC_RESTORE">
 <summary>Restore button (doesn't work)</summary>
</member>
<member name="M:Tools.API.GUI.RemoveMenu(System.IntPtr,System.Int32,Tools.API.GUI.enmSelectMenuMethod)">
 <summary>The <see cref="M:Tools.API.GUI.RemoveMenu(System.IntPtr,System.Int32,Tools.API.GUI.enmSelectMenuMethod)"/> function deletes a menu item or detaches a submenu from the specified menu. If the menu item opens a drop-down menu or submenu, <see cref="M:Tools.API.GUI.RemoveMenu(System.IntPtr,System.Int32,Tools.API.GUI.enmSelectMenuMethod)"/> does not destroy the menu or its handle, allowing the menu to be reused. Before this function is called, the GetSubMenu function should retrieve a handle to the drop-down menu or submenu. </summary>
 <param name="hMenu">Handle to the menu to be changed. </param>
 <param name="nPosition">Specifies the menu item to be deleted, as determined by the <paramref name="wFlags"/> parameter. </param>
 <param name="wFlags">Specifies how the <paramref name="nPosition"/> parameter is interpreted. This parameter must be one of the following values: <see cref="F:Tools.API.GUI.enmSelectMenuMethod.MF_BYCOMMAND"/> or <see cref="F:Tools.API.GUI.enmSelectMenuMethod.MF_BYPOSITION"/></param>
 <returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.
 </returns>
 <remarks>The application must call the <see cref="M:Tools.API.GUI.DrawMenuBar(System.IntPtr)"/> function whenever a menu changes, whether or not the menu is in a displayed window.</remarks>
</member>
<member name="M:Tools.API.GUI.DeleteMenu(System.IntPtr,System.Int32,Tools.API.GUI.enmSelectMenuMethod)">
 <summary>Deletes an item from the specified menu. If the menu item opens a menu or submenu, this function destroys the handle to the menu or submenu and frees the memory used by the menu or submenu.</summary>
 <param name="hMenu">Handle to the menu to be changed. </param>
 <param name="uPosition">Specifies the menu item to be deleted, as determined by the <paramref name="uFlags"/> parameter. </param>
 <param name="uFlags">Specifies how the <paramref name="uPosition"/> parameter is interpreted. This parameter must be one of the <see cref="T:Tools.API.GUI.enmSelectMenuMethod"/> values. </param>
 <returns>If the function succeeds, the return value is True. If the function fails, the return value is False.</returns>
</member>
<member name="T:Tools.API.GUI.enmSelectMenuMethod">
 <summary>Values for <see cref="M:Tools.API.GUI.EnableMenuItem(System.IntPtr,System.Int32,Tools.API.GUI.enmEnableMenuItemStatus)"/>'s enable parameter</summary>
</member>
<member name="F:Tools.API.GUI.enmSelectMenuMethod.MF_BYCOMMAND">
 <summary>Indicates that uIDEnableItem gives the identifier of the menu item. If neither the MF_BYCOMMAND nor MF_BYPOSITION flag is specified, the MF_BYCOMMAND flag is the default flag.</summary>
</member>
<member name="F:Tools.API.GUI.enmSelectMenuMethod.MF_BYPOSITION">
 <summary>Indicates that uIDEnableItem gives the zero-based relative position of the menu item.</summary>
</member>
<member name="M:Tools.API.GUI.DrawMenuBar(System.IntPtr)">
 <summary>The DrawMenuBar function redraws the menu bar of the specified window. If the menu bar changes after the system has created the window, this function must be called to draw the changed menu bar. </summary>
 <param name="hwnd">Handle to the window whose menu bar needs redrawing.</param>
 <returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError. 
 </returns>
</member>
<member name="M:Tools.API.GUI.GetWindowRect(System.IntPtr,Tools.API.GUI.RECT@)">
 <summary>The GetWindowRect function retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.</summary>
 <param name="hwnd">Identifies the window.</param>
 <param name="lpRect">Points to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
 <returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member>
<member name="T:Tools.API.GUI.RECT">
 <summary>The RECT structure defines the coordinates of the upper-left and lower-right corners of a rectangle.</summary>
 <remarks>By convention, the right and bottom edges of the rectangle are normally considered exclusive. In other words, the pixel whose coordinates are (right, bottom) lies immediately outside of the the rectangle. For example, when RECT is passed to the FillRect function, the rectangle is filled up to, but not including, the right column and bottom row of pixels. This structure is identical to the RECTL structure.</remarks>
</member>
<member name="F:Tools.API.GUI.RECT.Left">
 <summary>Specifies the x-coordinate of the upper-left corner of the rectangle.</summary>
</member>
<member name="F:Tools.API.GUI.RECT.Top">
 <summary>Specifies the y-coordinate of the upper-left corner of the rectangle.</summary>
</member>
<member name="F:Tools.API.GUI.RECT.Right">
 <summary>Specifies the x-coordinate of the lower-right corner of the rectangle.</summary>
</member>
<member name="F:Tools.API.GUI.RECT.Bottom">
 <summary>Specifies the y-coordinate of the lower-right corner of the rectangle.</summary>
</member>
<member name="M:Tools.API.GUI.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Initializes <see cref="T:Tools.API.GUI.RECT"/> structure</summary>
 <param name="Left">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
 <param name="Top">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
 <param name="Right">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
 <param name="Bottom">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
</member>
<member name="M:Tools.API.GUI.RECT.op_Implicit(System.Drawing.Rectangle)~Tools.API.GUI.RECT">
 <summary>Converts <see cref="T:System.Drawing.Rectangle"/> to <see cref="T:Tools.API.GUI.RECT"/></summary>
 <param name="a">A <see cref="T:System.Drawing.Rectangle"/></param>
 <returns><see cref="T:Tools.API.GUI.RECT"/> equivalent to <paramref name="a"/></returns>
</member>
<member name="M:Tools.API.GUI.RECT.op_Implicit(Tools.API.GUI.RECT)~System.Drawing.Rectangle">
 <summary>Converts <see cref="T:Tools.API.GUI.RECT"/> to <see cref="T:System.Drawing.Rectangle"/></summary>
 <param name="a">A <see cref="T:Tools.API.GUI.RECT"/></param>
 <returns><see cref="T:System.Drawing.Rectangle"/> equivalent to <paramref name="a"/></returns>
</member>
<member name="M:Tools.API.GUI.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>The MoveWindow function changes the position and dimensions of the specified window. For a top-level window, the position and dimensions are relative to the upper-left corner of the screen. For a child window, they are relative to the upper-left corner of the parent window’s client area.</summary>
 <param name="bRepaint">Specifies whether the window is to be repainted. If this parameter is TRUE, the window receives a WM_PAINT message. If the parameter is FALSE, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of moving a child window. If this parameter is FALSE, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</param>
 <param name="hwnd">Identifies the window.</param>
 <param name="nHeight">Specifies the new height of the window.</param>
 <param name="nWidth">Specifies the new width of the window.</param>
 <param name="x">Specifies the new position of the left side of the window.</param>
 <param name="y">Specifies the new position of the top of the window.</param>
 <returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member>
<member name="M:Tools.API.GUI.SetParent(System.IntPtr,System.IntPtr)">
 <summary>The SetParent function changes the parent window of the specified child window.</summary>
 <param name="hWndChild">Identifies the child window.</param>
 <param name="hWndNewParent">Identifies the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>
 <returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member>
<member name="M:Tools.API.GUI.GetParent(System.IntPtr)">
 <summary>The GetParent function retrieves the handle of the specified child window’s parent window.</summary>
 <param name="hwnd">Identifies the window whose parent window handle is to be retrieved.</param>
 <remarks>If the function succeeds, the return value is the handle of the parent window. If the window has no parent window, the return value is NULL. To get extended error information, call GetLastError.</remarks>
</member>
<member name="M:Tools.API.GUI.SetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs,System.Int32)">
 <summary>The SetWindowLong function changes an attribute of the specified window. The function also sets a 32-bit (long) value at the specified offset into the extra window memory of a window.</summary>
 <param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
 <param name="nIndex">Specifies the zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus 4; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer.</param>
 <param name="dwNewLong">Specifies the replacement value.</param>
 <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
</member>
<member name="M:Tools.API.GUI.SetWindowLong(System.IntPtr,Tools.API.GUI.WindowProcs,Tools.API.Messages.WndProc)">
 <summary>Overload of the <see cref="M:Tools.API.GUI.SetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs,System.Int32)"/> function used to set window proc.</summary>
 <param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
 <param name="nIndex">Specifies the zero-based offset to the value to be set. This overload expects one of the <see cref="T:Tools.API.GUI.WindowProcs"/> values</param>
 <param name="NewProc">New window procedure - converted to pointer.</param>
 <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
</member>
<member name="M:Tools.API.GUI.GetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs)">
 <summary>The GetWindowLong function retrieves information about the specified window. The function also retrieves the 32-bit (long) value at the specified offset into the extra window memory of a window.</summary>
 <param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
 <param name="nIndex">Specifies the zero-based offset to the value to be retrieved. Valid values are in the range zero through the number of bytes of extra window memory, minus four; for example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to the third 32-bit integer.</param>
 <returns>If the function succeeds, the return value is the requested 32-bit value. 
 If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
</member>
<member name="M:Tools.API.GUI.GetWindowLong(System.IntPtr,Tools.API.GUI.WindowProcs)">
 <summary>Overload of the <see cref="M:Tools.API.GUI.GetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs)"/> function used to get window proc.</summary>
 <param name="hwnd">Identifies the window and, indirectly, the class to which the window belongs.</param>
 <param name="nIndex">Specifies the zero-based offset to the value to be retrieved. This overload expects one of <see cref="T:Tools.API.GUI.WindowProcs"/> values.</param>
 <returns>If the function succeeds, the return value is requested delegate. If it fails the return value is null.</returns>
</member>
<member name="M:Tools.API.GUI.CallWindowProc(System.IntPtr,System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>passes message information to the specified window procedure. </summary>
 <param name="lpPrevWndFunc">[in] Pointer to the previous window procedure. If this value is obtained by calling the <see cref="M:Tools.API.GUI.GetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs)"/> function with the <paramref name="nIndex"/> parameter set to <see cref="F:Tools.API.GUI.WindowLongs.GWL_WNDPROC"/> or <see cref="F:Tools.API.GUI.WindowLongs.DWL_DLGPROC"/>, it is actually either the address of a window or dialog box procedure, or a special internal value meaningful only to <see cref="M:Tools.API.GUI.CallWindowProc(System.IntPtr,System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/>. </param>
 <param name="hwnd">[in] Handle to the window procedure to receive the message. </param>
 <param name="msg">[in] Specifies the message. </param>
 <param name="lParam">[in] Specifies additional message-specific information. The contents of this parameter depend on the value of the <paramref name="Msg"/> parameter. </param>
 <param name="wParam">[in] Specifies additional message-specific information. The contents of this parameter depend on the value of the <paramref name="Msg"/> parameter. </param>
 <returns>The return value specifies the result of the message processing and depends on the message sent. </returns>
</member>
<member name="M:Tools.API.GUI.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Tools.API.GUI.SetWindowPosFlags)">
 <summary>Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order</summary>
 <param name="hWnd">A handle to the window.</param>
 <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order. This parameter must be a window handle or one of the <see cref="T:Tools.API.GUI.SpecialWindowHandles"/> values.</param>
 <param name="X">The new position of the left side of the window, in client coordinates. </param>
 <param name="Y">The new position of the top of the window, in client coordinates. </param>
 <param name="cx">The new width of the window, in pixels. </param>
 <param name="cy">The new height of the window, in pixels. </param>
 <param name="uFlags">    The window sizing and positioning flags.</param>
 <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
 <version version="1.5.3">This DLL-imported function is new in version 1.5.3</version>
</member>
<member name="T:Tools.API.GUI.SetWindowPosFlags">
 <summary>Possible values for <see cref="M:Tools.API.GUI.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Tools.API.GUI.SetWindowPosFlags)"/> <paramref name="uFlags"/> parameter</summary>
 <version version="1.5.3">This enumeration is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_ASYNCWINDOWPOS">
 <summary>If the calling thread and the thread that owns the window are attached to different input queues, the system posts the request to the thread that owns the window. This prevents the calling thread from blocking its execution while other threads process the request.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_DEFERERASE">
 <summary>Prevents generation of the <see cref="F:Tools.API.Messages.WindowMessages.WM_SYNCPAINT"/> message.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_DRAWFRAME">
 <summary>Draws a frame (defined in the window's class description) around the window.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_FRAMECHANGED">
 <summary>Applies new frame styles set using the <see cref="M:Tools.API.GUI.SetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs,System.Int32)"/> function. Sends a <see cref="F:Tools.API.Messages.WindowMessages.WM_NCCALCSIZE"/> message to the window, even if the window's size is not being changed. If this flag is not specified, <see cref="F:Tools.API.Messages.WindowMessages.WM_NCCALCSIZE"/> is sent only when the window's size is being changed.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_HIDEWINDOW">
 <summary>Hides the window.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOACTIVATE">
 <summary>Does not activate the window. If this flag is not set, the window is activated and moved to the top of either the topmost or non-topmost group (depending on the setting of the <paramref name="hWndInsertAfter"/> parameter).</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOCOPYBITS">
 <summary>Discards the entire contents of the client area. If this flag is not specified, the valid contents of the client area are saved and copied back into the client area after the window is sized or repositioned.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOMOVE">
 <summary>Retains the current position (ignores X and Y parameters).</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOOWNERZORDER">
 <summary>Does not change the owner window's position in the Z order.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOREDRAW">
 <summary>Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to the client area, the nonclient area (including the title bar and scroll bars), and any part of the parent window uncovered as a result of the window being moved. When this flag is set, the application must explicitly invalidate or redraw any parts of the window and parent window that need redrawing.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOREPOSITION">
 <summary>Same as the <see cref="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOOWNERZORDER"/> flag.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOSENDCHANGING">
 <summary>Prevents the window from receiving the <see cref="F:Tools.API.Messages.WindowMessages.WM_WINDOWPOSCHANGING"/> message.</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOSIZE">
 <summary>Retains the current size (ignores the cx and cy parameters).</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_NOZORDER">
 <summary>Retains the current Z order (ignores the hWndInsertAfter parameter).</summary>
</member>
<member name="F:Tools.API.GUI.SetWindowPosFlags.SWP_SHOWWINDOW">
 <summary>Displays the window.</summary>
</member>
<member name="T:Tools.API.GUI.SpecialWindowHandles">
 <summary>Defines various values that can be passed where windows handle is expected</summary>
 <remarks>Value of this enumeration should be cased to <see cref="T:System.IntPtr"/> before used as special values for window handles.</remarks>
 <version version="1.5.3">This enumeration is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.GUI.SpecialWindowHandles.HWND_BROADCAST">
 <summary>Special handle meaning broadcast to all windows</summary>
</member>
<member name="F:Tools.API.GUI.SpecialWindowHandles.HWND_TOP">
 <summary>Places the window at the top of the Z order.</summary>
</member>
<member name="F:Tools.API.GUI.SpecialWindowHandles.HWND_BOTTOM">
 <summary>Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost window, the window loses its topmost status and is placed at the bottom of all other System.Windows.</summary>
</member>
<member name="F:Tools.API.GUI.SpecialWindowHandles.HWND_TOPMOST">
 <summary>Places the window above all non-topmost System.Windows. The window maintains its topmost position even when it is deactivated.</summary>
</member>
<member name="F:Tools.API.GUI.SpecialWindowHandles.HWND_NOTOPMOST">
 <summary>Places the window above all non-topmost windows (that is, behind all topmost windows). This flag has no effect if the window is already a non-topmost window.</summary>
</member>
<member name="T:Tools.API.GUI.WindowLongs">
 <summary>Predefined window longs for <see cref="M:Tools.API.GUI.GetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs)"/> and <see cref="M:Tools.API.GUI.SetWindowLong(System.IntPtr,Tools.API.GUI.WindowLongs,System.Int32)"/></summary>
 <remarks>Publicly visible alternative of this enumeration is <see cref="T:Tools.API.Public.WindowLongs"/></remarks>
</member>
<member name="F:Tools.API.GUI.WindowLongs.GWL_EXSTYLE">
 <summary>Retrieves the extended window styles. For more information, see CreateWindowEx.</summary>
</member>
<member name="F:Tools.API.GUI.WindowLongs.GWL_STYLE">
 <summary>Retrieves the window styles.</summary>
</member>
<member name="F:Tools.API.GUI.WindowLongs.GWL_WNDPROC">
 <summary>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the CallWindowProc function to call the window procedure.</summary>
</member>
<member name="F:Tools.API.GUI.WindowLongs.GWL_HINSTANCE">
 <summary>Retrieves a handle to the application instance.</summary>
</member>
<member name="F:Tools.API.GUI.WindowLongs.GWL_HWNDPARENT">
 <summary>Retrieves a handle to the parent window, if any.</summary>
</member>
<member name="F:Tools.API.GUI.WindowLongs.GWL_ID">
 <summary>Retrieves the identifier of the window.</summary>
</member>
<member name="F:Tools.API.GUI.WindowLongs.GWL_USERDATA">
 <summary>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</summary>
</member>
<member name="F:Tools.API.GUI.WindowLongs.DWL_DLGPROC">
 <summary>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.</summary>
</member>
<member name="F:Tools.API.GUI.WindowLongs.DWL_MSGRESULT">
 <summary>Retrieves the return value of a message processed in the dialog box procedure.</summary>
</member>
<member name="F:Tools.API.GUI.WindowLongs.DWL_USER">
 <summary>Retrieves extra information private to the application, such as handles or pointers.</summary>
</member>
<member name="T:Tools.API.GUI.ExStyles">
 <summary>Defines window extended styles</summary>
 <seelaso cref="T:Tools.API.Public.WindowExtendedStyles"/>
 <version version="1.5.3">This enumeration is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_ACCEPTFILES">
 <summary>The windo accepts drag &amp; drop files</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_APPWINDOW">
 <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_CLIENTEDGE">
 <summary>The window has a border with a sunken edge.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_COMPOSITED">
 <summary>Paints all descendants of a window in bottom-to-top painting order using double-buffering. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.</summary>
 <remarks>Windows 2000:  This flag is not supported.</remarks>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_CONTEXTHELP">
 <summary>The title bar of the window includes a question mark. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a <see cref="F:Tools.API.Messages.WindowMessages.WM_HELP"/> message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.</summary>
 <remarks><see cref="F:Tools.API.GUI.ExStyles.WS_EX_CONTEXTHELP"/> cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.</remarks>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_CONTROLPARENT">
 <summary>The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_DLGMODALFRAME">
 <summary>The window has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_LAYERED">
 <summary>The window is a layered window. Note that this cannot be used for child System.Windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_LAYOUTRTL">
 <summary>If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the horizontal origin of the window is on the right edge. Increasing horizontal values advance to the left.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_LEFT">
 <summary>The window has generic left-aligned properties. This is the default.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_LEFTSCROLLBAR">
 <summary>If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_LTRREADING">
 <summary>The window text is displayed using left-to-right reading-order properties. This is the default.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_MDICHILD">
 <summary>The window is a MDI child window.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_NOACTIVATE">
 <summary>A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window.</summary>
 <remarks>To activate the window, use the SetActiveWindow or SetForegroundWindow function. The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the <see cref="F:Tools.API.GUI.ExStyles.WS_EX_APPWINDOW"/> style.</remarks>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_NOINHERITLAYOUT">
 <summary>The window does not pass its window layout to its child System.Windows.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_NOPARENTNOTIFY">
 <summary>The child window created with this style does not send the <see cref="F:Tools.API.Messages.WindowMessages.WM_PARENTNOTIFY"/> message to its parent window when it is created or destroyed.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_OVERLAPPEDWINDOW">
 <summary>The window is an overlapped window.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_PALETTEWINDOW">
 <summary>TBD</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_RIGHT">
 <summary>The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.</summary>
 <remarks>Using the <see cref="F:Tools.API.GUI.ExStyles.WS_EX_RIGHT"/> style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.</remarks>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_RIGHTSCROLLBAR">
 <summary>The vertical scroll bar (if present) is to the right of the client area. This is the default.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_RTLREADING">
 <summary>If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_STATICEDGE">
 <summary>The window has a three-dimensional border style intended to be used for items that do not accept user input.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_TOOLWINDOW">
 <summary>The window is intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_TOPMOST">
 <summary>The window should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function.</summary>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_TRANSPARENT">
 <summary>The window should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.</summary>
 <remarks>To achieve transparency without these restrictions, use the SetWindowRgn function.</remarks>
</member>
<member name="F:Tools.API.GUI.ExStyles.WS_EX_WINDOWEDGE">
 <summary>The window has a border with a raised edge.</summary>
</member>
<member name="T:Tools.API.GUI.WindowProcs">
 <summary>Subset of <see cref="T:Tools.API.GUI.WindowLongs"/> values related to window procedures</summary>
</member>
<member name="F:Tools.API.GUI.WindowProcs.GWL_WNDPROC">
 <summary>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the CallWindowProc function to call the window procedure.</summary>
</member>
<member name="F:Tools.API.GUI.WindowProcs.DWL_DLGPROC">
 <summary>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.</summary>
</member>
<member name="M:Tools.API.GUI.SetWindowText(System.IntPtr,System.String@)">
 <summary>The SetWindowText function changes the text of the specified window’s title bar (if it has one). If the specified window is a control, the text of the control is changed.</summary>
 <param name="hwnd">Identifies the window or control whose text is to be changed.</param>
 <param name="lpString">Points to a null-terminated string to be used as the new title or control text.</param>
 <returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member>
<member name="M:Tools.API.GUI.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
 <summary>The GetWindowText function copies the text of the specified window’s title bar (if it has one) into a buffer. If the specified window is a control, the text of the control is copied.</summary>
 <param name="cch">Specifies the maximum number of characters to copy to the buffer, including the NULL character. If the text exceeds this limit, it is truncated.</param>
 <param name="hwnd">Identifies the window or control containing the text.</param>
 <param name="lpString">Points to the buffer that will receive the text.</param>
 <returns>If the function succeeds, the return value is the length, in characters, of the copied string, not including the terminating null character. If the window has no title bar or text, if the title bar is empty, or if the window or control handle is invalid, the return value is zero. To get extended error information, call GetLastError. 
 This function cannot retrieve the text of an edit control in another application. </returns>
</member>
<member name="M:Tools.API.GUI.GetWindowTextLength(System.IntPtr)">
 <summary>The GetWindowTextLength function retrieves the length, in characters, of the specified window’s title bar text (if the window has a title bar). If the specified window is a control, the function retrieves the length of the text within the control.</summary>
 <param name="hwnd">Identifies the window or control.</param>
 <returns>If the function succeeds, the return value is the length, in characters, of the text. Under certain conditions, this value may actually be greater than the length of the text. For more information, see the following Remarks section. 
 If the window has no text, the return value is zero. To get extended error information, call GetLastError. </returns>
</member>
<member name="M:Tools.API.GUI.ScreenToClient(System.IntPtr,Tools.API.GUI.POINTAPI@)">
 <summary>The ScreenToClient function converts the screen coordinates of a specified point on the screen to client-area coordinates.</summary>
 <param name="hwnd">Handle to the window whose client area will be used for the conversion.</param>
 <param name="lpPoint">Pointer to a POINT structure that specifies the screen coordinates to be converted.</param>
 <returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. </returns>
</member>
<member name="T:Tools.API.GUI.POINTAPI">
 <summary>The POINT structure defines the x- and y- coordinates of a point.</summary>
</member>
<member name="F:Tools.API.GUI.POINTAPI.x">
 <summary>Specifies the x-coordinate of the point.</summary>
</member>
<member name="F:Tools.API.GUI.POINTAPI.y">
 <summary>Specifies the y-coordinate of the point.</summary>
</member>
<member name="M:Tools.API.GUI.POINTAPI.#ctor(System.Int32,System.Int32)">
 <summary>CTor</summary>
 <param name="x">the x-coordinate of the point</param>
 <param name="y">the y-coordinate of the point.</param>
</member>
<member name="M:Tools.API.GUI.POINTAPI.op_Implicit(Tools.API.GUI.POINTAPI)~System.Drawing.Point">
 <summary>Converts <see cref="T:Tools.API.GUI.POINTAPI"/> to <see cref="T:System.Drawing.Point"/></summary>
 <param name="a">A <see cref="T:Tools.API.GUI.POINTAPI"/></param>
 <returns>A <see cref="T:System.Drawing.Point"/></returns>
</member>
<member name="M:Tools.API.GUI.POINTAPI.op_Implicit(System.Drawing.Point)~Tools.API.GUI.POINTAPI">
 <summary>Converts <see cref="T:System.Drawing.Point"/> to <see cref="T:Tools.API.GUI.POINTAPI"/></summary>
 <param name="a">A <see cref="T:System.Drawing.Point"/></param>
 <returns>A <see cref="T:Tools.API.GUI.POINTAPI"/></returns>
</member>
<member name="M:Tools.API.GUI.GetDesktopWindow">
 <summary>The GetDesktopWindow function returns the handle of the Windows desktop window. The desktop window covers the entire screen. The desktop window is the area on top of which all icons and other windows are painted.</summary>
 <returns>The return value is the handle of the desktop window.</returns>
</member>
<member name="M:Tools.API.GUI.EnumChildWindows(System.IntPtr,Tools.API.GUI.EnumWindowsProc,System.Int32)">
 <summary>The EnumChildWindows function enumerates the child windows that belong to the specified parent window by passing the handle to each child window, in turn, to an application-defined callback function. EnumChildWindows continues until the last child window is enumerated or the callback function returns FALSE.</summary>
 <param name="hWndParent">Identifies the parent window whose child windows are to be enumerated.</param>
 <param name="lpEnumFunc">Points to an application-defined callback function. For more information about the callback function, see the EnumChildProc callback function.</param>
 <param name="lParam">Specifies a 32-bit, application-defined value to be passed to the callback function.</param>
 <returns>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</returns>
</member>
<member name="T:Tools.API.GUI.EnumWindowsProc">
 <summary>The EnumChildProc function is an application-defined callback function used with the EnumChildWindows function. It receives the child window handles. The WNDENUMPROC type defines a pointer to this callback function. EnumChildProc is a placeholder for the application-defined function name.</summary>
 <param name="hWnd">Handle to a child window of the parent window specified in EnumChildWindows.</param>
 <param name="lParam">Specifies the application-defined value given in EnumChildWindows.</param>
 <returns>To continue enumeration, the callback function must return TRUE; to stop enumeration, it must return FALSE.</returns>
</member>
<member name="M:Tools.API.GUI.EnumWindows(Tools.API.GUI.EnumWindowsProc,System.Int32)">
 <summary>The EnumWindows function enumerates all top-level windows on the screen by passing the handle of each window, in turn, to an application-defined callback function. EnumWindows continues until the last top-level window is enumerated or the callback function returns FALSE.</summary>
 <param name="lpEnumFunc">Points to an application-defined callback function. For more information, see the EnumWindowsProc callback function.</param>
 <param name="lParam">Specifies a 32-bit, application-defined value to be passed to the callback function.</param>
 <remarks>If the function succeeds, the return value is nonzero.
 If the function fails, the return value is zero. To get extended error information, call GetLastError.</remarks>
</member>
<member name="M:Tools.API.GUI.DefWindowProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>The DefWindowProc function calls the default window procedure to provide default processing for any window messages that an application does not process. This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.</summary>
 <param name="hwnd">Identifies the window procedure that received the message.</param>
 <param name="wMsg">Specifies the message.</param>
 <param name="wParam">Specifies additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
 <param name="lParam">Specifies additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
 <returns>The return value is the result of the message processing and depends on the message.</returns>
</member>
<member name="M:Tools.API.GUI.FindWindow(System.String@,System.String@)">
 <summary>The FindWindow function retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child System.Windows. This function does not perform a case-sensitive search.</summary>
 <param name="lpClassName">[in] Pointer to a null-terminated string that specifies the class name or a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpClassName; the high-order word must be zero.
 <para>If lpClassName points to a string, it specifies the window class name. The class name can be any name registered with RegisterClass or RegisterClassEx, or any of the predefined control-class names.</para>
 <para>If lpClassName is NULL, it finds any window whose title matches the lpWindowName parameter. </para></param>
 <param name="lpWindowName">[in] Pointer to a null-terminated string that specifies the window name (the window's title). If this parameter is NULL, all window names match.</param>
 <returns>If the function succeeds, the return value is a handle to the window that has the specified class name and window name.
 <para>If the function fails, the return value is NULL. To get extended error information, call GetLastError.</para></returns>
 <remarks>If the lpWindowName parameter is not NULL, FindWindow calls the GetWindowText function to retrieve the window name for comparison. For a description of a potential problem that can arise, see the Remarks for GetWindowText. </remarks>
</member>
<member name="M:Tools.API.GUI.GetCaretBlinkTime">
 <summary>The GetCaretBlinkTime function returns the elapsed time, in milliseconds, required to invert the caret's pixels. The user can set this value using the Control Panel.</summary>
 <returns>If the function succeeds, the return value is the blink time, in milliseconds. 
 If the function fails, the return value is zero. To get extended error information, call GetLastError. </returns>
</member>
<member name="M:Tools.API.GUI.GetClassName(System.IntPtr,System.Text.StringBuilder,System.Int32)">
 <summary>Retrieves the name of the class to which the specified window belongs. </summary>
 <param name="hwnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
 <param name="lpClassName">The class name string.</param>
 <param name="nMaxCount">The length, in characters, of the buffer pointed to by the <paramref name="lpClassName"/> parameter. The class name string is truncated if it is longer than the buffer and is always null-terminated. </param>
 <returns>If the function succeeds, the return value is the number of characters copied to the specified buffer. If the function fails, the return value is zero.</returns>
</member>
<member name="T:Tools.API.GUI.GUITHREADINFO">
 <summary>Contains information about a GUI thread.</summary>
 <remarks>This structure is used with the <see cref="M:Tools.API.GUI.GetGUIThreadInfo(System.Int32,Tools.API.GUI.GUITHREADINFO@)"/>  function to retrieve information about the active window or a specified GUI thread. </remarks>
</member>
<member name="F:Tools.API.GUI.GUITHREADINFO.cbSize">
 <summary>The size of this structure, in bytes. The caller must set this member to sizeof <see cref="T:Tools.API.GUI.GUITHREADINFO"/></summary>
</member>
<member name="F:Tools.API.GUI.GUITHREADINFO.flags">
 <summary>The thread state.</summary>
</member>
<member name="F:Tools.API.GUI.GUITHREADINFO.hwndActive">
 <summary>A handle to the active window within the thread. </summary>
</member>
<member name="F:Tools.API.GUI.GUITHREADINFO.hwndFocus">
 <summary>A handle to the window that has the keyboard focus.</summary>
</member>
<member name="F:Tools.API.GUI.GUITHREADINFO.hwndCapture">
 <summary>A handle to the window that has captured the mouse. </summary>
</member>
<member name="F:Tools.API.GUI.GUITHREADINFO.hwndMenuOwner">
 <summary>A handle to the window that owns any active menus. </summary>
</member>
<member name="F:Tools.API.GUI.GUITHREADINFO.hwndMoveSize">
 <summary>A handle to the window in a move or size loop. </summary>
</member>
<member name="F:Tools.API.GUI.GUITHREADINFO.hwndCaret">
 <summary>A handle to the window that is displaying the caret. </summary>
</member>
<member name="F:Tools.API.GUI.GUITHREADINFO.rcCaret">
 <summary>The caret's bounding rectangle, in client coordinates, relative to the window specified by the <see cref="F:Tools.API.GUI.GUITHREADINFO.hwndCaret"/> member. </summary>
</member>
<member name="T:Tools.API.GUI.GuiThreadInfoFlags">
 <summary>Defines GUI thread states</summary>
</member>
<member name="F:Tools.API.GUI.GuiThreadInfoFlags.GUI_CARETBLINKING">
 <summary>The caret's blink state. This bit is set if the caret is visible. </summary>
</member>
<member name="F:Tools.API.GUI.GuiThreadInfoFlags.GUI_INMENUMODE">
 <summary>The thread's menu state. This bit is set if the thread is in menu mode. </summary>
</member>
<member name="F:Tools.API.GUI.GuiThreadInfoFlags.GUI_INMOVESIZE">
 <summary>The thread's move state. This bit is set if the thread is in a move or size loop. </summary>
</member>
<member name="F:Tools.API.GUI.GuiThreadInfoFlags.GUI_POPUPMENUMODE">
 <summary>The thread's pop-up menu state. This bit is set if the thread has an active pop-up menu.</summary>
</member>
<member name="F:Tools.API.GUI.GuiThreadInfoFlags.GUI_SYSTEMMENUMODE">
 <summary>The thread's system menu state. This bit is set if the thread is in a system menu mode.</summary>
</member>
<member name="M:Tools.API.GUI.GetGUIThreadInfo(System.Int32,Tools.API.GUI.GUITHREADINFO@)">
 <summary>Retrieves information about the active window or a specified GUI thread.</summary>
 <param name="idThread">The identifier for the thread for which information is to be retrieved. To retrieve this value, use the GetWindowThreadProcessId  function. If this parameter is zero, the function returns information for the foreground thread. </param>
 <param name="lpgui">A pointer to a <see cref="T:Tools.API.GUI.GUITHREADINFO"/>  structure that receives information describing the thread. Note that you must set the <see cref="F:Tools.API.GUI.GUITHREADINFO.cbSize"/> member to sizeof <see cref="T:Tools.API.GUI.GUITHREADINFO"/>  before calling this function.</param>
 <remarks>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</remarks>
</member>
<member name="M:Tools.API.GUI.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
 <summary>Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the process that created the window.</summary>
 <param name="hWnd">A handle to the window.</param>
 <param name="processId">A pointer to a variable that receives the process identifier. If this parameter is not zero, <see cref="M:Tools.API.GUI.GetWindowThreadProcessId(System.IntPtr,System.Int32@)"/> copies the identifier of the process to the variable; otherwise, it does not.</param>
 <returns>The return value is the identifier of the thread that created the window.</returns>
</member>
<member name="M:Tools.API.GUI.SetForegroundWindow(System.IntPtr)">
 <summary>Brings the thread that created the specified window into the foreground and activates the window. Keyboard input is directed to the window, and various visual cues are changed for the user. The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads. </summary>
 <param name="hwnd">A handle to the window that should be activated and brought to the foreground. </param>
 <returns>If the window was brought to the foreground, the return value is nonzero.
 If the window was not brought to the foreground, the return value is zero.</returns>
</member>
<member name="M:Tools.API.GUI.GetForegroundWindow">
 <summary>Retrieves a handle to the foreground window (the window with which the user is currently working). The system assigns a slightly higher priority to the thread that creates the foreground window than it does to other threads. </summary>
 <returns>The return value is a handle to the foreground window. The foreground window can be null in certain circumstances, such as when a window is losing activation.</returns>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="T:Tools.API.Helpers">
 <summary>Contains helper functions to deal with Win32 API</summary>
 <version version="1.5.2" stage="Nightly">Module introduced</version>
</member>
<member name="M:Tools.API.Helpers.IsFunctionExported(System.Runtime.InteropServices.DllImportAttribute)">
 <summary>Determines if Win32 API function is exported</summary>
 <param name="DllImport">The <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/> specifying the function to be imported. <paramref name="DllImport"/>.<see cref="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">EntryPoint</see> must be specified.</param>
 <returns>True if such function is specified, false if not</returns>
 <remarks>When <paramref name="DllImport"/>.<see cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">ExactSpelling</see> is true, <paramref name="DllImport"/>.<see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">CharSet</see> is ignored (see <see cref="F:System.Runtime.InteropServices.CharSet.None"/> is used).</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="DllImport"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="DllImport"/>.<see cref="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint"/> is null or an empty string.</exception>
</member>
<member name="M:Tools.API.Helpers.IsFunctionExported(System.Reflection.MethodInfo)">
 <summary>Check is Win32 API method decorated with <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/> exists in exporting library</summary>
 <param name="Method">Method decorated with <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/></param>
 <returns>True if method declaration is present in unmanaged DLL</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Method"/> is not decorated with <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/></exception>
</member>
<member name="M:Tools.API.Helpers.IsFunctionExported(System.Type,System.String,System.Reflection.BindingFlags)">
 <summary>Checks if WIn32 API metod decorated with <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/> exists in exporting library</summary>
 <param name="Type">Type method is declared in</param>
 <param name="FunctionName">Name of method as declared in <paramref name="Type"/>. Method must be static.</param>
 <param name="BindingFlags">Overrides default binding flags. <see cref="F:System.Reflection.BindingFlags.Static"/> is not required (it is OR-ed automatically). <see cref="F:System.Reflection.BindingFlags.Instance"/> is prohibited.</param>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one static method with same <paramref name="FunctionName"/> filtered by <paramref name="BindingFlags"/> is found on <paramref name="Type"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null or <paramref name="FunctionName"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="FunctionName"/> is an empty string -or- <paramref name="BindingFlags"/> contains <see cref="F:System.Reflection.BindingFlags.Instance"/> -or- Method is not decorated with <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.</exception>
 <exception cref="T:System.MissingMethodException">Static method with name <paramref name="FunctionName"/> filtered by <paramref name="BindingFlags"/> was not found on type <paramref name="Type"/>.</exception>
 <returns>True if method declaration is present in unmanaged DLL</returns>
</member>
<member name="M:Tools.API.Helpers.IsFunctionExported(System.Delegate)">
 <summary>Checks if Win32 API method represented by delegate to <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>-decorated method is accessible</summary>
 <param name="Method">Delegate targeting <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>-decorated method</param>
 <returns>True if such method is declared in exporting unmanaged DLL</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
 <exception cref="T:System.ArgumentException">Invocation list of <paramref name="Method"/> ha not exactly one item -or- Method is nod decorated with <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/></exception>
 <exception cref="T:System.MemberAccessException">The caller does not have access to the method represented by the delegate (for example, if the method is private; see <see cref="P:System.Delegate.Method"/>).</exception>
</member>
<member name="M:Tools.API.Helpers.IsFunctionExported(System.String,System.String,System.Runtime.InteropServices.CharSet)">
 <summary>Determines if Win32 API function is exported</summary>
 <param name="ModuleName">Name of module (as <see cref="P:System.Runtime.InteropServices.DllImportAttribute.Value"/>)</param>
 <param name="ProcName">Name of procedure (as <see cref="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint"/>)</param>
 <param name="CharSet">Character set of procedure (as <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet"/></param>
 <returns>Ture if function <paramref name="ProcName"/> is specidied in <paramref name="ModuleName"/> DLL</returns>
 <remarks>If <paramref name="CharSet"/> is <see cref="F:System.Runtime.InteropServices.CharSet.Ansi"/> <paramref name="ProcName"/> is appended A. If <paramref name="CharSet"/> is <see cref="F:System.Runtime.InteropServices.CharSet.Unicode"/> <paramref name="ProcName"/> is appended W.
 If <paramref name="CharSet"/> is <see cref="F:System.Runtime.InteropServices.CharSet.Auto"/>, both A and W are tried (as well as no suffix). Otherwise function name is tested as passed to <paramref name="ProcName"/> only.</remarks>
</member>
<member name="T:Tools.API.Hid">
 <summary>Contains declarations related to hid.dll library for Human Interface Devices</summary>
</member>
<member name="T:Tools.API.Hid.HIDP_REPORT_TYPE">
 <summary>used to specify a HID report type.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_REPORT_TYPE.HidP_Input">
 <summary>Indicates an input report.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_REPORT_TYPE.HidP_Output">
 <summary>Indicates an output report.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_REPORT_TYPE.HidP_Feature">
 <summary>Indicates a feature report.</summary>
</member>
<member name="T:Tools.API.Hid.HIDP_CAPS">
 <summary>contains information about a top-level collection's capability.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.Usage">
 <summary>Specifies a top-level collection's usage ID.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.UsagePage">
 <summary>Specifies the top-level collection's usage page.</summary>
 <seelaso cref="T:Tools.DevicesT.RawInputT.UsagePages"/>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.InputReportByteLength">
 <summary>Specifies the maximum size, in bytes, of all the input reports (including the report ID, if report IDs are used, which is prepended to the report data).</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.OutputReportByteLength">
 <summary>Specifies the maximum size, in bytes, of all the output reports (including the report ID, if report IDs are used, which is prepended to the report data).</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.FeatureReportByteLength">
 <summary>Specifies the maximum length, in bytes, of all the feature reports (including the report ID, if report IDs are used, which is prepended to the report data).</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.Reserved">
 <summary>Reserved for internal system use.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberLinkCollectionNodes">
 <summary>Specifies the number of HIDP_LINK_COLLECTION_NODE structures that are returned for this top-level collection by HidP_GetLinkCollectionNodes.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberInputButtonCaps">
 <summary>Specifies the number of input <see cref="T:Tools.API.Hid.HIDP_BUTTON_CAPS"/> structures that <see cref="M:Tools.API.Hid.HidP_GetButtonCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)"/> returns.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberInputValueCaps">
 <summary>Specifies the number of input <see cref="T:Tools.API.Hid.HIDP_VALUE_CAPS"/> structures that <see cref="M:Tools.API.Hid.HidP_GetValueCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)"/> returns.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberInputDataIndices">
 <summary>Specifies the number of data indices assigned to buttons and values in all input reports.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberOutputButtonCaps">
 <summary>Specifies the number of output <see cref="T:Tools.API.Hid.HIDP_BUTTON_CAPS"/> structures that <see cref="M:Tools.API.Hid.HidP_GetButtonCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)"/> returns.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberOutputValueCaps">
 <summary>Specifies the number of output <see cref="T:Tools.API.Hid.HIDP_VALUE_CAPS"/> structures that <see cref="M:Tools.API.Hid.HidP_GetValueCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)"/> returns.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberOutputDataIndices">
 <summary>Specifies the number of data indices assigned to buttons and values in all output reports.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberFeatureButtonCaps">
 <summary>Specifies the total number of feature <see cref="T:Tools.API.Hid.HIDP_BUTTON_CAPS"/> structures that <see cref="M:Tools.API.Hid.HidP_GetButtonCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)"/> returns.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberFeatureValueCaps">
 <summary>Specifies the total number of feature <see cref="T:Tools.API.Hid.HIDP_VALUE_CAPS"/> structures that <see cref="M:Tools.API.Hid.HidP_GetValueCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)"/> returns.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_CAPS.NumberFeatureDataIndices">
 <summary>Specifies the number of data indices assigned to buttons and values in all feature reports.</summary>
</member>
<member name="T:Tools.API.Hid.HIDP_VALUE_CAPS">
 <summary>contains information that describes the capability of a set of HID control values (either a single usage or a usage range).</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.UsagePage">
 <summary>Specifies the usage page of the usage or usage range.</summary>
 <seelaso cref="T:Tools.DevicesT.RawInputT.UsagePages"/>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.ReportID">
 <summary>Specifies the report ID of the HID report that contains the usage or usage range.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsAlias">
 <summary>Indicates, if TRUE, that the usage is member of a set of aliased usages. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsAlias"/> is FALSE, the value has only one usage.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.BitField">
 <summary>Contains the data fields (one or two bytes) associated with an input, output, or feature main item.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.LinkCollection">
 <summary>Specifies the index of the link collection in a top-level collection's link collection array that contains the usage or usage range. If <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.LinkCollection"/> is zero, the usage or usage range is contained in the top-level collection.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.LinkUsage">
 <summary>Specifies the usage of the link collection that contains the usage or usage range. If <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.LinkCollection"/> is zero, <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.LinkUsage"/> specifies the usage of the top-level collection.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.LinkUsagePage">
 <summary>Specifies the usage page of the link collection that contains the usage or usage range. If <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.LinkCollection"/> is zero, <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.LinkUsagePage"/> specifies the usage page of the top-level collection.</summary>
 <seelaso cref="T:Tools.DevicesT.RawInputT.UsagePages"/>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsRange">
 <summary>Specifies, if TRUE, that the structure describes a usage range. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsRange"/> is FALSE, the structure describes a single usage.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsStringRange">
 <summary>Specifies, if TRUE, that the usage or usage range has a set of string descriptors. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsStringRange"/> is FALSE, the usage or usage range has zero or one string descriptor.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsDesignatorRange">
 <summary>Specifies, if TRUE, that the usage or usage range has a set of designators. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsDesignatorRange"/> is FALSE, the usage or usage range has zero or one designator.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsAbsolute">
 <summary>Specifies, if TRUE, that the usage or usage range provides absolute data. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsAbsolute"/> is FALSE, the value is the change in state from the previous value.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.HasNull">
 <summary>Specifies, if TRUE, that the usage supports a NULL value, which indicates that the data is not valid and should be ignored. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.HasNull"/> is FALSE, the usage does not have a NULL value.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.Reserved">
 <summary>Reserved for internal system use.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.BitSize">
 <summary>Specifies the size, in bits, of a usage's data field in a report. If <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.ReportCount"/> is greater than one, each usage has a separate data field of this size.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.ReportCount">
 <summary>Specifies the number of usages that this structure describes.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.Reserved2">
 <summary>Reserved for internal system use.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.UnitsExp">
 <summary>Specifies the usage's exponent, as described by the USB HID standard.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.Units">
 <summary>Specifies the usage's units, as described by the USB HID Standard.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.LogicalMin">
 <summary>Specifies a usage's signed lower bound.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.LogicalMax">
 <summary>Specifies a usage's signed upper bound.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.PhysicalMin">
 <summary>Specifies a usage's signed lower bound after scaling is applied to the logical minimum value.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.PhysicalMax">
 <summary>Specifies a usage's signed upper bound after scaling is applied to the logical maximum value.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.Range">
 <summary>Specifies, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsRange"/> is TRUE, information about a usage range. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsRange"/> is FALSE, <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRange"/> contains information about a single usage.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRange">
 <summary>Specifies, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsRange"/> is FALSE, information about a single usage. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.IsRange"/> is TRUE, <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.Range"/> contains information about a usage range.</summary>
</member>
<member name="T:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct">
 <summary>Type of <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.Range"/> field</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.UsageMin">
 <summary>Indicates the inclusive lower bound of usage range whose inclusive upper bound is specified by <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.UsageMax"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.UsageMax">
 <summary>Indicates the inclusive upper bound of a usage range whose inclusive lower bound is indicated by <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.UsageMin"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.StringMin">
 <summary>Indicates the inclusive lower bound of a range of string descriptors (specified by string minimum and string maximum items) whose inclusive upper bound is indicated by <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.StringMax"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.StringMax">
 <summary>Indicates the inclusive upper bound of a range of string descriptors (specified by string minimum and string maximum items) whose inclusive lower bound is indicated by <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.StringMax"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.DesignatorMin">
 <summary>Indicates the inclusive lower bound of a range of designators (specified by designator minimum and designator maximum items) whose inclusive upper bound is indicated by <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.DesignatorMax"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.DesignatorMax">
 <summary>Indicates the inclusive upper bound of a range of designators (specified by designator minimum and designator maximum items) whose inclusive lower bound is indicated by <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.DesignatorMax"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.DataIndexMin">
 <summary>Indicates the inclusive lower bound of a sequential range of data indices that correspond, one-to-one and in the same order, to the usages specified by the usage range <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.UsageMin"/> to <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.UsageMax"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.DataIndexMax">
 <summary>Indicates the inclusive upper bound of a sequential range of data indices that correspond, one-to-one and in the same order, to the usages specified by the usage range <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.UsageMin"/> to <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.RangeStruct.UsageMax"/>.</summary>
</member>
<member name="T:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct">
 <summary>Type of <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRange"/> field</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.Usage">
 <summary>Indicates a usage ID.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.Reserved1">
 <summary>Reserved for internal system use.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.StringIndex">
 <summary>Indicates a string descriptor ID for the usage specified by <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.Usage"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.Reserved2">
 <summary>Reserved for internal system use.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.DesignatorIndex">
 <summary>Indicates a designator ID for the usage specified by <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.Usage"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.Reserved3">
 <summary>Reserved for internal system use.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.DataIndex">
 <summary>Indicates the data index of the usage specified by <see cref="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.Usage"/>.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_VALUE_CAPS.NotRangeStruct.Reserved4">
 <summary>Reserved for internal system use.</summary>
</member>
<member name="T:Tools.API.Hid.HIDP_BUTTON_CAPS">
 <summary>contains information about the capability of a HID control button usage (or a set of buttons associated with a usage range).</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.UsagePage">
 <summary>Specifies the usage page for a usage or usage range.</summary>
 <seelaso cref="T:Tools.DevicesT.RawInputT.UsagePages"/> 
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.ReportID">
 <summary>Specifies the report ID of the HID report that contains the usage or usage range.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsAlias">
 <summary>Indicates, if TRUE, that a button has a set of aliased usages. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsAlias"/> is FALSE, the button has only one usage.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.BitField">
 <summary>Contains the data fields (one or two bytes) associated with an input, output, or feature main item.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.LinkCollection">
 <summary>Specifies the index of the link collection in a top-level collection's link collection array that contains the usage or usage range. If <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.LinkCollection"/> is zero, the usage or usage range is contained in the top-level collection.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.LinkUsage">
 <summary>Specifies the usage of the link collection that contains the usage or usage range. If <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.LinkCollection"/> is zero, <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.LinkUsage"/> specifies the usage of the top-level collection.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.LinkUsagePage">
 <summary>Specifies the usage page of the link collection that contains the usage or usage range. If <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.LinkCollection"/> is zero, <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.LinkUsagePage"/> specifies the usage page of the top-level collection.</summary>
 <seelaso cref="T:Tools.DevicesT.RawInputT.UsagePages"/>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsRange">
 <summary>Specifies, if TRUE, that the structure describes a usage range. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsRange"/> is FALSE, the structure describes a single usage.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsStringRange">
 <summary>Specifies, if TRUE, that the usage or usage range has a set of string descriptors. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsStringRange"/> is FALSE, the usage or usage range has zero or one string descriptor.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsDesignatorRange">
 <summary>Specifies, if TRUE, that the usage or usage range has a set of designators. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsDesignatorRange"/> is FALSE, the usage or usage range has zero or one designator.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsAbsolute">
 <summary>Specifies, if TRUE, that the button usage or usage range provides absolute data. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsAbsolute"/> is FALSE, the button data is the change in state from the previous value.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r0">
 <summary>Contains element 0 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r1">
 <summary>Contains element 1 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r2">
 <summary>Contains element 2 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r3">
 <summary>Contains element 3 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r4">
 <summary>Contains element 4 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r5">
 <summary>Contains element 5 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r6">
 <summary>Contains element 6 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r7">
 <summary>Contains element 7 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r8">
 <summary>Contains element 8 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.r9">
 <summary>Contains element 9 of <see cref="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)"/> pseudo-array</summary>
</member>
<member name="P:Tools.API.Hid.HIDP_BUTTON_CAPS.Reserved2(System.Int32)">
 <summary>Mimics fixed-size array of integers used by this unmanaged structure</summary>
 <param name="Index">Index from 0 to 9</param>
 <returns>Pseudo-array element</returns>
 <value>New value to store in pseudo-array</value>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Index"/> is not within range 0÷9</exception>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.Range">
 <summary>    Specifies, if <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsRange"/> is TRUE, information about a usage range. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsRange"/> is FALSE, <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.NotRange"/> contains information about a single usage.</summary>
</member>
<member name="F:Tools.API.Hid.HIDP_BUTTON_CAPS.NotRange">
 <summary>Specifies, if <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsRange"/> is FALSE, information about a single usage. Otherwise, if <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.IsRange"/> is TRUE, <see cref="F:Tools.API.Hid.HIDP_BUTTON_CAPS.Range"/> contains information about a usage range.</summary>
</member>
<member name="M:Tools.API.Hid.HidD_FreePreparsedData(System.IntPtr)">
 <summary>releases the resources that the HID class driver allocated to hold a top-level collection's preparsed data.</summary>
 <param name="PreparsedData">Pointer to the buffer, returned by <see cref="M:Tools.API.Hid.HidD_GetPreparsedData(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr@)"/>, that is freed.</param>
 <returns>TRUE if it succeeds. Otherwise, it returns FALSE if the buffer was not a preparsed data buffer.</returns>
</member>
<member name="M:Tools.API.Hid.HidD_GetPreparsedData(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IntPtr@)">
 <summary>returns a top-level collection's preparsed data.</summary>
 <param name="HidDeviceObject">Specifies an open handle to a top-level collection.</param>
 <param name="PreparsedData">Pointer to the address of a routine-allocated buffer that contains a collection's preparsed data in a _HIDP_PREPARSED_DATA structure.</param>
 <returns>TRUE if it succeeds; otherwise, it returns FALSE.</returns>
 <remarks>When an application no longer requires the preparsed data, it should call <see cref="M:Tools.API.Hid.HidD_FreePreparsedData(System.IntPtr)"/> to free the preparsed data buffer.</remarks>
</member>
<member name="M:Tools.API.Hid.HidP_GetCaps(System.IntPtr,Tools.API.Hid.HIDP_CAPS@)">
 <summary>returns a top-level collection's <see cref="T:Tools.API.Hid.HIDP_CAPS"/> structure.</summary>
 <param name="PreparsedData">Pointer to a top-level collection's preparsed data.</param>
 <param name="Capabilities">Pointer to a caller-allocated buffer that the routine uses to return a collection's <see cref="T:Tools.API.Hid.HIDP_CAPS"/> structure.</param>
 <returns>One of the following values: <see cref="F:Tools.API.Hid.HidErrorCode.HIDP_STATUS_SUCCESS"/>, <see cref="F:Tools.API.Hid.HidErrorCode.HIDP_STATUS_INVALID_PREPARSED_DATA"/>.</returns>
</member>
<member name="T:Tools.API.Hid.HidErrorCode">
 <summary>Error codes returned by some HID functions</summary>
</member>
<member name="F:Tools.API.Hid.HidErrorCode.HIDP_STATUS_SUCCESS">
 <summary>The routine successfully returned the collection capability information.</summary>
</member>
<member name="F:Tools.API.Hid.HidErrorCode.HIDP_STATUS_INVALID_PREPARSED_DATA">
 <summary>The specified preparsed data is invalid.</summary>
</member>
<member name="M:Tools.API.Hid.HidP_GetValueCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)">
 <summary>returns a value capability array that describes all the HID control values in a top-level collection for a specified type of HID report.</summary>
 <param name="ReportType">Specifies a <see cref="T:Tools.API.Hid.HIDP_REPORT_TYPE"/> enumerator value that identifies the report type.</param>
 <param name="ValueCaps">Pointer to a caller-allocated buffer in which the routine returns a value capability array for the specified report type.</param>
 <param name="ValueCapsLength">Specifies the length, on input, in array elements, of the <paramref name="ValueCaps"/> buffer. On output, the routine sets <paramref name="ValueCapsLength"/> to the number of elements that the it actually returns.</param>
 <param name="PreparsedData">Pointer to a top-level collection's preparsed data.</param>
 <returns>One of the following values: <see cref="F:Tools.API.Hid.HidErrorCode.HIDP_STATUS_SUCCESS"/>, <see cref="F:Tools.API.Hid.HidErrorCode.HIDP_STATUS_INVALID_PREPARSED_DATA"/>.</returns>
</member>
<member name="M:Tools.API.Hid.HidP_GetButtonCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)">
 <summary>returns a button capability array that describes all the HID control buttons in a top-level collection for a specified type of HID report.</summary>
 <param name="ReportType">Specifies a <see cref="T:Tools.API.Hid.HIDP_REPORT_TYPE"/> enumerator value that identifies the report type.</param>
 <param name="ButtonCaps">Pointer to a caller-allocated buffer that the routine uses to return a button capability array for the specified report type.</param>
 <param name="ButtonCapsLength">Specifies the length on input, in array elements, of the buffer provided at ButtonCaps. On output, this parameter is set to the actual number of elements that the routine returns.</param>
 <param name="PreparsedData">Pointer to a top-level collection's preparsed data.</param>
 <returns>One of the following values: <see cref="F:Tools.API.Hid.HidErrorCode.HIDP_STATUS_SUCCESS"/>, <see cref="F:Tools.API.Hid.HidErrorCode.HIDP_STATUS_INVALID_PREPARSED_DATA"/>.</returns>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks">
 <summary>Contains API declarations related to Win32 hooks</summary>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks.LowLevelKeyboardProc">
 <summary>Application-defined or library-defined callback function used with the SetWindowsHookEx function. The system calls this function every time a new keyboard input event is about to be posted into a thread input queue. The keyboard input can come from the local keyboard driver or from calls to the keybd_event function. If the input comes from a call to keybd_event, the input was "injected". However, the <see cref="F:Tools.API.Hooks.Win32Hooks.WindowsHook.KEYBOARD_LL"/> hook is not injected into another process. Instead, the context switches back to the process that installed the hook and it is called in its original context. Then the context switches back to the application that generated the event.</summary>
 <param name="nCode">[in] Specifies a code the hook procedure uses to determine how to process the message. If <paramref name="nCode"/> is less than zero, the hook procedure must pass the message to the <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> function without further processing and should return the value returned by <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/>.</param>
 <param name="wParam">[in] Specifies the identifier of the keyboard message. This parameter can be one of the following messages: <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYDOWN"/>, or <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYUP"/>. </param>
 <param name="lParam">[in] Pointer to a <see cref="T:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCT"/> structure. </param>
 <returns>If <paramref name="nCode"/> is less than zero, the hook procedure must return the value returned by <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/>.
 <para>If <paramref name="nCode"/> is greater than or equal to zero, and the hook procedure did not process the message, it is highly recommended that you call <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> and return the value it returns; otherwise, other applications that have installed <see cref="F:Tools.API.Hooks.Win32Hooks.WindowsHook.KEYBOARD_LL"/> hooks will not receive hook notifications and may behave incorrectly as a result. If the hook procedure processed the message, it may return a nonzero value to prevent the system from passing the message to the rest of the hook chain or the target window procedure. </para></returns>
 <remarks><para>An application installs the hook procedure by specifying the <see cref="F:Tools.API.Hooks.Win32Hooks.WindowsHook.KEYBOARD_LL"/> hook type and a pointer to the hook procedure in a call to the <see cref="M:Tools.API.Hooks.Win32Hooks.SetWindowsHookEx(Tools.API.Hooks.Win32Hooks.WindowsHook,Tools.API.Hooks.Win32Hooks.HookProc,System.IntPtr,System.UInt32)"/> function.</para>
 <para>This hook is called in the context of the thread that installed it. The call is made by sending a message to the thread that installed the hook. Therefore, the thread that installed the hook must have a message loop.</para>
 <para>The hook procedure should process a message in less time than the data entry specified in the LowLevelHooksTimeout value in the following registry key:</para>
 <para>HKEY_CURRENT_USER\Control Panel\Desktop</para>
 <para>The value is in milliseconds. If the hook procedure does not return during this interval, the system will pass the message to the next hook.</para>
 <para>Note that debug hooks cannot track this type of hook.</para></remarks>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks.HookProc">
 <summary>Generic hook hendler procedure</summary>
 <param name="nCode">Specifies a code the hook procedure uses to determine how to process the message. If <paramref name="nCode"/> is less than zero, the hook procedure must pass the message to the <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> function without further processing and should return the value returned by <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/>.</param>
 <param name="wParam">[in] Specifies the wParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</param>
 <param name="lParam">[in] Specifies the lParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</param>
 <returns>If <paramref name="nCode"/> is less than zero, the hook procedure must return the value returned by <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/>.
 <para>If <paramref name="nCode"/> is greater than or equal to zero, and the hook procedure did not process the message, it is highly recommended that you call <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> and return the value it returns; otherwise, other applications that have installed this hooks will not receive hook notifications and may behave incorrectly as a result. If the hook procedure processed the message, it may return a nonzero value to prevent the system from passing the message to the rest of the hook chain or the target window procedure. </para></returns>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks.LowLevelKeyboardProcHookCode">
 <summary>Hook codes used by low level keyboard and mouse hooks</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.LowLevelKeyboardProcHookCode.ACTION">
 <summary>The wParam and lParam parameters contain information about a keyboard message.</summary>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks.KeyboardProcHookCode">
 <summary>Hook codes used by keyboard hook</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KeyboardProcHookCode.HC_ACTION">
 <summary>The wParam and lParam parameters contain information about a keystroke message.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KeyboardProcHookCode.HC_NOREMOVE">
 <summary>The wParam and lParam parameters contain information about a keystroke message, and the keystroke message has not been removed from the message queue. (An application called the PeekMessage function, specifying the PM_NOREMOVE flag.)</summary>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks.WindowsHook">
 <summary>Windows hooks IDs</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.CALLWNDPROC">
 <summary>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the <see cref="F:Tools.API.Hooks.Win32Hooks.WindowsHook.CALLWNDPROC"/> hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.CALLWNDPROCRET">
 <summary>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the CallWndRetProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.CBT">
 <summary>Installs a hook procedure that receives notifications useful to a computer-based training (CBT) application. For more information, see the CBTProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.DEBUG">
 <summary>Installs a hook procedure useful for debugging other hook procedures. For more information, see the DebugProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.FOREGROUNDIDLE">
 <summary>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the ForegroundIdleProc hook procedure. </summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.GETMESSAGE">
 <summary>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the GetMsgProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.JOURNALPLAYBACK">
 <summary>Installs a hook procedure that posts messages previously recorded by a <see cref="F:Tools.API.Hooks.Win32Hooks.WindowsHook.JOURNALRECORD"/> hook procedure. For more information, see the JournalPlaybackProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.JOURNALRECORD">
 <summary>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the JournalRecordProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.KEYBOARD">
 <summary>Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.KEYBOARD_LL">
 <summary>Windows NT/2000/XP: Installs a hook procedure that monitors low-level keyboard input events. For more information, see the <see cref="T:Tools.API.Hooks.Win32Hooks.LowLevelKeyboardProc"/> hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.MOUSE">
 <summary>Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.MOUSE_LL">
 <summary>Windows NT/2000/XP: Installs a hook procedure that monitors low-level mouse input events. For more information, see the LowLevelMouseProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.MSGFILTER">
 <summary>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the MessageProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.SHELL">
 <summary>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the ShellProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.WindowsHook.SYSMSGFILTER">
 <summary>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the SysMsgProc hook procedure.</summary>
</member>
<member name="M:Tools.API.Hooks.Win32Hooks.SetWindowsHookEx(Tools.API.Hooks.Win32Hooks.WindowsHook,Tools.API.Hooks.Win32Hooks.HookProc,System.IntPtr,System.UInt32)">
 <summary>Installs an application-defined hook procedure into a hook chain. You would install a hook procedure to monitor the system for certain types of events. These events are associated either with a specific thread or with all threads in the same desktop as the calling thread.</summary>
 <param name="idHook">Specifies the type of hook procedure to be installed.</param>
 <param name="lpfn">[in] Pointer to the hook procedure. If the <paramref name="dwThreadId"/> parameter is zero or specifies the identifier of a thread created by a different process, the lpfn parameter must point to a hook procedure in a DLL. Otherwise, lpfn can point to a hook procedure in the code associated with the current process. </param>
 <param name="hMod">[in] Handle to the DLL containing the hook procedure pointed to by the lpfn parameter. The hMod parameter must be set to NULL if the <paramref name="dwThreadId"/> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.</param>
 <param name="dwThreadId">[in] Specifies the identifier of the thread with which the hook procedure is to be associated. If this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread.</param>
 <returns>If the function succeeds, the return value is the handle to the hook procedure. If the function fails, the return value is NULL.</returns>
</member>
<member name="M:Tools.API.Hooks.Win32Hooks.UnhookWindowsHookEx(System.IntPtr)">
 <summary>Removes a hook procedure installed in a hook chain by the <see cref="M:Tools.API.Hooks.Win32Hooks.SetWindowsHookEx(Tools.API.Hooks.Win32Hooks.WindowsHook,Tools.API.Hooks.Win32Hooks.HookProc,System.IntPtr,System.UInt32)"/> function. </summary>
 <param name="hhk">[in] Handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to <see cref="M:Tools.API.Hooks.Win32Hooks.SetWindowsHookEx(Tools.API.Hooks.Win32Hooks.WindowsHook,Tools.API.Hooks.Win32Hooks.HookProc,System.IntPtr,System.UInt32)"/>. </param>
 <returns>If the function succeeds, the return value is true. If the function fails, the return value is zero.</returns>
</member>
<member name="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
 <summary>Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.</summary>
 <param name="hhk">[in] Windows 95/98/ME: Handle to the current hook. An application receives this handle as a result of a previous call to the <see cref="M:Tools.API.Hooks.Win32Hooks.SetWindowsHookEx(Tools.API.Hooks.Win32Hooks.WindowsHook,Tools.API.Hooks.Win32Hooks.HookProc,System.IntPtr,System.UInt32)"/> function.
 <para>Windows NT/XP/2003: Ignored.</para></param>
 <param name="nCode">[in] Specifies the hook code passed to the current hook procedure. The next hook procedure uses this code to determine how to process the hook information.</param>
 <param name="wParam">[in] Specifies the wParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</param>
 <param name="lParam">[in] Specifies the lParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</param>
 <returns>This value is returned by the next hook procedure in the chain. The current hook procedure must also return this value. The meaning of the return value depends on the hook type. For more information, see the descriptions of the individual hook procedures.</returns>
 <remarks>Hook procedures are installed in chains for particular hook types. <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> calls the next hook in the chain.
 <para>Calling <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> is optional, but it is highly recommended; otherwise, other applications that have installed hooks will not receive hook notifications and may behave incorrectly as a result. You should call <see cref="M:Tools.API.Hooks.Win32Hooks.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)"/> unless you absolutely need to prevent the notification from being seen by other applications.</para></remarks>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCT">
 <summary>Contains information about a low-level keyboard input event. </summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCT.vkCode">
 <summary>Specifies a virtual-key code. The code must be a value in the range 1 to 254. </summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCT.scanCode">
 <summary>Specifies a hardware scan code for the key.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCT.flags">
 <summary>Specifies the extended-key flag, event-injected flag, context code, and transition-state flag.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCT.time">
 <summary>Specifies the time stamp for this message, equivalent to what GetMessageTime would return for this message.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCT.dwExtraInfo">
 <summary>Specifies extra information associated with the message. </summary>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCTFlags">
 <summary><see cref="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCT.flags"/> masks</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCTFlags.LLKHF_EXTENDED">
 <summary>Specifies whether the key is an extended key, such as a function key or a key on the numeric keypad. The value is 1 if the key is an extended key; otherwise, it is 0.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCTFlags.LLKHF_INJECTED">
 <summary>Specifies whether the event was injected. The value is 1 if the event was injected; otherwise, it is 0.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCTFlags.LLKHF_ALTDOWN">
 <summary>Specifies the context code. The value is 1 if the ALT key is pressed; otherwise, it is 0.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCTFlags.LLKHF_UP">
 <summary>Specifies the transition state. The value is 0 if the key is pressed and 1 if it is being released.</summary>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT">
 <summary>Contains information about a low-level keyboard input event. </summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.pt">
 <summary>Specifies a POINT structure that contains the x- and y-coordinates of the cursor, in screen coordinates. </summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.mouseData">
 <summary><para>If the message is WM_MOUSEWHEEL, the high-order word of this member is the wheel delta. The low-order word is reserved. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120.</para>
 <para>If the message is WM_XBUTTONDOWN, WM_XBUTTONUP, WM_XBUTTONDBLCLK, WM_NCXBUTTONDOWN, WM_NCXBUTTONUP, or WM_NCXBUTTONDBLCLK, the high-order word specifies which X button was pressed or released, and the low-order word is reserved. This value can be one or more of the following values. Otherwise, mouseData is not used.</para></summary>
</member>
<member name="P:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.mouseData_high">
 <summary>Gets high word of <see cref="F:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.mouseData"/>. wheel delta, x button number</summary>
</member>
<member name="P:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.mouseData_low">
 <summary>Gets low word of <see cref="F:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.mouseData"/></summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.flags">
 <summary>Specifies the event-injected flag.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.time">
 <summary>Specifies the time stamp for this message. </summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.dwExtraInfo">
 <summary>Specifies extra information associated with the message. </summary>
</member>
<member name="T:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCTFlags">
 <summary><see cref="F:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT.flags"/> values</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCTFlags.LLMHF_INJECTED">
 <summary>Specifies whether the event was injected. The value is 1 if the event was injected; otherwise, it is 0.</summary>
</member>
<member name="T:Tools.API.Hooks.Win32Hook">
 <summary>Base class for classes used to handle Win32 hooks</summary>
 <remarks>It is highly recomended not to install multiple hooks of same type in one application and to keep hook-handling code as quick as possible. You can significantly slow down user typing experience.
 <para>This class uses Win32 API function SetWindowsHookEx().</para>
 <para>.NET framework basically does not support global hooks to be installed. Mouse and keyboard low-level hooks implemented in <see cref="T:Tools.DevicesT.LowLevelMouseHook"/> and <see cref="T:Tools.DevicesT.LowLevelKeyboardHook"/> are the only exception.
 In case you'll implement hook for example for WH_KEYBOARD, you will receive callbacks only as long as your application will be foreground one. The only workaround to this limitation is to have callback function in unmanaged DLL.</para>
 <para>For more informations see <a href="http://msdn.microsoft.com/en-us/library/ms644990(VS.85).aspx">SetWindowsHookEx Function</a><a href="http://www.codeproject.com/KB/cs/globalhook.aspx?df=90&amp;fid=57596&amp;mpp=25&amp;noise=3&amp;sort=Position&amp;view=Quick&amp;fr=26">Processing Global Mouse and Keyboard Hooks in C#</a> and <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;318804">How to set a Windows hook in Visual C# .NET</a>.</para></remarks>
</member>
<member name="F:Tools.API.Hooks.Win32Hook._HookHandle">
 <summary>Contains value of the <see cref="P:Tools.API.Hooks.Win32Hook.HookHandle"/> property</summary>
</member>
<member name="P:Tools.API.Hooks.Win32Hook.HookHandle">
 <summary>Gets handle of current hook if it is registered</summary>
 <returns>Handle of current hook if it is registered; <see cref="F:System.IntPtr.Zero"/> otherwise</returns>
</member>
<member name="P:Tools.API.Hooks.Win32Hook.Registered">
 <summary>Gets value indicating if hook is registered for this instance</summary>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.RegisterHook">
 <summary>Registers a low-level keyboard hook, so keyboard events are obtained by this class.</summary>
 <exception cref="T:System.InvalidOperationException">Hook was already registered for this instance (<see cref="P:Tools.API.Hooks.Win32Hook.Registered"/> is true)</exception>
 <exception cref="T:Tools.API.Win32APIException">An error ocured while obtaining the hook.</exception>
 <exception cref="T:System.ObjectDisposedException"><see cref="P:Tools.API.Hooks.Win32Hook.IsDisposed"/> is true</exception>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.RegisterHookInternal(System.Boolean)">
 <summary>Registers a low-level keyboard hook, so keyboard events are obtained by this class.</summary>
 <exception cref="T:System.InvalidOperationException">Hook was already registered for this instance (<see cref="P:Tools.API.Hooks.Win32Hook.Registered"/> is true)</exception>
 <exception cref="T:Tools.API.Win32APIException">An error ocured while obtaining the hook.</exception>
 <exception cref="T:System.ObjectDisposedException"><see cref="P:Tools.API.Hooks.Win32Hook.IsDisposed"/> is true</exception>
 <param name="IsAsync">True when hook is registered from another thread</param>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.GetModuleHandle">
 <summary>If implemented in derived class gets module handle pased to hMod parameter of SetWindowsHookEx Win32 API function</summary>
 <returns>This implementation returns <see cref="F:System.IntPtr.Zero"/></returns>
 <remarks>For some types of hooks it may be necesary to return correct module ID from this method, while another kinds works with <see cref="F:System.IntPtr.Zero"/></remarks>
 <seelaso cref="M:Tools.API.Hooks.Win32Hook.GetModuleHandleFromType(System.Type)"/>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.GetModuleHandleFromType(System.Type)">
 <summary>Gets module handle for given type</summary>
 <param name="Type">Type to get handle of mudule for</param>
 <returns>Handle to mudule in which type <paramref name="Type"/> is defined.</returns>
 <remarks>You can use this function as return value of <see cref="M:Tools.API.Hooks.Win32Hook.GetModuleHandle"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <exception cref="T:Tools.API.Win32APIException">Error while obtaining module handle.</exception>
 <seealso cref="M:Tools.API.Hooks.Win32Hook.GetModuleHandle"/>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.dHookProcInternal">
 <summary>Delegate to <see cref="M:Tools.API.Hooks.Win32Hook.HookProcInternal(System.Int32,System.IntPtr,System.IntPtr)"/></summary>
</member>
<member name="P:Tools.API.Hooks.Win32Hook.HandledHookType">
 <summary>If overriden in derived class gets type of hook represented by derived class</summary>
 <returns>One of values accepted for SetWindowsHookEx idHook parameter</returns>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.HookProc(System.Int32,System.IntPtr,System.IntPtr)">
 <summary>Hook handler procedure. Caled when hook event occures</summary>
 <param name="nCode">Specifies a code the hook procedure uses to determine how to process the message. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx.</param>
 <param name="lParam">Meaning depeds on type of hook</param>
 <param name="wParam">Meaning depends on type of hook</param>
 <returns>If the hook procedure did not process the message, it is highly recomended that you call <see cref="M:Tools.API.Hooks.Win32Hook.CallNextHook(System.Int32,System.IntPtr,System.IntPtr)"/> and return the value it returns; otherwise, other applications that have installed same hooks will not receive hook notifications and may behave incorrectly as a result.
 If the hook procedure processed the message, it may return a nonzero value to prevent the system from passing the message to the rest of the hook chain or the target window procedure.</returns>
 <remarks>Base class never calls this method when <paramref name="nCode"/> is negative.</remarks>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.HookProcInternal(System.Int32,System.IntPtr,System.IntPtr)">
 <summary>Hook handler procedure. Caled when hook event occures</summary>
 <param name="nCode">Specifies a code the hook procedure uses to determine how to process the message. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx.</param>
 <param name="lParam">Meaning depeds on type of hook</param>
 <param name="wParam">Meaning depends on type of hook</param>
 <returns>If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx.
 <para>If nCode is greater than or equal to zero, and the hook procedure did not process the message, it is highly recommended that you call <see cref="M:Tools.API.Hooks.Win32Hook.CallNextHook(System.Int32,System.IntPtr,System.IntPtr)"/> and return the value it returns; otherwise, other applications that have installed same hooks will not receive hook notifications and may behave incorrectly as a result.
 If the hook procedure processed the message, it may return a nonzero value to prevent the system from passing the message to the rest of the hook chain or the target window procedure. </para></returns>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.CallNextHook(System.Int32,System.IntPtr,System.IntPtr)">
 <summary>The CallNextHookEx function passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.</summary>
 <param name="nCode">[in] Specifies the hook code passed to the current hook procedure. The next hook procedure uses this code to determine how to process the hook information.</param>
 <param name="wParam">[in] Specifies the wParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</param>
 <param name="lParam">[in] Specifies the lParam value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</param>
 <returns>This value is returned by the next hook procedure in the chain. The current hook procedure must also return this value. The meaning of the return value depends on the hook type. For more information, see the descriptions of the individual hook procedures.</returns>
 <remarks>Hook procedures are installed in chains for particular hook types. CallNextHookEx calls the next hook in the chain.
 <para>Calling CallNextHookEx is optional, but it is highly recommended; otherwise, other applications that have installed hooks will not receive hook notifications and may behave incorrectly as a result. You should call CallNextHookEx unless you absolutely need to prevent the notification from being seen by other applications.</para></remarks>
</member>
<member name="T:Tools.API.Hooks.Win32Hook.HookType">
 <summary>Identifies Win32 hooks</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.CallWndProc">
 <summary>Installs a hook procedure that monitors messages before the system sends them to the destination window procedure. For more information, see the CallWndProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.CallWndProcRet">
 <summary>Installs a hook procedure that monitors messages after they have been processed by the destination window procedure. For more information, see the CallWndRetProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.ComputerBasedTraining">
 <summary>Installs a hook procedure that receives notifications useful to a computer-based training (CBT) application. For more information, see the CBTProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.Debug">
 <summary>Installs a hook procedure useful for debugging other hook procedures. For more information, see the DebugProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.ForegroundIddle">
 <summary>Installs a hook procedure that will be called when the application's foreground thread is about to become idle. This hook is useful for performing low priority tasks during idle time. For more information, see the ForegroundIdleProc hook procedure. </summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.GetMessage">
 <summary>Installs a hook procedure that monitors messages posted to a message queue. For more information, see the GetMsgProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.JournalPlayback">
 <summary>Installs a hook procedure that posts messages previously recorded by a WH_JOURNALRECORD hook procedure. For more information, see the JournalPlaybackProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.JournalRecord">
 <summary>Installs a hook procedure that records input messages posted to the system message queue. This hook is useful for recording macros. For more information, see the JournalRecordProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.Keyboard">
 <summary>Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.LowLevelKeyboard">
 <summary>Windows NT/2000/XP: Installs a hook procedure that monitors low-level keyboard input events. For more information, see the LowLevelKeyboardProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.Mouse">
 <summary>Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.LowLevelMouse">
 <summary>Windows NT/2000/XP: Installs a hook procedure that monitors low-level mouse input events. For more information, see the LowLevelMouseProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.MessageFilter">
 <summary>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. For more information, see the MessageProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.Shell">
 <summary>Installs a hook procedure that receives notifications useful to shell applications. For more information, see the ShellProc hook procedure.</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookType.SysMessageFilter">
 <summary>Installs a hook procedure that monitors messages generated as a result of an input event in a dialog box, message box, menu, or scroll bar. The hook procedure monitors these messages for all applications in the same desktop as the calling thread. For more information, see the SysMsgProc hook procedure.</summary>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.UnregisterHook">
 <summary>Unregisters registered hook for this instance</summary>
 <exception cref="T:System.InvalidOperationException">Hook is not registered for this instance (<see cref="P:Tools.API.Hooks.Win32Hook.Registered"/> is false).</exception>
 <exception cref="T:Tools.API.Win32APIException">Hook unregistration failed</exception>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.UnregisterHookInternalCore(System.Boolean)">
 <summary>Unregisters the hook if this instance has registered it.</summary>
 <param name="ThrowException">True to throwan exception when hook unregistration fails</param>
 <exception cref="T:Tools.API.Win32APIException"><paramref name="ThrowException"/> is true and hook unregistration failed</exception>
</member>
<member name="F:Tools.API.Hooks.Win32Hook._IsAsync">
 <summary>Contains value of the <see cref="P:Tools.API.Hooks.Win32Hook.IsAsync"/> property</summary>
</member>
<member name="P:Tools.API.Hooks.Win32Hook.IsAsync">
 <summary>Gets value indicating if hook events occur on different thread than hook was registered.</summary>
 <returns>True when <see cref="M:Tools.API.Hooks.Win32Hook.HookProc(System.Int32,System.IntPtr,System.IntPtr)"/> is called on different thread that hook was registered.</returns>
 <remarks>Has no meaning when <see cref="P:Tools.API.Hooks.Win32Hook.Registered"/> is false</remarks>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.HookThread">
 <summary>In case this hook is asynchronous contains reference to hook thread</summary>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.RegisterAsyncHook">
 <summary>Registers a low-level keyboard hook on curent thread. The thread will be exited when hook is unregistered.</summary>
 <exception cref="T:System.InvalidOperationException">Hook was already registered for this instance (<see cref="P:Tools.API.Hooks.Win32Hook.Registered"/> is true)</exception>
 <exception cref="T:Tools.API.Win32APIException">An error ocured while obtaining the hook.</exception>
 <exception cref="T:System.ObjectDisposedException"><see cref="P:Tools.API.Hooks.Win32Hook.IsDisposed"/> is true</exception>
 <remarks>When hok is registered as asynchronous the <see cref="M:Tools.API.Hooks.Win32Hook.HookProc(System.Int32,System.IntPtr,System.IntPtr)"/> function is called in special thread. You can use this approach to handle the event in your form and use <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)"/> to run event-handling code. The code then does not block keyboard hook which immediately returns.</remarks>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.AsyncAppContext">
 <summary>Application context used when hooks are obtained for separate thread</summary>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.RegisterAsyncHookInternal">
 <summary>Registers a low-level keyboard hook on curent thread. The thread is another thread than hook registrator thread.</summary>
 <exception cref="T:System.InvalidOperationException">Hook was already registered for this instance (<see cref="P:Tools.API.Hooks.Win32Hook.Registered"/> is true)</exception>
 <exception cref="T:Tools.API.Win32APIException">An error ocured while obtaining the hook.</exception>
 <exception cref="T:System.ObjectDisposedException"><see cref="P:Tools.API.Hooks.Win32Hook.IsDisposed"/> is true</exception>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.UnregisterHookInternalAsync(System.Boolean)">
 <summary>Unregisters assynchronously registered hook</summary>
 <param name="ThrowException">True to throwan exception when hook unregistration fails</param>
 <exception cref="T:Tools.API.Win32APIException"><paramref name="ThrowException"/> is true and hook unregistration failed</exception>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.UnregisterHookInternal(System.Boolean)">
 <summary>Unregisters the hook if this instance has registered it</summary>
 <param name="ThrowException">True to throwan exception when hook unregistration fails</param>
 <exception cref="T:Tools.API.Win32APIException"><paramref name="ThrowException"/> is true and hook unregistration failed</exception>
</member>
<member name="P:Tools.API.Hooks.Win32Hook.IsDisposed">
 <summary>Gets value indicating if this instance was already disposed</summary>
</member>
<member name="F:Tools.API.Hooks.Win32Hook.disposedValue">
 <summary>Contains value of the <see cref="P:Tools.API.Hooks.Win32Hook.IsDisposed"/> property</summary>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.Dispose(System.Boolean)">
 <summary>Implements <see cref="M:System.IDisposable.Dispose"/></summary>
 <param name="disposing">True to free managed state</param>
 <remarks>Note for inheritoers: ALways call base class method to didpose its state and raise the <see cref="E:Tools.API.Hooks.Win32Hook.Disposed"/> event</remarks>
</member>
<member name="M:Tools.API.Hooks.Win32Hook.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
</member>
<member name="E:Tools.API.Hooks.Win32Hook.Disposed">
 <summary>Raised when object is disposed</summary>
</member>
<member name="T:Tools.API.Win32APIException">
 <summary>Generic exception caused by Win32 API</summary>
</member>
<member name="M:Tools.API.Win32APIException.#ctor(System.Int32)">
 <summary>CTor with error number</summary>
 <param name="Number">Error number</param>
</member>
<member name="M:Tools.API.Win32APIException.#ctor">
 <summary>CTor - error number will be obtained automatically via <see cref="M:Tools.API.Common.GetLastError"/></summary>
</member>
<member name="M:Tools.API.Win32APIException.GetLastWin32Exception">
 <summary>Gets exception for error caused by last Win32 API call</summary>
 <returns>Exception obtained via <see cref="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)"/>(<see cref="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error"/>)</returns>
</member>
<member name="M:Tools.API.Win32APIException.GetLastWin32Exception``1">
 <summary>Gets exception for error caused by last Win32 API call</summary>
 <typeparam name="T">Type of exception to be returned</typeparam>
 <returns>Obtains exception using non-generic <see cref="M:Tools.API.Win32APIException.GetLastWin32Exception"/> function.
 It the exception returned is <typeparamref name="T"/> or derives from <typeparamref name="T"/> returns it; otherwise returns new instance of <see cref="T:Tools.API.Win32APIException"/>.</returns>
</member>
<member name="T:Tools.API.Common">
 <summary>Common Win32 API declarations</summary>
</member>
<member name="M:Tools.API.Common.SetLastError(System.Int32)">
 <summary>Sets the last-error code for the calling thread.</summary>
 <param name="dwErrCode">The last-error code for the thread.</param>
</member>
<member name="F:Tools.API.Common.ERROR_SUCCESS">
 <summary>Error code that indicates no error</summary>
</member>
<member name="F:Tools.API.Common.NULL">
 <summary>Value representing NULL</summary>
</member>
<member name="T:Tools.API.Common.APIBool">
 <summary>Boolean type as used in Win32 API</summary>
</member>
<member name="F:Tools.API.Common.APIBool.TRUE">
 <summary>True</summary>
</member>
<member name="F:Tools.API.Common.APIBool.FALSE">
 <summary>False</summary>
</member>
<member name="M:Tools.API.Common.GetLastError">
 <summary>Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis. Multiple threads do not overwrite each other's last-error code.</summary>
 <returns>The return value is the calling thread's last-error code.
 <para>The Return Value section of the documentation for each function that sets the last-error code notes the conditions under which the function sets the last-error code. Most functions that set the thread's last-error code set it when they fail. However, some functions also set the last-error code when they succeed. If the function is not documented to set the last-error code, the value returned by this function is simply the most recent last-error code to have been set; some functions set the last-error code to 0 on success and others do not.</para>
 <para>Windows Me/98/95:  Functions that are actually implemented in 16-bit code do not set the last-error code. You should ignore the last-error code when you call these functions. They include window management functions, GDI functions, and Multimedia functions. For functions that do set the last-error code, you should not rely on GetLastError returning the same value as it does under other versions of System.Windows.</para></returns>
 <remarks>Visual Basic:  Applications should call <see cref="P:Microsoft.VisualBasic.ErrObject.LastDllError"/> of <see cref="M:Microsoft.VisualBasic.Information.Err"/> instead of <see cref="M:Tools.API.Common.GetLastError"/>.
 <para>Use <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> instead.</para></remarks>
</member>
<member name="M:Tools.API.Common.FormatMessage(Tools.API.Common.FormatMessageFlags,System.Int32@,System.Int32,Tools.API.Common.Languages,System.String@,System.Int32,System.Int32@)">
 <summary>Formats a message string. The function requires a message definition as input. The message definition can come from a buffer passed into the function. It can come from a message table resource in an already-loaded module. Or the caller can ask the function to search the system's message table resource(s) for the message definition. The function finds the message definition in a message table resource based on a message identifier and a language identifier. The function copies the formatted message text to an output buffer, processing any embedded insert sequences if requested.</summary>
 <param name="dwFlags">The formatting options, and how to interpret the lpSource parameter. The low-order byte of dwFlags specifies how the function handles line breaks in the output buffer. The low-order byte can also specify the maximum width of a formatted output line. This parameter can be one or more of enumerated values. If the low-order byte is a nonzero value other than FORMAT_MESSAGE_MAX_WIDTH_MASK, it specifies the maximum number of characters in an output line. The function ignores regular line breaks in the message definition text. The function never splits a string delimited by white space across a line break. The function stores hard-coded line breaks in the message definition text into the output buffer. Hard-coded line breaks are coded with the %n escape sequence.</param>
 <param name="lpSource">The location of the message definition. The type of this parameter depends upon the settings in the dwFlags parameter. 
 <para><see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_HMODULE"/>: A handle to the module that contains the message table to search.</para>
 <para><see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_STRING"/>: Pointer to a string that consists of unformatted message text. It will be scanned for inserts and formatted accordingly.</para></param>
 <param name="dwMessageId">The message identifier for the requested message. This parameter is ignored if dwFlags includes FORMAT_MESSAGE_FROM_STRING. </param>
 <param name="dwLanguageId">The language identifier for the requested message. This parameter is ignored if dwFlags includes FORMAT_MESSAGE_FROM_STRING. 
 If you pass a specific LANGID in this parameter, FormatMessage will return a message for that LANGID only. If the function cannot find a message for that LANGID, it returns ERROR_RESOURCE_LANG_NOT_FOUND. If you pass in zero, FormatMessage looks for a message for LANGIDs in the following order:
 <list><item>Language neutral</item>
 <item>Thread LANGID, based on the thread's locale value</item> 
 <item>User default LANGID, based on the user's default locale value</item> 
 <item>System default LANGID, based on the system default locale value</item> 
 <item>US English</item> 
 </list>
 If FormatMessage does not locate a message for any of the preceding LANGIDs, it returns any language message string that is present. If that fails, it returns ERROR_RESOURCE_LANG_NOT_FOUND.
 </param>
 <param name="lpBuffer">[out] A pointer to a buffer that receives the null-terminated string that specifies the formatted message. If dwFlags includes <see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/>, the function allocates a buffer using the LocalAlloc function, and places the pointer to the buffer at the address specified in lpBuffer. This buffer cannot be larger than 64K bytes.</param>
 <param name="nSize">If the <see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER"/> flag is not set, this parameter specifies the size of the output buffer, in TCHARs. If FORMAT_MESSAGE_ALLOCATE_BUFFER is set, this parameter specifies the minimum number of TCHARs to allocate for an output buffer. The output buffer cannot be larger than 64K bytes.</param>
 <param name="Arguments">An array of values that are used as insert values in the formatted message. A %1 in the format string indicates the first value in the Arguments array; a %2 indicates the second argument; and so on.  The interpretation of each value depends on the formatting information associated with the insert in the message definition. The default is to treat each value as a pointer to a null-terminated string. By default, the Arguments parameter is of type va_list*, which is a language- and implementation-specific data type for describing a variable number of arguments. The state of the va_list argument is undefined upon return from the function. If the caller is to use the va_list again, it must destroy the variable argument list pointer using va_end and reinitialize it with va_start. If you do not have a pointer of type va_list*, then specify the FORMAT_MESSAGE_ARGUMENT_ARRAY flag and pass a pointer to an array of DWORD_PTR values; those values are input to the message formatted as the insert values. Each insert must have a corresponding element in the array.</param>
 <returns>If the function succeeds, the return value is the number of TCHARs stored in the output buffer, excluding the terminating null character. If the function fails, the return value is zero. To get extended error information, call <see cref="M:Tools.API.Common.GetLastError"/>.</returns>
 <remarks>Within the message text, several escape sequences are supported for dynamically formatting the message. These escape sequences and their meanings are shown in the following table. All escape sequences start with the percent character (%).</remarks>
</member>
<member name="T:Tools.API.Common.FormatMessageFlags">
 <summary>Flags for the <see cref="M:Tools.API.Common.FormatMessage(Tools.API.Common.FormatMessageFlags,System.Int32@,System.Int32,Tools.API.Common.Languages,System.String@,System.Int32,System.Int32@)"/> function</summary>
 <remarks>If the low-order byte is a nonzero value other than <see cref="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_MAX_WIDTH_MASK"/>, it specifies the maximum number of characters in an output line. The function ignores regular line breaks in the message definition text. The function never splits a string delimited by white space across a line break. The function stores hard-coded line breaks in the message definition text into the output buffer. Hard-coded line breaks are coded with the %n escape sequence.</remarks>
</member>
<member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_ALLOCATE_BUFFER">
 <summary>The lpBuffer parameter is a pointer to a PVOID pointer, and that the nSize parameter specifies the minimum number of TCHARs to allocate for an output message buffer. The function allocates a buffer large enough to hold the formatted message, and places a pointer to the allocated buffer at the address specified by lpBuffer. The caller should use the LocalFree function to free the buffer when it is no longer needed.</summary>
</member>
<member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_ARGUMENT_ARRAY">
 <summary>Arguments parameter is not a va_list structure, but is a pointer to an array of values that represent the arguments. This flag cannot be used with 64-bit integer values. If you are using a 64-bit integer, you must use the va_list structure.</summary>
</member>
<member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_HMODULE">
 <summary>The lpSource parameter is a module handle containing the message-table resource(s) to search. If this lpSource handle is NULL, the current process's application image file will be searched. Cannot be used with FORMAT_MESSAGE_FROM_STRING. If the module has no message table resource, the function fails with ERROR_RESOURCE_TYPE_NOT_FOUND.</summary>
</member>
<member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_STRING">
 <summary>The lpSource parameter is a pointer to a null-terminated message definition. The message definition may contain insert sequences, just as the message text in a message table resource may. Cannot be used with FORMAT_MESSAGE_FROM_HMODULE or FORMAT_MESSAGE_FROM_SYSTEM.</summary>
</member>
<member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_FROM_SYSTEM">
 <summary>The function should search the system message-table resource(s) for the requested message. If this flag is specified with FORMAT_MESSAGE_FROM_HMODULE, the function searches the system message table if the message is not found in the module specified by lpSource. Cannot be used with FORMAT_MESSAGE_FROM_STRING. If this flag is specified, an application can pass the result of the GetLastError function to retrieve the message text for a system-defined error.</summary>
</member>
<member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_IGNORE_INSERTS">
 <summary>Insert sequences in the message definition are to be ignored and passed through to the output buffer unchanged. This flag is useful for fetching a message for later formatting. If this flag is set, the Arguments parameter is ignored.</summary>
</member>
<member name="F:Tools.API.Common.FormatMessageFlags.Zero">
 <summary>There are no output line width restrictions. The function stores line breaks that are in the message definition text into the output buffer.</summary>
</member>
<member name="F:Tools.API.Common.FormatMessageFlags.FORMAT_MESSAGE_MAX_WIDTH_MASK">
 <summary>The function ignores regular line breaks in the message definition text. The function stores hard-coded line breaks in the message definition text into the output buffer. The function generates no new line breaks.</summary>
</member>
<member name="M:Tools.API.Common.LastDllErrorInfo">
 <summary>Gets inforemation about error in last API call</summary>
 <returns>Description of error</returns>
</member>
<member name="M:Tools.API.Common.LastDllErrorInfo(System.Int32)">
 <summary>Gets information about error with specified number</summary>
 <param name="ErrN">Number of error</param>
 <returns>Description of error</returns>
</member>
<member name="T:Tools.API.Common.Languages">
 <summary>Langauage constants used by various API functions</summary>
</member>
<member name="F:Tools.API.Common.Languages.LANG_NEUTRAL">
 <summary>Neutral language</summary>
</member>
<member name="F:Tools.API.Common.Languages.SUBLANG_DEFAULT">
 <summary>Default sublanguage</summary>
</member>
<member name="M:Tools.API.Common.GetModuleHandle(System.String@)">
 <summary>Retrieves a module handle for the specified module. The module must have been loaded by the calling process.</summary>
 <param name="lpModuleName">The name of the loaded module (either a .dll or .exe file). If the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.
 <para>If this parameter is NULL, GetModuleHandle returns a handle to the file used to create the calling process (.exe file).</para>
 <para>The GetModuleHandle function does not retrieve handles for modules that were loaded using the LOAD_LIBRARY_AS_DATAFILE flag. For more information, see LoadLibraryEx.</para></param>
 <returns>If the function succeeds, the return value is a handle to the specified module.
 <para>If the function fails, the return value is NULL.</para></returns>
</member>
<member name="T:Tools.API.Common.Errors">
 <summary>Contains some of error codes returned by Win32 API functions</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_INSUFFICIENT_BUFFER">
 <summary>Target buffer has not enough space for all items that are about to be placed in it</summary>
</member>
<member name="F:Tools.API.Common.Errors.INVALID_HANDLE_VALUE">
 <summary>Invalid handle. Returned when handle is expected to be returned but no hande was created.</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_ALREADY_EXISTS">
 <summary>File already exists</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_FILE_NOT_FOUND">
 <summary>File not found</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_FILE_EXISTS">
 <summary>File exists</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_PATH_NOT_FOUND">
 <summary>The specified path was not found.</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_DDE_FAIL">
 <summary>The Dynamic Data Exchange (DDE) transaction failed.</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_NO_ASSOCIATION">
 <summary>There is no application associated with the given file name extension.</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_ACCESS_DENIED">
 <summary>Access to the specified file is denied.</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_DLL_NOT_FOUND">
 <summary>One of the library files necessary to run the application can't be found.</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_CANCELLED">
 <summary>The function prompted the user for additional information, but the user canceled the request.</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_NOT_ENOUGH_MEMORY">
 <summary>There is not enough memory to perform the specified action.</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_SHARING_VIOLATION">
 <summary>A sharing violation occurred.</summary>
</member>
<member name="F:Tools.API.Common.Errors.NERR_Success">
 <summary>Operation succeeded - no error</summary>
</member>
<member name="F:Tools.API.Common.Errors.ERROR_MORE_DATA">
 <summary>More data available. Enumeration should continue.</summary>
</member>
<member name="M:Tools.API.Common.LoadLibrary(System.String@)">
 <summary>Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.</summary>
 <param name="lpLibFileName"><para>The name of the module. This can be either a library module (a .dll file) or an executable module (an .exe file). The name specified is the file name of the module and is not related to the name stored in the library module itself, as specified by the LIBRARY keyword in the module-definition (.def) file.</para>
 <para>If the string specifies a full path, the function searches only that path for the module.</para>
 <para>If the string specifies a relative path or a module name without a path, the function uses a standard search strategy to find the module; for more information, see the Remarks.</para>
 <para>If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (\), not forward slashes (/). For more information about paths, see Naming a File or Directory.</para>
 <para>If the string specifies a module name without a path and the file name extension is omitted, the function appends the default library extension .dll to the module name. To prevent the function from appending .dll to the module name, include a trailing point character (.) in the module name string.</para></param>
 <returns>If the function succeeds, the return value is a handle to the module. If the function fails, the return value is NULL.</returns>
</member>
<member name="M:Tools.API.Common.FreeLibrary(System.IntPtr)">
 <summary>Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. When the reference count reaches zero, the module is unloaded from the address space of the calling process and the handle is no longer valid.</summary>
 <param name="hLibModule">A handle to the loaded library module. The LoadLibrary, LoadLibraryExGetModuleHandle, or GetModuleHandleEx function returns this handle.</param>
 <returns>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</returns>
</member>
<member name="M:Tools.API.Common.LoadLibraryEx(System.String@,System.IntPtr,Tools.API.Common.LoadLibraryMode)">
 <summary>Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.</summary>
 <param name="lpFileName">A string that specifies the file name of the module to load. This name is not related to the name stored in a library module itself, as specified by the LIBRARY keyword in the module-definition (.def) file.</param>
 <param name="hFile">This parameter is reserved for future use. It must be NULL.</param>
 <param name="dwFlags">The action to be taken when loading the module. If no flags are specified, the behavior of this function is identical to that of the <see cref="M:Tools.API.Common.LoadLibrary(System.String@)"/> function.</param>
 <returns>If the function succeeds, the return value is a handle to the loaded module. If the function fails, the return value is NULL.</returns>
</member>
<member name="M:Tools.API.Common.GetProcAddress(System.IntPtr,System.String)">
 <summary>Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).</summary>
 <param name="hModule">A handle to the DLL module that contains the function or variable. </param>
 <param name="lpProcName">The function or variable name, or the function's ordinal value. If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero.</param>
 <returns>If the function succeeds, the return value is the address of the exported function or variable.</returns>
</member>
<member name="M:Tools.API.Common.FindResource(System.IntPtr,System.String@,System.String@)">
 <summary>Determines the location of a resource with the specified type and name in the specified module.</summary>
 <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function searches the module used to create the current process.</param>
 <param name="lpName">The name of the resource.</param>
 <param name="lpType">The resource type.</param>
 <returns>If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the LoadResource function. If the function fails, the return value is NULL. </returns>
</member>
<member name="M:Tools.API.Common.FindResource(System.IntPtr,System.IntPtr,System.String@)">
 <summary>Determines the location of a resource with the specified type and name in the specified module.</summary>
 <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function searches the module used to create the current process.</param>
 <param name="lpId">ID of the resource.</param>
 <param name="lpType">The resource type.</param>
 <returns>If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the LoadResource function. If the function fails, the return value is NULL. </returns>
</member>
<member name="M:Tools.API.Common.FindResource(System.IntPtr,System.IntPtr,System.IntPtr)">
 <summary>Determines the location of a resource with the specified type and name in the specified module.</summary>
 <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function searches the module used to create the current process.</param>
 <param name="lpId">ID of the resource.</param>
 <param name="lpType">The resource type.</param>
 <returns>If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the LoadResource function. If the function fails, the return value is NULL. </returns>
</member>
<member name="M:Tools.API.Common.FindResource(System.IntPtr,System.String@,System.IntPtr)">
 <summary>Determines the location of a resource with the specified type and name in the specified module.</summary>
 <param name="hModule">A handle to the module whose portable executable file or an accompanying MUI file contains the resource. If this parameter is NULL, the function searches the module used to create the current process.</param>
 <param name="lpName">The name of the resource.</param>
 <param name="lpType">The resource type.</param>
 <returns>If the function succeeds, the return value is a handle to the specified resource's information block. To obtain a handle to the resource, pass this handle to the LoadResource function. If the function fails, the return value is NULL. </returns>
</member>
<member name="M:Tools.API.Common.LoadResource(System.IntPtr,System.IntPtr)">
 <summary>Retrieves a handle that can be used to obtain a pointer to the first byte of the specified resource in memory.</summary>
 <param name="hModule">A handle to the module whose executable file contains the resource. If hModule is NULL, the system loads the resource from the module that was used to create the current process.</param>
 <param name="hResInfo">A handle to the resource to be loaded. This handle is returned by the FindResource or FindResourceEx function.</param>
 <returns>If the function succeeds, the return value is a handle to the data associated with the resource. If the function fails, the return value is NULL.</returns>
 <remarks>It is not necessary to free the resources loaded using <see cref="M:Tools.API.Common.LoadResource(System.IntPtr,System.IntPtr)"/>.</remarks>
</member>
<member name="M:Tools.API.Common.SizeofResource(System.IntPtr,System.IntPtr)">
 <summary>Retrieves the size, in bytes, of the specified resource.</summary>
 <param name="hModule">A handle to the module whose executable file contains the resource.</param>
 <param name="hResInfo">A handle to the resource. This handle must be created by using the FindResource or FindResourceEx function.</param>
 <returns>If the function succeeds, the return value is the number of bytes in the resource. If the function fails, the return value is zero.</returns>
</member>
<member name="M:Tools.API.Common.EnumResourceTypes(System.IntPtr,Tools.API.Common.EnumResTypeProc,System.IntPtr)">
 <summary>Enumerates resource types within a binary module. Starting with Windows Vista, this is typically a language-neutral Portable Executable (LN file), and the enumeration also includes resources from one of the corresponding language-specific resource files (.mui files)—if one exists—that contain localizable language resources. It is also possible to use hModule to specify a .mui file, in which case only that file is searched for resource types.</summary>
 <param name="hModule">A handle to a module to be searched. This handle must be obtained through LoadLibrary or LoadLibraryEx. See Remarks for more information. If this parameter is NULL, that is equivalent to passing in a handle to the module used to create the current process.</param>
 <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource type. For more information, see the <see cref="T:Tools.API.Common.EnumResTypeProc"/> function.</param>
 <param name="lParam">An application-defined value passed to the callback function.</param>
 <returns>Returns TRUE if successful; otherwise, FALSE.</returns>
</member>
<member name="T:Tools.API.Common.EnumResTypeProc">
 <summary>An application-defined callback function used with the EnumResourceTypes and EnumResourceTypesEx functions. It receives resource types. The ENUMRESTYPEPROC type defines a pointer to this callback function. EnumResTypeProc is a placeholder for the application-defined function name.</summary>
 <param name="hModule">A handle to the module whose executable file contains the resources for which the types are to be enumerated. If this parameter is NULL, the function enumerates the resource types in the module used to create the current process.</param>
 <param name="lpszType">The type of resource for which the type is being enumerated.</param>
 <param name="lParam">An application-defined parameter passed to the EnumResourceTypes or EnumResourceTypesEx function. This parameter can be used in error checking.</param>
 <returns>Returns TRUE to continue enumeration or FALSE to stop enumeration.</returns>
</member>
<member name="M:Tools.API.Common.EnumResourceNames(System.IntPtr,System.String,Tools.API.Common.EnumResNameProc,System.IntPtr)">
 <summary>Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a language-neutral Portable Executable (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable language resources. It is also possible for hModule to specify an .mui file, in which case only that file is searched for resources.</summary>
 <param name="hModule">A handle to a module to be searched. Starting with Windows Vista, if this is an LN file, then appropriate .mui files (if any exist) are included in the search. If this parameter is NULL, that is equivalent to passing in a handle to the module used to create the current process.</param>
 <param name="lpszType">The type of the resource for which the name is being enumerated.</param>
 <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name or ID. </param>
 <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
 <returns>The return value is TRUE if the function succeeds or FALSE if the function does not find a resource of the type specified, or if the function fails for another reason.</returns>
</member>
<member name="M:Tools.API.Common.EnumResourceNames(System.IntPtr,System.IntPtr,Tools.API.Common.EnumResNameProc,System.IntPtr)">
 <summary>Enumerates resources of a specified type within a binary module. For Windows Vista and later, this is typically a language-neutral Portable Executable (LN file), and the enumeration will also include resources from the corresponding language-specific resource files (.mui files) that contain localizable language resources. It is also possible for hModule to specify an .mui file, in which case only that file is searched for resources.</summary>
 <param name="hModule">A handle to a module to be searched. Starting with Windows Vista, if this is an LN file, then appropriate .mui files (if any exist) are included in the search. If this parameter is NULL, that is equivalent to passing in a handle to the module used to create the current process.</param>
 <param name="lpszType">The type of the resource for which the name is being enumerated.</param>
 <param name="lpEnumFunc">A pointer to the callback function to be called for each enumerated resource name or ID. </param>
 <param name="lParam">An application-defined value passed to the callback function. This parameter can be used in error checking.</param>
 <returns>The return value is TRUE if the function succeeds or FALSE if the function does not find a resource of the type specified, or if the function fails for another reason.</returns>
</member>
<member name="T:Tools.API.Common.EnumResNameProc">
 <summary>An application-defined callback function used with the EnumResourceNames and EnumResourceNamesEx functions. It receives the type and name of a resource. The ENUMRESNAMEPROC type defines a pointer to this callback function. EnumResNameProc is a placeholder for the application-defined function name.</summary>
 <param name="hModule">A handle to the module whose executable file contains the resources that are being enumerated. If this parameter is NULL, the function enumerates the resource names in the module used to create the current process.</param>
 <param name="lpszType">The type of resource for which the name is being enumerated.</param>
 <param name="lpszName">The name of a resource of the type being enumerated.</param>
 <param name="lParam">An application-defined parameter passed to the EnumResourceNames or EnumResourceNamesEx function. This parameter can be used in error checking.</param>
 <returns>Returns TRUE to continue enumeration or FALSE to stop enumeration.</returns>
</member>
<member name="M:Tools.API.Common.LoadString(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.Int32)">
 <summary>Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character.</summary>
 <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the GetModuleHandle function with NULL.</param>
 <param name="uID">The identifier of the string to be loaded.</param>
 <param name="lpBuffer">The buffer is to receive the string.</param>
 <param name="nBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then lpBuffer receives a read-only pointer to the resource itself.</param>
 <returns>If the function succeeds, the return value is the number of characters copied into the buffer, not including the terminating null character, or zero if the string resource does not exist. </returns>
</member>
<member name="M:Tools.API.Common.LoadString(System.IntPtr,System.UInt32,System.IntPtr,System.Int32)">
 <summary>Loads a string resource from the executable file associated with a specified module, copies the string into a buffer, and appends a terminating null character.</summary>
 <param name="hInstance">A handle to an instance of the module whose executable file contains the string resource. To get the handle to the application itself, call the GetModuleHandle function with NULL.</param>
 <param name="uID">The identifier of the string to be loaded.</param>
 <param name="lpBuffer">The buffer is to receive the string.</param>
 <param name="nBufferMax">The size of the buffer, in characters. The string is truncated and null-terminated if it is longer than the number of characters specified. If this parameter is 0, then lpBuffer receives a read-only pointer to the resource itself.</param>
 <returns>If the function succeeds, the return value is the number of characters copied into the buffer, not including the terminating null character, or zero if the string resource does not exist. </returns>
</member>
<member name="M:Tools.API.Common.IsIntRresource(System.IntPtr)">
 <summary>Determines whether a value is an integer identifier for a resource.</summary>
 <param name="value">he integer value to be tested.</param>
 <returns>If the value is a resource identifier, the return value is TRUE. Otherwise, the return value is FALSE.</returns>
 <remarks>This macro checks whether all bits except the least 16 bits are zero. When true, wInteger is an integer identifier for a resource. Otherwise it is typically a pointer to a string.</remarks>
</member>
<member name="M:Tools.API.Common.GetFileVersionInfoSize(System.String,System.Int32@)">
 <summary>Determines whether the operating system can retrieve version information for a specified file. If version information is available, <see cref="M:Tools.API.Common.GetFileVersionInfoSize(System.String,System.Int32@)"/> returns the size, in bytes, of that information.</summary>
 <param name="lptstrFilename">The name of the file of interest. The function uses the search sequence specified by the <see cref="M:Tools.API.Common.LoadLibrary(System.String@)"/> function.</param>
 <param name="lpdwHandle">A pointer to a variable that the function sets to zero.</param>
 <returns>If the function succeeds, the return value is the size, in bytes, of the file's version information. If the function fails, the return value is zero.</returns>
</member>
<member name="M:Tools.API.Common.GetFileVersionInfo(System.String,System.Int32,System.Int32,System.IntPtr)">
 <summary>Retrieves version information for the specified file.</summary>
 <param name="lptstrFilename">The name of the file. If a full path is not specified, the function uses the search sequence specified by the <see cref="M:Tools.API.Common.LoadLibrary(System.String@)"/> function.</param>
 <param name="dwHandle">This parameter is ignored.</param>
 <param name="dwLen">The size, in bytes, of the buffer pointed to by the <paramref name="lpData"/> parameter.</param>
 <param name="lpData">Pointer to a buffer that receives the file-version information.</param>
 <returns>If the function succeeds, the return value is nonzero.</returns>
</member>
<member name="M:Tools.API.Common.VerQueryValue(System.IntPtr,System.String,System.IntPtr@,System.UInt32@)">
 <summary>Retrieves specified version information from the specified version-information resource.</summary>
 <param name="pBlock">The version-information resource returned by the <see cref="M:Tools.API.Common.GetFileVersionInfo(System.String,System.Int32,System.Int32,System.IntPtr)"/> function.</param>
 <param name="lpSubBlock">The version-information value to be retrieved. The string must consist of names separated by backslashes (\).</param>
 <param name="lplpBuffer">When this method returns, contains the address of a pointer to the requested version information in the buffer pointed to by <paramref name="pBlock"/>.</param>
 <param name="puLen">
 When this method returns, contains a pointer to the size of the requested data pointed to by <paramref name="lplpBuffer"/>:
 for version information values, the length in characters of the string stored at lplpBuffer;
 for translation array values, the size in bytes of the array stored at lplpBuffer;
 and for root block, the size in bytes of the structure.
 </param>
 <returns>
 If the specified version-information structure exists, and version information is available, the return value is nonzero.
 If the address of the length buffer is zero, no value is available for the specified version-information name.
 If the specified name does not exist or the specified resource is not valid, the return value is zero.
 </returns>
</member>
<member name="M:Tools.API.Common.VerLanguageName(System.Int32,System.Text.StringBuilder,System.Int32)">
 <summary>Retrieves a description string for the language associated with a specified binary Microsoft language identifier.</summary>
 <param name="wLang">The binary language identifier.</param>
 <param name="szLang">The language specified by the wLang parameter.</param>
 <param name="cchLang">The size, in characters, of the buffer pointed to by <paramref name="szLang"/>.</param>
 <returns>The return value is the size, in characters, of the string returned in the buffer. This value does not include the terminating null character. If an error occurs, the return value is zero. Unknown language identifiers do not produce errors.</returns>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwSignature">
 <summary>Contains the value 0xFEEF04BD. This is used with the szKey member of the VS_VERSIONINFO structure when searching a file for the <see cref="T:Tools.API.Common.VS_FIXEDFILEINFO"/> structure.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwStrucVersion">
 <summary>The binary version number of this structure. The high-order word of this member contains the major version number, and the low-order word contains the minor version number.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileVersionMS">
 <summary>The most significant 32 bits of the file's binary version number. This member is used with <see cref="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileVersionLS"/> to form a 64-bit value used for numeric comparisons.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileVersionLS">
 <summary>The least significant 32 bits of the file's binary version number. This member is used with <see cref="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileVersionMS"/> to form a 64-bit value used for numeric comparisons.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwProductVersionMS">
 <summary>The most significant 32 bits of the binary version number of the product with which this file was distributed. This member is used with <see cref="F:Tools.API.Common.VS_FIXEDFILEINFO.dwProductVersionLS"/> to form a 64-bit value used for numeric comparisons.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwProductVersionLS">
 <summary>The least significant 32 bits of the binary version number of the product with which this file was distributed. This member is used with <see cref="F:Tools.API.Common.VS_FIXEDFILEINFO.dwProductVersionMS"/> to form a 64-bit value used for numeric comparisons.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileFlagsMask">
 <summary>Contains a bitmask that specifies the valid bits in <see cref="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileFlags"/>. A bit is valid only if it was defined when the file was created.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileFlags">
 <summary>Contains a bitmask that specifies the Boolean attributes of the file.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileOS">
 <summary>The operating system for which this file was designed. </summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileType">
 <summary>The general type of file. </summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileSubtype">
 <summary>The function of the file. The possible values depend on the value of dwFileType.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileDateMS">
 <summary>The most significant 32 bits of the file's 64-bit binary creation date and time stamp.</summary>
</member>
<member name="F:Tools.API.Common.VS_FIXEDFILEINFO.dwFileDateLS">
 <summary>The least significant 32 bits of the file's 64-bit binary creation date and time stamp.</summary>
</member>
<member name="T:Tools.API.Common.FileVersionFlags">
 <summary>Flags for version information</summary>
</member>
<member name="F:Tools.API.Common.FileVersionFlags.Debug">
 <summary>The file contains debugging information or is compiled with debugging features enabled.</summary>
</member>
<member name="F:Tools.API.Common.FileVersionFlags.InfoInferred">
 <summary>The file's version structure was created dynamically; therefore, some of the members in this structure may be empty or incorrect.</summary>
</member>
<member name="F:Tools.API.Common.FileVersionFlags.Patched">
 <summary>The file has been modified and is not identical to the original shipping file of the same version number.</summary>
</member>
<member name="F:Tools.API.Common.FileVersionFlags.PreRelease">
 <summary>The file is a development version, not a commercially released product.</summary>
</member>
<member name="F:Tools.API.Common.FileVersionFlags.PrivateBuild">
 <summary>The file was not built using standard release procedures.</summary>
</member>
<member name="F:Tools.API.Common.FileVersionFlags.SpecialBuild">
 <summary>The file was built by the original company using standard release procedures but is a variation of the normal file of the same version number. </summary>
</member>
<member name="T:Tools.API.Common.FileOs">
 <summary>Operation Systems identified by file version info</summary>
 <remarks>An application can combine these values to indicate that the file was designed for one operating system running on another.</remarks>
</member>
<member name="F:Tools.API.Common.FileOs.Dos">
 <summary>The file was designed for MS-DOS.</summary>
</member>
<member name="F:Tools.API.Common.FileOs.WindowsNT">
 <summary>The file was designed for Windows NT.</summary>
</member>
<member name="F:Tools.API.Common.FileOs.Windows16">
 <summary>The file was designed for 16-bit System.Windows.</summary>
</member>
<member name="F:Tools.API.Common.FileOs.Windows32">
 <summary>The file was designed for 32-bit System.Windows.</summary>
</member>
<member name="F:Tools.API.Common.FileOs.OS216">
 <summary>The file was designed for 16-bit OS/2.</summary>
</member>
<member name="F:Tools.API.Common.FileOs.PM16">
 <summary>The file was designed for 16-bit Presentation Manager.</summary>
</member>
<member name="F:Tools.API.Common.FileOs.Unknown">
 <summary>The operating system for which the file was designed is unknown to the system.</summary>
</member>
<member name="T:Tools.API.Common.GeneralFileType">
 <summary>General file types understood by versioning API</summary>
</member>
<member name="F:Tools.API.Common.GeneralFileType.Application">
 <summary>The file contains an application.</summary>
</member>
<member name="F:Tools.API.Common.GeneralFileType.Dll">
 <summary>The file contains a DLL.</summary>
</member>
<member name="F:Tools.API.Common.GeneralFileType.Driver">
 <summary>The file contains a device driver.</summary>
</member>
<member name="F:Tools.API.Common.GeneralFileType.Font">
 <summary>The file contains a font. </summary>
</member>
<member name="F:Tools.API.Common.GeneralFileType.StaticLibrary">
 <summary>The file contains a static-link library.</summary>
</member>
<member name="F:Tools.API.Common.GeneralFileType.Unknown">
 <summary>The file type is unknown to the system.</summary>
</member>
<member name="F:Tools.API.Common.GeneralFileType.VirtualDevice">
 <summary>The file contains a virtual device.</summary>
</member>
<member name="T:Tools.API.Common.FileSubtype">
 <summary>FIle sub-types understood by versioningAPI</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.CommDriver">
 <summary>The file contains a communications driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.DisplayDriver">
 <summary>The file contains a display driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.InstallableDriver">
 <summary>The file contains an installable driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.KeyboardDriver">
 <summary>The file contains a keyboard driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.LanguageDriver">
 <summary>The file contains a language driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.MouseDriver">
 <summary>The file contains a mouse driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.NetworkDriver">
 <summary>The file contains a network driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.PrinterDriver">
 <summary>The file contains a printer driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.SoundDriver">
 <summary>The file contains a sound driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.SystemDriver">
 <summary>The file contains a system driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.VersionedPrinterDriver">
 <summary>The file contains a versioned printer driver.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.Unknown">
 <summary>The driver type is unknown by the system.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.ResterFont">
 <summary>The file contains a raster font.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.TrueTypeFont">
 <summary>The file contains a TrueType font.</summary>
</member>
<member name="F:Tools.API.Common.FileSubtype.VectorFont">
 <summary>The file contains a vector font.</summary>
</member>
<member name="M:Tools.API.Common.DeleteObject(System.IntPtr)">
 <summary>Deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid.</summary>
 <param name="hObject">A handle to a logical pen, brush, font, bitmap, region, or palette.</param>
 <returns>If the function succeeds, the return value is true. If the specified handle is not valid or is currently selected into a DC, the return value is false.</returns>
 <remarks>
 <para>Do not delete a drawing object (pen or brush) while it is still selected into a DC.</para>
 <para>When a pattern brush is deleted, the bitmap associated with the brush is not deleted. The bitmap must be deleted independently.</para>
 </remarks>
</member>
<member name="M:Tools.API.Common.CloseHandle(System.IntPtr)">
 <summary>Closes an open object handle.</summary>
 <param name="hObject">A valid handle to an open object.</param>
 <returns>If the function succeeds, the return value is true. If the function fails, the return value is false.</returns>
</member>
<member name="T:Tools.API.Common.LoadLibraryMode">
 <summary>Flags for the <see cref="M:Tools.API.Common.LoadLibraryEx(System.String@,System.IntPtr,Tools.API.Common.LoadLibraryMode)"/> method</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.DontResolveDllReferences">
 <summary>If this value is used, and the executable module is a DLL, the system does not call DllMain for process and thread initialization and termination. Also, the system does not load additional executable modules that are referenced by the specified module.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.IgnoreCodeAuthzLevel">
 <summary>If this value is used, the system does not check AppLocker rules or apply Software Restriction Policies for the DLL. This action applies only to the DLL being loaded and not to its dependencies. This value is recommended for use in setup programs that must run extracted DLLs during installation.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.LoadLibraryAsDatafile">
 <summary>If this value is used, the system maps the file into the calling process's virtual address space as if it were a data file. Nothing is done to execute or prepare to execute the mapped file. Therefore, you cannot call functions like GetModuleFileName, GetModuleHandle or GetProcAddress with this DLL. Using this value causes writes to read-only memory to raise an access violation. Use this flag when you want to load a DLL only to extract messages or resources from it.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.LoadLibraryAsDatafile_EXCLUSIVE">
 <summary>Similar to <see cref="F:Tools.API.Common.LoadLibraryMode.LoadLibraryAsDatafile"/>, except that the DLL file on the disk is opened for exclusive write access. Therefore, other processes cannot open the DLL file for write access while it is in use. However, the DLL can still be opened by other processes.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.LoadLibraryAsImageResource">
 <summary>If this value is used, the system maps the file into the process's virtual address space as an image file. However, the loader does not load the static imports or perform the other usual initialization steps. Use this flag when you want to load a DLL only to extract messages or resources from it.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.SearchApplicationDir">
 <summary>If this value is used, the application's installation directory is searched for the DLL and its dependencies. Directories in the standard search path are not searched. This value cannot be combined with <see cref="F:Tools.API.Common.LoadLibraryMode.AlteredSearchPath"/>.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.SearchDefaultDirs">
 <summary>This value is a combination of <see cref="F:Tools.API.Common.LoadLibraryMode.SearchApplicationDir"/>, <see cref="F:Tools.API.Common.LoadLibraryMode.SerachSystem32"/>, and <see cref="F:Tools.API.Common.LoadLibraryMode.SearchUserDirs"/>. Directories in the standard search path are not searched. This value cannot be combined with <see cref="F:Tools.API.Common.LoadLibraryMode.AlteredSearchPath"/>.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.SerachDllLoadDir">
 <summary>If this value is used, the directory that contains the DLL is temporarily added to the beginning of the list of directories that are searched for the DLL's dependencies. Directories in the standard search path are not searched.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.SerachSystem32">
 <summary>If this value is used, %windows%\system32 is searched for the DLL and its dependencies. Directories in the standard search path are not searched. This value cannot be combined with <see cref="F:Tools.API.Common.LoadLibraryMode.AlteredSearchPath"/>.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.SearchUserDirs">
 <summary>If this value is used, directories added using the AddDllDirectory or the SetDllDirectory function are searched for the DLL and its dependencies. If more than one directory has been added, the order in which the directories are searched is unspecified. Directories in the standard search path are not searched. This value cannot be combined with <see cref="F:Tools.API.Common.LoadLibraryMode.AlteredSearchPath"/>.</summary>
</member>
<member name="F:Tools.API.Common.LoadLibraryMode.AlteredSearchPath">
 <summary>If this value is used and lpFileName specifies an absolute path, the system uses the alternate file search strategy discussed in the Remarks section to find associated executable modules that the specified module causes to be loaded. If this value is used and lpFileName specifies a relative path, the behavior is undefined.</summary>
</member>
<member name="T:Tools.API.Misc">
 <summary>Misc Win32 API declrations</summary>
</member>
<member name="M:Tools.API.Misc.GetUName(System.UInt16,System.Text.StringBuilder)">
 <summary>Undocumented Win API function for getting localized character names</summary>
 <param name="wCharCode">Character code (code-point)</param>
 <param name="lpBuf">When function returns returns return value</param>
 <returns>Number of characters returned</returns>
</member>
<member name="T:Tools.API.Public.WindowLongs">
 <summary>Predefined window longs for <see cref="P:Tools.WindowsT.NativeT.Win32Window.WindowLong(Tools.API.Public.WindowLongs)"/></summary>
</member>
<member name="F:Tools.API.Public.WindowLongs.ExStyle">
 <summary>Retrieves the extended window styles. For more information, see CreateWindowEx.</summary>
 <remarks>GWL_EXSTYLE</remarks>
</member>
<member name="F:Tools.API.Public.WindowLongs.Style">
 <summary>Retrieves the window styles.</summary>
 <remarks>GWL_STYLE</remarks>
</member>
<member name="F:Tools.API.Public.WindowLongs.WndProc">
 <summary>Retrieves the address of the window procedure, or a handle representing the address of the window procedure. You must use the CallWindowProc function to call the window procedure.</summary>
 <remarks>GWL_WNDPROC</remarks>
</member>
<member name="F:Tools.API.Public.WindowLongs.HInstance">
 <summary>Retrieves a handle to the application instance.</summary>
 <remarks>GWL_HINSTANCE</remarks>
</member>
<member name="F:Tools.API.Public.WindowLongs.hWndParent">
 <summary>Retrieves a handle to the parent window, if any.</summary>
 <remarks>GWL_HWNDPARENT</remarks>
</member>
<member name="F:Tools.API.Public.WindowLongs.Id">
 <summary>Retrieves the identifier of the window.</summary>
 <remarks>GWL_ID</remarks>
</member>
<member name="F:Tools.API.Public.WindowLongs.UserData">
 <summary>Retrieves the user data associated with the window. This data is intended for use by the application that created the window. Its value is initially zero.</summary>
 <remarks>GWL_USERDATA</remarks>
</member>
<member name="F:Tools.API.Public.WindowLongs.DlgProc">
 <summary>Retrieves the address of the dialog box procedure, or a handle representing the address of the dialog box procedure. You must use the CallWindowProc function to call the dialog box procedure.</summary>
 <remarks>DWL_DLGPROC</remarks>
</member>
<member name="F:Tools.API.Public.WindowLongs.MsgResult">
 <summary>Retrieves the return value of a message processed in the dialog box procedure.</summary>
 <remarks>DWL_MSGRESULT</remarks>
</member>
<member name="F:Tools.API.Public.WindowLongs.User">
 <summary>Retrieves extra information private to the application, such as handles or pointers.</summary>
 <remarks>DWL_USER</remarks>
</member>
<member name="T:Tools.API.Public.WindowExtendedStyles">
 <summary>Defines window extended styles</summary>
 <version version="1.5.3">This enumeration is new in version 1.5.3</version>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.AcceptsFiles">
 <summary>The windo accepts drag &amp; drop files</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.AppWindow">
 <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.ClientEdge">
 <summary>The window has a border with a sunken edge.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.Composited">
 <summary>Paints all descendants of a window in bottom-to-top painting order using double-buffering. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.</summary>
 <remarks>Windows 2000: This flag is not supported.</remarks>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.ContextHelp">
 <summary>The title bar of the window includes a question mark. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a <see cref="F:Tools.API.Messages.WindowMessages.WM_HELP"/> message.</summary>
 <remarks><see cref="F:Tools.API.Public.WindowExtendedStyles.ContextHelp"/> cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.</remarks>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.ControlParent">
 <summary>The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.DialogModalFrame">
 <summary>The window has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.Layered">
 <summary>The window is a layered window. Note that this cannot be used for child System.Windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.LayoutRtl">
 <summary>If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the horizontal origin of the window is on the right edge. Increasing horizontal values advance to the left.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.Left">
 <summary>The window has generic left-aligned properties. This is the default.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.LeftScrollBar">
 <summary>If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.LtrReading">
 <summary>The window text is displayed using left-to-right reading-order properties. This is the default.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.MdiChild">
 <summary>The window is a MDI child window.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.NoActive">
 <summary>A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.NoInheritLayout">
 <summary>The window does not pass its window layout to its child System.Windows.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.NoParentNotify">
 <summary>The child window created with this style does not send the <see cref="F:Tools.API.Messages.WindowMessages.WM_PARENTNOTIFY"/> message to its parent window when it is created or destroyed.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.OverlappedWindow">
 <summary>The window is an overlapped window.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.PaletteWindow">
 <summary>TBD</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.Right">
 <summary>The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.RightScrollBar">
 <summary>The vertical scroll bar (if present) is to the right of the client area. This is the default.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.RtlReading">
 <summary>If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.StaticEdge">
 <summary>The window has a three-dimensional border style intended to be used for items that do not accept user input.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.ToolWindow">
 <summary>The window is intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.TopMost">
 <summary>The window should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.Transparent">
 <summary>The window should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.</summary>
</member>
<member name="F:Tools.API.Public.WindowExtendedStyles.WindowEdge">
 <summary>The window has a border with a raised edge.</summary>
</member>
<member name="T:Tools.API.RawInput">
 <summary>Contains API declarations related to Raw Input</summary>
</member>
<member name="T:Tools.API.RawInput.RAWINPUTDEVICELIST">
 <summary>contains information about a raw input device.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICELIST.hDevice">
 <summary>Handle to the raw input device. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICELIST.dwType">
 <summary>Type of device.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICELIST.Size">
 <summary>Size of this structure</summary>
</member>
<member name="M:Tools.API.RawInput.RAWINPUTDEVICELIST.ToString">
 <summary>Gets string representation of this instance</summary>
</member>
<member name="T:Tools.API.RawInput.DeviceTypes">
 <summary>Raw input device types</summary>
</member>
<member name="F:Tools.API.RawInput.DeviceTypes.RIM_TYPEHID">
 <summary>The device is an Human Interface Device (HID) that is not a keyboard and not a mouse.</summary>
</member>
<member name="F:Tools.API.RawInput.DeviceTypes.RIM_TYPEKEYBOARD">
 <summary>The device is a keyboard.</summary>
</member>
<member name="F:Tools.API.RawInput.DeviceTypes.RIM_TYPEMOUSE">
 <summary>The device is a mouse.</summary>
</member>
<member name="M:Tools.API.RawInput.GetRawInputDeviceList(Tools.API.RawInput.RAWINPUTDEVICELIST[],System.Int32@,System.Int32)">
 <summary>enumerates the raw input devices attached to the system. </summary>
 <param name="pRawInputDeviceList">[out] Pointer to buffer that holds an array of <see cref="T:Tools.API.RawInput.RAWINPUTDEVICELIST"/> structures for the devices attached to the system. If NULL, the number of devices are returned in *<paramref name="puiNumDevices"/>.</param>
 <param name="puiNumDevices">[in, out] Pointer to a variable. If <paramref name="pRawInputDeviceList"/> is NULL, the function populates this variable with the number of devices attached to the system; otherwise, this variable specifies the number of <see cref="T:Tools.API.RawInput.RAWINPUTDEVICELIST"/> structures that can be contained in the buffer to which <paramref name="pRawInputDeviceList"/> points. If this value is less than the number of devices attached to the system, the function returns the actual number of devices in this variable and fails with <see cref="F:Tools.API.Common.Errors.ERROR_INSUFFICIENT_BUFFER"/>.</param>
 <param name="cbSize">[in] Size of a <see cref="T:Tools.API.RawInput.RAWINPUTDEVICELIST"/> structure. </param>
 <returns><para>If the function is successful, the return value is the number of devices stored in the buffer pointed to by <paramref name="pRawInputDeviceList"/>.</para>
 <para>On any other error, the function returns (UINT) -1</para></returns>
 <remarks>The devices returned from this function are the mouse, the keyboard, and other Human Interface Device (HID) devices.
 <para>To get result of this function you must call it twice.</para>
 <list type="numbered">
 <item>With (nothing, Number = 0, Size)</item>
 <item>Then prepare your array to have Number elements</item>
 <item>With (YourArray, Number, Size)</item>
 </list></remarks>
</member>
<member name="M:Tools.API.RawInput.GetRawInputDeviceInfo(System.IntPtr,Tools.API.RawInput.DeviceInfoTypes,System.IntPtr,System.UInt32@)">
 <summary>gets information about the raw input device</summary>
 <param name="hDevice">[in] Handle to the raw input device. This comes from the lParam of the <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message, from RAWINPUTHEADER.hDevice, or from <see cref="M:Tools.API.RawInput.GetRawInputDeviceList(Tools.API.RawInput.RAWINPUTDEVICELIST[],System.Int32@,System.Int32)"/>. It can also be NULL if an application inserts input data, for example, by using SendInput. </param>
 <param name="uiCommand">[in] Specifies what data will be returned in <paramref name="pData"/>.</param>
 <param name="pData">[in, out] Pointer to a buffer that contains the information specified by <paramref name="uiCommand"/>. If <paramref name="uiCommand"/> is <see cref="F:Tools.API.RawInput.DeviceInfoTypes.RIDI_DEVICEINFO"/>, set <see cref="F:Tools.API.RawInput.RID_DEVICE_INFO.cbSize"/> to sizeof(<see cref="T:Tools.API.RawInput.RID_DEVICE_INFO"/>) before calling <see cref="M:Tools.API.RawInput.GetRawInputDeviceInfo(System.IntPtr,Tools.API.RawInput.DeviceInfoTypes,System.IntPtr,System.UInt32@)"/>. </param>
 <param name="pcbSize">[in, out] Pointer to a variable that contains the size, in bytes, of the data in <paramref name="pData"/>. </param>
 <returns><para>If successful, this function returns a non-negative number indicating the number of bytes copied to <paramref name="pData"/>.</para>
 <para>If <paramref name="pData"/> is not large enough for the data, the function returns -1. If <paramref name="pData"/> is NULL, the function returns a value of zero. In both of these cases, <paramref name="pcbSize"/> is set to the minimum size required for the <paramref name="pData"/> buffer.</para>
 <para>Call GetLastError to identify any other errors.</para></returns>
</member>
<member name="T:Tools.API.RawInput.DeviceInfoTypes">
 <summary>Specifies different types of information that can be queried using <see cref="M:Tools.API.RawInput.GetRawInputDeviceInfo(System.IntPtr,Tools.API.RawInput.DeviceInfoTypes,System.IntPtr,System.UInt32@)"/></summary>
</member>
<member name="F:Tools.API.RawInput.DeviceInfoTypes.RIDI_PREPARSEDDATA">
 <summary>pData points to the previously parsed data.</summary>
</member>
<member name="F:Tools.API.RawInput.DeviceInfoTypes.RIDI_DEVICENAME">
 <summary>pData points to a string that contains the device name.</summary>
 <remarks>For this uiCommand only, the value in pcbSize is the character count (not the byte count).</remarks>
</member>
<member name="F:Tools.API.RawInput.DeviceInfoTypes.RIDI_DEVICEINFO">
 <summary>pData points to an RID_DEVICE_INFO structure.</summary>
</member>
<member name="T:Tools.API.RawInput.RID_DEVICE_INFO_MOUSE">
 <summary>Defines the raw input data coming from the specified mouse.</summary>
 <remarks>For the keyboard, the Usage Page is 1 and the Usage is 2.</remarks>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_MOUSE.dwId">
 <summary>ID for the mouse device.</summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_MOUSE.dwNumberOfButtons">
 <summary>Number of buttons for the mouse.</summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_MOUSE.dwSampleRate">
 <summary>Number of data points per second. This information may not be applicable for every mouse device.</summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_MOUSE.fHasHorizontalWheel">
 <summary>TRUE if the mouse has a wheel for horizontal scrolling; otherwise, FALSE.</summary>
 <remarks>Note:  This member is only supported under Windows Vista and later versions.</remarks>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_MOUSE.Size">
 <summary>Size of this structure</summary>
</member>
<member name="T:Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD">
 <summary>The raw input data coming from the specified keyboard. </summary>
 <remarks>For the keyboard, the Usage Page is 1 and the Usage is 6. </remarks>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD.dwType">
 <summary>Type of the keyboard. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD.dwSubType">
 <summary>Subtype of the keyboard. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD.dwKeyboardMode">
 <summary>Scan code mode. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD.dwNumberOfFunctionKeys">
 <summary>Number of function keys on the keyboard.</summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD.dwNumberOfIndicators">
 <summary>Number of LED indicators on the keyboard.</summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD.dwNumberOfKeysTotal">
 <summary>Total number of keys on the keyboard. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD.Size">
 <summary>Size of this structure</summary>
</member>
<member name="T:Tools.API.RawInput.RID_DEVICE_INFO_HID">
 <summary>Defines the raw input data coming from the specified Human Interface Device (HID)</summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_HID.dwVendorId">
 <summary>Vendor ID for the HID. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_HID.dwProductId">
 <summary>Product ID for the HID. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_HID.dwVersionNumber">
 <summary>Version number for the HID. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_HID.usUsagePage">
 <summary>Top-level collection Usage Page for the device. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_HID.usUsage">
 <summary>Top-level collection Usage for the device. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO_HID.Size">
 <summary>Size of this structure</summary>
</member>
<member name="T:Tools.API.RawInput.RID_DEVICE_INFO">
 <summary>defines the raw input data coming from any device.</summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO.cbSize">
 <summary>Size, in bytes, of the RID_DEVICE_INFO structure. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO.dwType">
 <summary>Type of raw input data. This member can be one of the following values.</summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO.mouse">
 <summary>If <see cref="F:Tools.API.RawInput.RID_DEVICE_INFO.dwType"/> is <see cref="F:Tools.API.RawInput.DeviceTypes.RIM_TYPEMOUSE"/>, this is the <see cref="T:Tools.API.RawInput.RID_DEVICE_INFO_MOUSE"/> structure that defines the mouse. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO.keyboard">
 <summary>If <see cref="F:Tools.API.RawInput.RID_DEVICE_INFO.dwType"/> is <see cref="F:Tools.API.RawInput.DeviceTypes.RIM_TYPEKEYBOARD"/>, this is the <see cref="T:Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD"/> structure that defines the keyboard. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO.hid">
 <summary>If <see cref="F:Tools.API.RawInput.RID_DEVICE_INFO.dwType"/> is <see cref="F:Tools.API.RawInput.DeviceTypes.RIM_TYPEHID"/>, this is the <see cref="T:Tools.API.RawInput.RID_DEVICE_INFO_HID"/> structure that defines the HID device. </summary>
</member>
<member name="F:Tools.API.RawInput.RID_DEVICE_INFO.Size">
 <summary>Size of this structure</summary>
</member>
<member name="T:Tools.API.RawInput.RAWINPUTDEVICE">
 <summary>defines information for the raw input devices</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICE.usUsagePage">
 <summary>Top level collection Usage page for the raw input device. </summary>
 <seelaso cref="T:Tools.DevicesT.RawInputT.UsagePages"/>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICE.usUsage">
 <summary>Top level collection Usage for the raw input device. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICE.dwFlags">
 <summary>Mode flag that specifies how to interpret the information provided by usUsagePage and usUsage. It can be zero (the default) or one of the following values. By default, the operating system sends raw input from devices with the specified top level collection (TLC) to the registered application as long as it has the window focus.</summary>
 <remarks><para>If <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_NOLEGACY"/> is set for a mouse or a keyboard, the system does not generate any legacy message for that device for the application. For example, if the mouse TLC is set with <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_NOLEGACY"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDOWN"/> and related legacy mouse messages are not generated. Likewise, if the keyboard TLC is set with <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_NOLEGACY"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN"/> and related legacy keyboard messages are not generated.</para>
 <para>If <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_REMOVE"/> is set and the <see cref="F:Tools.API.RawInput.RAWINPUTDEVICE.hwndTarget"/> parameter is not set to NULL, then parameter validation will fail.</para></remarks>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICE.hwndTarget">
 <summary>Handle to the target window. If NULL it follows the keyboard focus.</summary>
</member>
<member name="T:Tools.API.RawInput.RAWINPUTDEVICEFlags">
 <summary>Values for the <see cref="F:Tools.API.RawInput.RAWINPUTDEVICE.dwFlags"/> field</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_APPKEYS">
 <summary>Microsoft Windows XP Service Pack 1 (SP1): If set, the application command keys are handled. <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_APPKEYS"/> can be specified only if <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_NOLEGACY"/> is specified for a keyboard device.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_CAPTUREMOUSE">
 <summary>If set, the mouse button click does not activate the other window.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_EXCLUDE">
 <summary>If set, this specifies the top level collections to exclude when reading a complete usage page. This flag only affects a TLC whose usage page is already specified with <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_PAGEONLY"/>.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_EXINPUTSINK">
 <summary>Windows Vista or later: If set, this enables the caller to receive input in the background only if the foreground application does not process it. In other words, if the foreground application is not registered for raw input, then the background application that is registered will receive the input.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_INPUTSINK">
 <summary>If set, this enables the caller to receive the input even when the caller is not in the foreground. Note that <see cref="F:Tools.API.RawInput.RAWINPUTDEVICE.hwndTarget"/> must be specified.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_NOHOTKEYS">
 <summary>If set, the application-defined keyboard device hotkeys are not handled. However, the system hotkeys; for example, ALT+TAB and CTRL+ALT+DEL, are still handled. By default, all keyboard hotkeys are handled. <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_NOHOTKEYS"/> can be specified even if <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_NOLEGACY"/> is not specified and <see cref="F:Tools.API.RawInput.RAWINPUTDEVICE.hwndTarget"/> is NULL.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_NOLEGACY">
 <summary>If set, this prevents any devices specified by <see cref="F:Tools.API.RawInput.RAWINPUTDEVICE.usUsagePage"/> or <see cref="F:Tools.API.RawInput.RAWINPUTDEVICE.usUsage"/> from generating legacy messages. This is only for the mouse and keyboard. See Remarks.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_PAGEONLY">
 <summary>If set, this specifies all devices whose top level collection is from the specified <see cref="F:Tools.API.RawInput.RAWINPUTDEVICE.usUsagePage"/>. Note that <see cref="F:Tools.API.RawInput.RAWINPUTDEVICE.usUsage"/> must be zero. To exclude a particular top level collection, use <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_EXCLUDE"/>.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_REMOVE">
 <summary>If set, this removes the top level collection from the inclusion list. This tells the operating system to stop reading from a device which matches the top level collection.</summary>
</member>
<member name="M:Tools.API.RawInput.RegisterRawInputDevices(Tools.API.RawInput.RAWINPUTDEVICE[],System.UInt32,System.UInt32)">
 <summary>registers the devices that supply the raw input data.</summary>
 <param name="pRawInputDevice">[in] Pointer to an array of <see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> structures that represent the devices that supply the raw input.</param>
 <param name="uiNumDevices">[in] Number of <see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> structures pointed to by pRawInputDevices.</param>
 <param name="cbSize">[in] Size, in bytes, of a <see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> structure.</param>
 <returns>TRUE if the function succeeds; otherwise, FALSE.</returns>
 <remarks><para>To receive <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> messages, an application must first register the raw input devices using <see cref="M:Tools.API.RawInput.RegisterRawInputDevices(Tools.API.RawInput.RAWINPUTDEVICE[],System.UInt32,System.UInt32)"/>. By default, an application does not receive raw input.</para>
 <para>If a <see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> structure has the <see cref="F:Tools.API.RawInput.RAWINPUTDEVICEFlags.RIDEV_REMOVE"/> flag set and the <see cref="F:Tools.API.RawInput.RAWINPUTDEVICE.hwndTarget"/> parameter is not set to NULL, then parameter validation will fail.</para></remarks>
</member>
<member name="M:Tools.API.RawInput.GetRegisteredRawInputDevices(System.IntPtr,System.UInt32@,System.UInt32)">
 <summary>gets the information about the raw input devices for the current application.</summary>
 <param name="pRawInputDevices">[out] Pointer to an array of <see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> structures for the application.</param>
 <param name="puiNumDevices">[in, out] Number of <see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> structures in * <paramref name="pRawInputDevices"/>. </param>
 <param name="cbSize">[in] Size, in bytes, of a <see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> structure. </param>
 <returns><para>If successful, the function returns a non-negative number that is the number of <see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> structures written to the buffer.</para>
 <para>If the <paramref name="pRawInputDevices"/> buffer is too small or NULL, the function sets the last error as <see cref="F:Tools.API.Common.Errors.ERROR_INSUFFICIENT_BUFFER"/>, returns -1, and sets <paramref name="puiNumDevices"/> to the required number of devices. If the function fails for any other reason, it returns -1.</para></returns>
</member>
<member name="T:Tools.API.RawInput.RAWINPUT_Marshalling">
 <summary>contains the raw input from a device. </summary>
 <remarks>Use this structure for marshalling, but remember that is does not contain the <see cref="F:Tools.API.RawInput.RAWHID_NonMarshalling.bRawData"/> member</remarks>
</member>
<member name="F:Tools.API.RawInput.RAWINPUT_Marshalling.header">
 <summary>A <see cref="T:Tools.API.RawInput.RAWINPUTHEADER"/> structure for the raw input data. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUT_Marshalling.mouse">
 <summary>If the data comes from a mouse, this is the <see cref="T:Tools.API.RawInput.RAWMOUSE"/> structure for the raw input data. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUT_Marshalling.keyboard">
 <summary>If the data comes from a keyboard, this is the <see cref="T:Tools.API.RawInput.RAWKEYBOARD"/> structure for the raw input data. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUT_Marshalling.hid">
 <summary>If the data comes from an Human Interface Device (HID), this is the <see cref="T:Tools.API.RawInput.RAWINPUT_Marshalling"/> structure for the raw input data. </summary>
</member>
<member name="T:Tools.API.RawInput.RAWINPUT_NonMarshalling">
 <summary>contains the raw input from a device. </summary>
 <remarks>Do not use this structure for marshalling</remarks>
</member>
<member name="F:Tools.API.RawInput.RAWINPUT_NonMarshalling.header">
 <summary>A <see cref="T:Tools.API.RawInput.RAWINPUTHEADER"/> structure for the raw input data. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUT_NonMarshalling.mouse">
 <summary>If the data comes from a mouse, this is the <see cref="T:Tools.API.RawInput.RAWMOUSE"/> structure for the raw input data. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUT_NonMarshalling.keyboard">
 <summary>If the data comes from a keyboard, this is the <see cref="T:Tools.API.RawInput.RAWKEYBOARD"/> structure for the raw input data. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUT_NonMarshalling.hid">
 <summary>If the data comes from an Human Interface Device (HID), this is the <see cref="T:Tools.API.RawInput.RAWINPUT_NonMarshalling"/> structure for the raw input data. </summary>
</member>
<member name="M:Tools.API.RawInput.RAWINPUT_NonMarshalling.op_Explicit(Tools.API.RawInput.RAWINPUT_Marshalling)~Tools.API.RawInput.RAWINPUT_NonMarshalling">
 <summary>Converts <see cref="T:Tools.API.RawInput.RAWINPUT_Marshalling"/> structure to <see cref="T:Tools.API.RawInput.RAWINPUT_NonMarshalling"/> structure</summary>
 <param name="a">A <see cref="T:Tools.API.RawInput.RAWINPUT_Marshalling"/> structure</param>
 <returns><see cref="T:Tools.API.RawInput.RAWINPUT_NonMarshalling"/> structure</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="a"/>.<see cref="F:Tools.API.RawInput.RAWINPUT_Marshalling.header">header</see>.<see cref="F:Tools.API.RawInput.RAWINPUTHEADER.dwType">dwType</see> is not member of <see cref="T:Tools.API.RawInput.DeviceTypes"/></exception>
 <exception cref="T:System.NotSupportedException"><paramref name="a"/>.<see cref="F:Tools.API.RawInput.RAWINPUT_Marshalling.header">header</see>.<see cref="F:Tools.API.RawInput.RAWINPUTHEADER.dwType">dwType</see> is <see cref="F:Tools.API.RawInput.DeviceTypes.RIM_TYPEHID"/></exception>
</member>
<member name="T:Tools.API.RawInput.RAWMOUSE">
 <summary>contains information about the state of the mouse. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSE.usFlags">
 <summary>Mouse state. This member can be any reasonable combination of <see cref="T:Tools.API.RawInput.RAWMOUSEFlags"/>. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSE.ulButtons">
 <summary>Reserved</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSE.usButtonFlags">
 <summary>Transition state of the mouse buttons. This member can be one or more of the <see cref="T:Tools.API.RawInput.RAWMOUSEButtonFlags"/> values. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSE.usButtonData">
 <summary>If <see cref="F:Tools.API.RawInput.RAWMOUSE.usButtonFlags"/> is <see cref="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_WHEEL"/>, this member is a signed value that specifies the wheel delta. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSE.ulRawButtons">
 <summary>Raw state of the mouse buttons. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSE.lLastX">
 <summary>Motion in the X direction. This is signed relative motion or absolute motion, depending on the value of <see cref="F:Tools.API.RawInput.RAWMOUSE.usFlags"/>. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSE.lLastY">
 <summary>Motion in the Y direction. This is signed relative motion or absolute motion, depending on the value of <see cref="F:Tools.API.RawInput.RAWMOUSE.usFlags"/>. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSE.ulExtraInformation">
 <summary>Device-specific additional information for the event. </summary>
</member>
<member name="T:Tools.API.RawInput.RAWMOUSEFlags">
 <summary>Values for <see cref="F:Tools.API.RawInput.RAWMOUSE.usFlags"/></summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEFlags.MOUSE_ATTRIBUTES_CHANGED">
 <summary>Mouse attributes changed; application needs to query the mouse attributes.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEFlags.MOUSE_MOVE_RELATIVE">
 <summary>Mouse movement data is relative to the last mouse position.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEFlags.MOUSE_MOVE_ABSOLUTE">
 <summary>Mouse movement data is based on absolute position.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEFlags.MOUSE_VIRTUAL_DESKTOP">
 <summary>Mouse coordinates are mapped to the virtual desktop (for a multiple monitor system).</summary>
</member>
<member name="T:Tools.API.RawInput.RAWMOUSEButtonFlags">
 <summary>Values for <see cref="F:Tools.API.RawInput.RAWMOUSE.usButtonFlags"/></summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_LEFT_BUTTON_DOWN">
 <summary>Left button changed to down.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_LEFT_BUTTON_UP">
 <summary>Left button changed to up.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_MIDDLE_BUTTON_DOWN">
 <summary>Middle button changed to down.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_MIDDLE_BUTTON_UP">
 <summary>Middle button changed to up.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_RIGHT_BUTTON_DOWN">
 <summary>Right button changed to down.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_RIGHT_BUTTON_UP">
 <summary>Right button changed to up.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_1_DOWN">
 <summary><see cref="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_LEFT_BUTTON_DOWN"/></summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_1_UP">
 <summary><see cref="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_LEFT_BUTTON_UP"/></summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_2_DOWN">
 <summary><see cref="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_RIGHT_BUTTON_DOWN"/></summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_2_UP">
 <summary><see cref="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_RIGHT_BUTTON_UP"/></summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_3_DOWN">
 <summary><see cref="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_MIDDLE_BUTTON_DOWN"/></summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_3_UP">
 <summary><see cref="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_MIDDLE_BUTTON_UP"/></summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_4_DOWN">
 <summary>XBUTTON1 changed to down.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_4_UP">
 <summary>XBUTTON1 changed to up.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_5_DOWN">
 <summary>XBUTTON2 changed to down.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_BUTTON_5_UP">
 <summary>XBUTTON2 changed to up.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWMOUSEButtonFlags.RI_MOUSE_WHEEL">
 <summary>Raw input comes from a mouse wheel. The wheel delta is stored in <see cref="F:Tools.API.RawInput.RAWMOUSE.usButtonData"/>.</summary>
</member>
<member name="F:Tools.API.RawInput.KEYBOARD_OVERRUN_MAKE_CODE">
 <summary>The make scan code for keyboard overrun</summary>
</member>
<member name="T:Tools.API.RawInput.RAWKEYBOARD">
 <summary>contains information about the state of the keyboard. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARD.MakeCode">
 <summary>Scan code from the key depression. The scan code for keyboard overrun is <see cref="F:Tools.API.RawInput.KEYBOARD_OVERRUN_MAKE_CODE"/>. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARD.Flags">
 <summary>Flags for scan code information. It can be one or more of the <see cref="T:Tools.API.RawInput.RAWKEYBOARDFlags"/>.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARD.Reserved">
 <summary>Reserved; must be zero. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARD.VKey">
 <summary>Microsoft Windows message compatible virtual-key code. For more information, see Virtual-Key Codes. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARD.Message">
 <summary>Corresponding window message, for example <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYDOWN"/>, and so forth. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARD.ExtraInformation">
 <summary>Device-specific additional information for the event. </summary>
</member>
<member name="T:Tools.API.RawInput.RAWKEYBOARDFlags">
 <summary>Values of <see cref="F:Tools.API.RawInput.RAWKEYBOARD.Flags"/></summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARDFlags.RI_KEY_MAKE">
 <summary>Make code</summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARDFlags.RI_KEY_BREAK">
 <summary>Break code</summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARDFlags.RI_KEY_E0">
 <summary>E0</summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARDFlags.RI_KEY_E1">
 <summary>E1</summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARDFlags.RI_KEY_TERMSRV_SET_LED">
 <summary>Set led</summary>
</member>
<member name="F:Tools.API.RawInput.RAWKEYBOARDFlags.RI_KEY_TERMSRV_SHADOW">
 <summary>Termibal server shadow</summary>
</member>
<member name="T:Tools.API.RawInput.RAWHID_Marshalling">
 <summary>describes the format of the raw input from a Human Interface Device (HID). </summary>
 <remarks>Use this declaration of RAWHID structure for marshalling, but rememebre that it is missing <see cref="F:Tools.API.RawInput.RAWHID_NonMarshalling.bRawData"/> member.</remarks>
</member>
<member name="F:Tools.API.RawInput.RAWHID_Marshalling.dwSizeHid">
 <summary>Size, in bytes, of each HID input in <see cref="F:Tools.API.RawInput.RAWHID_NonMarshalling.bRawData"/>. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWHID_Marshalling.dwCount">
 <summary>Number of HID inputs in <see cref="F:Tools.API.RawInput.RAWHID_NonMarshalling.bRawData"/>.</summary>
</member>
<member name="T:Tools.API.RawInput.RAWHID_NonMarshalling">
 <summary>describes the format of the raw input from a Human Interface Device (HID). </summary>
 <remarks>Do not use this structure for marshalling</remarks>
</member>
<member name="F:Tools.API.RawInput.RAWHID_NonMarshalling.dwSizeHid">
 <summary>Size, in bytes, of each HID input in <see cref="F:Tools.API.RawInput.RAWHID_NonMarshalling.bRawData"/>. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWHID_NonMarshalling.dwCount">
 <summary>Number of HID inputs in <see cref="F:Tools.API.RawInput.RAWHID_NonMarshalling.bRawData"/>.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWHID_NonMarshalling.bRawData">
 <summary>Raw input data as an array of bytes. </summary>
 <remarks>This field is not marshalled automatically</remarks>
</member>
<member name="T:Tools.API.RawInput.RAWINPUTHEADER">
 <summary>contains the header information that is part of the raw input data. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTHEADER.dwType">
 <summary>Type of raw input. It can be one of the following values.</summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTHEADER.dwSize">
 <summary>Size, in bytes, of the entire input packet of data. This includes <see cref="T:Tools.API.RawInput"/> plus possible extra input reports in the <see cref="T:Tools.API.RawInput.RAWHID_NonMarshalling"/> variable length array. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTHEADER.hDevice">
 <summary>Handle to the device generating the raw input data. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTHEADER.wParam">
 <summary>Value passed in the wParam parameter of the <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message. </summary>
</member>
<member name="F:Tools.API.RawInput.RAWINPUTHEADER.Size">
 <summary>Size of this structure</summary>
</member>
<member name="M:Tools.API.RawInput.GET_RAWINPUT_CODE_WPARAM(Tools.API.Messages.wParam.WM_INPUT)">
 <summary>gets the input code from <paramref name="wParam"/> in <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/>.</summary>
 <param name="wParam">Input code.</param>
 <returns>The return value is the input code for the raw input data.</returns>
</member>
<member name="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)">
 <summary>gets the raw input from the specified device.</summary>
 <param name="hRawInput">[in] Handle to the <see cref="T:Tools.API.RawInput"/> structure. This comes from the lParam in <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/>. </param>
 <param name="uiCommnad">[in] Command flag. This parameter can be one of the <see cref="T:Tools.API.RawInput.GetRawInputDataCommand"/> values. </param>
 <param name="pData">[out] Pointer to the data that comes from the <see cref="T:Tools.API.RawInput"/> structure. This depends on the value of <paramref name="uiCommand"/>. If <paramref name="pData"/> is NULL, the required size of the buffer is returned in <paramref name="pcbSize"/>. </param>
 <param name="pcbSize">[in, out] Pointer to a variable that specifies the size, in bytes, of the data in <paramref name="pData"/>. </param>
 <param name="cbSizeHeader">[in] Size, in bytes, of <see cref="T:Tools.API.RawInput.RAWINPUTHEADER"/>. </param>
 <returns><para>If <paramref name="pData"/> is NULL and the function is successful, the return value is 0. If <paramref name="pData"/> is not NULL and the function is successful, the return value is the number of bytes copied into <paramref name="pData"/>.</para>
 <para>If there is an error, the return value is (UINT)-1.</para></returns>
 <remarks><see cref="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)"/> gets the raw input one <see cref="T:Tools.API.RawInput"/> structure at a time. In contrast, GetRawInputBuffer gets an array of <see cref="T:Tools.API.RawInput"/> structures.</remarks>
</member>
<member name="T:Tools.API.RawInput.GetRawInputDataCommand">
 <summary>Commands for <see cref="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)"/> function</summary>
</member>
<member name="F:Tools.API.RawInput.GetRawInputDataCommand.RID_INPUT">
 <summary>Get the raw data from the <see cref="T:Tools.API.RawInput"/> structure.</summary>
</member>
<member name="F:Tools.API.RawInput.GetRawInputDataCommand.RID_HEADER">
 <summary>Get the header information from the <see cref="T:Tools.API.RawInput"/> structure.</summary>
</member>
<member name="T:Tools.DiagnosticsT.ProcessExtensions">
 <summary>Provides extension functions for working with processes</summary>
 <version version="1.5.3">This module is new in version 1.5.3</version>
</member>
<member name="M:Tools.DiagnosticsT.ProcessExtensions.Suspend(System.Diagnostics.Process)">
 <summary>Suspends a process by suspending all threads of the process</summary>
 <param name="process">A process to be suspended</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="process"/> is null.</exception>
 <exception cref="T:Tools.API.Win32APIException">Failed to suspend a thread. In this case an attempt is made to restore previous state of all threads which's suspension didn't failed.</exception>
</member>
<member name="M:Tools.DiagnosticsT.ProcessExtensions.Resume(System.Diagnostics.Process)">
 <summary>Resumes a process by resuming all threads of the process</summary>
 <param name="process">A process to be resumed</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="process"/> is null.</exception>
 <exception cref="T:Tools.API.Win32APIException">Failed to resume a thread. In this case an attempt is made to restore previous state of all threads which's resumal didn't failed.</exception>
</member>
<member name="M:Tools.DiagnosticsT.ProcessExtensions.Suspend(System.Diagnostics.ProcessThread)">
 <summary>Suspends the specified thread</summary>
 <param name="thread">The thread to be suspended</param>
 <returns>Actual thread's suspend count. Returns 1 when thread was suspended by this call, returns number >1 if thread was already suspended.</returns>
 <remarks>You can use pair of <see cref="M:Tools.DiagnosticsT.ProcessExtensions.Suspend(System.Diagnostics.Process)"/> and <see cref="M:Tools.DiagnosticsT.ProcessExtensions.Resume(System.Diagnostics.Process)"/> calls to ensure that thread is suspended (<see cref="M:Tools.DiagnosticsT.ProcessExtensions.Suspend(System.Diagnostics.Process)"/>) and resume thread to it's previous state (<see cref="M:Tools.DiagnosticsT.ProcessExtensions.Resume(System.Diagnostics.Process)"/>).</remarks>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain access to given thread or to suspend the thread</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="thread"/> is null.</exception>
</member>
<member name="M:Tools.DiagnosticsT.ProcessExtensions.Resume(System.Diagnostics.ProcessThread)">
 <summary>Decrements a thread's suspend count. When the suspend count is decremented to zero, the execution of the thread is resumed.</summary>
 <param name="thread">The thread to be resumed.</param>
 <returns>Actual thread's suspend count. Returns 0 when thread was actually resumed by this call, returns number >0 if thread was not suspended by this call.</returns>
 <remarks>You can use pair of <see cref="M:Tools.DiagnosticsT.ProcessExtensions.Suspend(System.Diagnostics.Process)"/> and <see cref="M:Tools.DiagnosticsT.ProcessExtensions.Resume(System.Diagnostics.Process)"/> calls to ensure that thread is suspended (<see cref="M:Tools.DiagnosticsT.ProcessExtensions.Suspend(System.Diagnostics.Process)"/>) and resume thread to it's previous state (<see cref="M:Tools.DiagnosticsT.ProcessExtensions.Resume(System.Diagnostics.Process)"/>).</remarks>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain access to given thread or to resume the thread</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="thread"/> is null.</exception>
</member>
<member name="M:Tools.DiagnosticsT.ProcessExtensions.SuspendThread(System.Int32)">
 <summary>Suspends a thread identified by thread ID</summary>
 <param name="threadId">ID of the thread to be suspended.</param>
 <returns>Actual thread's suspend count. Returns 1 when thread was suspended by this call, returns number >1 if thread was already suspended.</returns>
 <remarks>You can use pair of <see cref="M:Tools.DiagnosticsT.ProcessExtensions.SuspendThread(System.Int32)"/> and <see cref="M:Tools.DiagnosticsT.ProcessExtensions.ResumeThread(System.Int32)"/> calls to ensure that thread is suspended (<see cref="M:Tools.DiagnosticsT.ProcessExtensions.SuspendThread(System.Int32)"/>) and resume thread to it's previous state (<see cref="M:Tools.DiagnosticsT.ProcessExtensions.ResumeThread(System.Int32)"/>).</remarks>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain access to given thread or to suspend the thread</exception>
</member>
<member name="M:Tools.DiagnosticsT.ProcessExtensions.ResumeThread(System.Int32)">
 <summary>Decrements a thread's suspend count of a thread identified by ID. When the suspend count is decremented to zero, the execution of the thread is resumed.</summary>
 <param name="threadId">ID of the thread to be resumed.</param>
 <returns>Actual thread's suspend count. Returns 0 when thread was actually resumed by this call, returns number >0 if thread was not suspended by this call.</returns>
 <remarks>You can use pair of <see cref="M:Tools.DiagnosticsT.ProcessExtensions.SuspendThread(System.Int32)"/> and <see cref="M:Tools.DiagnosticsT.ProcessExtensions.ResumeThread(System.Int32)"/> calls to ensure that thread is suspended (<see cref="M:Tools.DiagnosticsT.ProcessExtensions.SuspendThread(System.Int32)"/>) and resume thread to it's previous state (<see cref="M:Tools.DiagnosticsT.ProcessExtensions.ResumeThread(System.Int32)"/>).</remarks>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain access to given thread or to resume the thread</exception>
</member>
<member name="T:Tools.InteropT.ModuleVersionInformation">
 <summary>Provides versioning information about unmanaged module</summary>
</member>
<member name="M:Tools.InteropT.ModuleVersionInformation.#ctor(Tools.API.Common.VS_FIXEDFILEINFO,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}}})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InteropT.ModuleVersionInformation"/> class</summary>
 <param name="fixedInfo">Fixed file information</param>
 <param name="locData">Localized file information</param>
</member>
<member name="P:Tools.InteropT.ModuleVersionInformation.LocalizedData">
 <summary>Gets localized file information</summary>
</member>
<member name="T:Tools.InteropT.UnmanagedModule">
 <summary>Represents an umnanaged (i.e. Win32) module (i.e. DLL or EXE tec.)</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.InteropT.UnmanagedModule.Handle">
 <summary>Gets handle of the module</summary>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.LoadLibraryAsDataFile(System.String)">
 <summary>Loads an unmanaged module (DLL, EXE, MUI etc.) as datafile for further processing</summary>
 <param name="path">Path to a file to load. It can be any file that is in format of unmanaged executable such as DLL, EXE, MUI, EFX and much other extensions.</param>
 <returns>An instance of <see cref="T:Tools.InteropT.UnmanagedModule"/> class that represents a library loaded as data file.</returns>
 <remarks>Some operations are not available when library is loaded as data file</remarks>
 <exception cref="T:Tools.API.Win32APIException">Failed to load the library</exception>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.LoadLibrary(System.String)">
 <summary>Load an unmanaged module (DLL, EXE, etc.) for further processing or execution</summary>
 <param name="path">Path to a file to load. It can be any file that is in format of unmanaged executable such as DLL, EXE, MUI, EFX and much other extensions.</param>
 <returns>An instance of <see cref="T:Tools.InteropT.UnmanagedModule"/> class that represents a library loaded as data file.</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to load the library</exception>
</member>
<member name="F:Tools.InteropT.UnmanagedModule.versionInfoStringNames">
 <summary>Well-known identifiers for versioning informations</summary>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.GetVersionInformation(System.String)">
 <summary>Gets versioning information from managed or umnanaged module</summary>
 <param name="path">Path of module to get information from</param>
 <returns>Versioning information</returns>
</member>
<member name="F:Tools.InteropT.UnmanagedModule.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.Dispose(System.Boolean)">
 <summary>Implements <see cref="M:System.IDisposable.Dispose"/></summary>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.Finalize">
 <summary>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" /> is reclaimed by garbage collection.</summary>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.GetProcedureAddress(System.String)">
 <summary>Gets a pointer to native method (or variable) in the module</summary>
 <param name="procedureName">Name of the method to get pointer to</param>
 <returns>Pointer to native method with given name</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain method address</exception>
 <remarks>The spelling and case of a function name pointed to by <paramref name="procedureName"/> must be identical to that in the EXPORTS statement of the source DLL's module-definition (.def) file.</remarks>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.TryGetProcedureAddress(System.String)">
 <summary>Attempts to gets a pointer to native method (or variable) in the module</summary>
 <param name="procedureName">Name of the method to get pointer to</param>
 <returns>Pointer to native method with given name, <see cref="F:System.IntPtr.Zero"/> if the method cannot be found or operation failed.</returns>
 <remarks>The spelling and case of a function name pointed to by <paramref name="procedureName"/> must be identical to that in the EXPORTS statement of the source DLL's module-definition (.def) file.</remarks>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.GetResourceTypes">
 <summary>Gets list of types of resources in this module</summary>
 <returns>List of all types of resources in this module</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain resource list</exception>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.GetResourceNames(Tools.InteropT.ResourceTypeIdentifier)">
 <summary>Gets list of all resources of given typ in this module</summary>
 <param name="type">Name of type. To get list of available resource types use <see cref="M:Tools.InteropT.UnmanagedModule.GetResourceTypes"/>.</param>
 <returns>List of names of all resource is this module.</returns>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.GetResourceStream(Tools.InteropT.ResourceTypeIdentifier,Tools.InteropT.ResourceIdentifier)">
 <summary>Gets stream of unmanaged resources of given type and name</summary>
 <param name="type">Type of the resource. To get available types of resources call <see cref="M:Tools.InteropT.UnmanagedModule.GetResourceTypes"/>.</param>
 <param name="identifier">Name of resource. To get available names of resources for particular type use <see cref="M:Tools.InteropT.UnmanagedModule.GetResourceNames(Tools.InteropT.ResourceTypeIdentifier)"/>.</param>
 <returns>A stream that can be used to read resource data.</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to get resource data</exception>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.GetResourceStream(System.IntPtr)">
 <summary>Gets stream of unmanaged resources of given type and name</summary>
 <param name="hRes">Handle to resource</param>
 <returns>A stream that can be used to read resource data.</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain resource data</exception>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.#ctor(System.IntPtr,System.Boolean)">
 <summary>CTor - creates anew instance of the <see cref="T:Tools.InteropT.UnmanagedModule"/> class</summary>
 <param name="hModule">Handle of the module</param>
 <param name="loadedAsDataFile">Indicates if library was loaded as data file</param>
</member>
<member name="P:Tools.InteropT.UnmanagedModule.LoadedAsDataFile">
 <summary>Gets value indicating if the library was loaded as data file or loaded for execution</summary>
 <returns>True if the library was loaded as data file, false if it was loaded for execution</returns>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.LoadString(System.UInt32)">
 <summary>Loads a string from module identified by resource ID</summary>
 <param name="id">ID of string to load</param>
 <returns>The string for given id</returns>
 <remarks>This overload is not CLS-compliant. CLS-compliant overload is provided.</remarks>
 <exception cref="T:Tools.API.Win32APIException">Failed to load string from module</exception>
</member>
<member name="M:Tools.InteropT.UnmanagedModule.LoadString(System.Int64)">
 <summary>Loads a string from module identified by resource ID</summary>
 <param name="id">ID of string to load</param>
 <returns>The string for given id</returns>
 <remarks>This overload is provided only for CLS-compliance</remarks>
 <exception cref="T:Tools.API.Win32APIException">Failed to load string from module</exception>
 <exception cref="T:System.OverflowException"><paramref name="id"/> is greater than <see cref="T:System.UInt32"/> or less than zero</exception>
</member>
<member name="T:Tools.InteropT.ResourceIdentifier">
 <summary>Unmanaged resource identificator</summary>
 <remarks>Win32 resources are identified either using <see cref="T:System.UInt16"/> ID or <see cref="T:System.String"/> name</remarks>
 <version version="1.5.4">This structure is new in version 1.5.4</version>
</member>
<member name="M:Tools.InteropT.ResourceIdentifier.#ctor(System.Int32)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InteropT.ResourceIdentifier"/> structure from resource ID</summary>
 <param name="id">Resource ID</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id"/> is out of range ot type <see cref="T:System.UInt16"/>.</exception>
</member>
<member name="M:Tools.InteropT.ResourceIdentifier.#ctor(System.IntPtr)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InteropT.ResourceIdentifier"/> form a pointer that represents either ID of the resource or name of the resource.</summary>
 <param name="lpszName">Pointer. Value less than or equal to <see cref="T:System.UInt16"/> represents ID otherwise pointer to name.</param>
</member>
<member name="M:Tools.InteropT.ResourceIdentifier.#ctor(System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InteropT.ResourceIdentifier"/> structure from resource name</summary>
 <param name="name">resource name</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null</exception>
</member>
<member name="P:Tools.InteropT.ResourceIdentifier.Id">
 <summary>Gets ID of resource</summary>
 <returns>Resource ID or null</returns>
</member>
<member name="P:Tools.InteropT.ResourceIdentifier.Name">
 <summary>Gets name of resource</summary>
 <returns>Resource name or null</returns>
</member>
<member name="P:Tools.InteropT.ResourceIdentifier.Identifier">
 <summary>Gets resource identifier as object</summary>
 <returns>Either <see cref="T:System.Int32"/> or <see cref="T:System.String"/></returns>
</member>
<member name="M:Tools.InteropT.ResourceIdentifier.ToString">
 <summary>Always gets resource name</summary>
 <returns>Either <see cref="P:Tools.InteropT.ResourceIdentifier.Name"/> or <see cref="P:Tools.InteropT.ResourceIdentifier.Id"/> in form #<see cref="P:Tools.InteropT.ResourceIdentifier.Id"/>.</returns>
</member>
<member name="P:Tools.InteropT.ResourceIdentifier.Empty">
 <summary>Gets an empty instance of <see cref="T:Tools.InteropT.ResourceIdentifier"/></summary>
</member>
<member name="M:Tools.InteropT.ResourceIdentifier.op_Implicit(System.String)~Tools.InteropT.ResourceIdentifier">
 <summary>Converts <see cref="T:System.String"/> to <see cref="T:Tools.InteropT.ResourceIdentifier"/></summary>
 <param name="name">Name of resource</param>
 <returns>A new insdtance of the <see cref="T:Tools.InteropT.ResourceIdentifier"/> structure with <see cref="P:Tools.InteropT.ResourceIdentifier.Name"/> set to <paramref name="name"/>. <see cref="P:Tools.InteropT.ResourceIdentifier.Empty"/> if <paramref name="name"/> is null.</returns>
</member>
<member name="M:Tools.InteropT.ResourceIdentifier.op_Equality(Tools.InteropT.ResourceIdentifier,Tools.InteropT.ResourceIdentifier)">
 <summary>Compares two instances of <see cref="T:Tools.InteropT.ResourceIdentifier"/> for equality</summary>
 <param name="a">A <see cref="T:Tools.InteropT.ResourceIdentifier"/></param>
 <param name="b">A <see cref="T:Tools.InteropT.ResourceIdentifier"/></param>
 <returns>True if the two instances are equal, false otherwise</returns>
</member>
<member name="M:Tools.InteropT.ResourceIdentifier.op_Inequality(Tools.InteropT.ResourceIdentifier,Tools.InteropT.ResourceIdentifier)">
 <summary>Compares two instances of <see cref="T:Tools.InteropT.ResourceIdentifier"/> for inequality</summary>
 <param name="a">A <see cref="T:Tools.InteropT.ResourceIdentifier"/></param>
 <param name="b">A <see cref="T:Tools.InteropT.ResourceIdentifier"/></param>
 <returns>False if the two instances are equal, tue otherwise</returns>
</member>
<member name="M:Tools.InteropT.ResourceIdentifier.Equals(System.Object)">
 <summary>Indicates whether this instance and a specified object are equal.</summary>
 <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
 <param name="obj">Another object to compare to. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.InteropT.ResourceIdentifier.op_Implicit(Tools.InteropT.ResourceTypeIdentifier)~Tools.InteropT.ResourceIdentifier">
 <summary>Converts <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/> to <see cref="T:Tools.InteropT.ResourceIdentifier"/></summary>
 <param name="a">A <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/></param>
 <returns>A new instance of the <see cref="T:Tools.InteropT.ResourceIdentifier"/> initialized to same values as <paramref name="a"/></returns>
</member>
<member name="T:Tools.InteropT.ResourceTypeId">
 <summary>Predefined unmanaged resource types</summary>
 <version version="1.5.4">This enumeration is new in verison 1.5.4</version>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Accelerator">
 <summary>Accelerator table.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.AniCursor">
 <summary>Animated cursor.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.AniIcon">
 <summary>Animated icon.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Bitmap">
 <summary>Bitmap</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Cursor">
 <summary>Hardware-dependent cursor resource.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Dialog">
 <summary>Dialog box.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.DlgInclude">
 <summary>Allows a resource editing tool to associate a string with an .rc file. Typically, the string is the name of the header file that provides symbolic names. The resource compiler parses the string but otherwise ignores the value.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Font">
 <summary>Font resource.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.FontDir">
 <summary>Font directory resource.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.GroupCursor">
 <summary>Hardware-independent cursor resource.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.IconGroup">
 <summary>Hardware-independent icon resource</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Html">
 <summary>HTML resource.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Icon">
 <summary>Hardware-dependent icon resource.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Manifest">
 <summary>Side-by-Side Assembly Manifest.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Menu">
 <summary>Menu resource.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.MessageTable">
 <summary>Message-table entry.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.PlugAndPlay">
 <summary>Plug and Play resource.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Data">
 <summary>Application-defined resource (raw data).</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.String">
 <summary>String-table entry.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Version">
 <summary>Version resource.</summary>
</member>
<member name="F:Tools.InteropT.ResourceTypeId.Vxd">
 <summary>VXD</summary>
</member>
<member name="T:Tools.InteropT.ResourceTypeIdentifier">
 <summary>Identificator of unmanaged resource type</summary>
 <remarks>Win32 resources are identified either using <see cref="T:System.UInt16"/> ID or <see cref="T:System.String"/> name</remarks>
 <version version="1.5.4">This structure is new in version 1.5.4</version>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.#ctor(Tools.InteropT.ResourceTypeId)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InteropT.ResourceIdentifier"/> structure from resource type ID</summary>
 <param name="id">Resource type ID (can be one of predefined values)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id"/> is out of range ot type <see cref="T:System.UInt16"/>.</exception>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.#ctor(System.IntPtr)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InteropT.ResourceIdentifier"/> form a pointer that represents either type ID or name of the type.</summary>
 <param name="lpszName">Pointer. Value less than or equal to <see cref="T:System.UInt16"/> represents ID otherwise pointer to name.</param>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.#ctor(System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InteropT.ResourceIdentifier"/> structure from resource type name</summary>
 <param name="name">resource type name</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null</exception>
</member>
<member name="P:Tools.InteropT.ResourceTypeIdentifier.Id">
 <summary>Gets ID of resource type</summary>
 <returns>Resource ID or null</returns>
</member>
<member name="P:Tools.InteropT.ResourceTypeIdentifier.Name">
 <summary>Gets name of resource type</summary>
 <returns>Resource name or null</returns>
</member>
<member name="P:Tools.InteropT.ResourceTypeIdentifier.Identifier">
 <summary>Gets resource identifier as object</summary>
 <returns>Either <see cref="T:Tools.InteropT.ResourceTypeId"/> or <see cref="T:System.String"/></returns>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.ToString">
 <summary>Always gets resource name</summary>
 <returns>Either <see cref="P:Tools.InteropT.ResourceTypeIdentifier.Name"/> or <see cref="P:Tools.InteropT.ResourceTypeIdentifier.Id"/> in form #<see cref="P:Tools.InteropT.ResourceTypeIdentifier.Id"/>.</returns>
</member>
<member name="P:Tools.InteropT.ResourceTypeIdentifier.Empty">
 <summary>Gets an empty instance of <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/></summary>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.op_Implicit(System.String)~Tools.InteropT.ResourceTypeIdentifier">
 <summary>Converts string to <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/></summary>
 <param name="name">Resource type name</param>
 <returns>A new insnatce of <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/> with <see cref="P:Tools.InteropT.ResourceTypeIdentifier.Name"/> set to <paramref name="name"/>. <see cref="P:Tools.InteropT.ResourceTypeIdentifier.Empty"/> if <paramref name="name"/> is null.</returns>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.op_Implicit(Tools.InteropT.ResourceTypeId)~Tools.InteropT.ResourceTypeIdentifier">
 <summary>Converts <see cref="T:Tools.InteropT.ResourceTypeId"/> to <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/></summary>
 <param name="Id">Identifies resource type</param>
 <returns>A new insnatce of <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/> with <see cref="P:Tools.InteropT.ResourceTypeIdentifier.Id"/> set to <paramref name="id"/>.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="id"/> is out of range ot type <see cref="T:System.UInt16"/>.</exception>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.op_Equality(Tools.InteropT.ResourceTypeIdentifier,Tools.InteropT.ResourceTypeIdentifier)">
 <summary>Compares two instance of <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/> for equality</summary>
 <param name="a">A <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/></param>
 <param name="b">A <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/></param>
 <returns>True if the two instances are equal, false otherwise</returns>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.op_Inequality(Tools.InteropT.ResourceTypeIdentifier,Tools.InteropT.ResourceTypeIdentifier)">
 <summary>Compares two instance of <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/> for inequality</summary>
 <param name="a">A <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/></param>
 <param name="b">A <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/></param>
 <returns>False if the two instances are equal, true otherwise</returns>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.Equals(System.Object)">
 <summary>Indicates whether this instance and a specified object are equal.</summary>
 <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
 <param name="obj">Another object to compare to. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.InteropT.ResourceTypeIdentifier.op_Implicit(Tools.InteropT.ResourceIdentifier)~Tools.InteropT.ResourceTypeIdentifier">
 <summary>Converts <see cref="T:Tools.InteropT.ResourceIdentifier"/> to <see cref="T:Tools.InteropT.ResourceTypeIdentifier"/></summary>
 <param name="a">A <see cref="T:Tools.InteropT.ResourceIdentifier"/></param>
 <returns><see cref="T:Tools.InteropT.ResourceTypeIdentifier"/> with same values as <paramref name="a"/></returns>
</member>
<member name="T:Tools.IOt.UnmanagedMemoryStream">
 <summary>Read-only stream to unmanaged memory</summary>
 <remarks><note type="inheritinfo">Derived class can provide write capabilities. Just override write-related methods.</note></remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.IOt.UnmanagedMemoryStream.release">
 <summary>Used to release the memory</summary>
</member>
<member name="F:Tools.IOt.UnmanagedMemoryStream.pointer">
 <summary>Pointer to memory</summary>
</member>
<member name="F:Tools.IOt.UnmanagedMemoryStream.size">
 <summary>Size of memory area</summary>
</member>
<member name="M:Tools.IOt.UnmanagedMemoryStream.#ctor(System.IntPtr,System.Int32,System.Action)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.IOt.UnmanagedMemoryStream"/> class that own a handle (custom release of unmanaged memory)</summary>
 <param name="pointer">Pointer to unmanaged memory where the stream starts</param>
 <param name="size">Length of unmanaged memory where the stream is located in bytes</param>
 <param name="release">Method to release the unmanaged memory. This method will be called form <see cref="M:System.IO.Stream.Dispose"/> to deallocate the unmanaged memory.</param>
 <remarks>Use this CTor if unmanaged memory should be deallocated when newly created instance is disposed and deallocation logic is not based on handle (<see cref="T:System.IntPtr"/>).</remarks>
</member>
<member name="M:Tools.IOt.UnmanagedMemoryStream.#ctor(System.IntPtr,System.Int32,System.IntPtr,System.Action{System.IntPtr})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.IOt.UnmanagedMemoryStream"/> class that own a handle</summary>
 <param name="pointer">Pointer to unmanaged memory where the stream starts</param>
 <param name="size">Length of unmanaged memory where the stream is located in bytes</param>
 <param name="handle">Handle that was used to obtain <paramref name="pointer"/>. The handle keeps the unmanaged memory allocated.</param>
 <param name="release">Method to release the <paramref name="handle"/>. This method will be called form <see cref="M:System.IO.Stream.Dispose"/> to deallocate the unmanaged memory.</param>
 <remarks>Use this CTor if this instance is exclusive owhen of <paramref name="handle"/>.</remarks>
</member>
<member name="M:Tools.IOt.UnmanagedMemoryStream.#ctor(System.IntPtr,System.Int32)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.IOt.UnmanagedMemoryStream"/> class that does not own a handle</summary>
 <param name="pointer">Pointer to unmanaged memory where the stream starts</param>
 <param name="size">Length of unmanaged memory where the stream is located in bytes</param>
 <remarks>
 Use this constructor only if you know what you are doing!
 This constructor does not take care of releasing the unmanaged memory.
 Caller is responsible for releasing the unmanaged memory.
 Unmanaged memory should be release when it is no longer used.
 Unmanaged memory should not be released untill instance created by this CTor is disposed.
 </remarks>
</member>
<member name="P:Tools.IOt.UnmanagedMemoryStream.CanRead">
 <summary>Gets a value indicating whether the current stream supports reading.</summary>
 <returns>true if the stream supports reading; otherwise, false. This implementation always returns true.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="P:Tools.IOt.UnmanagedMemoryStream.CanSeek">
 <summary>Gets a value indicating whether the current stream supports seeking.</summary>
 <returns>true if the stream supports seeking; otherwise, false. This implementation always returns true.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="P:Tools.IOt.UnmanagedMemoryStream.CanWrite">
 <summary>When overridden in a derived class, gets a value indicating whether the current stream supports writing.</summary>
 <returns>true if the stream supports writing; otherwise, false. This implementation always returns false.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.IOt.UnmanagedMemoryStream.Flush">
 <summary>When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</summary>
 <exception cref="T:System.IO.IOException">An I/O error occurs. (not thrown by this implementation)</exception>
 <exception cref="T:System.NotSupportedException">This implementation always throws this exception.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.IOt.UnmanagedMemoryStream.Length">
 <summary>Gets the length in bytes of the stream.</summary>
 <returns>A long value representing the length of the stream in bytes.</returns>
 <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. (not thrown by this implementation)</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. (not thrown by this implementation)</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="P:Tools.IOt.UnmanagedMemoryStream.Position">
 <summary>Gets or sets the position within the current stream.</summary>
 <returns>The current position within the stream.</returns>
 <exception cref="T:System.IO.IOException">An I/O error occurs. (not thrown by this implementation)</exception>
 <exception cref="T:System.NotSupportedException">The stream does not support seeking. (not thrown by this implementation)</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. (not thrown by this implementation)</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.IOt.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
 <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
 <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
 <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source. </param>
 <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
 <param name="count">The maximum number of bytes to be read from the current stream. </param>
 <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. </exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
 <exception cref="T:System.NotSupportedException">The stream does not support reading. (not thrown by this implementation)</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.IOt.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
 <summary>When overridden in a derived class, sets the position within the current stream.</summary>
 <param name="offset">A byte offset relative to the 
 <paramref name="origin" /> parameter. </param>
 <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
 <returns>The new position within the current stream.</returns>
 <exception cref="T:System.IO.IOException">An I/O error occurs. (not thrown by this implementation)</exception>
 <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. (not thrown by this implementation)</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. (not thrown by this implementation)</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="origin"/> is not one of <see cref="T:System.IO.SeekOrigin"/> values.</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.IOt.UnmanagedMemoryStream.SetLength(System.Int64)">
 <summary>When overridden in a derived class, sets the length of the current stream.</summary>
 <param name="value">The desired length of the current stream in bytes. </param>
 <exception cref="T:System.IO.IOException">An I/O error occurs. (not thrown by this implementation)</exception>
 <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. This implementation always throws this exception.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. (not thrown by this implementation)</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.IOt.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
 <summary>When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
 <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream. </param>
 <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. </param>
 <param name="count">The number of bytes to be written to the current stream. </param>
 <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length. (not thrown by this implementation)</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null. (not thrown by this implementation)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative. (not thrown by this implementation)</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs. (not thrown by this implementation)</exception>
 <exception cref="T:System.NotSupportedException">The stream does not support writing. This implementation always throws this exception.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. (not thrown by this implementation)</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.IOt.UnmanagedMemoryStream.Dispose(System.Boolean)">
 <summary>Releases all resources used by the <see cref="T:System.IO.Stream" />.</summary>
 <param name="disposing">True when disposing, false when finalizing</param>
</member>
<member name="T:Tools.IOt.FileSystemTools">
 <summary>Contains file system-related methods and extension methods</summary>
 <version version="1.5.2">Renamed from FileTystemTools to FileSystemTools</version>
</member>
<member name="M:Tools.IOt.FileSystemTools.GetIcon(Tools.IOt.IPathProvider,System.Boolean,System.Boolean)">
 <summary>Gets icon for given file or folder (including drive and UNC share or server)</summary>
 <param name="PathP">Provides path to get icon for</param>
 <param name="Large">True to get large icon (false to get small icon)</param>
 <returns>Icon that represents given file or folder in operating system. Null if icon obtainment failed.</returns>
 <param name="Overlays">True to add all applicable overlay icons</param>
 <seelaso cref="M:System.Drawing.Icon.ExtractAssociatedIcon(System.String)"/>
 <exception cref="T:System.IO.FileNotFoundException">File or folder <paramref name="Path"/> does not exists.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Path"/> is null</exception>
 <version version="1.5.2">Can get icon for empty removable drive (like CD-ROM without CD in it) and for UNC computer in format \\servername)</version>
</member>
<member name="M:Tools.IOt.FileSystemTools.GetIcon(System.String,System.Boolean,System.Boolean)">
 <summary>Gets icon for given file or folder</summary>
 <param name="Path">Path to get icon for</param>
 <param name="Large">True to get large icon (false to get small icon)</param>
 <returns>Icon that represents given file or folder in operating system</returns>
 <param name="Overlays">True to add all applicable overlay icons</param>
 <seelaso cref="M:System.Drawing.Icon.ExtractAssociatedIcon(System.String)"/>
 <exception cref="T:System.IO.FileNotFoundException">File <paramref name="Path"/> does not exists.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Path"/> is null</exception>
</member>
<member name="M:Tools.IOt.FileSystemTools.ShowProperties(Tools.IOt.Path,System.Windows.Forms.IWin32Window,System.Boolean)">
 <summary>Shows system file properties dialog for given file or directory</summary>
 <param name="Path">Path to file or directory to show dialog for</param>
 <param name="Owner">Owning window. May be null.</param>
 <param name="WaitForClose">Wait for property dialog to be closed. Note: DIalog is not displayed modally.</param>
 <exception cref="T:System.IO.FileNotFoundException">File or directory specified by <paramref name="Path"/> cannot be found</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">Part of path of file or directory specified by <paramref name="Path"/> cannot be found</exception>
 <exception cref="T:System.UnauthorizedAccessException">Assecc to file or directory specified by <paramref name="Path"/> is denied</exception>
 <exception cref="T:Tools.API.Win32APIException">Another Win32 error occured</exception>
 <version version="1.5.2">Method added</version>
</member>
<member name="M:Tools.IOt.FileSystemTools.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
 <summary>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.</summary>
 <param name="path">The file to open.</param>
 <param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
 <param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file.</param>
 <param name="share">A <see cref="T:System.IO.FileShare" /> value specifying the type of access other threads have to the file.</param>
 <returns>A <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
 <exception cref="T:System.ArgumentException">path is a zero-length string.</exception>
 <exception cref="T:System.ArgumentNullException">path is null.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">path specified a file that is read-only and access is not Read.-or- path specified a directory.-or- The caller does not have the required permission. -or-mode is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">mode, access, or share specified an invalid value.</exception>
 <exception cref="T:System.NotSupportedException">path is in an invalid format.</exception>
 <remarks>Use this method instead of <see cref="M:System.IO.File.Open(System.String,System.IO.FileMode)"/> when you need file-like access to something different than file (e.g. NTFS alternate stream or port)</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.IOt.FileSystemTools.TestFileExists(System.String)">
 <summary>Tests if file, stream, device or something other file-like exists</summary>
 <param name="path">Path to file, device etc. to test</param>
 <returns>True if given device or file exists, false otherwise</returns>
 <remarks>Use this instead of <see cref="M:System.IO.File.Exists(System.String)"/> when you are working with something different than file (e.g. NTFS alternate stream or port)</remarks>
</member>
<member name="M:Tools.IOt.FileSystemTools.CreateSymbolicLink(System.String,System.String,System.Nullable{System.Boolean})">
 <summary>Creates a symbolic link</summary>
 <param name="linkTarget">A file or directory to create symbolic link to</param>
 <param name="linkPath">Path where to create symbolic link</param>
 <param name="isDirectory">
 True if <paramref name="linkTarget"/> represents directory.
 False if <paramref name="linkTarget"/> represents file.
 Null to detect (in this case <paramref name="linkTarget"/> must exist).
 </param>
 <remarks>This operation may require administrator privilegies.</remarks>
 <exception cref="T:System.IO.FileNotFoundException"><paramref name="isDirectory"/> is null and <paramref name="linkTarget"/> does not exist.</exception>
 <exception cref="T:System.IO.IOException">Failed to create symbolic link</exception>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="linkTarget"/> or <paramref name="linkPath"/> is null. -or-
 <paramref name="linkTarget"/> is root-relative (\something) or current-working-directoty-relative (X:something) and <paramref name="isDirectory"/> is null. 
 </exception>
 <exception cref="T:System.ArgumentException"><paramref name="linkTarget"/> or <paramref name="linkPath"/> is an empty string.</exception>
 <version version="1.5.4">This method is new in version 1.5.4</version>
</member>
<member name="M:Tools.IOt.FileSystemTools.CreateHardLink(System.String,System.String)">
 <summary>Creates a hard-link</summary>
 <param name="existingFile">File to point hardlink to</param>
 <param name="newFile">Path to store hardlink into</param>
 <remarks>This operation may require administrator privilegies.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="existingFile"/> or <paramref name="newFile"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="existingFile"/> or <paramref name="newFile"/> is an empty string</exception>
 <exception cref="T:System.IO.IOException">Hard link creation failed.</exception>
 <version version="1.5.4">This method is new in version 1.5.4</version>
</member>
<member name="M:Tools.IOt.FileSystemTools.ResolveSymbolicLink(System.String)">
 <summary>Attempts to get target path of symbolic link</summary>
 <param name="symbolicLink">Path of symbolic link</param>
 <returns>Path symbolic link points to. Null if ptah cannot be obtained.</returns>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="T:Tools.IOt.FileSystemTools.TagType">
 <summary>Enumerates symbolic link types</summary>
</member>
<member name="F:Tools.IOt.FileSystemTools.TagType.None">
 <summary>Not detected</summary>
</member>
<member name="F:Tools.IOt.FileSystemTools.TagType.MountPoint">
 <summary>Volume mount point</summary>
</member>
<member name="F:Tools.IOt.FileSystemTools.TagType.SymbolicLink">
 <summary>Symbolic link (file link)</summary>
</member>
<member name="F:Tools.IOt.FileSystemTools.TagType.JunctionPoint">
 <summary>Junction (folder link)</summary>
</member>
<member name="T:Tools.IOt.SharedFolders">
 <summary>Contains static functions for working with Windows (Samba) shared folders</summary>
 <version version="1.5.2" stage="Nightly">Module introduced</version>
</member>
<member name="M:Tools.IOt.SharedFolders.GetSharedFolders(System.String)">
 <summary>Gets list of names of shared folders of given server</summary>
 <param name="server">Name of server (or IP address; excluding leading \\)</param>
 <returns>List of names of folders shared by server. List contains only folder names. To use, each nam must be preppended by \\<paramref name="server"/>\</returns>
 <exception cref="T:Tools.API.Win32APIException">An error occured</exception>
</member>
<member name="T:Tools.IOt.ShellLink">
 <summary>Represents a *.LNK file (also called shortcut or link)</summary>
 <remarks>
 Implementation based on Mattias Sjögren's (© 2001÷2002) example http://www.msjogren.net/dotnet/, mattias@mvps.org.
 <para>This is COM-based implementation. For managed implemetation look at <a href="http://sourceforge.net/projects/shellify/">Shellify</a>.</para>
 </remarks>
</member>
<member name="F:Tools.IOt.ShellLink.link">
 <summary>The <see cref="T:Tools.COM.ShellLink.IShellLinkW"/> object this class is wrapper to</summary>
</member>
<member name="F:Tools.IOt.ShellLink.path">
 <summary>Path of the *.LNK file this link is stored in</summary>
</member>
<member name="M:Tools.IOt.ShellLink.#ctor(Tools.COM.ShellLink.IShellLinkW,System.String)">
 <summary>Creates new instance of <see cref="T:Tools.IOt.ShellLink"/> from <see cref="T:Tools.COM.ShellLink.IShellLinkW"/></summary>
 <param name="link">A <see cref="T:Tools.COM.ShellLink.IShellLinkW"/> object</param>
 <param name="Path">Path where the link will be saved</param>
</member>
<member name="P:Tools.IOt.ShellLink.IShellLinkObject">
 <summary>Gets COM object that represents the link</summary>
 <returns>The object which im plements <see cref="T:Tools.COM.ShellLink.IPersistFile"/> and <see cref="T:Tools.COM.ShellLink.IShellLinkW"/> interfaces</returns>
</member>
<member name="M:Tools.IOt.ShellLink.#ctor(System.String)">
 <summary>Creates new instace of the <see cref="T:Tools.IOt.ShellLink"/> class</summary>
 <param name="existingLink">Path of existing *.LNK file</param>
 <exception cref="T:System.IO.FileNotFoundException">File <paramref name="ExistingLink"/> does not exist</exception>
 <exception cref="T:System.ArgumentException">Link cannot be opened</exception>
 <version version="1.5.4">Parameter <c>ExistingLink</c> renamed co <c>existingLink</c></version>
</member>
<member name="P:Tools.IOt.ShellLink.TargetPath">
 <summary>The path to the shortcut's executable.</summary>
 <remarks>This property is for the shortcut's target path only. Any arguments to the shortcut must be placed in the <see cref="P:Tools.IOt.ShellLink.Arguments"/> property.</remarks>
 <value>The path to the shortcut's executable.</value>
 <returns>The path to the shortcut's executable.</returns>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
 <exception cref="T:System.ArgumentNullException">Value being set is nulll</exception>
 <exception cref="T:System.ArgumentException">Value being set is an empty string.</exception>
 <version version="1.5.4"><see cref="T:System.ArgumentNullException"/> and <see cref="T:System.ArgumentException"/> can be thrown.</version>
</member>
<member name="P:Tools.IOt.ShellLink.RawTargetPath">
 <summary>Gets raw target path of the link</summary>
 <remarks>Raw path may not exist or it may contain environmental variables that need to be resolved</remarks>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.IOt.ShellLink.ShortTargetPath">
 <summary>Gets target path of the link in 8.3 format</summary>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.IOt.ShellLink.WindowStyle">
 <summary>Assigns a window style to a shortcut, or identifies the type of window style used by a shortcut.</summary>
 <value>Sets the window style for the program being run.</value>
 <returns>The WindowStyle property returns an integer.</returns>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
 <exception cref="T:System.ArgumentException">Value being se is <see cref="F:System.Diagnostics.ProcessWindowStyle.Hidden"/></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:System.Diagnostics.ProcessWindowStyle"/></exception>
</member>
<member name="F:Tools.IOt.ShellLink.INFOTIPSIZE">
 <summary>Maximum length of certain COM strings</summary>
</member>
<member name="P:Tools.IOt.ShellLink.Arguments">
 <summary>Link argumens</summary>
 <returns>Arguments</returns>
 <value>Arguments</value>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
 <version version="1.5.4">Docuimentation fix: Removed remarks. Returns now reads Arguments (previously in remarks).</version>
</member>
<member name="P:Tools.IOt.ShellLink.Hotkey">
 <summary>Gets or sets the hotkey for the shortcut.</summary>
</member>
<member name="P:Tools.IOt.ShellLink.IconPath">
 <summary>Assigns an icon to a shortcut, or identifies the icon assigned to a shortcut.</summary>
 <value>A string that locates the icon. The string should contain a fully qualified path associated with the icon.</value>
 <returns>Identifies the icon assigned to a shortcut</returns>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
 <seelaso cref="P:Tools.IOt.ShellLink.IconIndex"/>
</member>
<member name="P:Tools.IOt.ShellLink.IconIndex">
 <remarks>Gets or sets 0-based index of icon within file <see cref="P:Tools.IOt.ShellLink.IconPath"/></remarks>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
 <seelaso cref="P:Tools.IOt.ShellLink.IconPath"/>
</member>
<member name="P:Tools.IOt.ShellLink.Description">
 <summary>Shortcut description</summary>
 <value>The Description property contains a string value describing a shortcut.</value>
 <remarks>Returns a shortcut's description.</remarks>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
</member>
<member name="P:Tools.IOt.ShellLink.WorkingDirectory">
 <summary>Assign a working directory to a shortcut, or identifies the working directory used by a shortcut.</summary>
 <value>String. Directory in which the shortcut starts.</value>
 <returns>String. Directory in which the shortcut starts.</returns>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
</member>
<member name="P:Tools.IOt.ShellLink.FullName">
 <summary>Returns the fully qualified path of the shortcut object's target.</summary>
 <returns>The <see cref="P:Tools.IOt.ShellLink.FullName"/> property contains a read-only string value indicating the fully qualified path to the shortcut's target.</returns>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
</member>
<member name="P:Tools.IOt.ShellLink.IsDirty">
 <summary>Returns value indicating if link properties has been changed since it was loaded from file</summary>
 <returns>
 True if a property of this object has benn changed since it was loaded from a *.lnk file.
 Always returns true if this instance has not been loaded from file (i.e. a new link is being created).
 </returns>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="M:Tools.IOt.ShellLink.GetTargetPath(Tools.COM.ShellLink.SLGP_FLAGS)">
 <summary>Gets link path of specified ty</summary>
 <param name="flags">Specifies which type of path to retrieve</param>
 <returns>Target path of the link</returns>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
</member>
<member name="M:Tools.IOt.ShellLink.Save">
 <summary>Saves a shortcut object to disk.</summary>
 <remarks>You must use this method to confir changes made to shortcut. The Save method uses the information in the shortcut object's FullName property to determine where to save the shortcut object on a disk. You can only create shortcuts to system objects. This includes files, directories, and drives (but does not include printer links or scheduled tasks).</remarks>
 <exception cref="T:System.ObjectDisposedException">The <see cref="P:Tools.IOt.ShellLink.Disposed"/> property is true</exception>
 <exception cref="T:System.IO.FileNotFoundException">File <see cref="P:Tools.IOt.ShellLink.FullName"/> was not found</exception>
 <exception cref="T:System.IO.IOException">Exception ocured while writing to file <see cref="P:Tools.IOt.ShellLink.FullName"/></exception>
</member>
<member name="M:Tools.IOt.ShellLink.SaveAs(System.String)">
 <summary>Saves a shortcut object to disk on different place then where it is saved now</summary>
 <param name="Path">Path to be saved</param>
 <remarks>Invoking this method cnages value of the <see cref="P:Tools.IOt.ShellLink.FullName"/> property</remarks>
 <exception cref="T:System.IO.FileNotFoundException">File <paramref name="Path"/> was not found</exception>
 <exception cref="T:System.IO.IOException">Exception ocured while writing to file <paramref name="Path"/></exception>
 <version version="1.5.4">Parameter <c>Path</c> renamed to <c>path</c></version>
</member>
<member name="M:Tools.IOt.ShellLink.SetRelativePath(System.String)">
 <summary>Sets the relative path to the Shell link object.</summary>
 <param name="relativePath">String contains the new relative path. It should be a file name, not a folder name.</param>
 <remarks>
 Clients commonly define a relative link when it may be moved along with its target, causing the absolute path to become invalid. The SetRelativePath method can be used to help the link resolution process find its target based on a common path prefix between the target and the relative path. To assist in the resolution process, clients should set the relative path as part of the link creation process.
 </remarks>
 <version version="1.5.4">Parameter name <c>RelativePath</c> changed to <c>relativePath</c></version>
</member>
<member name="F:Tools.IOt.ShellLink.combineOptionsWith">
 <summary>Specifies defauult flags to be added to flags of every <see cref="M:Tools.COM.ShellLink.IShellLinkW.Resolve(System.IntPtr,Tools.COM.ShellLink.SLR_FLAGS)"/> call</summary>
</member>
<member name="M:Tools.IOt.ShellLink.Resolve(Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)">
 <summary>Attempts to find the target of a Shell link, even if it has been moved or renamed.</summary>
 <param name="options">Indicates option for link resolve</param>
 <param name="owner">Parent window to show any dialogs in context of</param>
 <remarks>
 This methods attempts to resolve the link.
 If <see cref="P:Tools.IOt.ShellLink.TargetPath"/> is already valid trhis method does nothing.
 If <see cref="P:Tools.IOt.ShellLink.TargetPath"/> is not valid the method attempts to resolve the link according to <paramref name="options"/>.
 If it succeeds it sets <see cref="P:Tools.IOt.ShellLink.IsDirty"/> to true.
 <note>If <see cref="P:Tools.IOt.ShellLink.IsDirty"/> is true before this method is called it is never changed to false. This method is typically called on instances with <see cref="P:Tools.IOt.ShellLink.IsDirty"/> false (i.e. links just read from a file).</note>
 <para>There several possible workflows with <see cref="M:Tools.IOt.ShellLink.Resolve(System.Int16,Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)"/>, e.g.:</para>
 <list type="bullet">
 <item>
 Optimistic:
 <list type="number">
 <item>Check if <see cref="P:Tools.IOt.ShellLink.TargetPath"/> is valid. If it is use it.</item>
 <item>If it is not call <see cref="M:Tools.IOt.ShellLink.Resolve(System.Int16,Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)"/>.</item>
 <item>If <see cref="P:Tools.IOt.ShellLink.IsDirty"/> is true check if <see cref="P:Tools.IOt.ShellLink.TargetPath"/> is valid. If it is use it. If it is not error.</item>
 </list>
 </item>
 <item>
 Pesimistic:
 <list type="number">
 <item>Call <see cref="M:Tools.IOt.ShellLink.Resolve(System.Int16,Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)"/></item>
 <item>Check if <see cref="P:Tools.IOt.ShellLink.TargetPath"/> is valid. If it is use it. If it is not error.</item>
 </list>
 </item>
 <item>
 Two-level:
 <list type="number">
 <item>
 Call <see cref="M:Tools.IOt.ShellLink.Resolve(System.Int16,Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)"/> with <paramref name="options"/> containing <see cref="F:Tools.IOt.LinkResolveOptions.NoUi"/>.
 <note>You can use overload which allows to specify timeout in this case.</note>
 </item>
 <item>Check if <see cref="P:Tools.IOt.ShellLink.TargetPath"/> is valid. If it is use it.</item>
 <item>If it is not call <see cref="M:Tools.IOt.ShellLink.Resolve(System.Int16,Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)"/> without <paramref name="options"/> containing <see cref="F:Tools.IOt.LinkResolveOptions.NoUi"/>.</item>
 <item>Check if <see cref="P:Tools.IOt.ShellLink.IsDirty"/> is true. If it is chekc if <see cref="P:Tools.IOt.ShellLink.TargetPath"/> is valid. If it is use it. If it is not error.</item>
 </list>
 </item>
 </list>
 <para>When <paramref name="options"/> contains <see cref="F:Tools.IOt.LinkResolveOptions.NoUi"/> default timeout of 3 seconds is used.</para>
 <para>If this method changes <see cref="P:Tools.IOt.ShellLink.IsDirty"/> from false to true consider calling <see cref="M:Tools.IOt.ShellLink.Save"/> to save the changes method has done to the link.</para>
 </remarks>
 <version version="1.5.4">This method is new in version 1.5.4</version>
</member>
<member name="M:Tools.IOt.ShellLink.Resolve(System.Int16,Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)">
 <summary>Attempts to find the target of a Shell link, even if it has been moved or renamed.</summary>
 <param name="timeout">Timeout (in millliseconds) to try to resolve link for. If zero default timeout of 3 seconds (3000 milliseconds) is used.</param>
 <param name="options">Indicates option for link resolve. <see cref="F:Tools.IOt.LinkResolveOptions.NoUi"/> is always added (OR-ed) to this value.</param>
 <param name="owner">Parent window to show any dialogs in context of</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout"/> is less than zero.</exception>
 <remarks>
 For details how this method works see overload <see cref="M:Tools.IOt.ShellLink.Resolve(Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)"/>.
 <para>If this method changes <see cref="P:Tools.IOt.ShellLink.IsDirty"/> from false to true consider calling <see cref="M:Tools.IOt.ShellLink.Save"/> to save the changes method has done to the link.</para>
 </remarks>
 <version version="1.5.4">This method is new in version 1.5.4</version>
</member>
<member name="M:Tools.IOt.ShellLink.CreateLink(System.String,System.String,System.String)">
 <summary>Creates new *.LNK link</summary>
 <param name="Target">Link target</param>
 <param name="LinkLocation">Full path where the link will be stored (including the *.lnk extension)</param>
 <param name="Arguments">Optional. Arguments for launching link target</param>
 <returns>Instance of link that was created. The link is saved.</returns>
 <remarks>Link extension must be *.lnk!</remarks>
 <exception cref="T:System.ArgumentException">
 File or directory with path <paramref name="LinkLocation"/> already exists
 -or-
 Link cannot be created.
 -or-
 <paramref name="target"/> or <paramref name="linkLocation"/> is an empty string.
 </exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="target"/> or <paramref name="linkLocation"/> is null</exception>
 <version version="1.5.4">Parameter names changed to camelCase</version>
 <version version="1.5.4"><see cref="T:System.ArgumentNullException"/> can be thrown.</version>
 <version stage="1.5.4"><see cref="T:System.ArgumentException"/> is also thrown when <paramref name="target"/> or <paramref name="linkLocation"/> is an empty string.</version>
</member>
<member name="M:Tools.IOt.ShellLink.ResolveLink(System.String)">
 <summary>Resolves link target</summary>
 <param name="link">Address of *.LNK file</param>
 <returns>Address of link target. Returns null when link cannot be resolved (i.e. <paramref name="link"/> is not valid *.LNK file)</returns>
 <remarks>This method does not issue any dialog to user. This method does not attempt to resolve invalid links. To resolve invalid link use <see cref="M:Tools.IOt.ShellLink.Resolve(System.Int16,Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)"/>.</remarks>
 <exception cref="T:System.IO.FileNotFoundException">File <paramref name="link"/> does not exist</exception>
</member>
<member name="M:Tools.IOt.ShellLink.ResolveLink(Tools.IOt.Path)">
 <summary>Resolves link target</summary>
 <param name="link">Address of *.LNK file</param>
 <returns>Address of link target. Returns null when link cannot be resolved (i.e. <paramref name="link"/> is not valid *.LNK file)</returns>
 <remarks>This method does not issue any dialog to user. This method does not attempt to resolve invalid links. To resolve invalid link use <see cref="M:Tools.IOt.ShellLink.Resolve(System.Int16,Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)"/>.</remarks>
 <exception cref="T:System.IO.FileNotFoundException">File <paramref name="link"/> does not exist</exception>
</member>
<member name="F:Tools.IOt.ShellLink.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="P:Tools.IOt.ShellLink.Disposed">
 <summary>Gets value idicationg if object was disposed</summary>
 <remarks>If object was disposed it is not valid to perform actions on it</remarks>
</member>
<member name="M:Tools.IOt.ShellLink.Dispose(System.Boolean)">
 <summary><see cref="T:System.IDisposable"/></summary>
</member>
<member name="M:Tools.IOt.ShellLink.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member>
<member name="T:Tools.IOt.LinkResolveOptions">
 <summary>This enumeration indicates options used by <see cref="M:Tools.IOt.ShellLink.Resolve(System.Int16,Tools.IOt.LinkResolveOptions,System.Windows.Forms.IWin32Window)"/> method to indicate how to resolve *.lnk target</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.IOt.LinkResolveOptions.none">
 <summary>No special optiosn are set</summary>
</member>
<member name="F:Tools.IOt.LinkResolveOptions.NoUi">
 <summary>Do not display a dialog box if the link cannot be resolved.</summary>
</member>
<member name="F:Tools.IOt.LinkResolveOptions.NoSearch">
 <summary>Do not execute the search heuristics.</summary>
</member>
<member name="F:Tools.IOt.LinkResolveOptions.NoDistributedTracking">
 <summary> Do not use distributed link tracking.</summary>
</member>
<member name="F:Tools.IOt.LinkResolveOptions.NoTrackingAtAll">
 <summary>Do not use distributed link tracking and do not track links to UNC paths whose drive letter has changed.</summary>
</member>
<member name="F:Tools.IOt.LinkResolveOptions.InvokeMsi">
 <summary>Call the Windows Installer.</summary>
</member>
<member name="F:Tools.IOt.LinkResolveOptions.OfferDelete">
 <summary>(Only Windows 7 and later) Offer the option to delete the shortcut when this method is unable to resolve it, even if the shortcut is not a shortcut to a file.</summary>
</member>
<member name="F:Tools.IOt.LinkResolveOptions.KnownFolder">
 <summary>(Only Windows 7 and later) Set <see cref="P:Tools.IOt.ShellLink.IsDirty"/> to true if link target is a known folder and the known folder was redirected.</summary>
 <remarks>This only works if the original target path was a file system path or ID list and not an aliased known folder ID list.</remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeNative">
 <summary>Provides binding to Windows-native Unicode-related functions</summary>
 <version version="1.5.4">This module is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeNative.GetCharacterName(System.UInt32)">
 <summary>Gets localized name uf Unicode character</summary>
 <param name="codePoint">Code point to get localizaed name of</param>
 <returns>
 Localized name of character represented by <paramref name="codePoint"/>. The name is localized to current system locale, not to current thread UI culture.
 Returns null if <paramref name="codePoint"/> is not supported by Windows function for getting character names (i.e. <paramref name="codePoint"/> is greater than <see cref="F:System.UInt16.MaxValue"/>) or if name cannot be obtained or windows function call failed.
 </returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePoint"/> is greater than 0x10FFFF</exception>
 <remarks>
 <para>This function is not CLS-Compliant. CLS-compliant overload exists.</para>
 <para>This function relies on undocumented Windows API <c>GetUName</c>. It is possible that this API will be changed or removed in future version of Windows and this function will become slow and start returning nullls for all calls. It can also possibly carsh your application or system. Use on own risk.</para>
 </remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeNative.GetCharacterName(System.Int32)">
 <summary>Gets localized name uf Unicode character (CLS-compliant version)</summary>
 <param name="codePoint">Code point to get localizaed name of</param>
 <returns>
 Localized name of character represented by <paramref name="codePoint"/>. The name is localized to current system locale, not to current thread UI culture.
 Returns null if <paramref name="codePoint"/> is not supported by Windows function for getting character names (i.e. <paramref name="codePoint"/> is greater than <see cref="F:System.UInt16.MaxValue"/>) or if name cannot be obtained or windows function call failed.
 </returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePoint"/> is greater than 0x10FFFF or less than zero.</exception>
 <remarks>
 <para>This function is not CLS-Compliant. CLS-compliant overload exists.</para>
 <para>This function relies on undocumented Windows API <c>GetUName</c>. It is possible that this API will be changed or removed in future version of Windows and this function will become slow and start returning nullls for all calls. It can also possibly carsh your application or system. Use on own risk.</para>
 </remarks>
</member>
<member name="T:Tools.WindowsT.InteropT.NativeInteropExtensions">
 <summary>Provides extension functions for interoperability between Windows Forms and WPF. Functions provided by this module are dependend on Windows API calls and thus are not portable.</summary>
 <seealso cref="T:Tools.WindowsT.InteropT.InteropExtensions"/>
 <version version="1.5.3">This module is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.InteropT.NativeInteropExtensions.ToBitmapSourceFast(System.Drawing.Bitmap)">
 <summary>Converts <see cref="T:System.Drawing.Bitmap"/> to <see cref="T:System.Windows.Media.Imaging.BitmapSource"/></summary>
 <param name="bitmap">A <see cref="T:System.Drawing.Bitmap"/></param>
 <returns><see cref="T:System.Windows.Media.Imaging.BitmapSource"/> providing access to <paramref name="bitmap"/>. Null when <paramref name="bitmap"/> is null.</returns>
 <remarks>Based on <a href="http://stackoverflow.com/questions/94456/load-a-wpf-bitmapimage-from-a-system-drawing-bitmap">http://stackoverflow.com/questions/94456/load-a-wpf-bitmapimage-from-a-system-drawing-bitmap</a>.
 <para>Version not dependent on Windows API is provided by <see cref="M:Tools.WindowsT.InteropT.InteropExtensions.ToBitmapSource(System.Drawing.Bitmap)"/>, but this implementation is supposed to be more effficient.</para>
 </remarks>
 <seelaso cref="M:Tools.WindowsT.InteropT.InteropExtensions.ToBitmapSource(System.Drawing.Bitmap)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.NativeInteropExtensions.ToBitmapSourceFast(System.Drawing.Image)">
 <summary>Converts <see cref="T:System.Drawing.Image"/> to <see cref="T:System.Windows.Media.Imaging.BitmapSource"/></summary>
 <param name="image">A <see cref="T:System.Drawing.Image"/></param>
 <returns><see cref="T:System.Windows.Media.Imaging.BitmapSource"/> providing access to <paramref name="bitmap"/>. Null when <paramref name="bitmap"/> is null.</returns>
 <remarks>Version not dependent on Windows API is provided by <see cref="M:Tools.WindowsT.InteropT.InteropExtensions.ToBitmapSource(System.Drawing.Bitmap)"/>, but this implementation is supposed to be more effficient.
 <see cref="M:Tools.WindowsT.InteropT.InteropExtensions.ToBitmapSource(System.Drawing.Bitmap)"/> is called when actual type of <paramref name="image"/> is not <see cref="T:System.Drawing.Bitmap"/>, when it is overload for <see cref="T:System.Drawing.Bitmap"/> is called.
 </remarks>
 <seelaso cref="M:Tools.WindowsT.InteropT.InteropExtensions.ToBitmapSource(System.Drawing.Bitmap)"/>
</member>
<member name="T:Tools.WindowsT.WPF.InputT.MouseT">
 <summary>Provides additional mouse events for WPF such as horizontal scrolling</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.#ctor">
 <summary>Private CTor to achieve pseudo-static class</summary>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="F:Tools.WindowsT.WPF.InputT.MouseT.HorizontalMouseWheelEvent">
 <summary>Provides metadata for the <c>HorizontalMouseWheel</c> event</summary>
 <remarks>The event occurs when horizonlat mouse wheel is scrolled (this is bubbling event)</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.AddHorizontalMouseWheelHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
 <summary>Adds an event handler for the <c>HorizontalMouseWheel</c> event</summary>
 <param name="d">Dependency object to add handler for</param>
 <param name="handler">The handler to be invoked</param>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.RemoveHorizontalMouseWheelHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
 <summary>Removes an event handler from the <c>HorizontalMouseWheel</c> event</summary>
 <param name="d">Dependency object to remove handler for</param>
 <param name="handler">The handler to be removed</param>
</member>
<member name="F:Tools.WindowsT.WPF.InputT.MouseT.PreviewHorizontalMouseWheelEvent">
 <summary>Provides metadata for the <c>PreviewHorizontalMouseWheel</c> event</summary>
 <remarks>The event occurs when horizonlat mouse wheel is scrolled (this is tunelling event)</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.AddPreviewHorizontalMouseWheelHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
 <summary>Adds an event handler for the <c>PreviewHorizontalMouseWheel</c> event</summary>
 <param name="d">Dependency object to add handler for</param>
 <param name="handler">The handler to be invoked</param>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.RemovePreviewHorizontalMouseWheelHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
 <summary>Removes an event handler from the <c>PreviewHorizontalMouseWheel</c> event</summary>
 <param name="d">Dependency object to remove handler for</param>
 <param name="handler">The handler to be removed</param>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.GetHorizontalMouseWheelRegistrationCounter(System.Windows.DependencyObject)">
 <summary>Gets value of the <c>HorizontalMouseWheelRegistrationCounter</c> private attached dependency property</summary>
 <param name="element">Element to get value for</param>
 <returns>Value of the private attached dependency property <c>HorizontalMouseWheelRegistrationCounter</c> for <paramref name="element"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.SetHorizontalMouseWheelRegistrationCounter(System.Windows.DependencyObject,System.Int32)">
 <summary>Sets value of the <c>HorizontalMouseWheelRegistrationCounter</c> private attached dependency property</summary>
 <param name="element">Element to set value for</param>
 <param name="value">New value of the <c>HorizontalMouseWheelRegistrationCounter</c> private attached dependency property</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
</member>
<member name="F:Tools.WindowsT.WPF.InputT.MouseT.HorizontalMouseWheelRegistrationCounterProperty">
 <summary>Metadata of the <c>HorizontalMouseWheelRegistrationCounter</c> private attached dependenvy property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.UIElement)">
 <summary>Registers receieving of horizontal mouse wheel events for given <see cref="T:System.Windows.UIElement"/></summary>
 <param name="element">Element to register receieving of horizontal mouse wheel events for</param>
 <remarks>
 Calling this method registers horizonla mouse wheel events for entire <see cref="T:System.Windows.PresentationSource"/> <paramref name="element"/> belongs to and if <see cref="T:System.Windows.PresentationSource"/> for <paramref name="element"/> changes events are registered for new <see cref="T:System.Windows.PresentationSource"/>.
 <para>Calling rhis method multiple times on same <paramref name="element"/> does nothing. Due to internal registration counter it's necessary to call <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.UnregisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> as many times as <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> was called to unregistere the events.</para>
 <para>If element "jumps" between different presentation sources, current implementation supports horizontal mosue wheel events only inside <see cref="T:System.Windows.Interop.HwndSource"/>. Horizontal mouse wheel events in other types of presentation sources are not provided (by this implementation).</para>
 </remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException">Cannot retrieve <see cref="T:System.Windows.PresentationSource"/> for <paramref name="element"/>.</exception>
 <exception cref="T:System.NotSupportedException"><see cref="T:System.Windows.PresentationSource"/> for <paramref name="element"/> is not <see cref="T:System.Windows.Interop.HwndSource"/>.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.UnregisterHorizontalMouseWheelEvents(System.Windows.UIElement)">
 <summary>Unregisters receieving mouse wheel events for given <see cref="T:System.Windows.UIElement"/>.</summary>
 <param name="element">Element to unregister receieving of horizontal mouse wheel events for</param>
 <remarks>
 In case <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> was called multiple times for this <paramref name="element"/> <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.UnregisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> must be called at least as mayn time as <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> was called to really unregister the events.
 <para>If horizontal mouse wheel events were registrered for another control in the same <see cref="T:System.Windows.PresentationSource"/> they must be unregisterered for that control as well.</para>
 <para>This method is provided as compagnon to <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> but calle shall not rely on not receieving any horizontal mouse wheel events after calling this method.</para>
 </remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException">Cannot retrieve <see cref="T:System.Windows.PresentationSource"/> for <paramref name="element"/>.</exception>
 <exception cref="T:System.NotSupportedException"><see cref="T:System.Windows.PresentationSource"/> for <paramref name="element"/> is not <see cref="T:System.Windows.Interop.HwndSource"/>.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)">
 <summary>Registers horizontal mouse wheel events for given <see cref="T:System.Windows.PresentationSource"/></summary>
 <param name="src">A <see cref="T:System.Windows.PresentationSource"/> to register events within</param>
 <remarks>If this method is called multiple times it has no effect. Only due to internal call counter it's necessary to call <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.UnregisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> as mayn time as <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> was called for the <paramref name="src"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="src"/> is nulll</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="src"/> is not <see cref="T:System.Windows.Interop.HwndSource"/></exception>
 <threadsafety>This method is thread-safe. This method contains critical section shared with <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.UnregisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/>.</threadsafety>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.UnregisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)">
 <summary>Unregisters horizontal mouse wheel events for given <see cref="T:System.Windows.PresentationSource"/>.</summary>
 <param name="src">A <see cref="T:System.Windows.PresentationSource"/> to unregister the events from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="src"/> is nulll</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="src"/> is not <see cref="T:System.Windows.Interop.HwndSource"/></exception>
 <remarks>In case the <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> method was called more than once for <paramref name="src"/> <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.UnregisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> must be called as many time s as <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/> was called. Note that horizobtal mouse wheel registration for <see cref="T:System.Windows.UIElement"/> also registeres horizontal mouse wheel events for <see cref="T:System.Windows.PresentationSource"/>.</remarks>
 <threadsafety>This method is thread-safe. This method contains critical section shared with <see cref="M:Tools.WindowsT.WPF.InputT.MouseT.RegisterHorizontalMouseWheelEvents(System.Windows.PresentationSource)"/>.</threadsafety>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseT.OnSourceChanged(System.Object,System.Windows.SourceChangedEventArgs)">
 <summary>Called when presentation source for an element which has horizontal mouse wheel events registered changes</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event arguments</param>
</member>
<member name="T:Tools.WindowsT.WPF.NativeExtensions">
 <summary>Provides extension methods for Windows Presentation Foundation which provide functionality based on native Win 32 API</summary>
 <seealso cref="T:Tools.WindowsT.NativeT.Win32Window"/>
 <version version="1.5.3" stage="Nightly">This module is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.NativeExtensions.HideIcon(System.Windows.Window)">
 <summary>Hides icon of window, so it's no longed displayed</summary>
 <remarks>This method should be called from <see cref="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)"/></remarks>
 <seelaso cref="M:Tools.WindowsT.NativeT.Win32Window.HideIcon"/>
</member>
<member name="F:Tools.WindowsT.WPF.NativeExtensions.globallyHideNullIconsOfWindowsRegistered">
 <summary>Indicates if class handler was registered for <see cref="T:System.Windows.Window">Window</see>.<see cref="F:System.Windows.FrameworkElement.LoadedEvent">LoadedEvent</see></summary>
</member>
<member name="P:Tools.WindowsT.WPF.NativeExtensions.GloballyHideNullIconsOfWindows">
 <summary>Gets or sets value indicating if icons of all WPF windows in this application with <see cref="P:System.Windows.Window.Icon"/> null will be hidden</summary>
 <remarks>This property affacts all <see cref="T:System.Windows.Window">Windows</see> with <see cref="P:System.Windows.Window.Icon"/> = null in current application domain. This property should be set during application startup and then should not be changed. When changed it has effect only on newly opened System.Windows.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.NativeExtensions.OnWindowLoaded(System.Object,System.Windows.RoutedEventArgs)">
 <summary>When <see cref="P:Tools.WindowsT.WPF.NativeExtensions.GloballyHideNullIconsOfWindows"/> is true executed whenever window is loaded</summary>
 <param name="sender">A <see cref="T:System.Windows.Window"/>.</param>
 <param name="e">Event arguments</param>
</member>
<member name="F:Tools.WindowsT.WPF.NativeExtensions.windows">
 <summary>Keeps list of windows handlers were addded to</summary>
</member>
<member name="M:Tools.WindowsT.WPF.NativeExtensions.OnWindowClosed(System.Object,System.EventArgs)">
 <summary>Called whenever window <see cref="M:Tools.WindowsT.WPF.NativeExtensions.OnWindowLoaded(System.Object,System.Windows.RoutedEventArgs)"/> added handlers to is closed</summary>
 <param name="sender">A <see cref="T:System.Windows.Window"/></param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.NativeExtensions.OnIconChanged(System.Object,System.EventArgs)">
 <summary>Called whenever icon of window changes</summary>
 <param name="sender">A <see cref="T:System.Windows.Window"/></param>
 <param name="e">Event arguments</param>
</member>
<member name="T:Tools.WindowsT.FormsT.ControlsWin">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.ApplicationCommand_d">
<summary>
Looks up a localized string similar to 'Raised when an application comand is received by form'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.Children_d">
<summary>
Looks up a localized string similar to 'Gets all childrens of current windows'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.CloseBox_d">
<summary>
Looks up a localized string similar to 'Determines if form has close box in upper-right corner in its caption bar. Note: The X button doesn&apos;t disappear, its only grayed (even not grayed on Vista). So, use rather CloseBoxEnabled.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.CloseBoxEnabled_d">
<summary>
Looks up a localized string similar to 'Gets or sets state of the close button (&apos;X&apos;) of current form. Cannot be chaged when CloseBox is False.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.Handle_c">
<summary>
Looks up a localized string similar to 'Handle'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.LowLevel_c">
<summary>
Looks up a localized string similar to 'Low-level'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.NoWindow">
<summary>
Looks up a localized string similar to '&lt;no window&gt;'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.Relationship_c">
<summary>
Looks up a localized string similar to 'Relationship'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.SizeAndPosition_c">
<summary>
Looks up a localized string similar to 'Size and position'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.WindowProperties_c">
<summary>
Looks up a localized string similar to 'Window properties'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ControlsWin.WindowStateChanged_d">
<summary>
Looks up a localized string similar to 'Raised after the WindowState property is changed'.
</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.ApplicationCommand_dFormat">
<summary>
The stub formatting method returning the ApplicationCommand_d property value.
</summary>
<returns>The ApplicationCommand_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.Children_dFormat">
<summary>
The stub formatting method returning the Children_d property value.
</summary>
<returns>The Children_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.CloseBox_dFormat">
<summary>
The stub formatting method returning the CloseBox_d property value.
</summary>
<returns>The CloseBox_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.CloseBoxEnabled_dFormat">
<summary>
The stub formatting method returning the CloseBoxEnabled_d property value.
</summary>
<returns>The CloseBoxEnabled_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.Handle_cFormat">
<summary>
The stub formatting method returning the Handle_c property value.
</summary>
<returns>The Handle_c property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.LowLevel_cFormat">
<summary>
The stub formatting method returning the LowLevel_c property value.
</summary>
<returns>The LowLevel_c property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.NoWindowFormat">
<summary>
The stub formatting method returning the NoWindow property value.
</summary>
<returns>The NoWindow property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.Relationship_cFormat">
<summary>
The stub formatting method returning the Relationship_c property value.
</summary>
<returns>The Relationship_c property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.SizeAndPosition_cFormat">
<summary>
The stub formatting method returning the SizeAndPosition_c property value.
</summary>
<returns>The SizeAndPosition_c property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.WindowProperties_cFormat">
<summary>
The stub formatting method returning the WindowProperties_c property value.
</summary>
<returns>The WindowProperties_c property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ControlsWin.WindowStateChanged_dFormat">
<summary>
The stub formatting method returning the WindowStateChanged_d property value.
</summary>
<returns>The WindowStateChanged_d property value.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.ExtendedForm">
 <summary><see cref="T:System.Windows.Forms.Form"/> with additional functionality based on Win32 API</summary>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><c>VersionAttribute</c> and <c>AuthorAttribute</c> removed</version>
</member>
<member name="T:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState">
 <summary>Possible states of system menu</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Disabled">
 <summary>Indicates that the menu item is disabled, but not grayed, so it cannot be selected, but visually seems like it can be selected. Button in title bar is greyed.
 Note: User CANNOT press Alt+F4 (or use another method exluding force methods (kill)) to close window if used by instance member (not static (shared)) <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/>; if used with static (shared) <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> user CAN use Alt+F4 (or other 'soft' methods) to close window.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Enabled">
 <summary>Indicates that the menu item is enabled and restored from a grayed state so that it can be selected.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Grayed">
 <summary>Indicates that the menu item is disabled and grayed so that it cannot be selected. Button in title bar is greyed.
 Note: User CANNOT press Alt+F4 (or use another method exluding force methods (kill)) to close window if used by instance member (not static (shared)) <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/>; if used with static (shared) <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> user CAN use Alt+F4 (or other 'soft' methods) to close window.</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuItemEnabled(System.Int32,Tools.API.GUI.SystemMenuItems)">
 <summary>Gets or sets state of selected item of system menu of window represented by <paramref name="WindowHandle"/></summary>
 <param name="MenuItem">Item of system menu (NOTE: Only <see cref="F:Tools.API.GUI.SystemMenuItems.SC_CLOSE"/> works)</param>
 <param name="WindowHandle">Handle to window which's menu should be queryed or altered</param>
 <value>New state of menu item</value>
 <returns>Curent state of menu item</returns>
 <remarks>Getter is little bit destructive - it sets menu state to <see cref="F:Tools.API.GUI.enmEnableMenuItemStatus.MF_ENABLED"/> in order to get its state and then renew its state to just got value</remarks>
 <exception cref="T:System.ArgumentException">Given <paramref name="MenuItem"/> doesnt exists</exception> 
</member>
<member name="F:Tools.WindowsT.FormsT.ExtendedForm._CloseBoxEnabled">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled">
 <summary>Gets or sets state of the close button ('X') of current <see cref="T:Tools.WindowsT.FormsT.ExtendedForm"/></summary>
 <value>New state of button</value>
 <returns>Curent state of button</returns>
 <remarks>Status of menu is not re-set after changing <see cref="P:System.Windows.Forms.Form.MinimizeBox"/> or <see cref="P:System.Windows.Forms.Form.MaximizeBox"/> property. You have to refresh user-visible status of this property manually!</remarks>
 <exception cref="T:System.ArgumentException">Error while accessing system menu status (may be caused by no close item in system menu - e.g. because <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox"/> is false)</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.ExtendedForm.ShouldSerializeCloseBoxEnabled">
 <summary>Determines if designer should serialize the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> property's value</summary>
 <returns>True when <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> is not <see cref="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Enabled"/> and <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox"/> is True</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ExtendedForm.ResetCloseBoxEnabled">
 <summary>Resets the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> property to its default value <see cref="F:Tools.WindowsT.FormsT.ExtendedForm.SystemMenuState.Enabled"/></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled(System.Windows.Forms.IWin32Window)">
 <summary>Gets or sets state of the close button ('X') of given <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
 <param name="Window">Window (form) to get or set state of close button</param>
 <value>New state of button</value>
 <returns>Curent state of button</returns>
 <remarks>Value set via static (shared) property may be lost when window if minimized, maximized or restored</remarks>
 <exception cref="T:System.ArgumentException">Error while accessing system menu status (may be caused by no close item in system menu)</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled(System.IntPtr)">
 <summary>Gets or sets state of the close button ('X') of window with given handle</summary>
 <param name="WindowHandle">Handle of window to get or set state of close button</param>
 <value>New state of button</value>
 <returns>Curent state of button</returns>
 <remarks>Value set via static (shared) property may be lost when window if minimized, maximized or restored</remarks>
 <exception cref="T:System.ArgumentException">Error while accessing system menu status (may be caused by no close item in system menu)</exception>
</member>
<member name="F:Tools.WindowsT.FormsT.ExtendedForm._CloseBox">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox">
 <summary>Determines if form has close box in upper-right corner in its caption bar</summary>
 <remarks>Setting this property to false causes mennuitem "Close" disappearing and the X button being grayed. User CANNOT use Alt+F4 or other 'non-killing' method to close the window. Property <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> cannot be changed while <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBox"/> is False.
 You'd better use <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/>
 Windows Vista: The close (X) button is NOT grayed but does nothing when user click it.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ExtendedForm.ApplyCloseBoxEnabled">
 <summary>(Re)applies the <see cref="P:Tools.WindowsT.FormsT.ExtendedForm.CloseBoxEnabled"/> property on the system menu</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.ExtendedForm.WindowStateChanged">
 <summary>Raised after the <see cref="P:System.Windows.Forms.Form.WindowState"/> property is changed</summary>
 <param name="sender">source of the event</param>
 <param name="e">Event params (always <see cref="F:System.EventArgs.Empty"/>)</param>
</member>
<member name="M:Tools.WindowsT.FormsT.ExtendedForm.OnWindowStateChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ExtendedForm.WindowStateChanged"/> event</summary>
 <param name="e">Event arguments (always <see cref="F:System.EventArgs.Empty"/>)</param>
 <remarks>Note to inheritors: Always call base class's method in order the event to be raised and additional functionalidy maintained in base class's method to work properly</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ExtendedForm.WndProc(System.Windows.Forms.Message@)">
 <summary>Processes Windows messages.</summary>
 <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process. </param>
 <remarks>Note for inheritors: Always call base class's method <see cref="M:Tools.WindowsT.FormsT.ExtendedForm.WndProc(System.Windows.Forms.Message@)"/> unless you should block certain base class's functionality</remarks>
</member>
<member name="E:Tools.WindowsT.FormsT.ExtendedForm.ApplicationCommand">
 <summary>Raised when an application command is received by form</summary>
 <remarks>When form ius not foreground it receives the event only when there is no other application that handles it.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ExtendedForm.OnApplicationCommand(Tools.WindowsT.FormsT.ApplicationCommandEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ExtendedForm.ApplicationCommand"/> event</summary>
 <param name="e">Event erguments</param>
 <remarks>Note to inheritors: In order the event to be raised call base class method</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.ApplicationCommandEventArgs">
 <summary>Argument of the <see cref="E:Tools.WindowsT.FormsT.ExtendedForm.ApplicationCommand"/> event</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ApplicationCommandEventArgs.#ctor(System.Int32)">
 <summary>CTor from <see cref="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND"/> lParam</summary>
 <param name="lParam">lParam from the <see cref="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND"/> message</param>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationCommandEventArgs.lParam">
 <summary>lParam from the <see cref="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND"/> message</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.ApplicationCommandEventArgs.Devices">
 <summary>Identifies source device kind of application commnd</summary>
 <seelaso cref="T:Tools.API.Messages.lParam.WM_APPCOMMANDDevices"/>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationCommandEventArgs.Devices.Keyboard">
 <summary>User pressed a key.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationCommandEventArgs.Devices.Mouse">
 <summary>User clicked a mouse button.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationCommandEventArgs.Devices.Unknown">
 <summary>An unidentified hardware source generated the event. It could be a mouse or a keyboard event.</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ApplicationCommandEventArgs.Device">
 <summary>Identifies source device of application command</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ApplicationCommandEventArgs.Command">
 <summary>Identifies the application command</summary>
 <returns>Command that was sent to application</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.ApplicationComands">
 <summary>Application command</summary>
 <remarks>These commands are sent to applications as windows messages.</remarks>
 <seelaso cref="T:Tools.API.Messages.lParam.WM_APPCOMMANDCommands"/>
 <seelaso cref="E:Tools.WindowsT.FormsT.ExtendedForm.ApplicationCommand"/>
 <seelaso cref="M:Tools.WindowsT.FormsT.ExtendedForm.OnApplicationCommand(Tools.WindowsT.FormsT.ApplicationCommandEventArgs)"/>
 <seelaso cref="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND"/>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BassBoost">
 <summary>Toggle the bass boost on and off.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BassDown">
 <summary>Decrease the bass.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BassUp">
 <summary>	Increase the bass.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BrowserBack">
 <summary>	Navigate backward.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BrowserFavorites">
 <summary>	Open favorites.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BrowserForward">
 <summary>	Navigate forward.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BrowserHome">
 <summary>	Navigate home.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BrowserRefresh">
 <summary>	Refresh page.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BrowserSearch">
 <summary>Open search.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.BrowserStop">
 <summary>Stop download.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.LaunchApp1">
 <summary>	Start App1.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.LaunchApp2">
 <summary>	Start App2.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.LaunchMail">
 <summary>	Open mail.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.LaunchMediaSelect">
 <summary>	Go to Media Select mode.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MediaNextTrack">
 <summary>Go to next track.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MediaPlayPause">
 <summary>	Play or pause playback.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MediaPreviousTrack">
 <summary>Go to previous track.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MediaStop">
 <summary>	Stop playback.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.TrebleDown">
 <summary>	Decrease the treble.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.TrebleUp">
 <summary>	Increase the treble.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.VolumeDown">
 <summary>	Lower the volume.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Mute">
 <summary>	Mute the volume.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.VolumeUp">
 <summary>	Raise the volume.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MicrophoneMute">
 <summary>Windows XP: Mute the microphone.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MicrophoneVolumeDown">
 <summary>Windows XP: Decrease microphone volume.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MicrophoneVolumeUp">
 <summary>	Windows XP: Increase microphone volume.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Close">
 <summary>Windows XP: Close the window (not the application).</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Copy">
 <summary>Windows XP: Copy the selection.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.CorrectionList">
 <summary>Windows XP: Brings up the correction list when a word is incorrectly identified during speech input.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Cut">
 <summary>Windows XP: Cut the selection.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.DictateOrCommandControlToggle">
 <summary>Windows XP: Toggles between two modes of speech input: dictation and command/control (giving commands to an application or accessing menus).</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Find">
 <summary>Windows XP: Open the Find dialog.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.ForwardMail">
 <summary>Windows XP: Forward a mail message.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Help">
 <summary>Windows XP: Open the Help dialog.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.ChannelDown">
 <summary>Windows XP SP1: Decrement the channel value, for example, for a TV or radio tuner.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.ChannelUp">
 <summary>Windows XP SP1: Increment the channel value, for example, for a TV or radio tuner.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.FastForward">
 <summary>Windows XP SP1: Increase the speed of stream playback. This can be implemented in many ways, for example, using a fixed speed or toggling through a series of increasing speeds.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MediaPause">
 <summary>Windows XP SP1: Pause. If already paused, take no further action. This is a direct PAUSE command that has no state. If there are discrete Play and Pause buttons, applications should take action on this command as well as APPCOMMAND_MEDIA_PLAY_PAUSE.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MediaPlay">
 <summary>Windows XP SP1: Begin playing at the current position. If already paused, it will resume. This is a direct PLAY command that has no state. If there are discrete Play and Pause buttons, applications should take action on this command as well as APPCOMMAND_MEDIA_PLAY_PAUSE.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MediaRecord">
 <summary>Windows XP SP1: Begin recording the current stream.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MediaRewind">
 <summary>Windows XP SP1: Go backward in a stream at a higher rate of speed. This can be implemented in many ways, for example, using a fixed speed or toggling through a series of increasing speeds.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MicrophoneOnOffToggle">
 <summary>Windows XP: Toggle the microphone.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.New">
 <summary>Windows XP: Create a new window.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Open">
 <summary>Windows XP: Open a window.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Pase">
 <summary>Windows XP: Paste</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Print">
 <summary>Windows XP: Print current document.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Redo">
 <summary>Windows XP: Redo last action.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.MailReply">
 <summary>Windows XP: Reply to a mail message.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Save">
 <summary>Windows XP: Save current document.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.SendMail">
 <summary>Windows XP: Send a mail message.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.SpellCheck">
 <summary>Windows XP: Initiate a spell check.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Undo">
 <summary>Windows XP: Undo last action.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Delete">
 <summary>Windows Vista: Delete</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ApplicationComands.Flip3D">
 <summary>Windows Vista: Flip 3D (as WinKey+Tab)</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.ScreenSaverBase">
 <summary>Provides common base for implementing Windows screensawers</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><c>VersionAttribute</c> and <c>AuthorAttribute</c> removed</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.Run(System.String[])">
 <summary>Runs a screensaver</summary>
 <param name="cmd">Application command line arguments (excluding executable name)</param>
 <remarks>Use this method as only think called by application. Implemented screen saver will take care about everything else. Alternatively you can use <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.Run``1(System.String[])"/> method.</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.ScreenSaverBase.W32">
 <summary>Simply implements <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ScreenSaverBase.W32.hWnd">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ScreenSaverBase.W32.Handle"/> property</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.W32.#ctor(System.IntPtr)">
 <summary>CTor</summary>
 <param name="hWnd">Handle</param>
</member>
<member name="P:Tools.WindowsT.FormsT.ScreenSaverBase.W32.Handle">
 <summary>Gets the handle to the window represented by the implementer.</summary>
 <returns>A handle to the window represented by the implementer.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.Run``1(System.String[])">
 <summary>Creates new instance of ScreenSaver implementation and runs it</summary>
 <param name="cmd">Application command line arguments (excluding executable name)</param>
 <typeparam name="T">Implementation of ScreenSaverBase</typeparam>
 <remarks>Use this method as only think called by application. Implemented screen saver will take care about everything else. Alternatively you can use <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.Run(System.String[])"/> method of new instance of screen saver implementation.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.GetScreenForm(System.Windows.Forms.Screen)">
 <summary>Creates instance of form for one screen. Called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/> as 1st method.</summary>
 <param name="Screen">Screen form is created for. Can be null if form is created for preview mode.</param>
 <returns>Default implementation returns new unmodified instance of <see cref="T:System.Windows.Forms.Form"/></returns>
 <remarks>
 You should override this method if you do not <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/>.
 The purpose of this method is to create instance of form for one screen. You can completely ignore the <paramref name="Screen"/> parameter. You should not use the <paramref name="Screen"/> parameter for sizing and positioning your form - it is done in <see cref="M:Tools.WindowsT.FormsT.FormatScreenForm(System.Windows.Forms.Form,System.Windows.Forms.Screen)"/>.
 </remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatScreenForm(System.Windows.Forms.Form)">
 <summary>Perform screen-independent setup of form.  Called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/> as 2nd method.</summary>
 <param name="Form">Form to setup.</param>
 <remarks>
 If you override <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.GetScreenForm(System.Windows.Forms.Screen)"/> you can perform such setup also there. In this case this method should be overriden with do-nothing method.
 Default implementation sets <see cref="P:System.Windows.Forms.Form.BackColor"/> to <see cref="P:System.Drawing.Color.Black"/>,
 <see cref="P:System.Windows.Forms.Form.FormBorderStyle"/> to <see cref="F:System.Windows.Forms.FormBorderStyle.None"/>,
 <see cref="P:System.Windows.Forms.Form.TopMost"/> to <c>True</c> and 
 <see cref="P:System.Windows.Forms.Form.ShowInTaskbar"/> to <c>False</c>.
 </remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatScreenForm(System.Windows.Forms.Form,System.Windows.Forms.Screen)">
 <summary>Performs screen-aware setup of form. Called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/> as 3rd method.</summary>
 <param name="Form">Form to perform setup on</param>
 <param name="Screen">Screen to perform setup for</param>
 <remarks>Default implementation makes <paramref name="Form"/> completely covering <paramref name="Screen"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.HookFormEvents(System.Windows.Forms.Form)">
 <summary>Hooks events for form created by <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.GetScreenForm(System.Windows.Forms.Screen)"/>. Called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver"/> as 4th method.</summary>
 <param name="Form">Form to hook eventf for</param>
 <remarks>Default implementation hooks <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.OnAcion(System.Windows.Forms.Form,System.EventArgs)"/> to <see cref="E:System.Windows.Forms.Control.MouseDown"/> and <see cref="E:System.Windows.Forms.Control.KeyDown"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.OnAcion(System.Windows.Forms.Form,System.EventArgs)">
 <summary>In case you use default implementation fo <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.HookFormEvents(System.Windows.Forms.Form)"/> this method is called for <see cref="E:System.Windows.Forms.Control.MouseDown"/> and <see cref="E:System.Windows.Forms.Control.KeyDown"/> of each screen form.</summary>
 <param name="sender">For that causes the event</param>
 <param name="e">Event parameters</param>
 <remarks>Default implementation closes all forms containded in <see cref="P:Tools.WindowsT.FormsT.ScreenSaverBase.RunningForms"/> (in thread-safe way)</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.ScreenSaverBase._RunningForms">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ScreenSaverBase.RunningForms"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ScreenSaverBase.RunningForms">
 <summary>When screen-saver is running should contain all the forms that performs screen-saving</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaver">
 <summary>Runs the screen saver</summary>
 <remarks>Default implementation calls <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunScreenSaverOnScreen(System.Windows.Forms.Screen)"/> for each screen in single thread.</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.ScreenSaverBase.ThreadingApartment">
 <summary>Gets <see cref="T:System.Threading.ApartmentState"/> used by screen threads</summary>
 <returns>Default implementation returns <see cref="F:System.Threading.ApartmentState.MTA"/></returns>
 <remarks>Override this property if you want to work with COM objects and return <see cref="F:System.Threading.ApartmentState.STA"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunPreviewLow(System.Int32)">
 <summary>Low-level implementation of preview</summary>
 <param name="hWnd">Handle of control to display preview in</param>
 <remarks>Default implementation creates new panel and places it into window with handle <paramref name="hWnd"/>. If it succedes calls <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunPreview(System.Windows.Forms.Control)"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.RunPreview(System.Windows.Forms.Control)">
 <summary>Runs preview of screen saver</summary>
 <param name="Target">Control to display preview in</param>
 <remarks>
 Default implementation creates screen form using <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.GetScreenForm(System.Windows.Forms.Screen)"/> (with null argument), 
 performs it's screen-independent setup using <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatScreenForm(System.Windows.Forms.Form)"/>,
 sets <see cref="P:System.Windows.Forms.Form.TopLevel"/> to <c>False</c> and <see cref="P:System.Windows.Forms.Control.Parent"/> to <paramref name="Target"/>,
 performs forms's screen-aware setup using <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatPreviewForm(System.Windows.Forms.Form)"/>,
 calls <see cref="M:Tools.WindowsT.FormsT.ScreenSaverBase.HookPreviewFormEvents(System.Windows.Forms.Form)"/>
 adds form into <see cref="P:Tools.WindowsT.FormsT.ScreenSaverBase.RunningForms"/>, 
 and calls <see cref="M:System.Windows.Forms.Application.Run"/> on that form 
 </remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.FormatPreviewForm(System.Windows.Forms.Form)">
 <summary>Performs specific seeting of screen form for displaying it in preview mode</summary>
 <param name="Form">Form to setup. It is already placed in container.</param>
 <remarks>Default implementation sets size and position fo form to fit in its parent.
 To get control in which form is placed, see <see cref="P:System.Windows.Forms.Control.Parent"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ScreenSaverBase.HookPreviewFormEvents(System.Windows.Forms.Form)">
 <summary>Allows to hook for events of screen form used for preview</summary>
 <param name="Form">Form to hook on</param>
 <remarks>Default implementation does nothing</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.ScreenSaverBase.SettingsForm">
 <summary>If implemented in derived class gets instance of form used to setup the screensaver</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties">
 <summary>Gives acces of hyperlink settings of Internet Explorer</summary>
 <remarks>See also <seealso cref="T:Tools.DrawingT.SystemColorsExtension"/></remarks>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><c>VersionAttribute</c> and <c>AuthorAttribute</c> removed</version>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.#ctor">
 <summary>Private CTor to achieve pseudo-static class</summary>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.Color">
 <summary>Color of not visited not hovered hyperlink</summary>
 <remarks>This system value can be also accesed via <see cref="P:System.Windows.Forms.ToolStripLabel.LinkColor"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.VisitedColor">
 <summary>Color of visited hyperlink</summary>
 <remarks>This system value can be also accesed via <see cref="P:System.Windows.Forms.ToolStripLabel.VisitedLinkColor"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.HoveredColor">
 <summary>Color of hovered (active) hyperlink</summary>
 <remarks>This system value can be also accesed via <see cref="P:System.Windows.Forms.ToolStripLabel.ActiveLinkColor"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.Behavior">
 <summary>System defined link behavior (this is actual setting of Internet Explorer)</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.LinkFontDecoration(System.Drawing.Font,System.Windows.Forms.LinkBehavior)">
 <summary>Decorates given <see cref="T:System.Drawing.Font"/> according to given <see cref="T:System.Windows.Forms.LinkBehavior"/> applyed on non-hovered link</summary>
 <param name="Base">Base font to be decorated</param>
 <param name="Behavior">Link behavior used to decorate <paramref name="Base"/>. If ommited system setting is used</param>
 <returns><paramref name="Base"/> underlined or not according to <paramref name="Behavior"/> or system settings</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkProperties.HoverLinkFontDecoration(System.Drawing.Font,System.Windows.Forms.LinkBehavior)">
 <summary>Decorates given <see cref="T:System.Drawing.Font"/> according to given <see cref="T:System.Windows.Forms.LinkBehavior"/> applyed on hovered link</summary>
 <param name="Base">Base font to be decorated</param>
 <param name="Behavior">Link behavior used to decorate <paramref name="Base"/>. If ommited system setting is used</param>
 <returns><paramref name="Base"/> underlined or not according to <paramref name="Behavior"/> or system settings</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities">
 <summary>Copy of Micforoft's internal System.Windows.Forms.LinkUtilities class that gives access to link setting of Internet Explorer</summary>
 <remarks>This is 1:1 copy of <see cref="T:System.Windows.Forms.LinkUtilities"/> got by Reflector</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.#ctor">
 <summary>Private CTor to achieve pseudo-static class</summary>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.EnsureLinkFonts(System.Drawing.Font,System.Windows.Forms.LinkBehavior,System.Drawing.Font@,System.Drawing.Font@)">
 <summary>Gets link fonts</summary>
 <param name="baseFont">Default font</param>
 <param name="link">Custom link behavior, pass <see cref="F:System.Windows.Forms.LinkBehavior.SystemDefault"/> to use system default</param>
 <param name="linkFont">Out. Link font</param>
 <param name="hoverLinkFont">Out. Hovered link font</param>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.GetIEColor(System.String)">
 <summary>Gets IE color by its name</summary>
 <param name="name">Name of color</param>
 <returns>Value of color with name <paramref name="name"/></returns>
 <permission cref="T:System.Security.Permissions.RegistryPermission"/>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.GetIELinkBehavior">
 <summary>Gets system-defined default link behavior</summary>
 <returns>System-defined default link behavior</returns>
 <permission cref="T:System.Security.Permissions.RegistryPermission"/>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEActiveLinkColor">
 <summary>Color of active hyperlink</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IELinkColor">
 <summary>Color of hyperlink</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEVisitedLinkColor">
 <summary>Color of visited hyperlink</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities._IEActiveLinkColor">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEActiveLinkColor"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEAnchorColor">
 <summary>Name of property that stores hyperlink color</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEAnchorColorHover">
 <summary>Name of property that stores hovered hyperlink color</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEAnchorColorVisited">
 <summary>Name of property that stores visited hyperlink color</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities._IELinkColor">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IELinkColor"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEMainRegPath">
 <summary>Path of main IE regsitry key</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IESettingsRegPath">
 <summary>Path of settings IE registry key</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities._IEVisitedLinkColor">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.LinkUtilities.IEVisitedLinkColor"/> property</summary>
</member>
<member name="T:Tools.WindowsT.NativeT.Win32Window">
 <summary>Represents native window used in Microsoft Windows</summary>
 <remarks>This class can be used to manipulate windows and controls that originates from non-.NET applications as well as .NET ones. It can be used in 64b environment as well.</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><c>VersionAttribute</c> and <c>AuthorAttribute</c> removed</version>
</member>
<member name="F:Tools.WindowsT.NativeT.Win32Window._Handle">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> property</summary>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.Int32)">
 <summary>CTor from <see cref="T:System.Int32"/> handle</summary>
 <param name="hWnd">Handle to window</param>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.IntPtr)">
 <summary>CTor from <see cref="T:System.IntPtr"/> handle</summary>
 <param name="hWnd">Handle to window</param>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.Windows.Forms.Control)">
 <summary>CTor from <see cref="T:System.Windows.Forms.Control"/> (including <see cref="T:System.Windows.Forms.Form"/>)</summary>
 <param name="Control">Control to create new instance from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Control"/> is null</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.ClassName">
 <summary>Gets class name of the window</summary>
 <remarks>When actual class name of window is longer than 1024 characters (which is inprobable) it's truncated to 1024 characters</remarks>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain window class name (i.g. window handle is invalid)</exception>
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.chNull``1(``0,System.String)">
 <summary>Checks if given object is null. Throws <see cref="T:System.ArgumentNullException"/> if so.</summary>
 <param name="obj">Object to check</param>
 <param name="param">Name of parameter, passed to <see cref="P:System.ArgumentException.ParamName"/>.</param>
 <typeparam name="T">Type of object being checked. Must be reference type.</typeparam>
 <returns><paramref name="obj"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.Windows.Forms.IWin32Window)">
 <summary>CTor from <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
 <param name="Window">Window to create new instance from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.#ctor(System.Windows.Window)">
 <summary>CTor from <see cref="T:System.Windows.Window"/></summary>
 <param name="Window"><see cref="T:System.Windows.Window"/> to create new instance from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Implicit(System.Windows.Forms.Control)~Tools.WindowsT.NativeT.Win32Window">
 <summary>Converts <see cref="T:System.Windows.Forms.Control"/> to <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.Control"/></param>
 <returns>A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> with same handle as <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Implicit(System.Windows.Window)~Tools.WindowsT.NativeT.Win32Window">
 <summary>Converts <see cref="T:System.Windows.Window"/> to <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
 <param name="a">A <see cref="T:System.Windows.Window"/></param>
 <returns>A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> with same handle as <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Handle">
 <summary>Gets the handle to the window represented by the implementer.</summary>
 <returns>A handle to the window represented by the implementer.</returns>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.hWnd">
 <summary>Same as <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> but <see cref="T:System.Int32"/></summary>
</member>
<member name="F:Tools.WindowsT.NativeT.Win32Window.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Dispose(System.Boolean)">
 <summary>Sets <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> to zero</summary>
 <remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <remarks>Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.</remarks>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Clone__">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance.</returns>
 <remarks>Use type-safe <see cref="M:Tools.WindowsT.NativeT.Win32Window.Clone"/> instead</remarks>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Clone_">
 <summary>Implements <see cref="M:Tools.ICloneable`1.Clone"/></summary>
 <returns><see cref="M:Tools.WindowsT.NativeT.Win32Window.Clone"/></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Clone">
 <summary>Creates new instance of <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> pointing to same window as curent instance</summary>
 <returns>New instance pointing to same window as current instance</returns>
 <remarks>In fact there is no need to clone <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> object, because it has no internal state other than <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/></remarks>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Parent">
 <summary>Gets or sets parent of current Window</summary>
 <value>A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> to reparent current window into. Can be null to un-parent current window completely.</value>
 <returns>Current parent of current window. Can return null if current window has no parent or there was error when obtaining parent (ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid)</returns>
 <exception cref="T:Tools.API.Win32APIException">Setting failed. It may indicate that <see cref="P:Tools.WindowsT.NativeT.Win32Window.hWnd"/> does not point to existing window or attempt to set parent to the same window or to one of children.</exception>
 <remarks>Setting value to <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> of zero has the same effect as setting it to null.
 Non-top-level windows (such as button) cannot be unparented. Setting null for shuch window will cause window to be parented into desktop - not by this implementation but by the OS.</remarks>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.AddToList``1(System.Collections.Generic.List{``0},``0)">
 <summary>Adds <paramref name="item"/> to <paramref name="List"/> and returns true</summary>
 <param name="List"><see cref="T:System.Collections.Generic.List`1"/> to add item to</param>
 <param name="item">Item to be added</param>
 <typeparam name="T">Type of <paramref name="item"/></typeparam>
 <returns>True</returns>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Children">
 <summary>Gets all childrens of current windows</summary>
 <returns>Childrens of current window</returns>
 <exception cref="T:Tools.API.Win32APIException">Error while enumerating System.Windows. Ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.ParentHandle">
 <summary>Gets or sets handle of current window's parent</summary>
 <value>Handle to window to parent current window into. Set to 0 if window should be parented into desktop.</value>
 <returns>Handle of current window's parent. Zero if current window has no parent.</returns>
 <exception cref="T:Tools.API.Win32APIException">Error when setting parent. It may be caused by invalid <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> or invalid <see cref="P:Tools.WindowsT.NativeT.Win32Window.ParentHandle"/> being set</exception>
 <remarks>It's recomended to use <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> instead.
 Non-top-level windows (such as button) cannot be unparented. Setting zero for shuch window will cause window to be parented into desktop - not by this implementation but by the OS.</remarks>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.WindowLong(Tools.API.Public.WindowLongs)">
 <summary>Gets or sets specified window long of current window</summary>
 <param name="Long">Long to get or set. Can be one of <see cref="T:Tools.API.Public.WindowLongs"/> values or can be any user-defined integer</param>
 <value>New value of window long</value>
 <returns>Current value of window long</returns>
 <exception cref="T:Tools.API.Win32APIException">Getting or setting of value failed (i.e. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid or <paramref name="Long"/> is invalid)</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Move(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
 <summary>Changes window position and size</summary>
 <param name="Height">New height of window in px</param>
 <param name="Left">New x coordinate of left edge of the window in px</param>
 <param name="Repaint">Forces window to repaint its content after moving - default is true</param>
 <param name="Top">New y coordinate of top edge of the window in px</param>
 <param name="Width">New width of window in px</param>
 <exception cref="T:Tools.API.Win32APIException">Moving failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
 <remarks>
 In some multi-monitor configurations the <paramref name="Top"/> and <see cref="P:Tools.WindowsT.NativeT.Win32Window.Left"/> can be negative and it does not necesarilly mean that window is positioned outside the desktop.
 For top-level windows screen coordinates are used. For windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> parent's coordinates are used.
 </remarks>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Move(System.Drawing.Rectangle)">
 <summary>Changes window position and size to specified <see cref="T:System.Drawing.Rectangle"/></summary>
 <param name="Rectangle">Defines new window size and position</param>
 <remarks><paramref name="Rectangle"/>.<see cref="P:System.Drawing.Rectangle.Location">Location</see> should be in screen coordibates for top-level windows and in parent's coordinates for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/></remarks>
 <exception cref="T:Tools.API.Win32APIException">Moving failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Area">
 <summary>Gets or sets rectangle covered by the window</summary>
 <returns>Current rectangle covered by the window</returns>
 <value>New rectangle covered by the window</value>
 <remarks>For top-level windows screen coordinates are used. For windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> coordinates of parent are used.</remarks>
 <exception cref="T:Tools.API.Win32APIException">Setting or obtaining window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Size">
 <summary>Gets or sets the size of the window</summary>
 <value>New size of the window. Position will be unchanged</value>
 <returns>Current size of the window</returns>
 <exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Location">
 <summary>Gets or sets location of the window</summary>
 <value>New position of top left corner of window. Size will ne unchanged.</value>
 <returns>Current position of window top left corner</returns>
 <remarks>For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
 <exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Left">
 <summary>Gets or sets x coordinale of left edge of the window.</summary>
 <value>New x coordinate of left edge of the window</value>
 <returns>Current x coordinate of left edge of the window</returns>
 <remarks>In some multi-monitor configurations the left edge of desktop can be negative number. In such case <see cref="P:Tools.WindowsT.NativeT.Win32Window.Left"/> can be also negative and it does not necesarilly mean that the window is outside of the desktop.
 For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
 <exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Top">
 <summary>Gets or sets y coordinate of top edge of the window.</summary>
 <value>New y coordinate of top edge of the window</value>
 <returns>Current y coordinate of top edge of the window</returns>
 <remarks>In some multi-monitor configurations the top edge of desktop can be negative number. In such case <see cref="P:Tools.WindowsT.NativeT.Win32Window.Top"/> can be also negative and it does not necesarilly mean thet the window is outside of the desktop.
 For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
 <exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Width">
 <summary>Gets or sets width of the window</summary>
 <value>New width of the window</value>
 <returns>Current width of the window</returns>
 <exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Height">
 <summary>Gets or sets height of the window</summary>
 <value>New height of the window</value>
 <returns>Current height of the window</returns>
 <exception cref="T:Tools.API.Win32APIException">Setting or obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Right">
 <summary>Gets x coordinate of right edge of the window</summary>
 <returns>Current x-coordinate of right edge of the window</returns>
 <remarks>For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
 <exception cref="T:Tools.API.Win32APIException">Obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Bottom">
 <summary>Gets y coordinate of bottom edge of the window</summary>
 <returns>Current y-coordinate of bottom edge of the window</returns>
 <remarks>For top-level windows the location is in screen coordinates, for windows with <see cref="P:Tools.WindowsT.NativeT.Win32Window.Parent"/> in parent' coordinates.</remarks>
 <exception cref="T:Tools.API.Win32APIException">Obtaining of window's rectangle failed, ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.ScreenArea">
 <summary>Gets or sets window area in screen coordinates (even for non-top-level windows)</summary>
 <returns>Current area that windows covers on screen</returns>
 <value>New area to cover</value>
 <exception cref="T:Tools.API.Win32APIException">Error while setting or obtaining the area (ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid)</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.SendMessage(Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Sends a window message to current window</summary>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message parameter wParam - meaning depends on <paramref name="message"/>.</param>
 <param name="lParam">Message parameter lParam - meaning depends on <paramref name="message"/>.</param>
 <returns>Messsage return value - meaning depends on <paramref name="message"/>.</returns>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.SendMessageString(Tools.API.Messages.WindowMessages,System.Int32,System.String)">
 <summary>Sends a window message with string <paramref name="lParam"/> to current window</summary>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message parameter wParam - meaning depends on <paramref name="message"/>.</param>
 <param name="lParam">Message parameter lParam - meaning depends on <paramref name="message"/>. Pointer to string is passed to message.</param>
 <returns>Messsage return value - meaning depends on <paramref name="message"/>.</returns>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.SendMessageString(Tools.API.Messages.WindowMessages,System.Int32,System.Text.StringBuilder)">
 <summary>Sends a window message with <see cref="T:System.Text.StringBuilder"/> <paramref name="lParam"/> to current window</summary>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message parameter wParam - meaning depends on <paramref name="message"/>.</param>
 <param name="lParam">Message parameter lParam - meaning depends on <paramref name="message"/>. Pointer to string is passed to message.</param>
 <returns>Messsage return value - meaning depends on <paramref name="message"/>. Messages that write to <paramref name="lParam"/> usually return number of characters written</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="lParam"/> is null</exception>
 <remarks>If message is expected to write characters to <paramref name="lParam"/> the <see cref="P:System.Text.StringBuilder.Capacity"/> must be set to maximum number of characters expected to be returned by the message before the message is sent.</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.SendMessageStructure(Tools.API.Messages.WindowMessages,System.Int32,System.ValueType)">
 <summary>Sends a window message with pointer-to-structure <paramref name="lParam"/> to current window</summary>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message parameter wParam - meaning depends on <paramref name="message"/>.</param>
 <param name="lParam">Message parameter lParam - meaning depends on <paramref name="message"/>. Pointer to given structure is passed to message.</param>
 <returns>Messsage return value - meaning depends on <paramref name="message"/>.</returns>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.SendMessageByRefStruct(Tools.API.Messages.WindowMessages,System.Int32,System.ValueType@)">
 <summary>Sends a window message with pointer-to-structure <paramref name="lParam"/> to current window and allow message target to change values in this structure</summary>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message parameter wParam - meaning depends on <paramref name="message"/>.</param>
 <param name="lParam">Message parameter lParam - meaning depends on <paramref name="message"/>. Pointer to given structure is passed to message. When message ends this parameter is assigned values of structure as altered by message handler routine.</param>
 <returns>Messsage return value - meaning depends on <paramref name="message"/>.</returns>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.SendMessage(Tools.API.Messages.WindowMessage)">
 <summary>Sends given window message to current window</summary>
 <param name="message">A message to be send</param>
 <returns>Messsage return value - meaning depends on <paramref name="message"/>.</returns>
 <remarks>This method sets <paramref name="message"/>.<see cref="P:Tools.API.Messages.WindowMessage.ReturnValue">ReturnValue</see> to result of message</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.PostMessage(Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Posts a window message to current window without waiting for the window to process the message</summary>
 <param name="message">A message to be sent</param>
 <param name="wParam">Message parameter wParam - meaning depends on <paramref name="message"/>.</param>
 <param name="lParam">Message parameter lParam - meaning depends on <paramref name="message"/>.</param>
 <exception cref="T:Tools.API.Win32APIException">Failed to post the message</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.PostMessage(Tools.API.Messages.WindowMessage)">
 <summary>Posts given window message to current window without waiting for the window to process the message</summary>
 <param name="message">A message to be Post</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is null</exception>
 <exception cref="T:Tools.API.Win32APIException">Failed to post the message</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.SendNotification(Tools.API.Messages.Notifications.NMHDR)">
 <summary>Sends a notification messages <see cref="F:Tools.API.Messages.WindowMessages.WM_NOTIFY"/> to current window</summary>
 <param name="notification">Notification data to be sent</param>
 <remarks>Return value of notification message</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Text">
 <summary>Gets or sets text associated with the window</summary>
 <value>New text of window</value>
 <returns>Current text of the window</returns>
 <remarks>For windows that represents form it is text from title bar, for other controls like labels it is text of the control. See also <seealso cref="P:System.Windows.Forms.Control.Text"/>.
 This property can can get/set text for all windows in the same process as it is called from and text of windows that has title bar (forms) from any process.</remarks>
 <exception cref="T:Tools.API.Win32APIException">Setting or obtaining of text failed. ie. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
 <version version="1.5.3">Added class name to string</version>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.WndProcPointer">
 <summary>Gets or sets pointer to wnd proc of current window. Used for so-called sub-classing.</summary>
 <returns>Pointer to current wnd proc of current window</returns>
 <value>Pointer to new wnd proc. Note: Old wnd proc is lost when setting this property. You should consider backing old value up.</value>
 <remarks>
 wnd proc (window procedure) is procedure with signature of th <see cref="T:Tools.API.Messages.WndProc"/> delegate that processes all the messages. You should consider using <see cref="P:Tools.WindowsT.NativeT.Win32Window.WndProc"/> property rather then this one.
 You can do this also with <see cref="P:Tools.WindowsT.NativeT.Win32Window.WindowLong(Tools.API.Public.WindowLongs)"/> with <see cref="F:Tools.API.Public.WindowLongs.WndProc"/> as argument.
 </remarks>
 <exception cref="T:Tools.API.Win32APIException">Getting or setting of value failed (i.e. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.WndProc">
 <summary>Gets or sets wnd proc of current window. Used for so-called window sub-classing.</summary>
 <value>New window proc. Note: Old window proc is lost by setting this property. You should consider backing it up.
 <para>Warning: By setting value of this property youar passing delegate to unmanaged code! You must keep that delegate alive as long as it is in use - that means while the window exists or until <see cref="P:Tools.WindowsT.NativeT.Win32Window.WndProc"/> property is changed again. For example following VB code is completely invalid!</para>
 <example><code>instance.WndProc = AddressOf MyReplacementProc</code></example>
 <para>This example creates new delegate, passes it to unmanaged code, and forgets it. The is no reference to that delegate keeping it alive (protecting it from being garbage collected), so you can get unexpected error when the runtime garbage collector collects the delegate and the there is an attempt to call it. The proper way of setting this property is create an instance of <see cref="T:Tools.API.Messages.WndProc"/>, store it somewhere, pass it here and keep that 'somewhere' alive as long as window uses that replaced wnd proc.</para>
 <para>The need to keep delegate alive may be problem when creating backup of previos window procedure in order to revert change of window procedure in the future. This property returns a managed delegate (to possibly onmanaged code). So, this delegate must be kept alive as long as it is used by window. That is not always the think you want to (or can) do. In such case you should considering backing up pointer to the old wnd proc. Pointer can be used to restore the procedure with no need to keep it alive. To do so use the <see cref="P:Tools.WindowsT.NativeT.Win32Window.WndProcPointer"/> property. It is common parctise to backup old wnd proc in order to call it from new one. You cannot call a pointer. So, if you need to back up old wnd proc in order to restore it as well as in order to call it, the best think you can do is back it up as pointer as well as as delegate.</para>
 </value>
 <returns>Delegate to old window proc</returns>
 <exception cref="T:Tools.API.Win32APIException">Getting or setting value failed (i.e. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid). This is also usually thrown when window comes from another process than property is being got.</exception>
 <remarks>
 Window procedure is used to handle messages of current window.
 <para>If current window represents .NET <see cref="T:System.Windows.Forms.Form"/> or other <see cref="T:System.Windows.Forms.Control"/> and you have chance to derive from it, you'd better to do so and the override <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
 You are the proctedted from problems with keeping delegate alive. You can also derive from <see cref="T:System.Windows.Forms.NativeWindow"/> and override it's <see cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)"/>.</para>
 </remarks>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.DefWndProc">
 <summary>Gets default window procedure implementation that responds to all messages in defaut way. This implementation is provided by the OS.</summary>
 <returns>Delegate to <see cref="M:Tools.API.GUI.DefWindowProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/> (internal, PInvoke function)</returns>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.ExtendedStyle">
 <summary>Gets or sest window extended style</summary>
 <returns>Current value of <see cref="F:Tools.API.Public.WindowLongs.ExStyle"/> window long</returns>
 <value>A new value for window long <see cref="T:Tools.API.Public.WindowExtendedStyles"/></value>
 <seelaso cref="P:Tools.WindowsT.NativeT.Win32Window.WindowLong(Tools.API.Public.WindowLongs)"/><seelaso cref="F:Tools.API.Public.WindowLongs.ExStyle"/>
 <version version="1.5.3">This property is new in version 1.5.3</version>
 <exception cref="T:Tools.API.Win32APIException">Getting or setting of value failed (i.e. <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> is invalid)</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.HideIcon">
 <summary>Hides an icon of window</summary>
 <remarks>This method sets window <see cref="P:Tools.WindowsT.NativeT.Win32Window.ExtendedStyle"/> flag <see cref="F:Tools.API.Public.WindowExtendedStyles.DialogModalFrame"/> and updates windo non-client area</remarks>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(System.Windows.Forms.Control)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <param name="other">An object to compare with this object.</param>
 <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(System.Windows.Forms.IWin32Window)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <param name="other">An object to compare with this object.</param>
 <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(Tools.WindowsT.NativeT.Win32Window)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <param name="other">An object to compare with this object.</param>
 <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.Equals(System.Windows.Window)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <param name="other">An object to compare with this object.</param>
 <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(System.Windows.Forms.IWin32Window,Tools.WindowsT.NativeT.Win32Window)">
 <summary>Compares <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
 <param name="b">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
 <returns>True if <paramref name="a"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(Tools.WindowsT.NativeT.Win32Window,System.Windows.Window)">
 <summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:System.Windows.Window"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
 <param name="b">A <see cref="T:System.Windows.Window"/></param>
 <returns>True if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to handle of <paramref name="b"/></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(System.Windows.Window,Tools.WindowsT.NativeT.Win32Window)">
 <summary>Compares <see cref="T:System.Windows.Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
 <param name="b">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
 <param name="a">A <see cref="T:System.Windows.Window"/></param>
 <returns>True if <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to handle of <paramref name="a"/></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(Tools.WindowsT.NativeT.Win32Window,System.Windows.Forms.IWin32Window)">
 <summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
 <param name="a">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
 <param name="b">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
 <returns>True if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Equality(Tools.WindowsT.NativeT.Win32Window,Tools.WindowsT.NativeT.Win32Window)">
 <summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
 <param name="a">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
 <param name="b">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
 <returns>True if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(System.Windows.Forms.IWin32Window,Tools.WindowsT.NativeT.Win32Window)">
 <summary>Compares <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
 <param name="b">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
 <returns>False if <paramref name="a"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(Tools.WindowsT.NativeT.Win32Window,System.Windows.Forms.IWin32Window)">
 <summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
 <param name="a">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
 <param name="b">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
 <returns>False if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(Tools.WindowsT.NativeT.Win32Window,Tools.WindowsT.NativeT.Win32Window)">
 <summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
 <param name="a">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
 <param name="b">A <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></param>
 <returns>False if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(Tools.WindowsT.NativeT.Win32Window,System.Windows.Window)">
 <summary>Compares <see cref="T:Tools.WindowsT.NativeT.Win32Window"/> and <see cref="T:System.Windows.Window"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
 <param name="b">A <see cref="T:System.Windows.Window"/></param>
 <returns>False if <paramref name="a"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to handle of <paramref name="b"/></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.op_Inequality(System.Windows.Window,Tools.WindowsT.NativeT.Win32Window)">
 <summary>Compares <see cref="T:System.Windows.Window"/> and <see cref="T:Tools.WindowsT.NativeT.Win32Window"/></summary>
 <param name="b">A <see cref="T:System.Windows.Forms.IWin32Window"/></param>
 <param name="a">A <see cref="T:System.Windows.Window"/></param>
 <returns>False if <paramref name="b"/>.<see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle">Handle</see> equals to handle of <paramref name="a"/></returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.FindChild(System.String,System.String)">
 <summary>Searches for immediate child of current window with given parameters</summary>
 <param name="text">Text of window to search for. Ignored when null. Can contain wildcards characters - see <see cref="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)"/>.</param>
 <param name="className">Name of class of window to search for. Ignored when null.</param>
 <returns>First immediate child of current window with given characteristics. Null when no such child can be found.</returns>
 <remarks>When both - <paramref name="text"/> and <paramref name="className"/> are null, first child of current window is returned.</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.FindChildren(System.String,System.String)">
 <summary>Searches for immediate children of current window with given parameters</summary>
 <param name="text">Text of windows to search for. Ignored when null. Can contain wildcards characters - see <see cref="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)"/>.</param>
 <param name="className">Name of class of windows to search for. Ignored when null.</param>
 <returns>Immediate children of current window with given characteristics.</returns>
 <remarks>When both - <paramref name="text"/> and <paramref name="className"/> are null, all children returned.</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.FindWindow(System.String,System.String)">
 <summary>Searches for top-leve window by class and/or text</summary>
 <param name="text">Text of windows to search for. Ignored when null. Can contain wildcards characters - see <see cref="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)"/>.</param>
 <param name="className">Name of class of windows to search for. Ignored when null.</param>
 <returns>First top-level window with given characteristics found. Null when no such window can be found.</returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.FindWindows(System.String,System.String)">
 <summary>Searches for top-level windows by class and/or text</summary>
 <param name="text">Text of windows to search for. Ignored when null. Can contain wildcards characters - see <see cref="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)"/>.</param>
 <param name="className">Name of class of windows to search for. Ignored when null.</param>
 <returns>All top-level windows with given characteristics.</returns>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.FindWindows(Tools.WindowsT.NativeT.Win32Window,System.String,System.String,System.Boolean)">
 <summary>Searches for windows in given parent</summary>
 <param name="parent">Parent to serch for child windows in. When null searches for top-level System.Windows.</param>
 <param name="text">Text of windows to search for. Ignored when null. Can contain wildcards characters - see <see cref="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)"/>.</param>
 <param name="className">Name of class of windows to search for. Ignored when null.</param>
 <param name="onlyFirst">True to return only first matching window</param>
 <returns>Array of windows matching given conditions. If both conditions are null returns <see cref="P:Tools.WindowsT.NativeT.Win32Window.TopLevelWindows"/>. If <paramref name="onlyFirst"/> is true always returns array with exactly one member - either the window found or null.</returns>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Desktop">
 <summary>Gets window that represents the desktop</summary>
 <exception cref="T:Tools.API.Win32APIException">An error occurred</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.TopLevelWindows">
 <summary>Gets all the top-level windows</summary>
 <returns>List of all top-level windows</returns>
 <exception cref="T:Tools.API.Win32APIException">An error occurred</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.GetForegroundWindow">
 <summary>Retrieves the foreground window (the window with which the user is currently working)</summary>
 <returns>The foreground window.  The foreground window can be null in certain circumstances, such as when a window is losing activation. </returns>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.GuiThread">
 <summary>Gets a GUI thread this window belongs to</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread id for current window</exception> 
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="P:Tools.WindowsT.NativeT.Win32Window.Process">
 <summary>Gets process this window belongs to</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain process id for current window</exception>
 <exception cref="T:System.InvalidOperationException">Process with ID reported by window cannot be fond.</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.Win32Window.SetForeground">
 <summary>Sets window as foreground window</summary>
 <returns>True if window was successfully set as foreground window. False otherwise.</returns>
 <remarks>There are many reasons why window cannot be set foreground e.g. application is working with the window, menu is active etc.</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="T:Tools.WindowsT.NativeT.SubclassedNativeWindow">
 <summary>Subclasses any native Win32 widow by replacing its window procedure</summary>
 <remarks>You can derive your class from this class and override <see cref="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.NewWndProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/> to subclas any win</remarks>
 <version stage="Nightly" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.#ctor(System.IntPtr)">
 <summary>CTor</summary>
 <param name="Handle">Handle of native window</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Handle"/> is <see cref="F:System.IntPtr.Zero"/></exception>
 <exception cref="T:Tools.API.Win32APIException">Unable to replace window procedure</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.#ctor(System.Windows.Forms.IWin32Window)">
 <summary>CTor</summary>
 <param name="Window">Handle to subclass</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null -or- <paramref name="Window"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> is zero</exception>
 <exception cref="T:Tools.API.Win32APIException">Unable to replace window procedure</exception>
</member>
<member name="F:Tools.WindowsT.NativeT.SubclassedNativeWindow.AddressOfWndProc">
 <summary>Keeps delegate to <see cref="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.NewWndProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/></summary>
 <remarks>Keeping delegate in field prevents if from being garbage-collected. Delegate passed to unmanaged code must be kept alive in such way.</remarks>
</member>
<member name="F:Tools.WindowsT.NativeT.SubclassedNativeWindow._OldWndProc">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.NativeT.SubclassedNativeWindow.OldWndProc"/> property</summary>
</member>
<member name="P:Tools.WindowsT.NativeT.SubclassedNativeWindow.OldWndProc">
 <summary>Gets pointer to original window procedure</summary>
 <returns>Original window procedure of window being sublcassed prior ts replecement by <see cref="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.NewWndProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/></returns>
</member>
<member name="P:Tools.WindowsT.NativeT.SubclassedNativeWindow.WndProc">
 <summary>Gets wnd proc of current window. Used for so-called window sub-classing.</summary>
 <remarks>Value of this proeprty cannot be changed</remarks>
 <exception cref="T:Tools.API.Win32APIException">Error obtaining curent window procedure</exception>
 <returns>Current window procedure of window being subclassed. It's usually <see cref="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.NewWndProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/>, unless window was subclassed again.</returns>
 <exception cref="T:System.NotSupportedException">Value is being set</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.SubclassedNativeWindow.WndProcPointer">
 <summary>Gets pointer wnd proc of current window. Used for so-called window sub-classing.</summary>
 <remarks>Value of this proeprty cannot be changed</remarks>
 <exception cref="T:Tools.API.Win32APIException">Error obtaining curent window procedure</exception>
 <returns>Pointer current window procedure of window being subclassed. It's usually <see cref="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.NewWndProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)"/>, unless window was subclassed again.</returns>
 <exception cref="T:System.NotSupportedException">Value is being set</exception>
</member>
<member name="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.NewWndProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Procedure that replaces old window procedure of window being subclassed</summary>
 <param name="hWnd">Handle to the window.</param>
 <param name="msg">Specifies the message.</param>
 <param name="wParam">Specifies additional message information. The contents of this parameter depend on the value of the <paramref name="msg"/> parameter.</param>
 <param name="lParam">Specifies additional message information. The contents of this parameter depend on the value of the <paramref name="msg"/> parameter.</param>
 <returns>The return value is the result of the message processing and depends on the message sent.</returns>
 <remarks><note type="inheritinfo">Call base class method, if you do not provide custom handling of message being send. This implementation calls original window procedure defined by window being subclassed.</note></remarks>
</member>
<member name="F:Tools.WindowsT.NativeT.SubclassedNativeWindow.Disposed">
 <summary>True when <see cref="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.Dispose(System.Boolean)"/> was already called</summary>
</member>
<member name="M:Tools.WindowsT.NativeT.SubclassedNativeWindow.Dispose(System.Boolean)">
 <summary>Sets <see cref="P:Tools.WindowsT.NativeT.Win32Window.Handle"/> to zero</summary>
 <remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member>
<member name="T:Tools.WindowsT.NativeT.GuiThread">
 <summary>Provides access to information about Windows GUI thread</summary>
 <remarks>This class provides dynamic information (whenever you call property getter actual infromation is obtained from the thread) rather than static snapshot of thread state in time when instance of class was constructed.</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.NativeT.GuiThread.#ctor(System.Int32)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.NativeT.GuiThread"/> class</summary>
 <param name="threadID">ID of GUI thread to get information from. This value can be zero - in this case this class provides information about foreground thread.</param>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.ThreadID">
 <summary>Gets ID of GUI thread this instance provides information about</summary>
 <returns>ID of GUI thread this instance provides information about. Zero when this instance provides information about foreground GUI thread.</returns>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.ThreadInfo">
 <summary>Gets current GUI thread information</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.ActiveWindow">
 <summary>Gets current active window of the GUI thread. Null when there is no active window in the GUI thread.</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.FocusedWindow">
 <summary>Gets window with keyboard focus within the GUI thread. Null when there is no window with keyboard focus in the GUI thread.</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.CaptureWindow">
 <summary>Gets window which captured the mouse within the GUI thread. Null when there is no window with mouse capture in the GUI thread.</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.CarretWindow">
 <summary>Gets window displaying the carret in the GUI thread. Null when there is no window displaying the carret in the GUI thread.</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.MenuOwner">
 <summary>Gets window that owns any active menus in the GUI thread. Null when there is no window owning menus in the GUI thread.</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.MoveSizeWindow">
 <summary>Gets a window in move or size loop in the GUI thread. Null when there is no window in move or size loop in the GUI thread.</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.Caret">
 <summary>Gets caret's bounding rectangle in client coordinates relative to <see cref="P:Tools.WindowsT.NativeT.GuiThread.CarretWindow"/>.</summary>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.IsCaretBlinking">
 <summary>Gets value indicating caret's blink state</summary>
 <returns>True when caret is visible</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.IsInMenuMode">
 <summary>Gets thread's menu state</summary>
 <returns>True whne the thread is in menu mode.</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.IsInMoveOrSize">
 <summary>Gets thread's move state.</summary>
 <returns>True when the thread is in move or size loop</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.IsPopUpMenuActive">
 <summary>Gets thread's pop-up menu state.</summary>
 <returns>True if the thread has an active pop-up menu.</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="P:Tools.WindowsT.NativeT.GuiThread.IsInSystemMenuMode">
 <summary>Gets thread's system menu state.</summary>
 <returns>True if the thread is in a system menu mode.</returns>
 <exception cref="T:Tools.API.Win32APIException">Failed to obtain thread information (e.g. thread id is invalid)</exception>
</member>
<member name="T:Tools.COM.ShellLink.SLR_FLAGS">
 <summary><see cref="M:Tools.COM.ShellLink.IShellLinkW.Resolve(System.IntPtr,Tools.COM.ShellLink.SLR_FLAGS)"/> flags</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_NO_UI">
 <summary>
 Do not display a dialog box if the link cannot be resolved.
 When <see cref="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_NO_UI"/> is set, the high-order word of fFlags can be set to a time-out value that specifies the maximum amount of time to be spent resolving the link.
 The function returns if the link cannot be resolved within the time-out duration.
 If the high-order word is set to zero, the time-out duration will be set to the default value of 3,000 milliseconds (3 seconds).
 To specify a value, set the high word of fFlags to the desired time-out duration, in milliseconds.
 </summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_ANY_MATCH">
 <summary><see cref="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_ANY_MATCH"/></summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_UPDATE">
 <summary>
 If the link object has changed, update its path and list of identifiers.
 If <see cref="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_UPDATE"/> is set, you do not need to call <see cref="M:Tools.COM.ShellLink.IPersistFile.IsDirty"/> to determine whether or not the link object has changed.
 </summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_NOUPDATE">
 <summary>Do not update the link information.</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_NOSEARCH">
 <summary>Do not execute the search heuristics.</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_NOTRACK">
 <summary>Do not use distributed link tracking.</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_NOLINKINFO">
 <summary>
 Disable distributed link tracking.
 By default, distributed link tracking tracks removable media across multiple devices based on the volume name.
 It also uses the Universal Naming Convention (UNC) path to track remote file systems whose drive letter has changed.
 Setting <see cref="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_NOLINKINFO"/> disables both types of tracking.
 </summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_INVOKE_MSI">
 <summary>Call the Microsoft Windows Installer.</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_NO_UI_WITH_MSG_PUMP">
 <summary>(Only Windows XP and later)</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_OFFER_DELETE_WITHOUT_FILE">
 <summary>(Only Windows 7 and later) Offer the option to delete the shortcut when this method is unable to resolve it, even if the shortcut is not a shortcut to a file.</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_KNOWNFOLDER">
 <summary>(Only Windows 7 and later) Report as dirty if the target is a known folder and the known folder was redirected. This only works if the original target path was a file system path or ID list and not an aliased known folder ID list.</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_MACHINE_IN_LOCAL_TARGET">
 <summary>(Windows 7 and later) Resolve the computer name in UNC targets that point to a local computer. This value is used with SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET.</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLR_FLAGS.SLR_UPDATE_MACHINE_AND_SID">
 <summary>(Windows 7 and later) Update the computer GUID and user SID if necessary.</summary>
</member>
<member name="T:Tools.COM.ShellLink.SLGP_FLAGS">
 <summary><see cref="M:Tools.COM.ShellLink.IShellLinkW.GetPath(System.Text.StringBuilder,System.Int32,Tools.COM.ShellLink.WIN32_FIND_DATAW@,Tools.COM.ShellLink.SLGP_FLAGS)"/> flags</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLGP_FLAGS.SLGP_SHORTPATH">
 <summary>Retrieves the standard short (8.3 format) file name.</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLGP_FLAGS.SLGP_UNCPRIORITY">
 <summary>Retrieves the Universal Naming Convention (UNC) path name of the file.</summary>
</member>
<member name="F:Tools.COM.ShellLink.SLGP_FLAGS.SLGP_RAWPATH">
 <summary>Retrieves the raw path name. A raw path is something that might not exist and may include environment variables that need to be expanded.</summary>
</member>
<member name="T:Tools.COM.ShellLink.WIN32_FIND_DATAW">
 <summary>Contains information about the file</summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.dwFileAttributes">
 <summary>The file attributes of a file.</summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.ftCreationTime">
 <summary>A <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure that specifies when a file or directory was created. If the underlying file system does not support creation time, this member is zero (0).</summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.ftLastAccessTime">
 <summary>A <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure. For a file, the structure specifies when the file was last read from, written to, or for executable files, run. For a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero (0). On the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.</summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.ftLastWriteTime">
 <summary>A <see cref="T:System.Runtime.InteropServices.ComTypes.FILETIME"/> structure. For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used. The date and time are not updated when file attributes or security descriptors are changed. For a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero (0).</summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.nFileSizeHigh">
 <summary>The high-order DWORD value of the file size, in bytes. This value is zero (0) unless the file size is greater than MAXDWORD. The size of the file is equal to (<see cref="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.nFileSizeHigh">nFileSizeHigh</see> * (MAXDWORD+1)) + <see cref="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.nFileSizeLow">nFileSizeLow</see>.</summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.nFileSizeLow">
 <summary></summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.dwReserved0">
 <summary>If the dwFileAttributes member includes the FILE_ATTRIBUTE_REPARSE_POINT attribute, this member specifies the reparse point tag. Otherwise, this value is undefined and should not be used.</summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.dwReserved1">
 <summary>Reserved for future use.</summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.cFileName">
 <summary>The name of the file.</summary>
</member>
<member name="F:Tools.COM.ShellLink.WIN32_FIND_DATAW.cAlternateFileName">
 <summary>An alternative name for the file. This name is in the classic 8.3 (filename.ext) file name format.</summary>
</member>
<member name="T:Tools.COM.ShellLink.IPersistFile">
 <summary>The <see cref="T:Tools.COM.ShellLink.IPersistFile"/> interface provides methods that permit an object to be loaded from or saved to a disk file, rather than a storage object or stream. Because the information needed to open a file varies greatly from one application to another, the implementation of <see cref="M:Tools.COM.ShellLink.IPersistFile.Load(System.String,System.Int32)"/> on the object must also open its disk file.</summary>
</member>
<member name="M:Tools.COM.ShellLink.IPersistFile.GetClassID(System.Guid@)">
 <summary>Retrieves the class identifier (CLSID) of an object. The CLSID is a unique value that identifies the code that can manipulate the persistent data.</summary>
 <param name="pClassID">[out] Points to the location of the CLSID on return. The CLSID is a globally unique identifier (GUID) that uniquely represents an object class that defines the code that can manipulate the object's data.</param>
</member>
<member name="M:Tools.COM.ShellLink.IPersistFile.IsDirty">
 <summary>Checks an object for changes since it was last saved to its current file.</summary>
 <returns>Non-zero if the object has changed since it was last saved. Zero if the object has not changed since the last save.</returns>
</member>
<member name="M:Tools.COM.ShellLink.IPersistFile.Load(System.String,System.Int32)">
 <summary>Opens the specified file and initializes an object from the file contents.</summary>
 <param name="pszFileName">[in] Points to a zero-terminated string containing the absolute path of the file to open.</param>
 <param name="dwMode">[in] Specifies some combination of the values from the STGM enumeration to indicate the access mode to use when opening the file. IPersistFile::Load can treat this value as a suggestion, adding more restrictive permissions if necessary. If dwMode is zero, the implementation should open the file using whatever default permissions are used when a user opens the file.</param>
</member>
<member name="M:Tools.COM.ShellLink.IPersistFile.Save(System.String,System.Boolean)">
 <summary>Saves a copy of the object into the specified file.</summary>
 <param name="pszFileName">[in] Points to a zero-terminated string containing the absolute path of the file to which the object should be saved. If pszFileName is NULL, the object should save its data to the current file, if there is one.</param>
 <param name="fRemember">[in] Indicates whether the pszFileName parameter is to be used as the current working file. If TRUE, pszFileName becomes the current file and the object should clear its dirty flag after the save. If FALSE, this save operation is a "Save A Copy As ..." operation. In this case, the current file is unchanged and the object should not clear its dirty flag. If pszFileName is NULL, the implementation should ignore the fRemember flag.</param>
</member>
<member name="M:Tools.COM.ShellLink.IPersistFile.SaveCompleted(System.String)">
 <summary>Notifies the object that it can write to its file. It does this by notifying the object that it can revert from NoScribble mode (in which it must not write to its file), to Normal mode (in which it can). The component enters NoScribble mode when it receives an <see cref="M:Tools.COM.ShellLink.IPersistFile.Save(System.String,System.Boolean)"/> call.</summary>
 <param name="pszFileName">[in] Points to the absolute path of the file where the object was previously saved.</param>
</member>
<member name="M:Tools.COM.ShellLink.IPersistFile.GetCurFile(System.IntPtr@)">
 <summary>Retrieves either the absolute path to the object's current working file or, if there is no current working file, the object's default filename prompt.</summary>        ''' <param name="ppszFileName">[out] Points to the location of a pointer to a zero-terminated string containing the path for the current file or the default filename prompt (such as *.txt). If an error occurs, ppszFileName is set to NULL.</param>
</member>
<member name="T:Tools.COM.ShellLink.IShellLinkW">
 <summary>Exposes methods that create, modify, and resolve Shell links. UNICODE Version</summary>
 <remarks>Note  This interface cannot be used to create a link to a URL.</remarks>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.GetPath(System.Text.StringBuilder,System.Int32,Tools.COM.ShellLink.WIN32_FIND_DATAW@,Tools.COM.ShellLink.SLGP_FLAGS)">
 <summary>Gets the path and file name of a Shell link object.</summary>
 <param name="pszFile">The address of a buffer that receives the path and file name of the Shell link object.</param>
 <param name="cchMaxPath">The maximum number of characters to copy to the buffer pointed to by the pszFile parameter.</param>
 <param name="pfd">The address of a <see cref="T:Tools.COM.ShellLink.WIN32_FIND_DATAW"/> structure that receives information about the Shell link object. If this parameter is NULL, then no additional information is returned.</param>
 <param name="fFlags">Flags that specify the type of path information to retrieve.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.GetIDList(System.IntPtr@)">
 <summary>Gets the list of item identifiers for a Shell link object.</summary>
 <param name="ppidl">[out] When this method returns, contains the address of a pointer to an item identifier list (PIDL).</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.SetIDList(System.IntPtr)">
 <summary>Sets the pointer to an item identifier list (PIDL) for a Shell link object.</summary>
 <param name="pidl">[in] The object's fully-qualified PIDL.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.GetDescription(System.Text.StringBuilder,System.Int32)">
 <summary>Gets the description string for a Shell link object.</summary>
 <param name="pszName">A pointer to the buffer that receives the description string.</param>
 <param name="cchMaxName">The maximum number of characters to copy to the buffer pointed to by the pszName parameter.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.SetDescription(System.String)">
 <summary>Sets the description for a Shell link object. The description can be any application-defined string.</summary>
 <param name="pszName">A pointer to a buffer containing the new description string.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.GetWorkingDirectory(System.Text.StringBuilder,System.Int32)">
 <summary>Gets the name of the working directory for a Shell link object.</summary>
 <param name="pszDir">The address of a buffer that receives the name of the working directory.</param>
 <param name="cchMaxPath">The maximum number of characters to copy to the buffer pointed to by the pszDir parameter. The name of the working directory is truncated if it is longer than the maximum specified by this parameter.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.SetWorkingDirectory(System.String)">
 <summary>Sets the name of the working directory for a Shell link object.</summary>
 <param name="pszDir">The address of a buffer that contains the name of the new working directory.</param>
 <remarks>The working directory is optional unless the target requires a working directory. For example, if an application creates a Shell link to a Microsoft Word document that uses a template residing in a different directory, the application would use this method to set the working directory.</remarks>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.GetArguments(System.Text.StringBuilder,System.Int32)">
 <summary>Note  This interface cannot be used to create a link to a URL.</summary>
 <param name="pszArgs">A pointer to the buffer that receives the command-line arguments.</param>
 <param name="cchMaxPath">The maximum number of characters that can be copied to the buffer supplied by the pszArgs parameter.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.SetArguments(System.String)">
 <summary>Sets the command-line arguments for a Shell link object.</summary>
 <param name="pszArgs">A pointer to a buffer that contains the new command-line arguments.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.GetHotkey(System.Int16@)">
 <summary>Gets the hot key for a Shell link object.</summary>
 <param name="pwHotkey">The address of the hot key. The virtual key code is in the low-order byte, and the modifier flags are in the high-order byte.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.SetHotkey(System.Int16)">
 <summary>Sets a hot key for a Shell link object.</summary>
 <param name="wHotkey">The new hot key. The virtual key code is in the low-order byte, and the modifier flags are in the high-order byte. The modifier flags can be a combination of the values specified in the description of the <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetHotkey(System.Int16@)"/> method.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.GetShowCmd(System.Int32@)">
 <summary>Gets the show command for a Shell link object.</summary>
 <param name="piShowCmd">A pointer to the command.</param>
 <remarks>The show command is used to set the initial show state of the corresponding object.</remarks>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.SetShowCmd(System.Int32)">
 <summary>Sets the show command for a Shell link object. The show command sets the initial show state of the window.</summary>
 <param name="iShowCmd">Command</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.GetIconLocation(System.Text.StringBuilder,System.Int32,System.Int32@)">
 <summary>Gets the location (path and index) of the icon for a Shell link object.</summary>
 <param name="pszIconPath">The address of a buffer that receives the path of the file containing the icon.</param>
 <param name="cchIconPath">The maximum number of characters to copy to the buffer pointed to by the pszIconPath parameter.</param>
 <param name="piIcon">The address of a value that receives the index of the icon.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.SetIconLocation(System.String,System.Int32)">
 <summary>Sets the location (path and index) of the icon for a Shell link object.</summary>
 <param name="pszIconPath">The address of a buffer to contain the path of the file containing the icon.</param>
 <param name="iIcon">The index of the icon.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.SetRelativePath(System.String,System.Int32)">
 <summary>Sets the relative path to the Shell link object.</summary>
 <param name="pszPathRel">The address of a buffer that contains the new relative path. It should be a file name, not a folder name.</param>
 <param name="dwReserved">Reserved. Set this parameter to zero.</param>
 <remarks>
 Clients commonly define a relative link when it may be moved along with its target, causing the absolute path to become invalid.
 The <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetRelativePath(System.String,System.Int32)"/> method can be used to help the link resolution process find its target based on a common path prefix between the target and the relative path.
 To assist in the resolution process, clients should set the relative path as part of the link creation process.
 </remarks>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.Resolve(System.IntPtr,Tools.COM.ShellLink.SLR_FLAGS)">
 <summary>Attempts to find the target of a Shell link, even if it has been moved or renamed.</summary>
 <param name="hwnd">
 A handle to the window that the Shell will use as the parent for a dialog box.
 The Shell displays the dialog box if it needs to prompt the user for more information while resolving a Shell link.
 </param>
 <param name="fFlags">Action flags.</param>
</member>
<member name="M:Tools.COM.ShellLink.IShellLinkW.SetPath(System.String)">
 <summary>Sets the path and file name of a Shell link object.</summary>
 <param name="pszFile">The address of a buffer that contains the new path.</param>
</member>
<member name="T:Tools.COM.ShellLink.ShellLink">
 <summary>COM-imported class which implements the <see cref="T:Tools.COM.ShellLink.IShellLinkW"/> interface</summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetClassID(System.Guid@)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IPersistFile.GetClassID(System.Guid@)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetCurFile(System.IntPtr@)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IPersistFile.GetCurFile(System.IntPtr@)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.IsDirty">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IPersistFile.IsDirty"/></summary>
 <returns>This method returns nonzero to indicate that the object has changed. Otherwise, it returns zero.</returns>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.Load(System.String,System.Int32)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IPersistFile.Load(System.String,System.Int32)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.Save(System.String,System.Boolean)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IPersistFile.Save(System.String,System.Boolean)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SaveCompleted(System.String)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IPersistFile.SaveCompleted(System.String)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetArguments(System.Text.StringBuilder,System.Int32)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetArguments(System.Text.StringBuilder,System.Int32)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetDescription(System.Text.StringBuilder,System.Int32)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetDescription(System.Text.StringBuilder,System.Int32)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetHotkey(System.Int16@)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetHotkey(System.Int16@)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetIconLocation(System.Text.StringBuilder,System.Int32,System.Int32@)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetIconLocation(System.Text.StringBuilder,System.Int32,System.Int32@)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetIDList(System.IntPtr@)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetIDList(System.IntPtr@)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetPath(System.Text.StringBuilder,System.Int32,Tools.COM.ShellLink.WIN32_FIND_DATAW@,Tools.COM.ShellLink.SLGP_FLAGS)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetPath(System.Text.StringBuilder,System.Int32,Tools.COM.ShellLink.WIN32_FIND_DATAW@,Tools.COM.ShellLink.SLGP_FLAGS)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetShowCmd(System.Int32@)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetShowCmd(System.Int32@)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.GetWorkingDirectory(System.Text.StringBuilder,System.Int32)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetWorkingDirectory(System.Text.StringBuilder,System.Int32)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.Resolve(System.IntPtr,Tools.COM.ShellLink.SLR_FLAGS)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.Resolve(System.IntPtr,Tools.COM.ShellLink.SLR_FLAGS)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SetArguments(System.String)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetArguments(System.String)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SetDescription(System.String)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetDescription(System.String)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SetHotkey(System.Int16)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetHotkey(System.Int16)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SetIconLocation(System.String,System.Int32)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetIconLocation(System.String,System.Int32)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SetIDList(System.IntPtr)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetIDList(System.IntPtr)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SetPath(System.String)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetPath(System.String)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SetRelativePath(System.String,System.Int32)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetRelativePath(System.String,System.Int32)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SetShowCmd(System.Int32)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetShowCmd(System.Int32)"/></summary>
</member>
<member name="M:Tools.COM.ShellLink.ShellLink.SetWorkingDirectory(System.String)">
 <summary>Implements <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetWorkingDirectory(System.String)"/></summary>
</member>
<member name="T:Tools.COM.ShellLink.ShellLinkWindowStyle">
 <summary>Window styles <see cref="M:Tools.COM.ShellLink.IShellLinkW.SetShowCmd(System.Int32)"/>, <see cref="M:Tools.COM.ShellLink.IShellLinkW.GetShowCmd(System.Int32@)"/></summary>
</member>
<member name="F:Tools.COM.ShellLink.ShellLinkWindowStyle.SW_SHOWNORMAL">
 <summary>Activates and displays a window. If the window is minimized or maximized, the system restores it to its original size and position.</summary>
</member>
<member name="F:Tools.COM.ShellLink.ShellLinkWindowStyle.SW_SHOWMAXIMIZED">
 <summary>Activates the window and displays it as a maximized window.</summary>
</member>
<member name="F:Tools.COM.ShellLink.ShellLinkWindowStyle.SW_SHOWMINIMIZED">
 <summary>Minimizes the window and activates the next top-level window.</summary>
</member>
<member name="F:Tools.COM.ShellLink.ShellLinkWindowStyle.SW_SHOWMINNOACTIVE">
 <summary>Window will not be activated</summary>
</member>
<member name="T:Tools.ConsoleT">
 <summary>Contains methods for working with console</summary>
 <seelaso cref="T:System.Console"/>
</member>
<member name="M:Tools.ConsoleT.AllocateConsole">
 <summary>Creates console fro process without console</summary>
 <exception cref="T:Tools.API.Win32APIException">The process already has console</exception>
 <remarks>After this function is called, you can use the <see cref="T:System.Console"/> class to interact with console.
 <para>When console is allocated for windows application, closing the console terminates whole application.</para></remarks>
</member>
<member name="M:Tools.ConsoleT.DetachConsole">
 <summary>Detaches process with console from its console</summary>
 <exception cref="T:Tools.API.Win32APIException">Error occured while detaching console (i.e. the porcess has no console)</exception>
</member>
<member name="M:Tools.ConsoleT.GetHandle">
 <summary>Gets handle of console window of console attached to surrent process</summary>
 <returns><see cref="T:System.Windows.Forms.IWin32Window"/> carring console handle; null when no console is associated with current process</returns>
 <version version="1.5.2">New more reliable inmplementation using GetConsoleWindow API. No exception thrown, can return null.</version>
</member>
<member name="P:Tools.ConsoleT.IsConsoleAttached">
 <summary>Gets value indicating wheather console is attached to current process</summary>
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="P:Tools.ConsoleT.Icon">
 <summary>Sets console icon</summary>
 <value>Icon to be set</value>
 <exception cref="T:Tools.API.Win32APIException">An error ocured while setting the icon</exception>
</member>
<member name="F:Tools.ConsoleT.ClosingEventHandler">
 <summary>Contains invocation list of the <see cref="E:Tools.ConsoleT.Closing"/> event</summary>
</member>
<member name="M:Tools.ConsoleT.HandlerRoutine(Tools.API.Console.ControlType)">
 <summary>Handles callback for console closing event</summary>
 <param name="dwCtrlType">Reason why console is being closed</param>
 <returns>False when event was handled, true when it shoudl be cancelled</returns>
</member>
<member name="F:Tools.ConsoleT.dHandlerRoutine">
 <summary>Delegate to <see cref="M:Tools.ConsoleT.HandlerRoutine(Tools.API.Console.ControlType)"/></summary>
 <remarks>Keeping delegate in field prevents it from being garbage collcted. Garbage collecting of delegate which was passed to unmanaged code, can lead to unpredictable behavior.</remarks>
</member>
<member name="F:Tools.ConsoleT.HandlerSet">
 <summary>True when <see cref="M:Tools.API.Console.SetConsoleCtrlHandler(Tools.API.Console.HandlerRoutine,System.Boolean)"/>(True) was successfully called; false when it haven't been called or it was successfully called with false.</summary>
</member>
<member name="E:Tools.ConsoleT.Closing">
 <summary>Raised when console is being closed</summary>
 <remarks>This event is raised in another thread than it was attached.
 <para>As this method is static, <paramref name="sender"/> is null</para>.
 <para>This event can be cancelled, but it actually does not prevent user from terminating the application. System dialog to close the application is shown when event is cancelled. The dialog is also show when application does not process this event in some amount of time (usually 5 seconds). On Vista, the application is simply terminated. Ctrl+C and Ctrl+Break can be cancelled this way.</para>
 <para>This event can be attached even befor console is allocated using <see cref="M:Tools.ConsoleT.AllocateConsole"/>. Events will be raised after console is allocated. Do not use other means of attaching console to your application than methods of <see cref="T:Tools.ConsoleT"/> class and using default console of console application, or event will not be raised.</para>
 </remarks>
 <exception cref="T:Tools.API.Win32APIException">Unable to create console control handler when attaching first handler and this application has console allocated</exception>
 <version version="1.5.2">Event introduced</version>
</member>
<member name="T:Tools.ConsoleT.ConsoleClosingEventArgs">
 <summary>Argument of <see cref="E:Tools.ConsoleT.Closing"/> event</summary>
 <remarks>Cancelling the event does not prevent user from closing the console. System dialog mey be shown, or application is simply terminated (Vista)</remarks>
</member>
<member name="M:Tools.ConsoleT.ConsoleClosingEventArgs.#ctor(Tools.ConsoleT.ConsoleClosingReason)">
 <summary>CTor</summary>
 <param name="Reason">REason why console is being closed</param>
</member>
<member name="F:Tools.ConsoleT.ConsoleClosingEventArgs._Reason">
 <summary>COntains value of the <see cref="P:Tools.ConsoleT.ConsoleClosingEventArgs.Reason"/> property</summary>
</member>
<member name="P:Tools.ConsoleT.ConsoleClosingEventArgs.Reason">
 <summary>Gets reason indicating why console is being closed</summary>
 <returns>Reason why console is being closed</returns>
</member>
<member name="T:Tools.ConsoleT.ConsoleClosingReason">
 <summary>Reasons for <see cref="E:Tools.ConsoleT.Closing"/> event</summary>
</member>
<member name="F:Tools.ConsoleT.ConsoleClosingReason.CtrlC">
 <summary>CTRL+C was pressed</summary>
</member>
<member name="F:Tools.ConsoleT.ConsoleClosingReason.CtrlBreak">
 <summary>CTRL+Break was pressed</summary>
</member>
<member name="F:Tools.ConsoleT.ConsoleClosingReason.Close">
 <summary>Console window is closing. Either because user clicked close button of window or closed application from task manager.</summary>
</member>
<member name="F:Tools.ConsoleT.ConsoleClosingReason.ShutDown">
 <summary>System si shutting down. Only services can receive this event. Interactive applications are not present at shut down time.</summary>
</member>
<member name="F:Tools.ConsoleT.ConsoleClosingReason.LogOff">
 <summary>User is logging of. Only services can receive this event. Interactive applications are not present at log-off time.</summary>
 <remarks>It is not indicated which user is being logging-off.</remarks>
</member>
<member name="M:Tools.ConsoleT.PreventClose">
 <summary>Permanently prevents console window from being closed by user (removes/dsiables the close button)</summary>
 <remarks>This change cannot be easily reverted.
 <para>This method uses approch descriped here: <a href="http://support.microsoft.com/?scid=kb%3Ben-us%3B818361&amp;x=10&amp;y=12">http://support.microsoft.com/?scid=kb%3Ben-us%3B818361&amp;x=10&amp;y=12</a>.</para>
 <para>User still can close console window via task manager or via taskbar context menu in Windows 7.</para>
 </remarks>
 <exception cref="T:Tools.API.Win32APIException">An error occured</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="T:Tools.DevicesT.LowLevelMouseHook">
 <summary>Allows handling system-wide low-level mouse hooks</summary>
 <remarks>It is highly recomended not to install multiple hooks of same type in one application and to keep hook-handling code as quick as possible. You can significantly slow down user typing experience.
 <para>This class uses Win32 API function SetWindowsHookEx(WH_MOUSE_LL).</para></remarks>
 <seealso cref="T:Tools.DevicesT.LowLevelKeyboardHook"/>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseHook.#ctor">
 <summary>Default CTor</summary>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseHook.#ctor(System.Boolean)">
 <summary>CTor with possibility of immediate hook activation</summary>
 <param name="RegisterImmediatelly">True to register hook immediatelly</param>
 <exception cref="T:Tools.API.Win32APIException">An error ocured while obtaining the hook.</exception>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseHook.HookProc(System.Int32,System.IntPtr,System.IntPtr)">
 <summary><para>The LowLevelMouseProc hook procedure is an application-defined or library-defined callback function used with the SetWindowsHookEx function. The system call this function every time a new mouse input event is about to be posted into a thread input queue. The mouse input can come from the local mouse driver or from calls to the mouse_event function. If the input comes from a call to mouse_event, the input was "injected". However, the WH_MOUSE_LL hook is not injected into another process. Instead, the context switches back to the process that installed the hook and it is called in its original context. Then the context switches back to the application that generated the event.</para>
 <para>The HOOKPROC type defines a pointer to this callback function. LowLevelMouseProc is a placeholder for the application-defined or library-defined function name.</para></summary>
 <param name="nCode">Specifies a code the hook procedure uses to determine how to process the message. If nCode is less than zero, the hook procedure must pass the message to the <see cref="M:Tools.API.Hooks.Win32Hook.CallNextHook(System.Int32,System.IntPtr,System.IntPtr)"/> function without further processing and should return the value returned by <see cref="M:Tools.API.Hooks.Win32Hook.CallNextHook(System.Int32,System.IntPtr,System.IntPtr)"/>.</param>
 <param name="wParam">Specifies the identifier of the mouse message. This parameter can be one of the following messages:
 <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONDOWN"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_LBUTTONUP"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEMOVE"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEWHEEL"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_MOUSEHWHEEL"/>, <see cref="F:Tools.API.Messages.WindowMessages.WM_RBUTTONDOWN"/>, or <see cref="F:Tools.API.Messages.WindowMessages.WM_RBUTTONUP"/>.</param>
 <param name="lParam">[in] Pointer to an MSLLHOOKSTRUCT structure. </param>
 <returns><para>If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx.</para>
 <para>If nCode is greater than or equal to zero, and the hook procedure did not process the message, it is highly recommended that you call CallNextHookEx and return the value it returns; otherwise, other applications that have installed WH_MOUSE_LL hooks will not receive hook notifications and may behave incorrectly as a result. If the hook procedure processed the message, it may return a nonzero value to prevent the system from passing the message to the rest of the hook chain or the target window procedure.</para></returns>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseHook.OnButtonEvent(Tools.DevicesT.LowLevelMouseButtonEventArgs)">
 <summary>Called when mouse button status changes. Raises the <see cref="E:Tools.DevicesT.LowLevelMouseHook.ButtonEvent"/> event.</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: In order to the <see cref="E:Tools.DevicesT.LowLevelMouseHook.ButtonEvent"/> event to be raised, call base class method.</remarks>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseHook.OnWheel(Tools.DevicesT.LowLevelMouseWheelEventArgs)">
 <summary>Called when mouse wheel rotates. Raises the <see cref="E:Tools.DevicesT.LowLevelMouseHook.Wheel"/> event.</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: In order to the <see cref="E:Tools.DevicesT.LowLevelMouseHook.Wheel"/> event to be raised, call base class method.
 <para>Windows Vista and latter: Handles also horizontal wheel. See <see cref="P:Tools.DevicesT.LowLevelMouseWheelEventArgs.Horizontal"/>.</para></remarks>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseHook.OnMouseMove(Tools.DevicesT.LowLevelMouseEventArgs)">
 <summary>Called when mouse moves. Raises the <see cref="E:Tools.DevicesT.LowLevelMouseHook.MouseMove"/> event.</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: In order to the <see cref="E:Tools.DevicesT.LowLevelMouseHook.MouseMove"/> event to be raised, call base class method.</remarks>
</member>
<member name="E:Tools.DevicesT.LowLevelMouseHook.ButtonEvent">
 <summary>Raised when status of any mouse button changes</summary>
 <remarks>Handles Left, Middle, Right, X1 and X2 buttons</remarks>
</member>
<member name="E:Tools.DevicesT.LowLevelMouseHook.Wheel">
 <summary>Raised when mouse wheel rotates.</summary>
 <remarks>Windows Vista and later: Handles also horizontal wheel. See <see cref="P:Tools.DevicesT.LowLevelMouseWheelEventArgs.Horizontal"/>.</remarks>
</member>
<member name="E:Tools.DevicesT.LowLevelMouseHook.MouseMove">
 <summary>Raised when mouse moves</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelMouseHook.HandledHookType">
 <summary>If overriden in derived class gets type of hook represented by derived class</summary>
 <returns>One of values accepted for SetWindowsHookEx idHook parameter</returns>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseHook.GetModuleHandle">
 <summary>Gets module handle pased to hMod parameter of SetWindowsHookEx Win32 API function</summary>
 <returns>This implementation uses <see cref="M:Tools.API.Hooks.Win32Hook.GetModuleHandleFromType(System.Type)"/></returns>
 <seelaso cref="M:Tools.API.Hooks.Win32Hook.GetModuleHandleFromType(System.Type)"/>
</member>
<member name="T:Tools.DevicesT.LowLevelMouseEventArgs">
 <summary>Base class for low-level mouse event arguments</summary>
 <remarks>This class is not intended to be derived</remarks>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseEventArgs.#ctor(Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT)">
 <summary>CTor</summary>
 <param name="Parameters">Parameters of low-level hook call</param>
</member>
<member name="F:Tools.DevicesT.LowLevelMouseEventArgs.Parameters">
 <summary>Event parameters</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelMouseEventArgs.Location">
 <summary>Gets current position of mouse cursor in screen coordinates</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelMouseEventArgs.IsInjected">
 <summary>Gets value indicating if this message was injected</summary>
</member>
<member name="T:Tools.DevicesT.LowLevelMouseButtonEventArgs">
 <summary>Low-level mouse event arguments related to button up and down events</summary>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseButtonEventArgs.#ctor(Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT,System.Boolean,System.Windows.Forms.MouseButtons)">
 <summary>CTor</summary>
 <param name="Parameters">Event parameters</param>
 <param name="MouseUp">True when event was releasing of the button</param>
 <param name="Button">Identifies the button</param>
</member>
<member name="F:Tools.DevicesT.LowLevelMouseButtonEventArgs._MouseUp">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.LowLevelMouseButtonEventArgs.MouseUp"/> property</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelMouseButtonEventArgs.MouseUp">
 <summary>Gest value indicating if event was generated when mouse button was released</summary>
 <returns>True if event was generated for mouse-up situation; false for mouse-down situation</returns>
</member>
<member name="F:Tools.DevicesT.LowLevelMouseButtonEventArgs._Button">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.LowLevelMouseButtonEventArgs.Button"/> property</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelMouseButtonEventArgs.Button">
 <summary>Gets value indicating for which of mouse buttons the event was generated</summary>
</member>
<member name="T:Tools.DevicesT.LowLevelMouseWheelEventArgs">
 <summary>Low level mouse event arguments related to wheel events</summary>
</member>
<member name="M:Tools.DevicesT.LowLevelMouseWheelEventArgs.#ctor(Tools.API.Hooks.Win32Hooks.MSLLHOOKSTRUCT,System.Boolean)">
 <summary>CTor</summary>
 <param name="Parameters">Event parameters</param>
 <param name="Horizontal">True for horizontal wheel (Windows Vista only)</param>
</member>
<member name="F:Tools.DevicesT.LowLevelMouseWheelEventArgs._Horizontal">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.LowLevelMouseWheelEventArgs.Horizontal"/> property</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelMouseWheelEventArgs.Horizontal">
 <summary>Gets value indicating if this event was generated for mouse horizontal wheel</summary>
 <returns>True when event was generated for mous horizontal wheel; false for "normal" vertical wheel</returns>
 <remarks>This property can be true only at Windows Vista and later</remarks>
</member>
<member name="P:Tools.DevicesT.LowLevelMouseWheelEventArgs.Delta">
 <summary>Gets mouse wheel delta</summary>
 <returns>Value of wheel delta. A positive value indicates that the wheel was rotated forward, away from the user; a negative value indicates that the wheel was rotated backward, toward the user.</returns>
 <remarks>One wheel click is defined as  <see cref="F:Tools.DevicesT.Mouse.WheelStep"/>, which is 120.</remarks>
</member>
<member name="T:Tools.DevicesT.Mouse">
 <summary>Contains methods for working with mouse</summary>
</member>
<member name="M:Tools.DevicesT.Mouse.#ctor">
 <summary>Private CTor to achieve pseudo-static class</summary>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="F:Tools.DevicesT.Mouse.WheelStep">
 <summary>Value raised by mouse-wheel-related events for one wheel click</summary>
</member>
<member name="M:Tools.DevicesT.Mouse.GetLowLevelHook">
 <summary>Registers low-level mouse hook</summary>
 <returns><see cref="T:Tools.DevicesT.LowLevelKeyboardHook"/> class instance ready to fire low-level mouse hook events</returns>
</member>
<member name="M:Tools.DevicesT.Mouse.GetAsyncLowLevelHook">
 <summary>Register low-level mouse hook with ecents fired in it's own thread</summary>
 <returns><see cref="T:Tools.DevicesT.LowLevelKeyboardHook"/> class instance ready to fire low-level mouse hook events in different thread than calling thread</returns>
</member>
<member name="T:Tools.DevicesT.RawInputT.InputDevice">
 <summary>Re</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.#ctor(System.IntPtr)">
 <summary>CTor from handle</summary>
 <param name="hDevice">Device handle</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="hDevice"/> is <see cref="F:System.IntPtr.Zero"/></exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.#ctor(System.IntPtr,Tools.DevicesT.RawInputT.DeviceType)">
 <summary>CTor form handle with device type</summary>
 <param name="hDevice">Device handle</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="hDevice"/> is <see cref="F:System.IntPtr.Zero"/></exception>
 <param name="DeviceType">Type of device. This value is used only for deisplaying purposes and is not used actual operation of the class.</param>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Tools.DevicesT.RawInputT.InputDevice" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Tools.DevicesT.RawInputT.InputDevice" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="F:Tools.DevicesT.RawInputT.InputDevice.DeviceType">
 <summary>Contains device type. Is used only for displaying purposes.</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.GetAllDevices">
 <summary>Gets al the raw input devices present at system</summary>
 <returns>Array of raw input devices represented by <see cref="T:Tools.DevicesT.RawInputT.InputDevice"/> class</returns>
 <exception cref="T:Tools.API.Win32APIException">Error while obtaining list of devices</exception>
</member>
<member name="F:Tools.DevicesT.RawInputT.InputDevice._DeviceHandle">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.InputDevice.DeviceHandle"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.InputDevice.DeviceHandle">
 <summary>Gets device handle</summary>
 <returns>System handle of this device</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceNameString">
 <summary>Gets name of the device as string</summary>
 <exception cref="T:System.ComponentModel.Win32Exception">Error while obtaining device name</exception>
 <remarks>You can get more information about device by useing <see cref="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceName"/></remarks>
 <seelaso cref="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceName"/>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceFileHandle">
 <summary>Gets handle of file representation of this device</summary>
 <returns>Safe handle to file opened using <see cref="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceNameString"/></returns>
 <remarks>It's goog idea to close the file when it is no longer used.</remarks>
 <exception cref="T:System.IO.IOException">File-access error while openning the device file</exception>
 <exception cref="T:Tools.API.Win32APIException">Another error ocured while opening the device file</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.GetCapabilities">
 <summary>Gets information about capabilities of the device</summary>
 <exception cref="T:System.IO.IOException">Error while openning device handle</exception>
 <exception cref="T:Tools.API.Win32APIException">Error while obtaining device capabilities. Typically you cannot get capabilities for some keyboard and mouses; but from some you can.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.GetButtonCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.Int32,System.IntPtr)">
 <summary>Calls <see cref="M:Tools.API.Hid.HidP_GetButtonCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)"/> and returns its result as array of <see cref="T:Tools.API.Hid.HIDP_BUTTON_CAPS"/></summary>
 <param name="Type">Specifies a <see cref="T:Tools.API.Hid.HIDP_REPORT_TYPE"/> enumerator value that identifies the report type.</param>
 <param name="Len">Expected number of <see cref="T:Tools.API.Hid.HIDP_BUTTON_CAPS"/> to be obtained</param>
 <param name="pPData">Pointer to a top-level collection's preparsed data.</param>
 <exception cref="T:Tools.API.Win32APIException">An error ocured while obtaining data</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.GetvalueCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.Int32,System.IntPtr)">
 <summary>Calls <see cref="M:Tools.API.Hid.HidP_GetValueCaps(Tools.API.Hid.HIDP_REPORT_TYPE,System.IntPtr,System.Int16@,System.IntPtr)"/> and returns its result as array of <see cref="T:Tools.API.Hid.HIDP_VALUE_CAPS"/></summary>
 <param name="Type">Specifies a <see cref="T:Tools.API.Hid.HIDP_REPORT_TYPE"/> enumerator value that identifies the report type.</param>
 <param name="Len">Expected number of <see cref="T:Tools.API.Hid.HIDP_VALUE_CAPS"/> to be obtained</param>
 <param name="pPData">Pointer to a top-level collection's preparsed data.</param>
 <exception cref="T:Tools.API.Win32APIException">An error ocured while obtaining data</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceName">
 <summary>Gets parsed device name. Parsed device name provides more information about the device.</summary>
 <exception cref="T:System.ComponentModel.Win32Exception">Error while obtaining device name</exception>
 <exception cref="T:System.FormatException">Device name obtained from <see cref="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceNameString"/> has unexpected format and cannot be parsed.</exception>
 <seelaso cref="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceNameString"/><seelaso cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceInfo">
 <summary>Gets hardware information about raw input device represented by this instance</summary>
 <exception cref="T:Tools.API.Win32APIException">Error while obtaining device info</exception>
 <exception cref="T:Tools.DevicesT.RawInputT.RawInputException">Device of unknown type was returned by system</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.DevicesT.RawInputT.InputDevice" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.DevicesT.RawInputT.InputDevice" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Tools.DevicesT.RawInputT.InputDevice" />.</param>
 <remarks>Comparison is done by overloaded type-safe <see cref="M:System.Object.Equals(System.Object,System.Object)"/> function. Use that function instead.
 <para>Note for inheritors: Type-safe overload of this method can be overriden.</para> </remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.Equals(Tools.DevicesT.RawInputT.InputDevice)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
 <remarks>Two <see cref="T:Tools.DevicesT.RawInputT.InputDevice">InputDevices</see> are consideret equal when both have same <see cref="P:Tools.DevicesT.RawInputT.InputDevice.DeviceHandle"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.op_Equality(Tools.DevicesT.RawInputT.InputDevice,Tools.DevicesT.RawInputT.InputDevice)">
 <summary>Compares two instances of <see cref="T:Tools.DevicesT.RawInputT.InputDevice"/> class</summary>
 <param name="a">A <see cref="T:Tools.DevicesT.RawInputT.InputDevice"/></param>
 <param name="b">A <see cref="T:Tools.DevicesT.RawInputT.InputDevice"/></param>
 <returns>True when both <paramref name="a"/> and <paramref name="b"/> are null or both are not null and has same <see cref="P:Tools.DevicesT.RawInputT.InputDevice.DeviceHandle"/></returns>
 <remarks>This operator uses the <see cref="M:System.Object.Equals(System.Object,System.Object)"/> function</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.InputDevice.op_Inequality(Tools.DevicesT.RawInputT.InputDevice,Tools.DevicesT.RawInputT.InputDevice)">
 <summary>Compares two instances of <see cref="T:Tools.DevicesT.RawInputT.InputDevice"/> class</summary>
 <param name="a">A <see cref="T:Tools.DevicesT.RawInputT.InputDevice"/></param>
 <param name="b">A <see cref="T:Tools.DevicesT.RawInputT.InputDevice"/></param>
 <returns>True when exactly one of <paramref name="a"/>, <paramref name="b"/> is null or tehy are not null and their <see cref="P:Tools.DevicesT.RawInputT.InputDevice.DeviceHandle"/> differs</returns>
 <remarks>This operator uses the <see cref="M:System.Object.Equals(System.Object,System.Object)"/> function</remarks>
</member>
<member name="T:Tools.DevicesT.RawInputT.DeviceCapabilities">
 <summary>Specified capabilities of raw input HID device</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.DeviceCapabilities.#ctor(Tools.API.Hid.HIDP_CAPS,Tools.API.Hid.HIDP_BUTTON_CAPS[],Tools.API.Hid.HIDP_BUTTON_CAPS[],Tools.API.Hid.HIDP_BUTTON_CAPS[],Tools.API.Hid.HIDP_VALUE_CAPS[],Tools.API.Hid.HIDP_VALUE_CAPS[],Tools.API.Hid.HIDP_VALUE_CAPS[])">
 <summary>CTor</summary>
 <param name="Capabilities">Contains general capability information</param>
 <param name="InputButtonCapabilities">Capabilities of all the buttons in top-level collection for input report</param>
 <param name="OutputButtonCapabilities">Capabilities of all the buttons in top-level collection for output report</param>
 <param name="FeatureButtonCapabilities">Capabilities of all the buttons in top-level collection for features report</param>
 <param name="InputValueCapabilities">Capabilities of all the control values in top-level collection for input report</param>
 <param name="OutputValueCapabilities">Capabilities of all the control values in top-level collection for output report</param>
 <param name="FeatureValueCapabilities">Capabilities of all the control values in top-level collection for features report</param>
 <remarks>Capabilities parameters can be null, thay are converted to empty arrays.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceCapabilities.Capabilities">
 <summary>The <see cref="T:Tools.API.Hid.HIDP_CAPS"/> structure this instance was initlaized with</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceCapabilities.InputButtonCapabilities">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ButtonsInput"/> property</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceCapabilities.OutputButtonCapabilities">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ButtonsOutput"/> property</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceCapabilities.FeatureButtonCapabilities">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ButtonsFeature"/> property</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceCapabilities.InputValueCapabilities">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ValuesInput"/> property</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceCapabilities.OutputValueCapabilities">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ValuesOutput"/> property</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceCapabilities.FeatureValueCapabilities">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ValuesFeature"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ButtonsInput">
 <summary>Gets array describing capabilities of al the buttons in top-level collection for input HID report</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ButtonsOutput">
 <summary>Gets array describing capabilities of al the buttons in top-level collection for output HID report</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ButtonsFeature">
 <summary>Gets array describing capabilities of al the buttons in top-level collection for feture HID report</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ValuesInput">
 <summary>Gets array describing capabilities of al the control values in top-level collection for input HID report</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ValuesOutput">
 <summary>Gets array describing capabilities of al the control values in top-level collection for output HID report</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.ValuesFeature">
 <summary>Gets array describing capabilities of al the control values in top-level collection for features HID report</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.Usage">
 <summary>Specifies a top-level collection's usage ID.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.UsagePage">
 <summary>Specifies the top-level collection's usage page.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.FeatureReportMaxLength">
 <summary>Specifies the maximum length, in bytes, of all the feature reports (including the report ID, if report IDs are used, which is prepended to the report data).</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.InputReportMaxLenght">
 <summary>Specifies the maximum size, in bytes, of all the input reports (including the report ID, if report IDs are used, which is prepended to the report data).</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilities.OutputReportMaxLength">
 <summary>Specifies the maximum size, in bytes, of all the output reports (including the report ID, if report IDs are used, which is prepended to the report data).</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase">
 <summary>Base class for <see cref="T:Tools.DevicesT.RawInputT.ButtonCapabilities"/> and <see cref="T:Tools.DevicesT.RawInputT.ValueCapabilities"/></summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.BitField">
 <summary>When overriden in derived class gets the data fields (one or two bytes) associated with an input, output, or feature main item.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsAbsolute">
 <summary>When overriden in derived class specifies, if TRUE, that the button usage or usage range provides absolute data. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsAbsolute"/> is FALSE, the button data is the change in state from the previous value.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsAlias">
 <summary>When overriden in derived class indicates, if TRUE, that a button has a set of aliased usages. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsAlias"/> is FALSE, the button has only one usage.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsDesignatorRange">
 <summary>When overriden in derived class specifies, if TRUE, that the usage or usage range has a set of designators. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsDesignatorRange"/> is FALSE, the usage or usage range has zero or one designator.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange">
 <summary>When overriden in derived class specifies, if TRUE, that the structure describes a usage range. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange"/> is FALSE, the structure describes a single usage.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsStringRange">
 <summary>When overriden in derived class specifies, if TRUE, that the usage or usage range has a set of string descriptors. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsStringRange"/> is FALSE, the usage or usage range has zero or one string descriptor.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.LinkCollection">
 <summary>When overriden in derived class specifies the index of the link collection in a top-level collection's link collection array that contains the usage or usage range. If <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.LinkCollection"/> is zero, the usage or usage range is contained in the top-level collection.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.LinkUsagePage">
 <summary>When overriden in derived class specifies the usage page of the link collection that contains the usage or usage range. If <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.LinkCollection"/> is zero, <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.LinkUsagePage"/> specifies the usage page of the top-level collection.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.LinkUsage">
 <summary>When overriden in derived class specifies the usage of the link collection that contains the usage or usage range. If <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.LinkCollection"/> is zero, <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.LinkUsage"/> specifies the usage of the top-level collection.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsagePage">
 <summary>When overriden in derived class specifies the usage page for a usage or usage range.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DataIndexMin">
 <summary>When overriden in derived class indicates the inclusive lower bound of a sequential range of data indices that correspond, one-to-one and in the same order, to the usages specified by the usage range <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMin"/> to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DataIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DataIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DataIndexMax">
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DataIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DataIndexMax"/></remarks>
 <summary>When overriden in derived class indicates the inclusive upper bound of a sequential range of data indices that correspond, one-to-one and in the same order, to the usages specified by the usage range <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMin"/> to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMax"/>.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DesignatorIndexMin">
 <summary>When overriden in derived class indicates the inclusive lower bound of a range of designators (specified by designator minimum and designator maximum items) whose inclusive upper bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DesignatorIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DesignatorIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DesignatorIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DesignatorIndexMax">
 <summary>When overriden in derived class indicates the inclusive upper bound of a range of designators (specified by designator minimum and designator maximum items) whose inclusive lower bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DesignatorIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DesignatorIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.DesignatorIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.StringIndexMin">
 <summary>When overriden in derived class indicates the inclusive lower bound of a range of string descriptors (specified by string minimum and string maximum items) whose inclusive upper bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.StringIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.StringIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.StringIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.StringIndexMax">
 <summary>When overriden in derived class indicates the inclusive upper bound of a range of string descriptors (specified by string minimum and string maximum items) whose inclusive lower bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.StringIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.StringIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.StringIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMin">
 <summary>When overriden in derived class indicates the inclusive lower bound of usage range whose inclusive upper bound is specified by <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMax">
 <summary>When overriden in derived class indicates the inclusive upper bound of a usage range whose inclusive lower bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMin"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.DeviceCapabilitiesBase.UsageMax"/></remarks>
</member>
<member name="T:Tools.DevicesT.RawInputT.ButtonCapabilities">
 <summary>Holds information about button capabilities</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.ButtonCapabilities.Capabilities">
 <summary>Contains unmanaged capability data obtained from API call</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.ButtonCapabilities.#ctor(Tools.API.Hid.HIDP_BUTTON_CAPS)">
 <summary>CTor</summary>
 <param name="Capabilities">Capability data obtained from API all</param>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.BitField">
 <summary>Gets the data fields (one or two bytes) associated with an input, output, or feature main item.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsAbsolute">
 <summary>Specifies, if TRUE, that the button usage or usage range provides absolute data. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsAbsolute"/> is FALSE, the button data is the change in state from the previous value.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsAlias">
 <summary>Indicates, if TRUE, that a button has a set of aliased usages. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsAlias"/> is FALSE, the button has only one usage.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsDesignatorRange">
 <summary>Specifies, if TRUE, that the usage or usage range has a set of designators. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsDesignatorRange"/> is FALSE, the usage or usage range has zero or one designator.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange">
 <summary>Specifies, if TRUE, that the structure describes a usage range. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange"/> is FALSE, the structure describes a single usage.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsStringRange">
 <summary>Specifies, if TRUE, that the usage or usage range has a set of string descriptors. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsStringRange"/> is FALSE, the usage or usage range has zero or one string descriptor.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.LinkCollection">
 <summary>Specifies the index of the link collection in a top-level collection's link collection array that contains the usage or usage range. If <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.LinkCollection"/> is zero, the usage or usage range is contained in the top-level collection.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.LinkUsagePage">
 <summary>Specifies the usage page of the link collection that contains the usage or usage range. If <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.LinkCollection"/> is zero, <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.LinkUsagePage"/> specifies the usage page of the top-level collection.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.LinkUsage">
 <summary>Specifies the usage of the link collection that contains the usage or usage range. If <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.LinkCollection"/> is zero, <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.LinkUsage"/> specifies the usage of the top-level collection.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsagePage">
 <summary>Specifies the usage page for a usage or usage range.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DataIndexMin">
 <summary>Indicates the inclusive lower bound of a sequential range of data indices that correspond, one-to-one and in the same order, to the usages specified by the usage range <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMin"/> to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DataIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DataIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DataIndexMax">
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DataIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DataIndexMax"/></remarks>
 <summary>Indicates the inclusive upper bound of a sequential range of data indices that correspond, one-to-one and in the same order, to the usages specified by the usage range <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMin"/> to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMax"/>.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DesignatorIndexMin">
 <summary>Indicates the inclusive lower bound of a range of designators (specified by designator minimum and designator maximum items) whose inclusive upper bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DesignatorIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DesignatorIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DesignatorIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DesignatorIndexMax">
 <summary>Indicates the inclusive upper bound of a range of designators (specified by designator minimum and designator maximum items) whose inclusive lower bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DesignatorIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DesignatorIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.DesignatorIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.StringIndexMin">
 <summary>Indicates the inclusive lower bound of a range of string descriptors (specified by string minimum and string maximum items) whose inclusive upper bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.StringIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.StringIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.StringIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.StringIndexMax">
 <summary>Indicates the inclusive upper bound of a range of string descriptors (specified by string minimum and string maximum items) whose inclusive lower bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.StringIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.StringIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.StringIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMin">
 <summary>Indicates the inclusive lower bound of usage range whose inclusive upper bound is specified by <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMax">
 <summary>Indicates the inclusive upper bound of a usage range whose inclusive lower bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMin"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ButtonCapabilities.UsageMax"/></remarks>
</member>
<member name="T:Tools.DevicesT.RawInputT.ValueCapabilities">
 <summary>Holds information about value control capabilities</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.ValueCapabilities.Capabilities">
 <summary>Contains unmanaged capability data obtained from API call</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.ValueCapabilities.#ctor(Tools.API.Hid.HIDP_VALUE_CAPS)">
 <summary>CTor</summary>
 <param name="Capabilities">Capability data obtained from API all</param>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.BitField">
 <summary>Gets the data fields (one or two bytes) associated with an input, output, or feature main item.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsAbsolute">
 <summary>Specifies, if TRUE, that the button usage or usage range provides absolute data. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsAbsolute"/> is FALSE, the button data is the change in state from the previous value.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsAlias">
 <summary>Indicates, if TRUE, that a button has a set of aliased usages. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsAlias"/> is FALSE, the button has only one usage.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsDesignatorRange">
 <summary>Specifies, if TRUE, that the usage or usage range has a set of designators. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsDesignatorRange"/> is FALSE, the usage or usage range has zero or one designator.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange">
 <summary>Specifies, if TRUE, that the structure describes a usage range. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange"/> is FALSE, the structure describes a single usage.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsStringRange">
 <summary>Specifies, if TRUE, that the usage or usage range has a set of string descriptors. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsStringRange"/> is FALSE, the usage or usage range has zero or one string descriptor.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.LinkCollection">
 <summary>Specifies the index of the link collection in a top-level collection's link collection array that contains the usage or usage range. If <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.LinkCollection"/> is zero, the usage or usage range is contained in the top-level collection.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.LinkUsagePage">
 <summary>Specifies the usage page of the link collection that contains the usage or usage range. If <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.LinkCollection"/> is zero, <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.LinkUsagePage"/> specifies the usage page of the top-level collection.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.LinkUsage">
 <summary>Specifies the usage of the link collection that contains the usage or usage range. If <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.LinkCollection"/> is zero, <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.LinkUsage"/> specifies the usage of the top-level collection.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsagePage">
 <summary>Specifies the usage page for a usage or usage range.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.DataIndexMin">
 <summary>Indicates the inclusive lower bound of a sequential range of data indices that correspond, one-to-one and in the same order, to the usages specified by the usage range <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMin"/> to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DataIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DataIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.DataIndexMax">
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DataIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DataIndexMax"/></remarks>
 <summary>Indicates the inclusive upper bound of a sequential range of data indices that correspond, one-to-one and in the same order, to the usages specified by the usage range <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMin"/> to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMax"/>.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.DesignatorIndexMin">
 <summary>Indicates the inclusive lower bound of a range of designators (specified by designator minimum and designator maximum items) whose inclusive upper bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DesignatorIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DesignatorIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DesignatorIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.DesignatorIndexMax">
 <summary>Indicates the inclusive upper bound of a range of designators (specified by designator minimum and designator maximum items) whose inclusive lower bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DesignatorIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DesignatorIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.DesignatorIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.StringIndexMin">
 <summary>Indicates the inclusive lower bound of a range of string descriptors (specified by string minimum and string maximum items) whose inclusive upper bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.StringIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.StringIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.StringIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.StringIndexMax">
 <summary>Indicates the inclusive upper bound of a range of string descriptors (specified by string minimum and string maximum items) whose inclusive lower bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.StringIndexMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.StringIndexMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.StringIndexMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMin">
 <summary>Indicates the inclusive lower bound of usage range whose inclusive upper bound is specified by <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMax"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMax">
 <summary>Indicates the inclusive upper bound of a usage range whose inclusive lower bound is indicated by <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMin"/>.</summary>
 <remarks>When <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.IsRange"/> is false <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMin"/> equals to <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageMax"/></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.HasNull">
 <summary>Specifies, if TRUE, that the usage supports a NULL value, which indicates that the data is not valid and should be ignored. Otherwise, if <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.HasNull"/> is FALSE, the usage does not have a NULL value.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.UsageDataFieldBitSize">
 <summary>Specifies the size, in bits, of a usage's data field in a report. If <see cref="P:Tools.DevicesT.RawInputT.ValueCapabilities.ReportCount"/> is greater than one, each usage has a separate data field of this size.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.ReportCount">
 <summary>Specifies the number of usages that this structure describes.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.UnitsExponent">
 <summary>Specifies the usage's exponent, as described by the USB HID standard.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.Units">
 <summary>Specifies the usage's units, as described by the USB HID Standard.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.LogicalValueMinimum">
 <summary>Specifies a usage's signed lower bound.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.LogicalValueMaximum">
 <summary>Specifies a usage's signed upper bound.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.PhysicalValueMinimum">
 <summary>Specifies a usage's signed lower bound after scaling is applied to the logical minimum value.</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.ValueCapabilities.PhysicalValueMaximum">
 <summary>Specifies a usage's signed upper bound after scaling is applied to the logical maximum value.</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawDeviceName">
 <summary>Parses raw device name obtained by <see cref="M:Tools.DevicesT.RawInputT.InputDevice.GetDeviceName"/> and performs operation with it</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.Parse(System.String)">
 <summary>Parses raw device name</summary>
 <param name="Name">Raw device name in format <c>\\??\<em><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassCode">ClassCode</see></em>#<em><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.SubClassCode">SubClassCode</see></em>#<em><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ProtocolCode">ProtocolCode</see></em></c>#<em><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassGuid">ClassGuid</see></em></param>
 <returns>Instance of <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/> representing parsed <paramref name="Name"/></returns>
 <exception cref="T:System.FormatException"><paramref name="Name"/> is not valid raw device name</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Name"/> is null</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.#ctor(System.String)">
 <summary>CTor from string - parses device name sting</summary>
 <param name="Name">Raw device name in format <c>\\??\<em><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassCode">ClassCode</see></em>#<em><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.SubClassCode">SubClassCode</see></em>#<em><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ProtocolCode">ProtocolCode</see></em></c>#<em><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassGuid">ClassGuid</see></em></param>
 <exception cref="T:System.FormatException"><paramref name="Name"/> is not valid raw device name</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Name"/> is null</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.#ctor(System.String,System.String,System.String,System.Guid)">
 <summary>CTor - creates new instance of <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/> class</summary>
 <param name="ClassCode">Class code of device</param>
 <param name="SubClassCode">Sub class code of device</param>
 <param name="ProtocolCode">Protocol code of device</param>
 <param name="ClassGuid">Guid of device class</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ClassCode"/>, <paramref name="SubClassCode"/> or <paramref name="ProtocolCode"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="ClassCode"/>, <paramref name="SubClassCode"/> or <paramref name="ProtocolCode"/> is and empty string</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.Init(System.String,System.String,System.String,System.Guid)">
 <summary>Initializes this instance of <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/></summary>
 <remarks>Call from CTors only</remarks>
 <param name="ClassCode">Class code of device</param>
 <param name="SubClassCode">Sub class code of device</param>
 <param name="ProtocolCode">Protocol code of device</param>
 <param name="ClassGuid">Guid of device class</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ClassCode"/>, <paramref name="SubClassCode"/> or <paramref name="ProtocolCode"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="ClassCode"/>, <paramref name="SubClassCode"/> or <paramref name="ProtocolCode"/> is and empty string</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.#ctor(Tools.DevicesT.RawInputT.RawDeviceName)">
 <summary>Copy CTor - creates new instance of <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/> from existing one</summary>
 <param name="Other">Instance to clone</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Other"/> is null</exception>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawDeviceName._ClassCode">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassCode"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassCode">
 <summary>Gets class code of the device</summary>
 <returns>Device class code</returns>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawDeviceName._SubClassCode">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.SubClassCode"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawDeviceName.SubClassCode">
 <summary>Gets sub class code of the device</summary>
 <returns>Device sub class code</returns>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawDeviceName._ProtocolCode">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ProtocolCode"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawDeviceName.ProtocolCode">
 <summary>Gets protocol code of the device</summary>
 <returns>Device protocol code</returns>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawDeviceName._ClassGuid">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassGuid"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassGuid">
 <summary>Gets class guid of the device</summary>
 <returns>Device class guid</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawDeviceName.RegistryPath">
 <summary>Gets registry path where information about this device is stored</summary>
 <returns>Registry path under HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum according to formaing string R</returns>
 <seelaso cref="M:Tools.DevicesT.RawInputT.RawDeviceName.ToString"/>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.GetDeviceDescription">
 <summary>Reads device description form the registry</summary>
 <returns>User friendly device description</returns>
 <remarks>Funtion reads value DeviceDesc from key <see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.RegistryPath"/> and attempts to strim user-unfriendly prefix of description (part before ;)</remarks>
 <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key.</exception>
 <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <remarks>Use type-safe <see cref="M:Tools.DevicesT.RawInputT.RawDeviceName.Clone"/> instead</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName" />.</param>
 <remarks>Use type-safe overload instead
 <para>Note for inheritors: Type safe overload chan be overriden.</para></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.Equals(Tools.DevicesT.RawInputT.RawDeviceName)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
 <remarks>Two <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName">RawDeviceNames</see> are considered same if all following properties has same value (strins are compared in case-insensitive culture-independent way): <see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassCode"/>, <see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.SubClassCode"/>, <see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ProtocolCode"/>, <see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassGuid"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName" />.</returns>
 <remarks>This function uses the G format.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.ToString(System.String,System.IFormatProvider)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
 <param name="format">The <see cref="T:System.String" /> specifying the format to use. -or-
 null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
 <param name="formatProvider">Ignored. This class always uses <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> as both formats must be culture invariant.</param>
 <remarks>Suported formats are
 <list type="table"><listheader><term>Format string</term><description>Result</description></listheader>
 <item><term>null or an empty string</term><description>G is used</description></item>
 <item><term>G or g</term><description>General format. Same as used by <see cref="M:Tools.DevicesT.RawInputT.RawDeviceName.Parse(System.String)"/>. That is <c>\\?\{0}#{1}#{2}#{3:B}</c></description></item>
 <item><term>R or r</term><description>Registry fomat. Part of registry path unde which more information about the device can be obtained. That is <c>{0}\{1}\{2}</c></description></item></list>
 where
 <list type="table"><item><term>{0}</term><description><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassCode"/></description></item>
 <item><term>{1}</term><description><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.SubClassCode"/></description></item>
 <item><term>{2}</term><description><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ProtocolCode"/></description></item>
 <item><term>{3}</term><description><see cref="P:Tools.DevicesT.RawInputT.RawDeviceName.ClassGuid"/></description></item></list></remarks>
 <seelaso cref="M:System.Guid.ToString"/><seelaso cref="T:System.String"/>
 <exception cref="T:System.FormatException"><paramref name="format"/> is not one of predefined formating strings (null, "", "G", "g", "R", "r")</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.op_Equality(Tools.DevicesT.RawInputT.RawDeviceName,Tools.DevicesT.RawInputT.RawDeviceName)">
 <summary>Compares two instances of the <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/> class</summary>
 <param name="a">A <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/></param>
 <param name="b">A <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/></param>
 <returns>True where both <paramref name="a"/> and <paramref name="b"/> are null or they are not null and equals according to the <see cref="M:System.Object.Equals(System.Object,System.Object)"/> method</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawDeviceName.op_Inequality(Tools.DevicesT.RawInputT.RawDeviceName,Tools.DevicesT.RawInputT.RawDeviceName)">
 <summary>Compares two instances of the <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/> class</summary>
 <param name="a">A <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/></param>
 <param name="b">A <see cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/></param>
 <returns>True where exactly one of <paramref name="a"/> and <paramref name="b"/> is null or they are not null and does not equal according to the <see cref="M:System.Object.Equals(System.Object,System.Object)"/> method</returns>
</member>
<member name="T:Tools.DevicesT.RawInputT.DeviceInfo">
 <summary>Base class for Device information classes</summary>
 <remarks>This class is not intended to be derived</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.DeviceInfo.#ctor(Tools.DevicesT.RawInputT.DeviceType,System.IntPtr)">
 <summary>CTor from device type and handle</summary>
 <param name="DeviceType">Type of device</param>
 <param name="DeviceHandle">Handle to device</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="DeviceType"/> is not member of <see cref="T:Tools.DevicesT.RawInputT.DeviceType"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="DeviceHandle"/> is <see cref="F:System.IntPtr.Zero"/></exception>
 <exception cref="T:Tools.TypeMismatchException">Type of derived class does not match value of <paramref name="DeviceType"/></exception>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceInfo._DeviceType">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.DeviceInfo.DeviceType"/> property</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceInfo._DeviceHandle">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.DeviceInfo.DeviceHandle"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceInfo.DeviceHandle">
 <summary>Gets handle of device</summary>
 <returns>System handle of device this instance contains info about</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceInfo.DeviceType">
 <summary>Gets device type</summary>
 <returns>Type of device. Value of this property determines type of this instance.</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.DeviceInfo.GetDeviceInfo(Tools.API.RawInput.RID_DEVICE_INFO,System.IntPtr)">
 <summary>Gets instance of <see cref="T:Tools.DevicesT.RawInputT.DeviceInfo"/>-derived class appropriate for type of given device</summary>
 <param name="DeviceInfo">Result of <see cref="M:Tools.API.RawInput.GetRawInputDeviceInfo(System.IntPtr,Tools.API.RawInput.DeviceInfoTypes,System.IntPtr,System.UInt32@)"/>(<see cref="F:Tools.API.RawInput.DeviceInfoTypes.RIDI_DEVICEINFO"/>)</param>
 <param name="DeviceHandle">Hande of device for which <paramref name="DeviceInfo"/> was obtained</param>
 <returns>Instance of <see cref="T:Tools.DevicesT.RawInputT.DeviceInfo"/>-derived class according to device type</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="DeviceInfo"/>.<see cref="F:Tools.API.RawInput.RID_DEVICE_INFO.dwType">dwType</see> is not member of <see cref="T:Tools.API.RawInput.DeviceTypes"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="DeviceHandle"/> is <see cref="F:System.IntPtr.Zero"/></exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.DeviceInfo.GetDevice">
 <summary>Gets device this instance hold information about</summary>
 <returns>Instance of <see cref="T:Tools.DevicesT.RawInputT.InputDevice"/> class that equals to instance this info was created for</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.DeviceInfo.GetDeviceNameString">
 <summary>Gets name of the device</summary>
 <exception cref="T:System.ComponentModel.Win32Exception">Error while obtaining device name</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.DeviceInfo.GetDeviceName">
 <summary>Gets parsed device name. Parsed device name provides more information about the device.</summary>
 <exception cref="T:System.ComponentModel.Win32Exception">Error while obtaining device name</exception>
 <exception cref="T:System.FormatException">Device name obtained from <see cref="M:Tools.DevicesT.RawInputT.DeviceInfo.GetDeviceNameString"/> has unexpected format and cannot be parsed.</exception>
 <seelaso cref="M:Tools.DevicesT.RawInputT.DeviceInfo.GetDeviceNameString"/><seelaso cref="T:Tools.DevicesT.RawInputT.RawDeviceName"/>
</member>
<member name="M:Tools.DevicesT.RawInputT.DeviceInfo.GetDeviceDescription">
 <summary>Reads device description form the registry</summary>
 <returns>Human-readable device description</returns>
 <exception cref="T:System.ComponentModel.Win32Exception">Error while obtaining device name</exception>
 <exception cref="T:System.FormatException">Device name obtained from <see cref="M:Tools.DevicesT.RawInputT.DeviceInfo.GetDeviceNameString"/> has unexpected format and cannot be parsed.</exception>
 <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to read from the registry key.</exception>
 <exception cref="T:System.IO.IOException">The <see cref="T:Microsoft.Win32.RegistryKey" /> that contains the specified value has been marked for deletion.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The user does not have the necessary registry rights.</exception>
 <seelaso cref="M:Tools.DevicesT.RawInputT.RawDeviceName.GetDeviceDescription"/>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceInfo.UsagePage">
 <summary>If overriden in derived class gets top-level collection Usage Page for the device. </summary>
 <returns>Top-level collection Usage Page for the device.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceInfo.Usage">
 <summary>If overriden in derived class gets top-level collection Usage for the device. </summary>
 <returns>Top-level collection Usage for the device.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.DeviceInfo.EnumeratedUsage">
 <summary>Gets value of the <see cref="P:Tools.DevicesT.RawInputT.DeviceInfo.Usage"/> property as value of appropriate enumeration according to <see cref="P:Tools.DevicesT.RawInputT.DeviceInfo.UsagePage"/></summary>
 <seelaso cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsagesEnumeration(Tools.DevicesT.RawInputT.UsagePages)"/>
 <returns>Value of <see cref="P:Tools.DevicesT.RawInputT.DeviceInfo.Usage"/> in type returned by <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsagesEnumeration(Tools.DevicesT.RawInputT.UsagePages)"/> for <see cref="P:Tools.DevicesT.RawInputT.DeviceInfo.Usage"/>; nothing if thara is no such enumeration.</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.DeviceInfo.GetCapabilities">
 <summary>Gets information about capabilities of the device</summary>
 <exception cref="T:System.IO.IOException">Error while openning device handle</exception>
 <exception cref="T:Tools.API.Win32APIException">Error while obtaining device capabilities. Typically you cannot get capabilities for some keyboard and mouses; but from some you can.</exception>
 <seelaso cref="M:Tools.DevicesT.RawInputT.InputDevice.GetCapabilities"/>
</member>
<member name="T:Tools.DevicesT.RawInputT.MouseInfo">
 <summary>Provides information about mouse device</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.MouseInfo.#ctor(Tools.API.RawInput.RID_DEVICE_INFO_MOUSE,System.IntPtr)">
 <exception cref="T:System.ArgumentNullException"><paramref name="DeviceHandle"/> is <see cref="F:System.IntPtr.Zero"/></exception>
</member>
<member name="F:Tools.DevicesT.RawInputT.MouseInfo.Info">
 <summary>Contains mouse information from API call</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.MouseInfo.DeviceId">
 <summary>Gets ID for the mouse device.</summary>
 <remarks>ID for the mouse device</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.MouseInfo.NumberOfButtons">
 <summary>Gets number of buttons for the mouse.</summary>
 <returns>Number of buttons for the mouse.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.MouseInfo.SampleRate">
 <summary>Gets number of data points per second.</summary>
 <returns>Number of data points per second.</returns>
 <remarks> This information may not be applicable for every mouse device.</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.MouseInfo.HasHorizontalWheel">
 <summary>Gets value indicating if the mouse has a wheel for hozirontal scrolling</summary>
 <returns>TRUE if the mouse has a wheel for horizontal scrolling; otherwise, FALSE.</returns>
 <remarks>Note:  This member is only supported under Windows Vista and later versions.</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.MouseInfo.UsagePage">
 <summary>Gets top-level collection Usage Page for the device. </summary>
 <returns><see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/></returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.MouseInfo.Usage">
 <summary>Gets top-level collection Usage for the device. </summary>
 <returns><see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse"/></returns>
</member>
<member name="T:Tools.DevicesT.RawInputT.KeyboardInfo">
 <summary>Provides information about keyboard device</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.KeyboardInfo.#ctor(Tools.API.RawInput.RID_DEVICE_INFO_KEYBOARD,System.IntPtr)">
 <exception cref="T:System.ArgumentNullException"><paramref name="DeviceHandle"/> is <see cref="F:System.IntPtr.Zero"/></exception>
</member>
<member name="F:Tools.DevicesT.RawInputT.KeyboardInfo.Info">
 <summary>Contains keyboard information from API call</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.KeyboardInfo.Type">
 <summary>Gets type of the keyboard. </summary>
 <returns>Type of the keyboard.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.KeyboardInfo.SubType">
 <summary>Gets subtype of the keyboard. </summary>
 <returns>Subtype of the keyboard.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.KeyboardInfo.KeyboardMode">
 <summary>Gets scan code mode. </summary>
 <returns>Scan code mode.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.KeyboardInfo.NumberOfFunctionKeys">
 <summary>Gets number of function keys on the keyboard.</summary>
 <returns>Number of function keys on the keyboard.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.KeyboardInfo.NumberOfIndicators">
 <summary>Gets number of LED indicators on the keyboard.</summary>
 <returns>Number of LED indicators on the keyboard.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.KeyboardInfo.NumberOfKeys">
 <summary>Gets total number of keys on the keyboard. </summary>
 <returns>Total number of keys on the keyboard.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.KeyboardInfo.UsagePage">
 <summary>Gets top-level collection Usage Page for the device. </summary>
 <returns><see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/></returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.KeyboardInfo.Usage">
 <summary>Gets top-level collection Usage for the device. </summary>
 <returns><see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard"/></returns>
</member>
<member name="T:Tools.DevicesT.RawInputT.HidInfo">
 <summary>Provides information about HID device</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.HidInfo.#ctor(Tools.API.RawInput.RID_DEVICE_INFO_HID,System.IntPtr)">
 <exception cref="T:System.ArgumentNullException"><paramref name="DeviceHandle"/> is <see cref="F:System.IntPtr.Zero"/></exception>
</member>
<member name="F:Tools.DevicesT.RawInputT.HidInfo.Info">
 <summary>Contains keyboard information from API call</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.HidInfo.VendorId">
 <summary>Gets vendor ID for the HID. </summary>
 <returns>Vendor ID for the HID.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.HidInfo.ProductId">
 <summary>Gets product ID for the HID. </summary>
 <returns>Product ID for the HID.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.HidInfo.Version">
 <summary>Gets version number for the HID. </summary>
 <returns>Version number for the HID.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.HidInfo.UsagePage">
 <summary>Gets top-level collection Usage Page for the device. </summary>
 <returns>Top-level collection Usage Page for the device.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.HidInfo.Usage">
 <summary>Gets top-level collection Usage for the device. </summary>
 <returns>Top-level collection Usage for the device.</returns>
</member>
<member name="T:Tools.DevicesT.RawInputT.DeviceType">
 <summary>Raw input device types</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceType.Keyboard">
 <summary>The device is a keyboard.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceType.Mouse">
 <summary>The device is a mouse.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.DeviceType.Hid">
 <summary>The device is an Human Interface Device (HID) that is not a keyboard and not a mouse.</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawInputException">
 <summary>Exception thrown when operation not allowed or not supported by curent state of raw input object is attempted</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputException.#ctor(System.String)">
 <summary>Initializes a new instance of the <see cref="T:Tools.DevicesT.RawInputT.RawInputException" /> class with a specified error message.</summary>
 <param name="message">The message that describes the error.</param>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputException.#ctor(System.String,System.Exception)">
 <summary>Initializes a new instance of the <see cref="T:Tools.DevicesT.RawInputT.RawInputException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
 <param name="message">The error message that explains the reason for the exception.</param>
 <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawInputExtensions">
 <summary>Contains extension methods used by raw input</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsagesEnumeration(Tools.DevicesT.RawInputT.UsagePages)">
 <summary>Gets enumeration that lists defined usages for given usage page</summary>
 <param name="UsagePage">Usage page to get usages for</param>
 <returns>Type ther represents enumeration containing usages for given usgae page or null when there are no usages for given usage page or usage page is vendor-specific, <see cref="F:Tools.DevicesT.RawInputT.UsagePages.Undefined"/> or reserved.</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsages(Tools.DevicesT.RawInputT.UsagePages,System.Boolean)">
 <summary>Gets array of all known usages for given usage page</summary>
 <param name="UsagePage">Usage page to get usages for</param>
 <returns>Array of values from enumeration obtained from <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsagesEnumeration(Tools.DevicesT.RawInputT.UsagePages)"/>, if that function returns null this function returns an empty array</returns>
 <param name="AddUnspecifiedMembers">When true, for enumerations that allows values that are not specified in them (such as <see cref="T:Tools.DevicesT.RawInputT.Usages_Button"/>), adds such values to the enumeration; when false only values that are member of the enumeration wil be returned.</param>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)">
 <summary>For member of any enumeration gets its usage type</summary>
 <param name="Usage">Enumeration member representing usage to get usage type for</param>
 <returns><see cref="T:Tools.DevicesT.RawInputT.UsageTypes">UsageType</see> for <paramref name="Usage"/>; if usage type is unknown, 0 is returned</returns>
 <remarks>Usage is obtained from <see cref="T:Tools.DevicesT.RawInputT.UsageTypeAttribute"/> applied to enumeration member constant, or if <paramref name="Usage"/> is not member of its enumeration (according to <see cref="M:Tools.TypeTools.IsDefined(System.Enum)"/>) and the enumeration has <see cref="T:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute"/> attribute atached and <paramref name="Usage"/> fals into range of the attribute and enumeration has <see cref="T:Tools.DevicesT.RawInputT.UndefinedMembersUsageType"/> attribute attached, too, value of that attribute is returned</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_GenericDesktopControls)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_SimulationControls)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_VRControls)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_SportControls)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_GameControls)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_GenericDeviceControls)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_KeyboardKeypad)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_LEDs)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_Button)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_Ordinal)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_Telephony)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_Consumer)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_Digitizer)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_PIDPage)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_MedicalInstruments)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_UsbMonitor)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>(Always zero) Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/>
 <para>Documentation <a href="http://www.usb.org/developers/devclass_docs/usbmon10.pdf">USB Monitor Control Class Specification</a> doe not provide information about usage types for this usage page, so that information is not included in the <see cref="T:Tools.DevicesT.RawInputT.Usages_UsbMonitor"/> enumeration. Thus this function always returns zero.</para></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_UsbEnumeratedValues)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>(Always zero) Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/>
 <para>Documentation <a href="http://www.usb.org/developers/devclass_docs/usbmon10.pdf">USB Monitor Control Class Specification</a> doe not provide information about usage types for this usage page, so that information is not included in the <see cref="T:Tools.DevicesT.RawInputT.Usages_UsbMonitor"/> enumeration. Thus this function always returns zero.</para></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_VesaVirtualControls)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>(Always zero) Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/>
 <para>Documentation <a href="http://www.usb.org/developers/devclass_docs/usbmon10.pdf">USB Monitor Control Class Specification</a> doe not provide information about usage types for this usage page, so that information is not included in the <see cref="T:Tools.DevicesT.RawInputT.Usages_UsbMonitor"/> enumeration. Thus this function always returns zero.</para></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_PowerDevice)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_BatterySystem)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_BarCodeScanners)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_Scale)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_MSRDevices)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(Tools.DevicesT.RawInputT.Usages_Arcade)">
 <summary>Gets usage type of given usage</summary>
 <param name="Usage">Usage to get usage type for</param>
 <returns>Usage type for given <paramref name="Usage"/>. If no usage type is defined returns 0.</returns>
 <remarks>This function uses generic non-extension function <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.GetUsageType(System.Enum)"/></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputExtensions.SetBackgroundEvents``1(``0,Tools.DevicesT.RawInputT.BackgroundEvents)">
 <summary>Sets <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.BackgroundEvents"/> for all items in given collection</summary>
 <param name="Collection">Collection to set value of items from</param>
 <param name="Value">New value for <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.BackgroundEvents"/>property of items in <paramref name="Collection"/></param>
 <typeparam name="T">Actual type of <paramref name="Collection"/>. It must be reference type.</typeparam>
 <returns><paramref name="Collection"/></returns>
 <remarks>When <paramref name="Collection"/> is null does noting and returns null.</remarks>
</member>
<member name="T:Tools.DevicesT.RawInputT.UsagePages">
 <summary>Defines HID usage pages</summary>
 <remarks>Values that are not defined in this enumeration and are not within range <see cref="F:Tools.DevicesT.RawInputT.UsagePages.VendorDefinedMin"/> ÷ <see cref="F:Tools.DevicesT.RawInputT.UsagePages.VendorDefinedMax"/> are reserved
 <para>For more information see <a href="http://www.usb.org/developers/devclass_docs/Hut1_12.pdf">HID Usage Tables</a></para></remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls">
 <summary>Generic Desktop Controls   </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.SimulationControls">
 <summary>Simulation Controls   </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.VRControls">
 <summary>VR Controls   </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.SportControls">
 <summary>Sport Controls   </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.GameControls">
 <summary>Game Controls   </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.GenericDeviceControls">
 <summary>Generic Device Controls   </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.KeyboardKeypad">
 <summary>Keyboard/Keypad   </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.LEDs">
 <summary>LEDs </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.Button">
 <summary>Button </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.Ordinal">
 <summary>Ordinal </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.Telephony">
 <summary>Telephony </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.Consumer">
 <summary>Consumer </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.Digitizer">
 <summary>Digitizer </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.PIDPage">
 <summary>USB Physical Interface Device definitions for force feedback and related devices.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.Unicode">
 <summary>Unicode </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.AlphanumericDisplay">
 <summary>Alphanumeric Display   </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.MedicalInstruments">
 <summary>Medical Instruments   </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.UsbMonitor">
 <summary>USB Device Class Definition for Monitor Devices (Monitor Page 0)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.UsbEnumeratedValues">
 <summary>USB Device Class Definition for Monitor Devices (Monitor Page 1)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.VesaVirtualControls">
 <summary>USB Device Class Definition for Monitor Devices (Monitor Page 2)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.MonitorPage3">
 <summary>USB Device Class Definition for Monitor Devices (Monitor Page 3). This page is reserved</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.PowerDevice">
 <summary>USB Device Class Definition for Power Devices (Power Page 0)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.BatterySystem">
 <summary>USB Device Class Definition for Power Devices (Power Page 1)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.PowerPage2">
 <summary>USB Device Class Definition for Power Devices (Power Page 2). This page is reserved for future use.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.PowerPage3">
 <summary>USB Device Class Definition for Power Devices (Power Page 3). This page is rewserved for future use.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.BarCodeScanners">
 <summary>Bar Code Scanner page (Point Of Sale 0)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.Scale">
 <summary>Scale page  (Point Of Sale 1, weighting devices) </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.MSRDevices">
 <summary>Magnetic Stripe Reading (MSR)Devices  (Point Of Sale 2)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.PointOfScaleReserved">
 <summary>Reserved Point of Sale pages   (Point Of Sale 3). This page is reserved.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.CameraControl">
 <summary>USB Device Class Definition for Image Class Devices.</summary>
 <remarks>Usage page enumeration for this usage page is not available, because I've found it nowhere.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.Arcade">
 <summary>OAAF Definitions for arcade and coinop related Devices  </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.VendorDefinedMin">
 <summary>Minimal value for Vendor-defined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsagePages.VendorDefinedMax">
 <summary>Maximal value for Vendor-defined</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.UsageTypes">
 <summary>Control-related usage types</summary>
 <remarks>Value of type <see cref="T:Tools.DevicesT.RawInputT.UsageTypes"/> is usually single value. On rare occasions multiple flags are specified (OR-ed) indicating that multiple usages are possible.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.LinearControl">
 <summary>Linear control (LC; control related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.OnOffControl">
 <summary>On-Off control (OOC; control related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.MomentaryControl">
 <summary>Momentary control (MC; control related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.OneShotControl">
 <summary>One shot control (OSC; control related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.ReTriggerControl">
 <summary>Re-trigger control (RTC; control related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.Selector">
 <summary>Selector (Sel; data related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.StaticValue">
 <summary>Static value (SV; data related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.StaticFlag">
 <summary>Stafic Flag (SF; data related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.DynamicValue">
 <summary>Dynamic value (DV; data related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.DynamicFlag">
 <summary>Dynamic flag (DF; data related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.NamedArray">
 <summary>Named array (NAry; collection related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.ApplicationCollection">
 <summary>Application collection (CA; collection related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.LogicalCollection">
 <summary>Physical collection (CL; collection related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.PhysicalCollection">
 <summary>Physical collection (CP; collection related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.UsageSwitch">
 <summary>Usage switch (US; collection related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.UsageModifier">
 <summary>Usage modifier (UM; collection related)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.BufferedBytes">
 <summary>Buffered bytes</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypes.Item">
 <summary>Item</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.UsageTypeAttribute">
 <summary>Applied to constants in usage pages enumerations to define usage types of HID defice usages</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.UsageTypeAttribute.#ctor(Tools.DevicesT.RawInputT.UsageTypes)">
 <summary>CTor from usage type</summary>
 <param name="UsageType">OR-ed <see cref="T:Tools.DevicesT.RawInputT.UsageTypes"/> to initialize this instance with</param>
</member>
<member name="F:Tools.DevicesT.RawInputT.UsageTypeAttribute._UsageType">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.UsageTypeAttribute.UsageType"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.UsageTypeAttribute.UsageType">
 <summary>Gets usage types applied by this attribute</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.UndefinedMembersUsageType">
 <summary>When applied to enumeration defines <see cref="T:Tools.DevicesT.RawInputT.UsageTypeAttribute"/> for values that are not defined in enumeration</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.UndefinedMembersUsageType.#ctor(Tools.DevicesT.RawInputT.UsageTypes)">
 <summary>CTor from usage type</summary>
 <param name="UsageType">OR-ed <see cref="T:Tools.DevicesT.RawInputT.UsageTypes"/> to initialize this instance with</param>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Pointer">
 <summary>Pointer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse">
 <summary>Mouse</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Joystick">
 <summary>Joystick</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Gamepad">
 <summary>Gamepad</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard">
 <summary>Keyboard</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keypad">
 <summary>Keypad</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.MultiAxisController">
 <summary>Multi-axis controller</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.TabletPCSystemControls">
 <summary>Tablet PC System Controls</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.X">
 <summary>X</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Y">
 <summary>Y</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Z">
 <summary>Z</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Rx">
 <summary>Rx</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Ry">
 <summary>Ry</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Rz">
 <summary>Rz</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Slider">
 <summary>Slider</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Dial">
 <summary>Dial</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Wheel">
 <summary>Wheel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.HatSwitch">
 <summary>Hat switch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.CountedBuffer">
 <summary>Counted Buffer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.ByteCount">
 <summary>Byte Count</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.MotionWakeup">
 <summary>Motion Wakeup</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Start">
 <summary>Start</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Select">
 <summary>Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Vx">
 <summary>Vx</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Vy">
 <summary>Vy</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Vz">
 <summary>Vz</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Vbrx">
 <summary>Vbrx</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Vbry">
 <summary>Vbry</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Vbrz">
 <summary>Vbrz</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Vno">
 <summary>Vno</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.FeatureNotification">
 <summary>Feature Notification</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.ResolutionMultiplier">
 <summary>Resolution Multiplier</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemControl">
 <summary>System Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemPowerDown">
 <summary>System Power Down</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemSleep">
 <summary>System Sleep</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemWakeUp">
 <summary>System Wake Up</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemContextMenu">
 <summary>System Context Menu</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemMainMenu">
 <summary>System Main Menu</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemAppMenu">
 <summary>System App Menu</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemMenuHelp">
 <summary>System Menu Help</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemMenuExit">
 <summary>System Menu Exit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemMenuSelect">
 <summary>System Menu Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemMenuRight">
 <summary>System Menu Right</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemMenuLeft">
 <summary>System Menu Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemMenuUp">
 <summary>System Menu Up</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemMenuDown">
 <summary>System Menu Down</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemColdRestart">
 <summary>System Cold Restart</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemWarmRestart">
 <summary>System Warm Restart</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.DPadUp">
 <summary>D-pad Up</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.DPadDown">
 <summary>D-pad Down</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.DPadRight">
 <summary>D-pad Right</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.DPadLeft">
 <summary>D-pad Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDock">
 <summary>System Dock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemUndock">
 <summary>System Undock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemSetup">
 <summary>System Setup</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemBreak">
 <summary>System Break</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDebuggerBreak">
 <summary>System Debugger Break</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.ApplicationBreak">
 <summary>Application Break</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.ApplicationDebuggerBreak">
 <summary>Application Debugger Break</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemSpeakerMute">
 <summary>System Speaker Mute</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemHibernate">
 <summary>System Hibernate</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDisplayInvert">
 <summary>System Display Invert</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDisplayInternal">
 <summary>System Display Internal</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDisplayExternal">
 <summary>System Display External</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDisplayBoth">
 <summary>System Display Both</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDisplayDual">
 <summary>System Display Dual</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDisplayToggleIntExt">
 <summary>System Display Toggle Int/Ext</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDisplaySwapPrimarySecondary">
 <summary>System Display Swap Primary/Secondary</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.SystemDisplayLCDAutoscale">
 <summary>System Display LCD Autoscale</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_SimulationControls">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.SimulationControls"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Flight">
 <summary>Flight Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Automobile">
 <summary>Automobile Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Tank">
 <summary>Tank Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Spaceship">
 <summary>Spaceship Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.SubmarineS">
 <summary>Submarine Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Sailing">
 <summary>Sailing Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Motorcycle">
 <summary>Motorcycle Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Sports">
 <summary>Sports Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Airplane">
 <summary>Airplane Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Helicopter">
 <summary>Helicopter Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.MagicCarpet">
 <summary>Magic Carpet</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Bicycle">
 <summary>Bicycle Simulation Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.FlightControlStick">
 <summary>Flight Control Stick</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.FlightStick">
 <summary>Flight Stick</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.CyclicControl">
 <summary>Cyclic Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.CyclicTrim">
 <summary>Cyclic Trim</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.FlightYoke">
 <summary>Flight Yoke</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.TrackControl">
 <summary>Track Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Aileron">
 <summary>Aileron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.AileronTrim">
 <summary>Aileron Trim</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.AntiTorqueControl">
 <summary>Anti-Torque Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.AutopilotEnable">
 <summary>Autopilot Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.ChaffRelease">
 <summary>Chaff Release</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.CollectiveControl">
 <summary>Collective Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.DiveBrake">
 <summary>Dive Brake</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.ElectronicCountermeasures">
 <summary>Electronic Countermeasures</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Elevator">
 <summary>Elevator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.ElevatorTrim">
 <summary>Elevator Trim</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Rudder">
 <summary>Rudder</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Throttle">
 <summary>Throttle</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.FlightCommunications">
 <summary>Flight Communications</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.FlareRelease">
 <summary>Flare Release</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.LandingGear">
 <summary>Landing Gear</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.ToeBrake">
 <summary>Toe Brake</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Trigger">
 <summary>Trigger</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.WeaponsArm">
 <summary>Weapons Arm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.WeaponsSelect">
 <summary>Weapons Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.WingFlaps">
 <summary>Wing Flaps</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Accelerator">
 <summary>Accelerator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Brake">
 <summary>Brake</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Clutch">
 <summary>Clutch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Shifter">
 <summary>Shifter</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Steering">
 <summary>Steering</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.TurretDirection">
 <summary>Turret Direction</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.BarrelElevation">
 <summary>Barrel Elevation</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.DivePlane">
 <summary>Dive Plane</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.Ballast">
 <summary>Ballast</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.BicycleCrank">
 <summary>Bicycle Crank</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.HandleBars">
 <summary>Handle Bars</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.FrontBrake">
 <summary>Front Brake</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SimulationControls.RearBrake">
 <summary>Rear Brake</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_VRControls">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.VRControls"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.Unidentified">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.Belt">
 <summary>Belt</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.BodySuit">
 <summary>Body Suit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.Flexor">
 <summary>Flexor</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.Glove">
 <summary>Glove</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.HeadTracker">
 <summary>Head Tracker</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.HeadMountedDisplay">
 <summary>Head Mounted Display</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.HandTracker">
 <summary>Hand Tracker</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.Oculometer">
 <summary>Oculometer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.Vest">
 <summary>Vest</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.AnimatronicDevice">
 <summary>Animatronic Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.StereoEnable">
 <summary>Stereo Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VRControls.DisplayEnable">
 <summary>Display Enable</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_SportControls">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.SportControls"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Unidentified">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.BaseballBat">
 <summary>Baseball Bat</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.GolfClub">
 <summary>Golf Club</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.RowingMachine">
 <summary>Rowing Machine</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Treadmill">
 <summary>Treadmill</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Oar">
 <summary>Oar</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Slope">
 <summary>Slope</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Rate">
 <summary>Rate</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.StickSpeed">
 <summary>Stick Speed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.StickFaceAngle">
 <summary>Stick Face Angle</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.StickHeelToe">
 <summary>Stick Heel/Toe</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.StickFollowThrough">
 <summary>Stick Follow Through</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.StickTempo">
 <summary>Stick Tempo</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.StickType">
 <summary>Stick Type</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.StickHeight">
 <summary>Stick Height</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Putter">
 <summary>Putter</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron1">
 <summary>1 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron2">
 <summary>2 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron3">
 <summary>3 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron4">
 <summary>4 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron5">
 <summary>5 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron6">
 <summary>6 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron7">
 <summary>7 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron8">
 <summary>8 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron9">
 <summary>9 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron10">
 <summary>10 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Iron11">
 <summary>11 Iron</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.SandWedge">
 <summary>Sand Wedge</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.LoftWedge">
 <summary>Loft Wedge</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.PowerWedge">
 <summary>Power Wedge</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Wood1">
 <summary>1 Wood</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Wood3">
 <summary>3 Wood</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Wood5">
 <summary>5 Wood</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Wood7">
 <summary>7 Wood</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_SportControls.Wood9">
 <summary>9 Wood</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_GameControls">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GameControls"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.Unidentified">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GameController3D">
 <summary>3D Game Controller</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.Pinball">
 <summary>Pinball Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.Gun">
 <summary>Gun Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.PointOfView">
 <summary>Point of View</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.TurnRightLeft">
 <summary>Turn Right/Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.PitchForwardBackward">
 <summary>Pitch Forward/Backward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.RollRightLeft">
 <summary>Roll Right/Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.MoveRightLeft">
 <summary>Move Right/Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.MoveForwardBackward">
 <summary>Move Forward/Backward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.MoveUpDown">
 <summary>Move Up/Down</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.LeanRightLeft">
 <summary>Lean Right/Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.LeanForwardBackward">
 <summary>Lean Forward/Backward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.HeightOfPOV">
 <summary>Height of POV</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.Flipper">
 <summary>Flipper</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.SecondaryFlipper">
 <summary>Secondary Flipper</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.Bump">
 <summary>Bump</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.NewGame">
 <summary>New Game</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.ShootBall">
 <summary>Shoot Ball</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.Player">
 <summary>Player</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GunBolt">
 <summary>Gun Bolt</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GunClip">
 <summary>Gun Clip</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GunSelector">
 <summary>Gun Selector</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GunSingleShot">
 <summary>Gun Single Shot</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GunBurst">
 <summary>Gun Burst</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GunAutomatic">
 <summary>Gun Automatic</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GunSafety">
 <summary>Gun Safety</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GamepadFireJump">
 <summary>Gamepad Fire/Jump</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GameControls.GamepadTrigger">
 <summary>Gamepad Trigger</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_GenericDeviceControls">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDeviceControls"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDeviceControls.Unidentified">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDeviceControls.BatteryStrength">
 <summary>Battery Strength</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDeviceControls.WirelessChannel">
 <summary>Wireless Channel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDeviceControls.WirelessID">
 <summary>Wireless ID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDeviceControls.DiscoverWirelessControl">
 <summary>Discover Wireless Control</summary>                
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDeviceControls.SecurityCodeCharacterEntered">
 <summary>Security Code Character Entered</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDeviceControls.SecurityCodeCharacterErased">
 <summary>Security Code Character Erased</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_GenericDeviceControls.SecurityCodeCleared">
 <summary>Security Code Cleared</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.KeyboardKeypad"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved.
 <para>All keys but <see cref="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LeftControl"/> and <see cref="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.RightGUI"/> has usage type <see cref="F:Tools.DevicesT.RawInputT.UsageTypes.Selector"/>.</para></remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.ReservedNoEventIndicated">
 <summary>Reserved (no event indicated)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.ErrorRollOver">
 <summary>Keyboard ErrorRollOver</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.POSTFail">
 <summary>Keyboard POSTFail</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.ErrorUndefined">
 <summary>Keyboard ErrorUndefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.A">
 <summary>Keyboard a and A</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.B">
 <summary>Keyboard b and B</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.C">
 <summary>Keyboard c and C</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D">
 <summary>Keyboard d and D</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.E">
 <summary>Keyboard e and E</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F">
 <summary>Keyboard f and F</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.G">
 <summary>Keyboard g and G</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.H">
 <summary>Keyboard h and H</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.I">
 <summary>Keyboard i and I</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.J">
 <summary>Keyboard j and J</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.K">
 <summary>Keyboard k and K</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.L">
 <summary>Keyboard l and L</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.M">
 <summary>Keyboard m and M</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.N">
 <summary>Keyboard n and N</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.O">
 <summary>Keyboard o and O</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.P">
 <summary>Keyboard p and P</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.R">
 <summary>Keyboard r and R</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.S">
 <summary>Keyboard s and S</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.T">
 <summary>Keyboard t and T</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.U">
 <summary>Keyboard u and U</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.V">
 <summary>Keyboard v and V</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.W">
 <summary>Keyboard w and W</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.X">
 <summary>Keyboard x and X</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Y">
 <summary>Keyboard y and Y</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Z">
 <summary>Keyboard z and Z</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D1">
 <summary>Keyboard 1 and !</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D2">
 <summary>Keyboard 2 and @</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D3">
 <summary>Keyboard 3 and #</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D4">
 <summary>Keyboard 4 and $</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D5">
 <summary>Keyboard 5 and %</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D6">
 <summary>Keyboard 6 and ^</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D7">
 <summary>Keyboard 7 and &amp;</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D8">
 <summary>Keyboard 8 and *</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D9">
 <summary>Keyboard 9 and (</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.D0">
 <summary>Keyboard 0 and )</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Enter">
 <summary>Keyboard Return (ENTER)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Escape">
 <summary>Keyboard ESCAPE</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.DeleteBackspace">
 <summary>Keyboard DELETE (Backspace)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Tab">
 <summary>Keyboard Tab</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Spacebar">
 <summary>Keyboard Spacebar</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Minus">
 <summary>Keyboard - and (underscore)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Equals">
 <summary>Keyboard = and +</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.OpenBrace">
 <summary>Keyboard [ and {</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.CloseBrace">
 <summary>Keyboard ] and }</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Backslash">
 <summary>Keyboard \ and |</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Hash">
 <summary>Keyboard Non-US # and ~</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Semicolon">
 <summary>Keyboard ; and :</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.GraveAccentAndDoubleGraveAccent">
 <summary>Keyboard ‘ and “</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.GraveAccentAndTilde">
 <summary>Keyboard Grave Accent and Tilde</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Comma">
 <summary>Keyboard , and &lt;</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Dot">
 <summary>Keyboard . and ></summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Slash">
 <summary>Keyboard / and ?</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.CapsLock">
 <summary>Keyboard Caps Lock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F1">
 <summary>Keyboard F1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F2">
 <summary>Keyboard F2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F3">
 <summary>Keyboard F3</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F4">
 <summary>Keyboard F4</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F5">
 <summary>Keyboard F5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F6">
 <summary>Keyboard F6</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F7">
 <summary>Keyboard F7</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F8">
 <summary>Keyboard F8</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F9">
 <summary>Keyboard F9</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F10">
 <summary>Keyboard F10</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F11">
 <summary>Keyboard F11</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F12">
 <summary>Keyboard F12</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.PrintScreen">
 <summary>Keyboard PrintScreen</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.ScrollLock">
 <summary>Keyboard Scroll Lock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Pause">
 <summary>Keyboard Pause</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Insert">
 <summary>Keyboard Insert</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Home">
 <summary>Keyboard Home</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.PageUp">
 <summary>Keyboard PageUp</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.DeleteForward">
 <summary>Keyboard Delete Forward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.End">
 <summary>Keyboard End</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.PageDown">
 <summary>Keyboard PageDown</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.RightArrow">
 <summary>Keyboard RightArrow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LeftArrow">
 <summary>Keyboard LeftArrow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.DownArrow">
 <summary>Keyboard DownArrow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.UpArrow">
 <summary>Keyboard UpArrow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadNumLockAndClear">
 <summary>Keypad Num Lock and Clear</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadSlash">
 <summary>Keypad /</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadAsterisk">
 <summary>Keypad *</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadMinus">
 <summary>Keypad -</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadPlus">
 <summary>Keypad +</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadENTER">
 <summary>Keypad ENTER</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad1">
 <summary>Keypad 1 and End</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad2">
 <summary>Keypad 2 and Down Arrow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad3">
 <summary>Keypad 3 and PageDn</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad4">
 <summary>Keypad 4 and Left Arrow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad5">
 <summary>Keypad 5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad6">
 <summary>Keypad 6 and Right Arrow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad7">
 <summary>Keypad 7 and Home</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad8">
 <summary>Keypad 8 and Up Arrow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad9">
 <summary>Keypad 9 and PageUp</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad0">
 <summary>Keypad 0 and Insert</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadDot">
 <summary>Keypad . and Delete</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Backslash2">
 <summary>Keyboard Non-US \ and |</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Application">
 <summary>Keyboard Application</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Power">
 <summary>Keyboard Power</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadEquals">
 <summary>Keypad =</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F13">
 <summary>Keyboard F13</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F14">
 <summary>Keyboard F14</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F15">
 <summary>Keyboard F15</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F16">
 <summary>Keyboard F16</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F17">
 <summary>Keyboard F17</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F18">
 <summary>Keyboard F18</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F19">
 <summary>Keyboard F19</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F20">
 <summary>Keyboard F20</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F21">
 <summary>Keyboard F21</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F22">
 <summary>Keyboard F22</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F23">
 <summary>Keyboard F23</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.F24">
 <summary>Keyboard F24</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Execute">
 <summary>Keyboard Execute</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Help">
 <summary>Keyboard Help</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Menu">
 <summary>Keyboard Menu</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Select">
 <summary>Keyboard Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Stop">
 <summary>Keyboard Stop</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Again">
 <summary>Keyboard Again</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Undo">
 <summary>Keyboard Undo</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Cut">
 <summary>Keyboard Cut</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Copy">
 <summary>Keyboard Copy</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Paste">
 <summary>Keyboard Paste</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Find">
 <summary>Keyboard Find</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Mute">
 <summary>Keyboard Mute</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.VolumeUp">
 <summary>Keyboard Volume Up</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.VolumeDown">
 <summary>Keyboard Volume Down</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LockingCapsLock">
 <summary>Keyboard Locking Caps Lock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LockingNumLock">
 <summary>Keyboard Locking Num Lock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LockingScrollLock">
 <summary>Keyboard Locking Scroll Lock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadComma">
 <summary>Keypad Comma</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadEqualSign">
 <summary>Keypad Equal Sign</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.International1">
 <summary>Keyboard International1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.International2">
 <summary>Keyboard International2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.International3">
 <summary>Keyboard International3</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.International4">
 <summary>Keyboard International4</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.International5">
 <summary>Keyboard International5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.International6">
 <summary>Keyboard International6</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.International7">
 <summary>Keyboard International7</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.International8">
 <summary>Keyboard International8</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.International9">
 <summary>Keyboard International9</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LANG1">
 <summary>Keyboard LANG1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LANG2">
 <summary>Keyboard LANG2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LANG3">
 <summary>Keyboard LANG3</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LANG4">
 <summary>Keyboard LANG4</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LANG5">
 <summary>Keyboard LANG5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LANG6">
 <summary>Keyboard LANG6</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LANG7">
 <summary>Keyboard LANG7</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LANG8">
 <summary>Keyboard LANG8</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LANG9">
 <summary>Keyboard LANG9</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.AlternateErase">
 <summary>Keyboard Alternate Erase</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.SysReqAttention">
 <summary>Keyboard SysReq/Attention</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Cancel">
 <summary>Keyboard Cancel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Clear">
 <summary>Keyboard Clear</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Prior">
 <summary>Keyboard Prior</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Return">
 <summary>Keyboard Return</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Separator">
 <summary>Keyboard Separator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Out">
 <summary>Keyboard Out</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Oper">
 <summary>Keyboard Oper</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.ClearAgain">
 <summary>Keyboard Clear/Again</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.CrSelProps">
 <summary>Keyboard CrSel/Props</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.ExSel">
 <summary>Keyboard ExSel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad00">
 <summary>Keypad 00</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.Keypad000">
 <summary>Keypad 000</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.ThousandsSeparator">
 <summary>Thousands Separator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.DecimalSeparator">
 <summary>Decimal Separator </summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.CurrencyUnit">
 <summary>Currency Unit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.CurrencySubUnit">
 <summary>Currency Sub-unit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadOpenBrace">
 <summary>Keypad (</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadCloseBrace">
 <summary>Keypad )</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadOpenBracket">
 <summary>Keypad {</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadCloseBracket">
 <summary>Keypad }</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadTab">
 <summary>Keypad Tab</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadBackspace">
 <summary>Keypad Backspace</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadA">
 <summary>Keypad A</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadB">
 <summary>Keypad B</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadC">
 <summary>Keypad C</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadD">
 <summary>Keypad D</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadE">
 <summary>Keypad E</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadF">
 <summary>Keypad F</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadXOR">
 <summary>Keypad XOR</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadCaret">
 <summary>Keypad ^</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadPercent">
 <summary>Keypad %</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadLessThan">
 <summary>Keypad &lt;</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadGreateThan">
 <summary>Keypad ></summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadAndpresand">
 <summary>Keypad amp;</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadAndpresands">
 <summary>Keypad &amp;&amp;</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadPipe">
 <summary>Keypad |</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadPipes">
 <summary>Keypad ||</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadColon">
 <summary>Keypad :</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadHash">
 <summary>Keypad #</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadSpace">
 <summary>Keypad Space</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadAt">
 <summary>Keypad @</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadExclamation">
 <summary>Keypad !</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadMemoryStore">
 <summary>Keypad Memory Store</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadMemoryRecall">
 <summary>Keypad Memory Recall</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadMemoryClear">
 <summary>Keypad Memory Clear</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadMemoryAdd">
 <summary>Keypad Memory Add</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadMemorySubtract">
 <summary>Keypad Memory Subtract</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadMemoryMultiply">
 <summary>Keypad Memory Multiply</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadMemoryDivide">
 <summary>Keypad Memory Divide</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadPlusMinus">
 <summary>Keypad +/-</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadClear">
 <summary>Keypad Clear</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadClearEntry">
 <summary>Keypad Clear Entry</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadBinary">
 <summary>Keypad Binary</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadOctal">
 <summary>Keypad Octal</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.KeypadDecimal">
 <summary>Keypad Decimal</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LeftControl">
 <summary>Keyboard LeftControl</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LeftShift">
 <summary>Keyboard LeftShift</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LeftAlt">
 <summary>Keyboard LeftAlt</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.LeftGUI">
 <summary>Keyboard Left GUI</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.RightControl">
 <summary>Keyboard RightControl</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.RightShift">
 <summary>Keyboard RightShift</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.RightAlt">
 <summary>Keyboard RightAlt</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_KeyboardKeypad.RightGUI">
 <summary>Keyboard Right GUI</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_LEDs">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.LEDs"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Unidentified">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.NumLock">
 <summary>Num Lock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.CapsLock">
 <summary>Caps Lock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.ScrollLock">
 <summary>Scroll Lock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Compose">
 <summary>Compose</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Kana">
 <summary>Kana</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Power">
 <summary>Power</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Shift">
 <summary>Shift</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.DoNotDisturb">
 <summary>Do Not Disturb</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Mute">
 <summary>Mute</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.ToneEnable">
 <summary>Tone Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.HighCutFilter">
 <summary>High Cut Filter</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.LowCutFilter">
 <summary>Low Cut Filter</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.EqualizerEnable">
 <summary>Equalizer Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.SoundFieldOn">
 <summary>Sound Field On</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.SurroundOn">
 <summary>Surround On</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Repeat">
 <summary>Repeat</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Stereo">
 <summary>Stereo</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.SamplingRateDetect">
 <summary>Sampling Rate Detect</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Spinning">
 <summary>Spinning</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.CAV">
 <summary>CAV</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.CLV">
 <summary>CLV</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.RecordingFormatDetect">
 <summary>Recording Format Detect</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.OffHook">
 <summary>Off-Hook</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Ring">
 <summary>Ring</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.MessageWaiting">
 <summary>Message Waiting</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.DataMode">
 <summary>Data Mode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.BatteryOperation">
 <summary>Battery Operation</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.BatteryOK">
 <summary>Battery OK</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.BatteryLow">
 <summary>Battery Low</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Speaker">
 <summary>Speaker</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.HeadSet">
 <summary>Head Set</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Hold">
 <summary>Hold</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Microphone">
 <summary>Microphone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Coverage">
 <summary>Coverage</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.NightMode">
 <summary>Night Mode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.SendCalls">
 <summary>Send Calls</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.CallPickup">
 <summary>Call Pickup</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Conference">
 <summary>Conference</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.StandBy">
 <summary>Stand-by</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.CameraOn">
 <summary>Camera On</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.CameraOff">
 <summary>Camera Off</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.OnLine">
 <summary>On-Line</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.OffLine">
 <summary>Off-Line</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Busy">
 <summary>Busy</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Ready">
 <summary>Ready</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.PaperOut">
 <summary>Paper-Out</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.PaperJam">
 <summary>Paper-Jam</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Remote">
 <summary>Remote</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Forward">
 <summary>Forward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Reverse">
 <summary>Reverse</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Stop">
 <summary>Stop</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Rewind">
 <summary>Rewind</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.FastForward">
 <summary>Fast Forward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Play">
 <summary>Play</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Pause">
 <summary>Pause</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Record">
 <summary>Record</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.Error">
 <summary>Error</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.UsageSelectedIndicator">
 <summary>Usage Selected Indicator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.UsageInUseIndicator">
 <summary>Usage In Use Indicator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.UsageMultiModeIndicator">
 <summary>Usage Multi Mode Indicator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.IndicatorOn">
 <summary>Indicator On</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.IndicatorFlash">
 <summary>Indicator Flash</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.IndicatorSlowBlink">
 <summary>Indicator Slow Blink</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.IndicatorFastBlink">
 <summary>Indicator Fast Blink</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.IndicatorOff">
 <summary>Indicator Off</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.FlashOnTime">
 <summary>Flash On Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.SlowBlinkOnTime">
 <summary>Slow Blink On Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.SlowBlinkOffTime">
 <summary>Slow Blink Off Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.FastBlinkOnTime">
 <summary>Fast Blink On Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.FastBlinkOffTime">
 <summary>Fast Blink Off Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.UsageIndicatorColor">
 <summary>Usage Indicator Color</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.IndicatorRed">
 <summary>Indicator Red</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.IndicatorGreen">
 <summary>Indicator Green</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.IndicatorAmber">
 <summary>Indicator Amber</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.GenericIndicator">
 <summary>Generic Indicator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.SystemSuspend">
 <summary>System Suspend</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_LEDs.ExternalPowerConnected">
 <summary>External Power Connected</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_Button">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.Button"/> page</summary>
 <remarks>For this enumeration all values between <see cref="F:Tools.DevicesT.RawInputT.Usages_Button.Button1"/> and <see cref="F:Tools.DevicesT.RawInputT.Usages_Button.Button65535"/> can be used.
 <para>Buttons can be either <see cref="F:Tools.DevicesT.RawInputT.UsageTypes.Selector"/>, <see cref="F:Tools.DevicesT.RawInputT.UsageTypes.OnOffControl"/>, <see cref="F:Tools.DevicesT.RawInputT.UsageTypes.MomentaryControl"/> or <see cref="F:Tools.DevicesT.RawInputT.UsageTypes.OneShotControl"/> depending on the context of their declaration</para></remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Button.NoButtonPressed">
 <summary>No button pressed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Button.Button1">
 <summary>Button 1 (primary/trigger)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Button.Button2">
 <summary>Button 2 (secondary)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Button.Button3">
 <summary>Button 3 (tertiary)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Button.Button4">
 <summary>Button 4</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Button.Button65535">
 <summary>Button 65535</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_Ordinal">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.Ordinal"/> page</summary>
 <remarks>For this enumeration all values between <see cref="F:Tools.DevicesT.RawInputT.Usages_Ordinal.Instance1"/> and <see cref="F:Tools.DevicesT.RawInputT.Usages_Ordinal.Instance65535"/> can be used.
 <para>Memmbers are always of <see cref="F:Tools.DevicesT.RawInputT.UsageTypes.UsageModifier"/> type.</para></remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Ordinal.Reserved">
 <summary>Reserved</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Ordinal.Instance1">
 <summary>Instance 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Ordinal.instance2">
 <summary>Instance 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Ordinal.Instance3">
 <summary>Instance 3</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Ordinal.Instance4">
 <summary>Isnatnce 4</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Ordinal.Instance65535">
 <summary>Instance 65535</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_Telephony">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.Telephony"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Unassigned">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Phone">
 <summary>Phone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.AnsweringMachine">
 <summary>Answering Machine</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.MessageControls">
 <summary>Message Controls</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Handset">
 <summary>Handset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Headset">
 <summary>Headset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.TelephonyKeyPad">
 <summary>Telephony Key Pad</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.ProgrammableButton">
 <summary>Programmable Button</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.HookSwitch">
 <summary>Hook Switch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Flash">
 <summary>Flash</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Feature">
 <summary>Feature</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Hold">
 <summary>Hold</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Redial">
 <summary>Redial</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Transfer">
 <summary>Transfer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Drop">
 <summary>Drop</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Park">
 <summary>Park</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.ForwardCalls">
 <summary>Forward Calls</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.AlternateFunction">
 <summary>Alternate Function</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Line">
 <summary>Line</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.SpeakerPhone">
 <summary>Speaker Phone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Conference">
 <summary>Conference</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.RingEnable">
 <summary>Ring Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.RingSelect">
 <summary>Ring Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.PhoneMute">
 <summary>Phone Mute</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.CallerID">
 <summary>Caller ID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Send">
 <summary>Send</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.SpeedDial">
 <summary>Speed Dial</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.StoreNumber">
 <summary>Store Number</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.RecallNumber">
 <summary>Recall Number</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.PhoneDirectory">
 <summary>Phone Directory</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.VoiceMail">
 <summary>Voice Mail</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.ScreenCalls">
 <summary>Screen Calls</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.DoNotDisturb">
 <summary>Do Not Disturb</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Message">
 <summary>Message</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.AnswerOnOff">
 <summary>Answer On/Off</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.InsideDialTone">
 <summary>Inside Dial Tone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.OutsideDialTone">
 <summary>Outside Dial Tone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.InsideRingTone">
 <summary>Inside Ring Tone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.OutsideRingTone">
 <summary>Outside Ring Tone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.PriorityRingTone">
 <summary>Priority Ring Tone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.InsideRingback">
 <summary>Inside Ringback</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.PriorityRingback">
 <summary>Priority Ringback</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.LineBusyTone">
 <summary>Line Busy Tone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.ReorderTone">
 <summary>Reorder Tone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.CallWaitingTone">
 <summary>Call Waiting Tone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.ConfirmationTone1">
 <summary>Confirmation Tone 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.ConfirmationTone2">
 <summary>Confirmation Tone 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.TonesOff">
 <summary>Tones Off</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.OutsideRingback">
 <summary>Outside Ringback</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Ringer">
 <summary>Ringer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key0">
 <summary>Phone Key 0</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key1">
 <summary>Phone Key 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key2">
 <summary>Phone Key 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key3">
 <summary>Phone Key 3</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key4">
 <summary>Phone Key 4</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key5">
 <summary>Phone Key 5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key6">
 <summary>Phone Key 6</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key7">
 <summary>Phone Key 7</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key8">
 <summary>Phone Key 8</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.Key9">
 <summary>Phone Key 9</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.KeyStar">
 <summary>Phone Key Star</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.KeyPound">
 <summary>Phone Key Pound</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.KeyA">
 <summary>Phone Key A</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.KeyB">
 <summary>Phone Key B</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.KeyC">
 <summary>Phone Key C</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Telephony.KeyD">
 <summary>Phone Key D</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_Consumer">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.Consumer"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Unassigned">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ConsumerControl">
 <summary>Consumer Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.NumericKeyPad">
 <summary>Numeric Key Pad</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ProgrammableButtons">
 <summary>Programmable Buttons</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Microphone">
 <summary>Microphone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Headphone">
 <summary>Headphone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.GraphicEqualizer">
 <summary>Graphic Equalizer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Plus10">
 <summary>+10</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Plus100">
 <summary>+100</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.AMPM">
 <summary>AM/PM</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Power">
 <summary>Power</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Reset">
 <summary>Reset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Sleep">
 <summary>Sleep</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SleepAfter">
 <summary>Sleep After</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SleepMode">
 <summary>Sleep Mode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Illumination">
 <summary>Illumination</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.FunctionButtons">
 <summary>Function Buttons</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Menu">
 <summary>Menu</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MenuPick">
 <summary>Menu Pick</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MenuUp">
 <summary>Menu Up</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MenuDown">
 <summary>Menu Down</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MenuLeft">
 <summary>Menu Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MenuRight">
 <summary>Menu Right</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MenuEscape">
 <summary>Menu Escape</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MenuValueIncrease">
 <summary>Menu Value Increase</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MenuValueDecrease">
 <summary>Menu Value Decrease</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.DataOnScreen">
 <summary>Data On Screen</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ClosedCaption">
 <summary>Closed Caption</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ClosedCaptionSelect">
 <summary>Closed Caption Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.VCRTV">
 <summary>VCR/TV</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.BroadcastMode">
 <summary>Broadcast Mode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Snapshot">
 <summary>Snapshot</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Still">
 <summary>Still</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Selection">
 <summary>Selection</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.AssignSelection">
 <summary>Assign Selection</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ModeStep">
 <summary>Mode Step</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.RecallLast">
 <summary>Recall Last</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.EnterChannel">
 <summary>Enter Channel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.OrderMovie">
 <summary>Order Movie</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Channel">
 <summary>Channel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelection">
 <summary>Media Selection</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectComputer">
 <summary>Media Select Computer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectTV">
 <summary>Media Select TV</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectWWW">
 <summary>Media Select WWW</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectDVD">
 <summary>Media Select DVD</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectTelephone">
 <summary>Media Select Telephone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectProgramGuide">
 <summary>Media Select Program Guide</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectVideoPhone">
 <summary>Media Select Video Phone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectGames">
 <summary>Media Select Games</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectMessages">
 <summary>Media Select Messages</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectCD">
 <summary>Media Select CD</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectVCR">
 <summary>Media Select VCR</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectTuner">
 <summary>Media Select Tuner</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Quit">
 <summary>Quit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Help">
 <summary>Help</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectTape">
 <summary>Media Select Tape</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectCable">
 <summary>Media Select Cable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectSatellite">
 <summary>Media Select Satellite</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectSecurity">
 <summary>Media Select Security</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectHome">
 <summary>Media Select Home</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectCall">
 <summary>Media Select Call</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelIncrement">
 <summary>Channel Increment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelDecrement">
 <summary>Channel Decrement</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MediaSelectSAP">
 <summary>Media Select SAP</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.VCRPlus">
 <summary>VCR Plus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Once">
 <summary>Once</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Daily">
 <summary>Daily</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Weekly">
 <summary>Weekly</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Monthly">
 <summary>Monthly</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Play">
 <summary>Play</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Pause">
 <summary>Pause</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Record">
 <summary>Record</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.FastForward">
 <summary>Fast Forward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Rewind">
 <summary>Rewind</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ScanNextTrack">
 <summary>Scan Next Track</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ScanPreviousTrack">
 <summary>Scan Previous Track</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Stop">
 <summary>Stop</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Eject">
 <summary>Eject</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.RandomPlay">
 <summary>Random Play</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SelectDisc">
 <summary>Select Disc</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.EnterDisc">
 <summary>Enter Disc</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Repeat">
 <summary>Repeat</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Tracking">
 <summary>Tracking</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.TrackNormal">
 <summary>Track Normal</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Slowracking">
 <summary>Slow Tracking</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.FrameForward">
 <summary>Frame Forward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.FrameBack">
 <summary>Frame Back</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Mark">
 <summary>Mark</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ClearMark">
 <summary>Clear Mark</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.RepeatFromMark">
 <summary>Repeat From Mark</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ReturnToMark">
 <summary>Return To Mark</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SearchMarkForward">
 <summary>Search Mark Forward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SearchMarkBackwards">
 <summary>Search Mark Backwards</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.CounterReset">
 <summary>Counter Reset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ShowCounter">
 <summary>Show Counter</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.TrackingIncrement">
 <summary>Tracking Increment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.TrackingDecrement">
 <summary>Tracking Decrement</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.StopEject">
 <summary>Stop/Eject</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.PlayPause">
 <summary>Play/Pause</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.PlaySkip">
 <summary>Play/Skip</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Volume">
 <summary>Volume</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Balance">
 <summary>Balance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Mute">
 <summary>Mute</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Bass">
 <summary>Bass</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Treble">
 <summary>Treble</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.BassBoost">
 <summary>Bass Boost</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SurroundMode">
 <summary>Surround Mode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Loudness">
 <summary>Loudness</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MPX">
 <summary>MPX</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.VolumeIncrement">
 <summary>Volume Increment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.VolumeDecrement">
 <summary>Volume Decrement</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SpeedSelect">
 <summary>Speed Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.PlaybackSpeed">
 <summary>Playback Speed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.StandardPlay">
 <summary>Standard Play</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.LongPlay">
 <summary>Long Play</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ExtendedPlay">
 <summary>Extended Play</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Slow">
 <summary>Slow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.FanEnable">
 <summary>Fan Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.FanSpeed">
 <summary>Fan Speed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.LightEnable">
 <summary>Light Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.LightIlluminationLevel">
 <summary>Light Illumination Level</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ClimateControlEnable">
 <summary>Climate Control Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.RoomTemperature">
 <summary>Room Temperature</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SecurityEnable">
 <summary>Security Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.FireAlarm">
 <summary>Fire Alarm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.PoliceAlarm">
 <summary>Police Alarm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Proximity">
 <summary>Proximity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.Motion">
 <summary>Motion</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.DuressAlarm">
 <summary>Duress Alarm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.HoldupAlarm">
 <summary>Holdup Alarm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.MedicalAlarm">
 <summary>Medical Alarm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.BalanceRight">
 <summary>Balance Right</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.BalanceLeft">
 <summary>Balance Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.BassIncrement">
 <summary>Bass Increment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.BassDecrement">
 <summary>Bass Decrement</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.TrebleIncrement">
 <summary>Treble Increment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.TrebleDecrement">
 <summary>Treble Decrement</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SpeakerSystem">
 <summary>Speaker System</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelLeft">
 <summary>Channel Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelRight">
 <summary>Channel Right</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelCenter">
 <summary>Channel Center</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelFront">
 <summary>Channel Front</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelCenterFront">
 <summary>Channel Center Front</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelSide">
 <summary>Channel Side</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelSurround">
 <summary>Channel Surround</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelLowFrequencyEnhancement">
 <summary>Channel Low Frequency Enhancement</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelTop">
 <summary>Channel Top</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ChannelUnknown">
 <summary>Channel Unknown</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SubChannel">
 <summary>Sub-channel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SubChannelIncrement">
 <summary>Sub-channel Increment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.SubChannelDecrement">
 <summary>Sub-channel Decrement</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.AlternateAudioIncrement">
 <summary>Alternate Audio Increment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.AlternateAudioDecrement">
 <summary>Alternate Audio Decrement</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ApplicationLaunchButtons">
 <summary>Application Launch Buttons</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALLaunchButtonConfigurationTools">
 <summary>Application launch (AL) Launch Button Configuration Tool</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALProgrammableButtonConfiguration">
 <summary>Application launch (AL) Programmable Button Configuration</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALConsumerControlConfiguration">
 <summary>Application launch (AL) Consumer Control Configuration</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALWordProcessor">
 <summary>Application launch (AL) Word Processor</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALTextEditor">
 <summary>Application launch (AL) Text Editor</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALSpreadsheet">
 <summary>Application launch (AL) Spreadsheet</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALGraphicsEditor">
 <summary>Application launch (AL) Graphics Editor</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALPresentationApp">
 <summary>Application launch (AL) Presentation App</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALDatabaseApp">
 <summary>Application launch (AL) Database App</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALEmailReader">
 <summary>Application launch (AL) Email Reader</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALNewsreader">
 <summary>Application launch (AL) Newsreader</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALVoicemail">
 <summary>Application launch (AL) Voicemail</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALContactsAddressBook">
 <summary>Application launch (AL) Contacts/Address Book</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALCalendarSchedule">
 <summary>Application launch (AL) Calendar/Schedule</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALTaskProjectManager">
 <summary>Application launch (AL) Task/Project Manager</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALLogJournalTimecard">
 <summary>Application launch (AL) Log/Journal/Timecard</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALCheckbookFinance">
 <summary>Application launch (AL) Checkbook/Finance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALCalculator">
 <summary>Application launch (AL) Calculator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALAVCapturePlayback">
 <summary>Application launch (AL) A/V Capture/Playback</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALLocalMachineBrowser">
 <summary>Application launch (AL) Local Machine Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALLANWANBrowser">
 <summary>Application launch (AL) LAN/WAN Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALInternetBrowser">
 <summary>Application launch (AL) Internet Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALRemoteNetworkingISPConnect">
 <summary>Application launch (AL) Remote Networking/ISP Connect</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALNetworkConference">
 <summary>Application launch (AL) Network Conference</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALNetworkChat">
 <summary>Application launch (AL) Network Chat</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALTelephonyDialer">
 <summary>Application launch (AL) Telephony/Dialer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALLogon">
 <summary>Application launch (AL) Logon</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALLogoff">
 <summary>Application launch (AL) Logoff</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALLogonLogoff">
 <summary>Application launch (AL) Logon/Logoff</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALTerminalLockScreensaver">
 <summary>Application launch (AL) Terminal Lock/Screensaver</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALControlPanel">
 <summary>Application launch (AL) Control Panel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALCommandLineProcessorRun">
 <summary>Application launch (AL) Command Line Processor/Run</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALProcessTaskManager">
 <summary>Application launch (AL) Process/Task Manager</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALSelectTaskApplication">
 <summary>Application launch (AL) Select Task/Application</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALNextTaskApplication">
 <summary>Application launch (AL) Next Task/Application</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALPreviousTaskApplication">
 <summary>Application launch (AL) Previous Task/Application</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALPreemptiveHaltTaskApplication">
 <summary>Application launch (AL) Preemptive Halt Task/Application</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALIntegratedHelpCenter">
 <summary>Application launch (AL) Integrated Help Center</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALDocuments">
 <summary>Application launch (AL) Documents</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALThesaurus">
 <summary>Application launch (AL) Thesaurus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALDictionary">
 <summary>Application launch (AL) Dictionary</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALDesktop">
 <summary>Application launch (AL) Desktop</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALSpellCheck">
 <summary>Application launch (AL) Spell Check</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALGrammarCheck">
 <summary>Application launch (AL) Grammar Check</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALWirelessStatus">
 <summary>Application launch (AL) Wireless Status</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALKeyboardLayout">
 <summary>Application launch (AL) Keyboard Layout</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALVirusProtection">
 <summary>Application launch (AL) Virus Protection</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALEncryption">
 <summary>Application launch (AL) Encryption</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALScreenSaver">
 <summary>Application launch (AL) Screen Saver</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALAlarms">
 <summary>Application launch (AL) Alarms</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALClock">
 <summary>Application launch (AL) Clock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALFileBrowser">
 <summary>Application launch (AL) File Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALPowerStatus">
 <summary>Application launch (AL) Power Status</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALImageBrowser">
 <summary>Application launch (AL) Image Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALAudioBrowser">
 <summary>Application launch (AL) Audio Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALMovieBrowser">
 <summary>Application launch (AL) Movie Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALDigitalRightsManager">
 <summary>Application launch (AL) Digital Rights Manager</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALDigitalWallet">
 <summary>Application launch (AL) Digital Wallet</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALInstantMessaging">
 <summary>Application launch (AL) Instant Messaging</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALOEMFeaturesTipsTutorialBrowser">
 <summary>Application launch (AL) OEM Features/Tips/Tutorial Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALOEMHelp">
 <summary>Application launch (AL) OEM Help</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALOnlineCommunity">
 <summary>Application launch (AL) Online Community</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALEntertainmentContentBrowser">
 <summary>Application launch (AL) Entertainment Conetent Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALOnlineShoppingBrowser">
 <summary>Application launch (AL) Online Shopping Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALSmartCardInformationHelp">
 <summary>Application launch (AL) SmartCard Information/Help</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALMarketMonitorFinanceBrowser">
 <summary>Application launch (AL) Market Monitor/Finance Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALCustomizedCorporateNewsBrowser">
 <summary>Application launch (AL) Customized Corporate News Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALOnlineActivityBrowser">
 <summary>Application launch (AL) Online Activity Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALResearchSearchBrowser">
 <summary>Application launch (AL) Research/Search Browser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ALAudioPlayer">
 <summary>Application launch (AL) Audio Player</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.GenericGUIApplicationControls">
 <summary>Generic GUI Application Controls</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACNew">
 <summary> Application Control (AC) New</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACOpen">
 <summary> Application Control (AC) Open</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACClose">
 <summary> Application Control (AC) Close</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACExit">
 <summary> Application Control (AC) Exit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACMaximize">
 <summary> Application Control (AC) Maximize</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACMinimize">
 <summary> Application Control (AC) Minimize</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSave">
 <summary> Application Control (AC) Save</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACPrint">
 <summary> Application Control (AC) Print</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACProperties">
 <summary> Application Control (AC) Properties</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACUndo">
 <summary> Application Control (AC) Undo</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACCopy">
 <summary> Application Control (AC) Copy</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACCut">
 <summary> Application Control (AC) Cut</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACPaste">
 <summary> Application Control (AC) Paste</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSelectAll">
 <summary> Application Control (AC) Select All</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFind">
 <summary> Application Control (AC) Find</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFindAndReplace">
 <summary> Application Control (AC) Find and Replace</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSearch">
 <summary> Application Control (AC) Search</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACGoTo">
 <summary> Application Control (AC) Go To</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACHome">
 <summary> Application Control (AC) Home</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACBack">
 <summary> Application Control (AC) Back</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACForward">
 <summary> Application Control (AC) Forward</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACStop">
 <summary> Application Control (AC) Stop</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACRefresh">
 <summary> Application Control (AC) Refresh</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACPreviousLink">
 <summary> Application Control (AC) Previous Link</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACNextLink">
 <summary> Application Control (AC) Next Link</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACBookmarks">
 <summary> Application Control (AC) Bookmarks</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACHistory">
 <summary> Application Control (AC) History</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSubscriptions">
 <summary> Application Control (AC) Subscriptions</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACZoomIn">
 <summary> Application Control (AC) Zoom In</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACZoomOut">
 <summary> Application Control (AC) Zoom Out</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACZoom">
 <summary> Application Control (AC) Zoom</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFullScreenView">
 <summary> Application Control (AC) Full Screen View</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACNormalView">
 <summary> Application Control (AC) Normal View</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACViewToggle">
 <summary> Application Control (AC) View Toggle</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACScrollUp">
 <summary> Application Control (AC) Scroll Up</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACScrollDown">
 <summary> Application Control (AC) Scroll Down</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACScroll">
 <summary> Application Control (AC) Scroll</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACPanLeft">
 <summary> Application Control (AC) Pan Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACPanRight">
 <summary> Application Control (AC) Pan Right</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACPan">
 <summary> Application Control (AC) Pan</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACNewWindow">
 <summary> Application Control (AC) New Window</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACTileHorizontally">
 <summary> Application Control (AC) Tile Horizontally</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACTileVertically">
 <summary> Application Control (AC) Tile Vertically</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFormat">
 <summary> Application Control (AC) Format</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACEdit">
 <summary> Application Control (AC) Edit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACBold">
 <summary> Application Control (AC) Bold</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACItalics">
 <summary> Application Control (AC) Italics</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACUnderline">
 <summary> Application Control (AC) Underline</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACStrikethrough">
 <summary> Application Control (AC) Strikethrough</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSubscript">
 <summary> Application Control (AC) Subscript</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSuperscript">
 <summary> Application Control (AC) Superscript</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACAllCaps">
 <summary> Application Control (AC) All Caps</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACRotate">
 <summary> Application Control (AC) Rotate</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACResize">
 <summary> Application Control (AC) Resize</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFlipHorizontal">
 <summary> Application Control (AC) Flip horizontal</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFlipVertical">
 <summary> Application Control (AC) Flip Vertical</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACMirrorHorizontal">
 <summary> Application Control (AC) Mirror Horizontal</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACMirrorVertical">
 <summary> Application Control (AC) Mirror Vertical</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFontSelect">
 <summary> Application Control (AC) Font Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFontColor">
 <summary> Application Control (AC) Font Color</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFontSize">
 <summary> Application Control (AC) Font Size</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACJustifyLeft">
 <summary> Application Control (AC) Justify Left</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACJustifyCenterH">
 <summary> Application Control (AC) Justify Center H</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACJustifyRight">
 <summary> Application Control (AC) Justify Right</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACJustifyBlockH">
 <summary> Application Control (AC) Justify Block H</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACJustifyTop">
 <summary> Application Control (AC) Justify Top</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACJustifyCenterV">
 <summary> Application Control (AC) Justify Center V</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACJustifyBottom">
 <summary> Application Control (AC) Justify Bottom</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACJustifyBlockV">
 <summary> Application Control (AC) Justify Block V</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACIndentDecrease">
 <summary> Application Control (AC) Indent Decrease</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACIndentIncrease">
 <summary> Application Control (AC) Indent Increase</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACNumberedList">
 <summary> Application Control (AC) Numbered List</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACRestartNumbering">
 <summary> Application Control (AC) Restart Numbering</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACBulletedList">
 <summary> Application Control (AC) Bulleted List</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACPromote">
 <summary> Application Control (AC) Promote</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACDemote">
 <summary> Application Control (AC) Demote</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACYes">
 <summary> Application Control (AC) Yes</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACNo">
 <summary> Application Control (AC) No</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACCancel">
 <summary> Application Control (AC) Cancel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACCatalog">
 <summary> Application Control (AC) Catalog</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACBuyCheckout">
 <summary> Application Control (AC) Buy/Checkout</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACAddtoCart">
 <summary> Application Control (AC) Add to Cart</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACExpand">
 <summary> Application Control (AC) Expand</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACExpandAll">
 <summary> Application Control (AC) Expand All</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACCollapse">
 <summary> Application Control (AC) Collapse</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACCollapseAll">
 <summary> Application Control (AC) Collapse All</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACPrintPreview">
 <summary> Application Control (AC) Print Preview</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACPasteSpecial">
 <summary> Application Control (AC) Paste Special</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACInsertMode">
 <summary> Application Control (AC) Insert Mode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACDelete">
 <summary> Application Control (AC) Delete</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACLock">
 <summary> Application Control (AC) Lock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACUnlock">
 <summary> Application Control (AC) Unlock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACProtect">
 <summary> Application Control (AC) Protect</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACUnprotect">
 <summary> Application Control (AC) Unprotect</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACAttachComment">
 <summary> Application Control (AC) Attach Comment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACDeleteComment">
 <summary> Application Control (AC) Delete Comment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACViewComment">
 <summary> Application Control (AC) View Comment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSelectWord">
 <summary> Application Control (AC) Select Word</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSelectSentence">
 <summary> Application Control (AC) Select Sentence</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSelectParagraph">
 <summary> Application Control (AC) Select Paragraph</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSelectColumn">
 <summary> Application Control (AC) Select Column</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSelectRow">
 <summary> Application Control (AC) Select Row</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSelectTable">
 <summary> Application Control (AC) Select Table</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSelectObject">
 <summary> Application Control (AC) Select Object</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACRedoRepeat">
 <summary> Application Control (AC) Redo/Repeat</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSort">
 <summary> Application Control (AC) Sort</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSortAscending">
 <summary> Application Control (AC) Sort Ascending</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSortDescending">
 <summary> Application Control (AC) Sort Descending</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACFilter">
 <summary> Application Control (AC) Filter</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSetClock">
 <summary> Application Control (AC) Set Clock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACViewClock">
 <summary> Application Control (AC) View Clock</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSelectTimeZone">
 <summary> Application Control (AC) Select Time Zone</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACEditTimeZones">
 <summary> Application Control (AC) Edit Time Zones</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSetAlarm">
 <summary> Application Control (AC) Set Alarm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACClearAlarm">
 <summary> Application Control (AC) Clear Alarm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSnoozeAlarm">
 <summary> Application Control (AC) Snooze Alarm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACResetAlarm">
 <summary> Application Control (AC) Reset Alarm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSynchronize">
 <summary> Application Control (AC) Synchronize</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSendReceive">
 <summary> Application Control (AC) Send/Receive</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSendTo">
 <summary> Application Control (AC) Send To</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACReply">
 <summary> Application Control (AC) Reply</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACReplyAll">
 <summary> Application Control (AC) Reply All</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACForwardMsg">
 <summary> Application Control (AC) Forward Msg</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSend">
 <summary> Application Control (AC) Send</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACAttachFile">
 <summary> Application Control (AC) Attach File</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACUpload">
 <summary> Application Control (AC) Upload</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACDownload">
 <summary> Application Control (AC) Download (Save Target As)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSetBorders">
 <summary> Application Control (AC) Set Borders</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACInsertRow">
 <summary> Application Control (AC) Insert Row</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACInsertColumn">
 <summary> Application Control (AC) Insert Column</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACInsertFile">
 <summary> Application Control (AC) Insert File</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACInsertPicture">
 <summary> Application Control (AC) Insert Picture</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACInsertObject">
 <summary> Application Control (AC) Insert Object</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACInsertSymbol">
 <summary> Application Control (AC) Insert Symbol</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSaveandClose">
 <summary> Application Control (AC) Save and Close</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACRename">
 <summary> Application Control (AC) Rename</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACMerge">
 <summary> Application Control (AC) Merge</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACSplit">
 <summary> Application Control (AC) Split</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACDisributeHorizontally">
 <summary> Application Control (AC) Disribute Horizontally</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Consumer.ACDistributeVertically">
 <summary> Application Control (AC) Distribute Vertically</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_Digitizer">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.Digitizer"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Undefined">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Digitizer">
 <summary>Digitizer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Pen">
 <summary>Pen</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.LightPen">
 <summary>Light Pen</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.TouchScreen">
 <summary>Touch Screen</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.TouchPad">
 <summary>Touch Pad</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.WhiteBoard">
 <summary>White Board</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.CoordinateMeasuringMachine">
 <summary>Coordinate Measuring Machine</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Digitizer3D">
 <summary>3D Digitizer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.StereoPlotter">
 <summary>Stereo Plotter</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.ArticulatedArm">
 <summary>Articulated Arm</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Armature">
 <summary>Armature</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.MultiplePointDigitizer">
 <summary>Multiple Point Digitizer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.FreeSpaceWand">
 <summary>Free Space Wand</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Stylus">
 <summary>Stylus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Puck">
 <summary>Puck</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Finger">
 <summary>Finger</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.TipPressure">
 <summary>Tip Pressure</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.BarrelPressure">
 <summary>Barrel Pressure</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.InRange">
 <summary>In Range</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Touch">
 <summary>Touch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Untouch">
 <summary>Untouch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Tap">
 <summary>Tap</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Quality">
 <summary>Quality</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.DataValid">
 <summary>Data Valid</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.TransducerIndex">
 <summary>Transducer Index</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.TabletFunctionKeys">
 <summary>Tablet Function Keys</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.ProgramChangeKeys">
 <summary>Program Change Keys</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.BatteryStrength">
 <summary>Battery Strength</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Invert">
 <summary>Invert</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.XTilt">
 <summary>X Tilt</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.YTilt">
 <summary>Y Tilt</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Azimuth">
 <summary>Azimuth</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Altitude">
 <summary>Altitude</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Twist">
 <summary>Twist</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.TipSwitch">
 <summary>Tip Switch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.SecondaryTipSwitch">
 <summary>Secondary Tip Switch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.BarrelSwitch">
 <summary>Barrel Switch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.Eraser">
 <summary>Eraser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Digitizer.TabletPick">
 <summary>Tablet Pick</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.AlphanumericDisplay"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.Undefined">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.AlphanumericDisplay">
 <summary>Alphanumeric Display</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BitmappedDisplay">
 <summary>Bitmapped Display</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.DisplayAttributesReport">
 <summary>Display Attributes Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.ASCIICharacterSet">
 <summary>ASCII Character Set</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.DataReadBack">
 <summary>Data Read Back</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.FontReadBack">
 <summary>Font Read Back</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.DisplayControlReport">
 <summary>Display Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.ClearDisplay">
 <summary>Clear Display</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.DisplayEnable">
 <summary>Display Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.ScreenSaverDelaySV">
 <summary>Screen Saver Delay</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.ScreenSaverEnable">
 <summary>Screen Saver Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.VerticalScroll">
 <summary>Vertical Scroll</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.HorizontalScroll">
 <summary>Horizontal Scroll</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CharacterReport">
 <summary>Character Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.DisplayData">
 <summary>Display Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.DisplayStatus">
 <summary>Display Status</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.StatNotReady">
 <summary>Stat Not Ready</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.StatReady">
 <summary>Stat Ready</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.ErrNotALoadableCharacter">
 <summary>Err Not a loadable character</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.ErrFontDataCannotBeRead">
 <summary>Err Font data cannot be read</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CursorPositionReport">
 <summary>Cursor Position Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.Row">
 <summary>Row</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.Column">
 <summary>Column</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.Rows">
 <summary>Rows</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.Columns">
 <summary>Columns</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CursorPixelPositioning">
 <summary>Cursor Pixel Positioning</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CursorMode">
 <summary>Cursor Mode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CursorEnable">
 <summary>Cursor Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CursorBlink">
 <summary>Cursor Blink</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.FontReport">
 <summary>Font Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.FontData">
 <summary>Font Data Buffered</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CharacterWidth">
 <summary>Character Width</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CharacterHeight">
 <summary>Character Height</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CharacterSpacingHorizontal">
 <summary>Character Spacing Horizontal</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CharacterSpacingVertical">
 <summary>Character Spacing Vertical</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.UnicodeCharacterSet">
 <summary>Unicode Character Set</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.Font7Segment">
 <summary>Font 7-Segment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.Segment7DirectMap">
 <summary>7-Segment Direct Map</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.Font14Segment">
 <summary>Font 14-Segment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.Segment14DirectMap">
 <summary>14-Segment Direct Map</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.DisplayBrightness">
 <summary>Display Brightness</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.DisplayContrast">
 <summary>Display Contrast</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CharacterAttribute">
 <summary>Character Attribute</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.AttributeReadback">
 <summary>Attribute Readback</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.AttributeData">
 <summary>Attribute Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CharAttrEnhance">
 <summary>Char Attr Enhance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CharAttrUnderline">
 <summary>Char Attr Underline</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.CharAttrBlink">
 <summary>Char Attr Blink</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BitmapSizeX">
 <summary>Bitmap Size X</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BitmapSizeY">
 <summary>Bitmap Size Y</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BitDepthFormat">
 <summary>Bit Depth Format</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.DisplayOrientation">
 <summary>Display Orientation</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.PaletteReport">
 <summary>Palette Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.PaletteDataSize">
 <summary>Palette Data Size</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.PaletteDataOffset">
 <summary>Palette Data Offset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.PaletteData">
 <summary>Palette Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BlitReport">
 <summary>Blit Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BlitRectangleX1">
 <summary>Blit Rectangle X1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BlitRectangleY1">
 <summary>Blit Rectangle Y1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BlitRectangleX2">
 <summary>Blit Rectangle X2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BlitRectangleY2">
 <summary>Blit Rectangle Y2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.BlitData">
 <summary>Blit Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.SoftButton">
 <summary>Soft Button</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.SoftButtonID">
 <summary>Soft Button ID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.SoftButtonSide">
 <summary>Soft Button Side</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.SoftButtonOffset1">
 <summary>Soft Button Offset 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.SoftButtonOffset2">
 <summary>Soft Button Offset 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_AlphanumericDisplay.SoftButtonReport">
 <summary>Soft Button Report</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_MedicalInstruments">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.MedicalInstruments"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Undefined">
 <summary>Unidentified</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.MedicalUltrasound">
 <summary>Medical Ultrasound</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.VCRAcquisition">
 <summary>VCR/Acquisition</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.FreezeThaw">
 <summary>Freeze/Thaw</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.ClipStore">
 <summary>Clip Store</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Update">
 <summary>Update</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Next">
 <summary>Next</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Save">
 <summary>Save</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Print">
 <summary>Print</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.MicrophoneEnable">
 <summary>Microphone Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Cine">
 <summary>Cine</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.TransmitPower">
 <summary>Transmit Power</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Volume">
 <summary>Volume</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Focus">
 <summary>Focus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Depth">
 <summary>Depth</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.SoftStepPrimary">
 <summary>Soft Step - Primary</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.SoftStepSecondary">
 <summary>Soft Step - Secondary</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.DepthGainCompensation">
 <summary>Depth Gain Compensation</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.ZoomSelect">
 <summary>Zoom Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.ZoomAdjust">
 <summary>Zoom Adjust</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.SpectralDopplerModeSelect">
 <summary>Spectral Doppler Mode Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.SpectralDopplerAdjust">
 <summary>Spectral Doppler Adjust</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.ColorDopplerModeSelect">
 <summary>Color Doppler Mode Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.ColorDopplerAdjust">
 <summary>Color Doppler Adjust</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.MotionModeSelect">
 <summary>Motion Mode Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.MotionModeAdjust">
 <summary>Motion Mode Adjust</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Mode2DSelect">
 <summary>2-D Mode Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.Mode2DAdjust">
 <summary>2-D Mode Adjust</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.SoftControlSelect">
 <summary>Soft Control Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MedicalInstruments.SoftControlAdjust">
 <summary>Soft Control Adjust</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_PIDPage">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.PIDPage"/> page (Physical Input Devices)</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PhysicalInterfaceDevice">
 <summary>Physical Interface Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.Normal">
 <summary>Normal</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SetEffectReport">
 <summary>Set Effect Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.EffectBlockIndex">
 <summary>Effect Block Index</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ParameterBlockOffset">
 <summary>Parameter Block Offset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ROMFlag">
 <summary>ROM Flag</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.EffectType">
 <summary>Effect Type</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETConstantForce">
 <summary> Effect type (ET) Constant Force</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETRamp">
 <summary> Effect type (ET) Ramp</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETCustomForceData">
 <summary> Effect type (ET) Custom Force Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETSquare">
 <summary> Effect type (ET) Square</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETSine">
 <summary> Effect type (ET) Sine</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETTriangle">
 <summary> Effect type (ET) Triangle</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETSawtoothUp">
 <summary> Effect type (ET) Sawtooth Up</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETSawtoothDown">
 <summary> Effect type (ET) Sawtooth Down</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETSpring">
 <summary> Effect type (ET) Spring</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETDamper">
 <summary> Effect type (ET) Damper</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETInertia">
 <summary> Effect type (ET) Inertia</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.Period">
 <summary>Period</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SetConstantForceReport">
 <summary>Set Constant Force Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SetRampForceReport">
 <summary>Set Ramp Force Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.RampStart">
 <summary>Ramp Start</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.RampEnd">
 <summary>Ramp End</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.EffectOperationReport">
 <summary>Effect Operation Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.EffectOperation">
 <summary>Effect Operation</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.OpEffectStart">
 <summary>Op Effect Start</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.OpEffectStartSolo">
 <summary>Op Effect Start Solo</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.OpEffectStop">
 <summary>Op Effect Stop</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.LoopCount">
 <summary>Loop Count</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DeviceGainReport">
 <summary>Device Gain Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DeviceGain">
 <summary>Device Gain</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PIDPoolReport">
 <summary>Physical Interface Devices (PID) Pool Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.RAMPoolSize">
 <summary>RAM Pool Size</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ROMPoolSize">
 <summary>ROM Pool Size</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ROMEffectBlockCount">
 <summary>ROM Effect Block Count</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SimultaneousEffectsMax">
 <summary>Simultaneous Effects Max</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PoolAlignment">
 <summary>Pool Alignment</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PIDPoolMoveReport">
 <summary>Physical Interface Devices (PID) Pool Move Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.MoveSource">
 <summary>Move Source</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.MoveDestination">
 <summary>Move Destination</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ETFriction">
 <summary> Effect type (ET) Friction</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.Duration">
 <summary>Duration</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SamplePeriod">
 <summary>Sample Period</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.Gain">
 <summary>Gain</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.TriggerButton">
 <summary>Trigger Button</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.TriggerRepeatInterval">
 <summary>Trigger Repeat Interval</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.AxesEnable">
 <summary>Axes Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DirectionEnable">
 <summary>Direction Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.Direction">
 <summary>Direction</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.TypeSpecificBlockOffset">
 <summary>Type Specific Block Offset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.BlockType">
 <summary>Block Type</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SetEnvelopeReport">
 <summary>Set Envelope Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.AttackLevel">
 <summary>Attack Level</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.AttackTime">
 <summary>Attack Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.FadeLevel">
 <summary>Fade Level</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.FadeTime">
 <summary>Fade Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SetConditionReport">
 <summary>Set Condition Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.CPOffset">
 <summary>CP Offset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PositiveCoefficient">
 <summary>Positive Coefficient</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.NegativeCoefficient">
 <summary>Negative Coefficient</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PositiveSaturation">
 <summary>Positive Saturation</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.NegativeSaturation">
 <summary>Negative Saturation</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DeadBand">
 <summary>Dead Band</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DownloadForceSample">
 <summary>Download Force Sample</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.IsochCustomForceEnable">
 <summary>Isoch Custom Force Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.CustomForceDataReport">
 <summary>Custom Force Data Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.CustomForceData">
 <summary>Custom Force Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.CustomForceVendorDefinedData">
 <summary>Custom Force Vendor Defined Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SetCustomForceReport">
 <summary>Set Custom Force Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.CustomForceDataOffset">
 <summary>Custom Force Data Offset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SampleCount">
 <summary>Sample Count</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SetPeriodicReport">
 <summary>Set Periodic Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.Offset">
 <summary>Offset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.Magnitude">
 <summary>Magnitude</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.Phase">
 <summary>Phase</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.MoveLength">
 <summary>Move Length</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PIDBlockLoadReport">
 <summary>Physical Interface Devices (PID) Block Load Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.BlockLoadStatus">
 <summary>Block Load Status</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.BlockLoadSuccess">
 <summary>Block Load Success</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.BlockLoadFull">
 <summary>Block Load Full</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.BlockLoadError">
 <summary>Block Load Error</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.BlockHandle">
 <summary>Block Handle</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PIDBlockFreeReport">
 <summary>Physical Interface Devices (PID) Block Free Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.TypeSpecificBlockHandle">
 <summary>Type Specific Block Handle</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PIDStateReport">
 <summary>Physical Interface Devices (PID) State Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PIDEffectState">
 <summary>Physical Interface Devices (PID) Effect State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.EffectPlaying">
 <summary>Effect Playing</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PIDDeviceControlReport">
 <summary>Physical Interface Devices (PID) Device Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.PIDDeviceControl">
 <summary>Physical Interface Devices (PID) Device Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DCEnableActuators">
 <summary>Device Control (DC) Enable Actuators</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DCDisableActuators">
 <summary>Device Control (DC) Disable Actuators</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DCStopAllEffects">
 <summary>Device Control (DC) Stop All Effects</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DCDeviceReset">
 <summary>Device Control (DC) Device Reset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DCDevicePause">
 <summary>Device Control (DC) Device Pause</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DCDeviceContinue">
 <summary>Device Control (DC) Device Continue</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DevicePaused">
 <summary>Device Paused</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ActuatorsEnabled">
 <summary>Actuators Enabled</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SafetySwitch">
 <summary>Safety Switch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ActuatorOverrideSwitch">
 <summary>Actuator Override Switch</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ActuatorPower">
 <summary>Actuator Power</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.StartDelay">
 <summary>Start Delay</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.ParameterBlockSize">
 <summary>Parameter Block Size</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.DeviceManagedPool">
 <summary>Device Managed Pool</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.SharedParameterBlocks">
 <summary>Shared Parameter Blocks</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.CreateNewEffectReport">
 <summary>Create New Effect Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PIDPage.RAMPoolAvailable">
 <summary>RAM Pool Available</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_PowerDevice">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.PowerDevice"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.iName">
 <summary>iName</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.PresentStatus">
 <summary>PresentStatus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ChangedStatus">
 <summary>ChangedStatus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.UPS">
 <summary>UPS</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.PowerSupply">
 <summary>PowerSupply</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.BatterySystem">
 <summary>BatterySystem</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.BatterySystemID">
 <summary>BatterySystemID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Battery">
 <summary>Battery</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.BatteryID">
 <summary>BatteryID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Charger">
 <summary>Charger</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ChargerID">
 <summary>ChargerID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.PowerConverter">
 <summary>PowerConverter</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.PowerConverterID">
 <summary>PowerConverterID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.OutletSystem">
 <summary>OutletSystem</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.OutletSystemID">
 <summary>OutletSystemID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Input">
 <summary>Input</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.InputID">
 <summary>InputID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Output">
 <summary>Output</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.OutputID">
 <summary>OutputID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Flow">
 <summary>Flow</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.FlowID">
 <summary>FlowID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Outlet">
 <summary>Outlet</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.OutletID">
 <summary>OutletID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Gang">
 <summary>Gang</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.GangID">
 <summary>GangID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.PowerSummary">
 <summary>PowerSummary</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.PowerSummaryID">
 <summary>PowerSummaryID</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Voltage">
 <summary>Voltage</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Current">
 <summary>Current</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Frequency">
 <summary>Frequency</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ApparentPower">
 <summary>ApparentPower</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ActivePower">
 <summary>ActivePower</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.PercentLoad">
 <summary>PercentLoad</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Temperature">
 <summary>Temperature</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Humidity">
 <summary>Humidity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.BadCount">
 <summary>BadCount</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ConfigVoltage">
 <summary>ConfigVoltage</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ConfigCurrent">
 <summary>ConfigCurrent</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ConfigFrequency">
 <summary>ConfigFrequency</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ConfigApparentPower">
 <summary>ConfigApparentPower</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ConfigActivePower">
 <summary>ConfigActivePower</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ConfigPercentLoad">
 <summary>ConfigPercentLoad</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ConfigTemperature">
 <summary>ConfigTemperature</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ConfigHumidity">
 <summary>ConfigHumidity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.SwitchOnControl">
 <summary>SwitchOnControl</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.SwitchOffControl">
 <summary>SwitchOffControl</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ToggleControl">
 <summary>ToggleControl</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.LowVoltageTransfer">
 <summary>LowVoltageTransfer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.HighVoltageTransfer">
 <summary>HighVoltageTransfer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.DelayBeforeReboot">
 <summary>DelayBeforeReboot</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.DelayBeforeStartup">
 <summary>DelayBeforeStartup</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.DelayBeforeShutdown">
 <summary>DelayBeforeShutdown</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Test">
 <summary>Test</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ModuleReset">
 <summary>ModuleReset</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.AudibleAlarmControl">
 <summary>AudibleAlarmControl</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Present">
 <summary>Present</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Good">
 <summary>Good</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.InternalFailure">
 <summary>InternalFailure</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.VoltageOutOfRange">
 <summary>VoltageOutOfRange</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.FrequencyOutOfRange">
 <summary>FrequencyOutOfRange</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Overload">
 <summary>Overload</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.OverCharged">
 <summary>OverCharged</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.OverTemperature">
 <summary>OverTemperature</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ShutdownRequested">
 <summary>ShutdownRequested</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.ShutdownImminent">
 <summary>ShutdownImminent</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Reserved">
 <summary>Reserved</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.SwitchOnOff">
 <summary>SwitchOn/Off</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Switchable">
 <summary>Switchable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Used">
 <summary>Used</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Boost">
 <summary>Boost</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Buck">
 <summary>Buck</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Initialized">
 <summary>Initialized</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.Tested">
 <summary>Tested</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.AwaitingPower">
 <summary>AwaitingPower</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.CommunicationLost">
 <summary>CommunicationLost</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.iManufacturer">
 <summary>iManufacturer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.iProduct">
 <summary>iProduct</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_PowerDevice.iserialNumber">
 <summary>iserialNumber</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_BatterySystem">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.BatterySystem"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBBatteryMode">
 <summary>SMBBatteryMode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBBatteryStatus">
 <summary>SMBBatteryStatus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBAlarmWarning">
 <summary>SMBAlarmWarning</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBChargerMode">
 <summary>SMBChargerMode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBChargerStatus">
 <summary>SMBChargerStatus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBChargerSpecInfo">
 <summary>SMBChargerSpecInfo</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBSelectorState">
 <summary>SMBSelectorState</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBSelectorPresets">
 <summary>SMBSelectorPresets</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBSelectorInfo">
 <summary>SMBSelectorInfo</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.OptionalMfgFunction1">
 <summary>OptionalMfgFunction1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.OptionalMfgFunction2">
 <summary>OptionalMfgFunction2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.OptionalMfgFunction3">
 <summary>OptionalMfgFunction3</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.OptionalMfgFunction4">
 <summary>OptionalMfgFunction4</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.OptionalMfgFunction5">
 <summary>OptionalMfgFunction5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ConnectionToSMBus">
 <summary>ConnectionToSMBus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.OutputConnection">
 <summary>OutputConnection</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ChargerConnection">
 <summary>ChargerConnection</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.BatteryInsertion">
 <summary>BatteryInsertion</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.Usenext">
 <summary>Usenext</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.OKToUse">
 <summary>OKToUse</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.BatterySupported">
 <summary>BatterySupported</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SelectorRevision">
 <summary>SelectorRevision</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ChargingIndicator">
 <summary>ChargingIndicator</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ManufacturerAccess">
 <summary>ManufacturerAccess</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.RemainingCapacityLimit">
 <summary>RemainingCapacityLimit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.RemainingTimeLimit">
 <summary>RemainingTimeLimit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.AtRate">
 <summary>AtRate</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.CapacityMode">
 <summary>CapacityMode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.BroadcastToCharger">
 <summary>BroadcastToCharger</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.PrimaryBattery">
 <summary>PrimaryBattery</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ChargeController">
 <summary>ChargeController</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.TerminateCharge">
 <summary>TerminateCharge</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.TerminateDischarge">
 <summary>TerminateDischarge</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.BelowRemainingCapacityLimit">
 <summary>BelowRemainingCapacityLimit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.RemainingTimeLimitExpired">
 <summary>RemainingTimeLimitExpired</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.Charging">
 <summary>Charging</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.Discharging">
 <summary>Discharging</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.FullyCharged">
 <summary>FullyCharged</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.FullyDischarged">
 <summary>FullyDischarged</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ConditioningFlag">
 <summary>ConditioningFlag</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.AtRateOK">
 <summary>AtRateOK</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SMBErrorCode">
 <summary>SMBErrorCode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.NeedReplacement">
 <summary>NeedReplacement</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.AtRateTimeToFull">
 <summary>AtRateTimeToFull</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.AtRateTimeToEmpty">
 <summary>AtRateTimeToEmpty</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.AverageCurrent">
 <summary>AverageCurrent</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.Maxerror">
 <summary>Maxerror</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.RelativeStateOfCharge">
 <summary>RelativeStateOfCharge</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.AbsoluteStateOfCharge">
 <summary>AbsoluteStateOfCharge</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.RemainingCapacity">
 <summary>RemainingCapacity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.FullChargeCapacity">
 <summary>FullChargeCapacity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.RunTimeToEmpty">
 <summary>RunTimeToEmpty</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.AverageTimeToEmpty">
 <summary>AverageTimeToEmpty</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.AverageTimeToFull">
 <summary>AverageTimeToFull</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.CycleCount">
 <summary>CycleCount</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.BattPackModelLevel">
 <summary>BattPackModelLevel</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.InternalChargeController">
 <summary>InternalChargeController</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.PrimaryBatterySupport">
 <summary>PrimaryBatterySupport</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.DesignCapacity">
 <summary>DesignCapacity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SpecificationInfo">
 <summary>SpecificationInfo</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ManufacturerDate">
 <summary>ManufacturerDate</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.SerialNumber">
 <summary>SerialNumber</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.iManufacturerName">
 <summary>iManufacturerName</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.iDevicename">
 <summary>iDevicename</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.iDeviceChemistery">
 <summary>iDeviceChemistery</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ManufacturerData">
 <summary>ManufacturerData</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.Rechargable">
 <summary>Rechargable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.WarningCapacityLimit">
 <summary>WarningCapacityLimit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.CapacityGranularity1">
 <summary>CapacityGranularity1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.CapacityGranularity2">
 <summary>CapacityGranularity2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.iOEMInformation">
 <summary>iOEMInformation</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.InhibitCharge">
 <summary>InhibitCharge</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.EnablePolling">
 <summary>EnablePolling</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ResetToZero">
 <summary>ResetToZero</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ACPresent">
 <summary>ACPresent</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.BatteryPresent">
 <summary>BatteryPresent</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.PowerFail">
 <summary>PowerFail</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.AlarmInhibited">
 <summary>AlarmInhibited</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ThermistorUnderRange">
 <summary>ThermistorUnderRange</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ThermistorHot">
 <summary>ThermistorHot</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ThermistorCold">
 <summary>ThermistorCold</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ThermistorOverRange">
 <summary>ThermistorOverRange</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.VoltageOutOfRange">
 <summary>VoltageOutOfRange</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.CurrentOutOfRange">
 <summary>CurrentOutOfRange</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.CurrentNotRegulated">
 <summary>CurrentNotRegulated</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.VoltageNotRegulated">
 <summary>VoltageNotRegulated</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.MasterMode">
 <summary>MasterMode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ChargerSelectorSupport">
 <summary>ChargerSelectorSupport</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.ChargerSpec">
 <summary>ChargerSpec</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.Level2">
 <summary>Level2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BatterySystem.Level3">
 <summary>Level3</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_UsbMonitor">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.UsbMonitor"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved
 <para>Documentation <a href="http://www.usb.org/developers/devclass_docs/usbmon10.pdf">USB Monitor Control Class Specification</a> doe not provide information about usage types for this usage page, so that information is not included in this enumeration.</para></remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_UsbMonitor.MonitorControl">
 <summary>Monitor Control</summary>
 <remarks>USB Monitor Control HID Device.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_UsbMonitor.EdidInformation">
 <summary>EDID Information</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_UsbMonitor.VdifInformation">
 <summary>VDIF Information</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_UsbMonitor.VesaVersion">
 <summary>VESA Version</summary>
 <remarks><para>The version of the VESA Monitor Command Set specification used by this device.</para>
 <para>If this field is set to zero (0), the monitor uses the virtual control usage values defined in this document.</para>
 <para>If this field is non-zero, it is a Binary-Coded Decimal (BCD) value representing the version number of the VESA Monitor Command Set specification used to define the monitor’s virtual control and command usage values.</para></remarks>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_UsbEnumeratedValues">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.UsbEnumeratedValues"/> page</summary>
 <remarks>This enumeration allows use of values up to 65535
 <para>Documentation <a href="http://www.usb.org/developers/devclass_docs/usbmon10.pdf">USB Monitor Control Class Specification</a> doe not provide information about usage types for this usage page, so that information is not included in this enumeration.</para></remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_UsbEnumeratedValues.Enum_0">
 <summary>Enum 0</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_UsbEnumeratedValues.Enum_1">
 <summary>Enum 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_UsbEnumeratedValues.Enum_2">
 <summary>Enum 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_UsbEnumeratedValues.Enum_3">
 <summary>Enum 3</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.VesaVirtualControls"/> page</summary>
 <remarks>Documentation <a href="http://www.usb.org/developers/devclass_docs/usbmon10.pdf">USB Monitor Control Class Specification</a> doe not provide information about usage types for this usage page, so that information is not included in this enumeration.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.Brightness">
 <summary>Brightness</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.Contrast">
 <summary>Contrast</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.RedVideoGain">
 <summary>Red Video Gain</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.GreenVideoGain">
 <summary>Green Video Gain</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.BlueVideoGain">
 <summary>Blue Video Gain</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.Focus">
 <summary>Focus</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.HorizontalPosition">
 <summary>Horizontal Position</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.HorizontalSize">
 <summary>Horizontal Size</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.HorizontalPincushion">
 <summary>Horizontal Pincushion</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.HorizontalPincushionBalance">
 <summary>Horizontal Pincushion Balance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.HorizontalMisconvergence">
 <summary>Horizontal Misconvergence</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.HorizontalLinearity">
 <summary>Horizontal Linearity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.HorizontalLinearityBalance">
 <summary>Horizontal Linearity Balance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.VerticalPosition">
 <summary>Vertical Position</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.VerticalSize">
 <summary>Vertical Size</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.VerticalPincushion">
 <summary>Vertical Pincushion</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.VerticalPincushionBalance">
 <summary>Vertical Pincushion Balance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.VerticalMisconvergence">
 <summary>Vertical Misconvergence</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.VerticalLinearity">
 <summary>Vertical Linearity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.VerticalLinearityBalance">
 <summary>Vertical Linearity Balance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.ParallelgramDistortion">
 <summary>Parallelogram Distortion (Key Balance)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.TrapezoidalDistortion">
 <summary>Trapezoidal Distortion (Key)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.Tilt">
 <summary>Tilt (Rotation)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.TopCornerDistortionControl">
 <summary>Top Corner Distortion Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.TopCornerDistortionBalance">
 <summary>Top Corner Distortion Balance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.BottomCornerDistortionControl">
 <summary>Bottom Corner Distortion Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.BottomCornerDistortionBalance">
 <summary>Bottom Corner Distortion Balance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.HorizontalMoiré">
 <summary>Horizontal Moiré</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.VerticalMoiré">
 <summary>Vertical Moiré</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.RedVideoBlackLevel">
 <summary>Red Video Black Level</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.GreenVideoBlackLevel">
 <summary>Green Video Black Level</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.BlueVideoBlackLevel">
 <summary>Blue Video Black Level</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.InputLevelSelect">
 <summary>Input Level Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.InputSourceSelect">
 <summary>Input Source Select</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.OnScreenDisplay">
 <summary>On Screen Display</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.StereoMode">
 <summary>StereoMode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.AutoSizeCenter">
 <summary>Auto Size Center</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.PolarityHorizontal">
 <summary>Polarity Horizontal</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.PolarityVertical">
 <summary>Polarity Vertical</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.SynchronizationType">
 <summary>Synchronization Type</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.ScreenOrientation">
 <summary>Screen Orientation</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.HorizontalFrequency">
 <summary>Horizontal Frequency</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.VerticalFrequency">
 <summary>Vertical Frequency</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.Degauss">
 <summary>Degauss</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_VesaVirtualControls.Settings">
 <summary>Settings</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_BarCodeScanners">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.BarCodeScanners"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.BarCodeBadgeReader">
 <summary>Bar Code Badge Reader</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.BarCodeScanner">
 <summary>Bar Code Scanner</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DumbBarCodeScanner">
 <summary>Dumb Bar Code Scanner</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CordlessScannerBase">
 <summary>Cordless Scanner Base</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.BarCodeScannerCradle">
 <summary>Bar Code Scanner Cradle</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.AttributeReport">
 <summary>Attribute Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.SettingsReport">
 <summary>Settings Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.cannedDataReport">
 <summary>Scanned Data Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.RawScannedDataReport">
 <summary>Raw Scanned Data Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TriggerReport">
 <summary>Trigger Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.tatusReport">
 <summary>Status Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPpcEanControlReport">
 <summary>UPC/EAN Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN23LabelControlReport">
 <summary>EAN 2/3 Label Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Code39ControlReport">
 <summary>Code 39 Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Interleaved2Of5ControlReport">
 <summary>Interleaved 2 of 5 Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.tandard2of5ControlReport">
 <summary>Standard 2 of 5 Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MSIPlesseyControlReport">
 <summary>MSI Plessey Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CodabarControlReport">
 <summary>Codabar Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Code128ControlReport">
 <summary>Code 128 Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Misc1DControlReport">
 <summary>Misc 1D Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ControlReport2D">
 <summary>2D Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.AimingPointerMode">
 <summary>Aiming/Pointer Mode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.BarCodePresentSensor">
 <summary>Bar Code Present Sensor</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Class1ALaser">
 <summary>Class 1A Laser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Class2Laser">
 <summary>Class 2 Laser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.HeaterPresent">
 <summary>Heater Present</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ContactScanner">
 <summary>Contact Scanner</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ElectronicArticleSurveillanceNotification">
 <summary>Electronic Article Surveillance Notification</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ConstantElectronicArticleSurveillance">
 <summary>Constant Electronic Article Surveillance</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ErrorIndication">
 <summary>Error Indication</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.FixedBeeper">
 <summary>Fixed Beeper</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GoodDecodeIndication">
 <summary>Good Decode Indication</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.HandsFreeScanning">
 <summary>Hands Free Scanning</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.IntrinsicallySafe">
 <summary>Intrinsically Safe</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.KlasseEinsLaser">
 <summary>Klasse Eins Laser</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.LongRangeScanner">
 <summary>Long Range Scanner</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MirrorSpeedControl">
 <summary>Mirror Speed Control</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.NotOnFileIndication">
 <summary>Not On File Indication</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ProgrammableBeeper">
 <summary>Programmable Beeper</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Triggerless">
 <summary>Triggerless</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Wand">
 <summary>Wand</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.WaterResistant">
 <summary>Water Resistant</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MultiRangeScanner">
 <summary>Multi-Range Scanner</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ProximitySensor">
 <summary>Proximity Sensor</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.FragmentDecoding">
 <summary>Fragment Decoding</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ScannerReadConfidence">
 <summary>Scanner Read Confidence</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DataPrefix">
 <summary>Data Prefix</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PrefixAIMI">
 <summary>Prefix AIMI</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PrefixNone">
 <summary>Prefix None</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PrefixProprietary">
 <summary>Prefix Proprietary</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ActiveTime">
 <summary>Active Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.AimingLaserPattern">
 <summary>Aiming Laser Pattern</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.BarCodePresent">
 <summary>Bar Code Present</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.BeeperState">
 <summary>Beeper State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.LaserOnTime">
 <summary>Laser On Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.LaserState">
 <summary>Laser State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.LockoutTime">
 <summary>Lockout Time</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MotorState">
 <summary>Motor State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MotorTimeout">
 <summary>Motor Timeout</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PowerOnResetScanner">
 <summary>Power On Reset Scanner</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PreventReadofBarcodes">
 <summary>Prevent Read of Barcodes</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.InitiateBarcodeRead">
 <summary>Initiate Barcode Read</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TriggerState">
 <summary>Trigger State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TriggerMode">
 <summary>Trigger Mode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TriggerModeBlinkingLaserOn">
 <summary>Trigger Mode Blinking Laser On</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TriggerModeContinuousLaserOn">
 <summary>Trigger Mode Continuous Laser On</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TriggerModeLaseronwhilePulled">
 <summary>Trigger Mode Laser on while Pulled</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TriggerModeLaserStaysOnaAfterTriggerRelease">
 <summary>Trigger Mode Laser stays on after Trigger release</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CommitParameterstoNVM">
 <summary>Commit Parameters to NVM</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ParameterScanning">
 <summary>Parameter Scanning</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ParametersChanged">
 <summary>Parameters Changed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.etparameterdefaultvalues">
 <summary>Set parameter default values</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.cannerInCradle">
 <summary>Scanner In Cradle</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.cannerInRange">
 <summary>Scanner In Range</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.AimDuration">
 <summary>Aim Duration</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GoodReadLampDuration">
 <summary>Good Read Lamp Duration</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GoodReadLampIntensity">
 <summary>Good Read Lamp Intensity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GoodReadLED">
 <summary>Good Read LED</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GoodReadToneFrequency">
 <summary>Good Read Tone Frequency</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GoodReadToneLength">
 <summary>Good Read Tone Length</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GoodReadToneVolume">
 <summary>Good Read Tone Volume</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Reserved">
 <summary>Reserved</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.NoReadMessage">
 <summary>No Read Message</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.NotonFileVolume">
 <summary>Not on File Volume</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PowerupBeep">
 <summary>Powerup Beep</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.oundErrorBeep">
 <summary>Sound Error Beep</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.oundGoodReadBeep">
 <summary>Sound Good Read Beep</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.oundNotOnFileBeep">
 <summary>Sound Not On File Beep</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GoodReadWhentoWrite">
 <summary>Good Read When to Write</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GRWTIAfterDecode">
 <summary>GRWTI After Decode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GRWTIBeepLampAfterTransmit">
 <summary>GRWTI Beep/Lamp after transmit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.GRWTINoBeepLampUseAtAll">
 <summary>GRWTI No Beep/Lamp use at all</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.BooklandEAN">
 <summary>Bookland EAN</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ConvertEAN8to13Type">
 <summary>Convert EAN 8 to 13 Type</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ConvertUPCAtoEAN13">
 <summary>Convert UPC A to EAN-13</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ConvertUPCEToA">
 <summary>Convert UPC-E to A</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN13">
 <summary>EAN-13</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN8">
 <summary>EAN-8</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN99128_Mandatory">
 <summary>EAN-99 128_Mandatory</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN99P5128_Optional">
 <summary>EAN-99 P5/128_Optional</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPCEAN">
 <summary>UPC/EAN</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPCEANCouponCode">
 <summary>UPC/EAN Coupon Code</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPCEANPeriodicals">
 <summary>UPC/EAN Periodicals</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPCA">
 <summary>UPC-A</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPCAWith128Mandatory">
 <summary>UPC-A with 128 Mandatory</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPCAWth128Optional">
 <summary>UPC-A with 128 Optional</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPCAWithP5Optional">
 <summary>UPC-A with P5 Optional</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPCE">
 <summary>UPC-E</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UPCE1">
 <summary>UPC-E1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Periodical">
 <summary>Periodical</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PeriodicalAutoDiscriminate2">
 <summary>Periodical Auto-Discriminate + 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PeriodicalOnlyDecodewith2">
 <summary>Periodical Only Decode with + 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PeriodicalIgnore2">
 <summary>Periodical Ignore + 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PeriodicalAutoDiscriminate5">
 <summary>Periodical Auto-Discriminate + 5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PeriodicalOnlyDecodewith5">
 <summary>Periodical Only Decode with + 5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PeriodicalIgnore5">
 <summary>Periodical Ignore + 5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Check">
 <summary>Check</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDisablePrice">
 <summary>Check Disable Price</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckEnable4digitPrice">
 <summary>Check Enable 4 digit Price</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckEnable5digitPrice">
 <summary>Check Enable 5 digit Price</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckEnableEuropean4digitPrice">
 <summary>Check Enable European 4 digit Price</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckEnableEuropean5digitPrice">
 <summary>Check Enable European 5 digit Price</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EANTwoLabel">
 <summary>EAN Two Label</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EANThreeLabel">
 <summary>EAN Three Label</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN8FlagDigit1">
 <summary>EAN 8 Flag Digit 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN8FlagDigit2">
 <summary>EAN 8 Flag Digit 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN8FlagDigit3">
 <summary>EAN 8 Flag Digit 3</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN13FlagDigit1">
 <summary>EAN 13 Flag Digit 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN13FlagDigit2">
 <summary>EAN 13 Flag Digit 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EAN13FlagDigit3">
 <summary>EAN 13 Flag Digit 3</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.AddEAN23LabelDefinition">
 <summary>Add EAN 2/3 Label Definition</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ClearAllEAN23LabelDefinitions">
 <summary>Clear all EAN 2/3 Label Definitions</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Codabar">
 <summary>Codabar</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Code128">
 <summary>Code 128</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Code39">
 <summary>Code 39</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Code93">
 <summary>Code 93</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.FullASCIIConversion">
 <summary>Full ASCII Conversion</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Interleaved2Of5">
 <summary>Interleaved 2 of 5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ItalianPharmacyCode">
 <summary>Italian Pharmacy Code</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MSIPlessey">
 <summary>MSI/Plessey</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.StandardOf5IATA">
 <summary>Standard 2 of 5 IATA</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Standard2Of5">
 <summary>Standard 2 of 5</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TransmitStartStop">
 <summary>Transmit Start/Stop</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TriOptic">
 <summary>Tri-Optic</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UCCEAN128">
 <summary>UCC/EAN-128</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigit">
 <summary>Check Digit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigitDisable">
 <summary>Check Digit Disable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigitEnableInterleaved2Of5OPCC">
 <summary>Check Digit Enable Interleaved 2 of 5 OPCC</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigitEnableInterleaved2Of5USS">
 <summary>Check Digit Enable Interleaved 2 of 5 USS</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigitEnableStandard2Of5OPCC">
 <summary>Check Digit Enable Standard 2 of 5 OPCC</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigitEnableStandard2Of5USS">
 <summary>Check Digit Enable Standard 2 of 5 USS</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigitEnableOneMSIPlessey">
 <summary>Check Digit Enable One MSI Plessey</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigitEnableTwoMSIPlessey">
 <summary>Check Digit Enable Two MSI Plessey</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigitCodabarEnable">
 <summary>Check Digit Codabar Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CheckDigitCode39Enable">
 <summary>Check Digit Code 39 Enable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.TransmitCheckDigit">
 <summary>Transmit Check Digit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DisableCheckDigitTransmit">
 <summary>Disable Check Digit Transmit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.EnableCheckDigitTransmit">
 <summary>Enable Check Digit Transmit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ymbologyIdentifier1">
 <summary>Symbology Identifier 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ymbologyIdentifier2">
 <summary>Symbology Identifier 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ymbologyIdentifier3">
 <summary>Symbology Identifier 3</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DecodedData">
 <summary>Decoded Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DecodeDataContinued">
 <summary>Decode Data Continued</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.BarSpaceData">
 <summary>Bar Space Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ScannerDataAccuracy">
 <summary>Scanner Data Accuracy</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.RawDataPolarity">
 <summary>Raw Data Polarity</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PolarityInvertedBarCode">
 <summary>Polarity Inverted Bar Code</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PolarityNormalBarCode">
 <summary>Polarity Normal Bar Code</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MinimumLengthtoDecode">
 <summary>Minimum Length to Decode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MaximumLengthtoDecode">
 <summary>Maximum Length to Decode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.FirstDiscreteLengthtoDecode">
 <summary>First Discrete Length to Decode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.econdDiscreteLengthtoDecode">
 <summary>Second Discrete Length to Decode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DataLengthMethod">
 <summary>Data Length Method</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DLMethodReadany">
 <summary>DL Method Read any</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DLMethodCheckinRange">
 <summary>DL Method Check in Range</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DLMethodCheckforDiscrete">
 <summary>DL Method Check for Discrete</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.AztecCode">
 <summary>Aztec Code</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.BC412">
 <summary>BC412</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.ChannelCode">
 <summary>Channel Code</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Code16">
 <summary>Code 16</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Code32">
 <summary>Code 32</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Code49">
 <summary>Code 49</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.CodeOne">
 <summary>Code One</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.Colorcode">
 <summary>Colorcode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.DataMatrix">
 <summary>Data Matrix</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MaxiCode">
 <summary>MaxiCode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.MicroPDF">
 <summary>MicroPDF</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PDF417">
 <summary>PDF-417</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.PosiCode">
 <summary>PosiCode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.QRCode">
 <summary>QR Code</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.SuperCode">
 <summary>SuperCode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.UltraCode">
 <summary>UltraCode</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.USD5">
 <summary>USD-5 (Slug Code)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_BarCodeScanners.VeriCode">
 <summary>VeriCode</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_Scale">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.Scale"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeighingDevice">
 <summary>Weighing Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleDevice">
 <summary>Scale Device</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassIMetric_CL">
 <summary>Scale Class I Metric</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassIMetric">
 <summary>Scale Class I Metric</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassIIMetric">
 <summary>Scale Class II Metric</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassIIIMetric">
 <summary>Scale Class III Metric</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassIIILMetric">
 <summary>Scale Class IIIL Metric</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassIVMetric">
 <summary>Scale Class IV Metric</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassIIIEnglish">
 <summary>Scale Class III English</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassIIILEnglish">
 <summary>Scale Class IIIL English</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassIVEnglish">
 <summary>Scale Class IV English</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleClassGeneric">
 <summary>Scale Class Generic</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleAttributeReport">
 <summary>Scale Attribute Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleControlReport">
 <summary>Scale Control Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleDataReport">
 <summary>Scale Data Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleStatusReport">
 <summary>Scale Status Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleWeightLimitReport">
 <summary>Scale Weight Limit Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleStatisticsReport">
 <summary>Scale Statistics Report</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.DataWeight">
 <summary>Data Weight</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.DataScaling">
 <summary>Data Scaling</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnit">
 <summary>Weight Unit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitMilligram">
 <summary>Weight Unit Milligram</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitGram">
 <summary>Weight Unit Gram</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitKilogram">
 <summary>Weight Unit Kilogram</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitCarats">
 <summary>Weight Unit Carats</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitTaels">
 <summary>Weight Unit Taels</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitGrains">
 <summary>Weight Unit Grains</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitPennyweights">
 <summary>Weight Unit Pennyweights</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitMetricTon">
 <summary>Weight Unit Metric Ton</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitAvoirTon">
 <summary>Weight Unit Avoir Ton</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitTroyOunce">
 <summary>Weight Unit Troy Ounce</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitOunce">
 <summary>Weight Unit Ounce</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.WeightUnitPound">
 <summary>Weight Unit Pound</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.CalibrationCount">
 <summary>Calibration Count</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ReZeroCount">
 <summary>Re-Zero Count</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.caleStatus">
 <summary>Scale Status</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.caleStatusFault">
 <summary>Scale Status Fault</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.caleStatusStableAtCenterOfZero">
 <summary>Scale Status Stable at Center of Zero</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.caleStatusInMotion">
 <summary>Scale Status In Motion</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.caleStatusWeightStable">
 <summary>Scale Status Weight Stable</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.caleStatusUnderZero">
 <summary>Scale Status Under Zero</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleStatusOverWeightLimit">
 <summary>Scale Status Over Weight Limit</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleStatusRequiresCalibration">
 <summary>Scale Status Requires Calibration</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ScaleStatusRequiresRezeroing">
 <summary>Scale Status Requires Rezeroing</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.ZeroScale">
 <summary>Zero Scale</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Scale.EnforcedZeroReturn">
 <summary>Enforced Zero Return</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_MSRDevices">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.MSRDevices"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.MSRDeviceReadOnly">
 <summary>MSR Device Read-Only</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.Track1Length">
 <summary>Track 1 Length</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.Track2Length">
 <summary>Track 2 Length</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.Track3Length">
 <summary>Track 3 Length</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.TrackJISLength">
 <summary>Track JIS Length</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.TrackData">
 <summary>Track Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.Track1Data">
 <summary>Track 1 Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.Track2Data">
 <summary>Track 2 Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.Track3Data">
 <summary>Track 3 Data</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_MSRDevices.TrackJISData">
 <summary>Track JIS Data</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.Usages_Arcade">
 <summary>Contains HID usage code s for <see cref="F:Tools.DevicesT.RawInputT.UsagePages.Arcade"/> page</summary>
 <remarks>Values not defined in this enumeration are reserved</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.Undefined">
 <summary>Undefined</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.GeneralPurposeIOCard">
 <summary>General Purpose IO Card</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.CoinDoor">
 <summary>Coin Door</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.WatchdogTimer">
 <summary>Watchdog Timer</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.GeneralPurposeAnalogInputState">
 <summary>General Purpose Analog Input State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.GeneralPurposeDigitalInputState">
 <summary>General Purpose Digital Input State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.GeneralPurposeOpticalInputState">
 <summary>General Purpose Optical Input State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.GeneralPurposeDigitalOutputState">
 <summary>General Purpose Digital Output State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.NumberOfCoinDoors">
 <summary>Number of Coin Doors</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.CoinDrawerDropCount">
 <summary>Coin Drawer Drop Count</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.CoinDrawerStart">
 <summary>Coin Drawer Start</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.CoinDrawerService">
 <summary>Coin Drawer Service</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.CoinDrawerTilt">
 <summary>Coin Drawer Tilt</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.CoinDoorTest">
 <summary>Coin Door Test</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.CoinDoorLockout">
 <summary>Coin Door Lockout</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.WatchdogTimeout">
 <summary>Watchdog Timeout</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.WatchdogAction">
 <summary>Watchdog Action</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.WatchdogReboot">
 <summary>Watchdog Reboot</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.WatchdogRestart">
 <summary>Watchdog Restart</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.AlarmInput">
 <summary>Alarm Input</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.CoinDoorCounter">
 <summary>Coin Door Counter</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.IODirectionMapping">
 <summary>I/O Direction Mapping</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.SetIODirection">
 <summary>Set I/O Direction</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.ExtendedOpticalInputState">
 <summary>Extended Optical Input State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.PinPadInputState">
 <summary>Pin Pad Input State</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.PinPadStatus">
 <summary>Pin Pad Status</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.PinPadOutput">
 <summary>Pin Pad Output</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.Usages_Arcade.PinPadCommand">
 <summary>Pin Pad Command</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.WM_INPUTMessage">
 <summary>Implemets <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.WM_INPUTMessage.#ctor(System.IntPtr,Tools.API.Messages.wParam.WM_INPUT,System.Int32)">
 <summary>CTor from all parameters but result and message type</summary>
 <param name="hWnd">Target window handle</param>
 <param name="lParam">lParam</param>
 <param name="wParam">wParam</param>
</member>
<member name="M:Tools.DevicesT.RawInputT.WM_INPUTMessage.#ctor(System.IntPtr,Tools.API.Messages.wParam.WM_INPUT,System.Int32,System.Int32)">
 <summary>CTor from all the parameters by messge type</summary>
 <param name="hWnd">Target window handle</param>
 <param name="lParam">lParam</param>
 <param name="wParam">wParam</param>
 <param name="ReturnValue">Return code</param>
</member>
<member name="M:Tools.DevicesT.RawInputT.WM_INPUTMessage.#ctor(System.IntPtr,Tools.API.Messages.WindowMessages,Tools.API.Messages.wParam.WM_INPUT,System.Int32)">
 <summary>CTor from all parameters but result</summary>
 <param name="hWnd">Target window handle</param>
 <param name="lParam">lParam</param>
 <param name="wParam">wParam</param>
 <param name="Message">Message code</param>
 <exception cref="T:System.ArgumentException"><paramref name="Message"/> does not represent <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/></exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.WM_INPUTMessage.#ctor(System.Windows.Forms.Message)">
 <summary>CTor from <see cref="T:System.Windows.Forms.Message"/></summary>
 <param name="Message">A <see cref="T:System.Windows.Forms.Message"/></param>
</member>
<member name="M:Tools.DevicesT.RawInputT.WM_INPUTMessage.#ctor(Tools.API.Messages.WindowMessage)">
 <summary>Copy CTor - clones given instance</summary>
 <param name="Message">Instance to clone</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Message"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Message"/> does not represent <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/></exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.WM_INPUTMessage.#ctor(System.IntPtr,Tools.API.Messages.WindowMessages,Tools.API.Messages.wParam.WM_INPUT,System.Int32,System.Int32)">
 <summary>CTor from all the parameters</summary>
 <param name="hWnd">Target window handle</param>
 <param name="lParam">lParam</param>
 <param name="wParam">wParam</param>
 <param name="Message">Message code</param>
 <param name="ReturnValue">Return code</param>
 <exception cref="T:System.ArgumentException"><paramref name="Message"/> does not represent <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/></exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.WM_INPUTMessage.CheckMessage(Tools.API.Messages.WindowMessages)">
 <summary>Check whether given message is <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/></summary>
 <param name="Message">Message to check</param>  <returns><paramref name="Message"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="Message"/> does not represent <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/></exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.WM_INPUTMessage.CheckMessage(Tools.API.Messages.WindowMessage)">
 <summary>Check whether given message is <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/></summary>
 <param name="Message">Message to check</param>  <returns><paramref name="Message"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="Message"/> does not represent <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/></exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.WM_INPUTMessage.CheckMessage(System.Windows.Forms.Message)">
 <summary>Check whether given message is <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/></summary>
 <param name="Message">Message to check</param>  <returns><paramref name="Message"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="Message"/> does not represent <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/></exception>
</member>
<member name="P:Tools.DevicesT.RawInputT.WM_INPUTMessage.wParam">
 <summary>Gets wParam</summary>
 <returns>Input code</returns>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawInputEventProvider">
 <summary>Provides events caused by raw devices</summary>
 <remarks>This class requires to be instantiated with impementation of  either <see cref="T:Tools.API.Messages.IWindowsMessagesProviderRef"/> or <see cref="T:Tools.API.Messages.IWindowsMessagesProviderVal`1"/>.
 These interfaces can be easily implemented by class deived from <see cref="T:System.Windows.Forms.Control"/> (or <see cref="T:System.Windows.Forms.Form"/>) and raised from its <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.
 <para>Note events are provided untill you register for them using <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Register(System.Collections.Generic.IEnumerable{Tools.DevicesT.RawInputT.RawInputDeviceRegistration})"/>.</para></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner">
 <summary>Gtes owner of thsi instance</summary>
 <remarks>Instance of window that was passed to CTor</remarks>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputEventProvider.OwnerHandleChanged">
 <summary>Gets value indicating if owner handle has changed</summary>
 <returns>True if <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> differs from its original value</returns>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.OwnerHandle">
 <summary>Contains copy of <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> to detect changes</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.Owners">
 <summary>Dictionary of owners providing events for windows</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.OwnersSync">
 <summary>Used to synchronize access to <see cref="F:Tools.DevicesT.RawInputT.RawInputEventProvider.Owners"/></summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.RegisterOwner(System.IntPtr,Tools.DevicesT.RawInputT.RawInputEventProvider)">
 <summary>Registers owner and event provider</summary>
 <param name="Owner">Owner to register</param>
 <param name="Inst">Instance to register for <paramref name="Owner"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Inst"/> is null or <paramref name="Owner"/> is <see cref="F:System.IntPtr.Zero"/></exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="Owner"/> has already <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> attached.</exception>
 <threadsafety>This member is thread-safe</threadsafety>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.UnregisterOwner(System.IntPtr)">
 <summary>Unregisteres owner</summary>
 <param name="Owner">Owner to unregister</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Owner"/> is <see cref="F:System.IntPtr.Zero"/></exception>
 <remarks>If owner is not registered then does nothing</remarks>
 <threadsafety>This member is thread-safe</threadsafety>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.IsOwnerRegistered(System.Windows.Forms.IWin32Window)">
 <summary>Gets value indicationg if given <see cref="T:System.Windows.Forms.IWin32Window"/> is already <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> attached.</summary>
 <param name="Owner"><see cref="T:System.Windows.Forms.IWin32Window"/> to get information for</param>
 <returns>True if <paramref name="Owner"/> has already attached <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/>; false otherwise.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Owner"/> is null</exception>
 <threadsafety>This member is thread-safe</threadsafety>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.GetOwnedProvider(System.Windows.Forms.IWin32Window)">
 <summary>Gets <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> attached to given <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
 <param name="Owner"><see cref="T:System.Windows.Forms.IWin32Window"/> to get <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> for</param>
 <returns><see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> attached to <paramref name="Owner"/> or null when <paramref name="Owner"/> has no <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> attached.</returns>
 <threadsafety>This member is thread-safe</threadsafety>
 <exception cref="T:System.ArgumentNullException"><paramref name="Owner"/> is null</exception>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider._Owner">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/> property</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.#ctor(Tools.API.Messages.IWindowsMessagesProviderRef)">
 <summary>CTor from provide with event with argument passed by reference</summary>
 <param name="Provider">Provides <see cref="E:Tools.API.Messages.IWindowsMessagesProviderRef.WndProc"/> event</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Provider"/> is null</exception>
 <exception cref="T:System.InvalidOperationException">There is already <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> attached to <paramref name="Provider"/> with same <see cref="P:System.Windows.Forms.IWin32Window.Handle"/>. You can locate the provider using <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.GetOwnedProvider(System.Windows.Forms.IWin32Window)"/>.</exception>
 <remarks><paramref name="Provider"/> must always raise the <see cref="E:Tools.API.Messages.IWindowsMessagesProviderVal`1.WndProc"/> with sender parameter set to <paramref name="Provider"/> and sender.<see cref="P:System.Windows.Forms.Message.HWnd">hWnd</see> set to <paramref name="Provider"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> otherwaise <see cref="T:System.InvalidOperationException"/> will be thrown by event handler.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.#ctor(Tools.API.Messages.IWindowsMessagesProviderVal{Tools.API.Messages.WindowMessage})">
 <summary>CTor from provider with event with argument passed by value</summary>
 <param name="Provider">Provides <see cref="E:Tools.API.Messages.IWindowsMessagesProviderVal`1.WndProc"/> event</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Provider"/> is null</exception>
 <exception cref="T:System.InvalidOperationException">There is already <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> attached to <paramref name="Provider"/> with same <see cref="P:System.Windows.Forms.IWin32Window.Handle"/>. You can locate the provider using <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.GetOwnedProvider(System.Windows.Forms.IWin32Window)"/>.</exception>
 <remarks><paramref name="Provider"/> must always raise the <see cref="E:Tools.API.Messages.IWindowsMessagesProviderVal`1.WndProc"/> with sender parameter set to <paramref name="Provider"/> and sender.<see cref="P:Tools.API.Messages.WindowMessage.hWnd">hWnd</see> set to <paramref name="Provider"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> otherwaise <see cref="T:System.InvalidOperationException"/> will be thrown by event handler.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.#ctor(Tools.API.Messages.IWindowsMessagesProviderVal{Tools.DevicesT.RawInputT.WM_INPUTMessage})">
 <summary>CTor from provider with event with argument of type <see cref="T:Tools.DevicesT.RawInputT.WM_INPUTMessage"/></summary>
 <param name="Provider">Provides <see cref="E:Tools.API.Messages.IWindowsMessagesProviderVal`1.WndProc"/> event</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Provider"/> is null</exception>
 <exception cref="T:System.InvalidOperationException">There is already <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> attached to <paramref name="Provider"/> with same <see cref="P:System.Windows.Forms.IWin32Window.Handle"/>. You can locate the provider using <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.GetOwnedProvider(System.Windows.Forms.IWin32Window)"/>.</exception>
 <remarks><paramref name="Provider"/> must always raise the <see cref="E:Tools.API.Messages.IWindowsMessagesProviderVal`1.WndProc"/> with sender parameter set to <paramref name="Provider"/> and sender.<see cref="P:Tools.API.Messages.WindowMessage.hWnd">hWnd</see> set to <paramref name="Provider"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> otherwaise <see cref="T:System.InvalidOperationException"/> will be thrown by event handler.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.WndProc(System.Object,Tools.DevicesT.RawInputT.WM_INPUTMessage)">
 <summary>Handles <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="E:Tools.API.Messages.IWindowsMessagesProviderVal`1.WndProc">WndProc</see></summary>
 <param name="sender">Source of the event</param>
 <param name="e">Message</param>
 <exception cref="T:System.InvalidOperationException"><paramref name="sender"/> is not <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/> or <paramref name="msg"/>.<see cref="P:Tools.API.Messages.WindowMessage.hWnd">hWnd</see> isnot <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see>.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.WndProc(System.Object,System.Windows.Forms.Message@)">
 <summary>Handles <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="E:Tools.API.Messages.IWindowsMessagesProviderRef.WndProc">WndProc</see></summary>
 <param name="sender">Source of the event</param>
 <param name="msg">Message</param>
 <exception cref="T:System.InvalidOperationException"><paramref name="sender"/> is not <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/> or <paramref name="msg"/>.<see cref="P:System.Windows.Forms.Message.HWnd">HWnd</see> isnot <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see>.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.WndProc(System.Object,Tools.API.Messages.WindowMessage)">
 <summary>Handles <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="E:Tools.API.Messages.IWindowsMessagesProviderVal`1.WndProc">WndProc</see></summary>
 <param name="sender">Source of the event</param>
 <param name="e">Message</param>
 <exception cref="T:System.InvalidOperationException"><paramref name="sender"/> is not <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/> or <paramref name="msg"/>.<see cref="P:Tools.API.Messages.WindowMessage.hWnd">hWnd</see> isnot <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see>.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.WndProc(System.IntPtr,Tools.API.Messages.WindowMessages,System.Int32,System.Int32)">
 <summary>Called when <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/> raises <see cref="E:Tools.API.Messages.IWindowsMessagesProviderVal`1.WndProc"/> or <see cref="E:Tools.API.Messages.IWindowsMessagesProviderRef.WndProc"/></summary>
 <param name="hWnd">Handle of message target window</param>
 <param name="wParam">Message wParam</param>
 <param name="lParam">Message lParam</param>
 <param name="Message">Message code</param>
 <returns>Message return value</returns>
 <exception cref="T:System.InvalidOperationException"><paramref name="hWnd"/> is not <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see>.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider._RaiseMediaCenterRemoteEvents">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.RaiseMediaCenterRemoteEvents"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputEventProvider.RaiseMediaCenterRemoteEvents">
 <summary>Gets or sets value indicating if Windows Media Center infrared remote events are raised</summary>
 <returns>True if Windows Media Center infrared remote events can be rised; false if they cannot</returns>
 <value>True to enable Windows Media Center infrared remote related events; false to disable them. Default value is false.</value>
 <remarks>In order the events to be raised, you mast register for defvices returned by <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.MediaCenterRemote"/>.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnWM_INPUT(Tools.API.Messages.wParam.WM_INPUT,System.IntPtr)">
 <summary>Handle the <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message</summary>
 <param name="wParam">Input code.</param>
 <param name="lParam">Handle to the <see cref="T:Tools.API.RawInput.RAWINPUT_Marshalling"/> structure that contains the raw input from the device. </param>
 <returns>Return value for the event, 0.</returns>
 <remarks>You are unlikely to override this method, because it means that you have to completely replace parsing event data from <paramref name="lParam"/>.
 This method, and internal methods it calls, does all the work that leads from windows message to event. This method calls all the On_... methods.
 If you want customize HID events processing, override the <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.HidAdditionalProcessing(Tools.DevicesT.RawInputT.RawHidEventArgs,Tools.DevicesT.RawInputT.DeviceInfo)"/> function.</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputEventProvider.AdditionalProcessingNeeded">
 <summary>Gets value indicating wheather additional processing should be run for HID-generated events. Ignored for mice and keyboards.</summary>
 <returns>True when <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnWM_INPUT(Tools.API.Messages.wParam.WM_INPUT,System.IntPtr)"/> should call <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.HidAdditionalProcessing(Tools.DevicesT.RawInputT.RawHidEventArgs,Tools.DevicesT.RawInputT.DeviceInfo)"/> in order to obtain <see cref="T:Tools.DevicesT.RawInputT.RawHidEventArgs"/></returns>
 <remarks>This implementation returns same value as <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.RaiseMediaCenterRemoteEvents"/>.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.GetRAWINPUT(System.IntPtr)">
 <summary>Gets <see cref="T:Tools.API.RawInput.RAWINPUT_NonMarshalling"/> from handle</summary>
 <param name="hRawInput">Handle of <see cref="T:Tools.API.RawInput.RAWINPUT_Marshalling"/> for <see cref="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)"/></param>
 <exception cref="T:Tools.API.Win32APIException">Error while obtaining raw input data</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.HidAdditionalProcessing(Tools.DevicesT.RawInputT.RawHidEventArgs,Tools.DevicesT.RawInputT.DeviceInfo)">
 <summary>Performs additional processing for HID events in order to obtain more information than just raw input</summary>
 <param name="e">Contains raw event arguments</param>
 <param name="Device">Information about device, source of this event</param>
 <returns>New instance of class derived from <see cref="T:Tools.DevicesT.RawInputT.RawHidEventArgs"/> when additional information is available for <paramref name="e"/>; <paramref name="e"/> or null when no additional information are available.</returns>
 <remarks>Override this method in order to provide additional HID informations.
 <para>Do not raise events from this method. Instead utilize <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.AdditionalEvents"/> property. It ensures that events are raied in correct order from most generic to most specific.</para>
 <para>Do not throw exceptions, it cannot be handled.</para>
 <para>This implementation currently deals only with Windows Media Center Infrared Remote.</para>
 <para>This function is never called wne <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.HasListeners"/> returns false, so, if you are addin custom events, you should override <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.HasListeners"/> as well.</para></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.ParseMediaCenterRemote(Tools.DevicesT.RawInputT.RawHidEventArgs,Tools.DevicesT.RawInputT.DeviceInfo)">
 <summary>Parses Windows Media Center Infrared Remote event arguments</summary>
 <param name="e">Raw event arguments</param>
 <param name="Device">Device information</param>
 <returns>Media-Center-Remote-appropriate event arguments or <paramref name="e"/> when parsing was unsuccessfull (unrecognized event)</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnError(Tools.ComponentModelT.ExceptionEventArgs{Tools.API.Win32APIException})">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.Error"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.Error">
 <summary>Raised when <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnWM_INPUT(Tools.API.Messages.wParam.WM_INPUT,System.IntPtr)"/> fails to proces the message.</summary>
 <remarks>This event can be never raised when there are no handlers registered for other events.</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputEventProvider.HasListeners">
 <summary>Gtes value indicating if there are any listeners for raw-input-related events</summary>
 <returns>True if there is reason to process <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message</returns>
 <remarks>Note for inheritors: When overriding this property always return your value OR-ed with base-clas call.
 <para>Do determine if event has some listeners attached you must have access to event invocation list. For example in Visual Basic this means that you cannot use compiler-provided simple event implementation, but you have to provide your own implementation for Add, Remove and Raise methods utilizing Custom Events.</para></remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnInput(Tools.DevicesT.RawInputT.RawInputEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.Input"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.InputHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.Input"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.Input">
 <summary>Raised when the raw input device this instance was registered for generates an event</summary>
 <remarks>This event is raised whenever the <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> is received and successfully processed, there are more event-specific events you'll probably handle rather than this one. This event is raised as first of the events raised by his class for single <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnMouseEvent(Tools.DevicesT.RawInputT.RawMouseEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseEvent"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseEventHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseEvent"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseEvent">
 <summary>Raised when the raw input device this instance was registered for generates an event for mouse.</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnMouseDown(Tools.DevicesT.RawInputT.RawMouseEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDown"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDownHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDown"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDown">
 <summary>Raised when the raw input device this instance was registered for generates an mouse event with at leas one down transition state flags set.</summary>
 <remarks>It is possible that for several physical user mouse button presses is raised only one event, but with more than one down transition state flags set.
 It is also possible that one <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message causes both - <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDown"/> and <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUp"/> events. In such case <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDown"/> is always raised before <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUp"/>. Both those events are raised after <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseEvent"/>.</remarks>
 <seealso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Buttons"/>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnMouseUp(Tools.DevicesT.RawInputT.RawMouseEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUp"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUpHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUp"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUp">
 <summary>Raised when the raw input device this instance was registered for generates an mouse event with at leas one up transition state flags set.</summary>
 <remarks>It is possible that for several physical user mouse button releases is raised only one event, but with more than one up transition state flags set.
 It is also possible that one <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message causes both - <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDown"/> and <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUp"/> events. In such case <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDown"/> is always raised before <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUp"/>. Both those events are raised after <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseEvent"/>.</remarks>
 <seealso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Buttons"/>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnMouseWheel(Tools.DevicesT.RawInputT.RawMouseEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseWheel"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseWheelHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseWheel"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseWheel">
 <summary>Raised when the raw input device this instance was registered for generates an mouse event with the <see cref="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.Wheel"/> flag set.</summary>
 <remarks>It is possible that this event is generated by the same <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> as <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDown"/> or <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUp"/> event. In such case this event is raised after those down and up events but before possible <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseMove"/> event.</remarks>
 <seealso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Buttons"/><seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Wheel"/>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnMouseMove(Tools.DevicesT.RawInputT.RawMouseEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseMove"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseMoveHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseMove"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseMove">
 <summary>Raised when the raw input device this instance was registered for generates an mouse event indicating that mouse was moved.</summary>
 <remarks><para>This event is raise either if <paramref name="e"/>.<see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.XYAbsolute">XYAbsolute</see> is false and either of <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.X"/>, <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Y"/> is non-zero; or <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.XYAbsolute"/> is true and there is a diference from last absolute-positioned event. This measuring is done for all devices together.</para>
 It is possible that this event is generated by the same <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> as <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseDown"/>, <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseUp"/> or <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MouseWheel"/> event. In such case this event is raised after those down, up and wheel events.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnKeyboardEvent(Tools.DevicesT.RawInputT.RawKeyboardEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyboardEvent"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyboardEventHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyboardEvent"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyboardEvent">
 <summary>Raised when the raw input device this instance was registered for generates an event for keyboard.</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnKeyDown(Tools.DevicesT.RawInputT.RawKeyboardEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyDown"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyDownHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyDown"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyDown">
 <summary>Raised when the raw input device this instance was registered for generates an event for keyboard with <see cref="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.AssociatedMessage"/> set to <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN"/> or <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYDOWN"/>.</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnKeyUp(Tools.DevicesT.RawInputT.RawKeyboardEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyDown"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyUpHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyDown"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyUp">
 <summary>Raised when the raw input device this instance was registered for generates an event for keyboard with <see cref="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.AssociatedMessage"/> set to <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYUP"/> or <see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYUP"/>.</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnHidEvent(Tools.DevicesT.RawInputT.RawHidEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.HidEvent"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.HidEventHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.KeyboardEvent"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.HidEvent">
 <summary>Raised when the raw input device this instance was registered for generates an event for HID (Human Interface Device; other than keyboard or mouse).</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnMediaCenterRemoteButtonDown(Tools.DevicesT.RawInputT.MediaCenterRemoteEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MediaCenterRemoteButtonDown"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.MediaCenterRemoteButtonDownHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MediaCenterRemoteButtonDown"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MediaCenterRemoteButtonDown">
 <summary>Raised when the raw input device this instance was registered for generates a Windows Media Center infrared remote event - button was presed</summary>
 <remarks>This event is raised only when <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.RaiseMediaCenterRemoteEvents"/> is true</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.OnMediaCenterRemoteButtonUp(Tools.DevicesT.RawInputT.MediaCenterRemoteEventArgs)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MediaCenterRemoteButtonUp"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base-class method in order the event to be raised.</remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.MediaCenterRemoteButtonUpHandler">
 <summary>Invocation list for the <see cref="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MediaCenterRemoteButtonUp"/> event</summary>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputEventProvider.MediaCenterRemoteButtonUp">
 <summary>Raised when the raw input device this instance was registered for generates a Windows Media Center infrared remote event - button was released</summary>
 <remarks>This event is raised only when <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.RaiseMediaCenterRemoteEvents"/> is true.
 <para><see cref="P:Tools.DevicesT.RawInputT.MediaCenterRemoteEventArgs.KeyCode"/> returns only <see cref="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.CommandKey"/> or <see cref="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.ExtendedKey"/>. For button up event, you cannot determine the button which was released. Only way to determine this is remember button which was previously pressed.</para></remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventProvider.disposed">
 <summary>Indicates if object was already disposed</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Dispose(System.Boolean)">
 <summary>Releases all resources used by the <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider" />.</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.PerformFinalization">
 <summary>Performs <see cref="M:System.ComponentModel.Component.Dispose"/> or <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Finalize"/></summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Finalize">
 <summary>Releases unmanaged resources and performs other cleanup operations before the <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider" /> is reclaimed by garbage collection.</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Register(Tools.DevicesT.RawInputT.UsagePages,System.Int32)">
 <summary>Registers events from raw input device identified by usage page and usage</summary>
 <param name="UsagePage">Top level collection Usage page for the raw input device</param>
 <param name="Usage">Top level collection Usage for the raw input device</param>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Register(Tools.DevicesT.RawInputT.UsagePages)">
 <summary>Registers events from all raw input devices from given usage page</summary>
 <param name="UsagePage">Top level collection Usage page for the raw input device</param>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Register(Tools.DevicesT.RawInputT.UsagePages,System.Int32,Tools.DevicesT.RawInputT.BackgroundEvents)">
 <summary>Registers events from raw input device identified by usage page and usage with giwen background mode</summary>
 <param name="UsagePage">Top level collection Usage page for the raw input device</param>
 <param name="Usage">Top level collection Usage for the raw input device</param>
 <param name="BackgroundMode">Defines if and when events are caught when window ins not active</param>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="BackgroundMode"/> is not member of <see cref="T:Tools.DevicesT.RawInputT.BackgroundEvents"/></exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Register(Tools.DevicesT.RawInputT.UsagePages,Tools.DevicesT.RawInputT.BackgroundEvents)">
 <summary>Registers events from all raw input devices from given usage page with giwen background mode</summary>
 <param name="UsagePage">Top level collection Usage page for the raw input device</param>
 <param name="BackgroundMode">Defines if and when events are caught when window is not active</param>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="BackgroundMode"/> is not member of <see cref="T:Tools.DevicesT.RawInputT.BackgroundEvents"/></exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Register(Tools.DevicesT.RawInputT.RawInputDeviceRegistration)">
 <summary>Registers events from single raw input devices (or group of raw input device identified by single instance of the <see cref="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration"/> class)</summary>
 <param name="Device">Device (or group) to register events from</param>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="Device"/>.<see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude">Exclude</see> is true. -or-
 <paramref name="Device"/>.<see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages">DisableLegacyMessages</see> is true but the device is not from <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> usage page or it is from that usage page but has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> false and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is neither <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard"/> nor <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse"/>. -or-
 <paramref name="Device"/>.<see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ApplicationKeys">ApplicationKeys</see> is true but <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages">DisableLegacyMessages</see> is false.
 </exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Register(Tools.DevicesT.RawInputT.RawInputDeviceRegistration[])">
 <summary>Registers events from collection of devices</summary>
 <param name="Devices">Devices or groups of devices to registere events from. Can contain members with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> set to true.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Devices"/> is null</exception>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ArgumentException">
 Only one device is being (un)registered and it has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> set to true. -or-
 Device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> is being (un)registered, but device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> set to true and same <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> is not included in collection. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> true and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is nonzero. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> true and it is not from <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> usage page or it is from that usage page but has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> false and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is neither <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard"/> nor <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse"/>. -or-
 <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ApplicationKeys"/> is true but <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> is false for any device.
 </exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.Register(System.Collections.Generic.IEnumerable{Tools.DevicesT.RawInputT.RawInputDeviceRegistration})">
 <summary>Registers events from collection of devices</summary>
 <param name="Devices">Devices or groups of devices to registere events from. Can contain members with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> set to true.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Devices"/> is null</exception>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ArgumentException">
 Only one device is being (un)registered and it has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> set to true. -or-
 Device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> is being (un)registered, but device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> set to true and same <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> is not included in collection. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> true and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is nonzero. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> true and it is not from <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> usage page or it is from that usage page but has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> false and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is neither <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard"/> nor <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse"/>. -or-
 <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ApplicationKeys"/> is true but <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> is false for any device.
 </exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.RegisterInternal(Tools.DevicesT.RawInputT.RawInputDeviceRegistration[],System.Boolean,System.Boolean)">
 <summary>Performs device events regitration and unregistration</summary>
 <param name="Devices">Devices to register/unregister</param>
 <param name="Unregister">True to perform unregistration</param>
 <param name="NoChecks">Do not perform any device-related checks (use only from <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.UnregisterAll"/>)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Devices"/> is null</exception>
 <exception cref="T:System.ArgumentException">
 Only one device is being (un)registered and it has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> set to true. -or-
 Device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> is being (un)registered, but device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> set to true and same <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> is not included in collection. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> true and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is nonzero. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> true and it is not from <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> usage page or it is from that usage page but has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> false and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is neither <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard"/> nor <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse"/>. -or-
 <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ApplicationKeys"/> is true but <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> is false for any device.
 <para><see cref="T:System.ArgumentException"/> is not thrown when <paramref name="NoChecks"/> is true.</para>
 </exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.UnRegister(Tools.DevicesT.RawInputT.UsagePages,System.Int32)">
 <summary>Unregisters events from raw input device identified by usage page and usage</summary>
 <param name="UsagePage">Top level collection Usage page for the raw input device</param>
 <param name="Usage">Top level collection Usage for the raw input device</param>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.UnRegister(Tools.DevicesT.RawInputT.UsagePages)">
 <summary>Unregisters events from all raw input devices from given usage page</summary>
 <param name="UsagePage">Top level collection Usage page for the raw input device</param>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.UnRegister(Tools.DevicesT.RawInputT.RawInputDeviceRegistration)">
 <summary>Unregisters events from single raw input devices (or group of raw input device identified by single instance of the <see cref="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration"/> class)</summary>
 <param name="Device">Device (or group) to unregister events from</param>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="Device"/>.<see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude">Exclude</see> is true. -or-
 <paramref name="Device"/>.<see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages">DisableLegacyMessages</see> is true but the device is not from <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> usage page or it is from that usage page but has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> false and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is neither <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard"/> nor <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse"/>. -or-
 <paramref name="Device"/>.<see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ApplicationKeys">ApplicationKeys</see> is true but <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages">DisableLegacyMessages</see> is false.
 </exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.UnRegister(Tools.DevicesT.RawInputT.RawInputDeviceRegistration[])">
 <summary>Unregisters events from collection of devices</summary>
 <param name="Devices">Devices or groups of devices to unregister events from. Can contain members with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> set to true.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Devices"/> is null</exception>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ArgumentException">
 Only one device is being (un)registered and it has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> set to true. -or-
 Device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> is being (un)registered, but device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> set to true and same <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> is not included in collection. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> true and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is nonzero. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> true and it is not from <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> usage page or it is from that usage page but has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> false and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is neither <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard"/> nor <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse"/>. -or-
 <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ApplicationKeys"/> is true but <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> is false for any device.
 </exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.UnRegister(System.Collections.Generic.IEnumerable{Tools.DevicesT.RawInputT.RawInputDeviceRegistration})">
 <summary>Unregisters events from collection of devices</summary>
 <param name="Devices">Devices or groups of devices to unregister events from. Can contain members with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> set to true.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Devices"/> is null</exception>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ArgumentException">
 Only one device is being (un)registered and it has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> set to true. -or-
 Device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> is being (un)registered, but device with <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> set to true and same <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> is not included in collection. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> true and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is nonzero. -or-
 Device has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> true and it is not from <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> usage page or it is from that usage page but has <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> false and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> is neither <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard"/> nor <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse"/>. -or-
 <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ApplicationKeys"/> is true but <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> is false for any device.
 </exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.UnregisterAll">
 <summary>Unregisters events from all devices currently registered with <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.</summary>
 <exception cref="T:Tools.API.Win32APIException">An error occured while registering devices</exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventProvider.GetRegisteredDevices(System.Boolean)">
 <summary>Gets registered raw-input devices</summary>
 <param name="AllWinows">True to get all devices registered for this application, false to get only devices registered for <see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/></param>
 <returns>Array of devices registered either for application or owner</returns>
 <remarks>This function returns actual state of registration event for devices that weren't registrered using <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> class.</remarks>
 <exception cref="T:Tools.API.Win32APIException">An arror occured while obtaining device list from system.</exception>
 <exception cref="T:System.ObjectDisposedException">The object was disposed</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.DevicesT.RawInputT.RawInputEventProvider.Owner"/>.<see cref="P:System.Windows.Forms.IWin32Window.Handle">Handle</see> has changed. In this situaltion <see cref="T:Tools.DevicesT.RawInputT.RawInputEventProvider"/> automatically disposes.</exception>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawInputEventArgs">
 <summary>Base class for classes holding event arguments of raw input events</summary>
 <remarks>This class is not intended to be derived from by 3rd party.</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputEventArgs.DeviceType">
 <summary>Type of device that caused the event. Also determines type of this instance.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventArgs._EventName">
 <summary>CContains value of the <see cref="P:Tools.DevicesT.RawInputT.RawInputEventArgs.EventName"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputEventArgs.EventName">
 <summary>Gets or sets name of event associated with this instance</summary>
 <value>Name of event associated with this instance. This property is used only for <see cref="M:Tools.DevicesT.RawInputT.RawInputEventArgs.ToString"/> purposes.</value>
 <returns>Name of event associated with this instance</returns>
 <seelaso cref="M:Tools.DevicesT.RawInputT.RawInputEventArgs.ToString"/>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventArgs.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Tools.DevicesT.RawInputT.RawInputEventArgs" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Tools.DevicesT.RawInputT.RawInputEventArgs" />.</returns>
 <remarks>When set, returns value of the <see cref="P:Tools.DevicesT.RawInputT.RawInputEventArgs.EventName"/> property, otherwise calls<see cref="M:System.Object.ToString">base-class method</see>.</remarks>
 <seelaso cref="P:Tools.DevicesT.RawInputT.RawInputEventArgs.EventName"/>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventArgs._DeviceType">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawInputEventArgs.DeviceType"/> property</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputEventArgs.hDevice">
 <summary>Handle to device that cause this event</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputEventArgs.#ctor(Tools.DevicesT.RawInputT.DeviceType,System.IntPtr)">
 <summary>CTor</summary>
 <param name="Type">Type of device that cause the event</param>
 <param name="hDevice">Handle to device that caused this event</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Type"/> is not member of <see cref="P:Tools.DevicesT.RawInputT.RawInputEventArgs.DeviceType"/></exception>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputEventArgs.Device">
 <summary>Gets device that caused the event</summary>
 <returns>Device that caused the event; or null when device is unknown.</returns>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawKeyboardEventArgs">
 <summary>Keyboard event arguments for raw input</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.#ctor(Tools.API.RawInput.RAWKEYBOARD,System.IntPtr)">
 <summary>CTor</summary>
 <param name="raw">Data from the <see cref="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)"/> call</param>
 <param name="hDevice">Handle to device that caused this event</param>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.raw">
 <summary>Data from the <see cref="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)"/> call</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.KeyCode">
 <summary>Gets translated key code for this event</summary>
 <returns>Key code. Keycodes are never OR-ed with combining key <see cref="F:System.Windows.Forms.Keys.Shift"/>, <see cref="F:System.Windows.Forms.Keys.Control"/> and <see cref="F:System.Windows.Forms.Keys.Alt"/>.</returns>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.OverrunMakeCode">
 <summary>Value returned by <see cref="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.ScanCode"/> when there was an keyboard overrurn</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.ScanCode">
 <summary>Gets hardware scan code</summary>
 <returns>Hardware scan code. In case of keyboard overrun returns <see cref="F:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.OverrunMakeCode"/></returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.AssociatedMessage">
 <summary>Gets code of windows message for <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message that caused the event to be raised.</summary>
 <returns>Windows mesage code such as <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN"/> or <see cref="F:Tools.API.Messages.WindowMessages.WM_KEYUP"/> that can be used to determine keyboard event.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.Flags">
 <summary>Gets flags for scan code</summary>
 <returns>Flags for scan code</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.ExtraInfo">
 <summary>Gets extra hardware info assciated with this event</summary>
 <returns>Extra hardware info associated with this event. It's OEM-specific.</returns>
 <remarks>This property is not CLS-compliant. If you are unable to consume it from your language, use <see cref="M:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.GetExtraInfo"/> instead.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.GetExtraInfo">
 <summary>CLS-compliant alternative of <see cref="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.ExtraInfo"/> CLS-incompliant property.</summary>
 <returns>Bitwise same value as <see cref="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.ExtraInfo"/> but as CLS-compliant type <see cref="T:System.Int64"/></returns>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.KeyboardFlags">
 <summary>Definnes possible flags for the <see cref="P:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.Flags"/> property</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.KeyboardFlags.Make">
 <summary>Make</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.KeyboardFlags.Break">
 <summary>Break</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.KeyboardFlags.E0">
 <summary>E0</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.KeyboardFlags.E1">
 <summary>E1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.KeyboardFlags.SetLed">
 <summary>Set led</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawKeyboardEventArgs.KeyboardFlags.TerminalServerShadow">
 <summary>Terminal server shadow</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawMouseEventArgs">
 <summary>Mouse event arguments for raw input</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseEventArgs.raw">
 <summary>Raw mouse data obtained form <see cref="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)"/> call</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawMouseEventArgs.#ctor(Tools.API.RawInput.RAWMOUSE,System.IntPtr)">
 <summary>CTor</summary>
 <param name="raw">Raw mouse data obtained form <see cref="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)"/> call</param>
 <param name="hDevice">Handle to device that caused this event</param>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.RawButtonData">
 <summary>Gets raw button data</summary>
 <returns>OEM-specific raw button data</returns>
 <remarks>This property is not CLS-compliant. If you are unable to consume it from your language, use <see cref="M:Tools.DevicesT.RawInputT.RawMouseEventArgs.GetRawButtonData"/> instead.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawMouseEventArgs.GetRawButtonData">
 <summary>CLS-compliant alternative of <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.RawButtonData"/> CLS-incompliant property.</summary>
 <returns>Bitwise same value as <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.RawButtonData"/> but as CLS-compliant type <see cref="T:System.Int64"/></returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.ExtraInfo">
 <summary>Gets extra hardware info assciated with this event</summary>
 <returns>Extra hardware info associated with this event. It's OEM-specific.</returns>
 <remarks>This property is not CLS-compliant. If you are unable to consume it from your language, use <see cref="M:Tools.DevicesT.RawInputT.RawMouseEventArgs.GetExtraInfo"/> instead.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawMouseEventArgs.GetExtraInfo">
 <summary>CLS-compliant alternative of <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.ExtraInfo"/> CLS-incompliant property.</summary>
 <returns>Bitwise same value as <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.ExtraInfo"/> but as CLS-compliant type <see cref="T:System.Int64"/></returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.X">
 <summary>Gets the X coordinate of mouse pointer</summary>
 <returns>Mouse pointer X coordibate. Wheather relative or absolute is determined by the <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.XYAbsolute"/> property.</returns>
 <seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.XYAbsolute"/><seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.VirtualDesktop"/>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Y">
 <summary>Gets the Y coordinate of mouse pointer</summary>
 <returns>Mouse pointer Y coordibate. Wheather relative or absolute is determined by the <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.XYAbsolute"/> property.</returns>
 <seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.XYAbsolute"/><seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.VirtualDesktop"/>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.XYAbsolute">
 <summary>Gets value indicating if mouse coordinates are absoulte or relative</summary>
 <returns>True when mouse coordinates are absoulte; false if they are relative</returns>
 <seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.X"/><seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Y"/>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.MouseAttributesChanged">
 <summary>Gets value indicating if mouse attributes has changed</summary>
 <returns>True when mouse attributes has changed and aplication should query them again.</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.VirtualDesktop">
 <summary>Gets value indicating if mouse coordinates are maped to virtual desktop (in multi-monitor environment)</summary>
 <returns>True if mouse coordinates are mapped to virtual desktop; false otherwise</returns>
 <seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.X"/><seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Y"/>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Buttons">
 <summary>Gets buttons transition states</summary>
 <returns>Buttons transition states</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Wheel">
 <summary>Gets value indicating if wheel event occured</summary>
 <returns>True when the <see cref="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.Wheel"/> flag of <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Buttons"/> is set; false otherwise</returns>
 <seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Buttons"/><seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.WheelData"/>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.WheelData">
 <summary>When the <see cref="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.Wheel"/> flag of <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Buttons"/> is set, gets wheel data.</summary>
 <returns>Wheel data when the <see cref="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.Wheel"/> flag of <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Buttons"/> is set; otherwise 0.</returns>
 <seelaso cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.Wheel"/>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawMouseButtonStates">
 <summary>Defines transition states of mouse buttons</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.LeftDown">
 <summary>Left button was pressed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.LeftUp">
 <summary>Left button was released</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.RightDown">
 <summary>Right button was pressed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.RightUp">
 <summary>Right button was released</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.MiddleDown">
 <summary>Middle button was pressed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.MiddleUp">
 <summary>Middlebutton was released</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.X1Down">
 <summary>The X1 button was pressed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.X1Up">
 <summary>The X1 button was released</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.X2Down">
 <summary>The X2 button was pressed</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.X2Up">
 <summary>The X2 button was released</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawMouseButtonStates.Wheel">
 <summary>Wheel event ocured. <see cref="P:Tools.DevicesT.RawInputT.RawMouseEventArgs.WheelData"/> contains event data.</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawHidEventArgs">
 <summary>HID event arguments for raw input</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawHidEventArgs.raw">
 <summary>Contains raw data from <see cref="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)"/> call</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawHidEventArgs.#ctor(Tools.API.RawInput.RAWHID_NonMarshalling,System.IntPtr)">
 <summary>CTor</summary>
 <param name="raw">raw data from <see cref="M:Tools.API.RawInput.GetRawInputData(System.IntPtr,Tools.API.RawInput.GetRawInputDataCommand,System.IntPtr,System.UInt32@,System.UInt32)"/> call</param>
 <param name="hDevice">Handle to device that caused this event</param>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawHidEventArgs.#ctor(Tools.DevicesT.RawInputT.RawHidEventArgs)">
 <summary>Copy CTor - initializes new instance of <see cref="T:Tools.DevicesT.RawInputT.RawHidEventArgs"/> from given instance</summary>
 <param name="Other">Instance to initialize new instance from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Other"/> is null</exception>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawData">
 <summary>Gets raw data from input device</summary>
 <returns>Raw data from input device</returns>
 <remarks>You can change items of this array. Do not do this! Or data for other consumers of this event and all events raised for same <see cref="F:Tools.API.Messages.WindowMessages.WM_INPUT"/> message can be currupted.</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawItemSize">
 <summary>Gest size of one block in <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawData"/></summary>
 <returns>Size of one block in raw data</returns>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawItemsCount">
 <summary>Gets count of blocks in <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawData"/></summary>
 <returns>Count of blocks in <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawData"/>. <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawItemsCount"/> * <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawItemSize"/> equals to <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawData"/>.<see cref="T:System.Byte">Length</see></returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawHidEventArgs.GetRawBlocks">
 <summary>Gets splitter <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawData"/> into blocks</summary>
 <returns>Utilizes <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawItemsCount"/> and <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawItemSize"/> to get array of arrays of bytes, each sub-aray representing one block of raw data.</returns>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawHidEventArgs._AdditionalEvents">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.AdditionalEvents"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawHidEventArgs.AdditionalEvents">
 <summary>List of delegates of procedures to be called in order to raise additional events for this event args</summary>
 <returns>Delegates to be called for this event args; null when delegates have been already called.</returns>
 <remarks>When overriding <see cref="M:Tools.DevicesT.RawInputT.RawInputEventProvider.HidAdditionalProcessing(Tools.DevicesT.RawInputT.RawHidEventArgs,Tools.DevicesT.RawInputT.DeviceInfo)"/>, do not raise events from there. Instead of it create the On... procedures and pass delegates to them to this property. Delegates will be called in order in which they are in the list after preceding generic events are raised. This ensures consistent event order. Most generic first and most concrete last.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawHidEventArgs.RaiseAdditionalEvents">
 <summary>Calls all the delegates in <see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.AdditionalEvents"/>, then clears the list</summary>
 <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException"><see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.AdditionalEvents"/> is null</exception>
</member>
<member name="T:Tools.DevicesT.RawInputT.MediaCenterRemoteEventArgs">
 <summary>Argument of HID device caused by Windows Media Center infrared remote</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteEventArgs._KeyCode">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.MediaCenterRemoteEventArgs.KeyCode"/> property</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.MediaCenterRemoteEventArgs.#ctor(Tools.DevicesT.RawInputT.RawHidEventArgs)">
 <summary>CTor</summary>
 <param name="Original">Original raw HID event argument</param>
 <exception cref="T:System.ArgumentException"><paramref name="Original"/>.<see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawItemsCount">RawItemsCount</see> is not 1 or <paramref name="Original"/>.<see cref="P:Tools.DevicesT.RawInputT.RawHidEventArgs.RawItemSize">RawItemSize</see> is neither 2 nor 3</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Original"/> is null</exception>
 <remarks>Before calling this constructor, ensure that events come from Media Center Remote. This constructor performs no validation (except for that documented in exceptions). It only converts <paramref name="Original"/>.<see cref="M:Tools.DevicesT.RawInputT.RawHidEventArgs.GetRawBlocks">GetRawBlocks</see>[0] to <see cref="T:Tools.DevicesT.RawInputT.MediaCenterRemoteKey"/> value (in way described in documentation of <see cref="T:Tools.DevicesT.RawInputT.MediaCenterRemoteKey"/> enumeration).</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.MediaCenterRemoteEventArgs.KeyCode">
 <summary>Gets code of button that was pressed</summary>
 <returns>Code of presed button</returns>
 <remarks>For key up event retrns only <see cref="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.CommandKey"/> or <see cref="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.ExtendedKey"/>.</remarks>
</member>
<member name="T:Tools.DevicesT.RawInputT.MediaCenterRemoteKey">
 <summary>Contains keycodes used by Windows Media Center infrared remote</summary>
 <remarks>Enumeration values mimics raw data comming from Media Center remote HID device. The data come as array of 2 or bytes. Bytes are composed into single integer value this ways: Byte 0 is the least significant (the lowest order) byte in integer value, byte 1 is 2nd least significant, byte 2 is 3rd least significant byte of integer.
 <para>This enumeration does not provide values for buttons ←, ↑, →, ↓, OK, Enter, Clear, *, # and 0-9 because they are provided by HID in different way. You can consume those buttons using keyboard events.</para></remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.ExtendedKey">
 <summary>Indicates extended key. Extended keys are such keys that do not cause the <see cref="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND"/> message. This value can be used as mask to detect extended keys and it's also used for key-up event.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.CommandKey">
 <summary>Indicates comand key. Command keys are such keys that cause the <see cref="F:Tools.API.Messages.WindowMessages.WM_APPCOMMAND"/> message. This value can be used as mask to detect command keys and it's also used for key-up event.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.DvdMenu">
 <summary>The DVD menu button. Causes DVD menu (title/chapre selection to be show.)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Record">
 <summary>Record button. Immediately starts recording.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Play">
 <summary>Play button. Starts/resumes playing current title. Does not pause pleying.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Stop">
 <summary>Stop button. Stops playing.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Rewind">
 <summary>Rewind (RWD) button. Causes title to be played in reversed direction. Multiple preses increase play speed.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Forward">
 <summary>Forward (FWD) or fast forward (FFWD) button. Causes title to be played in increased speed in normal direction. Multiple presses increase speed.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.PreviousTrack">
 <summary>Previous track/skip back button. Skips to start of curent track/title or to previous track/title.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Pause">
 <summary>Pause button. Pauses playing of current title. Repeated pressing does not cause play to resume.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.NextTrack">
 <summary>Next track/skip forward button. Skips to next track/title.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.RecordedTV">
 <summary>Recorded TV button. Navigates to TV recorder section of application.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Guide">
 <summary>TV Guide / EPG button. Show television program / guide / EPG.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.TV">
 <summary>Live TV / TV jump button. Starts showig television (digital/analog/cable/sattelite etc.).</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.VolumeUp">
 <summary>Volume up button. Increases volume.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.VolumeDown">
 <summary>Volume down button. Decreases volume.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Back">
 <summary>Back button. Navigates backward in history.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Mute">
 <summary>Mute button. Toggle all sounds on/off.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.More">
 <summary>More / info button. Show information an/or gives access to tasks (i.e. context menu)</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.ChannelUp">
 <summary>Channel up button. Increases number of currently played TV/radio channel.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.ChannelDown">
 <summary>Channel down button. Decreases number of currently played TV/radio channel.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.eHome">
 <summary>eHome button. Usually the green one with Windows logo. Starts the Media Center application or gows to title page. Documentation states thet this button is not intended to be used by applications.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Red">
 <summary>Red button. Used while browsing teletext or can be used as software button.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Green">
 <summary>Green button. Used while browsing teletext or can be used as software button.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Yellow">
 <summary>Yellow button. Used while browsing teletext or can be used as software button.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Blue">
 <summary>Blue button. Used while browsing teletext or can be used as software button.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Teletext">
 <summary>Teletext button. Shows teletext.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.Standby">
 <summary>Standby button. Causes user-dependent action defined for standby button pressing to be taken. Note: Some remotes does not provide event for this button thought they have it.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.OEM1">
 <summary>Vendor-specific button 1</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.OEM2">
 <summary>Vendor-specific button 2</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.MyTV">
 <summary>My TV button. Navigates to My TV folder.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.MyVideos">
 <summary>My Videos button. Navigates to My Videos folder.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.MyPictures">
 <summary>My Pictures button. Navigates to My Pictures folder.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.MyMusic">
 <summary>My Music button. Navigates to My Music folder.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.DvdAngle">
 <summary>DVD angle button. Changes viewing angle.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.DvdAudio">
 <summary>DVD audio button. Changes audio language.</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.MediaCenterRemoteKey.DvdSubtitle">
 <summary>DVD subtitles button. Changes subtitles languages and toggles subtitles on/off.</summary>
</member>
<member name="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration">
 <summary>Specifies device registration</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.#ctor(Tools.API.RawInput.RAWINPUTDEVICE)">
 <summary>CTor from unmanaged data</summary>
 <param name="device">Unmanaged structure</param>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ToRAWINPUTDEVICE(System.Windows.Forms.IWin32Window,System.Boolean)">
 <summary>Converts this instance to <see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> with additional properties set</summary>
 <param name="Target">Sets <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Window"/> property</param>
 <param name="Unregister">Sets <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Remove"/> property</param>
 <returns><see cref="T:Tools.API.RawInput.RAWINPUTDEVICE"/> initialized by this instance</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.#ctor">
 <summary>Default CTor</summary>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.#ctor(Tools.DevicesT.RawInputT.UsagePages,System.Int32)">
 <summary>CTor from usage page and usage</summary>
 <param name="Usage">Top level collection Usage page for the raw input device. </param>
 <param name="UsagePage">Top level collection Usage for the raw input device. </param>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.#ctor(Tools.DevicesT.RawInputT.UsagePages)">
 <summary>CTor from usgae page</summary>
 <param name="UsagePage">Top level collection Usage for the raw input device.</param>
 <remarks>This CTor initializes <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> to true.</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.#ctor(Tools.DevicesT.RawInputT.UsagePages,System.Int32,Tools.DevicesT.RawInputT.BackgroundEvents)">
 <summary>CTor from usage page, usage and background mode</summary>
 <param name="Usage">Top level collection Usage page for the raw input device. </param>
 <param name="UsagePage">Top level collection Usage for the raw input device. </param>
 <param name="Background">Indicates if and when events will be received as well when windows events are regsitered for is not foreground</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Background"/> is not member of <see cref="T:Tools.DevicesT.RawInputT.BackgroundEvents"/></exception>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.#ctor(Tools.DevicesT.RawInputT.UsagePages,Tools.DevicesT.RawInputT.BackgroundEvents)">
 <summary>CTor from usgae page and background mode</summary>
 <param name="UsagePage">Top level collection Usage for the raw input device.</param>
 <remarks>This CTor initializes <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> to true.</remarks>
 <param name="Background">Indicates if and when events will be received as well when windows events are regsitered for is not foreground</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Background"/> is not member of <see cref="T:Tools.DevicesT.RawInputT.BackgroundEvents"/></exception>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Keyboard">
 <summary>Gets <see cref="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration"/> for keyboard</summary>
 <returns>New instance of <see cref="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration"/> initialized to the keyboard device <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Keyboard"/>).</returns>
 <remarks>Each call to this property returns new instance</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Mouse">
 <summary>Gets <see cref="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration"/> for mouse</summary>
 <returns>New instance of <see cref="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration"/> initialized to the mouse device <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> <see cref="F:Tools.DevicesT.RawInputT.UsagePages.GenericDesktopControls"/> and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> <see cref="F:Tools.DevicesT.RawInputT.Usages_GenericDesktopControls.Mouse"/>).</returns>
 <remarks>Each call to this property returns new instance</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.MediaCenterRemote">
 <summary>Gets array of <see cref="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration">RawInputDeviceRegistrations</see> initialized with usages (and usage pages) used by Windows Media Center infrared remote</summary>
 <returns>Each call to this property returns new array containing new instances of <see cref="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration"/>, so it is safe to change values in the array. Only <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> properties are initialized; all other have default values.</returns>
 <remarks>If you want to change value of the <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.BackgroundEvents"/> for entire array, you can use the <see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.SetBackgroundEvents``1(``0,Tools.DevicesT.RawInputT.BackgroundEvents)"/> extension function.
 <para>Returned array contains following entries (in form (usage page, usage)):
 (<see cref="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.MediaCenterRemoteUsagePage"/>, <see cref="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.MediaCenterRemoteUsage"/>), (<see cref="F:Tools.DevicesT.RawInputT.UsagePages.Consumer"/>, <see cref="F:Tools.DevicesT.RawInputT.Usages_Consumer.ConsumerControl"/>), (<see cref="F:Tools.DevicesT.RawInputT.UsagePages.Consumer"/>, <see cref="F:Tools.DevicesT.RawInputT.Usages_Consumer.NumericKeyPad"/>).
 </para>
 <para>This set of registrations does not give you access to buttons Up, Left, Right, Down, OK, Enter, Clear, *, # and 0-9. Use keyboard events to utilize these buttons. (Note: The buttons can be usually obtained via raw keyboard as well as via raw HID, but rwa HID interpretation is difficult.</para>
 <example>
 Folowing code demonstrates possible way of obtaining array of devices for registration for Media Center remote events and setting that events are to be fired even when window is not active at one line oc fode:
 <code language="vb">Imports <see cref="N:Tools.DevicesT.RawInputT">Tools.DevicesT.RawInputT</see>
 Dim mcr = <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.MediaCenterRemote">RawInputDeviceRegistration.MediaCenterRemote</see>.<see cref="M:Tools.DevicesT.RawInputT.RawInputExtensions.SetBackgroundEvents``1(``0,Tools.DevicesT.RawInputT.BackgroundEvents)">SetBackgroundEvents</see>(<see cref="F:Tools.DevicesT.RawInputT.BackgroundEvents.Background">BackgroundEvents.Background</see>)</code>
 </example></remarks>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.MediaCenterRemoteUsagePage">
 <summary>Additional non-standard usage page used by Windows Media Center infrared remote</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.MediaCenterRemoteUsage">
 <summary>Additional non-standard usage inside <see cref="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.MediaCenterRemoteUsagePage"/> usage page used by Windows Media Center infrared remote</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Flags">
 <summary>Registration flags</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration._Usage">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage">
 <summary>Gets or sets top level collection Usage for the raw input device.</summary>
 <returns>Top level collection Usage the raw input device events are or will be registered for.</returns>
 <value>Top level collection Usage for the raw input device to register events of. Setting this property to non-zero sets <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> to false.</value>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration._UsagePage">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage">
 <summary>Gets or sets top level collection Usage page for the raw input device. </summary>
 <returns>Top level collection Usage page the raw input device events are or will be registered for. </returns>
 <value>Top level collection Usage page for the raw input device to registere events of. </value>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage">
 <summary>Gets or sets value indicating that all devices from specified <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> will be registered</summary>
 <returns>Value indicationg if whole page is or will be registered</returns>
 <value>Setting this property to true sets <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> to zero and <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> to false.</value>
 <remarks>When registering more items at once, specific usages from whole usage page registered can be excluded by adding another <see cref="T:Tools.DevicesT.RawInputT.RawInputDeviceRegistration"/>(s) to collection with same <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> specified and specifying <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Usage"/> to exlude.</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude">
 <summary>Gets value indication if this insatance specifies exlusion from registered devices collection</summary>
 <returns>True if this instance specifies exlusion; false otherwise</returns>
 <value>Settting this value to true sets <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> to false</value>
 <remarks>Exclusion instances can be used only in collection with another instances that specifies <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.WholePage"/> and are used to exclude specific devices from whole <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.UsagePage"/> registered.</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Remove">
 <summary>Gets value indicating if the remove flag was set on original raw input Win32 RAWINPUTDEVICE structure</summary>
 <returns>True if the flag was set</returns>
 <remarks>This property is provided only for obserwing flag from original unmanaged structure. It is read-only and is not read by registration/unregistration process (but it sets it).</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.GetFlag(Tools.API.RawInput.RAWINPUTDEVICEFlags)">
 <summary>Gets value of given flag from <see cref="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Flags"/></summary>
 <param name="Flag">Flag to get value of</param>
 <returns>True if flag <paramref name="Flag"/>is set, false if it is not</returns>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.SetFlag(Tools.API.RawInput.RAWINPUTDEVICEFlags,System.Boolean)">
 <summary>Sets or erases given flag in <see cref="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Flags"/></summary>
 <param name="Flag">Flag to set or erase</param>
 <param name="Value">True to set the flag, flase to erase it</param>
</member>
<member name="F:Tools.DevicesT.RawInputT.RawInputDeviceRegistration._Window">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Window"/> property</summary>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Window">
 <summary>Gets window events was registered for</summary>
 <returns>Window events was registered for; by defualt this propert returns null.</returns>
 <remarks>This property cannot be set by user and is intended onyl for observing of value returned from unmanaged code. It is not read by registration/unregistration process (but it sets it).</remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages">
 <summary>Gets or sets value indicationg if this registration disbles so-called legacy message for whole application from device this instance registers.</summary>
 <returns>True when legacy messages are/will be disabled</returns>
 <value>True to deisable legacy messages; false not to disable legacy messages.</value>
 <remarks>This property has no meaning when <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Exclude"/> is true, device being registered is neither mouse nor keyboard or when this instance will be used for unregistration.
 <paramref>Setting this property to ture effectivelly stops raising standard events raised by controls and forms for specified device.</paramref>
 <para>Setting this proprty to false, sets <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ApplicationKeys"/> to false</para></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.BackgroundEvents">
 <summary>Gets or sets value indicationg if and when this registration will have efect even when window it is registered for is not active</summary>
 <returns>Background events receive mode. This property may return <see cref="F:Tools.DevicesT.RawInputT.BackgroundEvents.Background"/> Or <see cref="F:Tools.DevicesT.RawInputT.BackgroundEvents.BackgroundWhenNotHandled"/> when this instance was initialized from unmanaged data.</returns>
 <value>Background events receive mode to register for. Value being set must be member of <see cref="T:Tools.DevicesT.RawInputT.BackgroundEvents"/> enumeration.</value>
 <remarks><see cref="F:Tools.DevicesT.RawInputT.BackgroundEvents.BackgroundWhenNotHandled"/> works only on Vista and later.</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.DevicesT.RawInputT.BackgroundEvents"/></exception>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.CaptureMouse">
 <summary>Gets or sets value indicating if mouse is captured</summary>
 <returns>True when mouse is captured - click ouside of active windows does not activate the other window; false otherwise</returns>
 <value>True to prevent mouse click to another window from activating it; false to allow it</value>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.ApplicationKeys">
 <summary>Gets value indicating if application command keys avents are handled</summary>
 <returns>True when application command keys events are generated.</returns>
 <value>True to generate events for application command keys.</value>
 <remarks>This property works only for XP SP1 and later.
 <para>This property is meningful onyl fr keyboard devices.</para>
 <para>This property cannot be set to true when <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> is false. This property can return true even when <see cref="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.DisableLegacyMessages"/> si false in case this insatnce was created from unmanaged data.</para></remarks>
</member>
<member name="P:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.HotKeys">
 <summary>gets or sets value indicating if application-defined keyboard device hotkeys are handled</summary>
 <returns>True if application-defined keyboard device hotkeys are handled; false when thay are not</returns>
 <value>False to disable handling of application-defined keyboard device hokey. Default value of this poperty is true.</value>
 <remarks>System hotkeys such as ALT+TAB and CTRL+ALT+DEL are still handled.</remarks>
</member>
<member name="E:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Changed">
 <summary>Raised when value of member changes</summary>
 <remarks><paramref name="e"/>Should contain additional information that can be used in event-handling code (e.g. use <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> class)</remarks>
</member>
<member name="M:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.OnChanged(Tools.IReportsChange.ValueChangedEventArgsBase)">
 <summary>Raises the <see cref="E:Tools.DevicesT.RawInputT.RawInputDeviceRegistration.Changed"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method in order the event to be raised.</remarks>
</member>
<member name="T:Tools.DevicesT.RawInputT.BackgroundEvents">
 <summary>Possible modes of catching raw input events related to whether window is in foreground or not</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.BackgroundEvents.ForegroundOnly">
 <summary>Events are received only when window is active</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.BackgroundEvents.Background">
 <summary>Events are received not depending on if window is active</summary>
</member>
<member name="F:Tools.DevicesT.RawInputT.BackgroundEvents.BackgroundWhenNotHandled">
 <summary>Events are received when window is active. When window is not active, events are received only when tehy are not received by another active window (system-wide). This value works only in Vista and later.</summary>
</member>
<member name="T:Tools.DevicesT.LowLevelKeyboardHook">
 <summary>Allows handling system-wide low-level keyboard hooks</summary>
 <remarks>It is highly recomended not to install multiple hooks of same type in one application and to keep hook-handling code as quick as possible. You can significantly slow down user typing experience.
 <para>This class uses Win32 API function SetWindowsHookEx(WH_KEYBOARD_LL).</para></remarks>
 <seealso cref="T:Tools.DevicesT.LowLevelMouseHook"/>
</member>
<member name="M:Tools.DevicesT.LowLevelKeyboardHook.#ctor">
 <summary>Default CTor</summary>
</member>
<member name="M:Tools.DevicesT.LowLevelKeyboardHook.#ctor(System.Boolean)">
 <summary>CTor with possibility of immediate hook activation</summary>
 <param name="RegisterImmediatelly">True to register hook immediatelly</param>
 <exception cref="T:Tools.API.Win32APIException">An error ocured while obtaining the hook.</exception>
</member>
<member name="M:Tools.DevicesT.LowLevelKeyboardHook.OnKeyEvent(Tools.DevicesT.LowLevelKeyEventArgs)">
 <summary>Called when low-level keyboard hok is processed, raises the <see cref="E:Tools.DevicesT.LowLevelKeyboardHook.KeyEvent"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note to inheritors: Base class method must be called in order the <see cref="E:Tools.DevicesT.LowLevelKeyboardHook.KeyEvent"/> event to be raised.
 <para>Keep event-handling code as shor and as quick as possible or you can significantly involve user experience while typing. System may also chose to skip your hook when it takes too long to be procesed.</para></remarks>
</member>
<member name="E:Tools.DevicesT.LowLevelKeyboardHook.KeyEvent">
 <summary>Raised when class processes low-level keyboard hook callback</summary>
 <remarks>Keep event-handling code as shor and as quick as possible or you can significantly involve user experience while typing. System may also chose to skip your hook when it takes too long to be procesed.</remarks>
</member>
<member name="M:Tools.DevicesT.LowLevelKeyboardHook.HookProc(System.Int32,System.IntPtr,System.IntPtr)">
 <summary>Application-defined or library-defined callback function used with the SetWindowsHookEx function. The system calls this function every time a new keyboard input event is about to be posted into a thread input queue. The keyboard input can come from the local keyboard driver or from calls to the keybd_event function. If the input comes from a call to keybd_event, the input was "injected". However, the WH_KEYBOARD_LL hook is not injected into another process. Instead, the context switches back to the process that installed the hook and it is called in its original context. Then the context switches back to the application that generated the event.</summary>
 <param name="nCode">[in] Specifies a code the hook procedure uses to determine how to process the message. If nCode is less than zero, the hook procedure must pass the message to the CallNextHookEx function without further processing and should return the value returned by CallNextHookEx.</param>
 <param name="wParam">[in] Specifies the identifier of the keyboard message. This parameter can be one of the following messages:
 WM_KEYDOWN, WM_KEYUP, WM_SYSKEYDOWN, or WM_SYSKEYUP. </param>
 <param name="lParam">[in] Pointer to a KBDLLHOOKSTRUCT structure. </param>
 <returns>If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx.
 <para>If nCode is greater than or equal to zero, and the hook procedure did not process the message, it is highly recommended that you call CallNextHookEx and return the value it returns; otherwise, other applications that have installed WH_KEYBOARD_LL hooks will not receive hook notifications and may behave incorrectly as a result.
 If the hook procedure processed the message, it may return a nonzero value to prevent the system from passing the message to the rest of the hook chain or the target window procedure. </para></returns>
 <remarks><para>An application installs the hook procedure by specifying the WH_KEYBOARD_LL hook type and a pointer to the hook procedure in a call to the SetWindowsHookEx function.</para>
 <para>This hook is called in the context of the thread that installed it. The call is made by sending a message to the thread that installed the hook. Therefore, the thread that installed the hook must have a message loop.</para>
 <para>The hook procedure should process a message in less time than the data entry specified in the LowLevelHooksTimeout value in the following registry key:</para>
 <para>HKEY_CURRENT_USER\Control Panel\Desktop</para>
 <para>The value is in milliseconds. If the hook procedure does not return during this interval, the system will pass the message to the next hook.</para>
 <para>Note that debug hooks cannot track this type of hook.</para></remarks>
</member>
<member name="P:Tools.DevicesT.LowLevelKeyboardHook.HandledHookType">
 <summary>If overriden in derived class gets type of hook represented by derived class</summary>
 <returns>One of values accepted for SetWindowsHookEx idHook parameter</returns>
</member>
<member name="M:Tools.DevicesT.LowLevelKeyboardHook.GetModuleHandle">
 <summary>Gets module handle pased to hMod parameter of SetWindowsHookEx Win32 API function</summary>
 <returns>This implementation uses <see cref="M:Tools.API.Hooks.Win32Hook.GetModuleHandleFromType(System.Type)"/></returns>
 <seelaso cref="M:Tools.API.Hooks.Win32Hook.GetModuleHandleFromType(System.Type)"/>
</member>
<member name="T:Tools.DevicesT.LowLevelKeyEventArgs">
 <summary>Event arguments for low-level keyboard hook</summary>
</member>
<member name="M:Tools.DevicesT.LowLevelKeyEventArgs.#ctor(Tools.DevicesT.LowLevelKeyboardEvent,Tools.API.Hooks.Win32Hooks.KBDLLHOOKSTRUCT)">
 <summary>CTor from keyboard action and parameters</summary>
 <param name="Action">Action taken</param>
 <param name="Parameters">Action parameters</param>
</member>
<member name="F:Tools.DevicesT.LowLevelKeyEventArgs._Action">
 <summary>Contains value of the <see cref="P:Tools.DevicesT.LowLevelKeyEventArgs.Action"/> property</summary>
</member>
<member name="F:Tools.DevicesT.LowLevelKeyEventArgs.Parameters">
 <summary>Action parameters</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelKeyEventArgs.Action">
 <summary>Indicates action which occured on keyboard</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelKeyEventArgs.Key">
 <summary>Gets key code of key that was pressed.</summary>
 <remarks>Value of this property never contains combining keys <see cref="F:System.Windows.Forms.Keys.Control"/>, <see cref="F:System.Windows.Forms.Keys.Shift"/> and <see cref="F:System.Windows.Forms.Keys.Alt"/>.
 Low-level keyboar messages supports onyl ALT combining key. Its state can be obtained via <see cref="P:Tools.DevicesT.LowLevelKeyEventArgs.AltState"/></remarks>
</member>
<member name="P:Tools.DevicesT.LowLevelKeyEventArgs.ScanCode">
 <summary>Gets hardware scan code of key being pressed or released</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelKeyEventArgs.AltState">
 <summary>Indicates if the ALT key was pressed</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelKeyEventArgs.IsExtended">
 <summary>Indicates if <see cref="P:Tools.DevicesT.LowLevelKeyEventArgs.Key"/> is extended key (such as numpad key or F key)</summary>
</member>
<member name="P:Tools.DevicesT.LowLevelKeyEventArgs.IsInjected">
 <summary>Indicates if kay was injected</summary>
</member>
<member name="T:Tools.DevicesT.LowLevelKeyboardEvent">
 <summary>Keyboar event that may occure with <see cref="T:Tools.DevicesT.LowLevelKeyboardHook"/></summary>
</member>
<member name="F:Tools.DevicesT.LowLevelKeyboardEvent.KeyUp">
 <summary>Speifies KeyUp event (<see cref="F:Tools.API.Messages.WindowMessages.WM_KEYUP"/>)</summary>
</member>
<member name="F:Tools.DevicesT.LowLevelKeyboardEvent.KeyDown">
 <summary>Speifies KeyDown event (<see cref="F:Tools.API.Messages.WindowMessages.WM_KEYDOWN"/>)</summary>
</member>
<member name="F:Tools.DevicesT.LowLevelKeyboardEvent.SysKeyDown">
 <summary>Speifies SysKeyUp event (<see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYUP"/>)</summary>
</member>
<member name="F:Tools.DevicesT.LowLevelKeyboardEvent.SysKeyUp">
 <summary>Speifies SysKeyDown event (<see cref="F:Tools.API.Messages.WindowMessages.WM_SYSKEYDOWN"/>)</summary>
</member>
<member name="T:Tools.DevicesT.Keyboard">
 <summary>Contains methods for working with keyboard</summary>
</member>
<member name="P:Tools.DevicesT.Keyboard.CarretBlinkTime">
 <summary>Gets carret (text cursor) blink time in milliseconds</summary>
 <returns>Carret blink time in milliseconds</returns>
 <exception cref="T:Tools.API.Win32APIException">API call failed</exception>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="M:Tools.DevicesT.Keyboard.#ctor">
 <summary>Private CTor to achieve pseudo-static class</summary>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="P:Tools.DevicesT.Keyboard.KeyStatus(System.Windows.Forms.Keys)">
 <summary>Gets state of particular key.</summary>
 <param name="Key">Key to get status of. Do not use shift keys (<see cref="F:System.Windows.Forms.Keys.Shift"/>, <see cref="F:System.Windows.Forms.Keys.Alt"/>, <see cref="F:System.Windows.Forms.Keys.Control"/>). <see cref="F:System.Windows.Forms.Keys.ShiftKey"/>, <see cref="F:System.Windows.Forms.Keys.Menu"/>, <see cref="F:System.Windows.Forms.Keys.ControlKey"/>, <see cref="F:System.Windows.Forms.Keys.RShiftKey"/>, <see cref="F:System.Windows.Forms.Keys.LShiftKey"/>, <see cref="F:System.Windows.Forms.Keys.LMenu"/>, <see cref="F:System.Windows.Forms.Keys.RMenu"/>, <see cref="F:System.Windows.Forms.Keys.LControlKey"/> and <see cref="F:System.Windows.Forms.Keys.RControlKey"/> are alloved.</param>
 <returns>True if key is pressed at time when the property is being got.</returns>
 <remarks>This function can be also use with mouse buttons and respects situation when buttons are swapped.
 To get state of togglable keys (<see cref="F:System.Windows.Forms.Keys.CapsLock"/>, <see cref="F:System.Windows.Forms.Keys.Scroll"/>, <see cref="F:System.Windows.Forms.Keys.NumLock"/>; this function returns actual Up/Down state of them rather then toggle on/off state) use <see cref="P:Microsoft.VisualBasic.Devices.Keyboard.CapsLock"/>, <see cref="P:Microsoft.VisualBasic.Devices.Keyboard.ScrollLock"/> and <see cref="P:Microsoft.VisualBasic.Devices.Keyboard.NumLock"/>. The <see cref="T:Microsoft.VisualBasic.Devices.Keyboard"/> class also allows you to get state of shif keys (<see cref="F:System.Windows.Forms.Keys.Shift"/>, <see cref="F:System.Windows.Forms.Keys.Control"/> and <see cref="F:System.Windows.Forms.Keys.Alt"/>).</remarks>
</member>
<member name="M:Tools.DevicesT.Keyboard.GetLowLevelHook">
 <summary>Registers low-level keyboard hook</summary>
 <returns><see cref="T:Tools.DevicesT.LowLevelKeyboardHook"/> class instance ready to fire low-level keyboard hook events</returns>
</member>
<member name="M:Tools.DevicesT.Keyboard.GetAsyncLowLevelHook">
 <summary>Register low-level keyboard hook with ecents fired in it's own thread</summary>
 <returns><see cref="T:Tools.DevicesT.LowLevelKeyboardHook"/> class instance ready to fire low-level keyboard hook events in different thread than calling thread</returns>
</member>
<member name="T:Tools.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="F:Tools.RegistryT.RegistryT.HKEY_CLASSES_ROOT">
 <summary>Represents <see cref="F:Microsoft.Win32.Registry.ClassesRoot"/> key</summary>
</member>
<member name="F:Tools.RegistryT.RegistryT.HKEY_CURRENT_USER">
 <summary>Represents <see cref="F:Microsoft.Win32.Registry.CurrentUser"/> key</summary>
</member>
<member name="F:Tools.RegistryT.RegistryT.HKEY_LOCAL_MACHINE">
 <summary>Represents <see cref="F:Microsoft.Win32.Registry.LocalMachine"/> key</summary>
</member>
<member name="F:Tools.RegistryT.RegistryT.HKEY_USERS">
 <summary>Represents <see cref="F:Microsoft.Win32.Registry.Users"/> key</summary>
</member>
<member name="F:Tools.RegistryT.RegistryT.HKEY_CURRENT_CONFIG">
 <summary>Represents <see cref="F:Microsoft.Win32.Registry.CurrentConfig"/> key</summary>
</member>
<member name="F:Tools.RegistryT.RegistryT.HKEY_DYN_DATA">
 <summary>Represents <see cref="F:Microsoft.Win32.Registry.DynData"/> key</summary>
 <remarks>Obsolete. SUpported only on Win9x systems where neither .NET Framework 4 nor ĐTools are supported. Use <see cref="F:Tools.RegistryT.RegistryT.HKEY_PERFORMANCE_DATA"/> insted on NT-based systems.</remarks>
 <version version="1.5.3">This constant was made obsolete and hidden because HKEY_DYN_DATA registry key is supported only on Win9x system as ĐTools are now compiled for .NET Framework 4 ehich is not supported on Windows 9x.</version>
</member>
<member name="F:Tools.RegistryT.RegistryT.HKEY_PERFORMANCE_DATA">
 <summary>Represents <see cref="F:Microsoft.Win32.Registry.PerformanceData"/> key</summary>
</member>
<member name="M:Tools.RegistryT.RegistryT.SplitKeyPath(System.String)">
 <summary>Splits full registry key path to base registry key and path of subkey</summary>
 <param name="KeyPath">Full registry key path. Parts separated by backslashes (\), starting with base key name</param>
 <returns>Pair of <see cref="T:Microsoft.Win32.RegistryKey"/> representing base key and string representing path of sub key. If path consists only of base key name, sub-key path is null.</returns>
 <exception cref="T:System.ArgumentException">First segment of <paramref name="KeyPath"/> is not one of well-known registry base keys (as defined by HKEY_ constants from in <see cref="T:Tools.RegistryT.RegistryT"/>)</exception>
 <exception cref="T:System.NotSupportedException">First segment of <paramref name="KeyPath"/> is HKEY_DYN_DATA (see <see cref="F:Tools.RegistryT.RegistryT.HKEY_DYN_DATA"/>).</exception>
 <version version="1.5.3">Removed support for HKEY_DYN_DATA registry hive. It's bacuse that hive is supported only on Win9x systems and ĐTools are now compiled for .NET Framework 4 which is not supported on Win9x system.</version>
</member>
<member name="M:Tools.RegistryT.RegistryT.OpenKey(System.String,System.Boolean)">
 <summary>Retrieves a specified registry key.</summary>
 <param name="KeyPath">Full path of the key to open.</param>
 <param name="writable">Set to true if you need write access to the key.</param>
 <returns>The subkey requested, or null if the operation failed.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="KeyPath"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="KeyPath"/> (excluding first segment) is longer than the maximum length allowed (255 characters).</exception>
 <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to access the registry key in the specified mode.</exception>
</member>
<member name="M:Tools.RegistryT.RegistryT.OpenKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck)">
 <summary>Retrieves a specified registry key.</summary>
 <param name="KeyPath">Full path of the key to open.</param>
 <param name="permissionCheck">One of the <see cref="T:Microsoft.Win32.RegistryKeyPermissionCheck"/> values that specifies whether the key is opened for read or read/write access.</param>
 <returns>The subkey requested, or null if the operation failed.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="KeyPath"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="KeyPath"/> (excluding first segment) is longer than the maximum length allowed (255 characters).</exception>
 <exception cref="T:System.Security.SecurityException">The user does not have the permissions required to access the registry key in the specified mode.</exception>
</member>
<member name="M:Tools.RegistryT.RegistryT.OpenKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,System.Security.AccessControl.RegistryRights)">
 <summary>Retrieves a specified registry key.</summary>
 <param name="KeyPath">Full path of the key to open.</param>
 <param name="permissionCheck">One of the <see cref="T:Microsoft.Win32.RegistryKeyPermissionCheck"/> values that specifies whether the key is opened for read or read/write access.</param>
 <param name="rights"> A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights"/> values that specifies the desired security access.</param>
 <returns>The subkey requested, or null if the operation failed.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="KeyPath"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="KeyPath"/> (excluding first segment) is longer than the maximum length allowed (255 characters).</exception>
 <exception cref="T:System.Security.SecurityException"><paramref name="rights"/> includes invalid registry rights values.  -or- The user does not have the requested permissions.</exception>
</member>
<member name="T:Tools.ResourcesT.ExceptionsWin">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.AdditionalEventsHaveBeenAlreadyCalled">
<summary>
Looks up a localized string similar to 'Additional events have been already called.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.CannotConvertRAWINPUTMarshallingToRAWINPUTNonMarshalling">
<summary>
Looks up a localized string similar to 'Cannot convert RAWINPUT_Marshalling to RAWINPUT_NonMarshalling when it contains HID data'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.CannotCreateLinkFromFile0">
<summary>
Looks up a localized string similar to 'Cannot create link from file {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.DevicesCanBeExcludedOnlyFromUsagePagesBeingRegistered">
<summary>
Looks up a localized string similar to 'Devices can be excluded only from usage pages being registered in same batch.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.DeviceWithExcludeSetToTrueMustHaveUsageSetToZero">
<summary>
Looks up a localized string similar to 'Device with Exclude set to true must have Usage set to zero.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.GivenOwnerHasAlreadyAttachedRawInputEventProvider">
<summary>
Looks up a localized string similar to 'Given owner has already attached RawInputEventProvider'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.HookIsAlreadyRegisteredForThisInstance">
<summary>
Looks up a localized string similar to 'Hook is already registered for this instance.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.HookIsNotRegisteredForThisInstance">
<summary>
Looks up a localized string similar to 'Hook is not registered for this instance'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.HotkeyMustIncludeAModifierKey">
<summary>
Looks up a localized string similar to 'Hotkey must include a modifier key.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.InstanceAPIMethodsAreNotAllowed">
<summary>
Looks up a localized string similar to 'Instance API methods are not allowed.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.IsInvalidKeyKeysMustBeWithinRangeFrom0To255">
<summary>
Looks up a localized string similar to '{0} is invalid key. Keys must be within range from 0 to 255.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.IsUnknownRegistryBaseKey">
<summary>
Looks up a localized string similar to '{0} is unknown registry base key'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.LegacyMessagesCanBeDisabledOnlyForKeyboardAndMouseDevice">
<summary>
Looks up a localized string similar to 'Legacy messages can be disabled only for keyboard and mouse device, or when whole generic desktop controls usage page is being registered.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.LenghtOfOriginalRawItemsCountMustBe1AndOriginalRawItemSize">
<summary>
Looks up a localized string similar to 'Lenght of Original.RawItemsCount must be 1 and Original.RawItemSize must be 2 or 3.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.MessageTargetWindowHandleMustBeSameAsHandleOfWindow">
<summary>
Looks up a localized string similar to 'Message target window handle must be same as handle of window this instance was created for'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.OwherHandleHasChanged">
<summary>
Looks up a localized string similar to 'Owher handle has changed.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.RawDeviceNameHasInvalidFormatItShouldConsistOf4Parte">
<summary>
Looks up a localized string similar to 'Raw device name has invalid format. It should consist of 4 parte separated by #.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.RawDeviceNameHasUnexpectedFormatItMustStartWith0">
<summary>
Looks up a localized string similar to 'Raw device name has unexpected format. It must start with &quot;{0}&quot;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.SourceOfWindowMessageEvntMustBeSameAsOwnerOwThisInstance">
<summary>
Looks up a localized string similar to 'Source of window message evnt must be same as owner ow this instance'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.TheCalassGuidPartOfDeviceNameIsInInvalidFormatSeeInnerException">
<summary>
Looks up a localized string similar to 'The calass guid part of device name is in invalid format. See InnerException for details.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.UnableToObtainHandleToSystemMenu">
<summary>
Looks up a localized string similar to 'Unable to obtain handle to system menu.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.UnknownRawInputDeviceType0">
<summary>
Looks up a localized string similar to 'Unknown raw input device type {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.ExceptionsWin.WhenOnlyOneDeviceIsBeingUnRegisteredItCannotHaveExclude">
<summary>
Looks up a localized string similar to 'When only one device is being (un)registered, it cannot have Exclude set to true.'.
</summary>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.AdditionalEventsHaveBeenAlreadyCalledFormat">
<summary>
The stub formatting method returning the AdditionalEventsHaveBeenAlreadyCalled property value.
</summary>
<returns>The AdditionalEventsHaveBeenAlreadyCalled property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.CannotConvertRAWINPUTMarshallingToRAWINPUTNonMarshallingFormat">
<summary>
The stub formatting method returning the CannotConvertRAWINPUTMarshallingToRAWINPUTNonMarshalling property value.
</summary>
<returns>The CannotConvertRAWINPUTMarshallingToRAWINPUTNonMarshalling property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.CannotCreateLinkFromFile0Format(System.Object)">
<summary>
Formats a localized string similar to 'Cannot create link from file {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.DevicesCanBeExcludedOnlyFromUsagePagesBeingRegisteredFormat">
<summary>
The stub formatting method returning the DevicesCanBeExcludedOnlyFromUsagePagesBeingRegistered property value.
</summary>
<returns>The DevicesCanBeExcludedOnlyFromUsagePagesBeingRegistered property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.DeviceWithExcludeSetToTrueMustHaveUsageSetToZeroFormat">
<summary>
The stub formatting method returning the DeviceWithExcludeSetToTrueMustHaveUsageSetToZero property value.
</summary>
<returns>The DeviceWithExcludeSetToTrueMustHaveUsageSetToZero property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.GivenOwnerHasAlreadyAttachedRawInputEventProviderFormat">
<summary>
The stub formatting method returning the GivenOwnerHasAlreadyAttachedRawInputEventProvider property value.
</summary>
<returns>The GivenOwnerHasAlreadyAttachedRawInputEventProvider property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.HookIsAlreadyRegisteredForThisInstanceFormat">
<summary>
The stub formatting method returning the HookIsAlreadyRegisteredForThisInstance property value.
</summary>
<returns>The HookIsAlreadyRegisteredForThisInstance property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.HookIsNotRegisteredForThisInstanceFormat">
<summary>
The stub formatting method returning the HookIsNotRegisteredForThisInstance property value.
</summary>
<returns>The HookIsNotRegisteredForThisInstance property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.HotkeyMustIncludeAModifierKeyFormat">
<summary>
The stub formatting method returning the HotkeyMustIncludeAModifierKey property value.
</summary>
<returns>The HotkeyMustIncludeAModifierKey property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.InstanceAPIMethodsAreNotAllowedFormat">
<summary>
The stub formatting method returning the InstanceAPIMethodsAreNotAllowed property value.
</summary>
<returns>The InstanceAPIMethodsAreNotAllowed property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.IsInvalidKeyKeysMustBeWithinRangeFrom0To255Format(System.Object)">
<summary>
Formats a localized string similar to '{0} is invalid key. Keys must be within range from 0 to 255.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.IsUnknownRegistryBaseKeyFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} is unknown registry base key'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.LegacyMessagesCanBeDisabledOnlyForKeyboardAndMouseDeviceFormat">
<summary>
The stub formatting method returning the LegacyMessagesCanBeDisabledOnlyForKeyboardAndMouseDevice property value.
</summary>
<returns>The LegacyMessagesCanBeDisabledOnlyForKeyboardAndMouseDevice property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.LenghtOfOriginalRawItemsCountMustBe1AndOriginalRawItemSizeFormat">
<summary>
The stub formatting method returning the LenghtOfOriginalRawItemsCountMustBe1AndOriginalRawItemSize property value.
</summary>
<returns>The LenghtOfOriginalRawItemsCountMustBe1AndOriginalRawItemSize property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.MessageTargetWindowHandleMustBeSameAsHandleOfWindowFormat">
<summary>
The stub formatting method returning the MessageTargetWindowHandleMustBeSameAsHandleOfWindow property value.
</summary>
<returns>The MessageTargetWindowHandleMustBeSameAsHandleOfWindow property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.OwherHandleHasChangedFormat">
<summary>
The stub formatting method returning the OwherHandleHasChanged property value.
</summary>
<returns>The OwherHandleHasChanged property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.RawDeviceNameHasInvalidFormatItShouldConsistOf4ParteFormat">
<summary>
The stub formatting method returning the RawDeviceNameHasInvalidFormatItShouldConsistOf4Parte property value.
</summary>
<returns>The RawDeviceNameHasInvalidFormatItShouldConsistOf4Parte property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.RawDeviceNameHasUnexpectedFormatItMustStartWith0Format(System.Object)">
<summary>
Formats a localized string similar to 'Raw device name has unexpected format. It must start with &quot;{0}&quot;.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.SourceOfWindowMessageEvntMustBeSameAsOwnerOwThisInstanceFormat">
<summary>
The stub formatting method returning the SourceOfWindowMessageEvntMustBeSameAsOwnerOwThisInstance property value.
</summary>
<returns>The SourceOfWindowMessageEvntMustBeSameAsOwnerOwThisInstance property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.TheCalassGuidPartOfDeviceNameIsInInvalidFormatSeeInnerExceptionFormat">
<summary>
The stub formatting method returning the TheCalassGuidPartOfDeviceNameIsInInvalidFormatSeeInnerException property value.
</summary>
<returns>The TheCalassGuidPartOfDeviceNameIsInInvalidFormatSeeInnerException property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.UnableToObtainHandleToSystemMenuFormat">
<summary>
The stub formatting method returning the UnableToObtainHandleToSystemMenu property value.
</summary>
<returns>The UnableToObtainHandleToSystemMenu property value.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.UnknownRawInputDeviceType0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unknown raw input device type {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.ExceptionsWin.WhenOnlyOneDeviceIsBeingUnRegisteredItCannotHaveExcludeFormat">
<summary>
The stub formatting method returning the WhenOnlyOneDeviceIsBeingUnRegisteredItCannotHaveExclude property value.
</summary>
<returns>The WhenOnlyOneDeviceIsBeingUnRegisteredItCannotHaveExclude property value.</returns>
</member>
</members>
</doc>
