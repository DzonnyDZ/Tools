<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tools.Text.Unicode
</name>
</assembly>
<members>
<member name="T:Tools.TextT.UnicodeT.CharsLine">
 <summary>Provides characters for single llines of characters</summary>
 <remarks>
 This class is not CLS-compliant and no CLS-compliant alternative is provided.
 <para>This class is intended to be used with charmap-like controls that display characters in a form of grid.</para>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.#ctor(Tools.TextT.UnicodeT.CharsSource,System.Int32)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> class</summary>
 <param name="source">Source data for the line</param>
 <param name="index">Line index in <paramref name="source"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0 or greater than ore equal to number of lines in <paramref name="source"/>.</exception>
</member>
<member name="F:Tools.TextT.UnicodeT.CharsLine.instCount">
 <summary>Counts number of instances created - debug-only</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLine.Source">
 <summary>Gets source data are being provided for</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLine.Index">
 <summary>Gets index of line in source this instance provides data from</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLine.FirstIndex">
 <summary>Gets index of first character on this line in <see cref="P:Tools.TextT.UnicodeT.CharsLine.Source"/>.<see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars">Chars</see></summary>
 <remarks>The value can be negative up to -(<see cref="P:Tools.TextT.UnicodeT.CharsLine.Source"/>.<see cref="P:Tools.TextT.UnicodeT.CharsSource.Columns">Columns</see> - 1). It can also be higher than number of characters in <see cref="P:Tools.TextT.UnicodeT.CharsLine.Source"/>.<see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars">Chars</see> up to <see cref="P:Tools.TextT.UnicodeT.CharsLine.Source"/>.<see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars">Chars</see>.<see cref="P:Tools.TextT.UnicodeT.CharsList.Count">Count</see> - 1 + <see cref="P:Tools.TextT.UnicodeT.CharsLine.Source"/>.<see cref="P:Tools.TextT.UnicodeT.CharsSource.Columns">Columns</see>. For therese indexes <see cref="P:Tools.TextT.UnicodeT.CharsLine.Item(System.Int32)"/> returns null. Such index are also included in enumeration.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="T:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator">
 <summary>Implements <see cref="T:System.Collections.Generic.IEnumerator`1"/> for <see cref="T:Tools.TextT.UnicodeT.CharsLine"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.for">
 <summary>The <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> instance to enumerate</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.#ctor(Tools.TextT.UnicodeT.CharsLine)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator"/> class</summary>
 <param name="for">The <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> to enumerate</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="for"/> is null</exception>
</member>
<member name="F:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.index">
 <summary>Current index to <see cref="F:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.for"/></summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
 <exception cref="T:System.InvalidOperationException">Enumeration has not started yet or it has already finished</exception>
 <exception cref="T:System.ObjectDisposedException">Enumerator was disposed</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.IEnumerator_Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns> 
 <exception cref="T:System.InvalidOperationException">Enumeration has not started yet or it has already finished</exception>
 <exception cref="T:System.ObjectDisposedException">Enumerator was disposed</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.ObjectDisposedException">Enumerator was disposed</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.ObjectDisposedException">Enumerator was disposed</exception>
</member>
<member name="F:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.Dispose(System.Boolean)">
 <summary>Implements <see cref="M:System.IDisposable.Dispose"/></summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.CharsLineEnumerator.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLine.Characters">
 <summary>Gets all code points in this line as array</summary>
 <remarks>For aligned lines, characters that are before start of source and after end of source are null.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>
 true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false. 
 This implementation returns true only when <paramref name="obj"/> is <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> which belongs to the same <see cref="T:Tools.TextT.UnicodeT.CharsSource"/> as this instance and has same <see cref="P:Tools.TextT.UnicodeT.CharsLine.Index"/>.
 </returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLine.CopyTo(System.Nullable{System.UInt32}[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
 <param name="index">The zero-based index in array at which copying begins. </param>
 <exception cref="T:System.ArgumentNullException">array is null. </exception>
 <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
 <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
 <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> cannot be cast automatically to the type of the destination array. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLine.Size">
 <summary>Gets the number of characters contained in this line.</summary>
 <returns>The number of characters in this line which equals to <see cref="P:Tools.TextT.UnicodeT.CharsLine.Source"/>.<see cref="P:Tools.TextT.UnicodeT.CharsSource.Columns"/>.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLine.Item(System.Int32)">
 <summary>Gets value on specified index</summary>
 <param name="index">Index to obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero or greater than or equal to <see cref="P:Tools.TextT.UnicodeT.CharsLine.Size"/>.</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.CharsLineTypeDescriptionProvider">
 <summary>A type description provider of <see cref="T:Tools.TextT.UnicodeT.CharsLine"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
 <summary>Gets a custom type descriptor for the given type and object.</summary>
 <returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</returns>
 <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
 <param name="instance">An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptionProvider.IsSupportedType(System.Type)">
 <summary>Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers. </summary>
 <returns>true if 
 <paramref name="type" /> is compatible with the type description and its chain of type description providers; otherwise, false. </returns>
 <param name="type">The type to test for compatibility.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="type" /> is null.</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.CharsLineTypeDescriptor">
 <summary>A type descriptor for <see cref="T:Tools.TextT.UnicodeT.CharsLine"/></summary>
 <remarks>Main putpose is to provide properties for individual columns (indexes)</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.instance">
 <summary>Instance of <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> being described</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.#ctor(Tools.TextT.UnicodeT.CharsLine)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> class</summary>
 <param name="instance">An instance do describe</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetProperties">
 <summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetProperties(System.Attribute[])">
 <summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetAttributes">
 <summary>Returns a collection of custom attributes for the type represented by this type descriptor.</summary>
 <returns>An <see cref="T:System.ComponentModel.AttributeCollection" /> containing the attributes for the type. The default is <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetClassName">
 <summary>Returns the fully qualified name of the class represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.String" /> containing the fully qualified class name of the type this type descriptor is describing. The default is null.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetEvents">
 <summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
 <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetEvents(System.Attribute[])">
 <summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
 <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
 <summary>Returns an object that contains the property described by the specified property descriptor.</summary>
 <returns>An <see cref="T:System.Object" /> that owns the given property specified by the type descriptor. The default is null.</returns>
 <param name="pd">The property descriptor for which to retrieve the owning object.</param>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetConverter">
 <summary>Returns a type converter for the type represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> for the type represented by this type descriptor. The default is a newly created <see cref="T:System.ComponentModel.TypeConverter" />.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetComponentName">
 <summary>Returns the name of the class represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.String" /> containing the name of the component instance this type descriptor is describing. The default is null.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetDefaultEvent">
 <summary>Returns the event descriptor for the default event of the object represented by this type descriptor.</summary>
 <returns>The <see cref="T:System.ComponentModel.EventDescriptor" /> for the default event on the object represented by this type descriptor. The default is null.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetDefaultProperty">
 <summary>Returns the property descriptor for the default property of the object represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the default property on the object represented by this type descriptor. The default is null. This implementation always returns null.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineTypeDescriptor.GetEditor(System.Type)">
 <summary>Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.</summary>
 <returns>An editor of the given type that is to be associated with the class represented by this type descriptor. The default is null.</returns>
 <param name="editorBaseType">The base type of the editor to retrieve.</param>
</member>
<member name="T:Tools.TextT.UnicodeT.CharsLineColumnDescriptor">
 <summary>A property descriptor that column of <see cref="T:Tools.TextT.UnicodeT.CharsLine"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CharsLineColumnDescriptor._instance">
 <summary>Current char line to provide property for</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.columnIndex">
 <summary>Index of column to describe</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.#ctor(Tools.TextT.UnicodeT.CharsLine,System.Int32)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CharsLineColumnDescriptor"/> class</summary>
 <param name="instance">Instance of <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> to created property descriptor for</param>
 <param name="columnIndex">Index (0-based) of column co create property descriptor for</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="columnIndex"/> is less than zero or greater than or equal to <see cref="P:Tools.TextT.UnicodeT.CharsLine.Size">size</see> of <paramref name="instance"/></exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.Instance">
 <summary>Gets current char line this property descriptor ptovides description of property of</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.GetName(Tools.TextT.UnicodeT.CharsLine,System.Int32)">
 <summary>Gets name of newly created property</summary>
 <param name="instance">Instance of <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> the property belongs to</param>
 <param name="columnIndex">Index of column the instance belongs to</param>
 <returns>Name of the propety-colum. I.e. number of the column in base specified by <paramref name="instance"/>.<see cref="P:Tools.TextT.UnicodeT.CharsLine.Size">Size</see>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.GetAttributes">
 <summary>Gets attributes for newly created instance of <see cref="T:Tools.TextT.UnicodeT.CharsLineColumnDescriptor"/></summary>
 <returns>Attributes of a virtual property described by newly created instace</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.CanResetValue(System.Object)">
 <summary>When overridden in a derived class, returns whether resetting an object changes its value.</summary>
 <param name="component">The component to test for reset capability. </param>
 <returns>true if resetting the component changes its value; otherwise, false. This implementation always returns false.</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.ComponentType">
 <summary>When overridden in a derived class, gets the type of the component this property is bound to.</summary>
 <returns>
 A <see cref="T:System.Type" /> that represents the type of component this property is bound to.
 This implementation always returns type of item passed to CTor which is always <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> or derived type.
 </returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.GetValue(System.Object)">
 <summary>When overridden in a derived class, gets the current value of the property on a component.</summary>
 <returns>The value of a property for a given component.</returns>
 <param name="component">The component with the property for which to retrieve the value. </param>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.IsReadOnly">
 <summary>When overridden in a derived class, gets a value indicating whether this property is read-only.</summary>
 <returns>true if the property is read-only; otherwise, false. This implementation always returns true.</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.PropertyType">
 <summary>When overridden in a derived class, gets the type of the property.</summary>
 <returns>A <see cref="T:System.Type" /> that represents the type of the property. This implementation always returns <see cref="T:System.UInt32"/>.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.ResetValue(System.Object)">
 <summary>When overridden in a derived class, resets the value for this property of the component to the default value.</summary>
 <param name="component">The component with the property value that is to be reset to the default value. </param>
 <exception cref="T:System.NotSupportedException">This implementation always throws this exception</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.SetValue(System.Object,System.Object)">
 <summary>When overridden in a derived class, sets the value of the component to a different value.</summary>
 <param name="component">The component with the property value that is to be set. </param>
 <param name="value">The new value. </param>
 <exception cref="T:System.NotSupportedException">This implementation always throws this exception</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsLineColumnDescriptor.ShouldSerializeValue(System.Object)">
 <summary>When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.</summary>
 <param name="component">The component with the property to be examined for persistence. </param>
 <returns>true if the property should be persisted; otherwise, false. This implementation always returns true.</returns>
</member>
<member name="T:Tools.TextT.UnicodeT.CharsList">
 <summary>An abstract base class for sources of characters</summary>
 <remarks>
 This class implements <see cref="T:System.Collections.Generic.IList`1"/> - but only it's readonly part (though derived class may support read-write access).
 <note type="inheritinfo">If derived class implements also write access for the collection, consider implementing <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.</note>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsList.Count">
 <summary>When overriden in derived class gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsList.Item(System.Int32)">
 <summary>When overriden in derived class gets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsList.Continuous">
 <summary>When overriden in derived class gets value indicating if this collection is guaranteed to contain only characters that folllow one each other without any gaps</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.Contains(System.UInt32)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if  <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <remarks><note type="ineritinfo">This implementation wlaks entire collection untill first occurence of <paramref name="item"/> is found. Derived class should provide more effective implementation.</note></remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.CharsList.IndexOf(System.UInt32)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.CopyTo(System.UInt32[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0 or greater than or equal to length of <paramref name="array"/>.</exception>
 <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsList.IsReadOnly">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
 <returns>This implementation always returns true.</returns>
 <remarks><note type="inheritinfo">In case derived class overrides this method to return false, it shall override write-access methods.</note></remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <remarks><note type="inheritinfo">This implementation returns <see cref="T:Tools.CollectionsT.GenericT.IndexableEnumerator`2"/>. Derived class may opt for retruning more efficient implementation</note></remarks>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.IndexOf(System.UInt32)">
 <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
 <returns>The index of 
 <paramref name="item" /> if found in the list; otherwise, -1.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
 <remarks><note type="ineritinfo">This implementation wlaks entire collection untill first occurence of <paramref name="item"/> is found. Derived class should provide more effective implementation.</note></remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.CharsList.Contains(System.UInt32)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.Add(System.UInt32)">
 <summary>When overriden in derived class adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only (this implementation always throws this exception).</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.Clear">
 <summary>When overriden in derived class removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only (this implementation always throws this exception).</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.Remove(System.UInt32)">
 <summary>When overriden in derived class removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if 
 <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if 
 <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only (this implementation always throws this exception).</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.RemoveAt(System.Int32)">
 <summary>When overriden in derived class removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
 <param name="index">The zero-based index of the item to remove.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">
 <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only (this implementation always throws this exception).</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsList.Insert(System.Int32,System.UInt32)">
 <summary>When overriden in derived class inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
 <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
 <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only (this implementation always throws this exception).</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsList.IList_Item(System.Int32)">
 <summary>Gets or, when overriden in derived class, sets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
 <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only (this implementation always throws this exception when property is set).</exception>
 <remarks><note type="inheritinfo">This property implements <see cref="P:System.COllections.Generic.IList`1.Item"/>. Getter of this property calls <see cref="P:Tools.TextT.UnicodeT.CharsList.Item(System.Int32)"/>.</note></remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.CharsList.Item(System.Int32)"/>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsList.Empty">
 <summary>Gets an empty <see cref="T:Tools.TextT.UnicodeT.CharsList"/></summary>
</member>
<member name="T:Tools.TextT.UnicodeT.CharsArray">
 <summary>Implements array-backed <see cref="T:Tools.TextT.UnicodeT.CharsList"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.CharsArray.array">
 <summary>The array</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsArray.#ctor(System.UInt32[])">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CharsArray"/> class</summary>
 <param name="array">The array that contains characters new instance will provide</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsArray.Count">
 <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsArray.Item(System.Int32)">
 <summary>Gets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsArray.Contains(System.UInt32)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if  <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <seelaso cref="M:Tools.TextT.UnicodeT.CharsArray.IndexOf(System.UInt32)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsArray.IndexOf(System.UInt32)">
 <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
 <returns>The index of 
 <paramref name="item" /> if found in the list; otherwise, -1.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
 <seelaso cref="M:Tools.TextT.UnicodeT.CharsArray.Contains(System.UInt32)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsArray.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsArray.CopyTo(System.UInt32[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0 or greater than or equal to length of <paramref name="array"/>.</exception>
 <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsArray.Continuous">
 <summary>Gets value indicating if this collection is guaranteed to contain only characters that folllow one each other without any gaps</summary>
 <returns>This implementation returns true only if <see cref="P:Tools.TextT.UnicodeT.CharsArray.Count"/> is 0 or 1.</returns>
</member>
<member name="T:Tools.TextT.UnicodeT.CharsRange">
 <summary>Implements character-block backed <see cref="T:Tools.TextT.UnicodeT.CharsList"/></summary>
 <remarks>This collection is virtual</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.#ctor">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CharsRange"/> that contains all Unicode code-points (including surrogates)</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.#ctor(System.UInt32,System.UInt32)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CharsRange"/> form given character range</summary>
 <param name="first">First character in range</param>
 <param name="last">Last character in range</param>
 <exception cref="T:System.ArgumentException"><paramref name="last"/> is less than <paramref name="first"/></exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="last"/> is greater than <see cref="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.MaxCodePoint"/></exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsRange.Start">
 <summary>Gets code if first code-point in range</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsRange.End">
 <summary>Gets code of last code-point in range</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsRange.Count">
 <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsRange.Item(System.Int32)">
 <summary>Gets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.Contains(System.UInt32)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if  <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <seelaso cref="M:Tools.TextT.UnicodeT.CharsRange.IndexOf(System.UInt32)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <remarks>Returns clone of this instance.</remarks>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.IndexOf(System.UInt32)">
 <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
 <returns>The index of 
 <paramref name="item" /> if found in the list; otherwise, -1.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
 <seelaso cref="M:Tools.TextT.UnicodeT.CharsRange.Contains(System.UInt32)"/>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsRange.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsRange.IEnumerator_Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="F:Tools.TextT.UnicodeT.CharsRange.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.Dispose(System.Boolean)">
 <summary>Implements <see cref="M:System.IDisposable.Dispose"/></summary>
 <param name="disposing">True when disposing</param>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsRange.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsRange.Continuous">
 <summary>Gets value indicating if this collection is guaranteed to contain only characters that folllow one each other without any gaps</summary>
 <returns>This implementation always returns true</returns>
</member>
<member name="T:Tools.TextT.UnicodeT.CharsSource">
 <summary>Transforms flat list of characters in form of <see cref="T:Tools.TextT.UnicodeT.CharsList"/> to list of character groups (e.g. lines, 16 chars per line)</summary>
 <remarks>
 This class is not CLS-compliant and no CLS-compliant alternative is provided.
 <para>This class is intended to be used with charmap-like controls that display characters in a form of grid.</para>
 <para>This classs implements <see cref="T:System.Collections.IList"/> and <see cref="T:System.Collections.Generic.IList`1"/> however this implementation is always read-only.</para>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.#ctor(Tools.TextT.UnicodeT.CharsList)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CharsSource"/> class</summary>
 <param name="chars">Characters to use</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="chars"/> is null</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.Chars">
 <summary>Gets all characters in this collection as flat collection</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.Columns">
 <summary>Gets or sets value indicating how many colums (characters per line/group) this class uses</summary>
 <remarks>Typical value is 16 because hexanumbers are used for Unicode charatcer codes</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.FirstChar">
 <summary>Gets first character in the <see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/> collection</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/>.<see cref="P:Tools.TextT.UnicodeT.CharsList.Count">Count</see> is zero</exception>
 <remarks>If <see cref="P:Tools.TextT.UnicodeT.CharsSource.Continuous"/> is true this is also character with lowest code-point</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.LastChar">
 <summary>Gets last character in the <see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/> collection</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/>.<see cref="P:Tools.TextT.UnicodeT.CharsList.Count">Count</see> is zero</exception>
 <remarks>If <see cref="P:Tools.TextT.UnicodeT.CharsSource.Continuous"/> is true this is also character with highest code-point</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.VirtualFirstIndex">
 <summary>Gets index to the <see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/> collection that points to firts character in first line</summary>
 <remarks>
 If <see cref="P:Tools.TextT.UnicodeT.CharsSource.Continuous"/> is true the index cann be negative, in this case first -<see cref="P:Tools.TextT.UnicodeT.CharsSource.VirtualFirstIndex"/> characters in first group are ignored (null).
 This is to property align the characters in a grid.
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.VirtualLastIndex">
 <summary>Gets index to the <see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/> collection that points to last character in last line</summary>
 <remarks>
 If <see cref="P:Tools.TextT.UnicodeT.CharsSource.Continuous"/> is true the index cann be greater than or eaqual to <see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/>.<see cref="P:Tools.TextT.UnicodeT.CharsList.Count">Count</see>, in this case last  <see cref="P:Tools.TextT.UnicodeT.CharsSource.VirtualLastIndex"/> - <see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/>.<see cref="!:CharList.Count">Count</see> + 1 characters in last group are ignored (null).
 This is to property align the characters in a grid.
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.Continuous">
 <summary>Gets value indicating if all characters in the collection are guaranteeed to for a continuous (uninterrupted, incremental) range</summary>
 <seelaso cref="P:Tools.TextT.UnicodeT.CharsList.Continuous"/>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.Item(System.Int32)">
 <summary>Gets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:IList`1" />.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.IndexOf(Tools.TextT.UnicodeT.CharsLine)">
 <summary>Determines the index of a specific item in the <see cref="T:IList`1" />.</summary>
 <returns>The index of 
 <paramref name="item" /> if found in the list; otherwise, -1.</returns>
 <param name="item">The object to locate in the <see cref="T:IList`1" />.</param>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.Count">
 <summary>Gets the number of elements contained in the <see cref="T:ICollection`1" />.</summary>
 <returns>The number of elements contained in the <see cref="T:ICollection`1" />.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.Contains(Tools.TextT.UnicodeT.CharsLine)">
 <summary>Determines whether the <see cref="T:ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:ICollection`1" />.</param>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.CopyTo(Tools.TextT.UnicodeT.CharsLine[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in 
 <paramref name="array" /> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="array" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">
 <paramref name="arrayIndex" /> is less than 0.</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:ICollection`1" /> is greater than the available space from 
 <paramref name="arrayIndex" /> to the end of the destination 
 <paramref name="array" />.-or-Type 
 <paramref name="T" /> cannot be cast automatically to the type of the destination 
 <paramref name="array" />.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.ICollection_CopyTo(System.Array,System.Int32)">
 <summary>Copies the elements of the <see cref="T:ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
 <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null. </exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero. </exception>
 <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />. </exception>
 <exception cref="T:System.ArgumentException">Type <see cref="T:Tools.TextT.UnicodeT.CharsLine"/> cannot be cast automatically to the type of the destination <paramref name="array" />. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.IsSynchronized">
 <summary>Gets a value indicating whether access to the <see cref="T:ICollection" /> is synchronized (thread safe).</summary>
 <returns>true if access to the <see cref="T:ICollection" /> is synchronized (thread safe); otherwise, false. This implementation always returns false.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.TextT.UnicodeT.CharsSource.SyncRoot">
 <summary>Gets an object that can be used to synchronize access to the <see cref="T:ICollection" />.</summary>
 <returns>An object that can be used to synchronize access to the <see cref="T:ICollection" />. This implementation always returns current instance of <see cref="T:Tools.TextT.UnicodeT.CharsSource"/>.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.OnChanged(System.String)">
 <summary>Raises the <see cref="E:Tools.TextT.UnicodeT.CharsSource.PropertyChanged"/> and <see cref="E:Tools.IReportsChange.Changed"/> events</summary>
 <param name="propertyName">Name of changed property</param>
</member>
<member name="E:Tools.TextT.UnicodeT.CharsSource.PropertyChanged">
 <summary>Occurs when a property value changes.</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.TextT.UnicodeT.CharsSource.CollectionChanged"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.TextT.UnicodeT.CharsSource.CollectionChanged">
 <summary>Occurs when the collection changes.</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.OnChanged(Tools.IReportsChange.ValueChangedEventArgsBase)">
 <summary>Raises the <see cref="E:Tools.TextT.UnicodeT.CharsSource.Changed"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.TextT.UnicodeT.CharsSource.Changed">
 <summary>Occurs when a property value changes.</summary>
 <remarks>This implementation uses <paramref name="e"/> of type <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/></remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CharsSource.OnCharsCollectionChanged(Tools.TextT.UnicodeT.CharsList,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
 <summary>Called when the <see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/> collection changed</summary>
 <param name="sender">Source of the event - the <see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/> collection</param>
 <param name="e">Event arguments</param>
 <remarks>Only clled when <see cref="P:Tools.TextT.UnicodeT.CharsSource.Chars"/> implements <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/></remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.CodePointInfo">
 <summary>Points to a code point</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.#ctor(System.Xml.Linq.XDocument,System.UInt32)">
 <summary>CTor - creates a new instance of <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> class from unsigned ocdepoint value</summary>
 <param name="xml">A XML document containign current Unicode Character Database XML</param>
 <param name="codepoint">Code point value</param>
 <remarks>This CTor is not CLS-compliant. CLS-compliant overload exists.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.#ctor(System.Xml.Linq.XDocument,System.Int32)">
 <summary>CTor - creates a new instance of <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> class from signed ocdepoint value</summary>
 <param name="xml">A XML document containign current Unicode Character Database XML</param>
 <param name="codepoint">Code point value</param>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.#ctor(System.Xml.Linq.XDocument,System.Char)">
 <summary>CTor - creates a new instance of <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> class from UTF-16 character</summary>
 <param name="xml">A XML document containign current Unicode Character Database XML</param>
 <param name="character">A UTF-16 character</param>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.#ctor(System.Xml.Linq.XDocument)">
 <summary>CTor - creates a new instance of <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> class which represents current character placeholder</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfo.IsPlaceholder">
 <summary>Gets value indicating if this instance represents current charatcer placeholder (#)</summary>
 <remarks>In Unicode Character Database XML current character placeholders are used to denote current charatcer</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.CreatePlaceholder(System.Xml.Linq.XDocument)">
 <summary>Creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> class which represents current character placeholder (#)</summary>
 <param name="xml">XML document all characters were loaded from</param>
 <returns>A new instance of <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> class representing placeholder character</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.Parse(System.String,System.Xml.Linq.XDocument)">
 <summary>Creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> class by parsing string containing code point value</summary>
 <param name="value">Code point value (hexadecimal number without leading hexadecimal specifier), or placeholder sign (#)</param>
 <param name="xml">XML document all characters were loaded from</param>
 <returns>
 Null if <paramref name="value"/> is null or an empty string.
 <see cref="M:Tools.TextT.UnicodeT.CodePointInfo.CreatePlaceholder(System.Xml.Linq.XDocument)">Placeholder</see> codepoint if <paramref name="value"/> is #.
 A new instance of <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> othwerwise.
 </returns>
 <exception cref="T:System.FormatException"><paramref name="value"/> is not in expected format (of hex numbert e.g. 1, A 00AF, 0014, 1FA03 etc.)</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> represents hex number that does not fit to <see cref="T:System.UInt32"/> data type.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfo.CodePoint">
 <summary>Gets value of current code point</summary>
 <remarks>This property is not CLS-compilant. CLS-compliant alternative is <see cref="P:Tools.TextT.UnicodeT.CodePointInfo.CodePointSigned"/></remarks>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.TextT.UnicodeT.CodePointInfo.IsPlaceholder"/> is true</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfo.CodePointSigned">
 <summary>CLS-compliant alternative of <see cref="P:Tools.TextT.UnicodeT.CodePointInfo.CodePoint"/></summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.TextT.UnicodeT.CodePointInfo.IsPlaceholder"/> is true</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfo.Characters">
 <summary>Gets string representing current code point.</summary>
 <returns>String of lenght 1 or 2 (for surrogate pairs)</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.TextT.UnicodeT.CodePointInfo.IsPlaceholder"/> is true</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfo.Character">
 <summary>Gets a UTF-16 character representing current code point</summary>
 <exception cref="T:System.InvalidOperationException">Current code point is surrogate pair -or- <see cref="P:Tools.TextT.UnicodeT.CodePointInfo.IsPlaceholder"/> is true</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfo.IsSurrogatePair">
 <summary>Gets value indicating if current code point represents surrogate pair</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.TextT.UnicodeT.CodePointInfo.IsPlaceholder"/> is true</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfo.UnicodeCodePoint">
 <summary>Gets <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/> instance which provides information about current code point</summary>
 <returns>
 A <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/> instance which provides information about current code point.
 Null if this instance was initialized with null XML document or if the XML document does not contain information for current code point.
 </returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.TextT.UnicodeT.CodePointInfo.IsPlaceholder"/> is true</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.GetHashCode">
 <summary>Serves as a hash function for a particular type. </summary>
 <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.op_Equality(Tools.TextT.UnicodeT.CodePointInfo,Tools.TextT.UnicodeT.CodePointInfo)">
 <summary>Compares two instances of <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> for equality</summary>
 <param name="a">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <param name="b">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <returns>True if <paramref name="a"/> and <paramref name="b"/> are backed by same <see cref="T:System.Xml.Linq.XDocument"/> (reference equivalence) and represent same code point (numeric value). Also returns true if both - <paramref name="a"/> and <paramref name="b"/> are null.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.op_Inequality(Tools.TextT.UnicodeT.CodePointInfo,Tools.TextT.UnicodeT.CodePointInfo)">
 <summary>Compares two instances of <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> for inequality</summary>
 <param name="a">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <param name="b">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <returns>False if <paramref name="a"/> and <paramref name="b"/> are backed by same <see cref="T:System.Xml.Linq.XDocument"/> (reference equivalence) and represent same code point (numeric value). Also returns false if both - <paramref name="a"/> and <paramref name="b"/> are null.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.op_LessThan(Tools.TextT.UnicodeT.CodePointInfo,Tools.TextT.UnicodeT.CodePointInfo)">
 <summary>Compares codepoints represented by two <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> instances</summary>
 <param name="a">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <param name="b">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <returns>True if codepoint represented by <paramref name="a"/> is lower than codepoint represented by <paramref name="b"/>. Null if either <paramref name="a"/> or <paramref name="b"/> is null.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.op_GreaterThan(Tools.TextT.UnicodeT.CodePointInfo,Tools.TextT.UnicodeT.CodePointInfo)">
 <summary>Compares codepoints represented by two <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> instances</summary>
 <param name="a">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <param name="b">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <returns>True if codepoint represented by <paramref name="a"/> is greater than codepoint represented by <paramref name="b"/>. Null if either <paramref name="a"/> or <paramref name="b"/> is null.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.op_LessThanOrEqual(Tools.TextT.UnicodeT.CodePointInfo,Tools.TextT.UnicodeT.CodePointInfo)">
 <summary>Compares codepoints represented by two <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> instances</summary>
 <param name="a">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <param name="b">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <returns>True if codepoint represented by <paramref name="a"/> is lower than or equal to codepoint represented by <paramref name="b"/>. Null if either <paramref name="a"/> or <paramref name="b"/> is null.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfo.op_GreaterThanOrEqual(Tools.TextT.UnicodeT.CodePointInfo,Tools.TextT.UnicodeT.CodePointInfo)">
 <summary>Compares codepoints represented by two <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> instances</summary>
 <param name="a">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <param name="b">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <returns>True if codepoint represented by <paramref name="a"/> is greater than or equal to codepoint represented by <paramref name="b"/>. Null if either <paramref name="a"/> or <paramref name="b"/> is null.</returns>
</member>
<member name="T:Tools.TextT.UnicodeT.CodePointInfoCollection">
 <summary>Read-only collection of Unicode code points</summary>
 <remarks>This class implements <see cref="T:System.IFormattable"/>. For list of possible formatting strings see <see cref="M:Tools.TextT.UnicodeT.CodePointInfoCollection.ToString"/></remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.#ctor(System.Xml.Linq.XDocument,System.UInt32[])">
 <summary>CTor - ctreates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CodePointInfoCollection"/> class</summary>
 <param name="xml">A XML document all code points were loaded from</param>
 <param name="codePoints">Actual code points</param>
 <remarks>This CTor is not CLS-compliant. CLS-compliant overload exists.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.#ctor(System.Xml.Linq.XDocument,System.Int32[])">
 <summary>CTor - ctreates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CodePointInfoCollection"/> class</summary>
 <param name="xml">A XML document all code points were loaded from</param>
 <param name="codePoints">Actual code points</param>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.#ctor(System.Xml.Linq.XDocument,System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CodePointInfoCollection"/> from string representation of code points sequence</summary>
 <param name="xml">A XML document all code points were loaded from</param>
 <param name="codePoints">Whitespace-delimited list of code point values specified as hexanumbers (without any hexa specifier). Special code point # (current character placeholder) is allowed.</param>
 <exception cref="T:System.FormatException">A code point does not represent valid hexadecimal number</exception>
 <exception cref="T:System.OverflowException">A code point represents number which is less than <see cref="F:System.UInt32.MinValue"/> or greater than <see cref="F:System.UInt32.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.ICollection_Add(Tools.TextT.UnicodeT.UnicodeCodePoint)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="item">Ignored</param>
 <exception cref="T:System.NotSupportedException">Always (this collection is read-only)</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.Clear">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <exception cref="T:System.NotSupportedException">Always (this collection is read-only)</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.Contains(Tools.TextT.UnicodeT.UnicodeCodePoint)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.CopyTo(Tools.TextT.UnicodeT.UnicodeCodePoint[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in 
 <paramref name="array" /> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="array" /> is multidimensional.-or-
 The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from  <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-
 Type  <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.
 </exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfoCollection.Count">
 <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfoCollection.ICollection_IsReadOnly">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
 <returns>true - this collection is read-only</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.ICollection_Remove(Tools.TextT.UnicodeT.UnicodeCodePoint)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="item">Ignored</param>
 <returns>This method never returns and always throws <see cref="T:System.NotSupportedException"/></returns>
 <exception cref="T:System.NotSupportedException">Always (this collection is read-only)</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.GetHashCode">
 <summary>Serves as a hash function for a particular type. </summary>
 <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfoCollection.Item(System.Int32)">
 <summary>Gets item at specified index</summary>
 <param name="index">Index to get item at</param>
 <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Tools.TextT.UnicodeT.CodePointInfoCollection.Count"/>.</exception>"
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfoCollection.CodePoints">
 <summary>Gets array of code point values contained in this collection</summary>
 <remarks>This property is not CLS-compliant. CLS-compliant alternative is <see cref="P:Tools.TextT.UnicodeT.CodePointInfoCollection.CodePointsSigned"/></remarks>
 <exception cref="T:System.InvalidOperationException">This collection contains placeholder charatcer (#)</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CodePointInfoCollection.CodePointsSigned">
 <summary>CLS-compliant version of <see cref="P:Tools.TextT.UnicodeT.CodePointInfoCollection.CodePoints"/></summary>
 <exception cref="T:System.InvalidOperationException">This collection contains placeholder charatcer (#)</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.ToString(System.String,System.IFormatProvider)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <returns>The value of the current instance in the specified format.</returns>
 <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
 <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
 <remarks>Allowed <paramref name="format"/> strings are:
 <list type="table"><listheader><term>Format string</term><description>Output</description></listheader>
 <item><term>x or g</term><description>Hexadecimal codes, space-delimited, minimally four lowecase hexadigits (0044 005A); unknown characters rendered as #</description></item>
 <item><term>X or G</term><description>Hexadecimal codes, space-delimited, minimally four uppercase hexadigits (0044 005a); unknown characters rendered as #</description></item>
 <item><term>D or d</term><description>Decadic codes, space-delimited (68 90); unknown characters rendered as #</description></item>
 <item><term>s or S</term><description>Characters represinting individual code points, no delimiter (DZ)<note>Because CLR strings are represented in UTF-16 some codepoints may be represented as two UTF-16 characters (surrogate pairs)</note>Unknown characters rendered as &lt;#>.</description></item>
 </list>
 </remarks>
 <filterpriority>2</filterpriority>
 <exception cref="T:System.ArgumentException"><paramref name="format"/> is not one of recognized formatting strings</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.CodePointInfoCollection.ToString(System.String)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
 <remarks>For list of formats see other overload.</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="format"/> is not one of recognized formatting strings</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.CsurBlock">
 <summary>Represents a CSUR character block and provides additional CSUR properties</summary>
 <remarks><note>XML serialization attributes used to decorate properties of this class are not intended for XML serialization, they are rather intended as machine-readable documentation where the property originates from in UCD XML.</note></remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurBlock.#ctor(System.Xml.Linq.XElement,System.Xml.Linq.XDocument)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CsurBlock"/> class</summary>
 <param name="element">An XML element that represents the block. The element should come from a document that specifies extension CSUR properties.</param>
 <param name="mainUcdDocument">A XML document that represents the main Unicode Character Database (not CSUR extension database)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;block> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurBlock.Document">
 <summary>Gets a XML document that represents whole Unicode Character Database</summary>
 <remarks>In case of <see cref="T:Tools.TextT.UnicodeT.CsurBlock"/> this document is typically different from document <see cref="P:Tools.TextT.UnicodeT.UnicodeBlock.Element"/> belongs to</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurBlock.Status">
 <summary>Gets status of this block in ConScript Unicode Registry (CSUR)</summary>
 <returns>Status of this block in CSUR. <see cref="F:Tools.TextT.UnicodeT.CsurStatus.NotInCsur"/> if value is not provided.</returns>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attributte cannot be parsed as <see cref="T:Tools.TextT.UnicodeT.CsurStatus"/>.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurBlock.LastRevision">
 <summary>Gets date of latest revision of the block registration in CSUR</summary>
 <returns>Date of last revision of block registration or proposal in CSUR. Null if the value was not specified.</returns>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute cannot be parsed as date in XML format yyyy-MM-dd in invariant culture.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurBlock.Creator">
 <summary>Gets name of creator of script/block</summary>
 <returns>Name of creator of script or block as recorded in CSUR. Null if the vaue is not provided</returns>
</member>
<member name="T:Tools.TextT.UnicodeT.CsurStatus">
 <summary>Status of character, group or block in ConScript Unicode Registry (CSUR)</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurStatus.NotInCsur">
 <summary>The code point is not part of CSUR in any way (i.e. it's not private use character governed by CSUR)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurStatus.Proposal">
 <summary>Script registration was proposed but it's not yet registered.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurStatus.Registered">
 <summary>Script was registered in ConScript Unicode Registry</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurStatus.Reserved">
 <summary>Used for characters that are reserved for special purposes. Not used for character marked as reserved within blocks of individual scipts (<see cref="F:Tools.TextT.UnicodeT.CsurStatus.Proposal"/> or <see cref="F:Tools.TextT.UnicodeT.CsurStatus.Registered"/> is used in this case)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurStatus.Unassigned">
 <summary>The character falls under CSUR range but is currently neither reserved for special purposes nor it is part of registered or proposed character block.</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.CsurReservedFor">
 <summary>In case of <see cref="F:Tools.TextT.UnicodeT.CsurStatus.Reserved"/> indicate purpose for which the character is reserved</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurReservedFor.notReserved">
 <summary>The code point is either not reserved by CSUR or it is not part of CSUR at all</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurReservedFor.EncodingHacks">
 <summary>Reserved for encoding hacks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurReservedFor.FontHacks">
 <summary>Reserved for font hacks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurReservedFor.AppleHacks">
 <summary>Reserved for Apple hacks</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.CsurExtensions">
 <summary>Contains extension methods for <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> and related classes to work with ConScript Unicode Registry (CSUR)</summary>
 <version version="1.5.4">This module is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurExtensions.XmlNamespace">
 <summary>Name of XML namespace for ConScript Unicode Registry extension properties</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurExtensions.DefaultCsurDatabase">
 <summary>Gets default instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> class initialized by default CSUR data. This instance contains only CSUR data.</summary>
 <returns>Default instance of CSUR data.</returns>
 <remarks>
 Instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> returned by this property neither contains all characters not it provides standard UCD properties.
 It contains only characters registered with CSUR and only CSUR properties.
 </remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions"/>
</member>
<member name="F:Tools.TextT.UnicodeT.CsurExtensions.UnicodeXmlDatabaseResourceName">
 <summary>Name of assembly resource that contains Unicode Character Database XML with only CSUR properties</summary>
 <remarks>
 <para>The resource is contained in Tools.Text.Unicode.dll assembly (same assembly as the <see cref="T:Tools.TextT.UnicodeT.CsurExtensions"/> module).</para>
 <para>To optimalize DLL size the resource is GZipped (use <see cref="T:System.IO.Compression.GZipStream"/> to unGZip it).</para>
 <para>The file uses UCD grouping method.</para>
 <para>Unlike <see cref="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.UnicodeXmlDatabaseResourceName"/> this resource is embedded normally.</para>
 </remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.GetXml">
 <summary>Gets Unicode Character Database containing only CSUR properties in XML format</summary>
 <returns>Content of linked resource <c>Tools.TextT.UnicodeT.CSUR.xml.gz</c> (<see cref="F:Tools.TextT.UnicodeT.CsurExtensions.UnicodeXmlDatabaseResourceName"/>) as <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.LoadCsur(Tools.TextT.UnicodeT.UnicodeCharacterDatabase)">
 <summary>Loads default ConScript Unicode Registry (CSUR) data as extension data for existing <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/></summary>
 <param name="mainDatabase">The instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> to load CSUR extension data into.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="mainDatabase"/> is null</exception>
 <remarks>If <paramref name="mainDatabase"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions">Extensions</see> already contains CSUR database (identified by <see cref="F:Tools.TextT.UnicodeT.CsurExtensions.XmlNamespace"/>) it's replaced. You should not do this - it can have unexpected effects on exiting instances of UCD types.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.LoadCsur(Tools.TextT.UnicodeT.UnicodeCharacterDatabase,Tools.TextT.UnicodeT.UnicodeCharacterDatabase)">
 <summary>Loads ConScript Unicode Registry (CSUR) data represented as <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> instance as extension data for existing <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/></summary>
 <param name="mainDatabase">The instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> to load CSUR extension data into.</param>
 <param name="csurDatabase">An instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> that provides CSUR extension propertires' values</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="mainDatabase"/> or <paramref name="csurDatabase"/> is null</exception>
 <remarks>If <paramref name="mainDatabase"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions">Extensions</see> already contains CSUR database (identified by <see cref="F:Tools.TextT.UnicodeT.CsurExtensions.XmlNamespace"/>) it's replaced. You should not do this - it can have unexpected effects on exiting instances of UCD types.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.LoadCsur(Tools.TextT.UnicodeT.UnicodeCharacterDatabase,System.Xml.Linq.XDocument)">
 <summary>Loads ConScript Unicode Registry (CSUR) data represented as <see cref="T:System.Xml.Linq.XDocument"/> isntance as extension data for existing <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/></summary>
 <param name="mainDatabase">The instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> to load CSUR extension data into.</param>
 <param name="csurDatabase">An XML document that represents Unicode Character Database XML -like document that contains values of CSUR properties.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="mainDatabase"/> or <paramref name="csurDatabase"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of XML document is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
 <remarks>If <paramref name="mainDatabase"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions">Extensions</see> already contains CSUR database (identified by <see cref="F:Tools.TextT.UnicodeT.CsurExtensions.XmlNamespace"/>) it's replaced. You should not do this - it can have unexpected effects on exiting instances of UCD types.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.LoadCsur(Tools.TextT.UnicodeT.UnicodeCharacterDatabase,System.Xml.XmlDocument)">
 <summary>Loads ConScript Unicode Registry (CSUR) data represented as <see cref="T:System.Xml.XmlDocument"/> instance as extension data for existing <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/></summary>
 <param name="mainDatabase">The instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> to load CSUR extension data into.</param>
 <param name="csurDatabase">An XML document that represents Unicode Character Database XML -like document that contains values of CSUR properties.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="mainDatabase"/> or <paramref name="csurDatabase"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of XML document is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
 <remarks>If <paramref name="mainDatabase"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions">Extensions</see> already contains CSUR database (identified by <see cref="F:Tools.TextT.UnicodeT.CsurExtensions.XmlNamespace"/>) it's replaced. You should not do this - it can have unexpected effects on exiting instances of UCD types.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.LoadCsur(Tools.TextT.UnicodeT.UnicodeCharacterDatabase,System.String)">
 <summary>Loads ConScript Unicode Registry (CSUR) data from a path as extension data for existing <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/></summary>
 <param name="mainDatabase">The instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> to load CSUR extension data into.</param>
 <param name="csurDatabasePath">A path to an XML document in Unicode Character Database XML -like format that contains values of CSUR properties</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="mainDatabase"/> or <paramref name="csurDatabasePath"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of XML document is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
 <remarks>If <paramref name="mainDatabase"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions">Extensions</see> already contains CSUR database (identified by <see cref="F:Tools.TextT.UnicodeT.CsurExtensions.XmlNamespace"/>) it's replaced. You should not do this - it can have unexpected effects on exiting instances of UCD types.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.LoadCsur(Tools.TextT.UnicodeT.UnicodeCharacterDatabase,System.Xml.XmlReader)">
 <summary>Loads ConScript Unicode Registry (CSUR) data from an XML reader as extension data for existing <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/></summary>
 <param name="mainDatabase">The instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> to load CSUR extension data into.</param>
 <param name="csurDatabaseSource">A reader that reads an XML document in UCDXML-like format that provides values of CSUR properties.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="mainDatabase"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of XML document is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
 <remarks>If <paramref name="mainDatabase"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions">Extensions</see> already contains CSUR database (identified by <see cref="F:Tools.TextT.UnicodeT.CsurExtensions.XmlNamespace"/>) it's replaced. You should not do this - it can have unexpected effects on exiting instances of UCD types.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.LoadCsur(Tools.TextT.UnicodeT.UnicodeCharacterDatabase,System.IO.TextReader)">
 <summary>Loads ConScript Unicode Registry (CSUR) data from a <see cref="T:System.IO.TextReader"/> as extension data for existing <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/></summary>
 <param name="mainDatabase">The instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> to load CSUR extension data into.</param>
 <param name="csurDatabaseSource">A reader that reads an XML document in UCDXML-like format that provides values of CSUR properties.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="mainDatabase"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of XML document is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
 <remarks>If <paramref name="mainDatabase"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions">Extensions</see> already contains CSUR database (identified by <see cref="F:Tools.TextT.UnicodeT.CsurExtensions.XmlNamespace"/>) it's replaced. You should not do this - it can have unexpected effects on exiting instances of UCD types.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.LoadCsur(Tools.TextT.UnicodeT.UnicodeCharacterDatabase,System.IO.Stream)">
 <summary>Loads ConScript Unicode Registry (CSUR) data from a stream as extension data for existing <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/></summary>
 <param name="mainDatabase">The instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> to load CSUR extension data into.</param>
 <param name="csurDatabaseSource">A stream that reads an XML document in UCDXML-like format that provides values of CSUR properties.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="mainDatabase"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of XML document is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
 <remarks>If <paramref name="mainDatabase"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions">Extensions</see> already contains CSUR database (identified by <see cref="F:Tools.TextT.UnicodeT.CsurExtensions.XmlNamespace"/>) it's replaced. You should not do this - it can have unexpected effects on exiting instances of UCD types.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.IsCsurLoaded(Tools.TextT.UnicodeT.UnicodeCharacterDatabase)">
 <summary>Gets a value indicating if ConScript Unicode Registry (CSUR) extension data are loaded for given instance of Unicode Character Database</summary>
 <param name="ucd">A <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> instance to tell about</param>
 <returns>True if CSUR extension data are loaded for <paramref name="ucd"/>; false if they are not.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="ucd"/> is null</exception>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions"/>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.IsCsurLoaded(Tools.TextT.UnicodeT.UnicodePropertiesProvider)">
 <summary>Gets a value indicating if ConScript Unicode Registry (CSUR) extension data are loaded for given instance of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/>-derived class</summary>
 <param name="provider">A <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> to tell about</param>
 <returns>True if CSUR extension data are loaded for <paramref name="provider"/> (respectively the <see cref="T:System.Xml.Linq.XDocument"/> it reads its data from); false if they are not.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null</exception>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetExtensions"/>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.Csur(Tools.TextT.UnicodeT.UnicodeCodePoint)">
 <summary>Gets ConScript Unicode Registry (CSUR) extension (non-standard) properties for given Unicode Code-Point</summary>
 <param name="codePoint">The code point to get CSUR data for</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="codePoint"/> is null.</exception>
 <returns>
 An instance of <see cref="T:Tools.TextT.UnicodeT.CsurPropertiesProvider"/> that provides CSUR data for <paramref name="codePoint"/>.
 Null if<paramref name="codePoint"/> represents multiple code-points (i.e. <paramref name="codePoint"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> is null) or,
 CSUR data are not loaded for Unicode Character Database instance <paramref name="codePoint"/> comes from or,
 CSUR does not provide data for given code point.
 </returns>
 <remarks>CSUR provides data only for characters in private use area of Unicode standard.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurExtensions.CsurBlocks(Tools.TextT.UnicodeT.UnicodeCharacterDatabase)">
 <summary>Gets ConScript Unicode Registry (CSUR) blocks</summary>
 <param name="database">A database to get CSUR blocks for</param>
 <returns>CSUR blocks from CSUR extension. An empty enumeration if CSUR extension is not registered.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="database"/> is null</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.CsurPropertiesProvider">
 <summary>Provides ConScript Unicode Registry (CSUR) extension properties of a character</summary>
 <remarks><note>XML serialization attributes used to decorate properties of this class are not intended for XML serialization, they are rather intended as machine-readable documentation where the property originates from in UCD XML.</note></remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.CsurPropertiesProvider.#ctor(Tools.TextT.UnicodeT.UnicodePropertiesProvider,System.Xml.Linq.XDocument)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.CsurPropertiesProvider"/> class specifying a <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> to be used to read CSUR data from</summary>
 <param name="csurPropertySource">A <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> to use to retireve CSUR data. <note>If instance passed here does not derive from <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/> the <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.Block"/> property will always return null!</note></param>
 <param name="mainUcdDocument">A XML document that represents main Unicode Character Database XML (not the CSUR UCD XML). <note>You can pass null here, but then the <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.Block"/> property will always return null!</note></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="csurPropertySource"/> is null.</exception>
 <remarks>
 <para>You usually do not call this CTor directly. Typical way of obtaining <see cref="T:Tools.TextT.UnicodeT.CsurPropertiesProvider"/> instances is through <see cref="M:Tools.TextT.UnicodeT.CsurExtensions.Csur(Tools.TextT.UnicodeT.UnicodeCodePoint)"/> extension function.</para>
 <para>
 You can pass either instance of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> that comes from CSUR-specific <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> (<see cref="M:Tools.TextT.UnicodeT.CsurExtensions.Csur(Tools.TextT.UnicodeT.UnicodeCodePoint)"/> does it). Use of such instance is faster.
 Or you can also pass instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/> (<see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> must not be null) that comes from a <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> with CSUR extension data loaded.
 The later approach is slower. In case of later approach <paramref name="csurPropertySource"/> is not <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/> or <paramref name="csurPropertySource"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint">CodePoint</see> is null all CSUR properties return null (or default value).
 </para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.MainUcdDocument">
 <summary>Gets an XML document that defines main UCD XML (not CSUR XML)</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource">
 <summary>Gets instance of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> that is used to retrieve CSUR properties' values</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.CsurDocument">
 <summary>Gets a XML document that provides values of CSUR properties</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.Script">
 <summary>Gets name of CSUR-registered script this character belongs to.</summary>
 <remarks>This is human-readable name of the script. It's not ISO script code.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.Status">
 <summary>Gets status of the code-point in CSUR</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute is not one of <see cref="T:Tools.TextT.UnicodeT.CsurStatus"/> values.</exception>
 <remarks>If the character belongs to a script and block the status is usually shared across whole block and script.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.ReservedFor">
 <summary>In case <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.Status"/> is <see cref="F:Tools.TextT.UnicodeT.CsurStatus.Reserved"/> gets value indicating purpose for which the code point is reserved in CSUR</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute is not one of <see cref="T:Tools.TextT.UnicodeT.CsurReservedFor"/> values.</exception>
 <remarks>This property retuns non-<see cref="F:Tools.TextT.UnicodeT.CsurReservedFor.notReserved"/> values only for some code-points from BMP private-use area. Thos are codepoints not used by CSUR and given by CSUR for complete private use.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.LastRevision">
 <summary>Gets date of last revision of script in CSUR</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute cannot be parsed as date value in XML fomat (yyyy-MM-dd).</exception>
 <remarks>Value of this property is typically shared acrosss whole CSUR script and block.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.Name">
 <summary>Gets name of the code-point (character) assigned to it by CSUR</summary>
 <remarks>
 CSUR names are not provided for reserved code-points.
 <para>Underlying XML attribute can use # placeholder as in <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Name"/>.</para>
 </remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Name"/>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.BidiCategory">
 <summary>Gets BiDi category assigned by CSUR</summary>
 <remarks>CSUR does not provide bidi categories in a normative way. Thus this property is provided only for some code-poits, especially those specifically said to be RtL.</remarks>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute is not one of <see cref="T:Tools.TextT.UnicodeT.UnicodeBidiCategory"/> values.</exception>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.BidiCategory"/>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.Block">
 <summary>Gets a CSUR block this code-point belongs to (in CSUR)</summary>
 <returns>
 A CSUR block code-point represented (pointed to) by this instance belongs to (if any).
 Null if <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource"/> is not <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>; or <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.MainUcdDocument"/> is null; or
 <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> is null and either
 either <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint">FirstCodePoint</see> or <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint">LastCodePoint</see> is null,
 or <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint">FirstCodePoint</see> and <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint">LastCodePoint</see> belong to different blocks.
 </returns>
 <exception cref="T:System.InvalidOperationException">Underlying CSUR XML data are invalid. See <see cref="P:System.Exception.InnerException"/> for details. See <see cref="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindBlock(System.Collections.Generic.IEnumerable`1[System.Xml.Linq.XElement],System.UInt32,System.Boolean)"/> for detailed explanation of <see cref="P:System.Exception.InnerException"/>.</exception>
 <remarks>CSUR blocks can overlap existing Unicode blocks. CSUR blocks are CSUR-specific and are not the same as Unicode blocks. But they serve the same purpose CSUR as Unicode blocks in Unicode (UCD).</remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Block"/>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindBlock(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.UInt32,System.Boolean)"/>
</member>
<member name="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.CsurCodePointType">
 <summary>Gets type of code-point in CSUR</summary>
 <returns>Type of this code-point in CSUR. Null if it cannot be determined.</returns>
 <remarks>
 CSUR code-point can never be determined if <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource"/> is not <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>.
 It also cannot be determined if <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource"/> is <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/> that belongs to "normal" Unicode Character Database XML (rather than to ConScript Unicode Registry XML) and
 either <see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.PropertySource"/>.<see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint">CodePoint</see> is null or it's not null but corresponding CSUR code point cannot be found.
 </remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Type"/>
</member>
<member name="T:Tools.TextT.UnicodeT.EmojiSourceInfo">
 <summary>Provides information about Emoji source</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.EmojiSourceInfo.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.EmojiSourceInfo.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.EmojiSourceInfo"/> class</summary>
 <param name="element">A <see cref="T:System.Xml.Linq.XElement"/> that represents this named sequence</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;emoji-source> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.EmojiSourceInfo.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.EmojiSourceInfo.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.EmojiSourceInfo.Unicode">
 <summary>Gets Unicode code point(s) for this Emoji Source</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.EmojiSourceInfo.DoCoMo">
 <summary>Gets DoCoMo Shift-JIS code</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.EmojiSourceInfo.Kddi">
 <summary>Gets KDDI Shift-JIS code</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.EmojiSourceInfo.SoftBank">
 <summary>Gets SoftBank Shift-JIS code</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.ICharNameProvider">
 <summary>Interface of source that can provide names of characters</summary>
 <version version="1.5.4">This interface is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.ICharNameProvider.GetName(System.Int32)">
 <summary>Gets name of a character</summary>
 <param name="codePoint">A Unicode (UTF-32) code-point</param>
 <returns>Name of the character, null of the source is not capable of providing character name</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePoint"/> is less than zero or greater than <see cref="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.MaxCodePoint"/>.</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.SimpleCharNameProvider">
 <summary>Simplistic implementation of <see cref="T:Tools.TextT.UnicodeT.ICharNameProvider"/></summary>
 <remarks>
 This is singleton class. Use the <see cref="P:Tools.TextT.UnicodeT.SimpleCharNameProvider.Instance"/> property to obtain singleton instance.
 You need instance of this class only if you want to pass it as <see cref="T:Tools.TextT.UnicodeT.ICharNameProvider"/>, otherwise use static function <see cref="M:Tools.TextT.UnicodeT.SimpleCharNameProvider.GetName(System.Int32)"/>.
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.SimpleCharNameProvider.#ctor">
 <summary>Singleton class private CTor</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.SimpleCharNameProvider.GetName(System.Int32)">
 <summary>Gets name of a character</summary>
 <param name="codePoint">A Unicode (UTF-32) code-point</param>
 <returns>Name of the character. This implementation returns for all characters character code (<paramref name="codePoint"/>) in format <c>U+{0:X4}</c>.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePoint"/> is less than zero or greater than <see cref="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.MaxCodePoint"/>.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.SimpleCharNameProvider.ICharNameProvider_GetName(System.Int32)">
 <summary>Gets name of a character</summary>
 <param name="codePoint">A Unicode (UTF-32) code-point</param>
 <returns>Name of the character. This implementation returns for all characters character code (<paramref name="codePoint"/>) in format <c>U+{0:X4}</c>.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePoint"/> is less than zero or greater than <see cref="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.MaxCodePoint"/>.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.SimpleCharNameProvider.Instance">
 <summary>Gets instance of this singleton class</summary>
 <remarks>You only need instance of this class if you want to use it as <see cref="T:Tools.TextT.UnicodeT.ICharNameProvider"/>, otherwise use static method <see cref="M:Tools.TextT.UnicodeT.SimpleCharNameProvider.GetName(System.Int32)"/>.</remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.NamesListParser">
 <summary>This class performs simple and limited parsing of NamesList.txt</summary>
 <remarks>
 The NamesList.txt file is not specifically designed for machine parsing but it provides some unique and usefull data, such as informative aliases and cross-reference.
 <para>Only static members of this class are CLS-Compliant.</para>
 <note>Parsing provided by this class is not exact and complete. Only few types of records are supported. Parsing is based on regular expressions instead of having full parser.</note>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.CHAR">
 <summary>Regex for char as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.TAB">
 <summary>Reges for tabs as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.NAME">
 <summary>Regex fro name as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.LCNAME">
 <summary>Regex for lower-case name as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.LCTAG">
 <summary>Regex for lower-case tag as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.SP">
 <summary>Regex for space as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.LF">
 <summary>Regex for line feed as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.LABEL">
 <summary>Regex for label as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.COMMENT">
 <summary>Regex for comment as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.LINE">
 <summary>Regex for line as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.STRING">
 <summary>Regex for string as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.NAME_LINE">
 <summary>Regex for name line as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.RESERVED_LINE">
 <summary>Regex for reserved line as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.ALIAS_LINE">
 <summary>Regex for alias line as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.CROSS_REF">
 <summary>Regex for corss reference line as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.nameLine">
 <summary>Regex for name line as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.aliasline">
 <summary>reges for alias line as defined in NamesList.html</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListParser.crossRef">
 <summary>regex for cross-reference line as defined in NamesList.html</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.NamesListParser.Read(System.IO.TextReader)">
 <summary>Reads NamesList.txt file and raises events when supported lines are detected</summary>
 <param name="reader">Reader to read NamesList.txt from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null</exception>
</member>
<member name="E:Tools.TextT.UnicodeT.NamesListParser.CodePoint">
 <summary>Raised when code-point header line is reached</summary>
 <param name="arg1">The code of the code-point</param>
 <param name="arg2">The entire line from NamesList.txt</param>
</member>
<member name="E:Tools.TextT.UnicodeT.NamesListParser.Alias">
 <summary>Raised when informal alias line is reached</summary>
 <param name="arg1">The code of the code-point (same as in preceding <see cref="E:Tools.TextT.UnicodeT.NamesListParser.CodePoint"/> event)</param>
 <param name="arg2">Alias name</param>
 <param name="arg3">The entire line from NamesList.txt</param>
</member>
<member name="E:Tools.TextT.UnicodeT.NamesListParser.CrossReference">
 <summary>Raised when cross-reference line is reached</summary>
 <param name="arg1">The code of the code-point (same as in preceding <see cref="E:Tools.TextT.UnicodeT.NamesListParser.CodePoint"/> event)</param>
 <param name="arg2">Code of related code-point</param>
 <param name="arg3">The entire line from NamesList.txt</param>
</member>
<member name="M:Tools.TextT.UnicodeT.NamesListParser.MakeExtensionXml(System.IO.TextReader)">
 <summary>Parses NamesList.txt and generates an XML document thats suitable for <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions"/></summary>
 <param name="reader">A reader to read NamesList.txt from</param>
 <returns>A XML document with UCD-XML-like structure</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null</exception>
 <remarks>The structure of document si like follows:
 <code lang="xml"><![CDATA[
 <ucd xmlns="http://www.unicode.org/ns/2003/ucd/1.0" xmlns:nl="http://unicode.org/Public/UNIDATA/NamesList.txt">
     <repertoire>
         <char cp="0000" nl:cross-ref="0000 0001 0002">
             <nl:alias>Alias 1</nl>
             <nl:alias>Alias 2</nl>
         </char>
     </repertoire>
 </ucd>
 ]]></code>
 The document can contain multiple &lt;char> elements, each corresponding to one code-point in UCD.
 <note>This parser always generates &lt;char> elements even for non-characters.</note>
 Each &lt;char> element has the @cp attribute which identifies the code-point and allows it to be matched to main UCD XML.
 Optional @nl:cross-ref attributte contains whitespace-separated list of referenced codepoints.
 Optionally &lt;nl:alias> elements inside &lt;char> define informative name aliases for the character. &lt;char> cahn have zero or more aliases.
 <para>Resulting XML can be passed to <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> CTor</para>
 </remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.NamesListExtensions">
 <summary>Provides extension method for Unicode Character Dataabase related to properties extracted from NamesList.txt</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListExtensions.XmlNamespace">
 <summary>An XML namespace used for NamesList UCD extension</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.NamesListExtensions.ResourceName">
 <summary>Name of embedded resource in this assembly that contains default copy of UCD NamesList.txt file</summary>
 <remarks>This resources is GZipped.See http://unicode.org/Public/UNIDATA/NamesList.html for details about the file. Lates file can be downloaded from http://unicode.org/Public/UNIDATA/NamesList.txt.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.NamesListExtensions.DefaultNamesList">
 <summary>Gets default instance of NamesAliases extension</summary>
 <remarks>Parses default instance of NamesList.txt that is embedded in this assembly as embeded resource named <see cref="F:Tools.TextT.UnicodeT.NamesListExtensions.ResourceName"/>. Note: This resources is GZipped.</remarks>
 <threadsafety>This property is thread-safe</threadsafety>
</member>
<member name="M:Tools.TextT.UnicodeT.NamesListExtensions.IsNamesListLoaded(Tools.TextT.UnicodeT.UnicodeCharacterDatabase)">
 <summary>gets value indicating if NamesList extension is loaded into given UCD</summary>
 <param name="ucd">UCD to check</param>
 <returns>True if NsmesList XML extension is loaded, false if it is not</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="ucd"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.NamesListExtensions.LoadNamesList(Tools.TextT.UnicodeT.UnicodeCharacterDatabase,System.IO.TextReader)">
 <summary>Loads NamesList extension to given UCD</summary>
 <param name="target">UCD to load NamesList to</param>
 <param name="source">A reader to read NamesList extension to (the file must be in NamesList.txt format - see <see cref="T:Tools.TextT.UnicodeT.NamesListParser"/>)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target"/> or <paramref name="source"/> is null</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="target"/> is already loaded with NamesList extension</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.NamesListExtensions.LoadNamesList(Tools.TextT.UnicodeT.UnicodeCharacterDatabase,System.Xml.Linq.XDocument)">
 <summary>Loads NamesList extension to given UCD from XML</summary>
 <param name="target">UCD to load NamesList to</param>
 <param name="namesListXml">NaesList.txt parsed to XML form. The foem must be same that is returned by <see cref="M:Tools.TextT.UnicodeT.NamesListParser.MakeExtensionXml(System.IO.TextReader)"/>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null or <paramref name="namesListXml"/> is null.</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="target"/> is already loaded with NamesList extension</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="namesListXml"/> is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.NamesListExtensions.LoadNamesList(Tools.TextT.UnicodeT.UnicodeCharacterDatabase)">
 <summary>Loads default NamesList extension to given UCD</summary>
 <param name="target">UCD to load NamesList to</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="target"/> is null</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="target"/> is already loaded with NamesList extension</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.NamesListExtensions.Aliases(Tools.TextT.UnicodeT.UnicodeCodePoint)">
 <summary>Gets informative name aliases for given code point</summary>
 <param name="cp">A code point to get aliases for</param>
 <returns>Array of aliases. An empty array if this code point does not have any aliases. Null if NamesList extension is n ot loaded or <paramref name="cp"/> does not represent single code point.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="cp"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.NamesListExtensions.CrossReferences(Tools.TextT.UnicodeT.UnicodeCodePoint)">
 <summary>Gets corss-references of given code point</summary>
 <param name="cp">A code point to gete cross-references for</param>
 <returns>An array of cross references. Null if <paramref name="cp"/> does not repersent single code point. An empty array if no cross reefernces were found (i.e. the code point has not cross-references or NamesList extension is not loaded for current UCD)</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="cp"/> is nul</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.RadicalStrokeCount">
 <summary>Represents CJK Radical/Stroke count</summary>
 <seelaso cref="T:Tools.TextT.UnicodeT.CjkRadical"/>
 <version version="1.5.4">This structure is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.RadicalStrokeCount.#ctor(Tools.TextT.UnicodeT.CjkRadical,System.Int32,System.Boolean)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.RadicalStrokeCount"/> structure</summary>
 <param name="radical">The radical to counts strokes additional to</param>
 <param name="additionalStrokes">Number of additional strokes</param>
 <param name="simplifiedRadical">Indicates that simplified radical was used</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="additionalStrokes"/> is less than zero.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.RadicalStrokeCount.Radical">
 <summary>Gets tha CJK radical this instance counts additional strokes for</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.RadicalStrokeCount.AdditionalStrokes">
 <summary>Gets number of additional strokes (drawn in addition to <see cref="P:Tools.TextT.UnicodeT.RadicalStrokeCount.Radical"/>) that are necessray to draw a character</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.RadicalStrokeCount.SimplifiedRadical">
 <summary>Gets value indicating that simplified radical was used.</summary>
 <remarks>Only used for simplified radicals</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.RadicalStrokeCount.Parse(System.String)">
 <summary>Parses string to <see cref="T:Tools.TextT.UnicodeT.RadicalStrokeCount"/> object</summary>
 <param name="value">
 A string to parse. Ir should be in format {<see cref="P:Tools.TextT.UnicodeT.RadicalStrokeCount.Radical"/>}.{<see cref="P:Tools.TextT.UnicodeT.RadicalStrokeCount.AdditionalStrokes"/>}.
 The Radical part allows trailing apostrophe (') to indicate simplified radical.
 </param>
 <returns>A <see cref="T:Tools.TextT.UnicodeT.RadicalStrokeCount"/> object initialized from <paramref name="value"/>.</returns>
 <remarks>The radical part of <paramref name="value"/> can be represented as enumerated value, integer or CJK character</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="value"/> does not contain 2 dot(.)-separated parts -or- AdditionalStrokes part of <paramref name="value"/> cannot be parsed as <see cref="T:System.Int32"/></exception>
 <exception cref="T:System.ArgumentException">Radical part of <paramref name="value"/> does not represent a value that can be converted to <see cref="T:Tools.TextT.UnicodeT.CjkRadical"/> value using the <see cref="M:Tools.TextT.UnicodeT.RadicalStrokeCount.LookupRadical(System.String)"/> function.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">AdditionalStrokes part of <paramref name="value"/> represents negative number</exception>
 <exception cref="T:System.OverflowException">AdditionalStrokes part of <paramref name="value"/> is too big or too small for datatype <see cref="T:System.Int32"/>.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.RadicalStrokeCount.LookupRadical(System.String)">
 <summary>Attempts to converts string value to CJK Radical</summary>
 <param name="value">A value that represents a CJK radical. It can be name from the <see cref="T:Tools.TextT.UnicodeT.CjkRadical"/> enumeration, integer value or a Unicode character representing Kang Xi or Unicode supplemental radical.</param>
 <returns>A <see cref="T:Tools.TextT.UnicodeT.CjkRadical"/> enumeration value representing a CJK radical detected from <paramref name="value"/>. Null if radical cannot be detected.</returns>
 <remarks>
 If <paramref name="value"/> is name of <see cref="T:Tools.TextT.UnicodeT.CjkRadical"/> enumeration member or it represents iteger number it's converted to <see cref="T:Tools.TextT.UnicodeT.CjkRadical"/> enumeration value using <see cref="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)"/>.
 If <paramref name="value"/> is single character and the character represents either Kang Xi radical (including variants) or supplemental Unicode radical corresponding <see cref="T:Tools.TextT.UnicodeT.CjkRadical"/> value is returned.
 <para>This function is only meaningfull if you use Kang Xi and/or Unicdoe supplement radicals.</para>
 </remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.RadicalStrokeCount.RadicalToChar(Tools.TextT.UnicodeT.CjkRadical)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.RadicalStrokeCount.RadicalToChar(Tools.TextT.UnicodeT.CjkRadical)">
 <summary>Gets a character that represents given CJK (Kang Xi or Unicode supplemental) radical</summary>
 <param name="radical">A radical</param>
 <returns>A character that represents the radical</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="radical"/> is not one of known radicals.</exception>
 <remarks>This function is only meaningfull if you use Kang Xi and/or Unicdoe supplement radicals.</remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.RadicalStrokeCount.LookupRadical(System.String)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.RadicalStrokeCount.GetSchema">
 <summary>Returns null</summary>
 <returns>Null</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.RadicalStrokeCount.ReadXml(System.Xml.XmlReader)">
 <summary>Generates an object from its XML representation.</summary>
 <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
</member>
<member name="M:Tools.TextT.UnicodeT.RadicalStrokeCount.WriteXml(System.Xml.XmlWriter)">
 <summary>Converts an object into its XML representation.</summary>
 <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
</member>
<member name="M:Tools.TextT.UnicodeT.RadicalStrokeCount.ToString">
 <summary>Gets string representation of this instance</summary>
 <returns>String representation of this instance in format {<see cref="P:Tools.TextT.UnicodeT.RadicalStrokeCount.Radical"/>}.{<see cref="P:Tools.TextT.UnicodeT.RadicalStrokeCount.AdditionalStrokes"/>}. <see cref="P:Tools.TextT.UnicodeT.RadicalStrokeCount.Radical"/> is rendered as integer.</returns>
</member>
<member name="T:Tools.TextT.UnicodeT.CjkRadical">
 <summary>Enumeration of CJK Ideographs' radicals</summary>
 <remarks>
 A radical is part (logical or graphical) of a CJK ideograph that's used to define it and sort it in dictionary.
 <note>
 This enumeration is based on Kang Xi (康熙字典) dictionary with additional Unicode radicals.
 If actual implementation uses different dictionary names of enumeration members are irelevant. Only what matters is numerical value.
 </note>
 <note>
 You should not rely on names and display names of members of this enumeration as they are subject to change.
 Only thing that  really matters is numerical value.
 To get normative data regarding CJK Radicals see <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.CjkRadicals"/>.
 </note>
 To convert between <see cref="T:Tools.TextT.UnicodeT.CjkRadical"/> values and actual characters representing the radicals look for <see cref="M:Tools.TextT.UnicodeT.RadicalStrokeCount.LookupRadical(System.String)"/> and <see cref="M:Tools.TextT.UnicodeT.RadicalStrokeCount.RadicalToChar(Tools.TextT.UnicodeT.CjkRadical)"/> functions.
 </remarks>
 <seelaso cref="T:Tools.TextT.UnicodeT.RadicalStrokeCount"/>
 <seelaso cref="M:Tools.TextT.UnicodeT.RadicalStrokeCount.LookupRadical(System.String)"/>
 <seelaso cref="M:Tools.TextT.UnicodeT.RadicalStrokeCount.RadicalToChar(Tools.TextT.UnicodeT.CjkRadical)"/>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.CjkRadicals"/>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.One">
 <summary>Kang Xi Radical № 1 一 (yī; one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Line">
 <summary>Kang Xi Radical № 2 丨 (shù; line)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Dot">
 <summary>Kang Xi Radical № 3 丶 (diǎn; dot)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Slash">
 <summary>Kang Xi Radical № 4 丿 (piě; slash)</summary>
 <remarks>Variants are: 乀 乁</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Second">
 <summary>Kang Xi Radical № 5 乙 (yǐ; second)</summary>
 <remarks>Variants are: 乚 乛</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Hook">
 <summary>Kang Xi Radical № 6 亅 (gōu; hook)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Two">
 <summary>Kang Xi Radical № 7 二 (èr; two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Lid">
 <summary>Kang Xi Radical № 8 亠 (tóu; lid)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Person">
 <summary>Kang Xi Radical № 9 人 (rén; person)</summary>
 <remarks>Variants are: 亻</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Legs">
 <summary>Kang Xi Radical № 10 儿 (ér; legs)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Enter">
 <summary>Kang Xi Radical № 11 入 (rù; enter)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Eight">
 <summary>Kang Xi Radical № 12 八 (bā; eight)</summary>
 <remarks>Variants are: 丷</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.DownBox">
 <summary>Kang Xi Radical № 13 冂 (jiǒng; down box)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Cover">
 <summary>Kang Xi Radical № 14 冖 (mì; cover)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Ice">
 <summary>Kang Xi Radical № 15 冫 (bīng; ice)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Table">
 <summary>Kang Xi Radical № 16 几 (jī; table)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.OpenBox">
 <summary>Kang Xi Radical № 17 凵 (qǔ; open box)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Knife">
 <summary>Kang Xi Radical № 18 刀 (dāo; knife)</summary>
 <remarks>Variants are: 刂</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Power">
 <summary>Kang Xi Radical № 19 力 (lì; power)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Wrap">
 <summary>Kang Xi Radical № 20 勹 (bāo; wrap)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Ladle">
 <summary>Kang Xi Radical № 21 匕 (bǐ; ladle)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.RightOpenBox">
 <summary>Kang Xi Radical № 22 匚 (fāng; right open box)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.HidingEnclosure">
 <summary>Kang Xi Radical № 23 匸 (xǐ; hiding enclosure)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Ten">
 <summary>Kang Xi Radical № 24 十 (shí; ten)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Divination">
 <summary>Kang Xi Radical № 25 卜 (bǔ; divination)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Seal">
 <summary>Kang Xi Radical № 26 卩 (jié; seal)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Cliff">
 <summary>Kang Xi Radical № 27 厂 (hàn; cliff)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Private">
 <summary>Kang Xi Radical № 28 厶 (sī; private)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Again">
 <summary>Kang Xi Radical № 29 又 (yòu; again)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Mouth">
 <summary>Kang Xi Radical № 30 口 (kǒu; mouth)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Enclosure">
 <summary>Kang Xi Radical № 31 囗 (wéi; enclosure)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Earth">
 <summary>Kang Xi Radical № 32 土 (tǔ; earth)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Scholar">
 <summary>Kang Xi Radical № 33 士 (shì; scholar)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Go">
 <summary>Kang Xi Radical № 34 夂 (suī; go)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.GoSlowly">
 <summary>Kang Xi Radical № 35 夊 (zhī; go slowly)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Night">
 <summary>Kang Xi Radical № 36 夕 (xī; night)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Big">
 <summary>Kang Xi Radical № 37 大 (dà; big)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Woman">
 <summary>Kang Xi Radical № 38 女 (nǚ; woman)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Child">
 <summary>Kang Xi Radical № 39 子 (zǐ; child)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Roof">
 <summary>Kang Xi Radical № 40 宀 (gài; roof)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Inch">
 <summary>Kang Xi Radical № 41 寸 (cùn; inch)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Small">
 <summary>Kang Xi Radical № 42 小 (xiǎo; small)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Lame">
 <summary>Kang Xi Radical № 43 尢 (yóu; lame)</summary>
 <remarks>Variants are: 尣</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Corpse">
 <summary>Kang Xi Radical № 44 尸 (shī; corpse)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Sprout">
 <summary>Kang Xi Radical № 45 屮 (chè; sprout)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Mountain_Shān">
 <summary>Kang Xi Radical № 46 山 (shān; mountain)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.River">
 <summary>Kang Xi Radical № 47 川 (chuān; river)</summary>
 <remarks>Variants are: 巛 巜</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Work">
 <summary>Kang Xi Radical № 48 工 (gōng; work)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Oneself_Jǐ">
 <summary>Kang Xi Radical № 49 己 (jǐ; oneself)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Towel">
 <summary>Kang Xi Radical № 50 巾 (jīn; towel)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Dry">
 <summary>Kang Xi Radical № 51 干 (gān; dry)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Thread">
 <summary>Kang Xi Radical № 52 幺 (yāo; thread)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Shelter">
 <summary>Kang Xi Radical № 53 广 (guǎng; shelter)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Stride">
 <summary>Kang Xi Radical № 54 廴 (yǐn; stride)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.HandsJoined">
 <summary>Kang Xi Radical № 55 廾 (gǒng; hands joined)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.ShootWithABow">
 <summary>Kang Xi Radical № 56 弋 (yì; shoot with a bow)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Bow">
 <summary>Kang Xi Radical № 57 弓 (gōng; bow)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Snout">
 <summary>Kang Xi Radical № 58 彐 (jì; snout)</summary>
 <remarks>Variants are: 彑</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Hair">
 <summary>Kang Xi Radical № 59 彡 (shān; hair)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Step">
 <summary>Kang Xi Radical № 60 彳 (chì; step)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Heart">
 <summary>Kang Xi Radical № 61 心 (xīn; heart)</summary>
 <remarks>Variants are: 忄</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Spear_Gē">
 <summary>Kang Xi Radical № 62 戈 (gē; spear)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Door">
 <summary>Kang Xi Radical № 63 户 (hù; door)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Hand">
 <summary>Kang Xi Radical № 64 手 (shǒu; hand)</summary>
 <remarks>Variants are: 扌</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Branch">
 <summary>Kang Xi Radical № 65 支 (zhī; branch)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Rap">
 <summary>Kang Xi Radical № 66 攴 (pū; rap)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Script">
 <summary>Kang Xi Radical № 67 攵 (wén; script)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Dipper">
 <summary>Kang Xi Radical № 68 斗 (dǒu; dipper)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Axe">
 <summary>Kang Xi Radical № 69 斤 (jīn; axe)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Square">
 <summary>Kang Xi Radical № 70 方 (fāng; square)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Not">
 <summary>Kang Xi Radical № 71 无 (wú; not)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Sun">
 <summary>Kang Xi Radical № 72 日 (rì; sun)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Say">
 <summary>Kang Xi Radical № 73 曰 (yuē; say)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Moon">
 <summary>Kang Xi Radical № 74 月 (yuè; moon)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Tree">
 <summary>Kang Xi Radical № 75 木 (mù; tree)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Lack">
 <summary>Kang Xi Radical № 76 欠 (qiàn; lack)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Stop">
 <summary>Kang Xi Radical № 77 止 (zhǐ; stop)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Death">
 <summary>Kang Xi Radical № 78 歹 (dǎi; death)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Weapon">
 <summary>Kang Xi Radical № 79 殳 (shū; weapon)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Mother">
 <summary>Kang Xi Radical № 80 毋 (mǔ; mother)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Compare">
 <summary>Kang Xi Radical № 81 比 (bǐ; compare)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Fur">
 <summary>Kang Xi Radical № 82 毛 (máo; fur)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Clan">
 <summary>Kang Xi Radical № 83 氏 (shì; clan)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Steam">
 <summary>Kang Xi Radical № 84 气 (qì; steam)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Water">
 <summary>Kang Xi Radical № 85 水 (shuì; water)</summary>
 <remarks>Variants are: 氵</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Fire">
 <summary>Kang Xi Radical № 86 火 (huǒ; fire)</summary>
 <remarks>Variants are: 灬</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Claw">
 <summary>Kang Xi Radical № 87 爪 (zhǎo; claw)</summary>
 <remarks>Variants are: 爫</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Father">
 <summary>Kang Xi Radical № 88 父 (fù; father)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.LinesOnATrigram">
 <summary>Kang Xi Radical № 89 爻 (yáo; lines on a trigram)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.HalfOfATreeTrunk">
 <summary>Kang Xi Radical № 90 爿 (qiáng; half of a tree trunk)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Slice">
 <summary>Kang Xi Radical № 91 片 (piàn; slice)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Fang">
 <summary>Kang Xi Radical № 92 牙 (yá; fang)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Cow">
 <summary>Kang Xi Radical № 93 牛 (niú; cow)</summary>
 <remarks>Variants are: 牜</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Dog">
 <summary>Kang Xi Radical № 94 犭 (quǎn; dog)</summary>
 <remarks>Variants are: 犬</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Profound">
 <summary>Kang Xi Radical № 95 玄 (xuán; profound)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Jade">
 <summary>Kang Xi Radical № 96 玉 (yù; jade)</summary>
 <remarks>Variants are: 王</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Melon">
 <summary>Kang Xi Radical № 97 瓜 (guā; melon)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Tile">
 <summary>Kang Xi Radical № 98 瓦 (wǎ; tile)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Sweet">
 <summary>Kang Xi Radical № 99 甘 (gān; sweet)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Life">
 <summary>Kang Xi Radical № 100 生 (shēng; life)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Use">
 <summary>Kang Xi Radical № 101 用 (yòng; use)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Field">
 <summary>Kang Xi Radical № 102 田 (tián; field)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Cloth">
 <summary>Kang Xi Radical № 103 疋 (pǐ; cloth)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Ill">
 <summary>Kang Xi Radical № 104 疒 (bìng; ill)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.FootSteps">
 <summary>Kang Xi Radical № 105 癶 (bō; foot steps)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.White">
 <summary>Kang Xi Radical № 106 白 (bái; white)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Skin">
 <summary>Kang Xi Radical № 107 皮 (pí; skin)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Dish">
 <summary>Kang Xi Radical № 108 皿 (mǐn; dish)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Eye">
 <summary>Kang Xi Radical № 109 目 (mù; eye)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Spear_Máo">
 <summary>Kang Xi Radical № 110 矛 (máo; spear)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Arrow">
 <summary>Kang Xi Radical № 111 矢 (shǐ; arrow)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Stone">
 <summary>Kang Xi Radical № 112 石 (shí; stone)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Spirit">
 <summary>Kang Xi Radical № 113 示 (shì; spirit)</summary>
 <remarks>Variants are: 礻</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Track">
 <summary>Kang Xi Radical № 114 禸 (róu; track)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Grain">
 <summary>Kang Xi Radical № 115 禾 (hé; grain)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Cave">
 <summary>Kang Xi Radical № 116 穴 (xuè; cave)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Stand">
 <summary>Kang Xi Radical № 117 立 (lì; stand)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Bamboo">
 <summary>Kang Xi Radical № 118 竹 (zhú; bamboo)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Rice">
 <summary>Kang Xi Radical № 119 米 (mǐ; rice)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Silk">
 <summary>Kang Xi Radical № 120 纟 (sī; silk)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Jar">
 <summary>Kang Xi Radical № 121 缶 (fǒu; jar)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Net">
 <summary>Kang Xi Radical № 122 网 (wǎng; net)</summary>
 <remarks>Variants are: 罒</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Sheep">
 <summary>Kang Xi Radical № 123 羊 (yáng; sheep)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Feather">
 <summary>Kang Xi Radical № 124 羽 (yǔ; feather)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Old">
 <summary>Kang Xi Radical № 125 老 (lǎo; old)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.And">
 <summary>Kang Xi Radical № 126 而 (ér; and)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Plow">
 <summary>Kang Xi Radical № 127 耒 (lěi; plow)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Ear">
 <summary>Kang Xi Radical № 128 耳 (ěr; ear)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Brush">
 <summary>Kang Xi Radical № 129 聿 (yù; brush)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Meat">
 <summary>Kang Xi Radical № 130 肉 (ròu; meat)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Minister">
 <summary>Kang Xi Radical № 131 臣 (chén; minister)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Oneself_Zì">
 <summary>Kang Xi Radical № 132 自 (zì; oneself)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Arrive">
 <summary>Kang Xi Radical № 133 至 (zhì; arrive)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Mortar">
 <summary>Kang Xi Radical № 134 臼 (jiù; mortar)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Tongue">
 <summary>Kang Xi Radical № 135 舌 (shé; tongue)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Contrary">
 <summary>Kang Xi Radical № 136 舛 (chuǎn; contrary)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Boat">
 <summary>Kang Xi Radical № 137 舟 (zhōu; boat)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Mountain_Gèn">
 <summary>Kang Xi Radical № 138 艮 (gèn; mountain)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Color">
 <summary>Kang Xi Radical № 139 色 (sè; color)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Grass">
 <summary>Kang Xi Radical № 140 艹 (cǎo; grass)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Tiger">
 <summary>Kang Xi Radical № 141 虍 (hǔ; tiger)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Insect">
 <summary>Kang Xi Radical № 142 虫 (chóng; insect)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Blood">
 <summary>Kang Xi Radical № 143 血 (xuě; blood)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Walk_Xíng">
 <summary>Kang Xi Radical № 144 行 (xíng; walk)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Clothes">
 <summary>Kang Xi Radical № 145 衣 (yī; clothes)</summary>
 <remarks>Variants are: 衤</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.West">
 <summary>Kang Xi Radical № 146 西 (xī; west)</summary>
 <remarks>Variants are: 覀</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.See">
 <summary>Kang Xi Radical № 147 见 (jiàn; see)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Horn">
 <summary>Kang Xi Radical № 148 角 (jiǎo; horn)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Speech">
 <summary>Kang Xi Radical № 149 讠 (yán; speech)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Valley">
 <summary>Kang Xi Radical № 150 谷 (gǔ; valley)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Bean">
 <summary>Kang Xi Radical № 151 豆 (dòu; bean)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Pig">
 <summary>Kang Xi Radical № 152 豖 (shǐ; pig)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Badger">
 <summary>Kang Xi Radical № 153 豸 (zhì; badger)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Shell">
 <summary>Kang Xi Radical № 154 贝 (bèi; shell)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Red">
 <summary>Kang Xi Radical № 155 赤 (chì; red)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Walk_Zǒu">
 <summary>Kang Xi Radical № 156 走 (zǒu; walk)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Foot">
 <summary>Kang Xi Radical № 157 足 (zú; foot)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Body">
 <summary>Kang Xi Radical № 158 身 (shēn; body)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Cart">
 <summary>Kang Xi Radical № 159 车 (chē; cart)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Bitter">
 <summary>Kang Xi Radical № 160 辛 (xīn; bitter)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Morning">
 <summary>Kang Xi Radical № 161 辰 (chén; morning)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Walk_Chuò">
 <summary>Kang Xi Radical № 162 辶 (chuò; walk)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.City">
 <summary>Kang Xi Radical № 163 邑 (yì; city)</summary>
 <remarks>Variants are: 阝</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Wine">
 <summary>Kang Xi Radical № 164 酉 (yǒu; wine)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Distinguish">
 <summary>Kang Xi Radical № 165 釆 (biàn; distinguish)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Village">
 <summary>Kang Xi Radical № 166 里 (lǐ; village)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Metal">
 <summary>Kang Xi Radical № 167 钅 (jīn; metal)</summary>
 <remarks>Variants are: 金</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Long">
 <summary>Kang Xi Radical № 168 长 (cháng; long)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Gate">
 <summary>Kang Xi Radical № 169 门 (mén; gate)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Mound">
 <summary>Kang Xi Radical № 170 阜 (fù; mound)</summary>
 <remarks>Variants are: 阝</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Slave">
 <summary>Kang Xi Radical № 171 隶 (lì; slave)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.ShortTailedBird">
 <summary>Kang Xi Radical № 172 隹 (zhuī; short-tailed bird)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Rain">
 <summary>Kang Xi Radical № 173 雨 (yǔ; rain)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Blue">
 <summary>Kang Xi Radical № 174 青 (qīng; blue)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Wrong">
 <summary>Kang Xi Radical № 175 非 (fēi; wrong)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Face">
 <summary>Kang Xi Radical № 176 面 (miàn; face)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Leather">
 <summary>Kang Xi Radical № 177 革 (gé; leather)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SoftLeather">
 <summary>Kang Xi Radical № 178 韦 (wěi; soft leather)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Leek">
 <summary>Kang Xi Radical № 179 韭 (jiǔ; leek)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Sound">
 <summary>Kang Xi Radical № 180 音 (yīn; sound)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Page">
 <summary>Kang Xi Radical № 181 页 (yè; page)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Wind">
 <summary>Kang Xi Radical № 182 风 (fēng; wind)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Fly">
 <summary>Kang Xi Radical № 183 飞 (fēi; fly)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Eat">
 <summary>Kang Xi Radical № 184 饣 (shí; eat)</summary>
 <remarks>Variants are: 飠 食</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Head">
 <summary>Kang Xi Radical № 185 首 (shǒu; head)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Fragrant">
 <summary>Kang Xi Radical № 186 香 (xiāng; fragrant)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Horse">
 <summary>Kang Xi Radical № 187 马 (mǎ; horse)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Bone">
 <summary>Kang Xi Radical № 188 骨 (gǔ; bone)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.High">
 <summary>Kang Xi Radical № 189 高 (gāo; high)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.LongHair">
 <summary>Kang Xi Radical № 190 髟 (biāo; long hair)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Fight">
 <summary>Kang Xi Radical № 191 鬥 (dòu; fight)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SacrificialWine">
 <summary>Kang Xi Radical № 192 鬯 (chàng; sacrificial wine)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Cauldron">
 <summary>Kang Xi Radical № 193 鬲 (lì; cauldron)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Ghost">
 <summary>Kang Xi Radical № 194 鬼 (guǐ; ghost)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Fish">
 <summary>Kang Xi Radical № 195 鱼 (yú; fish)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Bird">
 <summary>Kang Xi Radical № 196 鸟 (niǎo; bird)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Salty">
 <summary>Kang Xi Radical № 197 卤 (lǔ; salty)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Deer">
 <summary>Kang Xi Radical № 198 鹿 (lù; deer)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Wheat">
 <summary>Kang Xi Radical № 199 麦 (mài; wheat)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Hemp">
 <summary>Kang Xi Radical № 200 麻 (má; hemp)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Yellow">
 <summary>Kang Xi Radical № 201 黃 (huáng; yellow)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Millet">
 <summary>Kang Xi Radical № 202 黍 (shǔ; millet)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Black">
 <summary>Kang Xi Radical № 203 黑 (hēi; black)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Embroidery">
 <summary>Kang Xi Radical № 204 黹 (zhǐ; embroidery)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Frog">
 <summary>Kang Xi Radical № 205 黾 (mǐn; frog)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Tripod">
 <summary>Kang Xi Radical № 206 鼎 (dǐng; tripod)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Drum">
 <summary>Kang Xi Radical № 207 鼓 (gǔ; drum)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Rat">
 <summary>Kang Xi Radical № 208 鼠 (shǔ; rat)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Nose">
 <summary>Kang Xi Radical № 209 鼻 (bí; nose)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Even">
 <summary>Kang Xi Radical № 210 齐 (qí; even)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Tooth">
 <summary>Kang Xi Radical № 211 齿 (chǐ; tooth)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Dragon">
 <summary>Kang Xi Radical № 212 龙 (lóng; dragon)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Turtle">
 <summary>Kang Xi Radical № 213 龟 (guī; turtle)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.Flute">
 <summary>Kang Xi Radical № 214 龠 (yuè; flute)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupRepeat">
<summary>CJK Supplemental Radical ⺀ (repeat)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCliff">
<summary>CJK Supplemental Radical ⺁ (cliff)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSecondOne">
<summary>CJK Supplemental Radical ⺂ (second one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSecondTwo">
<summary>CJK Supplemental Radical ⺃ (second two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSecondThree">
<summary>CJK Supplemental Radical ⺄ (second three)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupPerson">
<summary>CJK Supplemental Radical ⺅ (person)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupBox">
<summary>CJK Supplemental Radical ⺆ (box)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupTable">
<summary>CJK Supplemental Radical ⺇ (table)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupKnifeOne">
<summary>CJK Supplemental Radical ⺈ (knife one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupKnifeTwo">
<summary>CJK Supplemental Radical ⺉ (knife two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupDivination">
<summary>CJK Supplemental Radical ⺊ (divination)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSeal">
<summary>CJK Supplemental Radical ⺋ (seal)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSmallOne">
<summary>CJK Supplemental Radical ⺌ (small one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSmallTwo">
<summary>CJK Supplemental Radical ⺍ (small two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupLameOne">
<summary>CJK Supplemental Radical ⺎ (lame one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupLameTwo">
<summary>CJK Supplemental Radical ⺏ (lame two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupLameThree">
<summary>CJK Supplemental Radical ⺐ (lame three)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupLameFour">
<summary>CJK Supplemental Radical ⺑ (lame four)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSnake">
<summary>CJK Supplemental Radical ⺒ (snake)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupThread">
<summary>CJK Supplemental Radical ⺓ (thread)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSnoutOne">
<summary>CJK Supplemental Radical ⺔ (snout one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSnoutTwo">
<summary>CJK Supplemental Radical ⺕ (snout two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupHeartOne">
<summary>CJK Supplemental Radical ⺖ (heart one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupHeartTwo">
<summary>CJK Supplemental Radical ⺗ (heart two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupHand">
<summary>CJK Supplemental Radical ⺘ (hand)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupRap">
<summary>CJK Supplemental Radical ⺙ (rap)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupChoke">
<summary>CJK Supplemental Radical ⺛ (choke)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSun">
<summary>CJK Supplemental Radical ⺜ (sun)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupMoon">
<summary>CJK Supplemental Radical ⺝ (moon)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupDeath">
<summary>CJK Supplemental Radical ⺞ (death)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupMother">
<summary>CJK Supplemental Radical ⺟ (mother)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCivilian">
<summary>CJK Supplemental Radical ⺠ (civilian)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupWaterOne">
<summary>CJK Supplemental Radical ⺡ (water one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupWaterTwo">
<summary>CJK Supplemental Radical ⺢ (water two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupFire">
<summary>CJK Supplemental Radical ⺣ (fire)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupPawOne">
<summary>CJK Supplemental Radical ⺤ (paw one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupPawTwo">
<summary>CJK Supplemental Radical ⺥ (paw two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSimplifiedHalfTreeTrunk">
<summary>CJK Supplemental Radical ⺦ (simplified half tree trunk)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCow">
<summary>CJK Supplemental Radical ⺧ (cow)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupDog">
<summary>CJK Supplemental Radical ⺨ (dog)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupJade">
<summary>CJK Supplemental Radical ⺩ (jade)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupBoltOfCloth">
<summary>CJK Supplemental Radical ⺪ (bolt of cloth)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupEye">
<summary>CJK Supplemental Radical ⺫ (eye)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSpiritOne">
<summary>CJK Supplemental Radical ⺬ (spirit one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSpiritTwo">
<summary>CJK Supplemental Radical ⺭ (spirit two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupBamboo">
<summary>CJK Supplemental Radical ⺮ (bamboo)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSilk">
<summary>CJK Supplemental Radical ⺯ (silk)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedSilk">
<summary>CJK Supplemental Radical ⺰ (c-simplified silk)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupNetOne">
<summary>CJK Supplemental Radical ⺱ (net one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupNetTwo">
<summary>CJK Supplemental Radical ⺲ (net two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupNetThree">
<summary>CJK Supplemental Radical ⺳ (net three)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupNetFour">
<summary>CJK Supplemental Radical ⺴ (net four)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupMesh">
<summary>CJK Supplemental Radical ⺵ (mesh)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSheep">
<summary>CJK Supplemental Radical ⺶ (sheep)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupRam">
<summary>CJK Supplemental Radical ⺷ (ram)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupEwe">
<summary>CJK Supplemental Radical ⺸ (ewe)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupOld">
<summary>CJK Supplemental Radical ⺹ (old)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupBrushOne">
<summary>CJK Supplemental Radical ⺺ (brush one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupBrushTwo">
<summary>CJK Supplemental Radical ⺻ (brush two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupMeat">
<summary>CJK Supplemental Radical ⺼ (meat)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupMortar">
<summary>CJK Supplemental Radical ⺽ (mortar)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupGrassOne">
<summary>CJK Supplemental Radical ⺾ (grass one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupGrassTwo">
<summary>CJK Supplemental Radical ⺿ (grass two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupGrassThree">
<summary>CJK Supplemental Radical ⻀ (grass three)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupTiger">
<summary>CJK Supplemental Radical ⻁ (tiger)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupClothes">
<summary>CJK Supplemental Radical ⻂ (clothes)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupWestOne">
<summary>CJK Supplemental Radical ⻃ (west one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupWestTwo">
<summary>CJK Supplemental Radical ⻄ (west two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedSee">
<summary>CJK Supplemental Radical ⻅ (c-simplified see)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSimplifiedHorn">
<summary>CJK Supplemental Radical ⻆ (simplified horn)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupHorn">
<summary>CJK Supplemental Radical ⻇ (horn)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedSpeech">
<summary>CJK Supplemental Radical ⻈ (c-simplified speech)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedShell">
<summary>CJK Supplemental Radical ⻉ (c-simplified shell)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupFoot">
<summary>CJK Supplemental Radical ⻊ (foot)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedCart">
<summary>CJK Supplemental Radical ⻋ (c-simplified cart)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSimplifiedWalk">
<summary>CJK Supplemental Radical ⻌ (simplified walk)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupWalkOne">
<summary>CJK Supplemental Radical ⻍ (walk one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupWalkTwo">
<summary>CJK Supplemental Radical ⻎ (walk two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCity">
<summary>CJK Supplemental Radical ⻏ (city)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedGold">
<summary>CJK Supplemental Radical ⻐ (c-simplified gold)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupLongOne">
<summary>CJK Supplemental Radical ⻑ (long one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupLongTwo">
<summary>CJK Supplemental Radical ⻒ (long two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedLong">
<summary>CJK Supplemental Radical ⻓ (c-simplified long)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedGate">
<summary>CJK Supplemental Radical ⻔ (c-simplified gate)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupMoundOne">
<summary>CJK Supplemental Radical ⻕ (mound one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupMoundTwo">
<summary>CJK Supplemental Radical ⻖ (mound two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupRain">
<summary>CJK Supplemental Radical ⻗ (rain)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupBlue">
<summary>CJK Supplemental Radical ⻘ (blue)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedTannedLeather">
<summary>CJK Supplemental Radical ⻙ (c-simplified tanned leather)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedLeaf">
<summary>CJK Supplemental Radical ⻚ (c-simplified leaf)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedWind">
<summary>CJK Supplemental Radical ⻛ (c-simplified wind)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedFly">
<summary>CJK Supplemental Radical ⻜ (c-simplified fly)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupEatOne">
<summary>CJK Supplemental Radical ⻝ (eat one)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupEatTwo">
<summary>CJK Supplemental Radical ⻞ (eat two)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupEatThree">
<summary>CJK Supplemental Radical ⻟ (eat three)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedEat">
<summary>CJK Supplemental Radical ⻠ (c-simplified eat)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupHead">
<summary>CJK Supplemental Radical ⻡ (head)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedHorse">
<summary>CJK Supplemental Radical ⻢ (c-simplified horse)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupBone">
<summary>CJK Supplemental Radical ⻣ (bone)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupGhost">
<summary>CJK Supplemental Radical ⻤ (ghost)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedFish">
<summary>CJK Supplemental Radical ⻥ (c-simplified fish)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedBird">
<summary>CJK Supplemental Radical ⻦ (c-simplified bird)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedSalt">
<summary>CJK Supplemental Radical ⻧ (c-simplified salt)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSimplifiedWheat">
<summary>CJK Supplemental Radical ⻨ (simplified wheat)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupSimplifiedYellow">
<summary>CJK Supplemental Radical ⻩ (simplified yellow)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedFrog">
<summary>CJK Supplemental Radical ⻪ (c-simplified frog)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupJSimplifiedEven">
<summary>CJK Supplemental Radical ⻫ (j-simplified even)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedEven">
<summary>CJK Supplemental Radical ⻬ (c-simplified even)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupJSimplifiedTooth">
<summary>CJK Supplemental Radical ⻭ (j-simplified tooth)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedTooth">
<summary>CJK Supplemental Radical ⻮ (c-simplified tooth)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupJSimplifiedDragon">
<summary>CJK Supplemental Radical ⻯ (j-simplified dragon)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedDragon">
<summary>CJK Supplemental Radical ⻰ (c-simplified dragon)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupTurtle">
<summary>CJK Supplemental Radical ⻱ (turtle)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupJSimplifiedTurtle">
<summary>CJK Supplemental Radical ⻲ (j-simplified turtle)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadical.SupCSimplifiedTurtle">
<summary>CJK Supplemental Radical ⻳ (c-simplified turtle)</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.CjkRadicalInfo">
 <summary>Provides information and points to CJK Radical</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.CjkRadicalInfo.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.CjkRadicalInfo.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeStandardizedVariant"/> class</summary>
 <param name="element">A <see cref="T:System.Xml.Linq.XElement"/> that represents this named sequence</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;standardized-variant> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.CjkRadicalInfo.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CjkRadicalInfo.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CjkRadicalInfo.Radical">
 <summary>Gets radical number as enumerated value</summary>
 <remarks>Names of members of the <see cref="T:Tools.TextT.UnicodeT.CjkRadical"/> enumeration are just informative. Only what really matters is numeric value.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CjkRadicalInfo.Number">
 <summary>Gets radical number as <see cref="T:System.Int32"/></summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CjkRadicalInfo.IsSimplified">
 <summary>Gets value indicating if this radical represents simplified version</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CjkRadicalInfo.RadicalCodePoint">
 <summary>Gets a Code Point that represents this radical</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CjkRadicalInfo.RadicalCharacter">
 <summary>Gets string that represents this radical</summary>
 <remarks>For non-BMP characters returns 2 characters (surrogate pair)</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.CjkRadicalInfo.IdeographCodePoint">
 <summary>Gets a Code Point that represents radical associated ideograph</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.CjkRadicalInfo.IdeographCharacter">
 <summary>Gets string that represents this radical associated ideograph</summary>
 <remarks>For non-BMP characters returns 2 characters (surrogate pair)</remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.UcdLocalizationProvider">
 <summary>A base class for localization providers to provide localized (translated) data for Unicode Character Database</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UcdLocalizationProvider.LocalizationNamespaceTemplate">
 <summary>A template for <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/> to produce namespace name of localization namespace.</summary>
 <remarks>Placeholder {0} must be replaced with <see cref="M:System.Web.HttpUtility.UrlEncode(System.Byte[])">URL-encoded</see> culture name.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UcdLocalizationProvider.Default">
 <summary>Gets default UCD locallization provider that uses built-in localizations</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UcdLocalizationProvider.ResourceName">
 <summary>Name of default resource that contains localized character names for UCD</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdLocalizationProvider.DocumentExists(System.String)">
 <summary>When overriden in derived class gets value indivating if localized document for given culture exists</summary>
 <param name="culture">Name of culture to check</param>
 <returns>True if document for given culture exists, false if it does not exist. Only exact culture given in <paramref name="culture"/> is tested. No parent cultureds are considered.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdLocalizationProvider.GetDocument(System.String)">
 <summary>When overriden in derived class gets an XML document in UCD localization format that contains localized values for given culture</summary>
 <param name="culture">Culture to get document for</param>
 <returns>An XML document in UCD XML localization format that contains localization data for given culture. Null if localization data for given culture do not exist. No parent cultures are considered. Only data for exactly requested culture are returned (if available).</returns>
 <remarks>
 Formal of localization XML document is basically same as general UCD XML format + extensions. But only some data are used for localization. Currently character names (via aliases) and block names can be localized.
 The structure of the document is following:
 <code lang="XML"><![CDATA[
 <ucd xml:lang="cs" xmlns:nl="http://unicode.org/Public/UNIDATA/NamesList.txt#loc" xmlns="http://www.unicode.org/ns/2003/ucd/1.0">
     <repertoire>
         <char cp="000E">
             <nl:alias>Posun ven</nl:alias>
         </char>
     </repertoire>
     <blocks>
         <block first-cp="1F200" last-cp="1F2FF" name="Uzavřené ideografy, dodatek" />
     </blocks>
 </ucd>
 ]]></code>
 <list type="table">
 <item><term><c>ucd/@xml:lang</c></term><description>Indicates document lnaguage. Just informative value. Not checked.</description></item>
 <item><term><c>char/@cp</c></term><description>Identifies character which name will be localized</description></item>
 <item><term><c>char/nl:alias</c></term><description>Localized name of character. Unlike in NamesList extension, only one (1st) &lt;nl:alias> is used.</description></item>
 <item><term><c>block/@first-cp</c> and <c>block/@last-cp</c></term><description>Identify block which name will be localized.</description></item>
 <item><term><c>block/@name</c></term><description>Localized block name</description></item>
 </list>
 Only attributtes and elements listed above are currently used by UCD localizations. Other attributtes and elements are ignored.
 It's not possible to localize name of multi-codepoint code-point.
 Use only &lt;char> element to localize names of code-points (even for non-characters etc.).
 Both sections - &lt;repertoire> and &lt;blocks> are optional.
 It!s not necessary to provide localized names of all code-points and blocks.
 </remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdLocalizationProvider.GetCulturesSupported">
 <summary>When overriden in derived class gets array of cultures available</summary>
 <returns>Arra of names of cultures available for localization.</returns>
 <remarks><note>Localization of particular culture can be just partial. In extreme case it can be empty or contain just few code-points or blocks.</note></remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdLocalizationProvider.UnGZipResource(System.IO.Stream)">
 <summary>Helper method that can be passed to <see cref="T:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider"/> or <see cref="T:Tools.TextT.UnicodeT.FileUcdLocalizationProvider"/> CTor to decompress GZipped stream</summary>
 <param name="gzipped">A GZipped stream</param>
 <returns>Decompressed stream</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="gzipped"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="gzipped"/>.<see cref="P:System.IO.Stream.CanRead">CanRead</see> is false</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdLocalizationProvider.GetCultureNamespace(System.String)">
 <summary>Creates a name of XML namespace to be used for specific culture localizations</summary>
 <param name="cultureName">Name of the culture</param>
 <returns>A namespace that is used for localizations of given culture</returns>
 <seelaso cref="F:Tools.TextT.UnicodeT.UcdLocalizationProvider.LocalizationNamespaceTemplate"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdLocalizationProvider.GetLocalizedDocument(System.Globalization.CultureInfo)">
 <summary>Constructs an XML document that contains localized value for all possible items in UCD</summary>
 <param name="culture">Culture to get localized value for. If null current UI culture is used.</param>
 <returns>A XML document that contains values localized for given culture of one of its parent cultures. This document is usually combination of several documents.</returns>
 <remarks>
 Resulting XML document is in UCD XML format similar to UCD localization files (obtained via <see cref="M:Tools.TextT.UnicodeT.UcdLocalizationProvider.GetDocument(System.String)"/>).
 <para>
 Code point names are localized in /ucd/repertoire/char/nl:alias elements. (Also similar to name list XML format.)
 But the nl prefix represents different namespace for each <paramref name="culture"/>.
 The namespace name is in form http://unicode.org/Public/UNIDATA/NamesList.txt?culture={Culture} where culture is <see cref="M:System.Web.HttpUtility.UrlEncode(System.Byte[])">URL-encoded</see> <paramref name="culture"/>.<see cref="P:System.Globalization.CultureInfo.Name">Name</see>.
 Also the root &lt;ucd> elemtn has xml:lang attribute set to <paramref name="culture"/>.<see cref="P:System.Globalization.CultureInfo.Name">Name</see>.
 In case localization of character name comes from different (parent) culture than <paramref name="culture"/> a &lt;nl:alias> element has the xml:lang attribute that reffers to actual culture localized name came from.
 All codepoints are localized using the &lt;char> (even non-characters and others) element identified by cp attribute (code point in hex).
 </para>
 <para>
 Block names are localized in /ucd/blocks/block/@name.
 If localized name of block comes from culture other than <paramref name="culture"/> the &lt;block> element has xml:lang attribute.
 </para>
 <para>Default namespace is http://www.unicode.org/ns/2003/ucd/1.0.</para>
 </remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider">
 <summary>Implements resource-based <see cref="T:Tools.TextT.UnicodeT.UcdLocalizationProvider"/>.</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider.#ctor(System.String,System.Reflection.Assembly,System.Func{System.IO.Stream,System.IO.Stream})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider"/> from assembly</summary>
 <param name="resourceName">Name of resource that contains an XML codument with UCD localization data</param>
 <param name="assembly">An assembly that contains the resource</param>
 <param name="streamTransformer">Optional function that transforms assembly manifest resource stream to another stream (e.g. decompresses it)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="resourceName"/> is null or <paramref name="assembly"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider.#ctor(System.String,System.Type,System.Func{System.IO.Stream,System.IO.Stream})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider"/> from type</summary>
 <param name="resourceName">Name of resource that contains an XML codument with UCD localization data</param>
 <param name="typeFromAssembly">Any type form an assembly that contains the resource</param>
 <param name="streamTransformer">Optional function that transforms assembly manifest resource stream to another stream (e.g. decompresses it)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="resourceName"/> is null or <paramref name="typeFromAssembly"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider.DocumentExists(System.String)">
 <summary>Gets value indivating if localized document for given culture exists</summary>
 <param name="culture">Name of culture to check</param>
 <returns>True if document for given culture exists, false if it does not exist. Only exact culture given in <paramref name="culture"/> is tested. No parent cultureds are considered.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider.GetCulturesSupported">
 <summary>Gets array of cultures available</summary>
 <returns>Arra of names of cultures available for localization.</returns>
 <remarks><note>Localization of particular culture can be just partial. In extreme case it can be empty or contain just few code-points or blocks.</note></remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider.GetDocument(System.String)">
 <summary>Gets an XML document in UCD localization format that contains localized values for given culture</summary>
 <param name="culture">Culture to get document for</param>
 <returns>An XML document in UCD XML localization format that contains localization data for given culture. Null if localization data for given culture do not exist. No parent cultures are considered. Only data for exactly requested culture are returned (if available).</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider.Assembly">
 <summary>Gets an assembly that contains resource for UCD localization</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider.ResourceName">
 <summary>Gets name of resource from <see cref="P:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider.Assembly"/> that contains data for UCD localization</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.ResourceUcdLocalizationProvider.StreamTransformer">
 <summary>Gets stream transformation function to be used on assembly manifest resource stream before XML docume is read from it</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.FileUcdLocalizationProvider">
 <summary>Implements file-based <see cref="T:Tools.TextT.UnicodeT.UcdLocalizationProvider"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.FileUcdLocalizationProvider.#ctor(System.String,System.Boolean,System.Func{System.IO.Stream,System.IO.Stream})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.FileUcdLocalizationProvider"/> class</summary>
 <param name="baseName">Name of non-localized (or default localization) file (XML document). This can be file with default names, an empty XML file or the file does not have to exist at all.</param>
 <param name="useSubfolders">
 True to look for localized resources in paths like {baseFolder}\{culture}\{baseName}.
 False to look for localized resources in paths like {baseFolder}\{baseNameWithoutExtension}.{culture}.{baseExtension}.
 </param>
 <param name="streamTransformer">Optional stream transformation. Transforms a file stream before XML document is loaded from it (e.g. decompresses it).</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="streamTransformer"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.FileUcdLocalizationProvider.GetFilePath(System.String)">
 <summary>Gets path fo file to load localized data from</summary>
 <param name="culture">Culture to generate file path for</param>
 <returns>Path of file that contains localized data for given culture (in case it exists).</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.FileUcdLocalizationProvider.DocumentExists(System.String)">
 <summary>Gets value indivating if localized document for given culture exists</summary>
 <param name="culture">Name of culture to check</param>
 <returns>True if document for given culture exists, false if it does not exist. Only exact culture given in <paramref name="culture"/> is tested. No parent cultureds are considered.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.FileUcdLocalizationProvider.GetCulturesSupported">
 <summary>Gets array of cultures available</summary>
 <returns>Arra of names of cultures available for localization.</returns>
 <remarks><note>Localization of particular culture can be just partial. In extreme case it can be empty or contain just few code-points or blocks.</note></remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.FileUcdLocalizationProvider.GetDocument(System.String)">
 <summary>When overriden in derived class gets an XML document in UCD localization format that contains localized values for given culture</summary>
 <param name="culture">Culture to get document for</param>
 <returns>An XML document in UCD XML localization format that contains localization data for given culture. Null if localization data for given culture do not exist. No parent cultures are considered. Only data for exactly requested culture are returned (if available).</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.FileUcdLocalizationProvider.BaseName">
 <summary>Gets name of file thats used as base name of all localized resources</summary>
 <remarks>This file may contain default values, can be an empty XML file or may not even exist. This value is used to determine folder, file name and extension for localized files.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.FileUcdLocalizationProvider.UseSubfolders">
 <summary>Gets value indicating if localized files are stored in subfolders or along with main file.</summary>
 <returns>True if subfolders are used, false otherwise</returns>
 <remarks>If subfobfolders aree used localized file path looks like: {baseFolder}\{culture}\{baseName}; otherwise it looks like: {baseFolder}\{baseNameWithoutExtension}.{culture}.{baseExtension}.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.FileUcdLocalizationProvider.StreamTransformer">
 <summary>Gets stream transformation function to be used on assembly manifest resource stream before XML docume is read from it</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UcdRepertoire">
 <summary>Helper class - represents Unicode Character Database XML repertoire - can contain groups and codepoints</summary>
 <remarks>THis is helper class - you usually don't need to use it. <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> is used instead.</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UcdRepertoire.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdRepertoire.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UcdRepertoire"/> classs</summary>
 <param name="element">XML &lt;repertoire> element</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;repertoire> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UcdRepertoire.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UcdRepertoire.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UcdRepertoire.Items">
 <summary>Gets items - <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterGroup"/>s and <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>s in repertoire</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeBlock">
 <summary>Represens a Unicode block from Unicode Character Database XML</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBlock.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeBlock.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeBlock"/> class</summary>
 <param name="element">A <see cref="T:System.Xml.Linq.XElement"/> to used data of</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;block> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeBlock.Document">
 <summary>Gets a XML document that represents whole Unicode Character Database</summary>
 <remarks><note type="inheritinfo">Override this property in derived class if UCD document differs from <see cref="P:Tools.TextT.UnicodeT.UnicodeBlock.Element"/>.<see cref="P:System.Xml.Linq.XObject.Document">Document</see>.</note></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeBlock.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeBlock.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeBlock.FirstCodePoint">
 <summary>Gets first code point of this block</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeBlock.LastCodePoint">
 <summary>Gets last code point of this block</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeBlock.Name">
 <summary>Gets name of this block</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeBlock.CodePoints">
 <summary>Gets all codepoints in this block</summary>
 <remarks>Codepoints returned by this property are the same codepoints defined in UCD XML. Thus multi-copdepoint codepoints can be returned and it's theoretically possible that such multiple-codepoint codepoint overlaps blocks.</remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodeBlock.EnumerateCodePoints"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeBlock.EnumerateCodePoints">
 <summary>Enumerates all codepoints in this block separatelly</summary>
 <returns>Iterator over all codepoints in this block.</returns>
 <remarks>In contrast to <see cref="P:Tools.TextT.UnicodeT.UnicodeBlock.CodePoints"/> this function gets each codepoint as separate instance.</remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeBlock.CodePoints"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeBlock.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Tools.TextT.UnicodeT.UnicodeBlock" />.</summary>
 <returns><see cref="P:Tools.TextT.UnicodeT.UnicodeBlock.Name"/></returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeBlock.LocalizedName">
 <summary>Gets localized name for current UI culture</summary>
 <remarks>For details see <see cref="M:Tools.TextT.UnicodeT.UnicodeBlock.GetLocalizedName(System.Globalization.CultureInfo)"/>.</remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodeBlock.GetLocalizedName(System.Globalization.CultureInfo)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeBlock.GetLocalizedName(System.Globalization.CultureInfo)">
 <summary>Gets localized name of this block (if available)</summary>
 <param name="culture">Culture to get localized name for. If null current UI culture is used.</param>
 <returns>Localized or other name of the block. See remarks for details.</returns>
 <remarks>
 This method atempts to obtain code-point name in following order:
 <list type="list">
 <item>From localization. If localization for the culture is not loaded and localization provider is available localizations are loaded using the provider.</item>
 <item><see cref="P:Tools.TextT.UnicodeT.UnicodeBlock.Name"/>.</item>
 </list>
 </remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase">
 <summary>Provides information from Unicode Character Database</summary>
 <remarks>See http://www.unicode.org/ucd/.
 <para>
 To obtain data from Unicode Character Database you must have access to copy of it.
 You can either depend on copy of Unicode Character Database that is distributed with Tools.dll assembly as linked resource ("ucd.all.grouped.xml.gz")
 or you can load Unicode XML data from file or URL.
 </para>
 <note>
 Unicode Charcter Database XML is distributed with Tools.dll as linked resource in file named ucd.all.grouped.xml.gz.
 If you do not need it you may chose not to distribute this file with your application.
 However some methods will fail if this file is not in the same directory as Tools.dll assembly.
 <para>
 Rationale: ucd.all.grouped.xml.gz (7MB GZipped) is such large that it will significantly increase site of Tools.dll when embedded as embedded resource.
 So, it's rather distributed as linked resource giving developers option to redistribute it or not to redistribute it.
 </para>
 </note>
 <note>Linked resource name for file ucd.all.grouped.xml.gz is <c>Tools.TextT.UnicodeT.ucd.all.grouped.xml.gz</c>.</note>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.XmlNamespace">
 <summary>URI of XML namespace of Unicode Character Database XML</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.MaxCodePoint">
 <summary>Code of highest code-point supported by the Unicode standard</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.UnicodeXmlDatabaseResourceName">
 <summary>Name of assembly resource that contains Unicode Character Database XML</summary>
 <remarks>
 <para>The resource is contained in Tools.Text.Unicode.dll assembly (same assembly as the <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> class).</para>
 <para>Because of size of Unicode Character Database XML this resource is GZipped (use <see cref="T:System.IO.Compression.GZipStream"/> to unGZip it).</para>
 <para>Grouped version of Unicode Character Database XML is used.</para>
 <para>This resource is not embedded, it's linked. It means that you must distribute file this resource points to with Tools.Text.Unicode.dll assembly to be able to access it.</para>
 </remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.UnicodeXmlDatabaseFileName">
 <summary>Name of file that contains Unicode Character Database XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.GetXml">
 <summary>Gets Unicode Character Database in XML format</summary>
 <returns>Content of linked resource <c>Tools.TextT.UnicodeT.ucd.all.grouped.xml.gz</c> (<see cref="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.UnicodeXmlDatabaseResourceName"/>; file ucd.all.grouped.xml.gz) as <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
 <exception cref="T:System.IO.FileNotFoundException">File ucd.all.grouped.xml.gz was not correctly distributed with Tools.dll assembly.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.GetXmlAlternative">
 <summary>Gets XML an alternative vay (as file in same directory as assembly)</summary>
 <returns>Content of Unicode Character Database XML in form of <see cref="T:System.Xml.Linq.XDocument"/>; null if file does not exists</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Default">
 <summary>Gets default instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> class initialized with default copy of Unicode Character Database XML</summary>
 <returns>Default instance of Unicode Character Database; null if it cannot be initialized because default Unicode Character Database XML is not accessible (i.e. <see cref="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.GetXml"/> throws <see cref="T:System.IO.FileNotFoundException"/>).</returns>
 <remarks>This instance of Unicode character database is pre-loaded with ConScript Unicode Registry (CSUR) data (see <see cref="T:Tools.TextT.UnicodeT.CsurExtensions"/>).</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.GetLocalization(System.Globalization.CultureInfo)">
 <summary>Gets an instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> that can provide localization values for given culture</summary>
 <param name="culture">Culture to get localized UCD for</param>
 <returns>An instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> that can be used to access localizations. Null if <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.LocalizationProvider"/> is null.</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.LocalizationProvider">
 <summary>Gets or sets provider that provides localizations for unicode character database</summary>
 <remarks>Localizations are stored as <see cref="M:System.Xml.Linq.XObject.Annotation(System.Type)"/> of type <see cref="T:Tools.TextT.UnicodeT.UcdLocalizationProvider"/>.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.#ctor(System.Xml.Linq.XDocument)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> class from <see cref="T:System.Xml.Linq.XDocument"/>.</summary>
 <param name="unicodeCharacterDatabaseXml">XML representation of Unicode Character Database as described by <a href="http://www.unicode.org/reports/tr42/">Unicode Standard Annex #42</a>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="unicodeCharacterDatabaseXml"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="unicodeCharacterDatabaseXml"/> is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.#ctor(System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> class from URL where Unicode Character Database XML is located.</summary>
 <param name="unicodeCharacterDatabaseXmlUrl">URL of XML representation of Unicode Character Database as described by <a href="http://www.unicode.org/reports/tr42/">Unicode Standard Annex #42</a>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="unicodeCharacterDatabaseXmlUrl"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of XML document is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.#ctor(System.IO.Stream)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> class from <see cref="T:System.IO.Stream"/> containing XML document.</summary>
 <param name="unicodeCharacterDatabaseXml">Stream to read XML representation of Unicode Character Database as described by <a href="http://www.unicode.org/reports/tr42/">Unicode Standard Annex #42</a> from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="unicodeCharacterDatabaseXml"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of XML is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.#ctor(System.IO.TextReader)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> class from <see cref="T:System.IO.TextReader"/>.</summary>
 <param name="unicodeCharacterDatabaseXml">Reader to read XML representation of Unicode Character Database as described by <a href="http://www.unicode.org/reports/tr42/">Unicode Standard Annex #42</a> from.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="unicodeCharacterDatabaseXml"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of XML is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.#ctor(System.Xml.XmlReader)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> class from <see cref="T:System.Xml.XmlReader"/>.</summary>
 <param name="unicodeCharacterDatabaseXml">XML representation of Unicode Character Database as described by <a href="http://www.unicode.org/reports/tr42/">Unicode Standard Annex #42</a>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="unicodeCharacterDatabaseXml"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="unicodeCharacterDatabaseXml"/> is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.#ctor(System.Xml.XmlDocument)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> class from <see cref="T:System.Xml.XmlDocument"/>.</summary>
 <param name="unicodeCharacterDatabaseXml">XML representation of Unicode Character Database as described by <a href="http://www.unicode.org/reports/tr42/">Unicode Standard Annex #42</a>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="unicodeCharacterDatabaseXml"/> is null</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="unicodeCharacterDatabaseXml"/> is not <c>&lt;ucd></c> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Xml">
 <summary>Gets underlying <see cref="T:System.Xml.Linq.XDocument"/> instance that contains data of loaded Unicode Character Database</summary>
 <remarks>Do not change content of the document, it can have unprecedenter results</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.IXNodeWrapper_Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.RootElement">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions">
 <summary>Gets ditionary containing extended properties for characters - the properties not comming from official Unicode character database.</summary>
 <remarks>
 Key of the dictionary are names of XML namespaces of the properties. Values are instances of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> loaded with these additional properties.
 <para>Value of this property is stored in <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Xml"/>.<see cref="M:System.Xml.Linq.XObject.Annotation(System.Type)">Annotation</see></para>
 </remarks>
 <seelaso cref="T:Tools.TextT.UnicodeT.CsurExtensions"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.TextualExtensions">
 <summary>Gets a dictionary that contains textual extensions to Unicode Character Database XML</summary>
 <remarks>
 This property is stored in <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Xml"/>.<see cref="M:System.Xml.Linq.XObject.Annotations(System.Type)"/> of type <see cref="T:System.Collections.Generic.IDictionary`2"/>[<see cref="T:System.String"/>, <see cref="T:System.Object"/>].
 <para>
 Unicode Character Database XML provides most of properties from Unicode Character Database (UCD), but traditionaly Unicode Character Database is bunch of text files.
 Some UCD properties are not provided in UCD XML. That's why this property exists. You can load supported textual extensions here.
 </para>
 <para>Keys of the dictionary are names of files from UCD, values are object representations of that files.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Description">
 <summary>Gets description provided for this instance of Unicode Character Database</summary>
 <returns>Description of loaded Unicode Character Database, null of description is not provided</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Groups">
 <summary>Gets character groups in this Unicode Character Database</summary>
 <remarks>
 Unicode Character Database can be stored in two formats - flat and groupped. Flat format contains no groups.
 <para>Groups are only grouping non-normative construct used merely to reduce size of XML file. Do not confuse groups with blocks.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.CodePoints">
 <summary>Gets all code points in current Unicode Character Database</summary>
 <returns>All code points in current Unicode Character Database (groupped or not)</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.CodePointXmlElements">
 <summary>Gets XML elements representing all code points in this instance of Unicode Character Database</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.GetCodePointXmlElements(System.Xml.Linq.XDocument)">
 <summary>Gets XML elements representing all code points in given XML document which represents instance of Unicode Character Database</summary>
 <param name="document">The XML document that contains Unicode Character Database XML data</param>
 <returns>XML elements representing all code points in <paramref name="document"/> (in document order).</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="document"/> is null</exception>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.char_name">
 <summary><see cref="T:System.Xml.Linq.XName"/> of &lt;char> element</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.reserved_name">
 <summary><see cref="T:System.Xml.Linq.XName"/> of &lt;reserved> element</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.noncharacter_name">
 <summary><see cref="T:System.Xml.Linq.XName"/> of &lt;noncharacter> element</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.surrogate_name">
 <summary><see cref="T:System.Xml.Linq.XName"/> of &lt;surrogate> element</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Blocks">
 <summary>Gets all Unicode blocks</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.NamedSequences">
 <summary>Gets named sequences of characters</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.ProvisionalNamedSequences">
 <summary>Gets provisional named sequences of characters</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.NormalizationCorrections">
 <summary>Gets normalization corrections between Unicode versions</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.StandartizedVariants">
 <summary>Gets Unicode standardized variants</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.CjkRadicals">
 <summary>Gets list of CJK Radicals</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.EmojiSources">
 <summary>Gets list of Emoji sources</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Repertoire">
 <summary>Gets repertoire of groups and code points</summary>
 <remarks>This is helper property. You usually don't need it. You usually use <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Groups"/> and <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.CodePoints"/> directly.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase" /> (it's <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> and it's backed by the same (reference equivalent) <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Xml"/>); otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase" />. </param>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindCodePoint(System.UInt32)">
 <summary>Gets information from Unicode Character database for single code point</summary>
 <param name="codePoint">A codepoint to get information for</param>
 <returns>Information about given code point. Null if current instance of Unicode Character Database does not provide information about the character.</returns>
 <remarks>This function is not CLS-compliant. CLS-compliant overload exists.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.CpMatch(System.String,System.UInt32)">
 <summary>Detects if XML hexa code point number matches code point number</summary>
 <param name="xmlCp">Hexadecimal code of character</param>
 <param name="cp">Code of character</param>
 <returns>True if <paramref name="xmlCp"/> and <paramref name="cp"/> represent the same number (in hex); false otherwise</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindCodePoint(System.Int32)">
 <summary>Gets information from Unicode Character database for single code point</summary>
 <param name="codePoint">A codepoint to get information for</param>
 <returns>Information about given code point. Null if current instance of Unicode Character Database does not provide information about the character.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindCodePoint(System.Char)">
 <summary>Gets information from Unicode Character database for single UTF-16 character</summary>
 <param name="character">A character to get information for</param>
 <returns>Information about given code point. Null if current instance of Unicode Character Database does not provide information about the character.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Query(System.String)">
 <summary>Queries Unicode Character Database XML using XPath</summary>
 <param name="xPath">XPath query</param>
 <returns>Objects retrieved suing given query</returns>
 <remarks>Default namespace is mapped to http://www.unicode.org/ns/2003/ucd/1.0</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="xPath"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Query(System.Func{System.Xml.Linq.XDocument,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}})">
 <summary>Queries Unicode Character Database XML using Linq-to-XML (XLINQ)</summary>
 <param name="path">A delegate (typically λ-function) specifying a query to select XML Elements from Unicode Character Database XML</param>
 <returns>Objects retrieved suing given query</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.QueryToObjects(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
 <summary>Converts each object in enumeration of <see cref="T:System.Xml.Linq.XElement"/>s to UCD object</summary>
 <param name="query">Represents a query to Unicode Character Database XML</param>
 <returns>An enumeration of objects instantiated from elements in <paramref name="query"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="query"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.ElementToObject(System.Xml.Linq.XElement)">
 <summary>Converts a XML element to one of Unicode Character Database object from <see cref="N:Tools.TextT.UnicodeT"/> namespace</summary>
 <param name="element">A <see cref="T:System.Xml.Linq.XElement"/> create wrapper object for</param>
 <returns>A wrapper object for given element. Null if <paramref name="element"/> is null. <see cref="T:Tools.ComponentModelT.XElementWrapper"/> if element type is unknown.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindBlock(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.UInt32,System.Boolean)">
 <summary>Finds a block a code point belongs to</summary>
 <param name="blocks">A collection of XML elements representing blocks to search within. The collection should contain &lt;block> elements from the http://www.unicode.org/ns/2003/ucd/1.0 namespace (this precondition is not checked).</param>
 <param name="codePoint">Code point (character) to find block it belongs to</param>
 <param name="checked">True to check for duplicate block, false to skip this check. If <paramref name="checked"/> is true <see cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/> is used to select a block, if it is false <see cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/> is used.</param>
 <returns>
 An element from the <paramref name="blocks"/> collection <paramref name="codePoint"/> falls in range of codepoints of.
 Null if no such element can be found.
 <note>What happens when more than such element is found depends on value of the <paramref name="checked"/> parameter. When <paramref name="checked"/> is true an <see cref="T:System.InvalidOperationException"/> is thrown. When <paramref name="checked"/> is false first matching block is returned and the other bllocks (elements) are ignored.</note>
 </returns>
 <remarks>
 Attributes first-cp and last-cp are used to determine block range.
 <para>This method is not CLS-compliant and no CLS-compliant alternative is provided. Consumers not capable of using <see cref="T:System.UInt32"/> type should use one of instance overloads instead.</para>
 </remarks>
 <exception cref="T:System.ArgumentNullException">Attribute first-cp or last-cp of an element is not provided.</exception>
 <exception cref="T:System.FormatException">Value of attribute first-cp or last-cp cannot be parsed as hexadecimal number.</exception>
 <exception cref="T:System.OverflowException">Value of attribute first-cp or last-cp can be parsed as hexadecimal number but it does not fall into range of the <see cref="T:System.UInt32"/> type.</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="checked"/> is true and more than one block is found.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindBlock(System.UInt32)">
 <summary>Gets a Unicode block that covers given code point</summary>
 <param name="codePoint">A code point to get block that contains it</param>
 <returns>A Unicode block that contains code-point identified by it's code given in <paramref name="codePoint"/>.</returns>
 <remarks>This method is not CLS-compliant. CLS compliant alternative (overload) is provided.</remarks>
 <exception cref="T:System.InvalidOperationException">The data in UCD XML are invalid - see <see cref="P:System.Exception.InnerException"/> for details. See <see cref="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindBlock(System.Collections.Generic.IEnumerable`1[System.Xml.Linq.XElement],System.UInt32,System.Boolean)"/> for detailed explanation of <see cref="P:System.Exception.InnerException"/>.</exception>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Block"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindBlock(System.Int32)">
 <summary>Gets a Unicode block that covers given code point (CLS-compliant alternative</summary>
 <param name="codePoint">A code point to get block that contains it</param>
 <returns>A Unicode block that contains code-point identified by it's code given in <paramref name="codePoint"/>.</returns>
 <remarks>This method is not CLS-compliant. CLS compliant alternative (overload) is provided.</remarks>
 <exception cref="T:System.InvalidOperationException">The data in UCD XML are invalid - see <see cref="P:System.Exception.InnerException"/> for details. See <see cref="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindBlock(System.Collections.Generic.IEnumerable`1[System.Xml.Linq.XElement],System.UInt32,System.Boolean)"/> for detailed explanation of <see cref="P:System.Exception.InnerException"/>.</exception>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Block"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.NameAliases">
 <summary>Gets dictionary of name aliases for Unicode code-points</summary>
 <returns>A dictionary of name aliases. Null if name aliases were not loaded.</returns>
 <remarks>
 Aliases are stored in <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.TextualExtensions"/> under key <c>NameAliases.txt</c>.
 <para>Name aliases are not part of Unicode Character Database XML and thus they are not loaded by default when loading <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/>. You must load them explicitly using some of <see cref="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.LoadNameAliases(System.IO.TextReader)"/> overloads or set them directly to <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.TextualExtensions"/> directly.</para>
 <para>This property is not CLS-compliant. Direct CLS-compliant alternative is not provided. Use aliases-related properties of <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>.</para>
 <para>Keys of the dictionary are code-point codes, values are alias names. Each code-point can have zero or more aliases. Currently there are only few (11 as of Unicode 6.0) aliases defined in the Unicode standard and no character has more than one alias.</para>
 <note type="note">Since Unicode 6.2 the name aliases are part of main UCD XML. So this textual extension is no longer needed and is considered obsolete and not loaded by default. Also the NameAliases.txt is no longer embedded in the assembly.</note>
 </remarks>
 <version version="1.5.4">In mid-development cycle of 1.5.4 update to Unicode 8 has been done and this property became obsolete as the data are since Unicode 6.2 part of UCD XML, so no need to side-load them.</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.LoadNameAliases(System.String)">
 <summary>Loads aliases from a file</summary>
 <param name="path">Path to NameAliases.txt file from Unicode Character Database (UCD)</param>
 <remarks>For Unicode 6.0 the file is publicly available at <a href="http://www.unicode.org/Public/6.0.0/ucd/NameAliases.txt">http://www.unicode.org/Public/6.0.0/ucd/NameAliases.txt</a>.</remarks>
 <exception cref="T:System.InvalidOperationException">Name aliases were already loaded for this instance. You must unloaded them from <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.TextualExtensions"/> first.</exception>
 <exception cref="T:System.FormatException">Unexpected format of data in file being read. See inner exception for details.</exception>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.NameAliases"/>
 <version version="1.5.4">In mid-development cycle of 1.5.4 update to Unicode 8 has been done and this method became obsolete as the data are since Unicode 6.2 part of UCD XML, so no need to side-load them.</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.LoadNameAliases(System.IO.TextReader)">
 <summary>Loads aliases from a text reader</summary>
 <param name="reader">A reader to read aliases from. The reader should point to firs tile of file in NameAlias.txt format (as used in UCD)</param>
 <exception cref="T:System.InvalidOperationException">Name aliases were already loaded for this instance. You must unloaded them from <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.TextualExtensions"/> first.</exception>
 <exception cref="T:System.FormatException">Unexpected format of data in file being read. See inner exception for details.</exception>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.NameAliases"/>
 <version version="1.5.4">In mid-development cycle of 1.5.4 update to Unicode 8 has been done and this method became obsolete as the data are since Unicode 6.2 part of UCD XML, so no need to side-load them.</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.ReadNameAliases(System.IO.TextReader)">
 <summary>Parses constant of NameAliases.txt file from Unicode Character Database to a dictionary of name aliases</summary>
 <param name="reader">A reader that points to first line of NameAliases.txt-like file (a file in compatible format)</param>
 <returns>A dictionary keyed by code-points and valued by name aliases for that code-point</returns>
 <remarks>
 This function is not CLS-compliant. No direct CLS-compliant counterpart is provided. Use some of instance overloads of <see cref="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.LoadNameAliases(System.IO.TextReader)"/>.
 <para>Parsing algorithm provided by this method will work with proposed extension of Unicode 6.1.0 but will ignore the Type field.</para>
 </remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null.</exception>
 <exception cref="T:System.FormatException">Unexpected format of data in file being read. See inner exception for details.</exception>
 <version version="1.5.4">In mid-development cycle of 1.5.4 update to Unicode 8 has been done and this method became obsolete as the data are since Unicode 6.2 part of UCD XML, so no need to side-load them.</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.GetName(System.Int32)">
 <summary>Gets name of a character</summary>
 <param name="codePoint">A Unicode (UTF-32) code-point</param>
 <returns>Name of the character, null of the source is not capable of providing character name</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePoint"/> is less than zero or greater than <see cref="F:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.MaxCodePoint"/>.</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeCharacterGroup">
 <summary>Describes a group of Unicode characters which share common properties</summary>
 <remarks>
 Character group is non-normative construct used to describe properties that are common to some code points.
 Do not confuse Group with Block. Main purpose for existence of groups is to reduce size of XML file.
 Unicode provides grouped and flat files. Grouped files contain groups.
 Flat files contain characters directly with all properties indicated for each character separatelly.
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterGroup.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacterGroup.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterGroup"/> class</summary>
 <param name="element">A &lt;group> XML element which contains data for this group</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;group> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacterGroup.CodePoints">
 <summary>Gets Unicode code points contained in this group</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeCodePoint">
 <summary>Represents single Unicode code point and provides information about it</summary>
 <remarks><note>XML serialization attributes used to decorate properties of this class are not intended for XML serialization, they are rather intended as machine-readable documentation where the property originates from in UCD XML.</note></remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/> class</summary>
 <param name="element">A XML element which stores the properties</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Type">
 <summary>When overriden in derived class gets type of this code point</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.Create(System.Xml.Linq.XElement)">
 <summary>Creates an instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>-derived class from XML element</summary>
 <param name="element">An XML element representing Unicode code point</param>
 <returns>An instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>-derived class. Which? It depends on name of <paramref name="element"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is nulll</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is neither &lt;reserved>, &lt;noncharacter>, &lt;surrogate> nor &lt;char> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.Create(System.Xml.Linq.XElement,Tools.TextT.UnicodeT.UnicodeCharacterGroup)">
 <summary>Creates an instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>-derived class from XML element and sets its group</summary>
 <param name="element">An XML element representing Unicode code point</param>
 <param name="group">A group code point is defined in</param>
 <returns>An instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>-derived class. Which? It depends on name of <paramref name="element"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is nulll</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is neither &lt;reserved>, &lt;noncharacter>, &lt;surrogate> nor &lt;char> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Group">
 <summary>Gets group code point represented by this instance belongs to</summary>
 <returns>A group this code point belongs to. Null if current code point does not belong to any group.</returns>
 <exception cref="T:System.InvalidOperationException">In setter: <note>Setter of this property is private.</note> Property is being set and it was already set.</exception>
 <remarks>If Unicode Character Database was loaded from so-called flat file no character is in a group.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.GetPropertyValue(System.String,System.String)">
 <summary>Gets value of given property (attributes)</summary>
 <param name="namespace">Name of attribute XML namespace</param>
 <param name="name">Name of the property (attribute) to get value of. This is name of property (XML attribute) as used in Unicode Character Database XML.</param>
 <returns>Value of the property (attribute) as string. If the attribute is not present on <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/> and <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Group"/> is not null the attribute si searched on <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Group"/>. If it's present neither on <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/> nor on <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Group"/> null is returned.</returns>
 <remarks>
 If <paramref name="namespace"/> is neither null nor an empty string and extension for that namespace is registered
 (i.e. <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.<see cref="P:System.Xml.Linq.XObject.Document">Document</see>.<see cref="M:System.Xml.Linq.XObject.Annotation(System.Type)">Annotation</see>[<see cref="T:System.Collections.Generic.IDictionary`2"/>[<see cref="T:System.String"/>, <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/>]] is not null and the dictionary it resturns contains key <paramref name="namespace"/>)
 attempt to obtain property value from that extension <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> is made first.
 This only works for single-code-point characters (i.e. <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> is not null.)
 </remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetExtensions"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.GetPropertyValue(System.String,System.String,System.Boolean)">
 <summary>Get value of given property (attributes) resolving or not resolving placeholders in property value</summary>
 <param name="namespace">Name of attribute XML namespace</param>
 <param name="name">Name of the property (attribute) to get value of. This is name of property (XML attribute) as used in Unicode Character Database XML.</param>
 <param name="allowResolving">True to allow placeholder resolving, false not to allow it.</param>
 <returns>Value of the property (attribute) as string. Null if the attribute is not present on <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.</returns>
 <remarks>Placeholder # is replace only if <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> is not null.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Name">
 <summary>Gets name of the character in current version of Unicode standard</summary>
 <remarks>
 If specified on group or range can contain character #. When specified on individual code point, character # is replaced with value of current code point.
 <para>Unicode character names are usually uppercase.</para>
 <para>Underlying XML attribute is @na.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.UniversalName">
 <summary>Gets the of the code point thats most useful for user</summary>
 <returns>
 Usually returns <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Name"/>.
 Exceptions (conditions are evaluated in given order):
 <list type="table">
 <listheader><term>Condition</term><description>Returns</description></listheader>
 <item><term>Name aliases are loaded and name alias exist for current code point</term><description>First name alias; see <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.NameAliases"/>. This value is returned without prefix.</description></item>
 <item><term><see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GeneralCategory"/> is <see cref="F:System.Globalization.UnicodeCategory.PrivateUse"/> (i.e. this is private use character) and <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Name"/> is null or an empty string and CSUR extension is loaded and provides <see cref="T:Tools.TextT.UnicodeT.CsurPropertiesProvider"/> for this code-point which provides non-null non-empty name for this code-point.</term><description><see cref="P:Tools.TextT.UnicodeT.CsurPropertiesProvider.Name"/> (prefix CSUR:, localizable)</description></item>
 <item><term><see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Name"/> is null or empty and <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Name1"/> is not.</term><description><see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Name1"/> (prefix 1:, localizable)</description></item>
 <item><term><see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Name"/> is null or empty and  <see cref="T:Tools.TextT.UnicodeT.NamesListExtensions"/> are loaded and provide aliases</term><description>First alias form <see cref="M:Tools.TextT.UnicodeT.NamesListExtensions.Aliases(Tools.TextT.UnicodeT.UnicodeCodePoint)"/> (prefix Alias:, localizable)</description></item>
 </list>
 <note type="inheritinfo">Derived class may provide different for <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.UniversalName"/> lookup.</note>
 </returns>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Name1">
 <summary>Gets name of the character the character had in version 1 of Unicode standard</summary>
 <returns>Name character had in version 1 of Unicode standard (if specified; null otherwise)</returns>
 <remarks>
 If specified on group or range can contain character #. When specified on individual code point, character # is replaced with value of current code point.
 <para>Underlying XML attribute is @na1.</para>
 </remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCodePoint._codePoint">
 <summary>When not null specifies value of the <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> property used for single-character instances created from ranges</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint">
 <summary>Gets value of current code point</summary>
 <remarks>
 This property is null for character ranges. They have <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint"/> and <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint"/> specified instead.
 <para>This property is not CLS-compliant. Corresponding CLS-compliant property is <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePointSigned"/>.</para>
 <para>Underlying XML attributes is @cp.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePointSigned">
 <summary>CLS-compliant version of <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> property</summary>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint">
 <summary>For range characters gets value of first code point this range starts with</summary>
 <returns>Value of code point character range starts with. Null if this instance does not represent character range.</returns>
 <remarks>
 This property is not CLS-compliant. CLS-compliant alternative is <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePointSigned"/>.
 <para>Underlying XML attribute is @first-cp.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint">
 <summary>For range characters gets value of last code point this range ends with</summary>
 <returns>Value of code point character range starts with. Null if this instance does not represent character range.</returns>
 <remarks>
 This property is not CLS-compliant. CLS-compliant alternative is <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePointSigned"/>.
 <para>Underlying XML attribute is @last-cp.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePointSigned">
 <summary>CLS-comliant version of <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint"/> ptoperty</summary>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePointSigned">
 <summary>CLS-comliant version of <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint"/> ptoperty</summary>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.DecompositionMapping">
 <summary>Gets collection of characters that forms canonic decomposition of this charatcer</summary>
 <remarks>Underlying XML attribute is @dm.
 <para>If this character is not range character this impementation replaces #s with <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/>.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.Block">
 <summary>Gets a Unicode block this code-point belongs to</summary>
 <returns>
 A Unicode block this code-point belongs to, null if corresponding block cannot be found.
 In case <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> is null and <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint"/> and <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint"/> are specified the block is returned only in case both - <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint"/> and <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint"/> belong to the same block.
 If <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> is null and also either <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint"/> or <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint"/> is null, this function always returns null.
 </returns>
 <exception cref="T:System.InvalidOperationException">The data in UCD XML are invalid - see <see cref="P:System.Exception.InnerException"/> for details. See <see cref="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindBlock(System.Collections.Generic.IEnumerable`1[System.Xml.Linq.XElement],System.UInt32,System.Boolean)"/> for detailed explanation of <see cref="P:System.Exception.InnerException"/>.</exception>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.FindBlock(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.UInt32,System.Boolean)"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.NameAliases">
 <summary>Gets normative name aliases for name of this code point</summary>
 <returns>
 Name aliases (alternative normative names) for this code-point.
 <para>In case name aliases are present in UCD XML returns name aliases from UCD XML (as of Unicode 6.2).</para>
 <para>
 If they are not present and if NameAliases.txt textual extension is registered uses that extension following way:
 Returns null if <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> is null or if name aliases are not registered.
 </para>
 Returns an empty array if there are no formal aliases for name of current code point.
 </returns>
 <remarks>This property can only return non-empty arrays if newer version of UCD XML is loaded (default, from Unicode 6.2) or NameAliases.txt textual extension was registered for parent UCD.</remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.NameAliases"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LocalizedName">
 <summary>Gets localized name for current UI culture</summary>
 <remarks>For details see <see cref="M:Tools.TextT.UnicodeT.UnicodeCodePoint.GetLocalizedName(System.Globalization.CultureInfo)"/>.</remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodeCodePoint.GetLocalizedName(System.Globalization.CultureInfo)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.MakeSingle(System.UInt32)">
 <summary>Makes single-character instance form range instance</summary>
 <param name="codePoint">Code point from current range to make single-character instance pointing to</param>
 <returns>
 A new instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>-derived class pointing to single character within range represented by current instance.
 In case <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> is not null and <paramref name="codePoint"/> equals <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> returns current instance.
 </returns>
 <exception cref="T:System.InvalidOperationException">
 Current instance is not character range and <paramref name="codePoint"/> differs from <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> -or-
 The range is specified incorrectly (i.e. either <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint"/> or <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint"/> is null.
 </exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePoint"/> is less than <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint"/> or greater than <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint"/>.</exception>
 <remarks>This function is not CLS-compliant. CLS-compliant overload exists.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.MakeSingle(System.Int32)">
 <summary>Makes single-character instance form range instance</summary>
 <param name="codePoint">Code point from current range to make single-character instance pointing to</param>
 <returns>
 A new instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/>-derived class pointing to single character within range represented by current instance.
 In case <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> is not null and <paramref name="codePoint"/> equals <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePointSigned"/> returns current instance.
 </returns>
 <exception cref="T:System.InvalidOperationException">
 Current instance is not character range and <paramref name="codePoint"/> differs from <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePointSigned"/> -or-
 The range is specified incorrectly (i.e. either <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePoint"/> or <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePoint"/> is null.
 </exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="codePoint"/> is less than <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.FirstCodePointSigned"/> or greater than <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.LastCodePointSigned"/>.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.AsCodePointInfo">
 <summary>Gets <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> instance pointing to current character</summary>
 <returns>A new <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> instance pointing to charatcer indicated by <see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.CodePoint"/> property.</returns>
 <exception cref="T:System.InvalidOperationException">This instance represents character range.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.op_Explicit(Tools.TextT.UnicodeT.UnicodeCodePoint)~Tools.TextT.UnicodeT.CodePointInfo">
 <summary>Converts <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/> to <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></summary>
 <param name="a">A <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/></param>
 <returns>A new instance of <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> class pointing to same character as <paramref name="a"/>; null if <paramref name="a"/> is null.</returns>
 <exception cref="T:System.InvalidOperationException"><paramref name="a"/> is character range.</exception>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodeCodePoint.AsCodePointInfo"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.op_Implicit(Tools.TextT.UnicodeT.CodePointInfo)~Tools.TextT.UnicodeT.UnicodeCodePoint">
 <summary>Converts <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/> to <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/></summary>
 <param name="a">A <see cref="T:Tools.TextT.UnicodeT.CodePointInfo"/></param>
 <returns>A new instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCodePoint"/> providing information about character pointed by <paramref name="a"/>; null if <paramref name="a"/> is null.</returns>
 <exception cref="T:System.InvalidOperationException"><paramref name="a"/> was initialized without instance of <see cref="T:System.Xml.Linq.XDocument"/> -or- Information about code point pointed by <paramref name="a"/> cannot be found in the XML document.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCodePoint.GetLocalizedName(System.Globalization.CultureInfo)">
 <summary>Gets localized name of this code-point (if available)</summary>
 <param name="culture">Culture to get localized name for. If null current UI culture is used.</param>
 <returns>Localized or other name of the code point. See remarks for details.</returns>
 <remarks>
 This method atempts to obtain code-point name in following order:
 <list type="list">
 <item>From localization. If localization for the culture is not loaded and localization provider is available localizations are loaded using the provider.</item>
 <item>First informative alias from <see cref="M:Tools.TextT.UnicodeT.NamesListExtensions.Aliases(Tools.TextT.UnicodeT.UnicodeCodePoint)"/>.</item>
 <item><see cref="P:Tools.TextT.UnicodeT.UnicodeCodePoint.UniversalName"/>.</item>
 </list>
 </remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeCodePointType">
 <summary>Enumerates Unicode code point types</summary>
 <version version="1.5.4">This enum is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCodePointType.Reserved">
 <summary>Reserved code point (i.e. it's not assigned to a character in current version of Unicode standard)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCodePointType.Noncharacter">
 <summary>Non-character code point</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCodePointType.Surrogate">
 <summary>Surrogate code point</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCodePointType.Character">
 <summary>Character code point</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.ReservedUnicodeCodePoint">
 <summary>Represents reserved Unicode code point (i.e. code point that's currently not assigned to a character)</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.ReservedUnicodeCodePoint.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.ReservedUnicodeCodePoint.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.ReservedUnicodeCodePoint"/> class</summary>
 <param name="element">An XML element containing data for this unicode code point</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not &lt;reserved> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.ReservedUnicodeCodePoint.Type">
 <summary>Gets type of this code point</summary>
 <returns>This implementation always returns <see cref="F:Tools.TextT.UnicodeT.UnicodeCodePointType.Reserved"/></returns>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeNoncharacter">
 <summary>Represents non-character code point in Unicode</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNoncharacter.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeNoncharacter.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeNoncharacter"/> class</summary>
 <param name="element">An XML element containing data for this unicode code point</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not &lt;noncharacter> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNoncharacter.Type">
 <summary>Gets type of this code point</summary>
 <returns>This implementation always returns <see cref="F:Tools.TextT.UnicodeT.UnicodeCodePointType.Noncharacter"/></returns>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeSurrogate">
 <summary>Represents surrogate code point in Unicode</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSurrogate.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeSurrogate.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeSurrogate"/> class</summary>
 <param name="element">An XML element containing data for this unicode code point</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not &lt;surrogate> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeSurrogate.Type">
 <summary>Gets type of this code point</summary>
 <returns>This implementation always returns <see cref="F:Tools.TextT.UnicodeT.UnicodeCodePointType.Surrogate"/></returns>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeCharacter">
 <summary>Represents character code point in Unicode</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacter.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeCharacter.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacter"/> class</summary>
 <param name="element">An XML element containing data for this unicode code point</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not &lt;char> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeCharacter.Type">
 <summary>Gets type of this code point</summary>
 <returns>This implementation always returns <see cref="F:Tools.TextT.UnicodeT.UnicodeCodePointType.Character"/></returns>
</member>
<member name="T:Tools.TextT.UnicodeT.UcdCollection">
 <summary>Common base class for <see cref="T:Tools.TextT.UnicodeT.UcdCollection`1"/> generic classes</summary>
 <remarks>This is helper class, you usually don't need to dela with it.</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.TextT.UnicodeT.UcdCollection.Element">
 <summary>When overriden in derived class gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UcdCollection.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdCollection.GetXElementWrapperEnumerator">
 <summary>When overriden in derived class returns an enumerator that iterates through the collection of <see cref="T:Tools.ComponentModelT.IXElementWrapper"/>s.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" />[<see cref="T:Tools.ComponentModelT.IXElementWrapper"/>] that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdCollection.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.TextT.UnicodeT.UcdCollection`1">
 <summary>Generic class that serves as collection of <see cref="T:Tools.ComponentModelT.IXElementWrapper"/>-based classes</summary>
 <typeparam name="T">Type of items in collection. The type must have public contructor that accepts exactly one parameter of type <see cref="T:System.Xml.Linq.XElement"/>.</typeparam>
 <remarks>This is helper type. You usually don't need to dela with it.</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdCollection`1.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a anew instance of the <see cref="T:Tools.TextT.UnicodeT.UcdCollection`1"/> class</summary>
 <param name="element">A XML element that contains elements that populates instances of classes to iterate over.</param>
 <remarks>Elements in <paramref name="element"/> must all be of type that's acceptable by <typeparamref name="T"/>'s constructor</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UcdCollection`1.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdCollection`1.GetXElementWrapperEnumerator">
 <summary>Returns an enumerator that iterates through the collection of <see cref="T:Tools.ComponentModelT.IXElementWrapper"/>s.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" />[<see cref="T:Tools.ComponentModelT.IXElementWrapper"/>] that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdCollection`1.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection of <typeparamref name="T"/>.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass">
 <summary>Gets classes Unicode general categories can be divided to</summary>
 <version version="1.5.4">This enum is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass.Letter">
 <summary>Letters category</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass.Mark">
 <summary>Marks category</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass.Number">
 <summary>Numbers category</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass.Punctuation">
 <summary>Punctuation category</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass.Symbol">
 <summary>Symbols category</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass.Separator">
 <summary>Separators category</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass.Other">
 <summary>Other category</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeBidiCategory">
 <summary>Defines Unicode bidirectional categories of characters</summary>
 <remarks>
 To determine strength programatically match 2nd-least significant byte against <see cref="T:Tools.TextT.UnicodeT.UnicodeBidiCategoryStrenght"/>.
 <para>Details in http://www.unicode.org/reports/tr9/#Table_Bidirectional_Character_Types</para>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.LeftToRight">
 <summary>Strong, left-to-right character (L; left-to-right letters and numerals)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.RightToLeft">
 <summary>Strong, right-to-left character (R; right-to-left letters)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.RightToLeftArabic">
 <summary>Strong, right-to-left Arabic (AL; Arabic and related scripts)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.LeftToRightEmbedding">
 <summary>Strong, left-to-right embedding (LRE; LRE character)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.LeftToRightOverride">
 <summary>Strong, left-to-right override (LRO; LRO character)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.RightToLeftEmbedding">
 <summary>Strong, right-to-left embedding (RLE; RLE character)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.RightToLeftOverride">
 <summary>Strong, right-to.left override (RLO; RLO character)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.PopDirectionalFormat">
 <summary>Weak, pop directional format (PDF; PDF character)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.RightToLeftIsolate">
 <summary>Right-to-Left Isolate (RLI)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.LeftToRightIsolate">
 <summary>Left-to-Right Isolate (LRI)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.FirstStrongIsolate">
 <summary>First Strong Isolate (FSI)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.PopDirectionalIsolate">
 <summary>Pop DIrectional Isolate (PDI)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.EuropeanNumber">
 <summary>Weak, European numbers (EN; European digits and Eastern Arabic-Indic digits etc.)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.EuropeanNumberSeparator">
 <summary>Weak, European number separators (ES; +, -)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.EuropeanNumberTerminator">
 <summary>Weak, European number terminators (ET; ° and currency symbols)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.ArabicNumber">
 <summary>Weak, Arabic numbers (AN; Arabic-Indic digits)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.CommonNumberSeparator">
 <summary>Weak, common number separators (CS; :, ,, ., NBSP etc.)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.NonSpacingMark">
 <summary>Weak, non spacing mark (NSM; characters of general category <see cref="F:System.Globalization.UnicodeCategory.NonSpacingMark"/> and <see cref="F:System.Globalization.UnicodeCategory.EnclosingMark"/>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.BoundaryNeutral">
 <summary>Weak, boundary neutral (BN; default ignorables)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.ParagraphSeparator">
 <summary>Neutral, paragraph separator (B; paragraph separators)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.SegmentSeparator">
 <summary>Neutral, segment separator (S; TAB)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.Whitespace">
 <summary>Neutral, whitespace (WS; various spaces)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategory.OtherNeutrals">
 <summary>Neutral, other neutrals (ON; other characters)</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeBidiCategoryStrenght">
 <summary>Indicates bidirectional strength</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategoryStrenght.Strong">
 <summary>Strong bidirectional characters (has direction and affect neutrals)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategoryStrenght.Weak">
 <summary>Weak bidirectional characters (has direction but doesn't affect neutrals)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategoryStrenght.Neutral">
 <summary>Neutral characters (directionality inherited from context - from strong characters)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiCategoryStrenght.Explicit">
 <summary>Characters with special purpose</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeCombiningClass">
 <summary>This enumeration describes well-known values of Unicode combining classes</summary>
 <remarks>
 Any number from 0 to 255 can be used as combining class. This enumeration contains only certain predefined values.
 When used for canonical ordering alghoritm the only thing that matters is numerical value of the property.
 <para>Name of values that have long symbolic aliases in PropertyValueAliases.txt of Unicode Character Database start with upper case letter, other start with lower case letter.</para>
 </remarks>
 <version version="1.5.4">This enumeration is in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.NotReordered">
 <summary>Spacing and enclosing marks; also many vowel and consonant signs, even if nonspacing</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.Overlay">
 <summary>Marks which overlay a base letter or symbol</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.Nukuta">
 <summary>Diacritic nukta marks in Brahmi-derived scripts</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.KanaVoicing">
 <summary>Hiragana/Katakana voicing marks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.Virama">
 <summary>Viramas</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.fixedStart">
 <summary>Start of fixed position classes</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.fixedEnd">
 <summary>End of fixed position classes</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.AttachedBelowLeft">
 <summary>Marks attached at the bottom left</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.AttachedBelow">
 <summary>Marks attached directly below</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.attachedBottomRight">
 <summary>Marks attached at the bottom right</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.attachedLeft">
 <summary>Marks attached to the left</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.attachedRight">
 <summary>Marks attached to the right</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.attachedTopLeft">
 <summary>Marks attached at the top left</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.AttachedAbove">
 <summary>Marks attached directly above</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.AttachedAboveRight">
 <summary>Marks attached at the top right</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.BelowLeft">
 <summary>Distinct marks at the bottom left</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.Below">
 <summary>Distinct marks directly below</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.BelowRight">
 <summary>Distinct marks at the bottom right</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.Left">
 <summary>Distinct marks to the left</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.Right">
 <summary>Distinct marks to the right</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.AboveLeft">
 <summary>Distinct marks at the top left</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.Above">
 <summary>Distinct marks directly above</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.AboveRight">
 <summary>Distinct marks at the top right</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.DoubleBelow">
 <summary>Distinct marks subtending two bases</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.DoubleAbove">
 <summary>Distinct marks extending above two bases</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCombiningClass.IotaSubscript">
 <summary>Greek iota subscript only</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeDecompositionType">
 <summary>Unicode decomposition types of characters</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Canonical">
 <summary>Canonical mapping (can)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Compatibility">
 <summary>Otherwise unspecified compatibility character (com, &lt;compat>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Circle">
 <summary>Encircled form (enc, &lt;circle>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Final">
 <summary>Final presentation form (Arabic; fin; &lt;final>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Font">
 <summary>Font variant (for example, a blackletter form; font; &lt;font>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Fraction">
 <summary>Vulgar fraction form (fra; &lt;fraction>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Initial">
 <summary>Initial presentation form (Arabic; init; &lt;initial>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Isolated">
 <summary>Isolated presentation form (Arabic; iso; &lt;isolated>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Medial">
 <summary>Medial presentation form (Arabic; med; &lt;medial>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Narrow">
 <summary>Narrow (or hankaku) compatibility character (nar; &lt;narrow>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.NoBreak">
 <summary>No-break version of a space or hyphen (nb; &lt;noBreak>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Small">
 <summary>Small variant form (CNS compatibility; sml; &lt;small>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Square">
 <summary>CJK squared font variant (sqr; &lt;square>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Sub">
 <summary>Subscript form (sub; &lt;sub>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Super">
 <summary>Superscript form (sup; &lt;super>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Vertical">
 <summary>Vertical layout presentation form (vert; &lt;vertical>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.Wide">
 <summary>Wide (or zenkaku) compatibility character (wide; &lt;wide>)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeDecompositionType.none">
 <summary>No decomposition (none)</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeCharacterNumericType">
 <summary>Defines Unicode character numeric type</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterNumericType.None">
 <summary>Character has no numeric value assigned</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterNumericType.Decimal">
 <summary>Character is a decimal digit (0-9) which can be used in  a decimal radix positional numeral system. The character is incoded in Unicode in a contiguous ascending range 0..9.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterNumericType.Digit">
 <summary>Character has an integral value 0-9. This cover digits that need special handling.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeCharacterNumericType.Numeric">
 <summary>Numeric value of character is positive or negative integer or rational number expressed as fraction.</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeJoiningType">
 <summary>Defines Unicode character joining types used in Arabic and other Middle-Eastern scripts</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningType.Right">
 <summary>Right-joining (R)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningType.Left">
 <summary>Left-joining (L)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningType.Dual">
 <summary>Dual-joining (D)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningType.JoinCausing">
 <summary>Join-causing (C)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningType.NonJoining">
 <summary>Non-joining (U). This includes non-Arabic letters</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningType.Transparent">
 <summary>Transparent (T)</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeJoiningGroup">
 <summary>Defines Unicode joining groups for Arabic and other Middle-Eastern scripts</summary>
 <remarks>Value Alef Maqsurah once exited in Unicode standard (v2.x) but it does not appear in newer versions. It seems to be replaced with <see cref="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.YehWithTail"/>. So Alef Maqsurah is not included in this implementation.</remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodeExtensions.Origin(Tools.TextT.UnicodeT.UnicodeJoiningGroup)"/>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.none">
 <summary>No joining group</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Beh">
 <summary>Dual joining Arabic group Beh (ب)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Noon">
 <summary>Dual joining Arabic group Noon (ن)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Nya">
 <summary>Dual joining Arabic group Nya (ڽ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Yeh">
 <summary>Dual joining Arabic group Yeh (ي)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.FarsiYeh">
 <summary>Dual joining Arabic group Farsi Yeh (ی)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.BurushaskiYehBarree">
 <summary>Dual joining Arabic group Burushaski Yeh Barree</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Hah">
 <summary>Dual joining Arabic group Hah (ح)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Seen">
 <summary>Dual joining Arabic group Seen (س)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Sad">
 <summary>Dual joining Arabic group Sad (ص)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Tah">
 <summary>Dual joining Arabic group Tah (ط)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Ain">
 <summary>Dual joining Arabic group Ain (ع)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Feh">
 <summary>Dual joining Arabic group Feh (ف)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Qaf">
 <summary>Dual joining Arabic group Qaf (ق)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Meem">
 <summary>Dual joining Arabic group Meem (م)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Heh">
 <summary>Dual joining Arabic group Heh (ه)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.KnottedHeh">
 <summary>Dual joining Arabic group knotted Heh</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.HehGoal">
 <summary>Dual joining Arabic group Heh goal</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Kaf">
 <summary>Dual joining Arabic group Kaf (ك)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.SwashKaf">
 <summary>Dual joining Arabic group Swash Kaf (ڪ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Gaf">
 <summary>Dual joining Arabic group Gaf (گ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Lam">
 <summary>Dual joining Arabic group Lam (ل)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Alef">
 <summary>Right joining Arabic group Alef (ا)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Waw">
 <summary>Right joining Arabic group Waw (و)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Dal">
 <summary>Right joining Arabic group Dal (د)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Reh">
 <summary>Right joining Arabic group Reh (ر)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.TehMarbuta">
 <summary>Right joining Arabic group Teh Marbuta (ة)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.TehMarbutaGoal">
 <summary>Right joining Arabic group Teh Marbuta goal (ۃ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.HamzaOnHehGoal">
 <summary>This is legacy is alias of <see cref="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.TehMarbutaGoal"/>.</summary>
 <remarks>This value property no longer apply on U+06C2 (Heh goal with Hamza above, &#x06C2;), it applies only to U+06C3 (Teh Marbuta goal, &#x06C3;), so new property alias <see cref="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.TehMarbutaGoal"/> was added to Unicode which makes more sense.</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.YehWithTail">
 <summary>Right joining Arabic group Yeh with tail (ۍ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.YehBarree">
 <summary>Right joining Arabic group Yeh Barree (ے)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.RohingyaYeh">
 <summary>Right joining Arabic group Rohingya Yeh (ࢬ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.StraightWaw">
 <summary>Right joining Arabic group Straight Waw (ࢱ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Beth">
 <summary>Dual Joining Syriac group Beth (ܒ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.PersianBheth">
 <summary>Dual Joining Syriac group Persian Bheth (ܭ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Gamal">
 <summary>Dual Joining Syriac group Gamal (ܓ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.GamalGarshuni">
 <summary>Dual Joining Syriac group Gamal Garshuni (ܔ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.PersianGhamal">
 <summary>Dual Joining Syriac group Persian Ghamal (ܮ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Heth">
 <summary>Dual Joining Syriac group Heth (ܚ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Teth">
 <summary>Dual Joining Syriac group Teth (ܛ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.TethGarshuni">
 <summary>Dual Joining Syriac group Teth Garshuni (ܜ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Yudh">
 <summary>Dual Joining Syriac group Yudh (ܝ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Kaph">
 <summary>Dual Joining Syriac group Kaph (ܟ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.SogdianKhaph">
 <summary>Dual Joining Syriac group Sogdian Khaph (ݎ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Lamadh">
 <summary>Dual Joining Syriac group Lamadh (ܠ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Mim">
 <summary>Dual Joining Syriac group Mim (ܡ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Nun">
 <summary>Dual Joining Syriac group Nun (ܢ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Semkath">
 <summary>Dual Joining Syriac group Semkath (ܣ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.SemkathFinal">
 <summary>Dual Joining Syriac group Semkath final (ܤ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.E">
 <summary>Dual Joining Syriac group E (ܥ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Pe">
 <summary>Dual Joining Syriac group Pe (ܦ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ReversedPe">
 <summary>Dual Joining Syriac group reversed Pe (ܧ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.SogdianFe">
 <summary>Dual Joining Syriac group Sogdian Fe (ݏ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Qaph">
 <summary>Dual Joining Syriac group Qaph (ܩ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Shin">
 <summary>Dual Joining Syriac group Shin (ܫ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Dalath">
 <summary>Right Joining Syriac group Dalath (ܕ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.DotlessDalathRish">
 <summary>Right Joining Syriac group dotless Dalath Rish (ܖ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.PersianDhalath">
 <summary>Right Joining Syriac group Persian Dhalath (ܯ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.He">
 <summary>Right Joining Syriac group He (ܗ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.WawSyraic">
 <summary>Right Joining Syriac group Waw (ܘ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Zain">
 <summary>Right Joining Syriac group Zain (ܙ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.SogdianZhain">
 <summary>Right Joining Syriac group Sogdian Zhain (ݍ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.YudhHe">
 <summary>Right Joining Syriac group Yudh He (ܞ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Sadhe">
 <summary>Right Joining Syriac group Sadhe (ܨ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Rish">
 <summary>Right Joining Syriac group Rish (ܪ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Taw">
 <summary>Right Joining Syriac group Taw (ܬ)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.Alaph">
 <summary>Syraic letter Alaph (U+0710, ܐ) is right-joining character but it's glyph is subject to additional contextual shaping</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanAleph">
 <summary>Dual joining Manichaean group Aleph (𐫀)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanBeth">
 <summary>Dual joining Manichaean group Beth (𐫁)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanGimel">
 <summary>Dual joining Manichaean group Gimel (𐫃)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanAyin">
 <summary>Dual joining Manichaean group Ayin (𐫙)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanDhamedh">
 <summary>Dual joining Manichaean group Dhamedh (𐫔)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanFive">
 <summary>Dual joining Manichaean group Five (𐫬)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanLamedh">
 <summary>Dual joining Manichaean group Lamedh (𐫓)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanMem">
 <summary>Dual joining Manichaean group Mem (𐫖)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanOne">
 <summary>Dual joining Manichaean group One (𐫫)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanPe">
 <summary>Dual joining Manichaean group Pe (𐫛)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanQoph">
 <summary>Dual joining Manichaean group Qoph (𐫞)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanSamekh">
 <summary>Dual joining Manichaean group Samekh (𐫘)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanTen">
 <summary>Dual joining Manichaean group Ten 𐫭()</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanThamedh">
 <summary>Dual joining Manichaean group Thamedh (𐫕)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanTwenty">
 <summary>Dual joining Manichaean group Twenty (𐫮)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanDaleth">
 <summary>Right joining Manichaean group Daleth (𐫅)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanWaw">
 <summary>Right joining Manichaean group Waw (𐫇)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanZayin">
 <summary>Right joining Manichaean group Zayin (𐫉)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanHundred">
 <summary>Right joining Manichaean group Hundred (𐫯)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanKaph">
 <summary>Right joining Manichaean group Kaph (𐫐)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanResh">
 <summary>Right joining Manichaean group Resh (𐫡)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanSadhe">
 <summary>Right joining Manichaean group Sadhe (𐫝)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanTaw">
 <summary>Right joining Manichaean group Taw (𐫤)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanTeth">
 <summary>Right joining Manichaean group Teth (𐫎)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanYodh">
 <summary>Right joining Manichaean group Yodh (𐫏)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanHeth">
 <summary>Left joining Manichaean group Heth (𐫍)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.ManichaeanNun">
 <summary>Left joining Manichaean group Nun (𐫗)</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin">
 <summary>Enumeration denotes origin of <see cref="T:Tools.TextT.UnicodeT.UnicodeJoiningGroup"/> enumeration member</summary>
 <remarks>
 In description of individual enum items in braces is number of table from Unicode chapter 8 where the groups are defined.
 </remarks>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodeExtensions.Origin(Tools.TextT.UnicodeT.UnicodeJoiningGroup)"/>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin.none">
 <summary>This is not joining group</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin.ArabicDual">
 <summary>Dual-Joining Arabic Characters (8-8)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin.ArabicRight">
 <summary>Right-Joining Arabic Characters (8-9)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin.SyriacDual">
 <summary>Dual-Joining Syriac Characters (8-13)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin.SyriacRight">
 <summary>Right-Joining Syriac Characters (8-14)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin.SyriacOther">
 <summary>Other Syriac characters</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin.ManichaeanDual">
 <summary>Dual-joining Manichaean characters</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin.ManichaeanRight">
 <summary>Right-joining Manichaean characters</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeJoiningGroupOrigin.ManichaeanLeft">
 <summary>Left-joining Manichaean characters</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeLineBreakType">
 <summary>Indicates how character behaves in relation with line breaking</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.MandatoryBreak">
 <summary>Mandatory Break (BK) - Cause a line break (after)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.CarriageReturn">
 <summary>Carriage Return (CR) - Cause a line break (after), except between CR and LF</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.LineFeed">
 <summary>Line Feed (LF) - Cause a line break (after)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.CombiningMark">
 <summary>Combining Mark (CM) - Prohibit a line break between the character and the preceding character</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.NextLine">
 <summary>Next Line (NL) - Cause a line break (after)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Surrogate">
 <summary>Surrogate (SG) - Do not occur in well-formed text</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.WordJoiner">
 <summary>Word Joiner (WJ) - Prohibit line breaks before and after</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.ZeroWidthSpace">
 <summary>Zero Width Space (ZW) - Provide a break opportunity</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.NonBreakingGlue">
 <summary>Non-breaking ("Glue") - Prohibit line breaks before and after</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.SPace">
 <summary>Space (SP) - Enable indirect line breaks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.BreakOpportunityBeforeAndAfter">
 <summary>Break Opportunity Before and After (B2) - Provide a line break opportunity before and after the character</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.BreakAfter">
 <summary>Break After (BA) - Generally provide a line break opportunity after the character</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.BreakBefore">
 <summary>Break Before (BB) - Generally provide a line break opportunity before the character</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Hyphen">
 <summary>Hyphen (HY) - Provide a line break opportunity after the character, except in numeric context</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.ContingentBreakOpportunity">
 <summary>Contingent Break Opportunity (CB) - Provide a line break opportunity contingent on additional information</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.ClosePunctuation">
 <summary>Close Punctuation (CL) - Prohibits break before</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.CloseParenthesis">
 <summary>Close Parenthesis (CP) - Prohibits break before</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.ExclamationInterrogation">
 <summary>Exclamation/Interrogation (EX) - Prohibits break before</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Inseparable">
 <summary>Inseparable (IN) - Allow only indirect line breaks between pairs</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Nonstarter">
 <summary>Nonstarter (NS) - Allow only indirect line breaks before</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.OpenPunctuation">
 <summary>Open Punctuation (OP) - Prohibit line breaks after</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Quotation">
 <summary>Quotation (QU) - Act like they are both opening and closing</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.InfixNumericSeparator">
 <summary>Infix Numeric Separator (IS) - Prevent breaks after any and before numeric</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Numeric">
 <summary>Numeric (NU) - Form numeric expressions for line breaking purposes</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.PostfixNumeric">
 <summary>Postfix Numeric (PO) - Do not break following a numeric expression</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.PrefixNumeric">
 <summary>Prefix Numeric (PR) - Do not break in front of a numeric expression</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.SymbolsAllowingBreakAfter">
 <summary>Symbols Allowing Break After (SY) - Prevent a break before, and allow a break after</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Ambiguous">
 <summary>Ambiguous (Alphabetic or Ideographic) (AI) - Act like AL when the resolved EAW is N; otherwise, act as ID</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Alphabetic">
 <summary>Alphabetic (AL) - Are alphabetic characters or symbols that are used with alphabetic characters</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.HangulLvSyllable">
 <summary>Hangul LV Syllable (H2) - Form Korean syllable blocks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.HangulLvtSyllable">
 <summary>Hangul LVT Syllable (H3) - Form Korean syllable blocks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Ideographic">
 <summary>Ideographic (ID) - Break before or after, except in some numeric context</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.HangulLJamo">
 <summary>Hangul L Jamo (JL) - Form Korean syllable blocks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.HangulVJamo">
 <summary>Hangul V Jamo (JV) - Form Korean syllable blocks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.HangulTJamo">
 <summary>Hangul T Jamo (JT) - Form Korean syllable blocks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.ComplexContextDependent">
 <summary>Complex Context Dependent (South East Asian) (SA) - Provide a line break opportunity contingent on additional, language-specific context analysis</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Unknown">
 <summary>Unknown (XX) - Have as yet unknown line breaking behavior or unassigned code positions</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.ConditionalJapaneseStarter">
 <summary>Conditional Japanese Starter (CJ) - From Small kana - Treat as NS or ID for strict or normal breaking.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.HebrewLetter">
 <summary>Hebrew Letter	(HL) - From Hebrew - Do not break around a following hyphen; otherwise act as Alphabetic</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeEastAsianWidth">
 <summary>Defines width of East Asian character</summary>
 <version version="1.5.4">This enum is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeEastAsianWidth.Neutral">
 <summary>Neutral (Not East Asian) (N) - All other characters</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeEastAsianWidth.Full">
 <summary>East Asian Fullwidth (F) - Have compatibility decomposition type &lt;wide></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeEastAsianWidth.Half">
 <summary>East Asian Halfwidth (H) - Explicitly defined as Halfwidth, have compatibility decomposition type &lt;narrow></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeEastAsianWidth.Wide">
 <summary>East Asian Wide (W) - all other characters that are always wide</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeEastAsianWidth.Narrow">
 <summary>East Asian Narrow (Na) - all other characters that are always narrow</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeEastAsianWidth.Ambiguous">
 <summary>East Asian Ambiguous (A) - can be sometimes wide and sometimes narrow (require additional information not contained in the character code to further resolve their width)</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeHangulSyllableType">
 <summary>Indicates Hangul syllable types</summary>
 <version version="1.5.4">This enum is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.notApplicable">
 <summary>This is not a Hangul syllable</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.LeadingJamo">
 <summary>Hangul syllable type L</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.VowelJamo">
 <summary>Hangul syllable type V</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.Lv">
 <summary>Hangul syllable type LV</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.Lvt">
 <summary>Hangul syllable type LVT</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.TrailingJamo">
 <summary>Hangul syllable type T</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak">
 <summary>Values of <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GraphemeClusterBreak"/> property</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
 <remarks>Details provided in http://www.unicode.org/reports/tr29/</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.other">
 <summary>No indication</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.Cr">
 <summary>Carriage Return</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.Lf">
 <summary>Line Feed</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.Control">
 <summary>General categories Zl, Zp, Cc, Cf excluding characters CR, LF, ZWNJ, ZWJ</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.Extend">
 <summary>General categories <see cref="F:System.Globalization.UnicodeCategory.NonSpacingMark"/> or <see cref="F:System.Globalization.UnicodeCategory.EnclosingMark"/>, characters <see cref="F:Tools.Chars.ZeroWidthNonJoiner"/> and <see cref="F:Tools.Chars.ZeroWidthJoiner"/> and a few spacing marks needed for canonical equivalence.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.Prepend">
 <summary>Some characters which represents logical order exceptions</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.SpacingMark">
 <summary>General category is specifying mark plus few other characters</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.HangulL">
 <summary><see cref="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.LeadingJamo"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.HangulV">
 <summary><see cref="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.VowelJamo"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.HangulT">
 <summary><see cref="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.TrailingJamo"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.HangulLv">
 <summary><see cref="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.Lv"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.HangulLvt">
 <summary><see cref="F:Tools.TextT.UnicodeT.UnicodeHangulSyllableType.Lvt"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeGraphemeClusterBreak.RegionalIndicator">
 <summary>The RI characters are used in pairs to denote Emoji national flag symbols corresponding to ISO country codes.</summary>
 <remarks>Sequences of more than two RI characters should be separated by other characters, such as U+200B ZERO WIDTH SPACE (ZWSP).</remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeWordBreakType">
 <summary>Specifies Unicode word-breaky types</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.other">
 <summary>No word-break type</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.Cr">
 <summary>Carriage Return (CR)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.Lf">
 <summary>Line Feed (LF)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.NewLine">
 <summary>Several other new line characters (vertical TAB, FF, NEL, LS, PS)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.Extend">
 <summary>Extended Graphemes ans Spacing Marks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.Format">
 <summary><see cref="F:System.Globalization.UnicodeCategory.Format"/> but ZWSP, ZWNJ, ZWJ</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.Katakana">
 <summary>Katakana-script characters plus several others</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.ALetter">
 <summary>Alphabetic but U+05F3, ideographs <see cref="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.Katakana"/>, <see cref="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.ComplexContextDependent"/>, Hiragana, <see cref="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.Extend"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.MidNumLet">
 <summary>Defined characters (', ., ‘, ’, ․, ﹒, ＇, ．)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.MidLetter">
 <summary>Defined characters (·, ״, ‧, :, ·, ︓, ﹕, ：)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.MidNum">
 <summary><see cref="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.InfixNumericSeparator"/> (but :, ︓, .) plus fe other characters</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.Numeric">
 <summary><see cref="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Numeric"/> but U+066C</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.ExtendNumSet">
 <summary><see cref="F:System.Globalization.UnicodeCategory.ConnectorPunctuation"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.DoubleQuote">
 <summary>Quotation mark (")</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.HebrewLetter">
 <summary>Other letters of Hebrew script</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeWordBreakType.SingleQuote">
 <summary>Apostrophe (')</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeSentenceBreakType">
 <summary>Specifies sentence break types</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.other">
 <summary>Not specified</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Cr">
 <summary>Carriage Return (CR)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Lf">
 <summary>Line Feed (LF)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Extend">
 <summary>Extended graphemes and spacing marks</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Separator">
 <summary>New-line-like separators (NEL, LS, PS)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Format">
 <summary><see cref="F:System.Globalization.UnicodeCategory.Format"/> but ZWNJ, ZWJ</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Space">
 <summary>Whitespaces not in other categories (excludes lines separators, CR, LF)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Lower">
 <summary>Lowercase but extended graphemes</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Upper">
 <summary>Uppercase and tilecase</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.OLetter">
 <summary>Alphabetic neither <see cref="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Lower"/> nor <see cref="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Upper"/> nor <see cref="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Extend"/> plus NBSP and U+05F3</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Numeric">
 <summary><see cref="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Numeric"/></summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.ATerm">
 <summary>Full stop, One dot leader, Small full stop, Fulllwidth full stop</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Continue">
 <summary>Characters (usually punctuation) used inside sentences</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.STerm">
 <summary><see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsSentenceTerminal"/> = true</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.Close">
 <summary><see cref="F:System.Globalization.UnicodeCategory.OpenPunctuation"/> or <see cref="F:System.Globalization.UnicodeCategory.ClosePunctuation"/> or <see cref="F:Tools.TextT.UnicodeT.UnicodeLineBreakType.Quotation"/> but U+05F3 (exluding <see cref="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.ATerm"/> and <see cref="F:Tools.TextT.UnicodeT.UnicodeSentenceBreakType.STerm"/>)</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeBidiPairedBracketType">
 <summary>Types of bracket characters. Used for bracket matching</summary>
 <version version="1.5.4">This enum is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiPairedBracketType.Unknown">
 <summary>Pairing bracket type is not specified</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiPairedBracketType.Open">
 <summary>The character is opening bracket</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeBidiPairedBracketType.Close">
 <summary>The character is closing bracket</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeNameAliasType">
 <summary>Types of Unicode name aliases</summary>
 <version version="1.5.4">This enum is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNameAliasType.Unknown">
 <summary>The alias type is not known or was not loaded</summary>
 <remarks>This can happen when older version of UCD NameAliases.txt is loaded</remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNameAliasType.Correction">
 <summary>Corrections for serious problems in the character names</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNameAliasType.Control">
 <summary>ISO 6429 names for C0 and C1 control functions, and other commonly occurring names For control codes</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNameAliasType.Alternate">
 <summary>A few widely used alternate names for format characters</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNameAliasType.Figment">
 <summary>Several documented labels for C1 control code points which were never actually approved In any standard</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNameAliasType.Abbreviation">
 <summary>Commonly occurring abbreviations (or acronyms) for control codes, format characters, spaces, And variation selectors</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory">
 <summary>Defines the placement categories for dependent vowels, viramas, combining marks, and other characters used in Indic scripts.</summary>
 <version version="1.5.4">This enum is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.NA">
 <summary>The value is unknown or not specified</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.Top">
 <summary>Top position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.Right">
 <summary>Right position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.Bottom">
 <summary>Bottom position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.Left">
 <summary>Left position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.BottomRight">
 <summary>Bottom-right position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.LeftRight">
 <summary>Left-right position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.TopBottom">
 <summary>Top and bottom position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.TopBottomRight">
 <summary>Top and bottom-right position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.TopLeft">
 <summary>Top-left position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.TopLeftRight">
 <summary>Top-left and right position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.TopRight">
 <summary>Top-right position</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.Overstruck">
 <summary>Over-struck</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeIndicPositionalCategory.VisualOrderLeft">
 <summary>Visually order left</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeExtensions">
 <summary>Contains Unicode-related extension methods</summary>
 <version version="1.5.4">This module is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeExtensions.GetClass(System.Globalization.UnicodeCategory)">
 <summary>Gets generalized Unicode category given general category belongs to</summary>
 <param name="category">A Unicode general category to gete generalized category for</param>
 <returns>A <see cref="T:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass"/> indicating type of <paramref name="category"/>.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="category"/> is not one of <see cref="T:System.Globalization.UnicodeCategory"/> values</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeExtensions.GetStrength(Tools.TextT.UnicodeT.UnicodeBidiCategory)">
 <summary>Gets strength of bidirectional class</summary>
 <param name="bidClass">A bidirectional class to get strength of</param>
 <returns>Strength of bidirectional class <paramref name="bidClass"/> as indicated by 2nd-least significant byte (2nd LSB) of that number.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeExtensions.Origin(Tools.TextT.UnicodeT.UnicodeJoiningGroup)">
 <summary>Gets origin of Unicode joining group</summary>
 <param name="group">A Unicode joining group to get origin of</param>
 <returns>Value indicating origin of Unicode joining group <paramref name="group"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="group"/> is not one of <see cref="T:Tools.TextT.UnicodeT.UnicodeJoiningGroup"/> values</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeNameAlias">
 <summary>Represents Unicode name alias (from UCD's NameAliases.txt)</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNameAlias.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNameAlias.Alias">
 <summary>Gets the alias name</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNameAlias.Type">
 <summary>Gets alias type</summary>
 <remarks>If name aliases were loaded form older version of UCD's NameAliases.txt this property can have value of <see cref="F:Tools.TextT.UnicodeT.UnicodeNameAliasType.Unknown"/></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNameAlias.Element">
 <summary>Gets XML element this instance wraps</summary>
 <returns>An XML element this instance wraps, in case this instance has been constructed form XML element. Null otherwise.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeNameAlias.#ctor(System.String,Tools.TextT.UnicodeT.UnicodeNameAliasType)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeNameAlias"/> class</summary>
 <param name="alias$">Alias name</param>
 <param name="type">Alias type</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="alias"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="type"/> is not one of pre-defined <see cref="T:Tools.TextT.UnicodeT.UnicodeNameAliasType"/> values</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeNameAlias.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeNameAlias"/> class</summary>
 <param name="element">A <see cref="T:System.Xml.Linq.XElement"/> that represents this named sequence</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;name-alias> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeNameAlias.ToString">
 <summary>Gets string representation of this object</summary>
 <returns>String representation of this object in form <see cref="P:Tools.TextT.UnicodeT.UnicodeNameAlias.Alias"/>;<see cref="P:Tools.TextT.UnicodeT.UnicodeNameAlias.Type"/></returns>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeNamedSequence">
 <summary>Represents a named sequence of unicode characters</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNamedSequence.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeNamedSequence.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeNamedSequence"/> class</summary>
 <param name="element">A <see cref="T:System.Xml.Linq.XElement"/> that represents this named sequence</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;named-sequence> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNamedSequence.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNamedSequence.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNamedSequence.Name">
 <summary>Gets name of this named sequence</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNamedSequence.CodePoints">
 <summary>Gets array of code points that belong to this named sequence</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNamedSequence.Sequence">
 <summary>Gets a string that represents characters in this named sequence</summary>
 <seelaso cref="M:Tools.TextT.UnicodeT.CodePointInfoCollection.ToString"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeNamedSequence.ToString">
 <summary>Gets a string that represents this <see cref="T:Tools.TextT.UnicodeT.UnicodeNamedSequence"/></summary>
 <returns><see cref="P:Tools.TextT.UnicodeT.UnicodeNamedSequence.Name"/> and <see cref="P:Tools.TextT.UnicodeT.UnicodeNamedSequence.Sequence"/> concatenated using space</returns>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeNormalizationCorrection">
 <summary>Represents a normalization correction - change in normalization that happpened between Unicode versions</summary>
 <version version="1.5.4">THis class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeNormalizationCorrection.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeNormalizationCorrection.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeNamedSequence"/> class</summary>
 <param name="element">A <see cref="T:System.Xml.Linq.XElement"/> that represents this named sequence</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;named-sequence> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNormalizationCorrection.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNormalizationCorrection.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNormalizationCorrection.Version">
 <summary>Gets Unicode standard version in which this correction was introduced</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNormalizationCorrection.CodePoint">
 <summary>Gets a code point this correction informs about change of normalization of</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNormalizationCorrection.NewNormalization">
 <summary>Gets codepoint(s) indicating new normalization</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeNormalizationCorrection.OldNormalization">
 <summary>Gets codepoint(s) indicating old normalization</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider">
 <summary>Common base class for Unicode code points and groups. This class holds character properties</summary>
 <remarks>
 This class defines Unicode Character Database (UCD) properties.
 Properties that belong to UCD are decorated with <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyAttribute"/>.
 Properties that do not belong to UCD are decorated with <see cref="T:System.Xml.Serialization.XmlIncludeAttribute"/>.
 Other attributes are used to describe UCD properties and how they are used in UCD.
 <list type="table"><listheader><term>Attribute</term><description>Used for</description></listheader>
 <item><term><see cref="T:Tools.TextT.UnicodeT.UnicodePropertyAttribute"/></term><description>Indicates that this property is UCD property and provides basic information about it.</description></item>
 <item><term><see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategory"/></term><description>
     Indicates to which category (according to Table 7, chapter 5.1 of Unicode Standard Annex #44) the property belong.
     This attribute derives from <see cref="T:System.ComponentModel.CategoryAttribute"/>.
     Unihan properties are decorated with <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute"/> attribute instead (which inherits from <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyAttribute"/>).
 </description></item>
 <item><term><see cref="T:System.ComponentModel.DisplayNameAttribute"/></term><description>Provides (localized) human-friendly property name</description></item>
 <item><term><see cref="T:System.Xml.Serialization.XmlAttributeAttribute"/></term><description>Indicates name of XML attribute the property is stored in in Unicode Character Database XML.</description></item>
 <item><term><see cref="T:System.ObsoleteAttribute"/></term><description>Indicates that the property is deprecated in latest Unicode Standard (supported by this class)</description></item>
 <item><term><see cref="T:System.Xml.Serialization.XmlIgnoreAttribute"/></term><description>
     Indicates that this property is not UCD property.
     It's either property that supports <see cref="N:Tools.TextT.UnicodeT"/> infrastructure or it's property that provides information derived from one or more UCD properties.
     Infrastructure properties are also decorated with <see cref="T:System.ComponentModel.BrowsableAttribute"/> with <see cref="P:System.ComponentModel.BrowsableAttribute.Browsable"/> set to false.
 </description></item>
 <item><term><see cref="T:System.ComponentModel.BrowsableAttribute"/></term><description>
     Only used with <see cref="P:System.ComponentModel.BrowsableAttribute.Browsable"/> set to false.
     If the property is also decorated with <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute"/> it's an infrastructure property used to support <see cref="N:Tools.TextT.UnicodeT"/> infrastructure.
     Otherwise it's hidden UCD property. This is property used for deriving of other UCD properties
     (i.e. Contributory property - <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> is <see cref="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Contributory"/> and <see cref="P:Tools.TextT.UnicodeT.UnicodePropertyAttribute.Status"/> is <see cref="F:Tools.TextT.UnicodeT.UnicodePropertyStatus.Contributory"/>).
     Name of such property usually starts with <c>Other_</c>.
 </description></item>
 <item><term><see cref="T:System.ComponentModel.DefaultValueAttribute"/></term><description>
     Some properties indicates default value used by UCD when property value is not explicitly specified.
 </description></item>
 <item><term><see cref="T:System.ComponentModel.EditorBrowsableAttribute"/></term><description>
     Contributory properties
     (i.e. properties used when deriving values of other UCD derived properties, <see cref="P:System.ComponentModel.CategoryAttribute.Category"/> is <see cref="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Contributory"/> and <see cref="P:Tools.TextT.UnicodeT.UnicodePropertyAttribute.Status"/> is <see cref="F:Tools.TextT.UnicodeT.UnicodePropertyStatus.Contributory"/>)
     are usually decorated with <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> with <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State"/> set to <see cref="F:System.ComponentModel.EditorBrowsableState.Advanced"/>.
     These properties are typically also decorated with <see cref="T:System.ComponentModel.BrowsableAttribute"/> with <see cref="P:System.ComponentModel.BrowsableAttribute.Browsable"/> set to false.
     Also some obsolete/deprecated properties are decorated with <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> with <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State"/> set to <see cref="F:System.ComponentModel.EditorBrowsableState.Advanced"/>.
 </description></item>
 </list>
 <note>May boolean properties' names are prefixed with the "Is" prefix which is not used in UCD.</note>
 <note>Unihan database properties has prefix "Han" (unihan property can be also determined by use of <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute"/> instead of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute"/>).</note>
 <note>XML serialization attributes used to decorate properties of this class are not intended for XML serialization, they are rather intended as machine-readable documentation where the property originates from in UCD XML.</note>
 <para>For list of Unicode properties see http://www.unicode.org/reports/tr44/#Property_Index</para>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> class</summary>
 <param name="element">A XML element which stores the properties</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IXNodeWrapper_Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider" /> (it's <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> and its backed by the same (reference equivalence) <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>); otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider" />. </param>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetPropertyValue(System.String)">
 <summary>Gets value of given property (attribute with no namespace)</summary>
 <param name="name">Name of the property (attribute) to get value of. This is name of property (XML attribute) as used in Unicode Character Database XML.</param>
 <returns>Value of the property (attribute) as string. Null if the attribute is not present on <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetPropertyValue(System.String,System.String,System.Boolean)">
 <summary>When overridden in derived class get value of given property (attribute with namespace specified) resolving or not resolving placeholders in property value</summary>
 <param name="namespace">Name of attribute XML namespace</param>
 <param name="name">Name of the property (attribute) to get value of. This is name of property (XML attribute) as used in Unicode Character Database XML.</param>
 <param name="allowResolving">True to allow placeholder resolving, false not to allow it. Only used if overridden in derived class. This implementation never resolves placholders.</param>
 <returns>Value of the property (attribute) as string. Null if the attribute is not present on <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.</returns>
 <remarks>Derived class may provide fallback logic for providing property values when the property is not defined on <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.
 <para>
 This implementation simply calls <see cref="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetPropertyValue(System.String,System.String)"/> overload not resolving any placeholders (ignoring <paramref name="allowResolving"/>).
 When derived class implements resolving it's not mandatory to happen. Derived class implementation resolves placeholders if it can and leaves them in property value if it cannot resolve them.
 </para></remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetPropertyValue(System.String,System.Boolean)">
 <summary>When <see cref="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetPropertyValue(System.String,System.String,System.Boolean)"/> overload is overridden overridden in derived class get value of given property (attribute with no namespace) resolving or not resolving placeholders in property value</summary>
 <param name="name">Name of the property (attribute) to get value of. This is name of property (XML attribute) as used in Unicode Character Database XML.</param>
 <param name="allowResolving">True to allow placeholder resolving, false not to allow it. Only used if overridden in derived class. This implementation never resolves placholders.</param>
 <returns>Value of the property (attribute) as string. Null if the attribute is not present on <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.</returns>
 <remarks>If <see cref="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetPropertyValue(System.String,System.String,System.Boolean)"/> is not overridden resolving is never performed.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetPropertyValue(System.String,System.String)">
 <summary>Gets value of given property (attribute with namespace specified)</summary>
 <param name="namespace">Name of attribute XML namespace</param>
 <param name="name">Name of the property (attribute) to get value of. This is name of property (XML attribute) as used in Unicode Character Database XML.</param>
 <returns>Value of the property (attribute) as string. Null if the attribute is not present on <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.</returns>
 <remarks>Derived class may provide fallback logic for providing property values when the property is not defined on <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetExtension(System.String)">
 <summary>Gets an instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> that provides property values defined in UCD extensions model identified by a namespace name</summary>
 <param name="namespace">Name of nbamespace to get extensions UCD for. <note>Null and empty string value are always ignored and this method returns null.</note></param>
 <returns>
 An instance of <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/> that provides values of UCD extension properties
 (i.e. properties that are not part of Unicode standard and come from other source).
 The model to get properties for is identified by <paramref name="namespace"/>.
 Returns null if either <paramref name="namespace"/> is null or an empty string, or no extensions are registered for document <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/> belongs to, or extensions for namespace <paramref name="namespace"/> is not registered.
 </returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetExtensions">
 <summary>Gets all registered extensions for <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.<see cref="P:System.Xml.Linq.XObject.Document">Document</see></summary>
 <returns>All registered extensions for <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.<see cref="P:System.Xml.Linq.XObject.Document">Document</see>. Null if there are no extensions registered.</returns>
 <remarks>
 Extensions are registered in a dictionary which is stored in document annotation of type <see cref="T:System.Collections.Generic.IDictionary`2"/>[<see cref="T:System.String"/>, <see cref="T:Tools.TextT.UnicodeT.UnicodeCharacterDatabase"/>].
 Primary way of accessing extensions is the <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions"/> property.
 </remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.Extensions"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetTextualExtensions">
 <summary>Gets all registered textual extensions for <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.<see cref="P:System.Xml.Linq.XObject.Document">Document</see></summary>
 <returns>All registered textual extensions for <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.<see cref="P:System.Xml.Linq.XObject.Document">Document</see>. Null if no extensions are registered.</returns>
 <remarks>
 Extensions are registered in dictionray which is stored in document annotation of type <see cref="T:System.Collections.Generic.IDictionary`2"/>[<see cref="T:System.String"/>, <see cref="T:System.Object"/>].
 Actual type of extension depends on its type. Primary way of accessing extensions if the <see cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.TextualExtensions"/> property.
 </remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodeCharacterDatabase.TextualExtensions"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetTextualExtension(System.String)">
 <summary>Gets one oextension from textual extensions registered for <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Element"/>.<see cref="P:System.Xml.Linq.XObject.Document">Document</see>.</summary>
 <returns>An object represneting the extension registered under name <paramref name="name"/>. Null if either the extension is not registered or no extensions are registered.</returns>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Age">
 <summary>Gets version of Unicode in which a code point was assigned to an abstract character, or made surrogate or non-character</summary>
 <returns>Version of Unicode standard or null. Null is returned also when underlying XML attribute has value "unassigned".</returns>
 <remarks>Unicode standard defines values this property can have (i.e. it cannot have any version number and typically only <see cref="P:System.Version.Major"/> and <see cref="P:System.Version.Minor"/> numbers are used.
 <para>Underlying XML attribute is @age.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Name">
 <summary>Gets name of the character in current version of Unicode standard</summary>
 <remarks>
 If specified on group or range can contain character #. When specified on individual code point, character # is replaced with value of current code point.
 <para>Unicode character names are usually uppercase.</para>
 <para>Underlying XML attribute is @na.</para>
 <para>These names match exactly the names published in the code charts of the Unicode Standard.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Name1">
 <summary>Gets name of the character the character had in version 1 of Unicode standard</summary>
 <returns>Name character had in version 1 of Unicode standard (if specified; null otherwise)</returns>
 <remarks>
 If specified on group or range can contain character #. When specified on individual code point, character # is replaced with value of current code point.
 <para>Underlying XML attribute is @na1.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GeneralCategory">
 <summary>Gets general category of code point</summary>
 <value>Default value when not assigned in Unicode Character Database is <see cref="F:System.Globalization.UnicodeCategory.OtherNotAssigned"/></value>
 <exception cref="T:System.InvalidOperationException">Value of underlying attribute cannot be mapped to <see cref="T:System.Globalization.UnicodeCategory"/> enumeration value.</exception>
 <remarks>Underlying XML attribute is @gc.
 <para>This is a useful breakdown into various character types which can be used as a default categorization in implementations.</para></remarks>
 <seelaso cref="M:System.Char.GetUnicodeCategory(System.Char)"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GeneralCategoryClass">
 <summary>Gets generalized unicode category of code point</summary>
 <value>Default value if <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GeneralCategory"/> is not assigned in Unicode Character Database is <see cref="F:Tools.TextT.UnicodeT.UnicodeGeneralCategoryClass.Other"/>.</value>
 <seelaso cref="M:Tools.TextT.UnicodeT.UnicodeExtensions.GetClass(System.Globalization.UnicodeCategory)"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.CanonicalCombiningClass">
 <summary>Gets combining class of the character</summary>
 <remarks>Underlying XML attribute is @ccc.
 <para>The classes used for the Canonical Ordering Algorithm in the Unicode Standard. This property could be considered either an enumerated property or a numeric property: the principal use of the property is in terms of the numeric values.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Block">
 <summary>Gets name of block the character belongs to</summary>
 <remarks>Underlying XML attribute is @blk.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.BidiCategory">
 <summary>Gets bidirectional category of the character</summary>
 <returns>Unicode bidirectional category specified for current character. Null if bidi class is not specified in Unicode Character Database - in this case Unicode Bidirectional Alghoritm should be used to determine default value of bidi class of character.</returns>
 <remarks>Underlying XML attributes is @bc</remarks>
 <exception cref="T:System.InvalidOperationException">Underlying XML attribute value cannot be mapped to <see cref="T:Tools.TextT.UnicodeT.UnicodeBidiCategory"/> value</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetUnicodeBidiCategory(System.String)">
 <summary>Gets <see cref="T:Tools.TextT.UnicodeT.UnicodeBidiCategory"/> value form its string abbreviated representation</summary>
 <param name="value">Abbreviated string representation of Unicode bidi category</param>
 <returns>A <see cref="T:Tools.TextT.UnicodeT.UnicodeBidiCategory"/> value</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is not one of known abbreviations of <see cref="T:Tools.TextT.UnicodeT.UnicodeBidiCategory"/> values.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.BidiStrength">
 <summary>Gets bidirectional strenght of the character</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsMirrored">
 <summary>Gets value indicating if the character should be mirrored horizontally when rendering in right-to-left text</summary>
 <remarks>Note that for some characters the mirroring is not exact mirroring but e.g. mirroring only of part of a glyph.
 <para>Underlying XML attributes is @Bidi_M.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.BidiMirroringGlyph">
 <summary>Gets a code point of glyph that is typically mirrored version of this glyph when used in right-to-left text</summary>
 <remarks>Underlying XML attribute is @bmg.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsBidiControl">
 <summary>Gets value indicating if code point is bidirectional control character</summary>
 <remarks>Underlying XML attribute is @Bidi_C</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.BidiPairedBracket">
 <summary>For an opening bracket gets, the code point of the matching closing bracket. For a closing bracket gets, the code point of the matching opening bracket.</summary>
 <remarks>
 This property is used in the implementation of parenthesis matching.
 <para>Underlying XML attribute is @bpb</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.DecompositionType">
 <summary>Gets decomposition type of character</summary>
 <remarks>Underlying XML atttributes is @dt.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.DecompositionMapping">
 <summary>Gets collection of characters that forms canonic decomposition of this character</summary>
 <remarks>Underlying XML attribute is @dm.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.CompositionExclusion">
 <summary>Gets value indicating if character is explicitly excluded from composition. This information comes from CompositionExclusions.txt</summary>
 <remarks>
 Underlying XML attributes is @CE.
 <para>See <a href="http://www.unicode.org/reports/tr15/#Primary_Exclusion_List_Table">UAX #15</a> for details.</para>
 <para>There are more reasons for character to be excluded from composition than just CompositionExclusions.txt. All the posibilities are recorded in <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.FullCompositionExclusion"/>.</para>
 </remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.FullCompositionExclusion"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.FullCompositionExclusion">
 <summary>Gets value indicating if character is explicitly or otherwise excluded from composition. This information comes from DerivedNormalizationProps.txt</summary>
 <remarks>Underlying XML attributes is @Comp_Ex. <para>If you are looking only for explicit composition exclusions see <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.CompositionExclusion"/>.</para></remarks>
 <seelaso cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.CompositionExclusion"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.NormalizationFormCQuickCheck">
 <summary>Gets value indicating if character never (false), sometimes (null) or always (true) appears in normalization from C</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute is newither N nor M nor Y.</exception>
 <remarks>Underlying XML attribute is @NFC_QC</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.NormalizationFormDQuickCheck">
 <summary>Gets value indicating if character always (true) or never(false) occurs in normalization from D</summary>
 <remarks>Underlying XML attribute is @NFC_QD.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.NormalizationFormKCQuickCheck">
 <summary>Gets value indicating if character always (true) or never(false) occurs in normalization from KC</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute is newither N nor M nor Y.</exception>
 <remarks>Underlying XML attribute is @NFKC_QC.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.NormalizationFormKDQuickCheck">
 <summary>Gets value indicating if character always (true) or never(false) occurs in normalization from KD</summary>
 <remarks>Underlying XML attribute is @NFKD_QC.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ExpandOnC">
 <summary>Gets value indicating if character expands to more than one character on normalization form C</summary>
 <remarks><para>This property is deprecated as of Unicode 6.0</para>Underlying XML attribute is @XO_NFC.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ExpandOnD">
 <summary>Gets value indicating if character expands to more than one character on normalization form D</summary>
 <remarks><para>This property is deprecated as of Unicode 6.0</para>Underlying XML attribute is @XO_NFD.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ExpandOnKC">
 <summary>Gets value indicating if character expands to more than one character on normalization form KC</summary>
 <remarks><para>This property is deprecated as of Unicode 6.0</para>Underlying XML attribute is @XO_NFKC.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ExpandOnKD">
 <summary>Gets value indicating if character expands to more than one character on normalization form KD</summary>
 <remarks><para>This property is deprecated as of Unicode 6.0</para>Underlying XML attribute is @XO_NFKD.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.CaseFoldingClosureExtraMappingKC">
 <summary>In case character requires extra mappings for closure under Case Folding plus Normalization Form KC this property returns it.</summary>
 <returns>If extra mapping is required, returns it. Otherwise returns null.</returns>
 <remarks>This property is obsolete as of Unicode 6.0<para>Underlying XML attribute is @FC_NFKC.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.NumericType">
 <summary>Gets value indicating if character represents a number and if so, number of which kind it represents.</summary>
 <exception cref="T:System.InvalidOperationException">Underlying XML attribute value is neither None, De, Di nor Nu.</exception>
 <remarks>Underlying XML attribute is @nt.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.NumericValue">
 <summary>Gets numeric value assigned to a character (if any)</summary>
 <remarks>Underlying XML attributes id @nv.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.JoiningType">
 <summary>Gets joining type of a character (for Arabic and other Middle-Eastern characters)</summary>
 <value>Default value is either <see cref="F:Tools.TextT.UnicodeT.UnicodeJoiningType.Transparent"/> (for characters of <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GeneralCategory"/> <see cref="F:System.Globalization.UnicodeCategory.NonSpacingMark"/>, <see cref="F:System.Globalization.UnicodeCategory.EnclosingMark"/> or <see cref="F:System.Globalization.UnicodeCategory.Format"/>) or <see cref="F:Tools.TextT.UnicodeT.UnicodeJoiningType.NonJoining"/> (all others).</value>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribue is neither of: R, L, D, C, U, T</exception>
 <remarks>Underlying XML attribute is @jt.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.JoiningGroup">
 <summary>Gets joining group character belongs to (for Arabic and other Middle-Eastern characters)</summary>
 <exception cref="T:System.InvalidOperationException">Underlying XML attribute value is not one of well-known values</exception>
 <remarks>Underlying XML attribute is @jg.
 <note>XML attribute value <c>Alef_Maqsurah</c> (which seems not to be used after Unicode 2.x) silently maps to <see cref="F:Tools.TextT.UnicodeT.UnicodeJoiningGroup.YehWithTail"/>.</note></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsJoinControl">
 <summary>Gets value indicating if this is format control character which has specific functions for control of cursive joining and ligation</summary>
 <remarks>Underlaying XML attribute is @Join_C.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.LineBreak">
 <summary>Gets value indicating how the character behaves when libe breaking is concerned</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlyicng XML attribute is not one of expected values</exception>
 <remarks>Underlying XML attribute is @lb</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.EastAsianWidth">
 <summary>Gets width of East-Asian character</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute is neither of: A, F, H, N, Na, W</exception>
 <remarks>Underlying XML attribute is @ea</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsUppercase">
 <summary>Gets value indicating if character is uppercase</summary>
 <remarks>Underlying XML attribute is @Upper</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsLowercase">
 <summary>Gets value indicating if character is lowercase</summary>
 <remarks>Underlying XML attribute is @Lower</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsOtherUppercase">
 <summary>Gets value indicating if character is other uppercase</summary>
 <remarks>Underlying XML attribute is @OUpper
 <para>Used in deriving the <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsLowercase"/> property.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsOtherLowercase">
 <summary>Gets value indicating if character is other lowercase</summary>
 <remarks>Underlying XML attribute is @OLower
 <para>Used in deriving the <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsUppercase"/> property.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleUppercaseMapping">
 <summary>Gets uppercase conterpart of this cahacter (if simple uppercase counterpar is defined)</summary>
 <remarks>
 Underlying XML attribute is @suc.
 <para>Simple upppercase mapping is such mapping where the character maps to single uppercase character (as opposed to a sequence)</para>
 <para>Many characters in Unicode maps to themselves.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleLowercaseMapping">
 <summary>Gets lowercase conterpart of this cahacter (if simple lowercase counterpar is defined)</summary>
 <remarks>
 Underlying XML attribute is @slc.
 <para>Simple lowercase mapping is such mapping where the character maps to single lowercase character (as opposed to a sequence)</para>
 <para>Many characters in Unicode maps to themselves.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleTilecaseMapping">
 <summary>Gets tilecase conterpart of this cahacter (if simple tilecase counterpar is defined)</summary>
 <remarks>
 Underlying XML attribute is @stc. If it doesnt provide value <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleUppercaseMapping"/> is used.
 <para>Simple tilecase mapping is such mapping where the character maps to single tilecase character (as opposed to a sequence)</para>
 <para>Many characters in Unicode maps to themselves.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.UppercaseMappping">
 <summary>Gets uppercase mapping for this character (that is one character or sequence of characters which form uppercase conterpart of current character)</summary>
 <remarks>Underlying XML attribute is @uc, if it does not provide value <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleUppercaseMapping"/> is used instead</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.LowercaseMappping">
 <summary>Gets lowercase mapping for this character (that is one character or sequence of characters which form lowercase conterpart of current character)</summary>
 <remarks>Underlying XML attribute is @lc, if it does not provide value <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleLowercaseMapping"/> is used instead</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.TilecaseMappping">
 <summary>Gets uppercase mapping for this character (that is one character or sequence of characters which form tilecase conterpart of current character)</summary>
 <remarks>Underlying XML attribute is @tc, if it does not provide value <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleTilecaseMapping"/> is used instead. If it does not provide value <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleUppercaseMapping"/> is used instead.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleCaseFolding">
 <summary>Gets mapping from character to its case-folded forms (if the character maps to only one character).</summary>
 <remarks>Underlying XML attribute is @scf.<para>If this property does not provide value check <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.CaseFolding"/>.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.CaseFolding">
 <summary>Gets mapping from character to its case-folded forms.</summary>
 <remarks>Underlying XML attribute is @scf. If this attribute is not specified this property returns value of <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SimpleCaseFolding"/> as one-item collection.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsCaseIgnorable">
 <summary>Gets value indicating if the character is ignored for casing purposes</summary>
 <remarks>Underlying XML attribute is @CI</remarks> 
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsCased">
 <summary>Gets value indicating if the character either lowercase, uppercase or tilecase character</summary>
 <remarks>Underlying XML attribute is @Cased</remarks> 
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ChangesWhenCasefolded">
 <summary>Gets value indicating wheather character from is unstable under case folding</summary>
 <returns>True if character's normalized forms are not stable under case folding.</returns>
 <remarks>Underlying XML attribute is @CWCF</remarks> 
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ChangesWhenCasemapped">
 <summary>Gets value indicating if the character may change when it undergoes case mapping</summary>
 <remarks>Underlying XML attribute is @CWCM</remarks> 
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ChangesWhenLowercased">
 <summary>Gets value indicating whether character's normalized forms are not stable under to-lowercase mapping</summary>
 <returns>True if character's normalized froms are not stable under to-lowercase mapping</returns>
 <remarks>Underlying XML attribute is @CWL</remarks> 
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ChangesWhenUppercased">
 <summary>Gets value indicating whether character's normalized forms are not stable under to-uppercase mapping</summary>
 <returns>True if character's normalized froms are not stable under to-uppercase mapping</returns>
 <remarks>Underlying XML attribute is @CWL</remarks> 
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ChangesWhenTilecased">
 <summary>Gets value indicating whether character's normalized forms are not stable under to-tilecase mapping</summary>
 <returns>True if character's normalized froms are not stable under to-tilecase mapping</returns>
 <remarks>Underlying XML attribute is @CWL</remarks> 
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ChangesWhenNfKCCasefold">
 <summary>Gets value indicating if character is not identical to its Normalization Form KC casefold mapping</summary>
 <returns>True if character is not identical to its Normalization Form KC casefold mapping.</returns>
 <remarks>Underlying XML attribute is @CWKCF</remarks> 
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.NfKCCasefold">
 <summary>Gets a mapping designed for best behavior when doing caseless matching of strings interpreted as identifiers</summary>
 <remarks>Underlying XML attribute is @NFKC_CF</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.Script">
 <summary>Gets an ISO 15924 code of script the character belongs to</summary>
 <remarks>
 Each character either belongs to specific script or it inherits it's script from preceding characters (Inherited  - value "Zinh" ("Qaai" before Unicode 5.2)), can be used with multiple scripts (Common - value "Zyyy") or its script assigment is not known (Unknown - value "Zzzz").
 <para>Underlying XML attributes is @sc.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ScriptExtensions">
 <summary>Indicates which characters are commonly used with more than one script, but With a limited number of scripts.</summary>
 <remarks>
 For each code point, there is one or more property values.  Each such value is a Script property value.
 <para>Underlying XML attributes is @scx.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsoComment">
 <summary>Gets ISO 10646 comment field.</summary>
 <remarks>Underlying XML attribute is @isc.
 <para>This property is deprecated: As of Unicode 5.2.0, this field no longer contains any non-null values.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HangulSyllableType">
 <summary>Gets Hangul syllable type as used in Chapter 3 of Unicode 6</summary>
 <exception cref="T:System.InvalidOperationException">Underlying XML attribute value is neither of NA, L, V, LV, LVT, T</exception>
 <remarks>Underlying XML attribute is @hst</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.JamoShortName">
 <summary>For Hangul syllables gets Jamo Short Name</summary>
 <remarks>Underlying XML attribute is @JSN</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IndicSyllabicCategory">
 <summary>A provisional property defining the placement categories for dependent vowels in Indic scripts.</summary>
 <remarks>Underlying XML attribute is @InSC</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IndicMatraCategory">
 <summary>A provisional property defining the structural categories of syllabic components in Indic scripts.</summary>
 <remarks>Underlying XML attribute is @InMC</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IndicPositionalCategory">
 <summary>Defines the placement categories for dependent vowels, viramas, combining marks, and other characters used in Indic scripts.</summary>
 <remarks>Underlying XML attribute is @InPC</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsIdStart">
 <summary>Gets value indicating if the character can be 1st character in name of an identifier in a programming language such as VB or C#</summary>
 <remarks>Underlying XML attribute is @IDS</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsOtherIdStart">
 <summary>Used for backward compatibility of <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsIdStart"/></summary>
 <remarks>Underlying XML attribute is @OIDS</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsIdStartEx">
 <summary>Gets value indicating if the character can be 1st character in name of an identifier in a programming language such as VB or C# (improved version)</summary>
 <remarks>Underlying XML attribute is @XIDS</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsIdContinue">
 <summary>Gets value indicating if the character can be non-1st character in name of an identifier in a programming language such as VB or C#</summary>
 <remarks>Underlying XML attribute is @IDC</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsOtherIdContinue">
 <summary>Used for backward compatibility of <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsIdContinue"/></summary>
 <remarks>Underlying XML attribute is @OIDC</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsIdContinueEx">
 <summary>Gets value indicating if the character can be non-1st character in name of an identifier in a programming language such as VB or C# (improved version)</summary>
 <remarks>Underlying XML attribute is @XIDC</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsPatternSyntax">
 <summary>Gets value indicating if character can be used in syntax of programming language</summary>
 <remarks>Underlying XML attribute is @Pat_Syn</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsPatternWhiteSpace">
 <summary>Gets value indicating if character shopuld be treated as whitespace by programming language compiler or interpreter</summary>
 <remarks>Underlying XML attribute is @Pat_WS</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsDash">
 <summary>Gets value indicating if this character represents a dash</summary>
 <remarks>Underlying XML attribute is @Dash</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsHyphen">
 <summary>Gets value indicating if this character represents a dash used to mark connections between pieces of words (includes Katakana middle dot)</summary>
 <remarks>Underlying XML attribute is @Hyphen
 <para>This property is deprecated as of Unicode 6.0</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsQuotationMark">
 <summary>Gets value indicating if this character is a punctuation that functions as quotation mark</summary>
 <remarks>Underlying XML attribute is @QMark</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsTerminalPunctuation">
 <summary>Gets value indicating if this character is a punctuation that generally marks the end of textual units.</summary>
 <remarks>Underlying XML attribute is @Term</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsSentenceTerminal">
 <summary>Gets value indicating if this character is sentence terminal</summary>
 <remarks>Underlying XML attribute is @STerm</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsDiacritic">
 <summary>Gets value indicating if this character is diacritics (it linguistically modifies the meaning of another character to which it applies).</summary>
 <remarks>Underlying XML attribute is @Dia
 <para>Note: Some diacritics are not combining characters and some combining characters are not diacritics.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsExtender">
 <summary>Gets value indicating if this character is an extender (its principal function is to extend value or shape of a preceding alphabetic character)</summary>
 <remarks>Underlying XML attribute is @Ext</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsSoftDotted">
 <summary>Gets value indicating if this has a soft dot (usch as j or i)</summary>
 <remarks>Underlying XML attribute is @SD
 <para>An accent placed on this character causes the dot to disappear. Explicit dot above can be added if required.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsAlphabetic">
 <summary>Gets value indicating if this character is alphabetic</summary>
 <remarks>Underlying XML attribute is @Alpha</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsOtherAlphabetic">
 <summary>Used in deriving <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsAlphabetic"/> property.</summary>
 <remarks>Underlying XML attribute is @OAlpha</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsMath">
 <summary>Gets value indicating if this is math character</summary>
 <remarks>Underlying XML attribute is @Math</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsOtherMath">
 <summary>Used in deriving <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsMath"/> property</summary>
 <remarks>Underlying XML attribute is @OMath</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsHexaDigit">
 <summary>Gets value indicating if this character is commonly used to represent hexadigit</summary>
 <remarks>Underlying XML attribute is @Hex</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsAsciiHex">
 <summary>Gets value indicating if this character is an ASCII character used commonly to represent hexadigit</summary>
 <remarks>Underlying XML attribute is @AHex</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsDefaultIgnorable">
 <summary>Gets value indicating if this is default ignorable code point - this is it should be ignored in renderign unless explicitly supported.</summary>
 <remarks>Underlying XML attribute is @DI</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsOtherDefaultIgnorable">
 <summary>Used in deriving <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsDefaultIgnorable"/> property</summary>
 <remarks>Underlying XML attribute is @ODI</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsLogicalOrderException">
 <summary>Gets value indicating if this character represents a lexical order exception</summary>
 <remarks>Underlying XML attribute is @LOE<para>A small number of spacing vowel letters occurring in certain Southeast Asian scripts such as Thai and Lao, which use a visual order display model. These letters are stored in text ahead of syllable-initial consonants, and require special handling for processes such as searching and sorting.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsWhitespace">
 <summary>Gets value indicating if this character is whitespace.</summary>
 <remarks>Underlying XML attribute is @WSpace</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsGraphemeBase">
 <summary>Gets value indicating if this character is grapheme base.</summary>
 <remarks>Underlying XML attribute is @Gr_Base</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsGraphemeExtend">
 <summary>Gets value indicating if this character is grapheme extend.</summary>
 <remarks>Underlying XML attribute is @Gr_Ext</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsOtherGraphemeExtend">
 <summary>Used in deriving the <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsGraphemeExtend"/> property.</summary>
 <remarks>Underlying XML attribute is @OGr_Ext</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsGraphemeLink">
 <summary>Formerly proposed for programmatic determination of grapheme cluster boundaries.</summary>
 <remarks>Underlying XML attribute is @Gr_Link<para>This property is deprecated as of Unicode 5.0</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GraphemeClusterBreak">
 <summary>Gets type of grapheme cluster break</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute is not one of expected values</exception>
 <remarks>Underlying XML attribute is @GCB</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.WordBreak">
 <summary>Gets type of word break</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute is not one of expected values</exception>
 <remarks>Underlying XML attribute is @WB</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.SentenceBreak">
 <summary>Gets type of sentence break</summary>
 <exception cref="T:System.InvalidOperationException">Value of underlying XML attribute is not one of expected values</exception>
 <remarks>Underlying XML attribute is @SB</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsIdeograph">
 <summary>Gets value indicating if the character is CKJV ideograph</summary>
 <remarks>Underlying XML attribute is @Ideo</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsUnifiedIdeograph">
 <summary>Gets value indicating if the character is unified CJK ideograph</summary>
 <remarks>Underlying XML attribute is @UIdeo</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsIdsBinaryOperator">
 <summary>Gets value indicating if character is ideographic descriptionsequence binary operator</summary>
 <remarks>Underlying XML attribute is @ISDB</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsIdsTrinaryOperator">
 <summary>Gets value indicating if character is ideographic description sequence trinary operator</summary>
 <remarks>Underlying XML attribute is @ISDT</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsRadical">
 <summary>Gets value indicating if character is radical (for ideographic description sequences)</summary>
 <remarks>Underlying XML attribute is @Radical</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsDeprecated">
 <summary>Gets value indicating if the character is deprecated</summary>
 <remarks>Underlying XML attribute is @Dep</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsVariationSelector">
 <summary>Gets value indicating if the character is Variation Selector</summary>
 <remarks>Underlying XML attribute is @VS</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.IsNonCharacter">
 <summary>Gets value indicating if a code point is permanent non-character (i.e. the code point is permanently reserved ofr internal use)</summary>
 <remarks>Underlying XML attribute is @NChar</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetIntArray(System.String)">
 <summary>Unihan helper - gets value of XML attribute and parses it as space-separated array of decimal integers as used in Unihan database</summary>
 <param name="attributeName">Name of the XML attribute to parse value of</param>
 <returns>Parsed values from attribute value. An empty array if the attribute is not present or it is empty.</returns>
 <exception cref="T:System.FormatException">Value cannot be parsed as integer</exception>
 <exception cref="T:System.OverflowException">Value can be parsed as number but it's too big (small) for <see cref="T:System.Int32"/>.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetHexArray(System.String)">
 <summary>Unihan helper - gets value of XML attribute and parses it as space-separated array of hexadecimal integers as used in Unihan database</summary>
 <param name="attributeName">Name of the XML attribute to parse value of</param>
 <returns>Parsed values from attribute value. An empty array if the attribute is not present or it is empty.</returns>
 <exception cref="T:System.FormatException">Value cannot be parsed as hex integer</exception>
 <exception cref="T:System.OverflowException">Value can be parsed as number but it's too big (small) for <see cref="T:System.Int32"/>.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetStringArray(System.String)">
 <summary>Unihan helper - gets value of XML attribute stored as space-separated array of strings (this format is used in Unihan database)</summary>
 <param name="attributeName">Name of the XML attribute to parse value of</param>
 <returns>Array obtained by splitting space-delimited string. An empty array if attribute is not present or it's empty.</returns>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetUnicodeArray(System.String)">
 <summary>Unihan helper - gets value of XML attribute stored as space-separated array of Unicode code points in format <c>U\+2?[0-9A-F]{4}</c></summary>
 <param name="attributeName">Name of the XML attribute to parse value of</param>
 <returns>
 Array of strings (not chars because code point can represent non-UTF-16 character (i.e. surrogate pair in UTF-16)) - each item in array represents one code-point (so it's either single chaaracter or surrogate pair).
 An empty array if attribute is not present or it's empty.
 </returns>
 <exception cref="T:System.FormatException">Value following the U+ prefix cannot be parsed as hexadecimal integer. -or- Any string in space-separated array does not start with U+.</exception>
 <exception cref="T:System.OverflowException">Value following the U+ prefix can be parsed as number but it's either to low or to big for <see cref="T:System.Int32"/> type.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Value following the U+ prefix does not represent a valid 21-bit Unicode code point (see <see cref="M:System.Char.ConvertFromUtf32(System.Int32)"/>).</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetDecimalArray(System.String)">
 <summary>Unihan helper - gets value of XML attribute stored as space-separated decimal numbers</summary>
 <param name="attributeName">Name of the XML attribute to parse value of</param>
 <returns>Array of <see cref="T:System.Decimal"/> values parsed from attribute <paramref name="attributeName"/> value. An empty array if the attribute is either not present or empty.</returns>
 <exception cref="T:System.FormatException">A value cannot be parsed as <see cref="T:System.Decimal"/></exception>
 <exception cref="T:System.OverflowException">A value can be parsed as number but is too high or too low for datatype <see cref="T:System.Decimal"/>.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetCharArray(System.String)">
 <summary>Unihan helper - gets value of XML attribute stored as space-separated Unicode characters</summary>
 <param name="attributeName">Name of the XML attribute to parse value of</param>
 <returns>Array of characters obtained from attribute value. An empty array if the attribute is either not present or empty.</returns>
 <remarks>Use only for attributes that are guaranteed to have single characters separated by spaces and only if the characters are quaranteed no be UTF-16 character (i.e. not surrogate pairs).</remarks>
 <exception cref="T:System.InvalidOperationException">An item in the array is either 0 characters long or more than one UTF-16 character long (this includes 2 or more subsequent regular characcters or surrogate pair(s))</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetVersionArray(System.String)">
 <summary>Unihan helper - gets value of XML attribute stored as space-separated version values</summary>
 <param name="attributeName">Name of the XML attribute to parse value of</param>
 <returns>Array of <see cref="T:System.Version"/>s obtained from attribute value. An empty array if the attribute is either not present or empty.</returns>
 <remarks>For supported version parsings see <see cref="M:System.Version.Parse(System.String)"/>.</remarks>
 <exception cref="T:System.ArgumentException">Input has fewer than two or more than four version components.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">At least one component in input is less than zero.</exception>
 <exception cref="T:System.FormatException">At least one component in input is not an integer.</exception>
 <exception cref="T:System.OverflowException">At least one component in input represents a number that is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
 <seelaso cref="M:System.Version.Parse(System.String)"/>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.GetRadicalStrokeCountArray(System.String)">
 <summary>Unihan helper - gets value of XML attribute stored as space-separated <see cref="T:Tools.TextT.UnicodeT.RadicalStrokeCount"/> values</summary>
 <param name="attributeName">Name of the XML attribute to parse value of</param>
 <returns>Array of <see cref="T:Tools.TextT.UnicodeT.RadicalStrokeCount"/> values obtained from attribute value. An empty array if the attribute is either not present or empty.</returns>
 <remarks>For supported version parsings see <see cref="M:Tools.TextT.UnicodeT.RadicalStrokeCount.Parse(System.String)"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="value"/> does not contain 2 dot(.)-separated parts -or- AdditionalStrokes part of <paramref name="value"/> cannot be parsed as <see cref="T:System.Int32"/></exception>
 <exception cref="T:System.ArgumentException">Radical part of <paramref name="value"/> does not represent a value that can be converted to <see cref="T:Tools.TextT.UnicodeT.CjkRadical"/> value using the <see cref="!:LookupRadical"/> function.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">AdditionalStrokes part of <paramref name="value"/> represents negative number</exception>
 <exception cref="T:System.OverflowException">AdditionalStrokes part of <paramref name="value"/> is too big or too small for datatype <see cref="T:System.Int32"/>.</exception>
 <seelaso cref="M:Tools.TextT.UnicodeT.RadicalStrokeCount.Parse(System.String)"/>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanAccountingNumeric">
 <summary>The value of the character when used in the writing of accounting numerals.</summary>
 <remarks>Accounting numerals are used in East Asia to prevent fraud. Because a number like ten (十) is easily turned into one thousand (千) with a stroke of a brush, monetary documents will often use an accounting form of the numeral ten (such as 拾) in their place.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanBig5">
 <summary>The Big Five mapping for this character</summary>
 <remarks><note>This does not cover any of the Big Five extensions in common use, including the ETEN extensions.</note></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCangjie">
 <summary>The cangjie input code for the character.</summary>
 <remarks>This incorporates data from the file cangjie-table.b5 by Christian Wittern.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCantonese">
 <summary>The Cantonese pronunciation(s) for this character using the jyutping romanization.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCccii">
 <summary>The CCCII mapping for this character</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCheungBauer">
 <summary>Data regarding the character in Cheung Kwan-hin and Robert S. Bauer, <em>The Representation of Cantonese with Chinese Characters</em>, Journal of Chinese Linguistics, Monograph Series Number 18, 2002</summary>
 <remarks>
 The string(s) returned have special format:
 The data consist of three pieces, separated by semicolons:
 <list type="list">
 <item>The character’s radical-stroke index as a three-digit radical, slash, two-digit stroke count</item>
 <item>The character’s cangjie input code (if any)</item>
 <item>A comma-separated list of Cantonese readings using the jyutping romanization in alphabetical order.</item>
 </list>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCheungBauerIndex">
 <summary>The position of the character in Cheung Kwan-hin and Robert S. Bauer, <em>The Representation of Cantonese with Chinese Characters</em>, Journal of Chinese Linguistics, Monograph Series Number 18, 2002</summary>
 <remarks>The format is a three-digit page number followed by a two-digit position number, separated by a period.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCihai">
 <summary>The position of this character in the Cihai (辭海) dictionary, single volume edition, published in Hong Kong by the Zhonghua Bookstore, 1983 (reprint of the 1947 edition), ISBN 962-231-005-2.</summary>
 <remarks>The position is indicated by a decimal number. The digits to the left of the decimal are the page number. The first digit after the decimal is the row on the page, and the remaining two digits after the decimal are the position on the row.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCns1986">
 <summary>The CNS 11643-1986 mapping for this character in hex.</summary>
 <remarks>The strings returned by this property match to following regular expression <c>^[12E]-[0-9A-F]{4}$</c></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCns1992">
 <summary>The CNS 11643-1992 mapping for this character in hex.</summary>
 <remarks>The strings returned by this property match to following regular expression <c>^[1-9]-[0-9A-F]{4}$</c></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCompatibilityVariant">
 <summary>The compatibility decomposition for this ideograph</summary>
 <remarks>Derived from the UnicodeData.txt file.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanCowles">
 <summary>The index or indices of this character in Roy T. Cowles, A Pocket Dictionary of Cantonese, Hong Kong: University Press, 1999.</summary>
 <remarks>The Cowles indices are numerical, usually integers but occasionally fractional where a character was added after the original indices were determined. Cowles is missing indices 1222 and 4949, and four characters in Cowles are part of Unicode’s “Hangzhou” numeral set: 2964 (U+3025), 3197 (U+3028), 3574 (U+3023), and 4720 (U+3027).
 <para>Approximately 100 characters from Cowles which are not currently encoded are being submitted to the IRG by Unicode for inclusion in future versions of the standard.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanDaeJaweon">
 <summary>The position of this character in the Dae Jaweon (Korean) dictionary used in the four-dictionary sorting algorithm</summary>
 <remarks>The position is in the form “page.position” with the final digit in the position being “0” for characters actually in the dictionary and “1” for characters not found in the dictionary and assigned a “virtual” position in the dictionary.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanDefinition">
 <summary>An English definition for this character.</summary>
 <remarks>
 Definitions are for modern written Chinese and are usually (but not always) the same as the definition in other Chinese dialects or non-Chinese languages. In some cases, synonyms are indicated. Fuller variant information can be found using the various variant fields.
 <para>Definitions specific to non-Chinese languages or Chinese dialects other than modern Mandarin are marked, e.g., (Cant.) or (J).</para>
 <para>Major definitions are separated by semicolons, and minor definitions by commas. Any valid Unicode character (except for tab, double-quote, and any line break character) may be used within the definition field.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanEacc">
 <summary>The EACC mapping for this character.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanFenn">
 <summary>Data on the character from The Five Thousand Dictionary (aka Fenn’s Chinese-English Pocket Dictionary) by Courtenay H. Fenn, Cambridge, Mass.: Harvard University Press, 1979.</summary>
 <remarks>
 The data here consists of a decimal number followed by a letter A through K, the letter P, or an asterisk. The decimal number gives the Soothill number for the character’s phonetic, and the letter is a rough frequency indication, with A indicating the 500 most common ideographs, B the next five hundred, and so on.
 <para>P is used by Fenn to indicate a rare character included in the dictionary only because it is the phonetic element in other characters.</para>
 <para>An asterisk is used instead of a letter in the final position to indicate a character which belongs to one of Soothill’s phonetic groups but is not found in Fenn’s dictionary.</para>
 <para>Characters which have a frequency letter but no Soothill phonetic group are assigned group 0.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanFennIndex">
 <summary>The position of this character in <em>Fenn’s Chinese-English Pocket Dictionary</em> by Courtenay H. Fenn, Cambridge, Mass.: Harvard University Press, 1942.</summary>
 <remarks>The position is indicated by a three-digit page number followed by a period and a two-digit position on the page.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanFourCornerCode">
 <summary>The four-corner code(s) for the character. This data is derived from data provided in the public domain by Hartmut Bohn, Urs App, and Christian Wittern.</summary>
 <remarks>
 The four-corner system assigns each character a four-digit code from 0 through 9. The digit is derived from the “shape” of the four corners of the character (upper-left, upper-right, lower-left, lower-right). An optional fifth digit can be used to further distinguish characters; the fifth digit is derived from the shape in the character’s center or region immediately to the left of the fourth corner.
 <para>The four-corner system is now used only rarely. Full descriptions are available online, e.g., at <a href="http://en.wikipedia.org/wiki/Four_corner_input">Wikipedia</a>.</para>
 <para>Values in this field consist of four decimal digits, optionally followed by a period and fifth digit for a five-digit form.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanFrequency">
 <summary>A rough frequency measurement for the character based on analysis of traditional Chinese USENET postings</summary>
 <remarks>Characters with a <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanFrequency"/> of 1 are the most common, those with a <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanFrequency"/> of 2 are less common, and so on, through a <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanFrequency"/> of 5.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanGB0">
 <summary>The GB 2312-80 mapping for this character in ku/ten form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanGB1">
 <summary>The GB 12345-90 mapping for this character in ku/ten form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanGB3">
 <summary>The GB 7589-87 mapping for this character in ku/ten form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanGB5">
 <summary>The GB 7590-87 mapping for this character in ku/ten form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanGB7">
 <summary>The GB 8565-89 mapping for this character in ku/ten form (GB7).</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanGB8">
 <summary>The GB 8565-89 mapping for this character in ku/ten form (GB8).</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanGradeLevel">
 <summary>The primary grade in the Hong Kong school system by which a student is expected to know the character</summary>
 <remarks>This data is derived from 朗文初級中文詞典, Hong Kong: Longman, 2001.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanGsr">
 <summary>The position of this character in Bernhard Karlgren’s Grammata Serica Recensa (1957).</summary>
 <remarks>This dataset contains a total of 7,405 records. References are given in the form DDDDa('), where “DDDD” is a set number in the range [0001..1260] zero-padded to 4-digits, “a” is a letter in the range [a..z] (excluding “w”), optionally followed by apostrophe ('). The data from which this mapping table is extracted contains a total of 10,023 references. References to inscriptional forms have been omitted.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanHangul">
 <summary>The modern Korean pronunciation(s) for this character in Hangul.</summary>
 <remarks>Strings returned are composed only from characters from range 0x1100 ÷ 0x11FF (ᄀ÷ᇿ)</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanHanYu">
 <summary>The position of this character in the Hanyu Da Zidian (HDZ) Chinese character dictionary</summary>
 <remarks>
 The character references are given in the form “ABCDE.XYZ”, in which: “A” is the volume number [1..8]; “BCDE” is the zero-padded page number [0001..4809]; “XY” is the zero-padded number of the character on the page [01..32]; “Z” is “0” for a character actually in the dictionary, and greater than 0 for a character assigned a “virtual” position in the dictionary. For example, 53024.060 indicates an actual HDZ character, the 6th character on Page 3,024 of Volume 5 (i.e. 籉 [U+7C49]). Note that the Volume 8 “BCDE” references are in the range [0008..0044] inclusive, referring to the pagination of the “Appendix of Addendum” at the end of that volume (beginning after p. 5746).
 <para>The first character assigned a given virtual position has an index ending in 1; the second assigned the same virtual position has an index ending in 2; and so on.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanHanyuPinlu">
 <summary>The Pronunciations and Frequencies of this character, based in part on those appearing in 《現代漢語頻率詞典》 &lt;Xiandai Hanyu Pinlu Cidian> (XDHYPLCD) [Modern Standard Beijing Chinese Frequency Dictionary]</summary>
 <remarks>
 <para>This dataset contains a total of 3799 records. (The original data provided to Unihan 2003/02/04 contained a total of 3800 records, including 〇 [U+3007] líng ‘IDEOGRAPHIC NUMBER ZERO’, not included in Unihan since it is not a CJK UNIFIED IDEOGRAPH.)</para>
 <para>Each entry is comprised of two pieces of data.</para>
 <para>The Hanyu Pinyin (HYPY) pronunciation(s) of the character, with numeric tone marks (1-5, where 5 indicates the “neutral tone”) immediately following each alphabetic string.</para>
 <para>Immediately following the numeric tone mark, a numeric string appears in parentheses: e.g. in “a1(392)” the numeric string “392” indicates the sum total of the frequencies of the pronunciations of the character as given in HYPLCD.</para>
 <para>Where more than one pronunciation exists, these are sorted by descending frequency, and the list elements are “space” delimited.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanHanyuPinyin">
 <summary>The 漢語拼音 Hànyǔ Pīnyīn reading(s) appearing in the edition of 《漢語大字典》 Hànyǔ Dà Zìdiǎn (HDZ) specified in the “kHanYu” property description (q.v.).</summary>
 <remarks>
 Each location has the form “ABCDE.XYZ” (as in “kHanYu”); multiple locations for a given pīnyīn reading are separated by “,” (comma). The list of locations is followed by “:” (colon), followed by a comma-separated list of one or more pīnyīn readings. Where multiple pīnyīn readings are associated with a given mapping, these are ordered as in HDZ (for the most part reflecting relative commonality). The following are representative records.
 <list type="list">
 <item>| U+34CE | 㓎 | 10297.260: qīn,qìn,qǐn |</item>
 <item>| U+34D8 | 㓘 | 10278.080,10278.090: sù |</item>
 <item>| U+5364 | 卤 | 10093.130: xī,lǔ 74609.020: lǔ,xī |</item>
 <item>| U+5EFE | 廾 | 10513.110,10514.010,10514.020: gǒng |</item>
 </list>
 For example, the “kHanyuPinyin” value for 卤 U+5364 is “10093.130: xī,lǔ 74609.020: lǔ,xī”. This means that 卤 U+5364 is found in “kHanYu” at entries 10093.130 and 74609.020. The former entry has the two pīnyīn readings xī and lǔ (in that order), whereas the latter entry has the readings lǔ and xī (reversing the order).
 <para>This data was originally input by 井作恆 Jǐng Zuòhéng, proofed by 聃媽歌 Dān Māgē (Magda Danish, using software donated by 文林 Wénlín Institute, Inc. and tables prepared by 曲理查 Qū Lǐchá), and proofed again and prepared for the Unicode Consortium by 曲理查 Qū Lǐchá (2008-01-14).</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanHDZRadBreak">
 <summary>Indicates that 《漢語大字典》 Hanyu Da Zidian has a radical break beginning at this character’s position.</summary>
 <remarks>The field consists of the radical (with its Unicode code point), a colon, and then the Hanyu Da Zidian position as in the kHanyu field.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanHKGlyph">
 <summary>The index of the character in 常用字字形表 (二零零零年修訂本),香港: 香港教育學院, 2000, ISBN 962-949-040-4.</summary>
 <remarks>This publication gives the “proper” shapes for 4759 characters as used in the Hong Kong school system. The index is an integer, zero-padded to four digits.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanHkscs">
 <summary>Mappings to the Big Five extended code points used for the Hong Kong Supplementary Character Set.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIbmJapan">
 <summary>The IBM Japanese mapping for this character in hexadecimal.</summary>
 <remarks>Format of each string is <c>^F[ABC][0-9A-F]{2}$</c></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIICore">
 <summary>A boolean indicating that a character is in IICore, the IRG-produced minimal set of required ideographs for East Asian use. A character is in IICore if and only if it has a value for the kIICore field.</summary>
 <remarks>The only value currently in this field is “2.1”, which is the identifier of the version of IICore used to populate this field.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgDaeJaweon">
 <summary>The position of this character in the Dae Jaweon (Korean) dictionary used in the four-dictionary sorting algorithm.</summary>
 <remarks>
 The position is in the form “page.position” with the final digit in the position being “0” for characters actually in the dictionary and “1” for characters not found in the dictionary and assigned a “virtual” position in the dictionary.
 <para>Thus, “1187.060” indicates the sixth character on page 1187. A character not in this dictionary but assigned a position between the 6th and 7th characters on page 1187 for sorting purposes would have the code “1187.061”</para>
 <para>This field represents the official position of the character within the Dae Jaweon dictionary as used by the IRG in the four-dictionary sorting algorithm.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgDaiKanwaZiten">
 <summary>The index of this character in the Dai Kanwa Ziten, aka Morohashi dictionary (Japanese) used in the four-dictionary sorting algorithm.</summary>
 <remarks>This field represents the official position of the character within the DaiKanwa dictionary as used by the IRG in the four-dictionary sorting algorithm.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgHanyuDaZidian">
 <summary>The position of this character in the Hanyu Da Zidian (PRC) dictionary used in the four-dictionary sorting algorithm.</summary>
 <remarks>
 The position is in the form “volume page.position” with the final digit in the position being “0” for characters actually in the dictionary and “1” for characters not found in the dictionary and assigned a “virtual” position in the dictionary.
 <para>Thus, “32264.080” indicates the eighth character on page 2264 in volume 3. A character not in this dictionary but assigned a position between the 8th and 9th characters on this page for sorting purposes would have the code “32264.081”</para>
 <para>This field represents the official position of the character within the Hanyu Da Zidian dictionary as used by the IRG in the four-dictionary sorting algorithm.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgKangXi">
 <summary>The official IRG position of this character in the 《康熙字典》 Kang Xi Dictionary used in the four-dictionary sorting algorithm.</summary>
 <remarks>
 The position is in the form “page.position” with the final digit in the position being “0” for characters actually in the dictionary and “1” for characters not found in the dictionary but assigned a “virtual” position in the dictionary.
 <para>Thus, “1187.060” indicates the sixth character on page 1187. A character not in this dictionary but assigned a position between the 6th and 7th characters on page 1187 for sorting purposes would have the code “1187.061”.</para>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgGSource">
 <summary>The IRG “G” (China + Singapore) source mapping for this character in hex.</summary>
 <remarks>
 The IRG G source consists of data from the following national standards, publications, and lists from the People’s Republic of China and Singapore.
 The versions of the standards used are those provided by the PRC to the IRG and may not always reflect published versions of the standards generally available.
 <list>
 <item>G0 GB2312-80</item>
 <item>G1 GB12345-90 with 58 Hong Kong and 92 Korean “Idu” characters</item>
 <item>G3 GB7589-87 unsimplified forms</item>
 <item>G5 GB7590-87 unsimplified forms</item>
 <item>G7 General Purpose Hanzi List for Modern Chinese Language, and General List of Simplified Hanzi</item>
 <item>GS Singapore Characters</item>
 <item>G8 GB8565-88</item>
 <item>G9 GB18030-2000</item>
 <item>GE GB16500-95</item>
 <item>G4K Siku Quanshu (四庫全書)</item>
 <item>GBK Chinese Encyclopedia (中國大百科全書)</item>
 <item>GCH Ci Hai (辞海)</item>
 <item>GCY Ci Yuan (辭源)</item>
 <item>GCYY Chinese Academy of Surveying and Mapping Ideographs (中国测绘科学院用字) GFZ Founder Press System (方正排版系统)</item>
 <item>GGH Gudai Hanyu Cidian (古代汉语词典)</item>
 <item>GHC Hanyu Dacidian (漢語大詞典)</item>
 <item>GHZ Hanyu Dazidian ideographs (漢語大字典)</item>
 <item>GIDC ID system of the Ministry of Public Security of China, 2009</item>
 <item>GJZ Commercial Press Ideographs (商务印书馆用字)</item>
 <item>GKX Kangxi Dictionary ideographs(康熙字典)9th edition (1958) including the addendum (康熙字典)補遺</item>
 <item>GXC Xiandai Hanyu Cidian (现代汉语词典)</item>
 <item>GZFY Hanyu Fangyan Dacidian (汉语方言大辞典)</item>
 <item>GZH ZhongHua ZiHai (中华字海)</item>
 <item>GZJW Yinzhou Jinwen Jicheng Yinde (殷周金文集成引得)</item>
 </list>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgHSource">
 <summary>The IRG “H” (Hong Kong) source mapping for this character in hex.</summary>
 <remarks>The IRG “H” source consists of data from the Hong Kong Supplementary Character Set – 2008.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgJSource">
 <summary>The IRG “J” (Japan) source mapping for this character in hex.</summary>
 <remarks>
 The IRG “J” source consists of data from the following national standards and lists from Japan.
 <list type="list">
 <item>J0 JIS X 0208-1990</item>
 <item>J1 JIS X 0212-1990</item>
 <item>J3 JIS X 0213:2000 level-3</item>
 <item>J3A JIS X 0213:2004 level-3</item>
 <item>J4 JIS X 0213:2000 level-4</item>
 <item>JA Unified Japanese IT Vendors Contemporary Ideographs, 1993</item>
 <item>JH Hanyo-Denshi Program (汎用電子情報交換環境整備プログラム), 2002-2009</item>
 <item>JK Japanese KOKUJI Collection</item>
 <item>JARIB Association of Radio Industries and Businesses (ARIB) ARIB STD-B24 Version 5.1, March 14 2007</item>
 </list>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgJASource">
 <summary>The IRG “JA” (Unified Japanese IT Vendors Contemporary Ideographs) source mapping for this character in hex.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgKPSource">
 <summary>The IRG “KP” (North Korea) source mapping for this character in hex.</summary>
 <remarks>
 The IRG “KP” source consists of data from the following national standards and lists from the Democratic People’s Republic of Korea (North Korea).
 <list type="list">
 <item>KP0 KPS 9566-97</item>
 <item>KP1 KPS 10721-2000</item>
 </list>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgKSource">
 <summary>The IRG “K” (Korea) source mapping for this character in hex.</summary>
 <remarks>
 The IRG “K” source consists of data from the following national standards and lists from the Republic of Korea (South Korea).
 <list type="list">
 <item>K0 KS X 1001:2004 (formerly KS C 5601-1987)</item>
 <item>K1 KS X 1002:2001 (formerly KS C 5657-1991)</item>
 <item>K2 PKS C 5700-1 1994</item>
 <item>K3 PKS C 5700-2 1994</item>
 <item>K4 PKS 5700-3:1998</item>
 <item>K5 Korean IRG Hanja Character Set 5th Edition: 2001</item>
 </list>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgMSource">
 <summary>The IRG “M” (Macao) source mapping for this character.</summary>
 <remarks>The IRG “M” source consists of data from the Macao Information System Character Set (澳門資訊系統字集).</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgTSource">
 <summary>The IRG “T” (Taiwan) source mapping for this character in hex.</summary>
 <remarks>
 The IRG “T” source consists of data from the following national standards and lists from the Republic of China (Taiwan).
 <list type="list">
 <item>T1 TCA-CNS 11643-1992 1st plane</item>
 <item>T2 TCA-CNS 11643-1992 2nd plane</item>
 <item>T3 TCA-CNS 11643-1992 3rd plane with some additional characters</item>
 <item>T4 TCA-CNS 11643-1992 4th plane</item>
 <item>T5 TCA-CNS 11643-1992 5th plane</item>
 <item>T6 TCA-CNS 11643-1992 6th plane</item>
 <item>T7 TCA-CNS 11643-1992 7th plane</item>
 <item>TB TCA-CNS Ministry of Education, Hakka dialect, May 2007</item>
 <item>TC TCA-CNS 11643-1992 12th plane</item>
 <item>TD TCA-CNS 11643-1992 13th plane</item>
 <item>TE TCA-CNS 11643-1992 14th plane</item>
 <item>TF TCA-CNS 11643-1992 15th plane</item>
 </list>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgUSource">
 <summary>The IRG “U” (Unicode) source mapping for this character.</summary>
 <remarks>U-source references are a reference into the U-source ideograph database; see UTR #45. These consist of “UTC” followed by a five-digit, zero-padded index into the database.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanIrgVSource">
 <summary>The IRG “V” (Vietnam) source mapping for this character in hex.</summary>
 <remarks>
  The IRG “V” source consists of data from the following national standards and lists from Vietnam.
 <list type="list">
 <item>V0 TCVN 5773:1993</item>
 <item>V1 TCVN 6056:1995</item>
 <item>V2 VHN 01:1998</item>
 <item>V3 VHN 02: 1998</item>
 <item>V4 Dictionary on Nom 2006, Dictionary on Nom of Tay ethnic 2006, Lookup Table for Nom in the South 1994</item>
 </list>
 </remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanAlternateHanYu">
 <summary>Meaning of this property is not documented in Unicode Standard. It was dropped in Unicdoe 3.2</summary>
 <remarks>This property is superseded by <see cref="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanHanYu"/>.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanAlternateJef">
 <summary>Meaning of this property is not documented in Unicode Standard. It was dropped in Unicdoe 3.1</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanAlternateKangXi">
 <summary>Meaning of this property is not documented in Unicode Standard. It was dropped in Unicdoe 4.1</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanAlternateMorohashi">
 <summary>Meaning of this property is not documented in Unicode Standard. It was dropped in Unicdoe 4.1</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanJapaneseKun">
 <summary>The Japanese pronunciation(s) of this character.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanJapaneseOn">
 <summary>The Sino-Japanese pronunciation(s) of this character.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanJis0208">
 <summary>The JIS X 0208-1990 mapping for this character in ku/ten form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanJis0213">
 <summary>The JIS X 0213-2000 mapping for this character in min,ku,ten form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanJisX0212">
 <summary>The JIS X 0212-1990 mapping for this character in ku/ten form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanKangXi">
 <summary>The position of this character in the 《康熙字典》 Kang Xi Dictionary used in the four-dictionary sorting algorithm.</summary>
 <remarks> The position is in the form “page.position” with the final digit in the position being “0” for characters actually in the dictionary and “1” for characters not found in the dictionary but assigned a “virtual” position in the dictionary.
 <para>Thus, “1187.060” indicates the sixth character on page 1187. A character not in this dictionary but assigned a position between the 6th and 7th characters on page 1187 for sorting purposes would have the code “1187.061”.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanKarlgren">
 <summary>The index of this character in <em>Analytic Dictionary of Chinese and Sino-Japanese</em> by Bernhard Karlgren, New York: Dover Publications, Inc., 1974.</summary>
 <remarks>
 <para>If the index is followed by an asterisk (*), then the index is an interpolated one, indicating where the character would be found if it were to have been included in the dictionary. Note that while the index itself is usually an integer, there are some cases where it is an integer followed by an “A”.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanKorean">
 <summary>The Korean pronunciation(s) of this character, using the Yale romanization system.</summary>
 <remarks> (See <a href="http://www.coffeesigns.com/Resources/romanization/korean.asp">http://www.coffeesigns.com/Resources/romanization/korean.asp</a> for a comparison of the various Korean romanization systems.)</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanKps9566">
 <summary>The KPS 9566-97 mapping for this character in hexadecimal form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanKps10721">
 <summary>The KPS 10721-2000 mapping for this character in hexadecimal form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanKSX1001">
 <summary>The KS X 1001:1992 (KS C 5601-1989) mapping for this character in ku/ten form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanKSX1002">
 <summary>The KS X 1002:1991 (KS C 5657-1991) mapping for this character in ku/ten form.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanLau">
 <summary>The index of this character in A Practical Cantonese-English Dictionary by Sidney Lau, Hong Kong: The Government Printer, 1977.</summary>
 <remarks>
 <para>The index consists of an integer. Missing indices indicate unencoded characters which are being submitted to the IRG for inclusion in future versions of the standard.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanMainlandTelegraph">
 <summary>The PRC telegraph code for this character, </summary>
 <remarks>derived from “Kanzi denpou koudo henkan-hyou” (“Chinese character telegraph code conversion table”), Lin Jinyi, KDD Engineering and Consulting, Tokyo, 1984.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanMandarin">
 <summary>The Mandarin pronunciation(s) for this character in pinyin; </summary>
 <remarks>Mandarin pronunciations are sorted in order of frequency, not alphabetically.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanMatthews">
 <summary>The index of this character in Mathews’ Chinese-English Dictionary by Robert H. Mathews, Cambrige: Harvard University Press, 1975.</summary>
 <remarks>
 <para>Note that the field name is kMatthews instead of kMathews to maintain compatibility with earlier versions of this file, where it was inadvertently misspelled.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanMeyerWempe">
 <summary>The index of this character in the Student’s Cantonese-English Dictionary by Bernard F. Meyer and Theodore F. Wempe (3rd edition, 1947).</summary>
 <remarks> The index is an integer, optionally followed by a lower-case Latin letter if the listing is in a subsidiary entry and not a main one. In some cases where the character is found in the radical-stroke index, but not in the main body of the dictionary, the integer is followed by an asterisk (e.g., U+50E5, which is listed as 736* as well as 1185a).</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanMorohashi">
 <summary>The index of this character in the Dae Kanwa Ziten, aka Morohashi dictionary (Japanese) used in the four-dictionary sorting algorithm.</summary>
 <remarks>
 <para>The edition used is the revised edition, published in Tokyo by Taishuukan Shoten, 1986.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanNelson">
 <summary>The index of this character in The Modern Reader’s Japanese-English Character Dictionary by Andrew Nathaniel Nelson, Rutland, Vermont: Charles E. Tuttle Company, 1974.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanOtherNumeric">
 <summary>The numeric value for the character in certain unusual, specialized contexts.</summary>
 <remarks>
 <para>The three numeric-value fields should have no overlap; that is, characters with a kOtherNumeric value should not have a kAccountingNumeric or kPrimaryNumeric value as well.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanPhonetic">
 <summary>The phonetic index for the character from <em>Ten Thousand Characters: An Analytic Dictionary</em>, by G. Hugh Casey, S.J. Hong Kong: Kelley and Walsh, 1980.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanPrimaryNumeric">
 <summary>The value of the character when used in the writing of numbers in the standard fashion.</summary>
 <remarks>
 <para>The three numeric-value fields should have no overlap; that is, characters with a kPrimaryNumeric value should not have a kAccountingNumeric or kOtherNumeric value as well.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanPseudoGB1">
 <summary>A “GB 12345-90” code point assigned to this character for the purposes of including it within Unihan.</summary>
 <remarks> Pseudo-GB1 codes were used to provide official code points for characters not already in national standards, such as characters used to write Cantonese, and so on.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanRSJapanese">
 <summary>A Japanese radical/stroke count for this character in the form “radical.additional strokes”.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanRSKangXi">
 <summary>The KangXi radical/stroke count for this character consistent with the value of the kKangXi field in the form “radical.additional strokes”.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanRSKanWa">
 <summary>A Morohashi radical/stroke count for this character in the form “radical.additional strokes”.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanRSKorean">
 <summary>A Korean radical/stroke count for this character in the form “radical.additional strokes”.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanRSUnicode">
 <summary>A standard radical/stroke count for this character in the form “radical.additional strokes”.</summary>
 <remarks> The radical is indicated by a number in the range (1..214) inclusive. An apostrophe (') after the radical indicates a simplified version of the given radical. The “additional strokes” value is the residual stroke-count, the count of all strokes remaining after eliminating all strokes associated with the radical.
 <para>This field is also used for additional radical-stroke indices where either a character may be reasonably classified under more than one radical, or alternate stroke count algorithms may provide different stroke counts.</para>
 <para>The first value is intended to reflect the same radical as the kRSKangXi field and the stroke count of the glyph used to print the character within the Unicode Standard.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanSongBenGuangYun">
 <summary>The position of this character in the Song Ben Guang Yun (SBGY) Medieval Chinese character dictionary</summary>
 <remarks>
 <para>The 25334 character references are given in the form “ABC.XY”, in which: “ABC” is the zero-padded page number [004..546]; “XY” is the zero-padded number of the character on the page [01..73]. For example, 364.38 indicates the 38th character on Page 364 (i.e. 澍). Where a given Unicode Scalar Value (USV) has more than one reference, these are space-delimited.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanSemanticVariant">
 <summary>The Unicode value for a semantic variant for this character.</summary>
 <remarks> A semantic variant is an x- or y-variant with similar or identical meaning which can generally be used in place of the indicated character.
 <para>The basic syntax is a Unicode scalar value. It may optionally be followed by additional data. The additional data is separated from the Unicode scalar value by a less-than sign (&lt;), and may be subdivided itself into substrings by commas, each of which may be divided into two pieces by a colon. The additional data consists of a series of field tags for another field in the Unihan database indicating the source of the information. If subdivided, the final piece is a string consisting of the letters T (for tòng, U+540C 同) B (for bù, U+4E0D 不), or Z (for zhèng, U+6B63 正).</para>
 <para>T is used if the indicated source explicitly indicates the two are the same (e.g., by saying that the one character is “the same as” the other).</para>
 <para>B is used if the source explicitly indicates that the two are used improperly one for the other.</para>
 <para>Z is used if the source explicitly indicates that the given character is the preferred form. Thus, kHanYu indicates that U+5231 刱 and U+5275 創 are semantic variants and that U+5275 創 is the preferred form.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanSimplifiedVariant">
 <summary>The Unicode value for the simplified Chinese variant for this character (if any).</summary>
 <remarks>
 <para>Note that a character can be both a traditional Chinese character in its own right and the simplified variant for other characters (e.g., U+53F0).</para>
 <para>In such case, the character is listed as its own simplified variant and one of its own traditional variants. This distinguishes this from the case where the character is not the simplified form for any character (e.g., U+4E95).</para>
 <para>Much of the of the data on simplified and traditional variants was supplied by Wenlin <a href="http://www.wenlin.com">http://www.wenlin.com</a></para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanSpecializedSemanticVariant">
 <summary>The Unicode value for a specialized semantic variant for this character.</summary>
 <remarks> The syntax is the same as for the kSemanticVariant field.
 <para>A specialized semantic variant is an x- or y-variant with similar or identical meaning only in certain contexts (such as accountants’ numerals).</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanTaiwanTelegraph">
 <summary>The Taiwanese telegraph code for this character, derived from “Kanzi denpou koudo henkan-hyou” (“Chinese character telegraph code conversion table”), Lin Jinyi, KDD Engineering and Consulting, Tokyo, 1984.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanTang">
 <summary>The Tang dynasty pronunciation(s) of this character, derived from or consistent with <em>T’ang Poetic Vocabulary</em> by Hugh M. Stimson, Far Eastern Publications, Yale Univ. 1976.</summary>
 <remarks> An asterisk indicates that the word or morpheme represented in toto or in part by the given character with the given reading occurs more than four times in the seven hundred poems covered.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanTotalStrokes">
 <summary>The total number of strokes in the character (including the radical).</summary>
 <remarks> This value is for the character as drawn in the Unicode charts.</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanTraditionalVariant">
 <summary>The Unicode value(s) for the traditional Chinese variant(s) for this character.</summary>
 <remarks>
 <para>Note that a character can be both a traditional Chinese character in its own right and the simplified variant for other characters (e.g., 台 U+53F0).</para>
 <para>In such case, the character is listed as its own simplified variant and one of its own traditional variants. This distinguishes this from the case where the character is not the simplified form for any character (e.g., 井 U+4E95).</para>
 <para>Much of the of the data on simplified and traditional variants was graciously supplied by Wenlin Institute, Inc. <a href="http://www.wenlin.com">http://www.wenlin.com</a>.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanVietnamese">
 <summary>The character’s pronunciation(s) in Quốc ngữ.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanXerox">
 <summary>The Xerox code for this character.</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanXiàndàiHànyǔCídiǎn">
 <summary>One or more Hànyǔ Pīnyīn readings as given in the Xiàndài Hànyǔ Cídiǎn (full bibliographic information below).</summary>
 <remarks>
 <para>Each pīnyīn reading is preceded by the character’s location(s) in the dictionary, separated from the reading by “:” (colon); multiple locations for a given reading are separated by “,” (comma); multiple “location: reading” values are separated by “ ” (space). Each location reference is of the form /[0-9]{4}\.[0-9]{3}\*?/ . The number preceding the period is the page number, zero-padded to four digits. The first two digits of the number following the period are the entry’s position on the page, zero-padded. The third digit is 0 for a main entry and greater than 0 for a parenthesized variant of the main entry. A trailing “*” (asterisk) on the location indicates an encoded variant substituted for an unencoded character (see below).</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanZVariant">
 <summary>The Unicode value(s) for known z-variants of this character.</summary>
 <remarks>
 <para>The basic syntax is a Unicode scalar value. It may optionally be followed by additional data. The additional data is separated from the Unicode scalar value by a less-than sign (&lt;), and may be subdivided itself into substrings by commas. The additional data consists of a series of field tags for another field in the Unihan database indicating the source of the information.</para></remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanJhj">
 <summary>This property is undocumented in Unicode standard</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanRSMerged">
 <summary>Meaning of this property is not documented in Unicode standard but it seems to be merge of some or all Radical/stroke Count properties. This property was dropped in Unicode 3.1</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertiesProvider.HanWubi">
 <summary>This property is undocumented in Unicode standard</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertiesProvider.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodePropertyAttribute">
 <summary>An attribute applied ot a property of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> to indicate that the property is unicode property and provide UCD details about the property</summary>
 <remarks>
 You cannot define this attribute on your properties. Only properties of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> can be decorated with this attribute.
 <para>This attribute is usually accompanied by few more attributtes that also provide information about the property.</para>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertyAttribute.#ctor(System.String,System.String,Tools.TextT.UnicodeT.UnicodePropertyType,Tools.TextT.UnicodeT.UnicodePropertyStatus)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyAttribute"/> class</summary>
 <param name="name">Unlocalized name of the property as used in Unicode standard (UCD)</param>
 <param name="source">Name of file from Unicode Character Database values of this property are defined in</param>
 <param name="type">Type of the property</param>
 <param name="status">Status of the proeprty</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="type"/> is not one of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyType"/> values -or- <paramref name="status"/> is not one of <see cref="!:UnicodeProeprtyStatus"/> values.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertyAttribute.Source">
 <summary>Gets name of file from Unicode Character Database where values of this property are difined in</summary>
 <remarks>For Unihan properties the file is packed in Unihan.zip</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertyAttribute.Type">
 <summary>Gets type of the property</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertyAttribute.Status">
 <summary>Gets status of the property</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertyAttribute.Name">
 <summary>Gets unlocalized name of the property (as provided by Unicode Standard)</summary>
 <remarks>For localized names look for <see cref="T:System.ComponentModel.DisplayNameAttribute"/>.</remarks>
</member>
<member name="T:Tools.TextT.UnicodeT.UcdPropertyAttribute">
 <summary>Implements <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyAttribute"/> that actually can be applied on properties.</summary>
 <remarks>Only purpose of this class is to provide public constructors that are defined as internal in <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyAttribute"/>.</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdPropertyAttribute.#ctor(System.String,System.String,Tools.TextT.UnicodeT.UnicodePropertyType,Tools.TextT.UnicodeT.UnicodePropertyStatus)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UcdPropertyAttribute"/> class</summary>
 <param name="name">Unlocalized name of the property as used in Unicode standard (UCD)</param>
 <param name="source">Name of file from Unicode Character Database values of this property are defined in</param>
 <param name="type">Type of the property</param>
 <param name="status">Status of the proeprty</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="type"/> is not one of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyType"/> values -or- <paramref name="status"/> is not one of <see cref="!:UnicodeProeprtyStatus"/> values.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdPropertyAttribute.#ctor(System.String,Tools.TextT.UnicodeT.UnihanPropertyCategory,Tools.TextT.UnicodeT.UnicodePropertyStatus)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UcdPropertyAttribute"/> for Unihan property</summary>
 <param name="name">Name of the property</param>
 <param name="unihanCategory">Unihan property category the property belongs to (determines <see cref="P:Tools.TextT.UnicodeT.UnicodePropertyAttribute.Source"/>)</param>
 <param name="status">Status of the property</param>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodePropertyType">
 <summary>Unicode property types (indicates data type of the property)</summary>
 <remarks>Values of constants from this enumeration are codes of character used to represent values in Unicode standard (it often reffers to property type only by it's initial letter).</remarks>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyType.Catalog">
 <summary>Catalog properties (C) have enumerated values which are expected to be regularly extended in successive versions of the Unicode Standard. This distinguishes them from Enumeration properties.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyType.Enumeration">
 <summary>Enumeration properties (E) have enumerated values which constitute a logical partition space; new values will generally not be added to them in successive versions of the standard.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyType.Binary">
 <summary>Binary properties (B) are a special case of Enumeration properties, which have exactly two values: Yes and No (or True and False).</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyType.String">
 <summary>String properties (S) are typically mappings from a Unicode code point to another Unicode code point or sequence of Unicode code points; examples include case mappings and decomposition mappings.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyType.Numeric">
 <summary>Numeric properties (N) specify the actual numeric values for digits and other characters associated with numbers in some way.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyType.Miscellaneous">
 <summary>Miscellaneous properties (M) are those properties that do not fit neatly into the other property categories; they currently include character names, comments about characters, and the Unicode_Radical_Stroke property (a combination of numeric values) documented in Unicode Standard Annex #38, "Unicode Han Database (Unihan)"</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodePropertyStatus">
 <summary>Property statuses of Unicode Character Database (UCD) properties</summary>
 <remarks>
 <para>These property statuses apply on entire property for all codepoints not for single usege of property on single codepoint.</para>
 <para>Values of constants from this enumeration are codes of character used to represent values in Unicode standard (it often reffers to property type only by it's initial letter).</para>
 </remarks>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyStatus.Normative">
 <summary>Normative property (N)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyStatus.Informative">
 <summary>Informative property (I)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyStatus.Contributory">
 <summary>Contributory property (C)</summary>
 <remarks>
 Contributory properties contain sets of exceptions used in the generation of other properties derived from them. The contributory properties specifically concerned with identifiers and casing contribute to the maintenance of stability guarantees for properties and/or to invariance relationships between related properties. Other contributory properties are simply defined as a convenience for property derivation.
 <para>Most contributory properties have names using the pattern "Other_XXX" and are used to derive the corresponding "XXX" property. For example, the Other_Alphabetic property is used in the derivation of the Alphabetic property.</para>
 </remarks>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyStatus.Provisional">
 <summary>Provisional property (P)</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute">
 <summary>When applied to a property of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> indicates category that property belongs to</summary>
 <remarks>You cannot define this attribute on your properties. Only properties of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> can be decorated with this attribute.</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute.#ctor(Tools.TextT.UnicodeT.UnicodePropertyCategory)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute"/> from <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategory"/> value</summary>
 <param name="category">Indicates the category</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="category"/> is not one of supported <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategory"/> values.</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute.#ctor(Tools.TextT.UnicodeT.UnicodePropertyCategory,System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute"/> class from <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategory"/> value and string category name</summary>
 <param name="category">Indicates the category</param>
 <param name="name">Alternative category name</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="category"/> is not one of supported <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategory"/> values.</exception>
 <remarks>This property is intended to be used from derived classes which provide different set of categories than <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategory"/> (i.e. - subsets).</remarks>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute.GetLocalizedString(System.String)">
 <summary>Looks up the localized name of the specified category.</summary>
 <returns>The localized name of the category, or null if a localized name does not exist.</returns>
 <param name="value">The identifer for the category to look up. </param>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute.UnicodeCategory">
 <summary>Gets enumerated value indicating the category the property belongs to</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute.GetLocalizedString(Tools.TextT.UnicodeT.UnicodePropertyCategory)">
 <summary>Converts <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategory"/> value to human-readable localized string</summary>
 <param name="category">The category</param>
 <returns>Human-readable localized string representing <paramref name="category"/>.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="category"/> is not one of supported <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategory"/> values</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.UcdCategoryAttribute">
 <summary>Implements <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute"/> that actually can be applied on properties.</summary>
 <remarks>Only purpose of this class is to provide public constructors that are defined as internal in <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute"/>.</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdCategoryAttribute.#ctor(Tools.TextT.UnicodeT.UnicodePropertyCategory)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute"/></summary>
 <param name="category">Indicate sthe category</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="category"/> is not one of supported <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategory"/> values.</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodePropertyCategory">
 <summary>Categories of Unicode character properties as defined in Unicode Character Database chapter 5.1, Table 7</summary>
 <remarks>If you want to connvert this enumeration's value to human-readable localized string you can use <see cref="M:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute.GetLocalizedString(System.String)"/>.</remarks>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.General">
 <summary>General-purpose properties</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Case">
 <summary>Casing properties</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Normalization">
 <summary>Normalization-related properties</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.ShapingAndRendering">
 <summary>Sahping and Rendering</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Bidirectional">
 <summary>Bidi-related properties</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Identifiers">
 <summary>Properties related to programming language identifiers</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Cjk">
 <summary>CJK (China, Japan, Korea) properties (does not cover UniHan)</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Miscellaneous">
 <summary>Miscellaneous properties</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Contributory">
 <summary>Contributory properties</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodePropertyCategory.Numeric">
 <summary>Numeric-related properties</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_Age">
<summary>
  Looks up a localized string similar to Age.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_BidiClass">
<summary>
  Looks up a localized string similar to Bidi Class.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_BidiMirrored">
<summary>
  Looks up a localized string similar to Bidi Mirrored.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_BidiMirroringGlyph">
<summary>
  Looks up a localized string similar to Bidi Mirroring Glyph.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_BidiPairedBracket">
<summary>
  Looks up a localized string similar to Bidi paired bracket.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_BidiPairedBracketType">
<summary>
  Looks up a localized string similar to Bidi paired bracket type.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_Block">
<summary>
  Looks up a localized string similar to Block.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CanonicalCombiningClass">
<summary>
  Looks up a localized string similar to Canonical Combining Class.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CaseFolding">
<summary>
  Looks up a localized string similar to Case Folding.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CaseFoldingClosureMappingKC">
<summary>
  Looks up a localized string similar to Case Folding Closure Mapping KC.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ChangesWhenCasefolded">
<summary>
  Looks up a localized string similar to Changes when Casefolded.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ChangesWhenCasemapped">
<summary>
  Looks up a localized string similar to Changes when Casemapped.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ChangesWhenLoweracsed">
<summary>
  Looks up a localized string similar to Changes when Loweracsed.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ChangesWhenNfKCCasefold">
<summary>
  Looks up a localized string similar to Changes when Normalization Form KC Casefold.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ChangesWhenTilecased">
<summary>
  Looks up a localized string similar to Changes when Tilecased.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CompositionExclusion">
<summary>
  Looks up a localized string similar to Composition Exclusion.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CSUR_BidiCategory">
<summary>
  Looks up a localized string similar to Bidi Category.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CSUR_Creator">
<summary>
  Looks up a localized string similar to Creator.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CSUR_LastRevision">
<summary>
  Looks up a localized string similar to Last revision.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CSUR_Name">
<summary>
  Looks up a localized string similar to Name.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CSUR_ReservedFor">
<summary>
  Looks up a localized string similar to Reserved for.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CSUR_Script">
<summary>
  Looks up a localized string similar to Script.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CSUR_Status">
<summary>
  Looks up a localized string similar to Status.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_CSUR_Type">
<summary>
  Looks up a localized string similar to Type.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_DecompositionMapping">
<summary>
  Looks up a localized string similar to Decomposition Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_DecompositionType">
<summary>
  Looks up a localized string similar to Decomposition type.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_EastAsianWidth">
<summary>
  Looks up a localized string similar to East Asian Width.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ExpandsOnC">
<summary>
  Looks up a localized string similar to Expands on Normalization Form C.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ExpandsOnD">
<summary>
  Looks up a localized string similar to Expands on Normalization Form D.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ExpandsOnKC">
<summary>
  Looks up a localized string similar to Expands on Normalization Form KC.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ExpandsOnKD">
<summary>
  Looks up a localized string similar to Expands on Normalization Form KD.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_FullCompositionExclusion">
<summary>
  Looks up a localized string similar to Full Composition Exclusion.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_GeneralCategory">
<summary>
  Looks up a localized string similar to General Category.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_GraphemeClusterBreak">
<summary>
  Looks up a localized string similar to Grapheme Cluster Break.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_HangulSyllableType">
<summary>
  Looks up a localized string similar to Hangul Syllable Type.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IndicMantraCategory">
<summary>
  Looks up a localized string similar to Indic Mantra Category.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IndicPositionalCategory">
<summary>
  Looks up a localized string similar to Indic Positional Category.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IndicSyllabicCategory">
<summary>
  Looks up a localized string similar to Indic Syllabic Category.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsAlphabetic">
<summary>
  Looks up a localized string similar to Alphabetic.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsAsciiHex">
<summary>
  Looks up a localized string similar to ASCII Hexa-digit.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsBidiControl">
<summary>
  Looks up a localized string similar to Bidi Control.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsCased">
<summary>
  Looks up a localized string similar to Cased.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsCaseIgnorable">
<summary>
  Looks up a localized string similar to Case Ignorable.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsDash">
<summary>
  Looks up a localized string similar to Dash.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsDefaultIgnorable">
<summary>
  Looks up a localized string similar to Default Ignorable Code Point.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsDeprecated">
<summary>
  Looks up a localized string similar to Deprecated.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsDiacritic">
<summary>
  Looks up a localized string similar to Diacritic.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsExtender">
<summary>
  Looks up a localized string similar to Extender.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsGraphemeBase">
<summary>
  Looks up a localized string similar to Grapheme Base.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsGraphemeExtend">
<summary>
  Looks up a localized string similar to Grapheme Extend.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsGraphemeLink">
<summary>
  Looks up a localized string similar to Grapheme Link.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsHexaDigit">
<summary>
  Looks up a localized string similar to Hexa-digit.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsHyphen">
<summary>
  Looks up a localized string similar to Hyphen.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsIdContinue">
<summary>
  Looks up a localized string similar to Identifier Continuation.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsIdContinueEx">
<summary>
  Looks up a localized string similar to Identifier Continuation alternative.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsIdeograph">
<summary>
  Looks up a localized string similar to Ideographic.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsIdsBinaryOperator">
<summary>
  Looks up a localized string similar to Ideographic Description Sequence Binary Operator.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsIdStart">
<summary>
  Looks up a localized string similar to Identifier Start.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsIdStartEx">
<summary>
  Looks up a localized string similar to Identifier Start alternative.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsIdsTrinaryOperator">
<summary>
  Looks up a localized string similar to Ideographic Description Sequence Trinary Operator.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsLogicalOrderException">
<summary>
  Looks up a localized string similar to Logical Order Exception.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsLowercase">
<summary>
  Looks up a localized string similar to Lowercase.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsMath">
<summary>
  Looks up a localized string similar to Math.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsNonCharacter">
<summary>
  Looks up a localized string similar to Non-character Code Point.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsoComment">
<summary>
  Looks up a localized string similar to ISO Comment.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsOtherAlphabetic">
<summary>
  Looks up a localized string similar to Other Alphabetic.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsOtherDefaultIgnorable">
<summary>
  Looks up a localized string similar to Other Default Ignorable Code Point.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsOtherGraphemeExtend">
<summary>
  Looks up a localized string similar to Other Grapheme Extend.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsOtherIdContinue">
<summary>
  Looks up a localized string similar to Other Identifier Continuation.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsOtherIdStart">
<summary>
  Looks up a localized string similar to Other Identifier Start.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsOtherLowercase">
<summary>
  Looks up a localized string similar to Other Lowercase.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsOtherMath">
<summary>
  Looks up a localized string similar to Other Math.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsOtherUppercase">
<summary>
  Looks up a localized string similar to Other Uppercase.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsPatternSyntax">
<summary>
  Looks up a localized string similar to Pattern Syntax.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsPatternWhiteSpace">
<summary>
  Looks up a localized string similar to Pattern Whitespace.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsQuotationMark">
<summary>
  Looks up a localized string similar to Quotation Mark.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsRadical">
<summary>
  Looks up a localized string similar to CJK Radical.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsSentenceTerminal">
<summary>
  Looks up a localized string similar to Sentence Terminal.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsSoftDotted">
<summary>
  Looks up a localized string similar to Soft-dotted.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsTerminalPunctuation">
<summary>
  Looks up a localized string similar to Terminal Punctuation.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsUnifiedIdeograph">
<summary>
  Looks up a localized string similar to Unified Ideograph.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsUppercase">
<summary>
  Looks up a localized string similar to Uppercase.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsVariationSelector">
<summary>
  Looks up a localized string similar to Variation Selector.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_IsWhitespace">
<summary>
  Looks up a localized string similar to Whitespace.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_JamoShortName">
<summary>
  Looks up a localized string similar to Jamo Short Name.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_JoinControl">
<summary>
  Looks up a localized string similar to Join Control.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_JoiningGroup">
<summary>
  Looks up a localized string similar to Joining Group.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_JoiningType">
<summary>
  Looks up a localized string similar to Joining Type.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_LineBreak">
<summary>
  Looks up a localized string similar to Line Break.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_LowercaseMapping">
<summary>
  Looks up a localized string similar to Lowercase Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_Name">
<summary>
  Looks up a localized string similar to Name.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_Name1">
<summary>
  Looks up a localized string similar to Unicode 1 Name.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_NfKCCasefold">
<summary>
  Looks up a localized string similar to Normalization form KC Casefold.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_NormalizationFormCQuickCheck">
<summary>
  Looks up a localized string similar to Normalization Form C Quick Check.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_NormalizationFormDQuickCheck">
<summary>
  Looks up a localized string similar to Normalization Form D Quick Check.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_NormalizationFormKCQuickCheck">
<summary>
  Looks up a localized string similar to Normalization Form KC Quick Check.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_NormalizationFormKDQuickCheck">
<summary>
  Looks up a localized string similar to Normalization Form KD Quick Check.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_NumericType">
<summary>
  Looks up a localized string similar to Numeric Type.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_NumericValue">
<summary>
  Looks up a localized string similar to Numeric Value.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_other_BidiStrength">
<summary>
  Looks up a localized string similar to Bidi Strength.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_other_CodePoint">
<summary>
  Looks up a localized string similar to Code point.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_other_FirstCodePoint">
<summary>
  Looks up a localized string similar to First Code-point.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_other_GeneralCategoryClass">
<summary>
  Looks up a localized string similar to General category class.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_other_LastCodePoint">
<summary>
  Looks up a localized string similar to Last Code-point.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_other_LocalizedName">
<summary>
  Looks up a localized string similar to Localized name.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_other_NameAliases">
<summary>
  Looks up a localized string similar to Normative name aliases.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_other_Type">
<summary>
  Looks up a localized string similar to Type.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_Script">
<summary>
  Looks up a localized string similar to Script.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_ScriptExtensions">
<summary>
  Looks up a localized string similar to Script extensions.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_SentenceBreak">
<summary>
  Looks up a localized string similar to Sentence Break.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_SimpleCaseFolding">
<summary>
  Looks up a localized string similar to Simple Case Folding.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_SimpleLowercaseMapping">
<summary>
  Looks up a localized string similar to Simple Lowercase Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_SimpleTilecaseMapping">
<summary>
  Looks up a localized string similar to Simple Tilecase Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_SimpleUppercaseMapping">
<summary>
  Looks up a localized string similar to Simple Uppercase Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_TilecaseMapping">
<summary>
  Looks up a localized string similar to Tilecase Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanAccountingNumeric">
<summary>
  Looks up a localized string similar to Unihan Accounting Numeric.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanAlternateHanYu">
<summary>
  Looks up a localized string similar to Unihan Alternate Han Yu.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanAlternateJef">
<summary>
  Looks up a localized string similar to Unihan Alternate JEF.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanAlternateKangXi">
<summary>
  Looks up a localized string similar to Unihan Alternate Kang Xi.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanAlternateMorohashi">
<summary>
  Looks up a localized string similar to Unihan Alternate Morohashi.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanBig5">
<summary>
  Looks up a localized string similar to Unihan Big 5 Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCangjie">
<summary>
  Looks up a localized string similar to Unihan Cangjie code.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCantonese">
<summary>
  Looks up a localized string similar to Unihan Cantonese Pronounciation.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCccii">
<summary>
  Looks up a localized string similar to Unihan CCCII Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCheungBauer">
<summary>
  Looks up a localized string similar to Unihan Cheung-Bauer Reading.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCheungBauerIndex">
<summary>
  Looks up a localized string similar to Unihan Cheung-Bauer Index.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCihai">
<summary>
  Looks up a localized string similar to Unihan Cihai.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCns1986">
<summary>
  Looks up a localized string similar to Unihan CNS 11643-1986 Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCns1992">
<summary>
  Looks up a localized string similar to Unihan CNS 11643-1992 Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCompatibilityVariant">
<summary>
  Looks up a localized string similar to Unihan Compatibility Variant.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanCowles">
<summary>
  Looks up a localized string similar to Unihan Cowles.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanDaeJaweon">
<summary>
  Looks up a localized string similar to Unihan Dae Jaweon.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanDefinition">
<summary>
  Looks up a localized string similar to Unihan Definition.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanEacc">
<summary>
  Looks up a localized string similar to Unihan EACC.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanFenn">
<summary>
  Looks up a localized string similar to Unihan Fenn.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanFennIndex">
<summary>
  Looks up a localized string similar to Unihan Fenn Index.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanFourCornerCode">
<summary>
  Looks up a localized string similar to Unihan Four-corner Code.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanFrequency">
<summary>
  Looks up a localized string similar to Unihan Frequency.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanGB0">
<summary>
  Looks up a localized string similar to Unihan GB 2312-80.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanGB1">
<summary>
  Looks up a localized string similar to Unihan GB 12345-90.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanGB3">
<summary>
  Looks up a localized string similar to Unihan GB 7589-87.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanGB5">
<summary>
  Looks up a localized string similar to Unihan GB 7590-87.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanGB7">
<summary>
  Looks up a localized string similar to Unihan GB 8565-89 (GB7).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanGB8">
<summary>
  Looks up a localized string similar to Unihan GB 8565-89 (GB8).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanGradeLevel">
<summary>
  Looks up a localized string similar to Unihan Grade Level.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanGsr">
<summary>
  Looks up a localized string similar to Unihan Grammata Serica Recensa.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanHangul">
<summary>
  Looks up a localized string similar to Unihan Readings.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanHanYu">
<summary>
  Looks up a localized string similar to Unihan Hanyu Da Zidian.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanHanyuPinlu">
<summary>
  Looks up a localized string similar to Unihan Xindai Hanyu Pinlu Cidian.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanHanyuPinyin">
<summary>
  Looks up a localized string similar to Unihan Hànyǔ Dà Zìdiǎn.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanHDZRadBreak">
<summary>
  Looks up a localized string similar to Unihan Hanyu Da Zidian Break.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanHKGlyph">
<summary>
  Looks up a localized string similar to Unihan Hong Kong Glyph.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanHkscs">
<summary>
  Looks up a localized string similar to Unihan Hong Kong Supplementary Character Set.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIbmJapan">
<summary>
  Looks up a localized string similar to Unihan IBM Japan.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIICore">
<summary>
  Looks up a localized string similar to Unihan IICore.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgDaeJaweon">
<summary>
  Looks up a localized string similar to Unihan Dae Jaweon (IRG).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgDaiKanwaZiten">
<summary>
  Looks up a localized string similar to Unihan Dai Kanwa Ziten (IRG).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgGSource">
<summary>
  Looks up a localized string similar to Unihan IRG “G” Source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgHanyuDaZidian">
<summary>
  Looks up a localized string similar to Unihan Hanyu Da Zidian (IRG).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgHSource">
<summary>
  Looks up a localized string similar to Unihan IRG “H” Source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgJSource">
<summary>
  Looks up a localized string similar to Unihan IRG “J” Source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgKangXi">
<summary>
  Looks up a localized string similar to Unihan Kang Xi (IRG).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgKPSource">
<summary>
  Looks up a localized string similar to Unihan IRG “KP” Source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgKSource">
<summary>
  Looks up a localized string similar to Unihan IRG “K” Source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgMSource">
<summary>
  Looks up a localized string similar to Unihan IRG “M” Source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgTSource">
<summary>
  Looks up a localized string similar to Unihan IRG “T” Source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgUSource">
<summary>
  Looks up a localized string similar to Unihan IRG “U” Source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanIrgVSource">
<summary>
  Looks up a localized string similar to Unihan IRG “V” Source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanJapaneseKun">
<summary>
  Looks up a localized string similar to Unihan Japanese Kun.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanJapaneseOn">
<summary>
  Looks up a localized string similar to Unihan Japanese On.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanJhj">
<summary>
  Looks up a localized string similar to Unihan JHJ.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanJis0208">
<summary>
  Looks up a localized string similar to Unihan JIS X 0208-1990.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanJis0213">
<summary>
  Looks up a localized string similar to Unihan JIS X 0213-2000.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanJisX0212">
<summary>
  Looks up a localized string similar to Unihan JIS X 0212-1190.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanKangXi">
<summary>
  Looks up a localized string similar to Unihan Kang Xi.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanKarlgren">
<summary>
  Looks up a localized string similar to Unihan Karlgren.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanKorean">
<summary>
  Looks up a localized string similar to Unihan Korean.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanKps10721">
<summary>
  Looks up a localized string similar to Unihan KPS 10721-2000.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanKps9566">
<summary>
  Looks up a localized string similar to Unihan KPS 9566-97.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanKSX1001">
<summary>
  Looks up a localized string similar to Unihan KS X 1001:1992.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanKSX1002">
<summary>
  Looks up a localized string similar to Unihan KS X 1002:1991.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanLau">
<summary>
  Looks up a localized string similar to Unihan Lau.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanMainlandTelegraph">
<summary>
  Looks up a localized string similar to Unihan Chinese Telegraph.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanMandarin">
<summary>
  Looks up a localized string similar to Unihan Mandarin.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanMatthews">
<summary>
  Looks up a localized string similar to Unihan Matthews.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanMeyerWempe">
<summary>
  Looks up a localized string similar to Unihan Meyer &amp; Wempe.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanMorohashi">
<summary>
  Looks up a localized string similar to Unihan Morohashi.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanNelson">
<summary>
  Looks up a localized string similar to Unihan Nelson.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanOtherNumeric">
<summary>
  Looks up a localized string similar to Unihan Other Numeric.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanPhonetic">
<summary>
  Looks up a localized string similar to Unihan Phonetic.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanPrimaryNumeric">
<summary>
  Looks up a localized string similar to Unihan Primary Numeric.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanPseudoGB1">
<summary>
  Looks up a localized string similar to Unihan Pseudo GB 12345-90.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanRSAdobeJapan">
<summary>
  Looks up a localized string similar to Unihan Adobe-Japan1-6.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanRSJapanese">
<summary>
  Looks up a localized string similar to Unihan Radical/stroke Count (Japanese).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanRSKangXi">
<summary>
  Looks up a localized string similar to Unihan Radical/stroke Count (Kang Xi).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanRSKanWa">
<summary>
  Looks up a localized string similar to Unihan Radical/stroke Count (Morohashi).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanRSKorean">
<summary>
  Looks up a localized string similar to Unihan Radical/stroke Count (Korean).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanRSMerged">
<summary>
  Looks up a localized string similar to Unihan Radical/stroke Count (Merged).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanRSUnicode">
<summary>
  Looks up a localized string similar to Unihan Radical/stroke Count (Unicode).
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanSemanticVariant">
<summary>
  Looks up a localized string similar to Unihan Semantic Variant.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanSimplifiedVariant">
<summary>
  Looks up a localized string similar to Unihan Simplified Variant.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanSongBenGuangYun">
<summary>
  Looks up a localized string similar to Unihan Song Ben Guang Yun.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanSpecializedSemanticVariant">
<summary>
  Looks up a localized string similar to Unihan Specialized Semantic Variant.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanTaiwanTelegraph">
<summary>
  Looks up a localized string similar to Unihan Taiwan Telegraph.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanTang">
<summary>
  Looks up a localized string similar to Unihan Tang.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanTotalStrokes">
<summary>
  Looks up a localized string similar to Unihan Total Strokes.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanTraditionalVariant">
<summary>
  Looks up a localized string similar to Unihan Traditional Variant.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanVietnamese">
<summary>
  Looks up a localized string similar to Unihan Vietnamese.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanWubi">
<summary>
  Looks up a localized string similar to Unihan Wubi.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanXerox">
<summary>
  Looks up a localized string similar to Unihan Xerox.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanXiàndàiHànyǔCídiǎn">
<summary>
  Looks up a localized string similar to Unihan Xiàndài Hànyǔ Cídiǎn.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_HanZVariant">
<summary>
  Looks up a localized string similar to Unihan Z-variant.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_unihan_kJa">
<summary>
  Looks up a localized string similar to Unihan “JA” source.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_UniversalName">
<summary>
  Looks up a localized string similar to Friendly name.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_UppercaseMapping">
<summary>
  Looks up a localized string similar to Uppercase Mapping.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.d_WordBreak">
<summary>
  Looks up a localized string similar to Word Break.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_CannotFindCodePoint">
<summary>
  Looks up a localized string similar to Cannot find code point represented by {0}. {1} instance was either initialized without XML document or information is not available for current code point..
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_CodepointMustStartWithUPlus">
<summary>
  Looks up a localized string similar to Codepoint must start with U+.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_CollectionCopyToSmallArray">
<summary>
  Looks up a localized string similar to Not enough space in destination array.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_EnumeratorState">
<summary>
  Looks up a localized string similar to Enumeration has not yet started or it has already finished..
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_ErrorReadingNameAliases">
<summary>
  Looks up a localized string similar to Erorr while reading name aliases on line {0}: {1}.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_FirstLastCharSwapped">
<summary>
  Looks up a localized string similar to First character cannot be greater than last charatcer.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_InvalidXmlElement">
<summary>
  Looks up a localized string similar to Element must be {0}.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_MakeSingleFromSingle">
<summary>
  Looks up a localized string similar to Only range characters can be used to make single characters..
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_MultidimensionalArray">
<summary>
  Looks up a localized string similar to Array is multidimensional.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_NameAlias_NotHex">
<summary>
  Looks up a localized string similar to Unexpected character. Expected uppercase hexadecimal digit.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_NamesListAlreadyLoaded">
<summary>
  Looks up a localized string similar to NamesList extension is already loaded.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_NoCharsInCollection">
<summary>
  Looks up a localized string similar to No characters in collection.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_NotAllowedForPlaceholderCharacters">
<summary>
  Looks up a localized string similar to Not allowed for placeholder characters..
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_OperationIsNotValidForCharacterRanges">
<summary>
  Looks up a localized string similar to Operation is not valid for character ranges..
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_RangeNotFullySpecified">
<summary>
  Looks up a localized string similar to This range is not fully specified. Either first or last codepoint is not specified..
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_SequenceContainsPlaceholder">
<summary>
  Looks up a localized string similar to Sequence contains placeholder.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_SurrogatePair">
<summary>
  Looks up a localized string similar to Character represents surrogate pair.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_UnrecognizedFormatCharacter">
<summary>
  Looks up a localized string similar to Unrecognized format character {0}.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_UnsupportedBidirectionalCategory">
<summary>
  Looks up a localized string similar to Unsupported bidirectional category {0}.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_UnsuppportedGeneralCategory">
<summary>
  Looks up a localized string similar to Unsuppported general category {0}.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.ex_ValueCannotBeParsed">
<summary>
  Looks up a localized string similar to Value {0} cannot be parsed as {1}.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.prefix_Alias">
<summary>
  Looks up a localized string similar to Alias: .
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.prefix_CSUR">
<summary>
  Looks up a localized string similar to CSUR: .
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.prefix_Unicode1">
<summary>
  Looks up a localized string similar to 1: .
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_Bidirectional">
<summary>
  Looks up a localized string similar to Bidirectional.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_Case">
<summary>
  Looks up a localized string similar to Case.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_Cjk">
<summary>
  Looks up a localized string similar to CJK.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_Contributory">
<summary>
  Looks up a localized string similar to Contributory.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_CSUR_CSUR">
<summary>
  Looks up a localized string similar to CSUR.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_General">
<summary>
  Looks up a localized string similar to General.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_Identifiers">
<summary>
  Looks up a localized string similar to Identifiers.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_Miscellaneous">
<summary>
  Looks up a localized string similar to Miscellaneous.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_Normalization">
<summary>
  Looks up a localized string similar to Normalization.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_Numeric">
<summary>
  Looks up a localized string similar to Numeric.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_other_Infrastructure">
<summary>
  Looks up a localized string similar to Infrastructure.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_ShapingAndRendering">
<summary>
  Looks up a localized string similar to Shaping and Rendering.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_DictionaryIndices">
<summary>
  Looks up a localized string similar to Dictionary Indices.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_DictionaryLikeData">
<summary>
  Looks up a localized string similar to Dictionary-like Data.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_IrgSources">
<summary>
  Looks up a localized string similar to IRG Sources.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_NumericValues">
<summary>
  Looks up a localized string similar to Numeric Values.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_OtherMappings">
<summary>
  Looks up a localized string similar to Other Mappings.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_RadicalStrokeCount">
<summary>
  Looks up a localized string similar to Radical Stroke Count.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_Readings">
<summary>
  Looks up a localized string similar to Readings.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_UnihanPrefix">
<summary>
  Looks up a localized string similar to Unihan - .
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_Unknown">
<summary>
  Looks up a localized string similar to unknown.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propcat_unihan_Variants">
<summary>
  Looks up a localized string similar to Variants.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propstat_Contributory">
<summary>
  Looks up a localized string similar to Contributory.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propstat_Informative">
<summary>
  Looks up a localized string similar to Informative.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propstat_Normative">
<summary>
  Looks up a localized string similar to Normative.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.propstat_Provisional">
<summary>
  Looks up a localized string similar to Provisional.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.proptype_Binary">
<summary>
  Looks up a localized string similar to Binary.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.proptype_Catalog">
<summary>
  Looks up a localized string similar to Catalog.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.proptype_Enumeration">
<summary>
  Looks up a localized string similar to Enumeration.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.proptype_Miscellaneous">
<summary>
  Looks up a localized string similar to Miscellaneous.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.proptype_Numeric">
<summary>
  Looks up a localized string similar to Numeric.
</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeResources.proptype_String">
<summary>
  Looks up a localized string similar to String.
</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnicodeStandardizedVariant">
 <summary>Represents Unicode standardized variant</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnicodeStandardizedVariant.elementName">
 <summary>Name of element representing this class in XML</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnicodeStandardizedVariant.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodeStandardizedVariant"/> class</summary>
 <param name="element">A <see cref="T:System.Xml.Linq.XElement"/> that represents this named sequence</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="element"/> is not element &lt;standardized-variant> in namespace http://www.unicode.org/ns/2003/ucd/1.0.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeStandardizedVariant.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeStandardizedVariant.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeStandardizedVariant.Description">
 <summary>Gets description of this standardized variant</summary>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeStandardizedVariant.CodePoints">
 <summary>Gets codepoints that participate in this standardized variant</summary>
 <remarks>This collection should always contain exactly two items</remarks>
</member>
<member name="P:Tools.TextT.UnicodeT.UnicodeStandardizedVariant.When">
 <summary>Gets a string that indicates when this standardized variant is used</summary>
</member>
<member name="T:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute">
 <summary>When applied to a property of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> indicates Unihan database category that property belongs to</summary>
 <remarks>You cannot define this attribute on your properties. Only properties of <see cref="T:Tools.TextT.UnicodeT.UnicodePropertiesProvider"/> can be decorated with this attribute.</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute.#ctor(Tools.TextT.UnicodeT.UnihanPropertyCategory)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute"/> from <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategory"/> value</summary>
 <param name="category">Indicates the category</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="category"/> is not one of supported <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategory"/> values.</exception>
</member>
<member name="P:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute.UnihanCategory">
 <summary>Gets enumerated value indicating the Unihan category the property belongs to</summary>
</member>
<member name="M:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute.GetLocalizedString(System.String)">
 <summary>Looks up the localized name of the specified category.</summary>
 <returns>The localized name of the category, or null if a localized name does not exist.</returns>
 <param name="value">The identifer for the category to look up. </param>
</member>
<member name="M:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute.GetLocalizedString(Tools.TextT.UnicodeT.UnihanPropertyCategory)">
 <summary>Converts <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategory"/> value to human-readable localized string</summary>
 <param name="category">The category</param>
 <returns>Human-readable localized string representing <paramref name="category"/>.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="category"/> is not one of supported <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategory"/> values</exception>
</member>
<member name="M:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute.GetFileName(Tools.TextT.UnicodeT.UnihanPropertyCategory)">
 <summary>Gets name of text file properties of given <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategory"/> are defined in</summary>
 <param name="category">The Unihan property category</param>
 <returns>Name of file (from Unihan.zip) that contains values for properties of given category</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="category"/> is not one of supported <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategory"/> values</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.UcdCategoryUnihanAttribute">
 <summary>Implements <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute"/> that actually can be applied on properties.</summary>
 <remarks>Only purpose of this class is to provide public constructors that are defined as internal in <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategoryAttribute"/>.</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.UnicodeT.UcdCategoryUnihanAttribute.#ctor(Tools.TextT.UnicodeT.UnihanPropertyCategory)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.TextT.UnicodeT.UcdCategoryUnihanAttribute"/> from <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategory"/> value</summary>
 <param name="category">Indicates the category</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="category"/> is not one of supported <see cref="T:Tools.TextT.UnicodeT.UnihanPropertyCategory"/> values.</exception>
</member>
<member name="T:Tools.TextT.UnicodeT.UnihanPropertyCategory">
 <summary>Categories of Unihan database as defined in Unicode Han Database chapter 3</summary>
 <remarks>If you want to connvert this enumeration's value to human-readable localized string you can use <see cref="M:Tools.TextT.UnicodeT.UnicodePropertyCategoryAttribute.GetLocalizedString(Tools.TextT.UnicodeT.UnicodePropertyCategory)"/>.</remarks>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.TextT.UnicodeT.UnihanPropertyCategory.IrgSources">
 <summary>These represent the official mappings between Unihan and the various encoded character sets or collections which have been submitted by IRG members.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnihanPropertyCategory.OtherMappings">
 <summary>Mapping tables between the ideographic portions of Unicode and those of encoded character sets or character collections not used by the IRG in its work.</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnihanPropertyCategory.DictionaryIndices">
 <summary>Indices to standard dictionaries</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnihanPropertyCategory.Readings">
 <summary>Reading and pronounciation</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnihanPropertyCategory.DictionaryLikeData">
 <summary>Various fields including information one might find in a dictionary</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnihanPropertyCategory.RadicalStrokeCounts">
 <summary>Redical stroke counts</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnihanPropertyCategory.Variants">
 <summary>Glyph variants</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnihanPropertyCategory.NumericValues">
 <summary>Numerical values an ideograph may have</summary>
</member>
<member name="F:Tools.TextT.UnicodeT.UnihanPropertyCategory.unknown">
 <summary>Unknown/undocumented</summary>
</member>
</members>
</doc>
