<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tools.Windows
</name>
</assembly>
<members>
<member name="T:Tools.CollectionsT.SpecializedT.FormsCollectionsExtensions">
 <summary>Extension methods for working with specialized collections related to Windows Forms</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.FormsCollectionsExtensions.Last(System.Windows.Forms.Control.ControlCollection)">
 <summary>Gets last <see cref="T:System.Windows.Forms.Control"/> in <see cref="T:System.Windows.Forms.Control.ControlCollection"/></summary>
 <param name="Collection">Collection to get last item from</param>
 <returns>Last item in <paramref name="Collection"/>, null if <paramref name="Collection"/> is empty.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
 <version stage="Nightly" version="1.5.2">Moved from <see cref="T:Tools.CollectionsT.SpecializedT.CollectionTools"/></version>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.FormsCollectionsExtensions.Insert(System.Windows.Forms.Control.ControlCollection,System.Int32,System.Windows.Forms.Control)">
 <summary>Inserts control at particulare position in collection</summary>
 <param name="Collection">Collection to insert control into</param>
 <param name="index">Index to insert control at</param>
 <param name="Control">Control to be inserted</param>
 <remarks>This method requires removal of all following controls from collection. Removed controls are then placed back.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> or <paramref name="Control"/> is null</exception>
 <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is less than zero of greater than <paramref name="Collection"/>.<see cref="P:System.Windows.Forms.Layout.ArrangedElementCollection.Count">Count</see>.</exception>
 <seealso cref="M:Tools.CollectionsT.SpecializedT.FormsCollectionsExtensions.Replace(System.Windows.Forms.Control.ControlCollection,System.Int32,System.Windows.Forms.Control)"/>
 
 <version stage="Nightly" version="1.5.2">Moved from <see cref="T:Tools.CollectionsT.SpecializedT.CollectionTools"/></version>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.FormsCollectionsExtensions.Replace(System.Windows.Forms.Control.ControlCollection,System.Int32,System.Windows.Forms.Control)">
 <summary>Replaces <see cref="T:System.Windows.Forms.Control"/> at specified index of <see cref="T:System.Windows.Forms.Control.ControlCollection"/></summary>
 <param name="Collection">Collection to replace item in</param>
 <param name="index">Index to replace item at</param>
 <param name="Control">Control that will be placed at <paramref name="index"/>. If null, old control is removed at <paramref name="index"/> and nothing is inserted instead of it (so <paramref name="Collection"/> gets shorter).</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
 <exception cref="T:System.IndexOutOfRangeException"><paramref name="index"/> is less tha zero or greater than or equal to <paramref name="Collection"/>.<see cref="P:System.Windows.Forms.Layout.ArrangedElementCollection.Count">Count</see>.</exception>
 <remarks>Using this method requires all controls following control being replaced to be removed from collection and reinserted back.
 <para>Raplacing control in collection does not necesarily mean that control will be visualy placed at the same postition in parent control. It is not true for any controls without layout model, such as <see cref="T:System.Windows.Forms.Form"/> or <see cref="T:System.Windows.Forms.Panel"/> and for for example <see cref="T:System.Windows.Forms.TableLayoutPanel"/>. It is true for <see cref="T:System.Windows.Forms.FlowLayoutPanel"/>.</para></remarks>
 <seealso cref="M:Tools.CollectionsT.SpecializedT.FormsCollectionsExtensions.Insert(System.Windows.Forms.Control.ControlCollection,System.Int32,System.Windows.Forms.Control)"/>
 <seealso cref="M:Tools.WindowsT.FormsT.UtilitiesT.WinFormsExtensions.ReplaceControl(System.Windows.Forms.TableLayoutPanel,System.Windows.Forms.Control,System.Windows.Forms.Control)"/>
 
 <version stage="Nightly" version="1.5.2">Moved from <see cref="T:Tools.CollectionsT.SpecializedT.CollectionTools"/></version>
</member>
<member name="T:Tools.ComponentModelT.PrefixAttribute">
 <summary>Inform programmer that he should name instances of class market wiht this attribute with names beginning with prefix</summary>
 <remarks>This is ONLY recomendation. This attribute is here to allow control author to select prefix. Of course users of controls can either use own prefix or use no prefix.</remarks>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><list type="bullet">
 <item><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</item>
 <item>Relocated to assembly Tools.Windows</item></list></version>
</member>
<member name="M:Tools.ComponentModelT.PrefixAttribute.#ctor(System.String)">
 <summary>CTor</summary>
 <param name="Prefix">Prefix associated with control</param>
</member>
<member name="F:Tools.ComponentModelT.PrefixAttribute._Prefix">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.PrefixAttribute.Prefix"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.PrefixAttribute.Prefix">
 <summary>Gets or sets prefix associated with control</summary>
</member>
<member name="T:Tools.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Comment">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.CopyIcon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.CutIcon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Delete">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.NavBack">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.NavForward">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.NewReport">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Open">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.PasteIcon">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Plus">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Repeat">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Save">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.T">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Zip">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="T:Tools.WindowsT.WPF.Resources">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_AssignmentOperator">
<summary>
Looks up a localized string similar to 'Assignment operators are not supported.'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_CannotBeAnEmptyString">
<summary>
Looks up a localized string similar to '{0} cannot be an empty string.'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_CannotConvertBack">
<summary>
Looks up a localized string similar to '{0} cannot convert back.'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_CannotFindOperator">
<summary>
Looks up a localized string similar to 'Cannot find operator {0} for types {1} and {2}'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_CannotInvertOperator">
<summary>
Looks up a localized string similar to 'Cannot invert operator {0}.'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_DoesNotContainMemberNamePart">
<summary>
Looks up a localized string similar to '{0} does not contain member name part.'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_IsNull">
<summary>
Looks up a localized string similar to '{0} is null.'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_MemberHasValueNull">
<summary>
Looks up a localized string similar to 'Member {0} has value null.'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_OnlyBinaryOperators">
<summary>
Looks up a localized string similar to 'Only binary operators are supported.'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_OperatorNotSupported">
<summary>
Looks up a localized string similar to 'Operator {0} is not supported'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_PropertyHasUnknownValue">
<summary>
Looks up a localized string similar to 'Property {0} has unknown value {1}'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ex_ServiceProviderDoesntProvide">
<summary>
Looks up a localized string similar to 'Service provider doesn&apos;t provide {0}'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ScrollDown">
<summary>
Looks up a localized string similar to 'Scroll down'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ScrollLeft">
<summary>
Looks up a localized string similar to 'Scroll left'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ScrollRight">
<summary>
Looks up a localized string similar to 'Scroll right'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ScrollUp">
<summary>
Looks up a localized string similar to 'Scroll up'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ValueCannotBeNull">
<summary>
Looks up a localized string similar to 'Value cannot be null'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ValueHasIncorrectFormat">
<summary>
Looks up a localized string similar to 'Value has incorrect format'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ZoomIn">
<summary>
Looks up a localized string similar to 'Zoom in'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Resources.ZoomOut">
<summary>
Looks up a localized string similar to 'Zoom out'.
</summary>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_AssignmentOperatorFormat">
<summary>
The stub formatting method returning the ex_AssignmentOperator property value.
</summary>
<returns>The ex_AssignmentOperator property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_CannotBeAnEmptyStringFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be an empty string.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_CannotConvertBackFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot convert back.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_CannotFindOperatorFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Cannot find operator {0} for types {1} and {2}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_CannotInvertOperatorFormat(System.Object)">
<summary>
Formats a localized string similar to 'Cannot invert operator {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_DoesNotContainMemberNamePartFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} does not contain member name part.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_IsNullFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} is null.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_MemberHasValueNullFormat(System.Object)">
<summary>
Formats a localized string similar to 'Member {0} has value null.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_OnlyBinaryOperatorsFormat">
<summary>
The stub formatting method returning the ex_OnlyBinaryOperators property value.
</summary>
<returns>The ex_OnlyBinaryOperators property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_OperatorNotSupportedFormat(System.Object)">
<summary>
Formats a localized string similar to 'Operator {0} is not supported'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_PropertyHasUnknownValueFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Property {0} has unknown value {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ex_ServiceProviderDoesntProvideFormat(System.Object)">
<summary>
Formats a localized string similar to 'Service provider doesn&apos;t provide {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ScrollDownFormat">
<summary>
The stub formatting method returning the ScrollDown property value.
</summary>
<returns>The ScrollDown property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ScrollLeftFormat">
<summary>
The stub formatting method returning the ScrollLeft property value.
</summary>
<returns>The ScrollLeft property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ScrollRightFormat">
<summary>
The stub formatting method returning the ScrollRight property value.
</summary>
<returns>The ScrollRight property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ScrollUpFormat">
<summary>
The stub formatting method returning the ScrollUp property value.
</summary>
<returns>The ScrollUp property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ValueCannotBeNullFormat">
<summary>
The stub formatting method returning the ValueCannotBeNull property value.
</summary>
<returns>The ValueCannotBeNull property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ValueHasIncorrectFormatFormat">
<summary>
The stub formatting method returning the ValueHasIncorrectFormat property value.
</summary>
<returns>The ValueHasIncorrectFormat property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ZoomInFormat">
<summary>
The stub formatting method returning the ZoomIn property value.
</summary>
<returns>The ZoomIn property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Resources.ZoomOutFormat">
<summary>
The stub formatting method returning the ZoomOut property value.
</summary>
<returns>The ZoomOut property value.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.Dialogs">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Dialogs.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Dialogs.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Dialogs.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Dialogs.Cancel">
<summary>
Looks up a localized string similar to '_Cancel'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Dialogs.PleaseWait">
<summary>
Looks up a localized string similar to 'Please wait ...'.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.Dialogs.Progress">
<summary>
Looks up a localized string similar to 'Progress'.
</summary>
</member>
<member name="M:Tools.WindowsT.WPF.Dialogs.CancelFormat">
<summary>
The stub formatting method returning the Cancel property value.
</summary>
<returns>The Cancel property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Dialogs.PleaseWaitFormat">
<summary>
The stub formatting method returning the PleaseWait property value.
</summary>
<returns>The PleaseWait property value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.Dialogs.ProgressFormat">
<summary>
The stub formatting method returning the Progress property value.
</summary>
<returns>The Progress property value.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn">
 <summary>A column for WPF <see cref="T:System.Windows.Controls.DataGrid"/> for entering numbers using <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</summary>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
 <summary>Gets an editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
 <returns>A new editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value. (A <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>)</returns>
 <param name="cell">The cell that will contain the generated element.</param>
 <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
</member>
<member name="E:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.GeneratingEditingElement">
 <summary>Raised before eiditng element is generated. Allows you to cancle editing element generation.</summary>
 <remarks>When this event is cancelled normal element (<see cref="T:System.Windows.Controls.TextBlock"/>) is used for that cell instead of <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.OnGeneratingEditingElement(Tools.WindowsT.WPF.ControlsT.DataGridCellElementCreatingEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.GeneratingEditingElement"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
 <summary>When overridden in a derived class, gets a read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.</summary>
 <returns>A new, read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value. (A <see cref="T:System.Windows.Controls.TextBlock"/>)</returns>
 <param name="cell">The cell that will contain the generated element.</param>
 <param name="dataItem">The data item represented by the row that contains the intended cell.</param>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.HideZeroBinding">
 <summary>Gets a binding used with <see cref="F:System.Windows.UIElement.VisibilityProperty"/> to set it invisible when value is zero and <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.HideZero"/> is true</summary>
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
 <summary>Sets cell content as needed for editing.</summary>
 <returns>Derived classes return the unedited cell value. This implementation returns null in all cases.</returns>
 <param name="editingElement">The element that the column displays for a cell in editing mode.</param>
 <param name="editingEventArgs">Information about the user gesture that is causing a cell to enter editing mode.</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.ApplyStyle(System.Boolean,System.Boolean,System.Windows.FrameworkElement)">
 <summary>Applies a style to a <see cref="T:System.Windows.FrameworkElement"/></summary>
 <param name="isEditing">True when the element is an editing element</param>
 <param name="defaultToElementStyle">True to use <see cref="P:System.Windows.Controls.DataGridBoundColumn.ElementStyle"/> when <paramref name="isEditing"/> is true and <see cref="P:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle"/> is null</param>
 <param name="element">The element to apply style onto</param>
 <remarks>Code of this method was obtained from Reflector on <see cref="M:System.Windows.Controls.DataGridBoundColumn.ApplyStyle"/></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.PickStyle(System.Boolean,System.Boolean)">
 <summary>Gets style for an element</summary>
 <param name="isEditing">True when the element is editing element</param>
 <param name="defaultToElementStyle">True to use <see cref="P:System.Windows.Controls.DataGridBoundColumn.ElementStyle"/> when <paramref name="isEditing"/> is true and <see cref="P:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle"/> is null</param>
 <returns>Either <see cref="P:System.Windows.Controls.DataGridBoundColumn.ElementStyle"/> or <see cref="P:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle"/>.</returns>
 <remarks>Code of this method was obtained from Reflector on <see cref="M:System.Windows.Controls.DataGridBoundColumn.PickStyle"/></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.SyncColumnProperty(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.DependencyProperty)">
 <summary>Synchronizes column property with element</summary>
 <param name="column">The column to synchronize value with</param>
 <param name="content">A <see cref="T:System.Windows.DependencyObject"/> to synchronize value to</param>
 <param name="contentProperty">Property to synchronize value to</param>
 <param name="columnProperty">Property to snychronize value with</param>
 <remarks>Code of this method was obtained from Reflector on <see cref="M:System.Windows.Controls.DataGridHelper.SyncColumnProperty"/></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.IsDefaultValue(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
 <summary>Determines wheather property has it's default value</summary>
 <param name="d">A <see cref="T:System.Windows.DependencyObject"/> to tell that for</param>
 <param name="dp">A property to tell that for</param>
 <returns>True if property's value is default</returns>
 <remarks>Code of this method was obtained from Reflector on <see cref="M:System.Windows.Controls.DataGridHelper.IsDefaultValue"/></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.SyncProperties(System.Windows.FrameworkElement)">
 <summary>Synchronizes properties of editing element and column</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Minimum">
 <summary>Gets or sets minimum allowed value.</summary>
 <returns>Minimum allowed value.</returns>
 <value>Minimum allowed value.</value>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.MinimumProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Minimum"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.OnMinimumChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Handles change of the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Minimum"/> property</summary>
 <param name="element">Source of event</param>
 <param name="args">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.CoerceMinimum(System.Windows.DependencyObject,System.Object)">
 <summary>Coerces value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Minimum"/> property</summary>
 <param name="element">Element to coerce value for. Must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</param>
 <param name="value">Value to be coerced. Must be <see cref="T:System.Decimal"/></param>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Maximum">
 <summary>Gets or sets maximum allowed value.</summary>
 <returns>Maximum allowed value</returns>
 <value>Maximum allowed value</value>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.MaximumProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Maximum"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.CoerceMaximum(System.Windows.DependencyObject,System.Object)">
 <summary>Coerces value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Maximum"/> property</summary>
 <param name="element">Element to coerce value for. Must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</param>
 <param name="value">Value to be coerced. Must be <see cref="T:System.Decimal"/></param>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Change">
 <summary>Gets or sets value indicating step value changes when user increnets/decrements the value</summary>
 <returns>Value of incerement/decrement step</returns>
 <value>Value of increment/decrement step</value>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.ChangeProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Change"/> dependency property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.ValidateChange(System.Object)">
 <summary>Valudates value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Change"/> property</summary>
 <param name="value">New value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Change"/> property. Must be <see cref="T:System.Decimal"/></param>
 <returns>True if <paramref name="value"/> is greater than zero; false otherwise</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.CoerceChange(System.Windows.DependencyObject,System.Object)">
 <summary>Corces value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Change"/> property</summary>
 <param name="element">Element to corece value for. Must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</param>
 <param name="value">Proposed value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.Change"/> property</param>
 <returns>Coerced value (<see cref="T:System.Decimal"/>)</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.smallestForDecimalPlaces(System.Int32)">
 <summary>Gets smallest  value by decimal places</summary>
 <param name="decimalPlaces">Number of decimal places</param>
 <returns>Smallest value for given <paramref name="decimalPlaces"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="decimalPlaces"/> is less than zero</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.DecimalPlaces">
 <summary>Gets or sets value indication decimal place precision of number</summary>
 <remarks>Drecimal-places pecision of number</remarks>
 <value>Number of decimal places to be entered</value>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.DecimalPlacesProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.DecimalPlaces"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.OnDecimalPlacesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Handles change of value of <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.DecimalPlaces"/> property</summary>
 <param name="element">Element must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</param>
 <param name="args">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.ValidateDecimalPlaces(System.Object)">
 <summary>Validates value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.DecimalPlaces"/> property</summary>
 <param name="value">Number of decimapl places. Must be <see cref="T:System.Int32"/></param>
 <returns>True when <paramref name="value"/> is greater than or equal to zero; false otherwise</returns>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.HideZero">
 <summary>Gets or sets value idicating wheather not text is shown when value is zero</summary>      
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.HideZeroProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.ControlsT.DataGridNumericUpDownColumn.HideZero"/> property</summary>                                                   
</member>
<member name="T:Tools.WindowsT.WPF.ControlsT.DataGridCellElementCreatingEventArgs">
 <summary>Event argumens of events related to creation of elemtnt in <see cref="T:System.Windows.Controls.DataGridColumn"/></summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.DataGridCellElementCreatingEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridCell,System.Object)">
 <summary> - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.ControlsT.DataGridCellElementCreatingEventArgs"/></summary>
 <param name="column">Column cell belongs to</param>
 <param name="cell">The cell</param>
 <param name="dataItem">Data item cell is bound to</param>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.DataGridCellElementCreatingEventArgs.DataItem">
 <summary>Gets a data item cell is bound to</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.DataGridCellElementCreatingEventArgs.Cell">
 <summary>Gets the cell object</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.DataGridCellElementCreatingEventArgs.Column">
 <summary>Gets a column cell belongs to</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer">
 <summary>Build-in <see cref="T:System.Windows.Controls.ScrollViewer"/> eats all mouse-wheel events so you cannot use <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> on window whare <see cref="T:System.Windows.Controls.ScrollViewer"/> is used. This <see cref="T:System.Windows.Controls.ScrollViewer"/>-derived class solves this issue.</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.#ctor">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer"/> class and initializes command bindings</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.#ctor(System.Boolean)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer"/> class and optionally initializes command bindings</summary>
 <param name="initializeBindings">True to initialize <see cref="P:System.Windows.UIElement.InputBindings"/> and <see cref="P:System.Windows.UIElement.CommandBindings"/>; false to just clear them</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.CanScrollDown(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
 <summary>Called to detect if the <see cref="P:System.Windows.Input.ComponentCommands.ScrollPageDown"/> command can be executed</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.CanScrollDown">
 <summary>Indicates if this <see cref="T:System.Windows.Controls.ScrollViewer"/> can scroll down</summary>
 <returns></returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.OnScrollDown(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Called to execute the <see cref="P:System.Windows.Input.ComponentCommands.ScrollPageDown"/> command</summary>
 <param name="sender">Event source</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.OnScrollDown(System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Performs scrolling down</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.CanScrollUp(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
 <summary>Called to detect if the <see cref="P:System.Windows.Input.ComponentCommands.ScrollPageUp"/> command can be executed</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.CanScrollUp">
 <summary>Indicates if this <see cref="T:System.Windows.Controls.ScrollViewer"/> can scroll up</summary>
 <returns></returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.OnScrollUp(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Called to execute the <see cref="P:System.Windows.Input.ComponentCommands.ScrollPageUp"/> command</summary>
 <param name="sender">Event source</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.OnScrollUp(System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Performs scrolling up</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.CanScrollRight(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
 <summary>Called to detect if the <see cref="P:System.Windows.Input.ComponentCommands.ScrollPageRight"/> command can be executed</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.CanScrollRight">
 <summary>Indicates if this <see cref="T:System.Windows.Controls.ScrollViewer"/> can scroll right</summary>
 <returns></returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.OnScrollRight(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Called to execute the <see cref="P:System.Windows.Input.ComponentCommands.ScrollPageRight"/> command</summary>
 <param name="sender">Event source</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.OnScrollRight(System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Performs scrolling right</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.CanScrollLeft(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
 <summary>Called to detect if the <see cref="P:System.Windows.Input.ComponentCommands.ScrollPageLeft"/> command can be executed</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.CanScrollLeft">
 <summary>Indicates if this <see cref="T:System.Windows.Controls.ScrollViewer"/> can scroll left</summary>
 <returns></returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.OnScrollLeft(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Called to execute the <see cref="P:System.Windows.Input.ComponentCommands.ScrollPageLeft"/> command</summary>
 <param name="sender">Event source</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.InputFriendlyScrollViewer.OnScrollLeft(System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Performs scrolling left</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown">
 <summary>Represents a Windows spin box (also known as an up-down control) that displays numeric values.</summary>
 <remarks>
 <para>This is companion class to <see cref="T:System.Windows.Forms.NumericUpDown"/>.</para>
 <para>This class is bsed on http://msdn.microsoft.com/en-us/library/ms771573.aspx, converted by http://labs.developerfusion.co.uk/convert/csharp-to-vb.aspx</para>
 <para>This control contains following template parts:
 <list type="table"><listheader><term>Part</term><description>Description</description></listheader>
 <item><term><c>PART_EditableTextBox</c></term><description>The text box user can enter text in. This part is not compulsory but it is strongly recomended and required for certain functionality.</description></item>
 <item><term><c>PART_ButtonUp</c></term><description>Increment button. Optional.</description></item>
 <item><term><c>PART_ButtonDown</c></term><description>Decrement button. Optional.</description></item>
 </list></para>
 </remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2">Documentation improved</version>
 <version version="1.5.3" stage="Beta">Default visual style changed so that <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/> has same height as regular <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.textBox"/>.</version>
 <version version="1.5.3">User can no longer enter following characters multiple times: <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign"/>, <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign"/> and <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator"/>.</version>
 <version version="1.5.3">Fixed focus issues (focusable parent of textbox) and Up/Down arrow keys binding (not working)</version>
 <version version="1.5.3">Added new template parts <c>PART_ButtonUp</c> and <c>PART_ButtonDown</c>.</version>
 <version version="1.5.3">New behavior: Pressing Enter forces <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/> to process it's text, coerce the text, update value and possibly raise <see cref="E:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueChanged"/> event.</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.PART_EditableTextBox">
 <summary>Name of text box part</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.PART_ButtonUp">
 <summary>Name of up button part</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.PART_ButtonDown">
 <summary>Name of down button part</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DefaultMinValue">
 <summary>Default value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Minimum"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DefaultValue">
 <summary>Default value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DefaultMaxValue">
 <summary>Default value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Maximum"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DefaultChange">
 <summary>Default value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DefaultDecimalPlaces">
 <summary>Default value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown._buttonDown">
 <summary>The down button part</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown._buttonUp">
 <summary>The up button part</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.#cctor">
 <summary>Initializer</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value">
 <summary>Gets or sets value of thei <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/></summary>
 <returns>Value of this <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/></returns>
 <value>Sets value of this <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/></value>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> applied</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueProperty">
 <summary>
 Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/> dependency property.
 </summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Handles change of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/> property</summary>
 <param name="obj">Source of the event</param>
 <param name="args">event erguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Decimal})">
 <summary>
 Raises the ValueChanged event.
 </summary>
 <param name="args">Arguments associated with the ValueChanged event.</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.CoerceValue(System.Windows.DependencyObject,System.Object)">
 <summary>Coerces the value for specific control</summary>
 <param name="element">Control to coerce value for. Must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</param>
 <param name="value">New value. Must be <see cref="T:System.Decimal"/></param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.CoerceValue(System.Decimal)">
 <summary>Enforces <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Minimum"/>, <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Maximum"/> and <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces"/> on given value</summary>
 <param name="Value">Value to be coerced</param>
 <returns>Value derived from <paramref name="Value"/> that fullfills the constrains</returns>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Minimum">
 <summary>Gets or sets minimum allowed value of <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/>.</summary>
 <returns>Minimum allved value of <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/>.</returns>
 <value>Minimum alloved value of <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/></value>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> applied</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.MinimumProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Minimum"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnMinimumChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Handles change of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Minimum"/> property</summary>
 <param name="element">Source of event</param>
 <param name="args">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.CoerceMinimum(System.Windows.DependencyObject,System.Object)">
 <summary>Coerces value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Minimum"/> property</summary>
 <param name="element">Element to coerce value for. Must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</param>
 <param name="value">Value to be coerced. Must be <see cref="T:System.Decimal"/></param>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Maximum">
 <summary>Gets or sets maximum allowed value of <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/>.</summary>
 <returns>Maximum allved value of <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/>.</returns>
 <value>Maximum alloved value of <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/></value>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> applied</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.MaximumProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Maximum"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnMaximumChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Handles change of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Maximum"/> property</summary>
 <param name="element">Source of event</param>
 <param name="args">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.CoerceMaximum(System.Windows.DependencyObject,System.Object)">
 <summary>Coerces value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Maximum"/> property</summary>
 <param name="element">Element to coerce value for. Must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</param>
 <param name="value">Value to be coerced. Must be <see cref="T:System.Decimal"/></param>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change">
 <summary>Gets or sets value indicating step value changes when user increnets/decrements the value</summary>
 <returns>Value of incerement/decrement step</returns>
 <value>Value of increment/decrement step</value>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> applied</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ChangeProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change"/> dependency property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValidateChange(System.Object)">
 <summary>Valudates value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change"/> property</summary>
 <param name="value">New value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change"/> property. Must be <see cref="T:System.Decimal"/></param>
 <returns>True if <paramref name="value"/> is greater than zero; false otherwise</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnChangeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Reacts on change of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change"/> property</summary>
 <param name="args">Event erguments</param><param name="element">Source of the event</param>
 <remarks>This implementation does nothing.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.CoerceChange(System.Windows.DependencyObject,System.Object)">
 <summary>Corces value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change"/> property</summary>
 <param name="element">Element to corece value for. Must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</param>
 <param name="value">Proposed value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change"/> property</param>
 <returns>Coerced value (<see cref="T:System.Decimal"/>)</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.smallestForDecimalPlaces(System.Int32)">
 <summary>Gets smallest  value by decimal places</summary>
 <param name="decimalPlaces">Number of decimal places</param>
 <returns>Smallest value for given <paramref name="decimalPlaces"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="decimalPlaces"/> is less than zero</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces">
 <summary>Gets or sets value indication decimal place precision of number</summary>
 <remarks>Drecimal-places pecision of number</remarks>
 <value>Number of decimal places to be entered</value>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> applied</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlacesProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnDecimalPlacesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Handles change of value of <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces"/> property</summary>
 <param name="element">Element must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/>.</param>
 <param name="args">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValidateDecimalPlaces(System.Object)">
 <summary>Validates value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces"/> property</summary>
 <param name="value">Number of decimapl places. Must be <see cref="T:System.Int32"/></param>
 <returns>True when <paramref name="value"/> is greater than or equal to zero; false otherwise</returns>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueString">
 <summary>Gets or sets value as string</summary>
 <returns><see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/> as <see cref="T:System.String"/> in apropriate, culture-specific format</returns>
 <value>Sets <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/> by its string representation if appropriate, culture-specific format</value>
 <version version="1.5.2"><see cref="T:System.ComponentModel.BrowsableAttribute"/>, <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute"/> and <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> applied</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueStringProperty">
 <summary>Indentifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueString"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.updateValueString">
 <summary>Updates value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueString"/> property whan <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/> changes</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueToString(System.Decimal)">
 <summary>Converts value to string</summary>
 <param name="value">Value to be converted</param>
 <returns>String representation of <paramref name="value"/> reflecting <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces"/>.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnValueStringChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Nahdles c´hange of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueString"/> property</summary>
 <param name="obj">Event source. Must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/></param>
 <param name="args">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnValueStringChanged(System.Windows.RoutedPropertyChangedEventArgs{System.String})">
 <summary>
 Raises the ValueChanged event.
 </summary>
 <param name="args">Arguments associated with the ValueChanged event.</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.CoerceValueString(System.Windows.DependencyObject,System.Object)">
 <summary>Coerces value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueString"/> property</summary>
 <param name="element">Element to coerce value for. Must be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/></param>
 <param name="value">Proposed value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueString"/> property. Must be <see cref="T:System.String"/>.</param>
 <returns>Coerced value</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValidateValueString(System.Object)">
 <summary>Validates value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueString"/> property</summary>
 <param name="value">Value to be validated. Should be <see cref="T:System.String"/>.</param>
 <returns>True if <paramref name="value"/> is string and it is parseable as number</returns>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.IsEditable">
 <summary>Gets or sets value indicating if text-box is editable</summary>
 <returns>True if text-box is editable, false otherwise</returns>
 <value>True to make text-box editable; false to disallow editing</value>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> applied</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.IsEditableProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.IsEditable"/>dependency proeperty</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.IsReadOnly">
 <summary>Gets or sets value indicating if this <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/> is read-only (value cannot be changed)</summary>      
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.IsReadOnlyProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.IsReadOnly"/> property</summary>                                                   
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueChangedEvent">
 <summary>
 Identifies the ValueChanged routed event.
 </summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueStringChangedEvent">
 <summary>
 Identifies the ValueStringChanged routed event.
 </summary>
</member>
<member name="E:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueChanged">
 <summary>
 Occurs when the Value property changes.
 </summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> applied</version>
</member>
<member name="E:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ValueStringChanged">
 <summary>
 Occurs when the ValueString property changes.
 </summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> and <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> applied</version>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.IncreaseCommand">
 <summary>Identifies command fro increasing <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/> by <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change"/></summary>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecreaseCommand">
 <summary>Identifies command fro decreasing <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Value"/> by <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Change"/></summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.InitializeCommands">
 <summary>Initializes comands</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnIncreaseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Handles the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.IncreaseCommand"/> command</summary>
 <param name="sender">Event source. Should be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/> otherwise event is ignored.</param>
 <param name="e">event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnDecreaseCommand(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Handles the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecreaseCommand"/> command</summary>
 <param name="sender">Event source. Should be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/> otherwise event is ignored.</param>
 <param name="e">event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.CanChangeValue(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
 <summary>Gets value indicating if increase or decrease command can be exceuted on given <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/></summary>
 <param name="sender">Event source. SHould be <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/> otherwise event is ignored.</param>
 <param name="e">event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnIncrease">
 <summary>Handles increasing of value</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnDecrease">
 <summary>Handles decreasing of value</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown._increaseCommand">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.IncreaseCommand"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown._decreaseCommand">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecreaseCommand"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnCreateAutomationPeer">
 <summary>Returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementations for the Windows Presentation Foundation (WPF) infrastructure.</summary>
 <returns>The type-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> implementation.</returns>
</member>
<member name="F:Tools.WindowsT.WPF.ControlsT.NumericUpDown._textBox">
 <summary>Current <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.textBox"/> (if any)</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnApplyTemplate">
 <summary>Invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.textBox_PreviewTextInput(System.Object,System.Windows.Input.TextCompositionEventArgs)">
 <summary>Prevents non-number characters from being typed</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.ApplyText">
 <summary>Applies and coerces current text to value</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.TextToValue(System.String,System.Decimal)">
 <summary>Attempts to convert user-typed text to number</summary>
 <param name="text">Text to converts</param>
 <param name="fallback">Value to be retuned if <paramref name="text"/> cannot be converted to decimal</param>
 <returns>
 <paramref name="text"/> converted to number. It conversion is not possible returns <paramref name="fallback"/>.
 Return value should be acceptable by <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Minimum"/>, <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.Maximum"/> and <see cref="P:Tools.WindowsT.WPF.ControlsT.NumericUpDown.DecimalPlaces"/> constraints.
 <para>This implementation utilizes <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)"/></para>
 </returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.AreCharsAccepltable(System.String)">
 <summary>For given string gets value indicating if it consists only of characters acceptable as part of number</summary>
 <param name="text">String to verify</param>
 <returns>True if <paramref name="text"/> consists only of characters valid as part of number. Takes current culture and current constrainst in account.</returns>
 <remarks>Returns true even for string which consists for valid character but is invalid number (i.e. "4.-..5" in invariant culture)</remarks>
 <version version="1.5.3">This implementation changed - multiple <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign"/>, <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign"/> and <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator"/> characters are no longer allowed</version>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
 <summary>
 This is a class handler for <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> event.
 The purpose of this handle is to move input focus to <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/> when user pressed mouse left button on any part of slider that is not focusable.
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
 <summary>Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event. </summary>
 <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.</param>
 <remarks>This implementation handles the <see cref="F:System.Windows.Input.Key.Up"/> and <see cref="F:System.Windows.Input.Key.Down"/> keys.</remarks>
 <version version="1.5.3">This override is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDown.SelectAll">
 <summary>Selects all text in editing text box</summary>
 <version version="1.5.3">This method is new in version 1.5.3</version>
</member>
<member name="T:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer">
 <summary><see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> for <see cref="T:Tools.WindowsT.WPF.ControlsT.NumericUpDown"/> control</summary>
 <version version="1.5.2" stage="Nightly">Documentation added</version>
 <version version="1.5.2"><see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> applied</version>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.#ctor(Tools.WindowsT.WPF.ControlsT.NumericUpDown)">
 <summary>CTor</summary>
 <param name="control">Control to attach to</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.GetClassNameCore">
 <summary>Gets the name of the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassName" />.</summary>
 <returns>An <see cref="F:System.String.Empty" /> string.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.GetAutomationControlTypeCore">
 <summary>Gets the control type for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType" />.</summary>
 <returns>The <see cref="F:System.Windows.Automation.Peers.AutomationControlType.Custom" /> enumeration value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
 <summary>Gets the control pattern for the <see cref="T:System.Windows.UIElement" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.UIElementAutomationPeer" />.</summary>
 <returns>When <paramref name="patternInterface"/> is <see cref="F:System.Windows.Automation.Peers.PatternInterface.RangeValue"/> returns this instance; otherwise null.</returns>
 <param name="patternInterface">A value from the enumeration.</param>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.RaiseValueChangedEvent(System.Decimal,System.Decimal)">
 <summary>Raises the event on value change</summary>
 <param name="oldValue">Old value</param><param name="newValue">New value</param>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.IsReadOnly">
 <summary>                    Gets a value that specifies whether the value of a control is read-only.                 </summary>
 <returns>true if the value is read-only; false if it can be modified.                 </returns>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.LargeChange">
 <summary>                    Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a large change is made, such as with the PAGE DOWN key.                </summary>
 <returns>                    The large-change value supported by the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />.                 </returns>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.Maximum">
 <summary>                    Gets the maximum range value supported by the control.                </summary>
 <returns>                    The maximum value supported by the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />.                 </returns>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.Minimum">
 <summary>                    Gets the minimum range value supported by the control.                </summary>
 <returns>                    The minimum value supported by the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />.                 </returns>
</member>
<member name="M:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.SetValue(System.Double)">
 <summary>                    Sets the value of the control.                </summary>
 <param name="value">                    The value to set.                </param>
 <exception cref="T:System.ArgumentOutOfRangeException">                    When 
 <paramref name="value" /> is less than the minimum or greater than the maximum value of the control.                </exception>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.SmallChange">
 <summary>                    Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a small change is made, such as with an arrow key.                </summary>
 <returns>                    The small-change value or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />.                 </returns>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.Value">
 <summary>                    Gets the value of the control.                </summary>
 <returns>                    The value of the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />.                </returns>
</member>
<member name="P:Tools.WindowsT.WPF.ControlsT.NumericUpDownAutomationPeer.MyOwner">
 <summary>Owner of this instance</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.ConverterResources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_CanConvertBackOnlyFromColors">
<summary>
  Looks up a localized string similar to {0} can convert back only from {1} and {2}..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_CanConvertBackOnlyFromFalse">
<summary>
  Looks up a localized string similar to {0} can convert back only from False..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_CanConvertBackOnlyTo">
<summary>
  Looks up a localized string similar to {0} can convert back only to {1}..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_CanConvertOnlyTo">
<summary>
  Looks up a localized string similar to {0} can convert only to {1}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_CannotConvertBack">
<summary>
  Looks up a localized string similar to {0} cannot convert back..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_CharacterNotBoolean">
<summary>
  Looks up a localized string similar to Character &apos;{0}&apos; does not represent known boolean value.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_CheckedEmpty">
<summary>
  Looks up a localized string similar to Converter parameter for checked value is empty..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_CheckedUndefined">
<summary>
  Looks up a localized string similar to Converter parameter does not contain definition for checked value..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConverterAcceptsValuesOfType_3">
<summary>
  Looks up a localized string similar to {0} accepts values of type {1}, {2} and {3}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConverterCanConvertBackOnlyFromTo">
<summary>
  Looks up a localized string similar to {0} can convert back only from {1} to {2}..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConverterCanConvertBackOnlyTo_1And1Generic">
<summary>
  Looks up a localized string similar to {0} can convert back only to {1} and {2} of {1}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConverterCanConvertOnlyFrom_2">
<summary>
  Looks up a localized string similar to {0} can convert only from {1} and {2}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConverterCanConvertOnlyFromTo">
<summary>
  Looks up a localized string similar to {0} can convert only from {1} to {2}..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConverterCanConvertOnlyTo_2">
<summary>
  Looks up a localized string similar to {0} can convert only to {1} and {2}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConverterCanConvertOnlyTo_3">
<summary>
  Looks up a localized string similar to {0} can convert only to {1}, {2} and {3}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConverterCannotConvertValueBack">
<summary>
  Looks up a localized string similar to {0} cannot convert back value {1}..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConverterSupportsOnlyTargetTypes_2AndOneGeneric">
<summary>
  Looks up a localized string similar to {0} supports only target types {0} and {1} and {2} of {1}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConvertOnlyFromNumericAndColors">
<summary>
  Looks up a localized string similar to {0} can convert only from numeric and color types..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ConvertsOnlyToBool">
<summary>
  Looks up a localized string similar to {0} converts only to boolean..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_FunctionForBackwardConversionHasNotBeenSet">
<summary>
  Looks up a localized string similar to Function for backward conversion has not been set..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_FunctionForForwardConversionHaveNotBeenSet">
<summary>
  Looks up a localized string similar to Function for forward conversion have not been set..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_IntermediateEmpty">
<summary>
  Looks up a localized string similar to Converter parameter for intermediate value is empty..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_IntermediateValueUndefined">
<summary>
  Looks up a localized string similar to Converter parameter does not contain definition for intermediate value..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_IsAssignableFromNeither">
<summary>
  Looks up a localized string similar to {0} is assignable from neither {1} nor {2}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_IsNotAssignableFrom">
<summary>
  Looks up a localized string similar to {0} is not assignable from {1}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_IsNull">
<summary>
  Looks up a localized string similar to {0} is null..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ParamMustHaveMinOneChar">
<summary>
  Looks up a localized string similar to Parameter must contain at least one character.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_UncheckedEmpty">
<summary>
  Looks up a localized string similar to Converter parameter for unchecked value is empty..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_UncheckedUndefined">
<summary>
  Looks up a localized string similar to Converter parameter does not contain definition for unchecked value..
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_UnsupportedDataType">
<summary>
  Looks up a localized string similar to Unsupported data type {0}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_UnsupportedOperation">
<summary>
  Looks up a localized string similar to Unsupported operation {0}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_ValueMustBeSetPriorCalling">
<summary>
  Looks up a localized string similar to Value of the {0} property mus be set prior to calling {1}.
</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConverterResources.ex_XPathNotSupportedType">
<summary>
  Looks up a localized string similar to XPath query cannot be used on type {0}.
</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.CompareConverterEx">
 <summary>Converter that test if value being converted relates to parameter</summary>
 <remarks>This converter is intended as one-way.</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CompareConverterEx.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. If <paramref name="value"/> is null or <paramref name="parameter"/> is null, returns null. Otherwise returns boolean value indicating if <paramref name="value"/> equals to <paramref name="parameter"/> using <see cref="M:System.Object.Equals(System.Object)"/>.</returns>
 <param name="value">The value produced by the binding source. This value will be compared with <paramref name="parameter"/>.</param>
 <param name="targetType">Type returned by conversion. Supported types are <see cref="T:System.Boolean"/>, <see cref="T:System.Windows.Visibility"/> and <see cref="T:System.Nullable`1"/> of these types</param>
 <param name="parameter">Value to compare <paramref name="value"/> with. If parametr is <see cref="T:System.String"/> extended comparison is performed. Othervise parameter is tested for equality with <paramref name="value"/>.</param>
 <param name="culture">Culture to convert string values to numbers/dates etc. Ignored when <paramref name="parameter"/> is not string.</param>
 <remarks>Fully supported types are:
 <list type="bullet">
 <item>Null</item>
 <item><see cref="T:System.Char"/></item>
 <item><see cref="T:System.String"/></item>
 <item><see cref="T:System.Boolean"/></item>
 <item><see cref="T:System.SByte"/></item>
 <item><see cref="T:System.Byte"/></item>
 <item><see cref="T:System.Int16"/></item>
 <item><see cref="T:System.UInt16"/></item>
 <item><see cref="T:System.Int32"/></item>
 <item><see cref="T:System.UInt32"/></item>
 <item><see cref="T:System.Int64"/></item>
 <item><see cref="T:System.UInt64"/></item>
 <item><see cref="T:System.Numerics.BigInteger"/></item>
 <item><see cref="T:System.Single"/></item>
 <item><see cref="T:System.Double"/></item>
 <item><see cref="T:System.Decimal"/></item>
 <item><see cref="T:System.DateTime"/></item>
 <item><see cref="T:System.DateTimeOffset"/></item>
 <item><see cref="T:System.TimeSpan"/></item>
 <item><see cref="T:Tools.TimeSpanFormattable"/></item>
 <item><see cref="T:System.IntPtr"/></item>
 <item><see cref="T:System.UIntPtr"/></item>
 <item><see cref="T:System.Enum"/></item>
 </list>
 When <paramref name="parameter"/> is <see cref="T:System.String"/> and starts with one of recognized substrings extended comparison is performed.
 Recognized substrings (comparison operators) are >=, &lt;=, ==, =, &lt;>, !=, &lt;, >, ===, !==.
 This is collection of comparison operator collected from Visual Basic, C# and JavaScript languages with expected behavior (==, =, !=, and &lt;> are type-independent; === and !== require type identity; enumeration and underlying type are treated as identical types).
 If rest of the string after operator (or entire string when it does not start with recognized operator) starts and ends with either " (double quote) or ' (apostrophe) and is longer than one character first and last characters are ignored.
 <note>
 Quotes and aopostrophes on other places than first and last of string to compare with are treated as normal characters.
 For example to test wheather <paramref name="value"/> equals to single apostrophe (') following values of <paramref name="parameter"/> can be used:
 <c>'</c>, <c>'''</c>, <c>"'"</c>, <c>='</c>, <c>='''</c>, <c>="'"</c>. <c>=='</c>, <c>=='''</c>, <c>=="'"</c>.
 </note>
 </remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CompareConverterEx.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>If <paramref name="value"/> is true returns <paramref name="parameter"/>; otherwise throws an exception</returns>
 <param name="value">Value to be converted</param>
 <param name="targetType">ignored</param>
 <param name="parameter">Value this converter compares values to</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not true</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.ComapreConverterBase">
 <summary>Base class for comparison converters</summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.ComapreConverterBase.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
 <summary>Performs the comparison</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <remarks>For Greater, Greater or equal, Less and Less or equal comparisons either <paramref name="value"/> or <paramref name="parameter"/> must be <see cref="T:System.IComparable"/>.</remarks>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ComapreConverterBase.Operation">
 <summary>When overriden in derived class gets comparison implemented by derived class</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation">
 <summary>Comparison operations supported by <see cref="T:Tools.WindowsT.WPF.ConvertersT.ComapreConverterBase"/></summary>
 <version version="1.5.3">This enumeration is new in version 1.5.3</version>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.Equals">
 <summary>True when instances are equal based on <see cref="M:System.Object.Equals(System.Object)"/>. null = null, null != non-null</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.IsSame">
 <summary>True when instances are equal based on <see cref="M:System.Object.Equals(System.Object)"/> and are of same type. null = null, null != non-null</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.NotEquals">
 <summary>True when instances are not equal based on <see cref="M:System.Object.Equals(System.Object)"/>. null = null, null != non-null</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.IsNotSame">
 <summary>True when instances are not equal based on <see cref="M:System.Object.Equals(System.Object)"/> or are not of same type. null = null, null != non-null</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.Greater">
 <summary>True when one instance is greater than the other  (any operand null => null)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.Less">
 <summary>True when one instance is less than the other  (any operand null => null)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.GreaterOrEqual">
 <summary>True when one instance is greater than or same as the other  (one operand null => null, null = null)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.LessOrEqual">
 <summary>True when one instance is less than or same as the other  (one operand null => null, null = null)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.True">
 <summary>Tautology - always returns true (any operand null => null)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.False">
 <summary>Always returns false</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.IsSameType">
 <summary>True when two instance s are of same type. (null = null (true), null != non-null (false))</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.IsNotSameType">
 <summary>True if type of two instances is different (null = null (false), null != non-null (true))</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.AnyComparisonConverter">
 <summary>Generic comparison converter</summary>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.AnyComparisonConverter.#ctor">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.ConvertersT.AnyComparisonConverter"/> initialized to <see cref="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.Equals"/> operation</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.AnyComparisonConverter.#ctor(Tools.WindowsT.WPF.ConvertersT.ComparisonOperation)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.ConvertersT.AnyComparisonConverter"/> and sets the operatopn</summary>
 <param name="operation">Comparison operation to be performed by this converter</param>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.AnyComparisonConverter.ActualOperation">
 <summary>Gets or sets comparision operation performed by this converter</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.AnyComparisonConverter.Operation">
 <summary>Gets comparison implemented by derived class</summary>
 <remarks>To set value of this property use <see cref="P:Tools.WindowsT.WPF.ConvertersT.AnyComparisonConverter.ActualOperation"/></remarks>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.LessThanConverter">
 <summary>Converter that can be used to detect wheather value is less than parameter</summary>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.LessThanConverter.Operation">
 <summary>When overriden in derived class gets comparison implemented by derived class</summary>
 <returns><see cref="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.Less"/></returns>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.GreaterThanConverter">
 <summary>Converter that can be used to detect wheather value is greater than parameter</summary>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.GreaterThanConverter.Operation">
 <summary>When overriden in derived class gets comparison implemented by derived class</summary>
 <returns><see cref="F:Tools.WindowsT.WPF.ConvertersT.ComparisonOperation.Greater"/></returns>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.CountConverter">
 <summary>Implemens <see cref="T:System.Windows.Data.IValueConverter"/> returning count of items in collection</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CountConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value - gets count of items in a collection</summary>
 <returns>Count of items in collection represented by <paramref name="value"/>. Default return type is <see cref="T:System.Int32"/>. Returns null when <paramref name="value"/> is null.</returns>
 <param name="value">The value produced by the binding source. A collection.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <remarks>
 Supported collection types are: <see cref="T:System.Collections.ICollection"/>, <see cref="T:System.Array"/> and <see cref="T:System.Collections.IEnumerable"/>.
 When value of unsupported type is passed function looks for property named <c>Count</c> via <see cref="T:System.ComponentModel.TypeDescriptor"/>. If the property is found value of that property is returned, otherwise 0 is returned.
 </remarks>
 <exception cref="T:System.InvalidCastException">Count (value of type <see cref="T:System.Int32"/>, or other type when <paramref name="value"/> is not one of supported types but has property named <c>Count</c>) cannot be converted to <paramref name="targetType"/> (when <paramref name="targetType"/> is null <see cref="T:System.Int32"/> is supplied).</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cannot convert return value to <paramref name="targetType"/> because no suitable operator is most specific.</exception>
 <exception cref="T:System.OverflowException">There was an error converting return value to <paramref name="targetType"/> due to that value to be returned does not fit to given <paramref name="targetType"/> (and causes overflow).</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CountConverter.IValueConverter_ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <returns>This function never returns and always throws <see cref="T:System.NotSupportedException"/></returns>
 <param name="value">ignored</param>
 <param name="targetType">ignored</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException">Always. This converter supports only one-way conversion.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.OneWayBooleanConverterBase">
 <summary>Commmon abstract base class for value one-way converters converting something to boolean</summary>
 <remarks>This class takes care about return value conversions</remarks>
 <version version="1.5.3">This abstract class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.OneWayBooleanConverterBase.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>A converted value. If the method returns null, the valid null value is used. By default returns <see cref="T:System.Boolean"/> Different return type can be required by <paramref name="targetType"/>.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property. Ignored if null.
 Preffered types are <see cref="T:System.Boolean"/> and <see cref="T:System.Nullable`1"/>[<see cref="T:System.Boolean"/>].
 Specially supported types are <see cref="T:System.Windows.Visibility"/> and <see cref="T:System.Nullable`1"/>[<see cref="T:System.Windows.Visibility"/>].
 If target type is not one ow types mentioned above <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used.
 If <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> throws <see cref="T:System.InvalidCastException"/> or <see cref="T:System.Reflection.AmbiguousMatchException"/> unconverted return value is returned instead.
 </param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.OneWayBooleanConverterBase.ProcessReturnValueInternal(System.Nullable{System.Boolean},System.Type)">
 <summary>Converts <see cref="T:System.Boolean"/> return value to given target type</summary>
 <param name="ret">Value produced by converter</param>
 <param name="targetType">The type of the binding target property. Ignored if null.
 Preffered types are <see cref="T:System.Boolean"/> and <see cref="T:System.Nullable`1"/>[<see cref="T:System.Boolean"/>].
 Specially supported types are <see cref="T:System.Windows.Visibility"/> and <see cref="T:System.Nullable`1"/>[<see cref="T:System.Windows.Visibility"/>].
 If target type is not one ow types mentioned above <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used.
 If <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> throws <see cref="T:System.InvalidCastException"/> or <see cref="T:System.Reflection.AmbiguousMatchException"/> unconverted return value is returned instead.
 </param>
 <returns><paramref name="ret"/> converted to <paramref name="targetType"/>.</returns>
 <remarks>This implementation uses <see cref="M:Tools.WindowsT.WPF.ConvertersT.OneWayBooleanConverterBase.ProcessReturnValue(System.Nullable{System.Boolean},System.Type)"/></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.OneWayBooleanConverterBase.ProcessReturnValue(System.Nullable{System.Boolean},System.Type)">
 <summary>Converts <see cref="T:System.Boolean"/> return value to given target type</summary>
 <param name="ret">Value produced by converter</param>
 <param name="targetType">The type of the binding target property. Ignored if null.
 Preffered types are <see cref="T:System.Boolean"/> and <see cref="T:System.Nullable`1"/>[<see cref="T:System.Boolean"/>].
 Specially supported types are <see cref="T:System.Windows.Visibility"/> and <see cref="T:System.Nullable`1"/>[<see cref="T:System.Windows.Visibility"/>].
 If target type is not one ow types mentioned above <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used.
 If <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> throws <see cref="T:System.InvalidCastException"/> or <see cref="T:System.Reflection.AmbiguousMatchException"/> unconverted return value is returned instead.
 </param>
 <returns><paramref name="ret"/> converted to <paramref name="targetType"/>.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.OneWayBooleanConverterBase.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
 <summary>When implemented in derived class converts a value to <see cref="T:System.Boolean"/> value</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.OneWayBooleanConverterBase.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>If implemented in derived class converts a value back.</summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="targetType">The type to convert to.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:System.NotSupportedException">This implementation always throws <see cref="T:System.NotSupportedException"/>.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.XPathConverter">
 <summary>Value converter which applies XPath query on binding result.</summary>
 <remarks>This converter is designed as one way.
 <para>When using namespaces in XPath query, use <see cref="T:Tools.WindowsT.WPF.ConvertersT.XPathConverterExtension"/> instead of <see cref="T:Tools.WindowsT.WPF.ConvertersT.XPathConverter"/>.</para></remarks>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.XPathConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>A converted value. If the method returns null, the valid null value is used. Returns result of XPath query callend on <paramref name="value"/>. Nulll when <paramref name="value"/> is null.</returns>
 <param name="value">The value produced by the binding source. This must be one of supported types.</param>
 <param name="targetType">The type of the binding target property. Ignored when null.</param>
 <param name="parameter">The converter parameter to use. Must be string- XPath.</param>
 <param name="culture">Ignored.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is nothing.</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="parameter"/> is not <see cref="T:System.String"/>.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not one of supported types. Not thrown when <paramref name="parameter"/> is "." (optionally surrounded with whitespaces).</exception>
 <exception cref="T:System.InvalidCastException">Cannot <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically cast result of XPath query to <paramref name="targetType"/>.</see></exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators from result of XPath query to <paramref name="targetType"/> were found, but no one is most specific.</exception>
 <exception cref="T:System.OverflowException">Build in conversion to numeric value (or <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/>) failed because result of XPath query cannot be represented in <paramref name="targetType"/> -or- Called cast operator have thrown this exception.</exception>
 <exception cref="T:System.FormatException">Conversion of <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/> failed because string has bad format. -or- Operator being caled has thrown this exception.</exception>
 <remarks>Supported types are:<list type="bulllet">
 <item><see cref="T:System.Xml.XPath.XPathNavigator"/></item>
 <item><see cref="T:System.Xml.XmlNode"/></item>
 <item><see cref="T:System.Xml.Linq.XNode"/></item>
 <item><see cref="T:System.Xml.XPath.IXPathNavigable"/></item>
 </list></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.XPathConverter.IValueConverter_ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="targetType">The type to convert to.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">Ignored.</param>
 <exception cref="T:System.NotSupportedException">
 This exception is thrown almost always since this converter does not support converting back.
 However under certain circumstances this exception is not thrown and backward conversion is attempted:
 When <paramref name="value"/> is nothing, nothing is returned.
 When <paramref name="parameter"/> is "." (optionally with whitespaces around) <paramref name="value"/> <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically casted</see> to <paramref name="targetType"/> (if it is not null) is retuned.
 </exception>
 <exception cref="T:System.InvalidCastException"><paramref name="parameter"/> is <see cref="T:System.String"/> and when trimmed it's ".", <paramref name="value"/> is not null and cannot <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically cast</see> <paramref name="value"/> to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException"><paramref name="parameter"/> is <see cref="T:System.String"/> and when trimmed it's ".", <paramref name="value"/> is not null and cast operators from <paramref name="value"/> to <paramref name="targetType"/> were found, but no one is most specific.</exception>
 <exception cref="T:System.OverflowException"><paramref name="parameter"/> is <see cref="T:System.String"/> and when trimmed it's ".", <paramref name="value"/> is not null and build in conversion to numeric value (or <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/>) failed because result of <paramref name="value"/> cannot be represented in <paramref name="targetType"/> or called cast operator have thrown this exception.</exception>
 <exception cref="T:System.FormatException"><paramref name="parameter"/> is <see cref="T:System.String"/> and when trimmed it's ".", <paramref name="value"/> is not null and conversion of <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/> failed because string has bad format or operator being caled has thrown this exception.</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.XPathConverter.Namespaces">
 <summary>Gets collection of XML namespace prefix-URI mappings to be used with XPath query</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.XPathConverterExtension">
 <summary>Markup extension provides an instnce of the <see cref="T:Tools.WindowsT.WPF.ConvertersT.XPathConverter"/> value converter. Resulting converter is aware of all XML namespace registrations in context.</summary>
 <version stage="Nightly" version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.XPathConverterExtension.ProvideValue(Tools.WindowsT.WPF.MarkupT.XamlServiceProvider)">
 <summary>Returns an object that is set as the value of the target property for this markup extension. This implementation always returns a new instance of the <see cref="T:Tools.WindowsT.WPF.ConvertersT.XPathConverter"/> class.</summary>
 <returns>The object value to set on the property where the extension is applied. </returns>
 <param name="serviceProvider">Object that can provide services for the markup extension. This implementation never passes value null here. This class utilizes <see cref="T:System.Xaml.IXamlNamespaceResolver"/> service when available.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider"/> is null. This can happen only when you are calling this method from derived class.</exception>
 <remarks>In case <paramref name="serviceProvider"/> provides <see cref="T:System.Xaml.IXamlNamespaceResolver"/> service, it's used to populate <see cref="P:Tools.WindowsT.WPF.ConvertersT.XPathConverter.Namespaces"/> collection from current context.</remarks>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperationConverter">
 <summary>Multi-value converter that performs a boolean operation on values</summary>
 <remarks>This converter is one-way</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BooleanOperationConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.</summary>
 <returns>A converted value. This converter always produces a <see cref="T:System.Boolean"/> value which is then converted to <paramref name="targetType"/>.</returns>
 <param name="values">
 The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion (it's ignored).
 Each value in this array should be either <see cref="T:System.Boolean"/> (preffere), null or <see cref="T:System.DBNull"/> (treated as false), <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> (ignored - does not participa in a boolean operation), <see cref="T:System.Windows.Visibility"/> (<see cref="F:System.Windows.Visibility.Visible"/> is treated as true all other values as false), <see cref="T:System.IConvertible"/> (<see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/> is used) or any other type (<see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used).
 </param>
 <param name="targetType">The type of the binding target property. Ignored if null. Primary target type is <see cref="T:System.Boolean"/>. Specificly supported type is <see cref="T:System.Windows.Visibility"/> (true is converted to <see cref="F:System.Windows.Visibility.Visible"/>, false to <see cref="F:System.Windows.Visibility.Collapsed"/>). For other types <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used.</param>
 <param name="parameter">The converter parameter to use. It should be either <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation"/> or <see cref="T:System.String"/> (case-insensitive) or <see cref="T:System.Int32"/> representing a <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation"/> value. For values of other types <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> to <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation"/> is used.</param>
 <param name="culture">The culture to use in the converter. It's used only when converting a value from <paramref name="values"/> which is <see cref="T:System.IConvertible"/> to boolean.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null.</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="parameter"/> represents invalid <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation"/> value.</exception>
 <exception cref="T:System.InvalidCastException"><paramref name="parameter"/> cannot be converted to <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation"/> -or- value form <paramref name="values"/> cannot be converted to <see cref="T:System.Boolean"/> -or- return value cannot be converted to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="parameter"/> is <see cref="T:System.String"/> but it does not represent one of <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation"/> values (case-insensitive)</exception>
 <exception cref="T:System.OverflowException">Arithmetic overflow occured when converting <paramref name="parameter"/> to <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation"/>, value from <paramref name="values"/> to <see cref="T:System.Boolean"/> or return value to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Error performing <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamic casting</see> either from <paramref name="parameter"/> to <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation"/> or from value in <paramref name="values"/> to <see cref="T:System.Boolean"/> or from return value to <paramref name="targetType"/>: Casting operators were found but noone is most specific.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BooleanOperationConverter.Convert(Tools.WindowsT.WPF.ConvertersT.BooleanOperation,System.Boolean[])">
 <summary>Performs the boolean operation</summary>
 <param name="operation">An operation to be performed</param>
 <param name="values">Boolean values to be processed by the operation</param>
 <returns>Result of the operation. When <paramref name="values"/> is null or empty all operations but <see cref="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.NAnd"/>, <see cref="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.NOr"/> and <see cref="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.True"/> returns false.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="operation"/> is not one of <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation"/> values.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BooleanOperationConverter.IMultiValueConverter_ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
 <summary>Always throws <see cref="T:System.NotSupportedException"/> - this is one way converter.</summary>
 <returns>Never returns - always throws <see cref="T:System.NotSupportedException"/>.</returns>
 <param name="value">Ignored</param>
 <param name="targetTypes">Ignored</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <exception cref="T:System.NotSupportedException">Always. This converter is one-way.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperation">
 <summary>Booelan operations supported by <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanOperationConverter"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.And">
 <summary>Logical And</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.Or">
 <summary>Logical Or</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.NAnd">
 <summary>Logical And, result negated - Not(a And b And c ...)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.NOr">
 <summary>Logical Or, result negated - Not(a Or b Or c ...)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.Xor">
 <summary>Exclusive Or (returns true when exactly one value is true)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.Xnor">
 <summary>Exclusive negated or (returns true when exacly one value is false)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.True">
 <summary>Always returns true (tautology)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BooleanOperation.False">
 <summary>Always returns false</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.CollectionCombiningConverter">
 <summary>Converter which combines multiple collection to one <see cref="T:System.Windows.Data.CompositeCollection"/>. It's possible to decide which collections to be included and which not.</summary>
 <remarks>
 Converter parameter is list of whitespace-separated expressions. Each expression indicates how to process corresponding (by index) collection. Last expression applies to all remaining collections.
 Syntax of expression is following:
 <list type="table"><listheader><term>Indicator</term><description>Meaning</description></listheader>
 <item><term><c>.</c></term><description>Include. Include the collection in result.</description></item>
 <item><term><c>![x]</c></term><description>If not. Include only if none of preceding collections was included.</description></item>
 <item><term><c>|[x]</c></term><description>If or. Include only if at least one preceding collections was included.</description></item>
 <item><term>&amp;[x]</term><description>If and. Include only if all preceding collections was included.</description></item>
 <item><term>^[x]</term><description>If xor. Include only if exactly one preceding collection was included.</description></item>
 <item><term><c>-</c></term><description>Not include. The collection is never included (unconditionally, the <c>#</c> is ignored.)</description></item>
 <item><term>Special prefix <c>#</c></term><description>Prepend to any expression to inlude the collection even if it is empty. When this prefix is used <c>.</c> is optional.</description></item>
 </list>
 <para><c>[x]</c> indicates optional number (integer > 0, written without the []) meaning number of preceding collections to be considered. All preceding collections are considered when ommited.</para>
 <para>
 Null, <see cref="T:System.DBNull"/> and  <see cref="F:DependencyProperty.UnsetValue" /> are never included.
 Empty collection is not included unless the <c>#</c> prefix is specified.
 </para>
 <para>If item is not collection it's wrappped to array of corresponding type.</para>
 <para>If only one collection is filtered out, it's returned without being wrapped in <see cref="T:System.Windows.Data.CompositeCollection"/>.</para>
 <para>This converter is one way. <see cref="M:System.Windows.Data.IMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)"/> returns only the value passed to it wrapped in array.</para>
 </remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CollectionCombiningConverter.Convert(System.Object[],System.String)">
 <summary>Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.</summary>
 <param name="values">
 The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.
 <para>Values are expected to be <see cref="T:System.Collections.IEnumerable"/>. Nulls, <see cref="T:System.DBNull">DBNulls</see> and <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> values are ignored. Non-<see cref="T:System.Collections.IEnumerable"/> values are wrapped to one-item arrays of corresponding type.</para>
 </param>
 <param name="parameter">The converter parameter to use. When null or empty string string "." is assumed. For details (synatx) see class documentation.</param>
 <exception cref="T:System.FormatException"><paramref name="parameter"/> seems to contain number of preceding collections to be considered, but the number cannot be parsed using <see cref="M:System.Int32.Parse(System.String)"/> (in <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>).</exception>
 <seelaso cref="T:Tools.SyntaxErrorException">Invalid character in expression.</seelaso>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CollectionCombiningConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.</summary>
 <param name="values">
 The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.
 <para>Values are expected to be <see cref="T:System.Collections.IEnumerable"/>. Nulls, <see cref="T:System.DBNull">DBNulls</see> and <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> values are ignored. Non-<see cref="T:System.Collections.IEnumerable"/> values are wrapped to one-item arrays of corresponding type.</para>
 </param>
 <param name="targetType">The type of the binding target property. Ignored if null. Target type should <see cref="M:System.Type.IsAssignableFrom(System.Type)">assignable from</see> <see cref="T:System.Collections.IEnumerable"/> otherwise <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used.</param>
 <param name="parameter">The converter parameter to use. When null or empty string string "." is assumed. Type is expected to be <see cref="T:System.String"/> otherwise <see cref="M:System.Object.ToString"/> is used.
 For details (syntax) see class documentation.</param>
 <param name="culture">Ignored.</param>
 <exception cref="T:System.InvalidCastException">Conversion must be performed for <paramref name="targetType"/> and it fails.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Conversion must be performed for target type, conversion operators are found but no one is most specific.</exception>
 <exception cref="T:System.FormatException"><paramref name="parameter"/> seems to contain number of preceding collections to be considered, but the number cannot be parsed using <see cref="M:System.Int32.Parse(System.String)"/> (in <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>).</exception>
 <seelaso cref="T:Tools.SyntaxErrorException">Invalid character in expression.</seelaso>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CollectionCombiningConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a binding target value to the source binding values.</summary>
 <returns><paramref name="value"/> wrapped in <see cref="T:System.Object"/> array.</returns>
 <param name="value">The value that the binding target produces.</param>
 <param name="targetTypes">Ignored.</param>
 <param name="parameter">Ignored.</param>
 <param name="culture">Ignored.</param>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.FirstNonEmptyConverter">
 <summary>Multi value converter that gets first non-null non-empty itemm from collection</summary>
 <remarks>This converter is primarily intended to seleft first non-null non-empty collection form list of collections.
 <para>This converter is one-way</para></remarks>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.FirstNonEmptyConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target. This implementation obtains first non-null, non-empty value form <paramref name="values"/>.</summary>
 <returns>
 First non-null non-empty item from <paramref name="values"/>.
 All items from <paramref name="values"/> which are null, <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> or represent empty array, <see cref="T:System.Collections.ICollection"/> or <see cref="T:System.Collections.IEnumerable"/> are ignored.
 First non-ignored value is returned.
 If there is non non-ignored value in the collection, <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> is returned.
 </returns>
 <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
 <param name="targetType">Ignored</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.FirstNonEmptyConverter.IMultiValueConverter_ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
 <summary>Returns given value as only item in object array</summary>
 <returns>Array containing one item - <paramref name="value"/>. If <paramref name="value"/> is null an ampty array is returned. The arrry is of type <see cref="T:System.Object"/>[].</returns>
 <param name="value">Value to be encapsulated in array</param>
 <param name="targetTypes">Ignored</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.MathOperationMultiConverter">
 <summary>Converter performing given arithmetical operation on collection members</summary>
 <remarks>This converter is one-way. This converter can behave both - as multi-value converter and as single value converter.</remarks>
 <version version="1.5.3" stage="Nightly">This class sis new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.MathOperationMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target. <para>Performs an arithmetic operation on given values.</para></summary>
 <param name="values">Operands. First value is used as base for the operation (left operand). Other values are used as right operands of operation chain. Null and <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> values are ignored.</param>
 <param name="targetType">The type of the binding target property. Ignored if null. <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used.</param>
 <param name="parameter">Indicates arithmetic operation - supported operations are +, -, *, /, ^, \, &amp;, ,  Should be of type <see cref="T:System.Char"/> or <see cref="T:System.String"/>, otherwise <see cref="M:System.Object.ToString"/> is used.
 <para>
 Special processing applies when this argument is <see cref="T:System.Array"/>: The array must have 2 or 3 items and 2nd item must be <see cref="T:System.Windows.Data.IValueConverter"/> otherwise it's not treated specially.
 1st item is used as if it was <paramref name="parameter"/>.
 2nd item is used as converter for value otherwise returned by this converter.
 3rd item is used (if present) as parameter for that converter.
 </para></param>
 <param name="culture">The culture to use in the converter. Ignored (but may be passed to output converter)</param>
 <returns>Result of an arithmetic operation. <see cref="F:System.Windows.Data.Binding.DoNothing" /> if all values in <paramref name="values"/> are ignored (or there are none). Null if <paramref name="values"/> is null.</returns>
 <remarks>Operations supported are:
 <list type="table"><listheader><term>Operation</term><description>Definition</description></listheader>
 <item><term>+</term><description>Plus (addition). Can perform string concatenation under certain circumstances (VB late-binding rules)</description></item>
 <item><term>-</term><description>Minus (subtraction)</description></item>
 <item><term>*</term><description>Multiplication</description></item>
 <item><term>/</term><description>Division (uses decimal places)</description></item>
 <item><term>^</term><description>Power</description></item>
 <item><term>\</term><description>Division (integral)</description></item>
 <item><term>&amp;</term><description>String concatenation</description></item>
 <item><term>%</term><description>Modulo (integral division remainder)</description></item>
 <item><term>,</term><description>Always returns 1st value</description></item>
 </list>
 All operations use Visual Basic late binding</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="parameter"/> does not represent supported arithmetic operation</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null</exception>
 <exception cref="T:System.InvalidCastException">Value cannot be casted for arithmetic operation or to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.OverflowException">Can occur during cast or during arithmetic operation</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">When converting return value to <paramref name="targetType"/>: Conversion operands found but no one is most specific.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.MathOperationMultiConverter.IMultiValueConverter_ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="value">ignored</param>
 <param name="targetTypes">ignored</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <returns>Never returns, always throws <see cref="T:System.NotSupportedException"/></returns>
 <exception cref="T:System.NotSupportedException">Always - this convertor is one-way</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.MathOperationMultiConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a single value</summary>
 <param name="value">Value to be converter. SHould be numeric value. Null and <see cref="F:System.Windows.DependencyProperty.UnsetValue"/> are ignored.</param>
 <param name="targetType">The type of the binding target property. Ignored if null. <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used.</param>
 <param name="parameter"><list type="bullet">
 <item>Either <see cref="T:System.Array"/> containing operator at index 0 and optionally other operands at indexes 1+</item>
 <item>Or <see cref="T:System.String"/> where 1st character is operator and rest is either <see cref="T:System.Int32"/> or <see cref="T:System.Double"/> number. It it can be parsed neither as <see cref="T:System.Int32"/> nor as <see cref="T:System.Double"/> it's passed to the operation as string.</item>
 </list></param>
 <param name="culture">Culture - used in string-number parsing</param>
 <returns>Converted value</returns>
 <remarks>See overloaded method <see cref="M:Tools.WindowsT.WPF.ConvertersT.MathOperationMultiConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> for details.</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="parameter"/> does not supply supported arithmetic operation</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null</exception>
 <exception cref="T:System.InvalidCastException">Value cannot be casted for arithmetic operation or to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.OverflowException">Can occur during cast or during arithmetic operation</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">When converting return value to <paramref name="targetType"/>: Conversion operands found but no one is most specific.</exception>
 <version version="1.5.4">Fix: Didn't work with parameter containing decimal point</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.MathOperationMultiConverter.IValueConverter_ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="value">ignored</param>
 <param name="targetType">ignored</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <returns>Never returns, always throws <see cref="T:System.NotSupportedException"/></returns>
 <exception cref="T:System.NotSupportedException">Always - this convertor is one-way</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.StringFormatMultiConverter">
 <summary>Multivalue converter that converts passes given values to <see cref="T:System.String"/></summary>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StringFormatMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts source values to a value for the binding target. This implementation passes given value to <see cref="T:System.String"/> with given formatting string.</summary>
 <returns>A converted value. <see cref="T:System.String"/> by default. Resturn value is result of <see cref="T:System.String"/>(<paramref name="culture"/>, <paramref name="parameter"/>, <paramref name="values"/>) call.</returns>
 <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion. When null an empty array is used isntead.</param>
 <param name="targetType">The type of the binding target property. Ignored if null. If this type is not <see cref="M:System.Type.IsAssignableFrom(System.Type)">assignable from</see> <see cref="T:System.String"/> <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used.</param>
 <param name="parameter">The converter parameter to use. This must represent valid formatting string for <see cref="T:System.String"/>. If type of this argument is not <see cref="T:System.String"/>, <see cref="M:System.Object.ToString"/> is used. Null is treated as an empty string.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:System.FormatException"><paramref name="parameter"/> represents an invalid format. -or- The index of a format item is less than zero, or greater than or equal to the length of the args array.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StringFormatMultiConverter.IMultiValueConverter_ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
 <summary>Always throws <see cref="T:System.NotSupportedException"/> - this is one way converter.</summary>
 <returns>Never returns - always throws <see cref="T:System.NotSupportedException"/>.</returns>
 <param name="value">Ignored</param>
 <param name="targetTypes">Ignored</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <exception cref="T:System.NotSupportedException">Always. This converter is one-way.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.BinaryOperationConverter">
 <summary>A converter that can invoke any binary operation</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.BinaryOperationConverter.Operation">
 <summary>Gets or sets the operator to be used</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not one of <see cref="T:Tools.ReflectionT.Operators"/> values</exception>
 <exception cref="T:System.ArgumentException">Value being set is <see cref="F:Tools.ReflectionT.Operators.no"/></exception>
 <exception cref="T:System.NotSupportedException">Value being set represents assignment operator. -or- Value being set represents operator that is not binary.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BinaryOperationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:System.InvalidCastException">
 <paramref name="targetType"/> is not null and return value cannot be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically casted</see> to <paramref name="targetType"/>. -or-
 Operator accepting <paramref name="value"/> and <paramref name="parameter"/> cannot be found and <paramref name="parameter"/> cannot be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically casted</see> to same type as <paramref name="value"/>.
 </exception>
 <exception cref="T:System.OverflowException">Error when invoking <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> for conversion to <paramref name="targetType"/> or whan converting <paramref name="parameter"/> to same type as <paramref name="value"/>. (same conditions as for <see cref="T:System.InvalidCastException"/>, but conversion operator is found and fails).</exception>
 <exception cref="T:System.MissingMethodException">Cannot find binary operator</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BinaryOperationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="targetType">The type to convert to.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:System.InvalidCastException">
 <paramref name="targetType"/> is not null and return value cannot be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically casted</see> to <paramref name="targetType"/>. -or-
 Operator accepting <paramref name="value"/> and <paramref name="parameter"/> cannot be found and <paramref name="parameter"/> cannot be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically casted</see> to same type as <paramref name="value"/>.
 </exception>
 <exception cref="T:System.OverflowException">Error when invoking <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> for conversion to <paramref name="targetType"/> or whan converting <paramref name="parameter"/> to same type as <paramref name="value"/>. (same conditions as for <see cref="T:System.InvalidCastException"/>, but conversion operator is found and fails).</exception>
 <exception cref="T:System.MissingMethodException">Cannot find binary operator</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BinaryOperationConverter.Do(System.Object,System.Type,System.Object,System.Globalization.CultureInfo,Tools.ReflectionT.Operators)">
 <summary>Internally converts a value. </summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <param name="operation">Operator to be used</param>
 <exception cref="T:System.InvalidCastException">
 <paramref name="targetType"/> is not null and return value cannot be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically casted</see> to <paramref name="targetType"/>. -or-
 Operator accepting <paramref name="value"/> and <paramref name="parameter"/> cannot be found and <paramref name="parameter"/> cannot be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically casted</see> to same type as <paramref name="value"/>.
 </exception>
 <exception cref="T:System.OverflowException">Error when invoking <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> for conversion to <paramref name="targetType"/> or whan converting <paramref name="parameter"/> to same type as <paramref name="value"/>. (same conditions as for <see cref="T:System.InvalidCastException"/>, but conversion operator is found and fails).</exception>
 <exception cref="T:System.MissingMethodException">Cannot find binary operator</exception>
 <remarks><note type="inheritinfo">When doing your own operator lookup logic in derived class, consider caching ope operator lookup. This implementation does per-instance caching.</note></remarks>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BinaryOperationConverter.opCache">
 <summary>Used to cache results of operator resolution</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter">
 <summary>Base class for rounding converters</summary>
 <remarks>
 See documentation of the <see cref="M:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter.Convert(System.Decimal,System.Int32)"/> function and documentation of derived classes.
 <para>This converter is intended to be one-way, however when <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called it returns the same value as passed to onversion method.</para>
 </remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <param name="value">
 The value produced by the binding source.
 Supported types are: <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>.
 <see cref="T:System.String"/> is converted to <see cref="T:System.Double"/> using <see cref="M:System.Double.Parse(System.String)"/>.
 <see cref="T:System.IConvertible"/> is converted to <see cref="T:System.Double"/> using <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/>.
 Values of other type are <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically casted</see> to <see cref="T:System.Double"/>.
 </param>
 <param name="targetType">The type of the binding target property. Ignored if null. If <paramref name="targetType"/> is not same as type of <paramref name="value"/> (after conversion), <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used to convert return value to <paramref name="targetType"/>.</param>
 <param name="parameter">
 The converter parameter to use. See documentation of derived class if it uses parameter.
 Parameter should be of type <see cref="T:System.Int32"/>. Null defaults to 0. <see cref="T:System.String"/> is converted using <see cref="M:System.Int32.Parse(System.String)"/> (with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>). <see cref="T:System.IConvertible"/> is converted using <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/> (with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>). Values of other types are converted using <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/>.
 If derived class supports parameter the meaning of the parameter is number of decimal places.
 </param>
 <param name="culture">The culture to use in the converter. Used only when <paramref name="value"/> is <see cref="T:System.String"/> or another <see cref="T:System.IConvertible"/>.</param>
 <returns>A converted value. Null if <paramref name="value"/> is null. If <paramref name="value"/> is one of directly supported types (<see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Decimal"/>) default return type is same as type of <paramref name="value"/>. Otherwise default return type is <see cref="T:System.Double"/>. If <paramref name="targetType"/> is specified return value is converted to that type using <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/>.</returns>
 <exception cref="T:System.InvalidCastException">A dynamic conversion failed. See <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/>.</exception>
 <exception cref="T:System.Diagnostics.OverflowAction">Numeric falue conversion failed</exception>
 <exception cref="M:Tools.ExtensionsT.StringExtensions.Format(System.String,System.IFormatProvider,System.Object[])">Attempt to convert string to number failed.</exception>
 <seelaso cref="T:System.Reflection.AmbiguousMatchException">Conversion operators were found but no one is most spcecific.</seelaso>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value back.</summary>
 <returns>A converted value. If the method returns null, the valid null value is used. This impleementation returns <paramref name="value"/>. When <paramref name="targetType"/> is specified <paramref name="value"/> is converted to <paramref name="targetType"/> using <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/>.</returns>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="targetType">The type to convert to.</param>
 <param name="parameter">Ignored.</param>
 <param name="culture">Ignored.</param>
 <exception cref="T:System.InvalidCastException"><see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> failed.</exception>
 <exception cref="T:System.OverflowException">Overflow when converting numeric values.</exception>
 <exception cref="T:System.FormatException">Error during conversion</exception>
 <seelaso cref="T:System.Reflection.AmbiguousMatchException">Conversion operators were found but no one is most spcecific.</seelaso>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter.Convert(System.Single,System.Int32)">
 <summary>When overriden in derived class converts a value of type <see cref="T:System.Single"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Conversion parameter. Number of decimal places if derived class supports the parameter; ignored otherwise.</param>
 <remarks>A converted value</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter.Convert(System.Double,System.Int32)">
 <summary>When overriden in derived class converts a value of type <see cref="T:System.Double"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Conversion parameter. Number of decimal places if derived class supports the parameter; ignored otherwise.</param>
 <remarks>A converted value</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter.Convert(System.Decimal,System.Int32)">
 <summary>When overriden in derived class converts a value of type <see cref="T:System.Decimal"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Conversion parameter. Number of decimal places if derived class supports the parameter; ignored otherwise.</param>
 <remarks>A converted value</remarks>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.FloorConverter">
 <summary>Converter which performs the <see cref="M:System.Math.Floor(System.Decimal)"/> operation (gets integral part of number)</summary>
 <remarks>This <see cref="T:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter"/>-derived class does not support parameter.</remarks>
 <seelaso cref="M:System.Math.Floor(System.Decimal)"/>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.FloorConverter.Convert(System.Decimal,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Single"/> using <see cref="M:System.Math.Floor(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Ignored (not supported).</param>
 <remarks>A converted value - integral part of <paramref name="value"/>.</remarks>
 <seelaso cref="M:System.Math.Floor(System.Decimal)"/>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.FloorConverter.Convert(System.Double,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Double"/> using <see cref="M:System.Math.Floor(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Ignored (not supported).</param>
 <remarks>A converted value - integral part of <paramref name="value"/>.</remarks>
 <seelaso cref="M:System.Math.Floor(System.Decimal)"/>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.FloorConverter.Convert(System.Single,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Decimal"/> using <see cref="M:System.Math.Floor(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Ignored (not supported).</param>
 <remarks>A converted value - integral part of <paramref name="value"/>.</remarks>
 <seelaso cref="M:System.Math.Floor(System.Decimal)"/>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.CeilingConverter">
 <summary>Converter which performs the <see cref="M:System.Math.Ceiling(System.Decimal)"/> operation (gets smallest integer value greater or equal to given value)</summary>
 <remarks>This <see cref="T:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter"/>-derived class does not support parameter.</remarks>
 <seelaso cref="M:System.Math.Ceiling(System.Decimal)"/>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CeilingConverter.Convert(System.Decimal,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Single"/> using <see cref="M:System.Math.Ceiling(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Ignored (not supported).</param>
 <remarks>A converted value - lowest inegral number greater than or equal to <paramref name="value"/>.</remarks>
 <seelaso cref="M:System.Math.Ceiling(System.Decimal)"/>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CeilingConverter.Convert(System.Double,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Double"/> using <see cref="M:System.Math.Ceiling(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Ignored (not supported).</param>
 <remarks>A converted value - lowest inegral number greater than or equal to <paramref name="value"/>.</remarks>
 <seelaso cref="M:System.Math.Ceiling(System.Decimal)"/>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CeilingConverter.Convert(System.Single,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Decimal"/> using <see cref="M:System.Math.Ceiling(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Ignored (not supported).</param>
 <remarks>A converted value - lowest inegral number greater than or equal to <paramref name="value"/>.</remarks>
 <seelaso cref="M:System.Math.Ceiling(System.Decimal)"/>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.RoundToEvenConverter">
 <summary>Converter which performs the <see cref="M:System.Math.Round(System.Decimal)"/> operation - rounding midpoint numbers to even</summary>
 <remarks>This <see cref="T:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter"/>-derived class supports parameter (number of decimal places).</remarks>
 <seelaso cref="M:System.Math.Round(System.Decimal)"/><seelaso cref="F:System.MidpointRounding.ToEven"/>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.RoundToEvenConverter.Convert(System.Decimal,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Decimal"/> using <see cref="M:System.Math.Round(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Number of decimal places</param>
 <remarks>A converted value - <paramref name="value"/> rounded to given number of decimal places. Midpoint rounds to even.</remarks>
 <seelaso cref="M:System.Math.Round(System.Decimal)"/><seelaso cref="F:System.MidpointRounding.ToEven"/>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.RoundToEvenConverter.Convert(System.Double,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Double"/> using <see cref="M:System.Math.Round(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Number of decimal places</param>
 <remarks>A converted value - <paramref name="value"/> rounded to given number of decimal places. Midpoint rounds to even.</remarks>
 <seelaso cref="M:System.Math.Round(System.Decimal)"/><seelaso cref="F:System.MidpointRounding.ToEven"/>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.RoundToEvenConverter.Convert(System.Single,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Single"/> using <see cref="M:System.Math.Round(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Number of decimal places</param>
 <remarks>A converted value - <paramref name="value"/> rounded to given number of decimal places. Midpoint rounds to even.</remarks>
 <seelaso cref="M:System.Math.Round(System.Decimal)"/><seelaso cref="F:System.MidpointRounding.ToEven"/>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.RoundAwayFromZeroConverter">
 <summary>Converter which performs the <see cref="M:System.Math.Round(System.Decimal)"/> operation - rounding midpoint numbers away from zero</summary>
 <remarks>This <see cref="T:Tools.WindowsT.WPF.ConvertersT.BaseRoundingConverter"/>-derived class supports parameter (number of decimal places).</remarks>
 <seelaso cref="M:System.Math.Round(System.Decimal)"/><seelaso cref="F:System.MidpointRounding.AwayFromZero"/>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.RoundAwayFromZeroConverter.Convert(System.Decimal,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Decimal"/> using <see cref="M:System.Math.Round(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Number of decimal places</param>
 <remarks>A converted value - <paramref name="value"/> rounded to given number of decimal places. Midpoint rounds away from zero.</remarks>
 <seelaso cref="M:System.Math.Round(System.Decimal)"/><seelaso cref="F:System.MidpointRounding.AwayFromZero"/>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.RoundAwayFromZeroConverter.Convert(System.Double,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Double"/> using <see cref="M:System.Math.Round(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Number of decimal places</param>
 <remarks>A converted value - <paramref name="value"/> rounded to given number of decimal places. Midpoint rounds away from zero.</remarks>
 <seelaso cref="M:System.Math.Round(System.Decimal)"/><seelaso cref="F:System.MidpointRounding.AwayFromZero"/>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.RoundAwayFromZeroConverter.Convert(System.Single,System.Int32)">
 <summary>Converts a value of type <see cref="T:System.Single"/> using <see cref="M:System.Math.Round(System.Decimal)"/>.</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">Number of decimal places</param>
 <remarks>A converted value - <paramref name="value"/> rounded to given number of decimal places. Midpoint rounds away from zero.</remarks>
 <seelaso cref="M:System.Math.Round(System.Decimal)"/><seelaso cref="F:System.MidpointRounding.AwayFromZero"/>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter">
 <summary>Converter to convert <see cref="T:System.Boolean"/> values to <see cref="T:System.Char"/>. It also supports null values instead of booleand and <see cref="T:System.String"/> isntead of <see cref="T:System.Char"/>.</summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter.DefaultParameter">
 <summary>Default value used for parameter of <see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter"/> when null is supplied</summary>
 <remarks><see cref="T:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter"/> parameter consists of 3 comma-separated strings each containing characters representing one nullable boolean value: 1st - True (checked), 2nd - False (unchecked), 3rd - unknow/null (intermediate).
 If you are sure any value is never used, you cann ommit (leave empty) appropriate part of parameter. First character in each group is considered default.
 There is no way to escape comma to pecify it as one of characters.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts value of type <see cref="T:System.Boolean"/> or <see cref="T:System.Nullable`1"/>[<see cref="T:System.Boolean"/>] to <see cref="T:System.Char"/> or <see cref="T:System.String"/>.</summary>
 <param name="value">Value to be converted. It shall be <see cref="T:System.Boolean"/> value or null</param>
 <param name="targetType">Type to convert value to. It shall be <see cref="T:System.Char"/>, <see cref="T:System.String"/> or <see cref="T:System.Nullable`1"/>[<see cref="T:System.Char"/>] or type <see cref="M:System.Type.IsAssignableFrom(System.Type)">assignable</see> from that.</param>
 <param name="parameter">Either null or string containing 3 comma-separated strings defining characters used fot true, false and unknown values. See <see cref="F:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter.DefaultParameter"/> for details.</param>
 <param name="culture">Ignored</param>
 <returns>One of default characters (first character of group) specified in <paramref name="parameter"/> or <see cref="F:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter.DefaultParameter"/> depending on <see cref="T:System.Boolean"/> value <paramref name="value"/>. Return type depends on requested <paramref name="targetType"/>.</returns>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="parameter"/> is neither null nor <see cref="T:System.String"/>. -or- <paramref name="value"/> is neither <see cref="T:System.Boolean"/> nor null nor <see cref="T:System.Nullable`1"/>[<see cref="T:System.Boolean"/>].</exception>
 <exception cref="T:System.ArgumentException"><paramref name="parameter"/> does not contain at least one character for group requested by <paramref name="value"/> or does not contain the group at ll.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="targetType"/> is neither <see cref="T:System.Char"/> nor <see cref="T:System.String"/> nor <see cref="T:System.Nullable`1"/>[<see cref="T:System.Char"/>] nor <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable</see> froma ny of them.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts value of type <see cref="T:System.Char"/> or <see cref="T:System.String"/> bact to type <see cref="T:System.Boolean"/>.</summary>
 <param name="value">Value to be converted. It shall be null, <see cref="T:System.Char"/> or <see cref="T:System.String"/>. In case <paramref name="value"/> is <see cref="T:System.String"/> it shall be non-empty and only firts character is taken from it.</param>
 <param name="targetType">Requested return type. It shall be <see cref="T:System.Boolean"/> or <see cref="T:System.Nullable`1"/>[<see cref="T:System.Boolean"/>] or type assignable from it. When <paramref name="targetType"/> is <see cref="T:System.Boolean"/> this method still can return null if character for intermediate state is passed to <paramref name="value"/>.</param>
 <param name="parameter">Either null or string containing 3 comma-separated strings defining characters used fot true, false and unknown values. See <see cref="F:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter.DefaultParameter"/> for details.</param>
 <param name="culture">Ignored</param>
 <returns>True, False or null depending on which of comma-separated groups in <paramref name="parameter"/> or <see cref="F:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter.DefaultParameter"/> <paramref name="value"/> (or first character from <paramref name="value"/> when it is <see cref="T:System.String"/>) falls into.</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="targetType"/> is neither <see cref="T:System.Boolean"/> nor <see cref="T:System.Nullable`1"/>[<see cref="T:System.Boolean"/>] nor type <see cref="M:System.Type.IsAssignableFrom(System.Type)">assignable</see> from it.</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither null nor <see cref="T:System.Char"/> nor <see cref="T:System.String"/>. -or- <paramref name="parameter"/> is neither null nor <see cref="T:System.String"/>.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> none of characters specified in <paramref name="parameter"/> (or <see cref="F:Tools.WindowsT.WPF.ConvertersT.BooleanToCharConverter.DefaultParameter"/> in case <paramref name="parameter"/> is null) except comas.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.BooleanVisibilityConverter">
 <summary>Converter tha converts <see cref="T:System.Boolean"/> to <see cref="T:System.Windows.Visibility"/></summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BooleanVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">The converter parameter to use. If string "!" converter negates <paramref name="value"/> first.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not <see cref="T:System.Boolean"/> or <paramref name="targetType"/> is not <see cref="T:System.Windows.Visibility"/> or one of its base types.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.BooleanVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="targetType">The type to convert to.</param>
 <param name="parameter">The converter parameter to use. If string "!" converter negates return value.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is  neither <see cref="F:System.Windows.Visibility.Collapsed"/> nor <see cref="F:System.Windows.Visibility.Visible"/></exception> 
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not <see cref="T:System.Windows.Visibility"/> or <paramref name="targetType"/> is not <see cref="T:System.Boolean"/> or one of its base types.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.CachedImageConverter">
 <summary>Implements <see cref="T:System.Windows.Data.IValueConverter"/> that converts URI (path) to cached <see cref="T:System.Windows.Media.Imaging.BitmapImage"/></summary>
 <remarks>Use this converter to avoid images to be locked by <see cref="T:System.Windows.Controls.Image"/> control.</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CachedImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value - <see cref="T:System.Windows.Media.Imaging.BitmapImage"/></returns>
 <param name="value">The value produced by the binding source. It must be either <see cref="T:System.String"/>, <see cref="T:System.Uri"/> or <see cref="T:Tools.IOt.Path"/>.</param>
 <param name="targetType">The type of the binding target property. It must <see cref="M:System.Type.IsAssignableFrom(System.Type)">be assignable from</see> <see cref="T:System.Windows.Media.Imaging.BitmapImage"/>.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CachedImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value back.</summary>
 <returns>A converted value - URI of <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> passed in value <paramref name="value"/>. Type depends on <paramref name="targetType"/>.</returns>
 <param name="value">The value that is produced by the binding target. It must be <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.</param>
 <param name="targetType">The type to convert to. It must <see cref="M:System.Type.IsAssignableFrom(System.Type)">be assignable from</see> either <see cref="T:System.String"/>, <see cref="T:System.Uri"/> or <see cref="T:Tools.IOt.Path"/>. </param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.CheckStateConverter">
 <summary>Converter that converts <see cref="T:System.Windows.Forms.CheckState"/> to <see cref="T:System.Nullable`1"/>[<see cref="T:System.Boolean"/>]</summary>
 <version version="1.5.2" stage="Alpha">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CheckStateConverter.Convert(System.Windows.Forms.CheckState,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <returns>A converted value.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CheckStateConverter.ConvertBack(System.Nullable{System.Boolean},System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.ConcatConverter">
 <summary>Converter that converts <see cref="T:System.Collections.IEnumerable"/> to comma-seperated list (or another seperator can be chosen)</summary>
 <remarks>This converter is designed as one-way, howver <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is implemented.</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ConcatConverter.PropertyName">
 <summary>Gets or sets name of property of item in collection to caoncat value got from. If null (default) entire object is used.</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.ConcatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts value</summary>
 <param name="value">Value to be converted. Shall be null or <see cref="T:System.Collections.IEnumerable"/></param>
 <param name="targetType">Ignored. This method always returns null or <see cref="T:System.String"/></param>
 <param name="parameter">Any objects which string representation will be used as item seperator. If null ', ' is used.</param>
 <param name="culture">Ignored</param>
 <returns>Stirng representations of objects obrained form <see cref="T:System.Collections.IEnumerable"/> <paramref name="value"/> concatenated to string using <paramref name="parameter"/> (or ', ' if parameter is null).</returns>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither null nor <see cref="T:System.Collections.IEnumerable"/>.</exception>
 <exception cref="T:System.MissingMemberException">Property name is specified in <paramref name="parameter"/>, but there is no such property or field on item in <paramref name="value"/> collection.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Property name is specified in <paramref name="parameter"/> and the property is overloaded</exception>
 <exception cref="T:System.Reflection.TargetParameterCountException">Property name is specified in <paramref name="parameter"/> and property is indexed</exception>
 <exception cref="T:System.MethodAccessException">Property name is specified in <paramref name="parameter"/> and property getter is not public</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Property name is specified in <paramref name="parameter"/> and an error occurred while retrieving the property value. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.ConcatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts value back from concateenated list to string array</summary>
 <param name="value">Value to be converted. It shall be <see cref="T:System.String"/> or null.</param>
 <param name="targetType">Ignored. This method always returns <see cref="T:System.String"/> array</param>
 <param name="parameter">Any objects which string representation will be used as item seperator. If null ', ' is used.</param>
 <param name="culture">Ignored.</param>
 <returns><paramref name="value"/> <see cref="T:System.String">splitted</see> using <paramref name="parameter"/> (', ' if <paramref name="parameter"/> is null)</returns>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither null nor <see cref="T:System.String"/></exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.CompareConverter">
 <summary>Converter that test if value being converter equals to parameter</summary>
 <remarks>This converter is intended as is one-way. This converter used <see cref="M:System.Object.Equals(System.Object)"/>.</remarks>
 <seelaso cref="M:System.Object.Equals(System.Object)"/>
 <version version="1.5.3" stage="Nightly">This converter is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CompareConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. If <paramref name="value"/> is null or <paramref name="parameter"/> is null, returns null. Otherwise returns boolean value indicating if <paramref name="value"/> equals to <paramref name="parameter"/> using <see cref="M:System.Object.Equals(System.Object)"/>.</returns>
 <param name="value">The value produced by the binding source. Thsi value will be compared for equality with <paramref name="parameter"/>.</param>
 <param name="targetType">Ignored. Always returns null or <see cref="T:System.Boolean"/></param>
 <param name="parameter">Value to compare <paramref name="value"/> with.</param>
 <param name="culture">Ignored.</param>
 <remarks>No type conversion is performed on <paramref name="value"/> and <paramref name="parameter"/> arguments.
 Simply <c><paramref name="value"/>.<see cref="M:System.Object.Equals(System.Object)">Equals</see>(<paramref name="parameter"/>)</c> is called.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CompareConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>If <paramref name="value"/> is true returns <paramref name="parameter"/>; otherwise throws an exception</returns>
 <param name="value">Value to be converted</param>
 <param name="targetType">ignored</param>
 <param name="parameter">Value this converter compares values to</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not true</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.EnumInConverter">
 <summary>Converter used to test if enumerated value is one of given values</summary>
 <remarks>For normal enumerations checks exact value, for flags enumerations tests flass in addition.</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.EnumInConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>A converted value. True when <paramref name="value"/> is one of values given in <paramref name="parameter"/>; false otherwise. When <paramref name="targetType"/> is <see cref="T:System.Windows.Visibility"/> returns either <see cref="F:System.Windows.Visibility.Visible"/> or <see cref="F:System.Windows.Visibility.Hidden"/>.</returns>
 <param name="value">The value produced by the binding source. Value must be of type <see cref="T:System.Enum"/> or null.</param>
 <param name="targetType">The type of the binding target property. It must be <see cref="T:System.Boolean"/>, <see cref="T:System.Windows.Visibility"/> or <see cref="T:System.Nullable`1"/> of that type.</param>
 <param name="parameter">The converter parameter to use. String. Comma-seperated list of value to test <paramref name="value"/> for.</param>
 <param name="culture">The culture to use in the converter. Ignored.</param>
 <exception cref="T:System.ArgumentException"><paramref name="targetType"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> neither from <see cref="T:System.Boolean"/>, <see cref="T:System.Windows.Visibility"/> nor from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> or <see cref="T:System.Windows.Visibility"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="parameter"/> is not <see cref="T:System.String"/></exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.EnumInConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Throws a <see cref="T:System.NotSupportedException"/></summary>
 <returns>Never returns. This function always throws a <see cref="T:System.NotSupportedException"/>.</returns>
 <param name="value">Ignored.</param>
 <param name="targetType">Ignored.</param>
 <param name="parameter">Ignored.</param>
 <param name="culture">Ignored.</param>
 <exception cref="T:System.NotSupportedException">This function always throws a <see cref="T:System.NotSupportedException"/>, because <see cref="T:Tools.WindowsT.WPF.ConvertersT.EnumInConverter"/> does not support backward conversion.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.FileNameConverter">
 <summary>Converter that gets file name part of path</summary>
 <remarks>This converter is one-way.</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.FileNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>File name part of path given in <paramref name="parameter"/>. Uses <see cref="M:System.IO.Path.GetFileName(System.String)"/>. When <paramref name="value"/> is null returns null.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">Ignored. Returns null. or <see cref="T:System.String"/></param>
 <param name="parameter">ignored.</param>
 <param name="culture">ignored.</param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither <see cref="T:System.String"/> nor null</exception>
 <remarks>Uses <see cref="M:System.IO.Path.Combine(System.String,System.String)"/></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.FileNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>Never returns, always throws <see cref="T:System.NotSupportedException"/>.</returns>
 <param name="value">ignored</param>
 <param name="targetType">ignored</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException">Always thrown</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.Convert">
 <summary>Delegate that represents <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> and <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> functions</summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <version version="1.5.3">This delegate is new in version 1.5.3</version>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.FunctionConverter">
 <summary>Converter that performs conversion by calling any function</summary>
 <remarks>
 This is general purpose implementation of <see cref="T:System.Windows.Data.IValueConverter"/> which's goal is to simplify creation of WPF converters by not needing to have class for each simple convertor. Using this class it is possible to just implement 2 (or one forn one-way) functions for each convertors.
 <para>Alternativly convertor can be delegate-powerd. But delegates cannot be AFAIK set in XAML.</para>
 </remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.FunctionConverter._Type">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.FunctionConverter._Function">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Function"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.FunctionConverter._FunctionBack">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.FunctionBack"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.FunctionConverter._Delegate">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Delegate"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.FunctionConverter._DelegateBack">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.DelegateBack"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type">
 <summary>Gets or sets type function to be called is defined in.</summary>
 <value>Type <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Function"/> and <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.FunctionBack"/> is defined in.</value>
 <remarks>Ignored for particular conversion direction if <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Delegate"/> or <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.DelegateBack"/> is set</remarks>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Function">
 <summary>Name of public statis function in type <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/> to be called when <see cref="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called.</summary>
 <value>Function called when <see cref="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called. Ignored when <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Delegate"/> is set.</value>
 <remarks>The function must have same signature as the <see cref="T:Tools.WindowsT.WPF.ConvertersT.Convert"/> delegate.
 <para>Setting this property cause <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Delegate"/> to be set to null.</para></remarks>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.FunctionBack">
 <summary>Name of public statis function in type <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/> to be called when <see cref="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called.</summary>
 <value>Function called when <see cref="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called. Ignored when <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.DelegateBack"/> is set.</value>
 <remarks>The function must have same signature as the <see cref="T:Tools.WindowsT.WPF.ConvertersT.Convert"/> delegate.
 <para>Setting this property cause <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.DelegateBack"/> to be set to null.</para></remarks>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.TypeName">
 <summary>Gets or sets value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/> property using type <see cref="P:System.Type.AssemblyQualifiedName">assembly qualified name</see>.</summary>
 <returns><see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/>.<see cref="P:System.Type.AssemblyQualifiedName">AssemblyQualifiedName</see></returns>
 <value>Sets value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/> property by requesting type using <see cref="M:System.Object.GetType"/>.</value>
 <exception cref="T:System.Reflection.TargetInvocationException">A class initializer is invoked and throws an exception.</exception>
 <exception cref="T:System.ArgumentException">Value being set is a pointer, passed by reference, or is a generic class with a <see cref="T:System.Void" /> as its type parameter.</exception>
 <exception cref="T:System.TypeLoadException">Value being set is invalid.  -or- Value being set is an empty string.  -or- Value being set represents an array of <see cref="T:System.TypedReference" />.</exception>
 <exception cref="T:System.IO.FileNotFoundException">The assembly or one of its dependencies was not found.</exception>
 <exception cref="T:System.IO.FileLoadException">The assembly or one of its dependencies was found, but could not be loaded.</exception>
 <exception cref="T:System.BadImageFormatException">The assembly or one of its dependencies is not valid. -or- Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Delegate">
 <summary>Delegate to be called when <see cref="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called</summary>
 <value>Delegate called when <see cref="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called</value>
 <remarks>Setting this property causes <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Function"/> to be set to null.</remarks>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.DelegateBack">
 <summary>Delegate to be called when <see cref="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called</summary>
 <value>Delegate called when <see cref="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called</value>
 <remarks>Setting this property causes <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.FunctionBack"/> to be set to null.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <remarks>If <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Delegate"/> is not null, this function calls <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Delegate"/>; otherwise function attempts to call the <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Function"/> function in type <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/>.</remarks>
 <exception cref="T:System.InvalidOperationException">Both <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Delegate"/> and <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Function"/> are null. -or- <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Delegate"/> is null and <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/> is null.</exception> 
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the name <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Function"/> and matching the specified binding constraints (<see cref="T:Tools.WindowsT.WPF.ConvertersT.Convert"/> delegate signature).</exception>
 <exception cref="T:System.ArgumentException">Parameters of this method do not match the signature of the method <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Function"/>.</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">The invoked method throws an exception.</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to execute the method.</exception>
 <exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="targetType">The type to convert to.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <remarks>If <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.DelegateBack"/> is not null, this function calls <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.DelegateBack"/>; otherwise function attempts to call the <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.FunctionBack"/> function in type <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/>.</remarks>
 <exception cref="T:System.InvalidOperationException">Both <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.DelegateBack"/> and <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.FunctionBack"/> are null. -or- <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.DelegateBack"/> is null and <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.Type"/> is null.</exception> 
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one method is found with the name <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.FunctionBack"/> and matching the specified binding constraints (<see cref="T:Tools.WindowsT.WPF.ConvertersT.Convert"/> delegate signature).</exception>
 <exception cref="T:System.ArgumentException">Parameters of this method do not match the signature of the method <see cref="P:Tools.WindowsT.WPF.ConvertersT.FunctionConverter.FunctionBack"/>.</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">The invoked method throws an exception.</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to execute the method.</exception>
 <exception cref="T:System.InvalidOperationException">The type that declares the method is an open generic type.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.HalfConverter">
 <summary>Implements <see cref="T:System.Windows.Data.IValueConverter"/> for converting numeric values to halfs of them</summary>
 <remarks>
 Supported input types are: <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>,
 <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.TimeSpan"/>, <see cref="T:Tools.TimeSpanFormattable"/>,
 <see cref="T:System.Numerics.BigInteger"/>, <see cref="T:System.Numerics.Complex"/>, <see cref="T:Tools.NumericsT.SRational"/>, <see cref="T:Tools.NumericsT.URational"/>, <see cref="T:System.Enum"/>.
 <para>Return value is generated from result of arithmetical operation using <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/>. When requested target type is <see cref="T:System.Nullable`1"/> conversion to underlying type is done.</para>
 </remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.3">Reworked to support any target type and more source types. Also allows value and target type to be null.</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.HalfConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>A converted value. <paramref name="value"/> / 2. Null when <paramref name="value"/> is null.</returns>
 <param name="value">The value produced by the binding source. Must be one of supported types.</param>
 <param name="targetType">The type of the binding target property. Ignored when null.</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException">Type of <paramref name="value"/> is not supported.</exception>
 <exception cref="T:System.InvalidCastException">Error converting result to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.OverflowException">Error during arithmetic operation or conversion of return value to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">No conversion operator for convertiong return value to <paramref name="targetType"/> is most specific.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.HalfConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>A converted value. <paramref name="value"/> * 2. Null when <paramref name="value"/> is null.</returns>
 <param name="value">The value produced by the binding source. Must be one of supported types.</param>
 <param name="targetType">The type of the binding target property. Ignored when null.</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException">Type of <paramref name="value"/> is not supported.</exception>
 <exception cref="T:System.InvalidCastException">Error converting result to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.OverflowException">Error during arithmetic operation or conversion of return value to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">No conversion operator for convertiong return value to <paramref name="targetType"/> is most specific.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.HorizontalTextAlingConverter">
 <summary>Converter that can convert between <see cref="T:System.Windows.HorizontalAlignment"/> and <see cref="T:System.Windows.VerticalAlignment"/></summary>
 <remarks>Conversion can be done in both was equivalently.</remarks>
 <version stage="Alpha" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.HorizontalTextAlingConverter.Convert(System.Windows.HorizontalAlignment)">
 <summary>Converts <see cref="T:System.Windows.HorizontalAlignment"/> to <see cref="T:System.Windows.TextAlignment"/></summary>
 <param name="a">A <see cref="T:System.Windows.HorizontalAlignment"/></param>
 <returns><see cref="T:System.Windows.TextAlignment"/> with logically coresponding value to <paramref name="a"/></returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.HorizontalTextAlingConverter.Convert(System.Windows.TextAlignment)">
 <summary>Converts <see cref="T:System.Windows.TextAlignment"/> to <see cref="T:System.Windows.HorizontalAlignment"/></summary>
 <param name="a">A <see cref="T:System.Windows.TextAlignment"/></param>
 <returns><see cref="T:System.Windows.HorizontalAlignment"/> with logically coresponding value to <paramref name="a"/></returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.HorizontalTextAlingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts either <see cref="T:System.Windows.TextAlignment"/> to <see cref="T:System.Windows.HorizontalAlignment"/> or <see cref="T:System.Windows.HorizontalAlignment"/> to <see cref="T:System.Windows.TextAlignment"/></summary>
 <param name="value">Either <see cref="T:System.Windows.TextAlignment"/> or <see cref="T:System.Windows.HorizontalAlignment"/> value</param>
 <param name="targetType">Either <see cref="T:System.Windows.TextAlignment"/> or <see cref="T:System.Windows.HorizontalAlignment"/> type</param>
 <param name="culture">Ignored</param>
 <param name="parameter">Ignored</param>
 <returns>When <paramref name="value"/> is of same type as <paramref name="targetType"/> returns <paramref name="value"/>; otherwise returns logically equivalent value of <paramref name="value"/> represented in <paramref name="targetType"/> type.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> or <paramref name="targetType"/> is null</exception>
 <exception cref="T:System.NotSupportedException">Type of <paramref name="value"/> is not <paramref name="targetType"/> and either type of <paramref name="value"/> or <paramref name="targetType"/> is neither <see cref="T:System.Windows.HorizontalAlignment"/> nor <see cref="T:System.Windows.TextAlignment"/>.</exception>
 <remarks>This converter never throws an exception when type of <paramref name="value"/> is same as <paramref name="targetType"/>.</remarks>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.IntColorConverter">
 <summary>Converts value of type <see cref="T:System.Int32"/> to <see cref="T:System.Windows.Media.Color"/></summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.IntColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. Either <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.SolidColorBrush"/> or <see cref="T:System.Drawing.Color"/> depending on <paramref name="targetType"/>. The color of retuned objects if made from <paramref name="value"/> as if it represents ARGB color code.</returns>
 <param name="value">The value produced by the binding source. It must be built-in numeric type representing color ARGB code, <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.SolidColorBrush"/> or <see cref="T:System.Drawing.Color"/>.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <remarks>Return type of this method depends on <paramref name="targetType"/>:
 <para>If it <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable form</see> <see cref="T:System.Drawing.Color"/> (but not from <see cref="T:System.Windows.Media.Brush"/> or <see cref="T:System.Windows.Media.Color"/>), <see cref="T:System.Drawing.Color"/> is retuned.</para>
 <para>If it <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable form</see> <see cref="T:System.Windows.Media.Brush"/> (but not from <see cref="T:System.Windows.Media.Color"/>), <see cref="T:System.Windows.Media.SolidColorBrush"/> is returned.</para>
 <para>If it <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable form</see> <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.Color"/> is returned.</para>
 <para>If it <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable form</see> neither from <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.Brush"/> not <see cref="T:System.Drawing.Color"/> an exception is thrown.</para></remarks>
 <exception cref="T:System.OverflowException">Numeric type conversion from <paramref name="value"/> to <see cref="T:System.Int32"/> failed.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is neither <see cref="T:System.Int32"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Drawing.Color"/> nor <see cref="T:System.Windows.Media.SolidColorBrush"/></exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.IntColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>Converterd value. Type depends on <paramref name="targetType"/>. Typically is returned integer representing ARGB value of color given in <paramref name="value"/>.</returns>
 <param name="value">>A converted value. This must be either null, <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.SolidColorBrush"/> or <see cref="T:System.Drawing.Color"/>.</param>
 <param name="targetType">The type to convert to. It must be either <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.SolidColorBrush"/>, <see cref="T:System.Drawing.Color"/> or type <see cref="T:System.Int32"/> is <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">danamicly castable</see> to.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.SolidColorBrush"/> nor <see cref="T:System.Drawing.Color"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="targetType"/> is null</exception>
 <exception cref="T:System.InvalidCastException">Failed to convert <see cref="T:System.Int32"/> to <paramref name="targetType"/> and <paramref name="targetType"/> is neither <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.Brush"/> nor <see cref="T:System.Drawing.Color"/>.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators from <see cref="T:System.Int32"/> to <paramref name="targetType"/> were found, but no one is most specific and <paramref name="targetType"/> is neither <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.Brush"/> nor <see cref="T:System.Drawing.Color"/>.</exception>
 <exception cref="T:System.OverflowException">Conversion of type <see cref="T:System.Int32"/> to <paramref name="targetType"/> failed due to overwlow exception and <paramref name="targetType"/> is neither <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Windows.Media.Brush"/> nor <see cref="T:System.Drawing.Color"/>.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.IsNotNullConverter">
 <summary>Onew-way converter that can indicate if value is not null</summary>
 <remarks>Converts null to false and non-null to true</remarks>
 <version stage="Alpha" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.IsNotNullConverter.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <returns>A converted value. False when <paramref name="value"/> is null; true otherwise.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.IsNotNullConverter.ConvertBack(System.Boolean,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <returns><see cref="F:System.Windows.Data.Binding.DoNothing"/> unless <paramref name="value"/> is false, in such case returns null.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.IsNullConverter">
 <summary>Onew-way converter that can indicate if value is null</summary>
 <remarks>Converts null to true and non-null to false</remarks>
 <version stage="Alpha" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.IsNullConverter.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <returns>A converted value. True when <paramref name="value"/> is null; false otherwise.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.IsNullConverter.ConvertBack(System.Boolean,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <returns><see cref="F:System.Windows.Data.Binding.DoNothing"/> unless <paramref name="value"/> is true, in such case returns null.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.NestedConverter">
 <summary>Converter that combines two <see cref="T:System.Windows.Data.IValueConverter">IValueConverters</see> - passes output of in ner converter to outer converter</summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRules">
 <summary>Defines possible values used by the <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRule"/> property to determine to which converter(s) pass converter parameter</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRules.Both">
 <summary>Converter parameter is passed to both, <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> and <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> converters</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRules.InnerOnly">
 <summary>Converter parameter is passed to <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> converter only</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRules.OuterOnly">
 <summary>Converter parameter is passed to <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> converter only</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter._ParameterRule">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRule"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter._Outer">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter._Inner">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter._IntermediateTargetType">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.IntermediateTargetType"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter._IntermediateTargetTypeBack">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.IntermediateTargetTypeBack"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter._InnerParam">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.InnerParam"/> property</summary>
</member>
<member name="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter._OuterParam">
 <summary>Conrains value of the <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.OuterParam"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.#ctor(System.Windows.Data.IValueConverter,System.Windows.Data.IValueConverter)">
 <summary>CTor form inner and outer converters</summary>
 <param name="Inner">Inner converter. This converter is called first and its output is passed to <paramref name="Outer"/> converter.</param>
 <param name="Outer">Outer converter. This converter converts value returned from <paramref name="Inner"/> converter to output.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Inner"/> is null or <paramref name="Outer"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.#ctor">
 <summary>Parameter-less CTor to be used by XAML</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.#ctor(System.Windows.Data.IValueConverter,System.Windows.Data.IValueConverter,System.Type,System.Type)">
 <summary>CTor form inner and outer converters and intermediate target types</summary>
 <param name="Inner">Inner converter. This converter is called first and its output is passed to <paramref name="Outer"/> converter.</param>
 <param name="Outer">Outer converter. This converter converts value returned from <paramref name="Inner"/> converter to output.</param>
 <param name="IntermediateTargetType">Target type of <paramref name="Inner"/> converter when <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called.</param>
 <param name="ItntermediateTargetTypeBack">Target type of <paramref name="Outer"/> converter when <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called. If null <see cref="T:System.Object"/> is assumed.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Inner"/>, <paramref name="Outer"/> or <paramref name="IntermediateTargetType"/> is null</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">
 <summary>Inner converter</summary>
 <remarks>
 <para>When calling <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> this converter's <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> is called firts and its result is passed to <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> converter. When <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> is called, target type of this converter is <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.IntermediateTargetType">IntermediateTargetType</see>.</para>
 <para>When calling <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack</see> this converter is called with value returned by <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> converter. Tagret type is target type passed to <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack</see>.</para>
 </remarks>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">
 <summary>Outer converter</summary>
 <remarks>
 <para>When calling <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> this converter is called to convert value returned by <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> converter to tagret type passed to <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see>.</para>
 <para>When calling <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack</see> this converter is called to first with target type <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.IntermediateTargetTypeBack">IntermediateTargetTypeBack</see>. Return value of this converter's <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> is passed to <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> converter.</para>
 </remarks>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.IntermediateTargetTypeBack">
 <summary>Target type of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> converter when <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called</summary>
 <value>Default value is <see cref="T:System.Object"/></value>
 <remarks>This property can be set only via constructor</remarks>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.IntermediateTargetType">
 <summary>Target type of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> converter when <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called</summary>
 <value>Default value is <see cref="T:System.Object"/></value>
 <remarks>This property can be set only via constructor</remarks>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.InnerParam">
 <summary>Gets or sets value to be passed to converter parameter of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> converter instead of value passed to <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> or <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack.</see></summary>
 <value>Value to be passed to converter parameter of <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> or <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack</see> of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> converter. Null to obey <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRule"/>.</value>
 <returns>Value being passed to converter parameter of <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> and <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack</see> of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> converter. Null when <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRule"/> shall determine value passed to the methods.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.OuterParam">
 <summary>Gets or sets value to be passed to converter parameter of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> converter instead of value passed to <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> or <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack.</see></summary>
 <value>Value to be passed to converter parameter of <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> or <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack</see> of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> converter. Null to obey <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRule"/>.</value>
 <returns>Value being passed to converter parameter of <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> and <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack</see> of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> converter. Null when <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRule"/> shall determine value passed to the methods.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRule">
 <summary>Gets or sets rule used to determine which converter(s) converter parameter is passed to when <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> or <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> is called</summary>
 <value>Rule to be used by <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> and <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> to determine which converter(s) pass converter parameter to. Default value is <see cref="F:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRules.Both"/></value>
 <returns>RUle currently used by <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> and <see cref="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> to determine which converter(s) pass converter parameter to.</returns>
 <remarks>Converter which is exluded by the rule from receiving converter parameter to its <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">Convert</see> or <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">ConvertBack</see> receives null insted.
 <para>This rule can be overriden by setting converter parameter value directly using <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.InnerParam"/> and <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.OuterParam"/> properties.</para></remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not one of <see cref="T:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRules"/> values.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value using <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> converter first and then of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> one.</summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">The converter parameter to use. <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRule"/> determines which converter(s) receive this value.</param>
 <param name="culture">The culture to use in converters.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner"/> or <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value using <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer">Outer</see> converter first and then of <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner">Inner</see> one.</summary>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="targetType">The type to convert to.</param>
 <param name="parameter">The converter parameter to use. <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.ParameterRule"/> determines which converter(s) receive this value.</param>
 <param name="culture">The culture to use in converters.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Inner"/> or <see cref="P:Tools.WindowsT.WPF.ConvertersT.NestedConverter.Outer"/> is null</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.ChoiceBooleanConverter">
 <summary>Converter which converts a boolean value to one of given string values</summary>
 <remarks>Values are passed to parameter as two pipe(|)-separated strings or as an array of strings with two elements in order TrueValue|FalseValue.</remarks>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
 <version version="1.5.4">Forward conversion is now <see cref="T:System.ComponentModel.TypeConverter"/>-aware</version>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.ChoiceBooleanConverter.IgnoreTargetType">
 <summary>Gets or sets value indicating if targe type is honored in conversion</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.ChoiceBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>
 A converted value. If the method returns null, the valid null value is used.
 Returned value is one of string values passed to <paramref name="parameter"/>.
 <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">Dynamic convertsion</see> is attempted when target type does not accept <see cref="T:System.String"/>.
 Returns null if <paramref name="value"/> is null.
 </returns>
 <param name="value">The value produced by the binding source.
 Supported value types are <see cref="T:System.Boolean"/>,
 <see cref="T:System.String"/> ("false", "0", an empty string and culture false string representation are considered false all other values are considered true),
 <see cref="T:System.Windows.Visibility"/> (<see cref="F:System.Windows.Visibility.Visible"/> is considered true, all other values false),
 <see cref="T:System.IConvertible"/> and any type that can be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamically casted</see> to <see cref="T:System.Boolean"/>.</param>
 <param name="targetType">The type of the binding target property. Ignored if null.</param>
 <param name="parameter">The converter parameter to use.
 Either <see cref="T:System.String"/> containing two pipe(|)-separated values (for true an false) or <see cref="T:System.String"/> containing two items (0-true, 1-false).
 Culture values fro true and false are used when this parameter is null.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="parameter"/> is neither null, <see cref="T:System.String"/> nor <see cref="T:System.String"/></exception>
 <exception cref="T:System.IndexOutOfRangeException"><paramref name="parameter"/> is <see cref="T:System.String"/> but it does not have elements 0 and 1.</exception>
 <exception cref="T:System.InvalidCastException">Error (cannot convert) when converting <paramref name="value"/> to <see cref="T:System.Boolean"/> or return value to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.OverflowException">Error (overflow) when converting <paramref name="value"/> to <see cref="T:System.Boolean"/> or return value to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Error (conversion operators found but no one is most specific) when converting <paramref name="value"/> to <see cref="T:System.Boolean"/> or return value to <paramref name="targetType"/>.</exception>
 <version version="1.5.4">Final return value conversion is now <see cref="T:System.ComponentModel.TypeConverter"/>-aware</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.ChoiceBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. </summary>
 <returns>A converted value. If the method returns null, the valid null value is used. Returns boolean value according to <paramref name="value"/>. <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">Dynamically converted</see> to <paramref name="targetType"/> when necessary.</returns>
 <param name="value">The value that is produced by the binding target. Any value is converted to <see cref="T:System.String"/> using <see cref="M:System.Object.ToString"/> or <see cref="M:System.IConvertible.ToString(System.IFormatProvider)"/>.</param>
 <param name="targetType">The type to convert to. Ignored when null.</param>
 <param name="parameter">The converter parameter to use. 
 Either <see cref="T:System.String"/> containing two pipe(|)-separated values (for true an false) or <see cref="T:System.String"/> containing two items (0-true, 1-false).
 Culture values fro true and false are used when this parameter is null.</param>
 <param name="culture">The culture to use in the converter.</param>
 <seelaso cref="M:Tools.WindowsT.WPF.ConvertersT.ChoiceBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="parameter"/> is neither null, <see cref="T:System.String"/> nor <see cref="T:System.String"/></exception>
 <exception cref="T:System.IndexOutOfRangeException"><paramref name="parameter"/> is <see cref="T:System.String"/> but it does not have elements 0 and 1.</exception>
 <exception cref="T:System.InvalidCastException">Error (cannot convert) when converting return value (<see cref="T:System.Boolean"/>) to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.OverflowException">Error (overflow) when converting return (<see cref="T:System.Boolean"/>) value to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Error (conversion operators found but no one is most specific) when converting return value (<see cref="T:System.Boolean"/>) to <paramref name="targetType"/>.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.ChoiceBooleanConverter.GetParts(System.Object,System.Globalization.CultureInfo,System.String@,System.String@)">
 <summary>Gets trua ena false values from parameter</summary>
 <param name="parameter">A parameter passed to converter</param>
 <param name="culture">CUlture to be used</param>
 <param name="trueCh">Output: Returns string for True</param>
 <param name="falseCh">Output: Returns string for false</param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="parameter"/> is neither null, <see cref="T:System.String"/> nor <see cref="T:System.String"/></exception>
 <exception cref="T:System.IndexOutOfRangeException"><paramref name="parameter"/> is <see cref="T:System.String"/> but it does not have elements 0 and 1.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.NotBooleanValueConverter">
 <summary>Implements <see cref="T:System.Windows.Data.IValueConverter"/> which negates <see cref="T:System.Boolean"/> value</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NotBooleanValueConverter.Convert(System.Boolean,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value - makes boolean negation of it.</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">The converter parameter to use. Ignored.</param>
 <param name="culture">The culture to use in the converter. Ignored.</param>
 <returns>Boolean negation of <paramref name="value"/></returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NotBooleanValueConverter.ConvertBack(System.Boolean,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value - makes boolean negation of it.</summary>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="parameter">The converter parameter to use. Ignored.</param>
 <param name="culture">The culture to use in the converter. Ignored.</param>
 <returns>Boolean negation of <paramref name="value"/>.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.NotColorConverter">
 <summary>Converter that converts color to color negative to given color</summary>
 <remarks>This converter does not change alpha cannel of color.
 <para>This converter accepts and can return types <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Drawing.Color"/>, <see cref="T:System.Windows.Media.SolidColorBrush"/> and <see cref="T:System.Int32"/> (ARGB value).</para></remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NotColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. Null when <paramref name="value"/> is null; othervice solor negative to given color. Depending on <paramref name="targetType"/> value of following type is returned (in order of precedence, first type for which <paramref name="targetType"/>.<see cref="M:System.Type.IsAssignableFrom(System.Type)">IsAssignableFrom</see> returns true is used): <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Drawing.Color"/>, <see cref="T:System.Windows.Media.SolidColorBrush"/>, <see cref="T:System.Int32"/>.</returns>
 <param name="value">The value that is produced by the binding target. It shall be <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Drawing.Color"/>, <see cref="T:System.Windows.Media.SolidColorBrush"/> or <see cref="T:System.Int32"/>.</param>
 <param name="targetType">The type to convert to. Shall be one of following type or their base types: <see cref="T:System.Windows.Media.Color"/>, <see cref="T:System.Drawing.Color"/>, <see cref="T:System.Windows.Media.SolidColorBrush"/>, <see cref="T:System.Int32"/></param>
 <param name="parameter">Ignored.</param>
 <param name="culture">Ignored.</param>
 <exception cref="T:System.ArgumentException"><paramref name="targetType"/> is assignable neither from <see cref="T:System.Windows.Media.Color"/> nor from <see cref="T:System.Drawing.Color"/> nor from <see cref="T:System.Windows.Media.SolidColorBrush"/> nor from <see cref="T:System.Int32"/></exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither <see cref="T:System.Windows.Media.Color"/> nor <see cref="T:System.Drawing.Color"/> nor <see cref="T:System.Windows.Media.SolidColorBrush"/> nor <see cref="T:System.Int32"/></exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.NotVisibilityConverter">
 <summary>Comnverter of type <see cref="T:System.Windows.Visibility"/> that converts is to oposite value</summary>
 <remarks>Both, <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> and <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> functions are implemented by the same <see cref="M:Tools.WindowsT.WPF.ConvertersT.NotVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> function</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NotVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value</summary>
 <param name="value">A value to be converted. It must be either <see cref="T:System.Windows.Visibility"/> or <see cref="T:System.Boolean"/></param>
 <param name="targetType">Type to return. It must be assignable from <see cref="T:System.Windows.Visibility"/> or <see cref="T:System.Boolean"/>.</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <returns>
 If <paramref name="value"/> is <see cref="T:System.Boolean"/> it's treated as <see cref="F:System.Windows.Visibility.Collapsed"/> (false) or <see cref="F:System.Windows.Visibility.Visible"/> (true).
 <paramref name="value"/> is converted to output: <see cref="F:System.Windows.Visibility.Visible"/> to <see cref="F:System.Windows.Visibility.Collapsed"/>; <see cref="F:System.Windows.Visibility.Collapsed"/> to <see cref="F:System.Windows.Visibility.Visible"/>; any other value is left unchanged.
 If <paramref name="targetType"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> <see cref="T:System.Boolean"/> but not from <see cref="T:System.Windows.Visibility"/>, <see cref="T:System.Boolean"/> (true for <see cref="F:System.Windows.Visibility.Visible"/>, false for <see cref="F:System.Windows.Visibility.Collapsed"/>); otherwise <see cref="T:System.Windows.Visibility"/> is returned.
 </returns>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither <see cref="T:System.Windows.Visibility"/> nor <see cref="T:System.Boolean"/></exception>
 <exception cref="T:System.ArgumentException"><paramref name="targetType"/> is neither <see cref="T:System.Windows.Visibility"/> nor <see cref="T:System.Boolean"/> or <paramref name="targetType"/> is <see cref="T:System.Boolean"/> and <paramref name="value"/> is neither <see cref="T:System.Boolean"/>, <see cref="F:System.Windows.Visibility.Visible"/> nor <see cref="F:System.Windows.Visibility.Collapsed"/>.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.NullFalseConverter">
 <summary>Converter that converts null values to false and non-null values to true.</summary>
 <remarks>Additionally if targetType is <see cref="T:System.Windows.Visibility"/> it converts null to <see cref="F:System.Windows.Visibility.Collapsed"/> and non-null to <see cref="F:System.Windows.Visibility.Visible"/>.
 <para>This converter is designed as one-way.</para></remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NullFalseConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>
 If <paramref name="targetType"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> <see cref="T:System.Boolean"/> returns true when <paramref name="value"/> is not null; false when <paramref name="value"/> is null.
 If <paramref name="targetType"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is not assignable from</see> from <see cref="T:System.Boolean"/> but it <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> <see cref="T:System.Windows.Visibility"/> returns <see cref="F:System.Windows.Visibility.Visible"/> when <paramref name="parameter"/> is not null; <see cref="F:System.Windows.Visibility.Collapsed"/> when <paramref name="value"/> is null.
 </returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property. Must <see cref="M:System.Type.IsAssignableFrom(System.Type)">be assignable from</see> either <see cref="T:System.Boolean"/> or <see cref="T:System.Windows.Visibility"/>.</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException"><paramref name="targetType"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> neither <see cref="T:System.Boolean"/> nor <see cref="T:System.Windows.Visibility"/>.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NullFalseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. If <paramref name="value"/> is <see cref="T:System.Boolean"/> false or <paramref name="value"/> is <see cref="F:System.Windows.Visibility.Collapsed"/> returns null. Otherwise an exception is thrown.</returns>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="targetType">ignored</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is neither false nor <see cref="F:System.Windows.Visibility.Collapsed"/> - this converter is not designed to be used with <see cref="M:Tools.WindowsT.WPF.ConvertersT.NullFalseConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/></exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.NullInvisibleConverter">
 <summary>One way converter: Converts null to <see cref="F:System.Windows.Visibility.Collapsed"/> and non-null to <see cref="F:System.Windows.Visibility.Visible"/></summary>
 <version stage="Alpha" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NullInvisibleConverter.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <returns>A converted value. <see cref="F:System.Windows.Visibility.Visible"/> when <paramref name="value"/> is not null; <see cref="F:System.Windows.Visibility.Collapsed"/> otherwise.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.NullInvisibleConverter.ConvertBack(System.Windows.Visibility,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <returns><see cref="F:System.Windows.Data.Binding.DoNothing"/> unless <paramref name="value"/> is <see cref="F:System.Windows.Visibility.Collapsed"/>; in such case returns null.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.PlusConverter">
 <summary>Converter that adds value to a numeric value</summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
 <version version="1.5.4">New property <see cref="P:Tools.WindowsT.WPF.ConvertersT.PlusConverter.UseDynamicCast"/> now allows to chose wheather <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is used or not.</version>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.PlusConverter.UseDynamicCast">
 <summary>Gets or sets value indicating if conversion function uses <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> to convert actual type to target type</summary>
 <remarks>If this property is fale, value of target type is returned without attempt to cast it (only special buil-in conversions are considered).</remarks>7
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.PlusConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. <paramref name="value"/> + <paramref name="parameter"/>. If <paramref name="parameter"/> <paramref name="value"/> <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicly casted</see> to <paramref name="targetType"/> is returned.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property. Result of addition <paramref name="value"/> + <paramref name="parameter"/> (where <paramref name="parameter"/> is firts <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicly casted</see> to type of <paramref name="value"/>) must be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> dynamicly castable to this type.</param>
 <param name="parameter">Value to add to <paramref name="value"/>. This value must be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicly castable</see> to type of <paramref name="value"/>.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="parameter"/> is not null -or- <paramref name="targetType"/> is null.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not of supported type (see remarks for list of supporetd types)</exception>
 <exception cref="T:System.InvalidCastException">Unable to cast <paramref name="parameter"/> to type of <paramref name="value"/> -or- unable to cast result of arithmetic operation to <paramref name="targetType"/>. See <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> for more information.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators from <paramref name="parameter"/> to type of <paramref name="value"/> or from result of addition to <paramref name="targetType"/> were found, but none is more specific. See <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> for more info.</exception>
 <exception cref="T:System.OverflowException">Arithmetic operation or type conversion resulted in overflow.</exception>
 <exception cref="T:System.Exception">Format exception when attempting to convert string to numeric value</exception>
 <remarks>Supported types are:
 <list type="bullet">
 <item><see cref="T:System.Byte"/></item>
 <item><see cref="T:System.SByte"/></item>
 <item><see cref="T:System.UInt16"/></item>
 <item><see cref="T:System.Int16"/></item>
 <item><see cref="T:System.UInt32"/></item>
 <item><see cref="T:System.Int32"/></item>
 <item><see cref="T:System.UInt64"/></item>
 <item><see cref="T:System.Int64"/></item>
 <item><see cref="T:System.Decimal"/></item>
 <item><see cref="T:System.Single"/></item>
 <item><see cref="T:System.Double"/></item>
 </list>Cross-type conversions are performed via <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/>. <paramref name="parameter"/> can be of any (even not specifically supported) type that can be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicaly casted</see> to type of <paramref name="value"/>. <paramref name="targetType"/> may be of any type result of arithmetic operation can be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> dynamically casted to. Arithmetic operation is performed using Visual Basic + and - operators.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.PlusConverter.ConvertInternal(System.Object,System.Type,System.Object,System.Boolean)">
 <summary>Performs the convert or convert back operation</summary>
 <param name="value">Value to be converted</param>
 <param name="targetType">Target type of conversion. Result of <paramref name="value"/> + <paramref name="parameter"/> must be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicly castable</see> to this type.</param>
 <param name="parameter">Value to add to or subtract from <paramref name="value"/>. This value must be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicly castable</see> to type of <paramref name="value"/></param>
 <param name="minus">True to perform subtraction, false to perform addition</param>
 <returns><paramref name="value"/> + or - <paramref name="parameter"/>. If <paramref name="parameter"/> is null <paramref name="value"/> <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicly casted</see> to <paramref name="targetType"/> is returned.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="parameter"/> is not null -or- <paramref name="targetType"/> is null.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not of supported type (see remarks for list of supporetd types)</exception>
 <exception cref="T:System.InvalidCastException">Unable to cast <paramref name="parameter"/> to type of <paramref name="value"/> -or- unable to cast result of arithmetic operation to <paramref name="targetType"/>. See <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> for more information.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators from <paramref name="parameter"/> to type of <paramref name="value"/> or from result of addition to <paramref name="targetType"/> were found, but none is more specific. See <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> for more info.</exception>
 <exception cref="T:System.OverflowException">Arithmetic operation or type conversion resulted in overflow.</exception>
 <exception cref="T:System.Exception">Format exception when attempting to convert string to numeric value</exception>
 <remarks>Supported types are:
 <list type="bullet">
 <item><see cref="T:System.Byte"/></item>
 <item><see cref="T:System.SByte"/></item>
 <item><see cref="T:System.UInt16"/></item>
 <item><see cref="T:System.Int16"/></item>
 <item><see cref="T:System.UInt32"/></item>
 <item><see cref="T:System.Int32"/></item>
 <item><see cref="T:System.UInt64"/></item>
 <item><see cref="T:System.Int64"/></item>
 <item><see cref="T:System.Decimal"/></item>
 <item><see cref="T:System.Single"/></item>
 <item><see cref="T:System.Double"/></item>
 </list>Cross-type conversions are performed via <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/>. <paramref name="parameter"/> can be of any (even not specifically supported) type that can be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicaly casted</see> to type of <paramref name="value"/>. <paramref name="targetType"/> may be of any type result of arithmetic operation can be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> dynamically casted to. Arithmetic operation is performed using Visual Basic + and - operators.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.PlusConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. <paramref name="value"/> - <paramref name="parameter"/>. If <paramref name="parameter"/> <paramref name="value"/> <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicly casted</see> to <paramref name="targetType"/> is returned.</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property. Result of addition <paramref name="value"/> - <paramref name="parameter"/> (where <paramref name="parameter"/> is firts <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicly casted</see> to type of <paramref name="value"/>) must be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> dynamicly castable to this type.</param>
 <param name="parameter">Value to add to <paramref name="value"/>. This value must be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicly castable</see> to type of <paramref name="value"/>.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="parameter"/> is not null -or- <paramref name="targetType"/> is null.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is not of supported type (see remarks for list of supporetd types)</exception>
 <exception cref="T:System.InvalidCastException">Unable to cast <paramref name="parameter"/> to type of <paramref name="value"/> -or- unable to cast result of arithmetic operation to <paramref name="targetType"/>. See <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> for more information.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators from <paramref name="parameter"/> to type of <paramref name="value"/> or from result of addition to <paramref name="targetType"/> were found, but none is more specific. See <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> for more info.</exception>
 <exception cref="T:System.OverflowException">Arithmetic operation or type conversion resulted in overflow.</exception>
 <exception cref="T:System.Exception">Format exception when attempting to convert string to numeric value</exception>
 <remarks>Supported types are:
 <list type="bullet">
 <item><see cref="T:System.Byte"/></item>
 <item><see cref="T:System.SByte"/></item>
 <item><see cref="T:System.UInt16"/></item>
 <item><see cref="T:System.Int16"/></item>
 <item><see cref="T:System.UInt32"/></item>
 <item><see cref="T:System.Int32"/></item>
 <item><see cref="T:System.UInt64"/></item>
 <item><see cref="T:System.Int64"/></item>
 <item><see cref="T:System.Decimal"/></item>
 <item><see cref="T:System.Single"/></item>
 <item><see cref="T:System.Double"/></item>
 </list>Cross-type conversions are performed via <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/>. <paramref name="parameter"/> can be of any (even not specifically supported) type that can be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamicaly casted</see> to type of <paramref name="value"/>. <paramref name="targetType"/> may be of any type result of arithmetic operation can be <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> dynamically casted to. Arithmetic operation is performed using Visual Basic + and - operators.</remarks>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.RelativePathConverter">
 <summary>Converts relative path to absolute</summary>
 <remarks>This converter is one way</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.RelativePathConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value. Absolute path made from relative path given in <paramref name="value"/>. Relative path root to make it absolute is either <paramref name="parameter"/> is specified or <see cref="P:System.Environment.CurrentDirectory"/>. If <paramref name="value"/> <see cref="M:System.IO.Path.IsPathRooted(System.String)">is absolute path</see>, <paramref name="value"/> is vreturned without any change. if <paramref name="value"/> is null, returns null.</returns>
 <param name="value">The value produced by the binding source. It must be valid relative or absolute path (<see cref="T:System.String"/>). Additionaly it can be 1-dimensional array of <see cref="T:System.String"/> with at least 1 item. Items of such aray are converter using <see cref="M:System.IO.Path.Combine(System.String,System.String)"/> left to right.</param>
 <param name="targetType">Ignored. Always returns <see cref="T:System.String"/> or null.</param>
 <param name="parameter">String path to prepend to <paramref name="value"/>. If null <see cref="P:System.Environment.CurrentDirectory"/> is used instead.</param>
 <param name="culture">ignored</param>
 <exception cref="T:Tools.TypeMismatchException">Either <paramref name="value"/> or <paramref name="parameter"/> is neither <see cref="T:System.String"/> nor null nor one dimensional array of <see cref="T:System.String"/> with at least one item.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.RelativePathConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>Never returns, always throws <see cref="T:System.NotSupportedException"/>.</returns>
 <param name="value">ignored</param>
 <param name="targetType">ignored</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException">Always thrown</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.SameTypeOrNullConverter">
 <summary>Converter thet returns value being converted if tagret type of conversion <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> it, null otherwise.</summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.SameTypeOrNullConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>If <paramref name="targetType"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> <paramref name="value"/> returns <paramref name="value"/>; null otherwise</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.SameTypeOrNullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>If <paramref name="targetType"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> <paramref name="value"/> returns <paramref name="value"/>; null otherwise</returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.SecureStringConverter">
 <summary><see cref="T:System.Windows.Data.IValueConverter"/> which performs conversion between <see cref="T:System.String"/> and <see cref="T:System.Security.SecureString"/></summary>
 <remarks>Converting <see cref="T:System.Security.SecureString"/> to plain <see cref="T:System.String"/> causes string data to be stored plain in memory which can be security risk.</remarks>
 <seelaso cref="T:System.String"/><seelaso cref="T:System.Security.SecureString"/>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.SecureStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>A converted value.
 When <paramref name="value"/> is <see cref="T:System.String"/> it's converted to <see cref="T:System.Security.SecureString"/> (unless <paramref name="targetType"/> is <see cref="T:System.String"/>).
 When <paramref name="value"/> is <see cref="T:System.Security.SecureString"/> it's converted to <see cref="T:System.String"/> (unless <paramref name="targetType"/> is <see cref="T:System.Security.SecureString"/>).
 Returns null whan <paramref name="value"/> is null.
 </returns>
 <param name="value">The value produced by the binding source (value to be converted). It must be either <see cref="T:System.String"/> or <see cref="T:System.Security.SecureString"/>.</param>
 <param name="targetType">The type of the binding target property. The type must <see cref="M:System.Type.IsAssignableFrom(System.Type)">be assignable form</see> either <see cref="T:System.String"/> or <see cref="T:System.Security.SecureString"/>.</param>
 <param name="parameter">The converter parameter to use. Ignored.</param>
 <param name="culture">The culture to use in the converter. Ignored.</param>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is neither <see cref="T:System.String"/>, <see cref="T:System.Security.SecureString"/> or null. -or- <paramref name="targetType"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable</see> neither from <see cref="T:System.String"/> nor from <see cref="T:System.Security.SecureString"/>.</exception>
 <remarks>This method implements both - <see cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> and <see cref="M:System.Windows.Data.IValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/>.</remarks>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.StaticTryCastConverter`1">
 <summary>Converter that returns given value of it is of type of converter; otherwise returns null</summary>
 <typeparam name="T">Type of value to return</typeparam>
 <remarks>Due to lack of support for generic types in XAML this class cannot be instantiated directly. Use the <see cref="T:Tools.WindowsT.WPF.MarkupT.GenericExtension"/>.
 <example>Following example shows how to use <see cref="T:Tools.WindowsT.WPF.MarkupT.GenericExtension"/> to create instance of <see cref="T:Tools.WindowsT.WPF.ConvertersT.StaticTryCastConverter`1"/>
 <code lang="XAML"><![CDATA[
 <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                xmlns:conv="clr-namespace:Tools.WindowsT.WPF.ConvertersT;assembly=Tools.Windows"
                xmlns:WF="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms"
                xmlns:mu="clr-namespace:Tools.WindowsT.WPF.MarkupT;assembly=Tools.Windows"
 >
     <mu:GenericExtension TypeName="conv:StaticTryCastConverter" x:Key="convTryWindowsForms">
         <x:Type TypeName="WF:Control"/>
     </mu:GenericExtension>
 </ResourceDictionary>
 ]]></code></example></remarks>
 <version version="1.5.2" stage="Alpha">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StaticTryCastConverter`1.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <returns>If <paramref name="value"/> is <typeparamref name="T"/> returns <paramref name="value"/>; otherwise null</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StaticTryCastConverter`1.ConvertBack(`0,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <returns><paramref name="value"/></returns>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.StringFormatConverter">
 <summary>Converter that passes value to <see cref="T:System.String"/></summary>
 <remarks>This is one-wy converter</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Formats a value.</summary>
 <returns>A converted value.
 If <paramref name="parameter"/> is null and <paramref name="value"/> is null, an empty string is returned.
 If <paramref name="value"/> is not null but <paramref name="parameter"/> is null, <paramref name="value"/>.<see cref="M:System.Object.ToString">ToString</see> is returned. (If <paramref name="value"/> is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> with format argument null is used instead.)
 Othewise result of <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/> with <paramref name="culture"/>, <paramref name="parameter"/> as format and <paramref name="value"/> as the only argument is returned.
 </returns>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="parameter"/> is neither null nor <see cref="T:System.String"/>.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <returns>Never returns, always throws <see cref="T:System.NotSupportedException"/>.</returns>
 <param name="value">ignored</param>
 <param name="targetType">ignored</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <exception cref="T:System.NotSupportedException">Always thrown</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.XmlBooleanConverter">
 <summary>Type converter between <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> which converts XML (XSD) string representation of bootlan to <see cref="T:System.Boolean"/> and vice-versa</summary>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.XmlBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">
 The value produced by the binding source. It's expected to be <see cref="T:System.String"/> if it is not, <see cref="M:System.Object.ToString"/> is used.
 Special support for <see cref="T:System.Windows.Visibility"/> is implemented: All values but <see cref="F:System.Windows.Visibility.Visible"/> are treated as "false".
 Special support is alos implemented to following XML types: <see cref="T:System.Xml.XmlNode"/>, <see cref="T:System.Xml.Linq.XElement"/>, <see cref="T:System.Xml.Linq.XAttribute"/>, <see cref="T:System.Xml.Linq.XText"/>, <see cref="T:System.Xml.Linq.XCData"/>, <see cref="T:System.Xml.Linq.XProcessingInstruction"/>, <see cref="T:System.Xml.Linq.XComment"/>: Value of these node (<see cref="P:System.Xml.Linq.XProcessingInstruction.Data">Data</see> in case of <see cref="T:System.Xml.Linq.XProcessingInstruction"/>.)
 Note: COnversion for these XML types is usually one way.
 </param>
 <param name="parameter">When ! or "Not" (case-insensitive) converter performs a Not operation. Otherwise ignored</param>
 <param name="culture">ignored. Always uses invariant culture.</param>
 <param name="targetType"> The type of the binding target property. Ignored if null (<see cref="T:System.Boolean"/> is returned). Special support for <see cref="T:System.Windows.Visibility"/>.</param>
 <returns>A converted value. If the method returns null, the valid null value is used.
 Returns true if string representation of <paramref name="value"/> is "true" or "1", false if string representation of <paramref name="value"/> is "false" or "0" (both case-insensitive).
 Returns null if <paramref name="value"/> is nulll or an empty string</returns>
 <exception cref="T:System.ArgumentException">String representation of <paramref name="value"/> is neither "true", "false" (case-insensitive), "0", "1", null nor an empty string.</exception>
 <exception cref="T:System.InvalidCastException">Return <see cref="T:System.Boolean"/> value cannot be converted to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators from <see cref="T:System.Boolean"/> to <paramref name="targetType"/> were found, but no one is most specific.</exception>
 <exception cref="T:System.OverflowException">Conversion of return <see cref="T:System.Boolean"/> value to <paramref name="targetType"/> failed doe to overflow.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.XmlBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">
 The value that is produced by the binding target.
 It's ecxpected to be <see cref="T:System.Boolean"/>.
 If it is <see cref="T:System.Windows.Visibility"/> all values but <see cref="F:System.Windows.Visibility.Visible"/> are treated as false.
 If it is <see cref="T:System.IConvertible"/> <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/> is used with invariant culture.
 Otherwise <see cref="M:Tools.TypeTools.DynamicCast``1(System.Object)"/> to <see cref="T:System.Boolean"/> is used
 </param>
 <param name="parameter">When ! or "Not" (case-insensitive) converter performs a Not operation. Otherwise ignored</param>
 <param name="culture">ignored. Always uses invariant culture.</param>
 <param name="targetType">
 The type to convert to. Ignored when null (<see cref="T:System.String"/> is returned).
 Special support for <see cref="T:System.Windows.Visibility"/>, <see cref="T:System.Xml.Linq.XText"/>, <see cref="T:System.Xml.Linq.XCData"/> and <see cref="T:System.Xml.Linq.XComment"/>.
 </param>
 <returns>A converted value. If the method returns null, the valid null value is used. Returns "true" whan <paramref name="value"/> is true, "false" when <paramref name="value"/> is false, null when <paramref name="value"/> is null.</returns>
 <exception cref="T:System.InvalidCastException"><paramref name="value"/> is not <see cref="T:System.IConvertible"/> and it cannot by converted to <see cref="T:System.Boolean"/> -or- Conversion of <see cref="T:System.String"/> to <paramref name="targetType"/> failed.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators were found, but no one is most specific. When converting <paramref name="value"/> which is not <see cref="T:System.IConvertible"/> to <see cref="T:System.Boolean"/>, or when converting <see cref="T:System.String"/> to <paramref name="targetType"/>.</exception>
 <exception cref="T:System.OverflowException">Convertion from <paramref name="value"/> which is not <see cref="T:System.IConvertible"/> to <see cref="T:System.Boolean"/> failed doe to overflow. -or- Conversion of <see cref="T:System.String"/> to <paramref name="targetType"/> failed due to overflow.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.XmlXPathConverter">
 <summary>Converter which gets value and uses it as parameter of XPath query. Then returns result of that query.</summary>
 <remarks>This converter is one-way.</remarks>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.XmlXPathConverter.Source">
 <summary>Gets or sets XML object to execute XPath query againts</summary>
 <remarks>Supported object types are <see cref="T:System.Xml.XPath.IXPathNavigable"/> and <see cref="T:System.Xml.Linq.XNode"/>.</remarks>
 <exception cref="T:Tools.TypeMismatchException">Value is being set to value thet is neither null nor <see cref="T:System.Xml.XPath.IXPathNavigable"/> nor <see cref="T:System.Xml.Linq.XNode"/>.</exception>
</member>
<member name="P:Tools.WindowsT.WPF.ConvertersT.XmlXPathConverter.XmlNamespaceManager">
 <summary>Gets or sets <see cref="P:Tools.WindowsT.WPF.ConvertersT.XmlXPathConverter.XmlNamespaceManager"/> to be used for resolving namespaces</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.XmlXPathConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value. (Executes XPtaht query agains <see cref="P:Tools.WindowsT.WPF.ConvertersT.XmlXPathConverter.Source"/> with <paramref name="value"/> as parameter.</summary>
 <returns>
 A converted value. If the method returns null, the valid null value is used. Returns value which's type depends on type of XPath result.
 <para>
 If XPtah results in empty enumeration, returns null.
 If XPtah results in enumeration with juts one element, treates the element as result and processes it as described below.
 </para>
 <para>
 If result is one of following objects returns value of that object rathter than object itself:
 <see cref="T:System.Xml.XmlAttribute"/>, <see cref="T:System.Xml.Linq.XAttribute"/>, <see cref="T:System.Xml.XmlText"/>, <see cref="T:System.Xml.Linq.XText"/>, <see cref="T:System.Xml.XmlCDataSection"/>, <see cref="T:System.Xml.Linq.XCData"/>, <see cref="T:System.Xml.XmlComment"/>, <see cref="T:System.Xml.Linq.XComment"/>.
 </para>
 </returns>
 <param name="value">The value produced by the binding source. Used as XPath parameter</param>
 <param name="targetType">The type of the binding target property. Ignored.</param>
 <param name="parameter">The converter parameter to use. Must be <see cref="T:System.String"/> - represents template of XPath query. Placeholder {0} is replaces with string representation of <paramref name="value"/> using <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/>.</param>
 <param name="culture">The culture to use in the converter.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null.</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="parameter"/> is not string.</exception>
 <exception cref="T:System.Xml.XPath.XPathException"><paramref name="parameter"/> contains namespace prefix which is not resolved by <see cref="P:Tools.WindowsT.WPF.ConvertersT.XmlXPathConverter.XmlNamespaceManager"/>.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.XmlXPathConverter.IValueConverter_ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Throws a <see cref="T:System.NotSupportedException"/> - this converter is only one-way</summary>
 <param name="value">ignored</param>
 <param name="targetType">ignored</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <returns>Never returns - always throws a <see cref="T:System.NotSupportedException"/></returns>
 <exception cref="T:System.NotSupportedException">Always - this converter is one-way only.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.CountVisibilityConverter">
 <summary>Converter that converts count of items to <see cref="T:System.Windows.Visibility"/>. Zero to <see cref="F:System.Windows.Visibility.Collapsed"/> anything else to <see cref="F:System.Windows.Visibility.Visible"/>.</summary>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CountVisibilityConverter.Convert(System.Int32,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts count to <see cref="T:System.Windows.Visibility"/></summary>
 <param name="value">Count of items</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <returns><see cref="F:System.Windows.Visibility.Visible"/> whrn <paramref name="value"/> is greater than zero; <see cref="F:System.Windows.Visibility.Collapsed"/> otherwise.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.CountVisibilityConverter.ConvertBack(System.Windows.Visibility,System.Object,System.Globalization.CultureInfo)">
 <summary>This way of conversion should not be used</summary>
 <param name="value">Value to be converted</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <returns>Zero when <paramref name="value"/> i<see cref="F:System.Windows.Visibility.Collapsed"/>; <see cref="F:System.Windows.Data.Binding.DoNothing"/> otherwise.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2">
 <summary>Common base for type-safe implementations of <see cref="T:System.Windows.Data.IValueConverter"/></summary>
 <typeparam name="TSource">Type values are converted from</typeparam>
 <typeparam name="TTarget">Type values are converted to</typeparam>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2"><see cref="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> and <see cref="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> now accepts <see langword="null"/> when <typeparamref name="TSource"/> or <typeparamref name="TTarget"/> respectivelly is not value type or is <see cref="T:System.Nullable`1"/></version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="targetType">The type of the binding target property.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <exception cref="T:System.ArgumentException">Value is not of type <typeparamref name="TSource"/> (or <see langword="null"/> when <typeparamref name="TSource"/> is not value type or is <see cref="T:System.Nullable`1"/>) -or- <paramref name="targetType"/> cannot be assigned by value of type <see cref="!:TTarget"/></exception>
 <version version="1.5.2"><paramref name="value"/> can be <see langword="null"/> for <typeparamref name="TSource"/> not being value type or being <see cref="T:System.Nullable`1"/>.</version>
 <version version="1.5.2"><paramref name="value"/> can be of underlying type of <typeparamref name="TSource"/> when <typeparamref name="TSource"/> is <see cref="T:System.Nullable`1"/>.</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.Convert(`0,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="targetType">The type to convert to.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
 <exception cref="T:System.ArgumentException">Value is not of type <see cref="!:TTarget"/> (or <see langword="null"/> when <typeparamref name="TTarget"/> is not value type or is <see cref="T:System.Nullable`1"/>) -or- <paramref name="targetType"/> cannot be assigned by value of type <see cref="!:TSource"/></exception>
 <version version="1.5.2"><paramref name="value"/> can be <see langword="null"/> for <typeparamref name="TTarget"/> not being vakue type or being <see cref="T:System.Nullable`1"/>.</version>
 <version version="1.5.2"><paramref name="value"/> can be of underlying type of <typeparamref name="TTarget"/> when <typeparamref name="TTarget"/> is <see cref="T:System.Nullable`1"/>.</version>
</member>
<member name="M:Tools.WindowsT.WPF.ConvertersT.StronglyTypedConverter`2.ConvertBack(`1,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value that is produced by the binding target.</param>
 <param name="parameter">The converter parameter to use.</param>
 <param name="culture">The culture to use in the converter.</param>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.InputT.FreeInputBinding">
 <summary>An implementation of <see cref="T:System.Windows.Input.InputBinding"/> than can bind to any <see cref="T:System.Windows.Input.InputGesture"/></summary>
 <remarks>
 <see cref="T:System.Windows.Input.KeyBinding"/> is limited to <see cref="T:System.Windows.Input.KeyGesture">KeyGestures</see>, <see cref="T:System.Windows.Input.MouseBinding"/> is limited to <see cref="T:System.Windows.Input.MouseGesture">MouseGestures</see>, <see cref="T:System.Windows.Input.InputBinding"/> itself cannot be instantiated in XAML.
 <see cref="T:Tools.WindowsT.WPF.InputT.FreeInputBinding"/> acccepts any <see cref="T:System.Windows.Input.InputGesture"/> and can be instantiated in XAML.
 <para>
 When used in XAML unlike <see cref="T:System.Windows.Input.KeyBinding"/> or <see cref="T:System.Windows.Input.MouseBinding"/> the <see cref="P:System.Windows.Input.InputBinding.Gesture"/> property cannot be set as attribute (unless you use markup extension such as <c>{<see cref="T:System.Windows.StaticResourceExtension">StaticResource</see>}</c>.
 You must set it as inner element instead.
 <example>
 This example show how to use <see cref="T:Tools.WindowsT.WPF.InputT.FreeInputBinding"/> to instantiate <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> in XAML.
 It binds the <see cref="P:System.Windows.Input.ApplicationCommands.Open"/> to key G.
 <code lang="XAML"><![CDATA[<Window.InputBindings xmlns:ti="clr-namespace:Tools.WindowsT.WPF.InputT;assembly=Tools.Windows">
     <ti:FreeInputBinding Command="Open">
         <ti:FreeInputBinding.Gesture>
             <ti:FreeKeyGesture>G</ti:FreeKeyGesture>
         </ti:FreeInputBinding.Gesture>
     </ti:FreeInputBinding>
 </Window.InputBindings>]]></code>
 </example>
 </para>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeInputBinding.#ctor">
 <summary>Default CTor - creates a new empty instance of the <see cref="T:Tools.WindowsT.WPF.InputT.FreeInputBinding"/> class</summary>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeInputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
 <summary>CTor from <see cref="T:System.Windows.Input.InputGesture"/></summary>
 <param name="command">The command to associate with <paramref name="gesture"/></param>
 <param name="gesture">The <see cref="T:System.Windows.Input.InputGesture"/> to associate with <paramref name="command"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="command"/> or <paramref name="gesture"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeInputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
 <summary>CTor which creates <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/></summary>
 <param name="command">The command to associate with gesture</param>
 <param name="key">The key associated with the gesture.</param>
 <param name="modifiers">The modifier keys associated with the gesture.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers"/> is not valid <see cref="T:System.Windows.Input.ModifierKeys"/> value</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null</exception>
 <seelaso cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeInputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.MouseAction,System.Windows.Input.ModifierKeys)">
 <summary>CTor which creates <see cref="T:System.Windows.Input.MouseGesture"/></summary>
 <param name="command">The command to associate with gesture</param>
 <param name="mouseAction">The action associated with <see cref="T:System.Windows.Input.MouseGesture"/>.</param>
 <param name="modifiers">The modifiers associated with <see cref="T:System.Windows.Input.MouseGesture"/>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="mouseAction"/> is not a valid <see cref="T:System.Windows.Input.MouseAction"/> value -or- <paramref name="modifiers"/> is not a valid <see cref="T:System.Windows.Input.ModifierKeys"/> value.</exception>
 <seelaso cref="T:System.Windows.Input.MouseGesture"/>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeInputBinding.#ctor(System.Windows.Input.ICommand,Tools.WindowsT.WPF.InputT.MouseWheelDirection,System.Int32,System.Windows.Input.ModifierKeys)">
 <summary>CTor which creates <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/></summary>
 <param name="command">The command to associate with gesture</param>
 <param name="direction">Direction of wheel movement</param>
 <param name="delta">Number of wheel clicks (0 means any)</param>
 <param name="modifiers">Modifier keys</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="command"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers"/> is not valid <see cref="T:System.Windows.Input.ModifierKeys"/> value</exception>
 <seelaso cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeInputBinding.CreateInstanceCore">
 <summary>Creates an instance of an <see cref="T:Tools.WindowsT.WPF.InputT.FreeInputBinding" />.</summary>
 <returns>The new object.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture">
 <summary>An alternative implementation of <see cref="T:System.Windows.Input.KeyGesture"/> class which allows non-modified key to be matched</summary>
 <remarks>
 In XAML <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> cannot be used with <see cref="T:System.Windows.Input.KeyBinding"/>. Use <see cref="T:Tools.WindowsT.WPF.InputT.FreeInputBinding"/> instead.
 <example>
 This example show how to instantiate <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> using <see cref="T:Tools.WindowsT.WPF.InputT.FreeInputBinding"/> in XAML.
 The code below binds command <see cref="P:System.Windows.Input.ApplicationCommands.Open"/> go key G.
 <code lang="XAML"><![CDATA[<Window.InputBindings xmlns:ti="clr-namespace:Tools.WindowsT.WPF.InputT;assembly=Tools.Windows">
     <ti:FreeInputBinding Command="Open">
         <ti:FreeInputBinding.Gesture>
             <ti:FreeKeyGesture>G</ti:FreeKeyGesture>
         </ti:FreeInputBinding.Gesture>
     </ti:FreeInputBinding>
 </Window.InputBindings>]]></code>
 </example>
 </remarks>
 <seelaso cref="T:System.Windows.Input.KeyGesture"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.WindowsT.WPF.InputT.FreeKeyGesture.converter">
 <summary>Holds instance of <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGestureConverter"/></summary>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGesture.#ctor(System.Windows.Input.Key)">
 <summary>Initializes a new instance of the <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> class with the specified <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key"/>. </summary>
 <param name="key">The key associated with this gesture.</param>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
 <summary>Initializes a new instance of the <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> class with the specified <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key"/> and <see cref="T:System.Windows.Input.ModifierKeys"/>.</summary>
 <param name="key">The key associated with the gesture.</param>
 <param name="modifiers">The modifier keys associated with the gesture.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers"/> is not valid <see cref="T:System.Windows.Input.ModifierKeys"/> value</exception>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)">
 <summary>Initializes a new instance of the <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> class with the specified <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key"/>, <see cref="T:System.Windows.Input.ModifierKeys"/>, and display string.</summary>
 <param name="key">The key associated with the gesture.</param>
 <param name="modifiers">The modifier keys associated with the gesture.</param>
 <param name="displayString">A string representation of the <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/>.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers"/> is not valid <see cref="T:System.Windows.Input.ModifierKeys"/> value</exception>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGesture.#ctor(System.Windows.Input.KeyGesture)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> class from an instance of <see cref="T:System.Windows.Input.KeyGesture"/> class</summary>
 <param name="gesture">A <see cref="T:System.Windows.Input.KeyGesture"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="gesture"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
 <summary>Determines whether this <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs"/> object.</summary>
 <param name="targetElement">The target of the command.</param>
 <param name="inputEventArgs">The input event data to compare this gesture to.</param>
 <returns>true if the gesture matches the input; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)">
 <summary>Returns a string that can be used to display the <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/>.</summary>
 <param name="culture">The culture specific information.</param>
 <returns>The string to display </returns>
 <remarks>If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key"/> and <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Modifiers"/> with any necessary conversions being governed by the specified <see cref="T:System.Globalization.CultureInfo"/> object.</remarks>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.DisplayString">
 <summary>Gets a string representation of this <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/>.</summary>
 <value>The display string for this <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/>. The default value is <see cref="T:System.String"/>.</value>
 <remarks>If a display string was not set in the constructor, an empty string is returned.
 <para>If this property is empty, the <see cref="M:Tools.WindowsT.WPF.InputT.FreeKeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)"/> method returns a string created from the <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key"/> and <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Modifiers"/>.</para></remarks>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key">
 <summary>Gets the key associated with this <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/>.</summary>
 <value>The key associated with the gesture. The default value is <see cref="F:System.Windows.Input.Key.None"/>.</value>
 <remarks>Unlike with <see cref="T:System.Windows.Input.KeyGesture"/> <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Modifiers"/> can be <see cref="F:System.Windows.Input.ModifierKeys.None"/> for any <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key"/>.</remarks>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Modifiers">
 <summary>Gets the modifier keys associated with this <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/>.</summary>
 <value>The modifier keys associated with the gesture. The default value is <see cref="F:System.Windows.Input.ModifierKeys.None"/>.</value>
 <remarks>Unlike with <see cref="T:System.Windows.Input.KeyGesture"/> this property can be <see cref="F:System.Windows.Input.ModifierKeys.None"/> for any <see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGesture.op_Implicit(System.Windows.Input.KeyGesture)~Tools.WindowsT.WPF.InputT.FreeKeyGesture">
 <summary>Converts <see cref="T:System.Windows.Input.KeyGesture"/> to <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/></summary>
 <param name="a">A <see cref="T:System.Windows.Input.KeyGesture"/></param>
 <returns>A new instance of <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> class initialized from <paramref name="a"/>; null if <paramref name="a"/> is null.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGesture.op_Explicit(Tools.WindowsT.WPF.InputT.FreeKeyGesture)~System.Windows.Input.KeyGesture">
 <summary>Converts <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> to <see cref="T:System.Windows.Input.KeyGesture"/></summary>
 <param name="a">A <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/></param>
 <returns>A new instance of <see cref="T:System.Windows.Input.KeyGesture"/> initialized from <paramref name="a"/>; null if <paramref name="a"/> is null.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="a"/>.<see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key">Key</see> is not a valid <see cref="T:System.Windows.Input.Key"/>.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="a"/>.<see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Key">Key</see> and <paramref name="a"/>.<see cref="P:Tools.WindowsT.WPF.InputT.FreeKeyGesture.Modifiers">Modifiers</see> do not form a valid <see cref="T:System.Windows.Input.KeyGesture"/>.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.InputT.FreeKeyGestureConverter">
 <summary>Converts a <see cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/> object to and from other types.</summary>
 <seelaso cref="T:System.Windows.Input.KeyGestureConverter"/><seelaso cref="T:Tools.WindowsT.WPF.InputT.FreeKeyGesture"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
 <returns>true if this converter can perform the conversion; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to. </param>
 <returns>true if this converter can perform the conversion; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
 <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
 <param name="source">The <see cref="T:System.Object" /> to convert. </param>
 <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.FreeKeyGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
 <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. </param>
 <param name="value">The <see cref="T:System.Object" /> to convert. </param>
 <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. </param>
 <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
 <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType" /> parameter is null. </exception>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
</member>
<member name="T:Tools.WindowsT.WPF.InputT.MouseWheelEventArgsEx">
 <summary>Extends <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> with orientation</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelEventArgsEx.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Int32,System.Windows.Controls.Orientation)">
 <summary>Initializes a new instance of the <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelEventArgsEx" /> class.</summary>
 <param name="mouse">The mouse device associated with this event.</param>
 <param name="timestamp">The time when the input occurred.</param>
 <param name="delta">The amount the wheel has changed.</param>
 <param name="orientation">Oriantation of scrolling</param>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.MouseWheelEventArgsEx.Orientation">
 <summary>gets oriantation of scrolling</summary>
</member>
<member name="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture">
 <summary>An implementation of <see cref="T:System.Windows.Input.MouseGesture"/> class which matches to specific mouse wheel events</summary>
 <remarks>
 You can use this class with <see cref="T:System.Windows.Input.InputBinding"/> in XAML as shown i example. But it causes problems in Visual Studio designer.
 <example>
 This exaple shows how to use <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> with <see cref="T:System.Windows.Input.InputBinding"/>.
 <note>
 Code shown in this example is valid XAML code and works perfectly in runtime, however there is a bug in Visual Studio designer that causes that designer stops working.
 If you want to use Visual Studio designer you must use an alternative approach.
 </note>
 <code lang="XAML"><![CDATA[<Window.InputBindings>
     <MouseBinding Command="NextPage">
         <MouseBinding.Gesture>
             <ti:MouseWheelGesture xmlns:ti="clr-namespace:Tools.WindowsT.WPF.InputT;assembly=Tools.Windows">Minus</ti:MouseWheelGesture>
         </MouseBinding.Gesture>
     </MouseBinding>
 </Window.InputBindings>]]></code>
 </example>
 An alternative way that satisfies both - runtime and Visual Studio designer is to instantiate <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> in resources.
 <example>
 This example shows alternative way of instantiating and assigning of <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> using resource dictionary.
 This way Visual Studio designer does not stop working.
 <code lang="XAML"><![CDATA[
 <Window.Resources>
     <ti:MouseWheelGesture x:Key="MouseWheelMinus" xmlns:ti="clr-namespace:Tools.WindowsT.WPF.InputT;assembly=Tools.Windows">Minus</ti:MouseWheelGesture>
 </Window.Resources>
 <Window.InputBindings>
     <MouseBinding Command="NextPage" Gesture="{StaticResource MouseWheelMinus}"/>
 </Window.InputBindings>
 ]]></code>
 </example>
 Another workaround is to use <see cref="T:Tools.WindowsT.WPF.InputT.FreeInputBinding"/> instead.
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelGesture.#ctor">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> class with default settings</summary>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelGesture.#ctor(Tools.WindowsT.WPF.InputT.MouseWheelDirection,System.Int32,System.Windows.Input.ModifierKeys)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> class setting its properties</summary>
 <param name="direction">Direction of wheel movement</param>
 <param name="delta">Number of wheel clicks (0 means any)</param>
 <param name="modifiers">Modifier keys</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="modifiers"/> is not valid <see cref="T:System.Windows.Input.ModifierKeys"/> value</exception>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.MouseWheelGesture.MouseAction">
 <summary>Gets or sets the <see cref="T:System.Windows.Input.MouseAction"/> associated with this gesture.</summary>
 <value>The mouse action associated with this gesture. The default and only allowed value is <see cref="F:System.Windows.Input.MouseAction.WheelClick"/>.</value>
 <remarks>Do not use this property. Do not use base class <see cref="P:System.Windows.Input.MouseGesture.MouseAction"/> property on this class. If value of this property is different than <see cref="F:System.Windows.Input.MouseAction.WheelClick"/> this gesture never matches.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelGesture.#ctor(System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> class from it's string representation</summary>
 <param name="description">String representation of <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> in recognized format. Can also be null or an empty string.</param>
 <exception cref="T:System.FormatException"><paramref name="description"/> is not valid string description of <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/></exception>
 <exception cref="T:System.OverflowException">Delta component of <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> described in <paramref name="description"/> does not fit to type <see cref="T:System.Int32"/>.</exception>
 <remarks>
 The format of string is as follows:
 The string is composed of 3 parts in fixed order: Direction Delta Modifier. All parts are optional. Parts can be separated by whitespaces. Also whitespaces at the beginning and at the end of string are ignored.
 The string is case-insensitive.
 <list type="table">
 <listheader><term>Part</term><description>Format</description></listheader>
 <item><term>Direction</term><description>One of following values: Plus, Minus, Any. If not presend Any is assumed. Converts to appropriate value of <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelDirection"/> enumeration.</description></item>
 <item><term>Delta</term><description>Non-negative integer number. Value of the <see cref="P:Tools.WindowsT.WPF.InputT.MouseWheelGesture.Delta"/> property. If not present 0 is assumed.</description></item>
 <item><term>Modifier</term><description>Any number of modifier values for <see cref="P:System.Windows.Input.MouseGesture.Modifiers"/> property. Each value must be preceded with the "+" sign. Whitespaces after the "+" and before the "+" (except first one) are NOT allowed. Supported values are: +Alt, +Control, +Ctrl, +Shift, +Win, +Windows, +None. Repeated uses of the same value are ignored. If not present None is assumed.</description></item>
 </list>
 </remarks>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelGesture.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />. Value returned by this function is suibale for <see cref="M:Tools.WindowsT.WPF.InputT.MouseWheelGesture.#ctor(System.String)"/>.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.MouseWheelGesture.Direction">
 <summary>Gets or sets value indicating which directions of mouse wheel movement will match</summary>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.MouseWheelGesture.Orientation">
 <summary>Gets or sets value indicating wheather horizontal or vertical mouse wheel action will match.</summary>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.MouseWheelGesture.Delta">
 <summary>Gets or sets number of wheel clicks this operation will match.</summary>
 <value>0 means any</value>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)">
 <summary>When overridden in a derived class, determines whether the specified <see cref="T:System.Windows.Input.InputGesture" /> matches the input associated with the specified <see cref="T:System.Windows.Input.InputEventArgs" /> object.</summary>
 <param name="targetElement">The target of the command.</param>
 <param name="inputEventArgs">The input event data to compare this gesture to.</param>
 <returns>true if the gesture matches the input; otherwise, false.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.InputT.MouseWheelDirection">
 <summary>Mose wheel directions</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.WindowsT.WPF.InputT.MouseWheelDirection.Any">
 <summary>Any direction (plus or minus)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.InputT.MouseWheelDirection.Plus">
 <summary>Direction plus. <see cref="P:System.Windows.Input.MouseWheelEventArgs.Delta"/> > 0</summary>
</member>
<member name="F:Tools.WindowsT.WPF.InputT.MouseWheelDirection.Minus">
 <summary>Direction minus. <see cref="P:System.Windows.Input.MouseWheelEventArgs.Delta"/> &lt; 0</summary>
</member>
<member name="T:Tools.WindowsT.WPF.InputT.MouseWheelGestureConverter">
 <summary>Converts a <see cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/> object to and from other types.</summary>
 <seelaso cref="T:Tools.WindowsT.WPF.InputT.MouseWheelGesture"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelGestureConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
 <returns>true if this converter can perform the conversion; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelGestureConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to. </param>
 <returns>true if this converter can perform the conversion; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelGestureConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
 <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture. </param>
 <param name="source">The <see cref="T:System.Object" /> to convert. </param>
 <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
 <exception cref="T:System.FormatException"><paramref name="source"/> is string in invalid format</exception>
 <exception cref="T:System.Diagnostics.OverflowAction"><paramref name="source"/> is string describing <see cref="P:Tools.WindowsT.WPF.InputT.MouseWheelGesture.Delta"/> value that does not fit to <see cref="T:System.Int32"/> type.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.MouseWheelGestureConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
 <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. </param>
 <param name="value">The <see cref="T:System.Object" /> to convert. </param>
 <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to. </param>
 <returns>An <see cref="T:System.Object" /> that represents the converted value.</returns>
 <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType" /> parameter is null. </exception>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
</member>
<member name="T:Tools.WindowsT.WPF.InputT.UICommands">
 <summary>Defines additional standard commands that are not defined in core WPF</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.WPF.InputT.UICommands.#ctor">
 <summary>Private CTor to achieve pseudo-static class</summary>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.UICommands.ScrollDown">
 <summary>Gets a scroll down command - generic scroll down</summary>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.UICommands.ScrollUp">
 <summary>Gets a scroll up command - generic scroll up</summary>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.UICommands.ScrollLeft">
 <summary>Gets a scroll left command - generic scroll left</summary>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.UICommands.ScrollRight">
 <summary>Gets a scroll right command - generic scroll right</summary>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.UICommands.ZoomIn">
 <summary>Gets a zoom in command (magnification)</summary>
</member>
<member name="P:Tools.WindowsT.WPF.InputT.UICommands.ZoomOut">
 <summary>Gets a zoom out command (unmagnification)</summary>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.TypeConverterBasedValueSerializerBase">
 <summary>Base class for simple automatic <see cref="T:System.Windows.Markup.ValueSerializer">ValueSerializers</see> based on <see cref="T:System.ComponentModel.TypeConverter"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.TypeConverterBasedValueSerializerBase.Converter">
 <summary>When overriden in derived class gets a <see cref="T:System.ComponentModel.TypeConverter"/> to perform type conversion</summary>
 <returns>A <see cref="T:System.ComponentModel.TypeConverter"/>, null if conversion is not supported in current situation</returns>
 <remarks>The converter should be capable of converting objects of type this serializer is used for from and to <see cref="T:System.String"/></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.TypeConverterBasedValueSerializerBase.GetConverter(System.Object)">
 <summary>When overriden in derived class gets a <see cref="T:System.ComponentModel.TypeConverter"/> for specific object to be serialized</summary>
 <param name="component">A component to serialize</param>
 <returns>
 An instance of <see cref="T:System.ComponentModel.TypeConverter"/> to use to convert <paramref name="component"/> to <see cref="T:System.String"/>.
 This implementation always returns same value as the <see cref="P:Tools.WindowsT.WPF.MarkupT.TypeConverterBasedValueSerializerBase.Converter"/> property.
 </returns>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.TypeConverterBasedValueSerializerBase.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
 <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</summary>
 <param name="value">The string to evaluate for conversion. Ignored by this implementation.</param>
 <param name="context">Context information that is used for conversion. If it implements <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> it's passed to <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>, ignored otherwise.</param>
 <returns>true if the value can be converted; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.TypeConverterBasedValueSerializerBase.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
 <summary>Determines whether the specified object can be converted into a <see cref="T:System.String" />.</summary>
 <param name="value">The object to evaluate for conversion.</param>
 <param name="context">Context information that is used for conversion. If it implements <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> it's passed to <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>, ignored otherwise.</param>
 <returns>true if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
 <remarks>Returns true if <see cref="T:System.ComponentModel.TypeConverter"/> obtained using <see cref="M:Tools.WindowsT.WPF.MarkupT.TypeConverterBasedValueSerializerBase.GetConverter(System.Object)"/> indicates that it can convert value to <see cref="T:System.String"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.TypeConverterBasedValueSerializerBase.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
 <summary>Converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</summary>
 <param name="value">The string to convert.</param>
 <param name="context">Context information that is used for conversion. If it implements <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> it's passed to <see cref="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)"/>, ignored otherwise.</param>
 <returns>A new instance of the type <typeparamref name="T"/> based on the supplied <paramref name="value" />.</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="value" /> cannot be converted.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.TypeConverterBasedValueSerializerBase.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
 <summary>Converts the specified object to a <see cref="T:System.String" />.</summary>
 <param name="value">The object to convert into a string.</param>
 <param name="context">Context information that is used for conversion. If it implements <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> it's passed to <see cref="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)"/>, ignored otherwise.</param>
 <returns>A string representation of the specified object.</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="value" /> cannot be converted.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.DefaultTypeConverterBasedValueSerializer`1">
 <summary>Implements <see cref="T:System.Windows.Markup.ValueSerializer"/> based on default <see cref="T:System.ComponentModel.TypeConverter"/> of type <typeparamref name="T"/></summary>
 <typeparam name="T">Type of object to be (de)serialized</typeparam>
 <remarks>This implementation uses <see cref="T:System.ComponentModel.TypeConverter"/> obtained using <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)"/></remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.DefaultTypeConverterBasedValueSerializer`1.Converter">
 <summary>Gets a <see cref="T:System.ComponentModel.TypeConverter"/> to perform type conversion</summary>
 <returns>A default <see cref="T:System.ComponentModel.TypeConverter"/> of type <typeparamref name="T"/> obtained using <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)"/></returns>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.DefaultTypeConverterBasedValueSerializer`1.GetConverter(System.Object)">
 <summary>Gets a <see cref="T:System.ComponentModel.TypeConverter"/> for specific object to be serialized</summary>
 <param name="component">A component to serialize</param>
 <returns>A default <see cref="T:System.ComponentModel.TypeConverter"/> ofr <paramref name="component"/> obtained using <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)"/>. Returns <see cref="P:Tools.WindowsT.WPF.MarkupT.DefaultTypeConverterBasedValueSerializer`1.Converter"/> if <paramref name="component"/> is null.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.DefaultTypeConverterBasedValueSerializer`1.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
 <summary>Determines whether the specified object can be converted into a <see cref="T:System.String" />.</summary>
 <param name="value">The object to evaluate for conversion.</param>
 <param name="context">Context information that is used for conversion. If it implements <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> it's passed to <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>, ignored otherwise.</param>
 <returns>true if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
 <remarks>Returns true if <see cref="T:System.ComponentModel.TypeConverter"/> obtained using <see cref="M:Tools.WindowsT.WPF.MarkupT.DefaultTypeConverterBasedValueSerializer`1.GetConverter(System.Object)"/> indicates that it can convert value to <see cref="T:System.String"/>.</remarks>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.SpecificTypeConverterBasedValueSerializer`1">
 <summary>Implements <see cref="T:System.Windows.Markup.ValueSerializer"/> based on specific <see cref="T:System.ComponentModel.TypeConverter"/></summary>
 <typeparam name="TConverter">Type of type converter. It must have public default CTor. It should support conversion from and to <see cref="T:System.String"/>.</typeparam>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.SpecificTypeConverterBasedValueSerializer`1.Converter">
 <summary>Gets a <see cref="T:System.ComponentModel.TypeConverter"/> to perform type conversion</summary>
 <returns>An instance of type <typeparamref name="TConverter"/></returns>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.MarkupExtensionBase">
 <summary>Base class for implementations of <see cref="T:System.Windows.Markup.MarkupExtension"/> which mekes it easier to implement <see cref="T:System.Windows.Markup.MarkupExtension"/> by provideing easier access to some commonly required services.</summary>
 <seelaso cref="T:System.Windows.Markup.MarkupExtension"/><seelaso cref="T:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider"/>
 <version stage="Nightly" version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.MarkupExtensionBase.ProvideValue(System.IServiceProvider)">
 <summary>Returns an object that is set as the value of the target property for this markup extension. </summary>
 <returns>The object value to set on the property where the extension is applied. </returns>
 <param name="serviceProvider">Object that can provide services for the markup extension.</param>
 <remarks><note type="inheritinfo">Override overload instead.</note></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.MarkupExtensionBase.ProvideValue(Tools.WindowsT.WPF.MarkupT.XamlServiceProvider)">
 <summary>When overrriden in derived class returns an object that is set as the value of the target property for this markup extension. </summary>
 <returns>The object value to set on the property where the extension is applied. </returns>
 <param name="serviceProvider">Object that can provide services for the markup extension. This implementation never passes value null here.</param>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.NamespacesExtension">
 <summary>This markup extension provides instance of <see cref="T:System.Windows.Data.XmlNamespaceMappingCollection"/> object containing all or some of namespace prefixes registered at place where it is used.</summary>
 <remarks>Because of bug in Visual Studio (see <a href="https://connect.microsoft.com/VisualStudio/feedback/details/614411">IXamlTypeResolver is not provided in design mode</a>) this markup extension may return null in design mode.</remarks>
 <version stage="Nightly" version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.NamespacesExtension.#ctor">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.MarkupT.NamespacesExtension"/> class without prefix filter</summary>
 <remarks>Prefix filter can be set later using the <see cref="P:Tools.WindowsT.WPF.MarkupT.NamespacesExtension.Prefixes"/> property</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.NamespacesExtension.#ctor(System.String)">
 <summary>CTor - initializes a new instance of the <see cref="T:Tools.WindowsT.WPF.MarkupT.NamespacesExtension"/> class with prefix filter (as string)</summary>
 <param name="prefixes">Prefix filter - whitespace-separated list of XML namespace prefixes registered in current XAML file (context)</param>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.NamespacesExtension.ProvideValue(Tools.WindowsT.WPF.MarkupT.XamlServiceProvider)">
 <summary>Returns an object that is set as the value of the target property for this markup extension (<see cref="T:System.Windows.Data.XmlNamespaceMappingCollection"/>). </summary>
 <returns>The object value to set on the property where the extension is applied. This implementation always returns <see cref="T:System.Windows.Data.XmlNamespaceMappingCollection"/>.
 <note>Because of bug in Visual Studio (see <a href="https://connect.microsoft.com/VisualStudio/feedback/details/614411">IXamlTypeResolver is not provided in design mode</a>) null is returned when <paramref name="serviceProvider"/> does not provide <see cref="T:System.Xaml.IXamlNamespaceResolver"/> and <paramref name="serviceProvider"/>.<see cref="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.InnerProvider">InnerProvider</see> is <see cref="T:Microsoft.Expression.DesignModel.Core.InstanceBuilderOperations+InstanceBuilderServiceProvider"/>.</note>
 </returns>
 <param name="serviceProvider">Object that can provide services for the markup extension. This markup extension requires <see cref="T:System.Windows.Markup.IXamlTypeResolver"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider"/> is null. This never happens unless you call this method manually from derived class.</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="serviceProvider"/> does not provide <see cref="T:System.Windows.Markup.IXamlTypeResolver"/> service.
 <note>This exception is not thrown when <paramref name="serviceProvider"/>.<see cref="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.InnerProvider">InnerProvider</see> is <see cref="T:Microsoft.Expression.DesignModel.Core.InstanceBuilderOperations+InstanceBuilderServiceProvider"/>.</note></exception>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.NamespacesExtension.Prefixes">
 <summary>Gets or sets prefixes (whitespace-separated list) of XML namespaces to be included in <see cref="T:System.Windows.Data.XmlNamespaceMappingCollection"/> returned by <see cref="M:Tools.WindowsT.WPF.MarkupT.MarkupExtensionBase.ProvideValue(System.IServiceProvider)"/>.</summary>
 <value>Whitespace-separated list of namespace prefixes which are valid in place where the extension is used. List of valid namespace prefixes is obtained via <see cref="T:System.Xaml.IXamlNamespaceResolver"/>. Unknown prefixes are ignored.</value>
 <returns>Current list of XML namespace prefixes to include in <see cref="T:System.Windows.Data.XmlNamespaceMappingCollection"/>.</returns>
 <remarks><see cref="M:Tools.WindowsT.WPF.MarkupT.MarkupExtensionBase.ProvideValue(System.IServiceProvider)"/> returns available namespaces when this property is null, an empty string or contains only whitespaces.</remarks>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.NamespacesExtension.NamespacesExtensionConverter">
 <summary>Implements <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.WindowsT.WPF.MarkupT.NamespacesExtension"/></summary>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.NamespacesExtension.NamespacesExtensionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
 <returns>true if this converter can perform the conversion; otherwise, false.
 This implementation returns true when <paramref name="destinationType"/> is <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>, otherwise base class method <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/> is called.</returns>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to. </param>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.NamespacesExtension.NamespacesExtensionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
 <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
 <returns>
 An <see cref="T:System.Object" /> that represents the converted value.
 This implementation converts <see cref="T:Tools.WindowsT.WPF.MarkupT.NamespacesExtension"/> to <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>.
 If <paramref name="value"/> is null, returns null.
 If <paramref name="destinationType"/> is not <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> then base class method <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> is called.
 </returns>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed. </param>
 <param name="value">The <see cref="T:System.Object" /> to convert. </param>
 <param name="destinationType">The <see cref="T:System.Type" /> to convert the  <paramref name="value" /> parameter to. </param>
 <exception cref="T:System.ArgumentNullException">The  <paramref name="destinationType" /> parameter is null. </exception>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither null nor <see cref="T:Tools.WindowsT.WPF.MarkupT.NamespacesExtension"/>.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.NewExtension">
 <summary>A markup extension that can create instance of any type which has default (parameter-less constructor)</summary>
 <seelaso cref="M:System.Activator.CreateInstance(System.ActivationContext)"/>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.NewExtension.#ctor">
 <summary>CTor - creates an enw instance of the <see cref="T:Tools.WindowsT.WPF.MarkupT.NewExtension"/> class</summary>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.NewExtension.#ctor(System.Type)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.MarkupT.NewExtension"/> class and initializes the <see cref="P:Tools.WindowsT.WPF.MarkupT.NewExtension.Type"/> property.</summary>
 <param name="type">Type to create instance of</param>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.NewExtension.ProvideValue(Tools.WindowsT.WPF.MarkupT.XamlServiceProvider)">
 <summary>Returns an object that is set as the value of the target property for this markup extension. </summary>
 <returns>The object value to set on the property where the extension is applied. Returns new instance of type <see cref="P:Tools.WindowsT.WPF.MarkupT.NewExtension.Type"/>. Null if <see cref="P:Tools.WindowsT.WPF.MarkupT.NewExtension.Type"/> is null.</returns>
 <param name="serviceProvider">ignored</param>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.WindowsT.WPF.MarkupT.NewExtension.Type"/> is not a <see cref="T:System.RuntimeType"/>. -or- <see cref="P:Tools.WindowsT.WPF.MarkupT.NewExtension.Type"/> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true).</exception>
 <exception cref="T:System.NotSupportedException"><see cref="P:Tools.WindowsT.WPF.MarkupT.NewExtension.Type"/> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />. -or- Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported. -or- The assembly that contains type is a dynamic assembly that was created with <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" />.</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
 <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class.</exception>
 <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through Overload:<see cref="M:System.Type.GetTypeFromProgID(System.String)" /> or Overload:<see cref="M:System.Type.GetTypeFromCLSID(System.Guid)" />.</exception>
 <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
 <exception cref="T:System.Runtime.InteropServices.COMException"><see cref="P:Tools.WindowsT.WPF.MarkupT.NewExtension.Type"/> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
 <exception cref="T:System.TypeLoadException"><see cref="P:Tools.WindowsT.WPF.MarkupT.NewExtension.Type"/> is not a valid type.</exception>
 <seelaso cref="M:System.Activator.CreateInstance(System.ActivationContext)"/>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.NewExtension.Type">
 <summary>Gets or sets type to create instance of</summary>
 <remarks>The type must be class or structure with public default (parameter-less constructor). It shall be neither abstract nor interface, nor open generic type.</remarks>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.StaticExExtension">
 <summary>Implements markup extension to access static properties and fields and their members</summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
 <version version="1.5.4">DynamicCast now also considers type converters</version>
</member>
<member name="F:Tools.WindowsT.WPF.MarkupT.StaticExExtension._Member">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.MarkupT.StaticExExtension.Member"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.StaticExExtension.#ctor">
 <summary>Default constructor</summary>
 <remarks>This constructor is intended to be used by XAML only. Use parametrized constructor overload instead.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.StaticExExtension.#ctor(System.String)">
 <summary>CTor with member</summary>
 <param name="Member">Name and path of member this extension provides value of. See <see cref="P:Tools.WindowsT.WPF.MarkupT.StaticExExtension.Member"/> for more information.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.StaticExExtension.#ctor(System.String,System.Reflection.BindingFlags)">
 <summary>CTor with member and <see cref="T:System.Reflection.BindingFlags"/></summary>
 <param name="Member">Name and path of member this extension provides value of. See <see cref="P:Tools.WindowsT.WPF.MarkupT.StaticExExtension.Member"/> for more information.</param>
 <param name="bindingFlags">Binding flags used when looking for field or property</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null.</exception>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.StaticExExtension.Member">
 <summary>Gets or sets name and path of member this extension provides value of</summary>
 <value>Name and path of member this extension provides value of</value>
 <remarks>
 This property shall be set to string containing several (at least 2) dot(.)-separated substring. (No leading and terminating dots!)
 First part is interpreted as name of type and is resolved via <see cref="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)"/> (so it can contain XML namespace prefix).
 Second part must me name of public static property or field of type specified in first part.
 Third and all subsequent parts must be names of public instance fields of type returned by field or property from preceding part (type descriptors are not utilized).
 If any member is not found or (with exception of last) returns null, an exception is thrown.
 </remarks>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.StaticExExtension.BindingFlags">
 <summary>Gets or sets binding flags used when looking for field or property</summary>
 <value>A <see cref="T:System.Reflection.BindingFlags"/> value indicating which members are considered when looking for field or property to get value of. Default value is <see cref="F:System.Reflection.BindingFlags.Public"/>.</value>
 <remarks>Use only binding flags related to member visibility. <see cref="F:System.Reflection.BindingFlags.Instance"/> and <see cref="F:System.Reflection.BindingFlags.Static"/> are ignored by setter and used as needed depending on context</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.StaticExExtension.ProvideValue(System.IServiceProvider)">
 <summary>Returns an object that is set as the value of the target property for this markup extension.</summary>
 <returns>The object value to set on the property where the extension is applied.
 If <paramref name="serviceProvider"/> provides <see cref="T:System.Windows.Markup.IProvideValueTarget"/> service and its <see cref="P:System.Windows.Markup.IProvideValueTarget.TargetProperty"/> is 
     <see cref="T:System.Reflection.PropertyInfo"/> with non-null <see cref="P:System.Reflection.PropertyInfo.PropertyType"/> or <see cref="T:System.Windows.DependencyProperty"/> with non-null <see cref="P:System.Windows.DependencyProperty.PropertyType"/> 
     <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">dynamic cast</see> or result of properties/fields evaluation is attempted.</returns>
 <param name="serviceProvider">Object that can provide services for the markup extension.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.WPF.MarkupT.StaticExExtension.Member"/> is null, an empty string or contains fewer than 2 dot-separated parts.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="serviceProvider"/> does not provide service of type <see cref="T:System.Windows.Markup.IXamlTypeResolver"/>.</exception>
 <exception cref="T:System.NullReferenceException">Value returned by any field or property but the last is null.</exception>
 <exception cref="T:System.MissingMemberException">Neither public static property nor public static field of type from 1st segment and with name from 2nd segment was not found. -or- Neither public instance property nor public instance field with name specified in 3rd or any subsequent segment was not found on type returned by field or property of preceding segment.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More that one public static (2nd level) or public instance (3rd+) level property with same name found. -or- <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">Dynamic cast</see> wa attempted (see return value documentation for conditions when it is attempted): Cast operators were found, but no one is most specific.</exception>
 <exception cref="T:System.MemberAccessException">Property being accessed has no getter. (<see cref="M:System.Reflection.PropertyInfo.GetValue(System.Object)"/> throws an <see cref="T:System.ArgumentException"/>.) -or- <see cref="M:System.Reflection.FieldInfo.GetValue(System.Object)"/> throws an <see cref="T:System.ArgumentException"/>.</exception> 
 <exception cref="T:System.Reflection.TargetParameterCountException">Property being accessed is indexed</exception>
 <exception cref="T:System.MethodAccessException">There was an illegal attempt to access a private or protected method inside a class. I.e. property is public but getter is not public.</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <see cref="P:System.Exception.InnerException"/> property indicates the reason for the error.</exception>
 <exception cref="T:System.NotSupportedException">A field being accessed is marked literal, but the field does not have one of the accepted literal types.</exception>
 <exception cref="T:System.FieldAccessException">The caller does not have permission to access a field.</exception>
 <exception cref="T:System.InvalidCastException"><see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">Dynamic cast</see> was attempted (see return value documentation for conditions when it is attempted): No casting method from type of obj to Type was found -or- build in conversion from System.String to numeric type failed.</exception>
 <exception cref="T:System.FormatException"><see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">Dynamic cast</see> was attempted (see return value documentation for conditions when it is attempted): Conversion of <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/> failed because string has bad format. -or- Operator being caled has thrown this exception.</exception>
 <version version="1.5.4">DynamicCast now also considers type converters</version>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.StaticExExtension.StaticExTypeConverter">
 <summary>Converter for type <see cref="T:System.Windows.Markup.MarkupExtension"/> and <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/></summary>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.StaticExExtension.StaticExTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
 <returns>true if this converter can perform the conversion; otherwise, false. This implementation returns true if <paramref name="destinationType"/> is <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>; otherwise calls <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/>.</returns>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
 <param name="destinationType">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.StaticExExtension.StaticExTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
 <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
 <returns>An <see cref="T:System.Object" /> that represents the converted value. If <paramref name="destinationType"/> is <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> and <paramref name="value"/> is <see cref="T:Tools.WindowsT.WPF.MarkupT.StaticExExtension"/> this implementation returns <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>.</returns>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo" />. If null is passed, the current culture is assumed.</param>
 <param name="value">The <see cref="T:System.Object" /> to convert.</param>
 <param name="destinationType">The <see cref="T:System.Type" /> to convert the <paramref name="value" /> parameter to.</param>
 <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType" /> parameter is null.</exception>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
 <remarks>This implementation performs conversion from <see cref="T:Tools.WindowsT.WPF.MarkupT.StaticExExtension"/> to <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/>; otherwise calls <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>.</remarks>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider">
 <summary>Wraps any <see cref="T:System.IServiceProvider"/> and provides properties for easy retrieval of XAML-related services</summary>
 <seelaso cref="M:Tools.WindowsT.WPF.WpfExtensions.GetXamlService(System.IServiceProvider,Tools.WindowsT.WPF.XamlService)"/>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="F:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.internal">
 <summary>Internal service provider this service provider is based on</summary>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.#ctor(System.IServiceProvider)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider"/> class</summary>
 <param name="provider">Internal service provider. Can be null. In this case this service provider always returns null for any service requested.</param>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.GetService(System.Type)">
 <summary>Gets the service object of the specified type.</summary>
 <returns>A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.</returns>
 <param name="serviceType">An object that specifies the type of service object to get. </param>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.InnerProvider">
 <summary>Gets <see cref="T:System.IServiceProvider"/> this provider internally uses</summary>
 <returns><see cref="T:System.IServiceProvider"/> internally used by this service provider. Can be null.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.ProvideValueTarget">
 <summary><see cref="T:System.Windows.Markup.IProvideValueTarget"/> (Reports situational object-property relationships for markup extension evaluation.)</summary>
 <returns>The <see cref="T:System.Windows.Markup.IProvideValueTarget"/> service. Null if the service is not provided by current service provider.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.XamlTypeResolver">
 <summary><see cref="T:System.Windows.Markup.IXamlTypeResolver"/> (Resolves from named elements in XAML markup to the appropriate CLR type.)</summary>
 <returns>The <see cref="T:System.Windows.Markup.IXamlTypeResolver"/> service. Null if the service is not provided by current service provider.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.XamlSchemaContextProvider">
 <summary><see cref="T:System.Xaml.IXamlSchemaContextProvider"/> (Provides XAML schema context information to type converters and markup extensions.)</summary>
 <returns>The <see cref="T:System.Xaml.IXamlSchemaContextProvider"/> service. Null if the service is not provided by current service provider.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.UriContext">
 <summary><see cref="T:System.Windows.Markup.IUriContext"/> (Can use application context to resolve a provided relative URI to an absolute URI.)</summary>
 <returns>The <see cref="T:System.Windows.Markup.IUriContext"/> service. Null if the service is not provided by current service provider.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.AmbientProvider">
 <summary><see cref="T:System.Xaml.IAmbientProvider"/> (Can return information items of ambient properties or ambient types to type converters and markup extensions.)</summary>
 <returns>The <see cref="T:System.Xaml.IAmbientProvider"/> service. Null if the service is not provided by current service provider.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.DestinationTypeProvider">
 <summary><see cref="T:System.Xaml.IDestinationTypeProvider"/> (Can return a type system identifier for the destination type. The destination type is relevant for cases where there is an indirect reporting of destination type for a set operation based on reflection or other mechanisms.)</summary>
 <returns>The <see cref="T:System.Xaml.IDestinationTypeProvider"/> service. Null if the service is not provided by current service provider.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.RootObjectProvider">
 <summary><see cref="T:System.Xaml.IRootObjectProvider"/> (Can return the root object of markup being parsed.)</summary>
 <returns>The <see cref="T:System.Xaml.IRootObjectProvider"/> service. Null if the service is not provided by current service provider.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.XamlNameResolver">
 <summary><see cref="T:System.Xaml.IXamlNameResolver"/> (Can return objects specified by name, or alternatively returns a token. The service can also return an enumerable set of all named objects that are in the XAML namescope.)</summary>
 <returns>The <see cref="T:System.Xaml.IXamlNameResolver"/> service. Null if the service is not provided by current service provider.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.XamlServiceProvider.XamlNamespaceResolver">
 <summary><see cref="T:System.Xaml.IXamlNamespaceResolver"/> (Can return a XAML namespace based on its prefix as mapped in XAML markup.)</summary>
 <returns>The <see cref="T:System.Xaml.IXamlNamespaceResolver"/> service. Null if the service is not provided by current service provider.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.MarkupT.GenericExtension">
 <summary>Markup extension that can create instance of generic type</summary>
 <author www="http://blogs.msdn.com/mikehillberg/archive/2006/10/06/LimitedGenericsSupportInXaml.aspx">Mike Hillberg</author>
 <version stage="Nightly" version="1.5.2">Class introduced</version>
</member>
<member name="F:Tools.WindowsT.WPF.MarkupT.GenericExtension._typeArguments">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.MarkupT.GenericExtension.TypeArguments"/> proeprty</summary>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.GenericExtension.TypeArguments">
 <summary>Gets the collection of type arguments for the generic type</summary>
 <returns>The collection of type arguments for the generic type</returns>
</member>
<member name="F:Tools.WindowsT.WPF.MarkupT.GenericExtension._typeName">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.MarkupT.GenericExtension.TypeName"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.MarkupT.GenericExtension.TypeName">
 <summary>Gets or sets the generic type name (e.g. Dictionary, for the Dictionary`2 case)</summary>
 <returns>The generic type name (e.g. Dictionary, for the Dictionary`2 case)</returns>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.GenericExtension.#ctor">
 <summary>Default CTor</summary>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.GenericExtension.#ctor(System.String)">
 <summary>CTof from type name</summary>
 <param name="typeName">The generic type name (e.g. Dictionary, for the Dictionary`2 case)</param>
</member>
<member name="M:Tools.WindowsT.WPF.MarkupT.GenericExtension.ProvideValue(System.IServiceProvider)">
 <summary>Returns an object - instance of the constructed generic type that is set as the value of the target property for this markup extension.</summary>
 <returns>An object instance of the constructed generic type</returns>
 <param name="serviceProvider">Object that can provide services for the markup extension. This markup extension requires <see cref="T:System.Windows.Markup.IXamlTypeResolver"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="serviceProvider"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="serviceProvider"/> does not provide <see cref="T:System.Windows.Markup.IXamlTypeResolver"/> service.</exception>
 <version version="1.5.3">Changed exceptions thrown:
 When <paramref name="serviceProvider"/> <see cref="T:System.ArgumentNullException"/> is thrown instead of <see cref="T:System.NullReferenceException"/>.
 When <paramref name="serviceProvider"/> does not provide <see cref="T:System.Windows.Markup.IXamlTypeResolver"/> <see cref="T:System.InvalidOperationException"/> is thrown instead of <see cref="T:System.Exception"/>.
 </version>
</member>
<member name="T:Tools.WindowsT.WPF.TryParseValidationRule">
 <summary>A <see cref="T:System.Windows.Controls.ValidationRule"/>-derived class for verifying if given <see cref="T:System.String"/> value represents valid values of certain type.</summary>
 <remarks>With excpetion of few specific types validation is performed by appropriate <c>TryParse</c> method.</remarks>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.TryParseValidationRule.#ctor">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.TryParseValidationRule"/> class</summary>
</member>
<member name="M:Tools.WindowsT.WPF.TryParseValidationRule.#ctor(Tools.WindowsT.WPF.TryParseValidationType)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.TryParseValidationRule"/> and sets its validation type</summary>
 <param name="validationType">Type of validation</param>
</member>
<member name="M:Tools.WindowsT.WPF.TryParseValidationRule.#ctor(Tools.WindowsT.WPF.TryParseValidationType,System.Globalization.NumberStyles)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.TryParseValidationRule"/> and sets its validation type and number style</summary>
 <param name="validationType">Type of validation</param>
 <param name="numberStyle">Numeric sytle for numeric types</param>
</member>
<member name="P:Tools.WindowsT.WPF.TryParseValidationRule.DateFormat">
 <summary>Gets or sets single date format used with date types and <c>TryParseExact</c> method</summary>
 <value>By setting this property <see cref="P:Tools.WindowsT.WPF.TryParseValidationRule.DateFormats"/> property is erased and value being set becomes it's only member. If value being set is null the <see cref="P:Tools.WindowsT.WPF.TryParseValidationRule.DateFormats"/> collection bevomes empty.</value>
 <returns>First member of <see cref="P:Tools.WindowsT.WPF.TryParseValidationRule.DateFormats"/> collection.</returns>
 <seelaso cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/><seelaso cref="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)"/><seelaso cref="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)"/>
</member>
<member name="P:Tools.WindowsT.WPF.TryParseValidationRule.DateFormats">
 <summary>Gets collection fo date formats used with date-time data types <c>TryParseExact</c></summary>
 <remarks>If this collection is empty <c>TryParse</c> is used isntead of <c>TryParseExact</c></remarks>
 <seelaso cref="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/><seelaso cref="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)"/><seelaso cref="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)"/>
</member>
<member name="P:Tools.WindowsT.WPF.TryParseValidationRule.EnumType">
 <summary>If <see cref="P:Tools.WindowsT.WPF.TryParseValidationRule.ValidationType"/> is <see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Enum"/> this enum type is used.</summary>
 <remarks>This property mus be set when <see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Enum"/> is used.</remarks>
</member>
<member name="P:Tools.WindowsT.WPF.TryParseValidationRule.EnumIgnoreCase">
 <summary>Gets or sets value indicating if enum parsing is case-sensitive</summary>
 <value>True to make enum parsing case-insensitive, false to make it vcase-sensitive</value>
</member>
<member name="P:Tools.WindowsT.WPF.TryParseValidationRule.ValidationType">
 <summary>Gets or sets validation type</summary>
</member>
<member name="P:Tools.WindowsT.WPF.TryParseValidationRule.NumberStyle">
 <summary>Gets or sets number style used by numeric validation types</summary>
</member>
<member name="P:Tools.WindowsT.WPF.TryParseValidationRule.DateTimeStyle">
 <summary>gets or sets date-time style used by date-time types</summary>
</member>
<member name="P:Tools.WindowsT.WPF.TryParseValidationRule.OverrideCulture">
 <summary>Gets or sets culture. When set to non-null value this culture is used rather than culture passed to <see cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo,System.Windows.Data.BindingExpressionBase)"/> function.</summary>
</member>
<member name="P:Tools.WindowsT.WPF.TryParseValidationRule.AllowEmptyString">
 <summary>Regardless of another settings, always allow empty string as valid input (also allows null)</summary>
 <version version="1.5.4">Fix: Property type changed from <see cref="T:System.Object"/> to <see cref="T:System.Boolean"/>.</version>
</member>
<member name="M:Tools.WindowsT.WPF.TryParseValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
 <summary>Performs validation checks on a value.</summary>
 <returns>A <see cref="T:System.Windows.Controls.ValidationResult" /> object.</returns>
 <param name="value">The value from the binding target to check.</param>
 <param name="cultureInfo">The culture to use in this rule.</param>
</member>
<member name="T:Tools.WindowsT.WPF.TryParseValidationType">
 <summary>Validation types supported by <see cref="T:Tools.WindowsT.WPF.TryParseValidationRule"/></summary>
 <remarks>Values of this enumeration are based and extends <see cref="T:System.TypeCode"/>.</remarks>
 <seelaso cref="T:System.TypeCode"/>
 <version version="1.5.3" stage="Nightly">This enumeration is new in version 1.5.3</version>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Boolean">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Boolean"/>. Ignores culture.</summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Byte">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Byte"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.DateTime">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.DateTime"/> Uses special options for date types.</summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.DBNull">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.DBNull"/>. Only null, empty string and <see cref="F:Tools.WindowsT.WPF.TryParseValidationType.DBNull"/> passes validation.</summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Decimal">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Decimal"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Double">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Double"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Empty">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Empty"/>. Only null and empty string passes validation.</summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Char">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Char"/>. Ignores culture.</summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Int16">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Int16"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Int32">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Int32"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Int64">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Int64"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Object">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Object"/>. All values passes validation.</summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.SByte">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.SByte"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Single">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Single"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.String">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.String"/>All values but null passes validation.</summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.UInt16">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.UInt16"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.UInt32">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.UInt32"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.UInt64">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.UInt64"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.TimeSpan">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.TimeSpan"/>. Uses special date-time options.</summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.DateTimeOffset">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.DateTimeOffset"/>. Uses special date-time options.</summary>
</member>
<member name="F:Tools.WindowsT.WPF.TryParseValidationType.Enum">
 <summary><see cref="F:Tools.WindowsT.WPF.TryParseValidationType.Enum"/>. Uses special options for enum. Ignores culture.</summary>
</member>
<member name="T:Tools.WindowsT.WPF.RegularExpressionValidationRule">
 <summary>A <see cref="T:System.Windows.Controls.ValidationRule"/>-derived class which supports the use of regular expressions for validation.</summary>
 <remarks><a href="http://www.codeproject.com/KB/WPF/RegexValidationInWPF.aspx">http://www.codeproject.com/KB/WPF/RegexValidationInWPF.aspx</a></remarks>
 <author www="http://www.codeproject.com/Members/Josh-Smith">Josh Smith</author>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.RegularExpressionValidationRule.#ctor">
 <summary>Parameterless constructor.</summary>
</member>
<member name="M:Tools.WindowsT.WPF.RegularExpressionValidationRule.#ctor(System.String)">
 <summary>Creates a RegexValidationRule with the specified regular expression.</summary>
 <param name="regexText">The regular expression used by the new instance.</param>
</member>
<member name="M:Tools.WindowsT.WPF.RegularExpressionValidationRule.#ctor(System.String,System.String)">
 <summary>Creates a RegexValidationRule with the specified regular expression and error message.</summary>
 <param name="regexText">The regular expression used by the new instance.</param>
 <param name="errorMessage">The error message used when validation fails.</param>
</member>
<member name="M:Tools.WindowsT.WPF.RegularExpressionValidationRule.#ctor(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
 <summary>Creates a RegexValidationRule with the specified regular expression, error message, and RegexOptions.</summary>
 <param name="regexText">The regular expression used by the new instance.</param>
 <param name="errorMessage">The error message used when validation fails.</param>
 <param name="regexOptions">The RegexOptions used by the new instance.</param>
</member>
<member name="P:Tools.WindowsT.WPF.RegularExpressionValidationRule.ErrorMessage">
 <summary>Gets or sets the error message to be used when validation fails.</summary>
</member>
<member name="P:Tools.WindowsT.WPF.RegularExpressionValidationRule.IgnoreEmptyString">
 <summary>Gets or sets value indicating if empty string values are always considered valid</summary>
</member>
<member name="P:Tools.WindowsT.WPF.RegularExpressionValidationRule.Options">
 <summary>Gets or sets the RegexOptions to be used during validation. This property's default value is <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled"/>.</summary>
</member>
<member name="P:Tools.WindowsT.WPF.RegularExpressionValidationRule.Pattern">
 <summary>Gets or sets the regular expression used during validation.</summary>
</member>
<member name="P:Tools.WindowsT.WPF.RegularExpressionValidationRule.RegularExpression">
 <summary>Gets regular expression created from <see cref="P:Tools.WindowsT.WPF.RegularExpressionValidationRule.Pattern"/> used during validation</summary>
 <remarks>Regular expression is re-created when value of the <see cref="P:Tools.WindowsT.WPF.RegularExpressionValidationRule.Pattern"/> or <see cref="P:Tools.WindowsT.WPF.RegularExpressionValidationRule.Options"/> property changes</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.RegularExpressionValidationRule.CreateRegularExpression(System.String,System.Text.RegularExpressions.RegexOptions)">
 <summary>Generates regular expression</summary>
 <param name="pattern">Pattern to generate regular expression from</param>
 <param name="options">Regular expression options</param>
 <returns>Regular exspression created form given <paramref name="pattern"/> and <paramref name="options"/>. Nulll when <paramref name="pattern"/> is null or an empty string.</returns>
</member>
<member name="M:Tools.WindowsT.WPF.RegularExpressionValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
 <summary>Validates the 'value' argument using the regular expression and RegexOptions associated with this object.</summary>
</member>
<member name="T:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions">
 <summary>Provides extension methods for the <see cref="T:System.Windows.Threading.Dispatcher"/> class</summary>
 <seealso cref="T:System.Windows.Threading.Dispatcher"/><seealso cref="T:Tools.ThreadingT.IInvokeExtensions"/>
 <version version="1.5.3">This module is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``1(System.Windows.Threading.Dispatcher,System.Func{``0})">
 <summary>Calls parameter-less function in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``2(System.Windows.Threading.Dispatcher,System.Func{``0,``1},``0)">
 <summary>Calls a function with 1 parameter in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T">Type of 1st parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``3(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2},``0,``1)">
 <summary>Calls a function with 2 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``4(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3},``0,``1,``2)">
 <summary>Calls a function with 3 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``5(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
 <summary>Calls a function with 4 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``6(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
 <summary>Calls a function with 5 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``7(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
 <summary>Calls a function with 6 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``8(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
 <summary>Calls a function with 7 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``9(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
 <summary>Calls a function with 8 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``10(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
 <summary>Calls a function with 9 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``11(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
 <summary>Calls a function with 10 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``12(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
 <summary>Calls a function with 11 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``13(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
 <summary>Calls a function with 12 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``14(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
 <summary>Calls a function with 13 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``15(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
 <summary>Calls a function with 14 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``16(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
 <summary>Calls a function with 15 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <param name="param15">15th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <typeparam name="T15">Type of 15th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``17(System.Windows.Threading.Dispatcher,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
 <summary>Calls a function with 16 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <param name="param15">15th parameter</param>
 <param name="param16">16th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <typeparam name="T15">Type of 15th parameter</typeparam>
 <typeparam name="T16">Type of 16th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action)">
 <summary>Calls parameter-less method in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``1(System.Windows.Threading.Dispatcher,System.Action{``0},``0)">
 <summary>Calls a method with 1 parameter in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <typeparam name="T">Type of 1st parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``2(System.Windows.Threading.Dispatcher,System.Action{``0,``1},``0,``1)">
 <summary>Calls a method with 2 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``3(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2},``0,``1,``2)">
 <summary>Calls a method with 3 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``4(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
 <summary>Calls a method with 4 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``5(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
 <summary>Calls a method with 5 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``6(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
 <summary>Calls a method with 6 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``7(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
 <summary>Calls a method with 7 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``8(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
 <summary>Calls a method with 8 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``9(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
 <summary>Calls a method with 9 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``10(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
 <summary>Calls a method with 10 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``11(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
 <summary>Calls a method with 11 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``12(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
 <summary>Calls a method with 12 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``13(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
 <summary>Calls a method with 13 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``14(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
 <summary>Calls a method with 14 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``15(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
 <summary>Calls a method with 15 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <param name="param15">15th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <typeparam name="T15">Type of 15th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.ThreadingT.DispatcherExtensions.Invoke``16(System.Windows.Threading.Dispatcher,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
 <summary>Calls a method with 16 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in thread associated with</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <param name="param15">15th parameter</param>
 <param name="param16">16th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <typeparam name="T15">Type of 15th parameter</typeparam>
 <typeparam name="T16">Type of 16th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="T:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl">
 <summary>Control that implements WPF <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.MessageBox"/></summary>
 <remarks>This control is not intended to be used separately, to be placed on yopur window. This control implements WPF <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.MessageBox"/> and can be styled/templated.
 Teplate parts are panels for additional controls that can be placed on message box and are optional. When not pressent additional control will not be visible! But use of additional controls is rare.
 <para>This control is disposable. When it disposes it should not be used. It disposes automatically wehn message box window closes.</para>
 <para>Due to WPF limitations message box always displays an ugly icon. If you want to hide the icon set <see cref="P:Tools.WindowsT.WPF.NativeExtensions.GloballyHideNullIconsOfWindows"/> to true.</para></remarks>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
 <version version="1.5.3." stage="Beta">Added ability to copy all text of message box using Ctrl+C</version>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_TopControlPlaceholder">
 <summary>Identifies placeholder panel for additional control on top of message box window</summary>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_MiddleControlPlaceholder">
 <summary>Identifies placeholder panel for additional control on bottom of message box window above buttons</summary>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_BottomControlPlaceholder">
 <summary>Identifies placeholder panel for additional control on bottom of message box window below buttons</summary>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.__MessageBox">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.MessageBox"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.MessageBox">
 <summary>Gest or sets instance of <see cref="T:Tools.WindowsT.WPF.DialogsT.MessageBox"/> this instance is user interface for</summary>
 <returns>Instance of <see cref="T:Tools.WindowsT.WPF.DialogsT.MessageBox"/> this instance is user interface for</returns>
 <value>Set value to associate <see cref="T:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl"/> and <see cref="T:Tools.WindowsT.WPF.DialogsT.MessageBox"/></value>
 <exception cref="T:System.ArgumentException">Value being set has not <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Control"/> property set to this instance.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.#cctor">
 <summary>Initializer</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
 <summary>Raises the <see cref="E:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.RenderSizeChanged"/> event</summary>
</member>
<member name="E:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.RenderSizeChanged">
 <summary>Raised when value of <see cref="P:System.Windows.FrameworkElement.ActualHeight"/> or <see cref="P:System.Windows.FrameworkElement.ActualWidth"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnFlowDirectionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Callback called when the <see cref="P:System.Windows.FrameworkElement.FlowDirection"/> property is changed</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnFlowDirectionChanged(Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.FlowDirectionChanged"/> event. Caled when value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection"/> property changes.</summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.FlowDirectionChanged">
 <summary>Raised when the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection"/> property changes</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.Title">
 <summary>Gets or sets string indicating title of window this control is laced on</summary>
 <returns>Current title</returns>
 <value>Title to be set to window</value>
 <remarks>Its responsibility of window to update its <see cref="P:System.Windows.Window.Title"/> whenver <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.Title"/> changes. It can be also detected using the <see cref="E:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.TitleChanged"/> event</remarks>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.TitleProperty">
 <summary>Identifies the <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.Title"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnTitleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Callback called wehn the <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.TitleProperty"/> is changed</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnTitleChanged(Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.TitleChanged"/> event. Called when value of the <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.TitleProperty"/> changes</summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.TitleChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.Title"/> property changes</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.ButtonClickCommand">
 <summary>Gets command to be executed when button is clicked.</summary>
 <returns>Command to be execued when button is clicked</returns>
 <remarks>Pass <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> to command parameter</remarks>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl._ButtonClickCommand">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.ButtonClickCommand"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.InitializeCommands">
 <summary>Initializes comands</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnButtonClick(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Called when <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.ButtonClickCommand"/> is invoked</summary>
 <param name="sender">Source of event (<see cref="T:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl"/>)</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnButtonClick(System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Called whne button is clicked</summary>
 <param name="e">Event arguments. <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> can be retrieved from <paramref name="e"/>.<see cref="P:System.Windows.RoutedEventArgs.OriginalSource">OriginalSource</see>.<see cref="P:System.Windows.FrameworkElement.DataContext">DataContext</see></param>
 <remarks>This implementation calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OnClick"/></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnApplyTemplate">
 <summary>Is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.                </summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.SetCustomControls">
 <summary>Sets custom controls</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.BottomControl">
 <summary>Gets or sets bottom additional control</summary>
 <returns>Bottom additional control, first child of <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_BottomControlPlaceholder"/>-named item</returns>
 <value>Removes all children from <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_BottomControlPlaceholder"/>-named item and places value there.</value>
 <remarks>Override this property when your class does not use <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_BottomControlPlaceholder"/> of type <see cref="T:System.Windows.Controls.Panel"/></remarks>
 <exception cref="T:System.ObjectDisposedException">Value is being set and <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.IsDisposed"/> is true.</exception>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.TopControl">
 <summary>Gets or sets top additional control</summary>
 <returns>Bottom additional control, first child of <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_TopControlPlaceholder"/>-named item</returns>
 <value>Removes all children from <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_TopControlPlaceholder"/>-named item and places value there.</value>
 <remarks>Override this property when your class does not use <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_TopControlPlaceholder"/> of type <see cref="T:System.Windows.Controls.Panel"/></remarks>
 <exception cref="T:System.ObjectDisposedException">Value is being set and <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.IsDisposed"/> is true.</exception>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.MidControl">
 <summary>Gets or sets middle additional control</summary>
 <returns>Bottom additional control, first child of <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_MiddleControlPlaceholder"/>-named item</returns>
 <value>Removes all children from <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_MiddleControlPlaceholder"/>-named item and places value there.</value>
 <remarks>Override this property when your class does not use <see cref="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.PART_MiddleControlPlaceholder"/> of type <see cref="T:System.Windows.Controls.Panel"/></remarks>
 <exception cref="T:System.ObjectDisposedException">Value is being set and <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.IsDisposed"/> is true.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnWindowClosed">
 <summary>Called wnem message box windows closes</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.OnWindowChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Windows.Window})">
 <summary>Called when window associated with <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.MessageBox"/> changes</summary>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl._IsDisposed">
 <summary>To detect redundant calls</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.IsDisposed">
 <summary>Gets value indicationg if this control was disposed</summary>
 <returns>True if this control was already disposed</returns>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.Dispose(System.Boolean)">
 <summary>Implements <see cref="M:System.IDisposable.Dispose"/></summary>
 <param name="disposing">True when disposing</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <filterpriority>2</filterpriority>
</member>
<member name="E:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.Disposed">
 <summary>Raised when this control is disposed</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.Finalize">
 <summary>Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" /> is reclaimed by garbage collection.</summary>
 <remarks>This method cannot be overridn, override <see cref="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.Dispose"/> instead.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl.GetCopyText">
 <summary>Gets full textual representation of message box</summary>
 <returns>Textual representation of messagesbox including <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Title"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Prompt"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> and <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/></returns>
 <remarks>Custom controls - <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> and <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> are not included in text</remarks>
 <vertion version="1.5.3" stage="Nightly">This function is new in version 1.5.3</vertion>
</member>
<member name="T:Tools.WindowsT.WPF.DialogsT.MessageBox">
 <summary>Implements <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> for Windows Presentation Foundation</summary>
 <remarks>Message box user interface is implemented by <see cref="T:Tools.WindowsT.WPF.DialogsT.MessageBoxImplementationControl"/>. To change style or template of message box, use that control.</remarks>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
 <version version="1.5.3" stage="Beta">Added support for <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Window"/> as message box owner required by changes in <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></version>
 <version version="1.5.3" stage="Beta">Owner of dialog now can be any <see cref="T:System.Windows.DependencyObject"/> hosted in <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3">Messages are now centered to thair owner (if some conditions are met).
 The conditions are: Owner is specified and - Owner is <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Window"/> or it's <see cref="T:System.Windows.DependencyObject"/> for which a <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Window"/> can be determined using <see cref="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)"/> -or- 
 Owner is <see cref="T:System.Windows.Forms.Control"/> -or-
 Owner is either <see cref="T:System.Windows.Forms.IWin32Window"/> or <see cref="T:System.Windows.Interop.IWin32Window"/> and it's handle represents <see cref="N:System.Windows.Controls"/> -or-
 <para>
 If owner is <see cref="T:System.Windows.Forms.Control"/> dialog is centered to control's parent <see cref="T:System.Windows.Forms.Form"/> (if it can be determined using <see cref="M:System.Windows.Forms.Control.FindForm"/>). If <see cref="T:System.Windows.Forms.Form"/> cannot be determined the dialog is centered to control itself.
 If owner is <see cref="T:System.Windows.DependencyObject"/> dialog is centered to parent <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Window"/> of the <see cref="T:System.Windows.DependencyObject"/>. If parent <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Window"/> cannot be found (using <see cref="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)"/>) the dialog is not centered at all.
 </para>
 <para>If owner is either <see cref="T:System.Windows.Forms.IWin32Window"/> or <see cref="T:System.Windows.Interop.IWin32Window"/> and no corresponding <see cref="T:System.Windows.Forms.Control"/> can be found (using <see cref="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)"/>) the dialog is not centered. (This is considered a limitation which may be fixed in one of next versions.)</para></version>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBox.TitleFormatWithTimer">
 <summary>Format of title with timer</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.Close(System.Windows.Forms.DialogResult)">
 <summary>Closes message box with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/></summary>
 <param name="Response">Response to close window with</param>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBox.__Window">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Window"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Window">
 <summary>Gets or sets window representing message box usre interface</summary>
 <returns>Window representing message box user interface</returns>
 <value>Window to represent message box user interface</value>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.OnWindowClosed(Tools.IReportsChange.ValueChangedEventArgs{System.Windows.Window})">
 <summary>Raiese the <see cref="E:Tools.WindowsT.WPF.DialogsT.MessageBox.WindowChanged"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.WPF.DialogsT.MessageBox.WindowChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Window"/> property changes</summary>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.MessageBox._Control">
 <summary>Gets or sets value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Control"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Control">
 <summary>Gets or sets control implementing message box user interface</summary>
 <returns>Control implementing message box user interface</returns>
 <value>Control to represent message box user interface</value>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.PerformDialog(System.Boolean,System.Object)">
 <summary>Shows the dialog</summary>
 <param name="Modal">Indicates if dialog should be shown modally (true) or modells (false)</param>
 <param name="Owner">Parent window of dialog (may be null).  This implementation recognizes values of type <see cref="T:System.Windows.Forms.IWin32Window"/>, <see cref="T:System.Windows.Interop.IWin32Window"/>, <see cref="T:System.Windows.Window"/> and <see cref="T:System.Windows.DependencyObject"/> (if hosted in <see cref="T:System.Windows.Window"/>). Unrecognized owners are treated as null.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/>. Overriding method shall check this condition and thrown an exception if condition is vialoted.</exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support <see cref="T:System.Windows.Forms.IWin32Window"/>, <see cref="T:System.Windows.Interop.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3" stage="Beta">The <paramref name="Owner"/> parameter acceps <see cref="T:System.Windows.DependencyObject"/> for which <see cref="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)"/> returns non-null value.</version>
 <version version="1.5.3">Parameters renamed: <c>Modal</c> to <c>modal</c>; <c>Owner</c> to <c>owner</c></version>
 <version version="1.5.3">Changed so that message box is now centered to it's parent (as long as the parent is <see cref="T:System.Windows.Forms.Control"/>, <see cref="T:System.Windows.Window"/> (or <see cref="T:System.Windows.DependencyObject"/> from a <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Window"/>) or <see cref="T:System.Windows.Forms.IWin32Window"/> or <see cref="T:System.Windows.Interop.IWin32Window"/> representing <see cref="T:System.Windows.Forms.Control"/>). See class documentation for details.</version>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.OnChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Changed"/> event</summary>
 <param name="e">Event parameters</param>
 <remarks><note type="ineritinfo">This implementtion calls itself with another value of <paramref name="e"/> when specific propeties changed causing <see cref="T:Tools.IReportsChange"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> to work for properties introduced by this implementation. Call bas class method in order this implemntation to work.</note></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.OnCountDown(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.CountDown"/> event</summary>
 <param name="e">Event argument</param>
 <remarks>Derived class should override this method in order to catch change of count down remaining time and call base class method.</remarks>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBox.TitleWithTimer">
 <summary>Gets window title including any possible timer (wehn appropriate)</summary>
 <returns><see cref="P:Tools.WindowsT.IndependentT.MessageBox.Title"/>, with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CurrentTimer"/> appended when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton"/> is -1 and <see cref="P:Tools.WindowsT.IndependentT.MessageBox.IsCountDown"/> is true</returns>
 <remarks>Chage of value of this property is reportyed only via <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, not via <see cref="T:Tools.IReportsChange"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.OptionsToHorizontalAlignment(Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
 <summary>Converts <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/> to <see cref="T:System.Windows.HorizontalAlignment"/></summary>
 <param name="Options">An <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/></param>
 <returns>Extracted alignment from <paramref name="Options"/> converted to <see cref="T:System.Windows.HorizontalAlignment"/>. Fallback value is <see cref="F:System.Windows.HorizontalAlignment.Left"/>.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBox.PromptAlign">
 <summary>Gets or sets value of alignment stored in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/></summary>
 <returns>Extracted value of alignent stored in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/> converted to <see cref="T:System.Windows.HorizontalAlignment"/>. Never returns <see cref="F:System.Windows.HorizontalAlignment.Stretch"/>.</returns>
 <value>New valuef alignment to store in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/>. Any unknown value is converted to <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft"/>.</value>
 <remarks>When setting value of this property any alignment-unrelated bits remains untouched.
 <para>Change of this property is reported via <see cref="T:Tools.IReportsChange"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</para></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.OptionsToFlowDirection(Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
 <summary>Converts <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/> to <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.FlowDirection"/></summary>
 <param name="Options">An <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/></param>
 <returns><see cref="F:System.Windows.FlowDirection.RightToLeft"/> when <paramref name="Options"/> has <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Rtl"/> bit set; <see cref="F:System.Windows.FlowDirection.LeftToRight"/> otherwise.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBox.FlowDirection">
 <summary>gets or set value indicating bidirectionl flow direction stored in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/></summary>
 <returns><see cref="F:System.Windows.FlowDirection.RightToLeft"/> when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/> has <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Rtl"/> bit set; <see cref="F:System.Windows.FlowDirection.LeftToRight"/> otherwise.</returns>
 <value>If value being set is <see cref="F:System.Windows.FlowDirection.RightToLeft"/> then the <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Rtl"/> bit of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/> is set;+ otherwise it is unset.</value>
 <remarks>Change of this property is reported via <see cref="T:Tools.IReportsChange"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</remarks>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBox.IconImage">
 <summary>Gets or sets <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Icon"/> image as <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.</summary>
 <returns>Value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Icon"/> property as <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>. This property teruns new instace for each call.</returns>
 <value>Sets value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Icon"/> property</value>
 <remarks>Value of this property is internaly stored as <see cref="T:System.Drawing.Image"/> inside the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Icon"/> property.
 <para>Change of this property is reported via <see cref="T:Tools.IReportsChange"/> and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interfaces</para></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.WPF.DialogsT.MessageBox.PropertyChanged"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks><note type="inheritnfo">Always call bae class method in order the event to be raised.</note></remarks>
</member>
<member name="E:Tools.WindowsT.WPF.DialogsT.MessageBox.PropertyChanged">
 <summary>Occurs when a property value changes.</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.GetTextWithAccessKey(System.String,System.Char)">
 <summary>Gets text which contains Accesskey marker (_)</summary>
 <param name="Text">Text (if it contains character used as accesskey markers they must be escaped)</param>
 <param name="AccessKey">Char representing accesskey (if char is not in <paramref name="Text"/> no accesskey marker should be inserted)</param>
 <returns><paramref name="Text"/> with accesskey denoted in it by _.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBox.TopControlControl">
 <summary>gets <see cref="T:System.Windows.UIElement"/> representation of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> if possible</summary>
 <returns><see cref="T:System.Windows.UIElement"/> which represents <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> if possible, null otherwise</returns>
 <seealso cref="M:Tools.WindowsT.WPF.DialogsT.MessageBox.GetControl(System.Object)"/><seealso cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.MidControlControl"/><seealso cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.BottomControlControl"/>
 <seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBox.MidControlControl">
 <summary>Gets <see cref="T:System.Windows.UIElement"/> representation of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> if possible</summary>
 <returns><see cref="T:System.Windows.UIElement"/> which represents <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> if possible, null otherwise</returns>
 <seealso cref="M:Tools.WindowsT.WPF.DialogsT.MessageBox.GetControl(System.Object)"/><seealso cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.TopControlControl"/><seealso cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.BottomControlControl"/>
 <seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.MessageBox.BottomControlControl">
 <summary>Gets <see cref="T:System.Windows.UIElement"/> representation of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> if possible</summary>
 <returns><see cref="T:System.Windows.UIElement"/> which represents <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> if possible, null otherwise</returns>
 <seealso cref="M:Tools.WindowsT.WPF.DialogsT.MessageBox.GetControl(System.Object)"/><seealso cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.TopControlControl"/><seealso cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.MidControlControl"/>
 <seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBox.GetControl(System.Object)">
 <summary>Gets control from object</summary>
 <param name="Control">Object that represents a control. It can be <see cref="T:System.Windows.Forms.Control"/>, <see cref="T:System.Windows.UIElement"/></param>
 <returns><see cref="T:System.Windows.UIElement"/> which represents <paramref name="Control"/>. For same <paramref name="Control"/> returns same <see cref="P:Tools.WindowsT.WPF.DialogsT.MessageBox.Control"/>. Returns null if <paramref name="Control"/> is null or it is of unsupported type.</returns>
</member>
<member name="T:Tools.WindowsT.WPF.DialogsT.MessageBoxWindow">
 <summary>Window that impements WPF message box</summary>
 <version version="1.5.3." stage="Nightly">Added ability to copy all text of message box using Ctrl+C</version>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxWindow.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
 <summary>Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.                 </summary>
 <param name="sizeInfo">Details of the old and new size involved in the change.</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Window.Closing" /> event.</summary>
 <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.MessageBoxWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl">
 <summary>Implements user interface for <see cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitor"/></summary>
 <remarks>You shuld not use this class/control directly unless you are styling it.</remarks>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.PART_MainInfo">
 <summary>Identifies template part representing main information text block</summary>
 <remarks>This template part is optional. If present must be of type <see cref="T:System.Windows.Controls.TextBlock"/> and <see cref="P:System.Windows.Controls.TextBlock.Text"/> should be bound to <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Prompt"/> property.</remarks>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.PART_ProgressBar">
 <summary>Identifies template part representing progress bar</summary>
 <remarks>This template part is optional. If present must be of type <see cref="T:System.Windows.Controls.ProgressBar"/> and <see cref="P:System.Windows.Controls.Primitives.RangeBase.Value"/> should be bound to <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Progress"/> property and <see cref="P:System.Windows.Controls.ProgressBar.IsIndeterminate"/> should be bound to <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.ProgressBarStyle"/>.</remarks>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.PART_Info">
 <summary>Identifies template part representing secondary information text block</summary>
 <remarks>This template part is optional. If present must be of type <see cref="T:System.Windows.Controls.TextBlock"/> and <see cref="P:System.Windows.Controls.TextBlock.Text"/> should be bound to <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Information"/> property.</remarks>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.PART_Cancel">
 <summary>Identifies template part representing cancel button</summary>
 <remarks>This template part is optional. If present must be of type <see cref="T:System.Windows.Controls.Button"/> and should be bound to <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelCommand"/>.</remarks>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.PART_ProgressInfo">
 <summary>Identifies template part representing texttual information about current progress</summary>
 <remarks>This template part is optional. If present must be of type <see cref="T:System.Windows.Controls.TextBlock"/> and <see cref="P:System.Windows.Controls.TextBlock.Text"/> should be bound to <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.ProgressInfo"/> property.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.#cctor">
 <summary>Initializer</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelCommand">
 <summary>Gets command to be executed when button is clicked.</summary>
 <returns>Command to be execued when button is clicked</returns>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl._CancelCommand">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelCommand"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.InitializeCommands">
 <summary>Initializes comands</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CanCancel(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
 <summary>Called to determine wheather the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelCommand"/> can be executed</summary>
 <param name="sender">Source of event (<see cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl"/>)</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CanCancel(System.Windows.Input.CanExecuteRoutedEventArgs)">
 <summary>Called to determine wheather the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelCommand"/> can be executed</summary>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.OnCancel(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Called when <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelCommand"/> is invoked</summary>
 <param name="sender">Source of event (<see cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl"/>)</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.OnCancel(System.Windows.Input.ExecutedRoutedEventArgs)">
 <summary>Called when the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelCommand"/> is executed; raises the <see cref="E:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Cancel"/> event</summary>
 <param name="e">Event arguments.</param>
</member>
<member name="E:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Cancel">
 <summary>Raised when user requests operation to be cancelled</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.ProgressBarStyle">
 <summary>Gets or sets current style of progress bar</summary>
 <value>True to show progressbar which indicates percentage progress of operation, false to show progressbar which only indicates that something is going on but does not indicate actual progress</value>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.ProgressBarStyleProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.ProgressBarStyle"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Progress">
 <summary>Gets or sets current progress shown by progressbar</summary>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.ProgressProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Progress"/> property</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CoerceProgressValue(System.Windows.DependencyObject,System.Object)">
 <summary>Called whenever a value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Progress"/> dependency property is being re-evaluated, or coercion is specifically requested.</summary>
 <param name="d">The object that the property exists on. When the callback is invoked, the property system passes this value.</param>
 <param name="baseValue">The new value of the property, prior to any coercion attempt.</param>
 <returns>The coerced value (with appropriate type).</returns>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="d"/> is not of type <see cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl"/> -or- <paramref name="baseValue"/> is not of type <see cref="T:System.Int32"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="d"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CoerceProgressValue(System.Int32)">
 <summary>Called whenever a value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Progress"/> dependency property is being re-evaluated, or coercion is specifically requested.</summary>
 <param name="baseValue">The new value of the property, prior to any coercion attempt, but ensured to be of correct type.</param>
 <returns>The coerced value (with appropriate type). 0 whan <paramref name="baseValue"/> is lower than 0; 100 when <paramref name="baseValue"/> is greater than 100; <paramref name="baseValue"/> otherwise.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Prompt">
 <summary>Gets or sets prompt shown in window</summary>      
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.PromptProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Prompt"/> property</summary>                                                   
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Information">
 <summary>Gets or sets additional information shown in the window</summary>      
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.InformationProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Information"/> property</summary>                                                   
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Title">
 <summary>Gets or sets title of progress monitor window</summary>      
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.TitleProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.Title"/> property</summary>                                                   
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelEnabled">
 <summary>Gets or sets value indicating if cancel button is enabled</summary>      
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelEnabledProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelEnabled"/> property</summary>                                                   
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelPending">
 <summary>Gets or sets value idicating if user clicked the cance button and we are waiting for background process to terminate</summary>      
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelPendingProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelPending"/> property</summary>                                                   
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.ProgressInfo">
 <summary>Gets or sets textual information about current progress</summary>      
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.ProgressInfoProperty">
 <summary>Metadata of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.ProgressInfo"/> property</summary>                                                   
</member>
<member name="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitor">
 <summary>This class provides predefined progress monitor with <see cref="T:System.Windows.Controls.ProgressBar"/> for <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/></summary>
 <remarks>See documentation of the <see cref="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ApplyUserState(System.Object)"/> method in order to review rich options for reporting progress.</remarks>
 <seelaso cref="T:Tools.WindowsT.FormsT.ProgressMonitor"/>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.#ctor">
 <summary>Default CTor</summary>
 <remarks>Value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/> property is populated with new instance of <see cref="T:System.ComponentModel.BackgroundWorker"/></remarks>
 <filterpriority>3</filterpriority>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.#ctor(System.ComponentModel.BackgroundWorker)">
 <summary>CTor</summary>
 <param name="bgw"><see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/> this form will report progress for</param>
 <exception cref="T:System.ArgumentNullException" ><paramref name="bgw"/> is null</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.#ctor(System.ComponentModel.BackgroundWorker,System.String,System.String)">
 <summary>CTor with title text and prompt</summary>
 <param name="bgw"><see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/> this form will report progress for</param>
 <exception cref="T:System.ArgumentNullException" ><paramref name="bgw"/> is null</exception>
 <param name="title">Title text of window (see <see cref="N:System.Text"/>)</param>
 <param name="prompt">Prompt text (see <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Prompt"/>)</param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ShowDialog(System.ComponentModel.BackgroundWorker,System.String,System.String,System.Object,System.Object)">
 <summary>Shows progress form and runs worker</summary>
 <param name="bgw">Worker to run</param>
 <param name="Text">Title text of window (see <see  cref="N:System.Text"/>)</param>
 <param name="Prompt">Text prompt (see <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Prompt"/>)</param>
 <param name="Owner">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"/> or <see cref="T:System.Windows.Interop.IWin32Window"/>, or <see cref="T:System.Windows.Window"/> that represents the top-level window that will own the modal dialog box.</param>
 <param name="WorkerArgument">Optional parameter for background worker</param>
 <returns>Result of work of <paramref name="bgw"/></returns>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.__window">
 <summary>Window being currently shown</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ShowDialog(System.Object)">
 <summary>Shows window modally</summary>
 <param name="owner">Owner object of dialog. It can be either <see cref="T:System.Windows.Forms.IWin32Window"/> (e.g. <see cref="T:System.Windows.Forms.Form"/>), <see cref="T:System.Windows.Interop.IWin32Window"/> or <see cref="T:System.Windows.Window"/>. When owner is not of recognized type (or is null), it's ignored.</param>
 <returns>True when dialog was closed normally, false if it was closed because of user has cancelled the operation</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been dispose (<see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.IsDisposed"/> is true).</exception>
</member>
<member name="E:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.WindowLoaded">
 <summary>Raised when window showing progress is shown.</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.OnWindowLoaded(System.Windows.RoutedEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.WindowLoaded"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitor._bgw">
 <summary>A background worker which does the work</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker">
 <summary>Gets <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/> this form repports progress of</summary>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressBarStyle">
 <summary>Gets or sets current style of progress bar</summary>
 <remarks>When value of this property is not one of values defined in the <see cref="T:Tools.WindowsT.IndependentT.ProgressBarStyle"/> enumeration, it means the prograss bar reports current status in an implementation-specific way. When property is set to unrecognized value this implementation does not corce it and treats it as <see cref="F:Tools.WindowsT.IndependentT.ProgressBarStyle.Definite"/>. Custom control style can take benefit of such value.</remarks>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Progress">
 <summary>Gets or sets current value of <see cref="T:System.Windows.Controls.ProgressBar"/> that reports progress</summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is smaller than 0 or greater than 100.</exception>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitor._CloseOnFinish">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.CloseOnFinish"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.CloseOnFinish">
 <summary>Gets or sets value indicating if form automatically closes when <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/>.<see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">RunWorkerCompleted</see> event occures.</summary>
 <value>New behavoir. Defalt value is true.</value>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitor._WorkerResult">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.WorkerResult"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.WorkerResult">
 <summary>Gets or sets result of <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/> work</summary>
 <returns>Null until <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event occures. That returns its e parameter.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Prompt">
 <summary>Gets or sets prompt diaplyed in upper part of form</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Information">
 <summary>Gets or sets informative text displayed below the progress bar</summary>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitor._CanCancel">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.CanCancel"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.CanCancel">
 <summary>Gets or sets value indicationg if dialog supports cancelation</summary>
 <value>Default value depends on <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/>.<see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">WorkerSupportsCancellation</see> in time when it is passed to CTor.</value>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitor._DoWorkOnShow">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.DoWorkOnShow"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.DoWorkOnShow">
 <summary>Gets or sets value indicationg if form will call <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/>.<see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">RunWorkerAsync</see> when dialog is shown.</summary>
 <seelaso cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.WorkerArgument"/>
 <value>Default value is true</value>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitor._WorkerArgument">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.WorkerArgument"/> property</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.WorkerArgument">
 <summary>Gets or sets value of argument passed to <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> when <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.DoWorkOnShow"/> is true</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Title">
 <summary>Gets or sets dialog title</summary>
 <value>Title of window showing the progress. Default value is localized word "Progress"</value>
 <returns>Current title of window showing progress</returns>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.CancelEnabled">
 <summary>Gets value indicating if Cancle button is enabled</summary>
 <returns>True when both - <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.CanCancel"/> and <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.CancelPending"/> are enabled</returns>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.CancelPending">
 <summary>Gets or sets value indicating if user has pressed the Cancel button and dialog is now waiting for process to cancel itself</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.IProgressMonitorUI_OwnerObject">
 <summary>Gets an object that can be used as owner for modal windows</summary>
 <returns>When progress monitor dialog is currently shown, returns a <see cref="T:System.Windows.Window"/> representing the dialog; otherwise null.</returns>
 <seelaso cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Window"/>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Window">
 <summary>Gets an object that can be used as owner for modal windows</summary>
 <returns>When progress monitor dialog is currently shown, returns a <see cref="T:System.Windows.Window"/> representing the dialog; otherwise null.</returns>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.WorkerFinished">
 <summary>Gets or sets value indicating if worker has finished it's work</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressInfoAuto">
 <summary>Indicates if value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressInfo"/> property is being changed automatically or manually</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressInfo">
 <summary>Gets or sets value describing current progress in textual form</summary>
 <remarks>
 By default value of this property changes automatically depending on <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Progress"/> and <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressBarStyle"/>.
 Once you set value of this property manually this automatic behavior is suspended. It can be reset by changing <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressInfoAuto"/> property.
 </remarks>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.SetProgressInfo(System.String)">
 <summary>Sets value of the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressInfo"/> property without setting <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressInfoAuto"/> to false.</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.OnProgressChanged(System.ComponentModel.BackgroundWorker,System.ComponentModel.ProgressChangedEventArgs)">
 <summary>Handles <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/>.<see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged">ProgressChanged</see> event</summary>
 <param name="sender"><see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/></param>
 <param name="e">Event erguments</param>
 <remarks>
 When <paramref name="e"/>.<see cref="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">ProgressPercentage</see> is greater than or equal to zero its passed to the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Progress"/> property. Values less than zero are ignored.
 For information on how this implementation handles <paramref name="e"/>.<see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState">UserState</see> see <see cref="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ApplyUserState(System.Object)"/>.</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="e"/>.<see cref="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">ProgressPercentage</see> is greater than 100.</exception>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ApplyUserState(System.Object)">
 <summary>Applies user state passed to <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState"/></summary>
 <param name="userState">User state originally passed to <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState"/>.</param>
 <remarks>This impementation handles <paramref name="userState"/> following way depending on its type:
 <list type="table">
 <listheader><term>Type of <paramref name="userState"/></term><description>Action taken</description></listheader>
 <item><term><see cref="T:System.Windows.Forms.ProgressBarStyle"/> or <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressBarStyle"/></term><description>Value is passsed to the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressBarStyle"/> property.</description></item>
 <item><term><see cref="T:System.String"/></term><description>Value is passed to the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Information"/> property.</description></item>
 <item><term><see cref="T:System.Int32"/> (from range 0÷100)</term><description>Value is passed to the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Progress"/> property (same as passing the value to the <see cref="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage"/>)</description></item>
 <item><term><see cref="T:System.Boolean"/></term><description>Value is passed to the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.CanCancel"/> property.</description></item>
 <item><term><see cref="T:System.ComponentModel.BackgroundWorker"/> (same instance as <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/>)</term><description>The <see cref="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Reset"/> method is called.</description></item>
 <item><term><see cref="T:Tools.NumericsT.SRational"/> or <see cref="T:Tools.NumericsT.URational"/></term><description>String representation of value is passed to the <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ProgressInfo"/> property and automatic percent showing based on <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Progress"/> is suspended.</description></item>
 <item><term><see cref="T:System.Array"/> (any type)</term><description>Calls <see cref="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.ApplyUserState(System.Object)"/> with individual items of the array.</description></item>
 <item><term>Null or any other type</term><description>Ignored</description></item>
 </list></remarks>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.OnRunWorkerCompleted(System.ComponentModel.BackgroundWorker,System.ComponentModel.RunWorkerCompletedEventArgs)">
 <summary>Handles <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/>.<see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">RunWorkerCompleted</see> event.</summary>
 <param name="sender"><see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/></param>
 <param name="e">event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Reset">
 <summary>Resets the dialog</summary>
 <remarks>In case you want to use the dialog from multiple runs of <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/>, you should call this method before each (excluding first, but you can to) runs of <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.BackgroundWorker"/>. Alternativly you can report new run using <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> - see <see cref="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.OnProgressChanged(System.ComponentModel.BackgroundWorker,System.ComponentModel.ProgressChangedEventArgs)"/>.</remarks>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed (<see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.IsDisposed"/> is true)</exception>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.PropertyChanged"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.OnPropertyChanged(System.String)">
 <summary>Raises the <see cref="E:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.PropertyChanged"/> event</summary>
 <param name="propertyName">The name of the property that changed</param>
</member>
<member name="E:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.PropertyChanged">
 <summary>Occurs when value of a property changes.</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.IInvoke_Invoke(System.Delegate,System.Object[])">
 <summary>Synchronously invokes a delegate in UI thread. Implements <see cref="M:Tools.ThreadingT.IInvoke.Invoke(System.Delegate,System.Object[])"/>.</summary>
 <param name="delegate">A delegate to be invoked</param>
 <param name="params">Delegate parameters</param>
 <returns>Result of delegate call</returns>
 <remarks>Delegate is invoked in UI thtread only in case UI is shown (window had been shown and has not been closed yet), otherwise (or when <see cref="P:System.Windows.Threading.DispatcherObject.Dispatcher"/> does not require it) delegate is invoked in current thread.
 <para>This function is named <c>IInvoke_Invoke</c> to make extension functions in <see cref="T:Tools.ThreadingT.IInvokeExtensions"/> to be always called instead of this function whan used with <see cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitor"/>.</para></remarks>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.IsDisposed">
 <summary>Gest value indicating if this object has already been disposed</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Dispose(System.Boolean)">
 <summary>Implements <see cref="M:System.IDisposable.Dispose"/></summary>
 <param name="disposing">True bif object is being disposed, falsse when object is being finalized</param>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <remarks><note type="inheritinfo">To override <see cref="T:System.IDisposable"/> behavior override <see cref="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitor.Dispose(System.Boolean)"/> overload instead.</note></remarks>
</member>
<member name="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow">
 <summary>Implements window which shows <see cref="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow.progressMonitor"/></summary>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow.progressMonitor">
 <summary>A <see cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitor"/> displayed by this window</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow.#ctor(Tools.WindowsT.WPF.DialogsT.ProgressMonitor)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow"/> class</summary>
 <param name="progressMonitor">A <see cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitor"/> to be shown by this window</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="progressMonitor"/> is null</exception>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow.allowClose">
 <summary>When true window can be closed without check if <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelCommand"/> can be executed</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow.ForceClose">
 <summary>Closes the window without check if <see cref="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorImplementationControl.CancelCommand"/> can be executed</summary>
</member>
<member name="P:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow.ImplementationControl">
 <summary>Gets control implementing progress monitor UI</summary>
</member>
<member name="F:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow._Control">
<summary>
Control Name Field
</summary>
</member>
<member name="M:Tools.WindowsT.WPF.DialogsT.ProgressMonitorWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:Tools.WindowsT.WPF.WpfExtensions">
 <summary>Contains varios extenstion functions related to Windows Presentation Foundation</summary>
 <version version="1.5.2">Module introduced</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.GetVisualParent(System.Windows.DependencyObject)">
 <summary>Gets parent (in visual tree) of given <see cref="T:System.Windows.DependencyObject"/></summary>
 <param name="obj"><see cref="T:System.Windows.DependencyObject"/> to get parent of</param>
 <returns>Parent of given dependency object; null when <paramref name="obj"/> is null or no parent can be found</returns>
 <remarks>Parent is obtained either via <see cref="M:System.Windows.ContentOperations.GetParent(System.Windows.ContentElement)"/> for <see cref="T:System.Windows.ContentElement">ContentElement</see> or via <see cref="M:System.Windows.Media.VisualTreeHelper.GetParent(System.Windows.DependencyObject)"/>.</remarks>
 <author www="http://code.logos.com/blog/2008/02/finding_ancestor_elements_in_w.html">Ed Ball</author>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.GetVisualAncestor``1(System.Windows.DependencyObject)">
 <summary>Looks for visual tree ancestor of given <see cref="T:System.Windows.DependencyObject"/> of given type</summary>
 <param name="obj">A <see cref="T:System.Windows.DependencyObject"/> to get ancestor of</param>
 <typeparam name="TParent">Type of ancestor to get</typeparam>
 <returns>Nearest ancestor of <paramref name="obj"/> which of type <typeparamref name="TParent"/>; null when such ancestor cannot be found.</returns>
 <remarks>This function uses <see cref="M:Tools.WindowsT.WPF.WpfExtensions.GetVisualParent(System.Windows.DependencyObject)"/> to get parents of investigated <see cref="T:System.Windows.DependencyObject">DependencyObjects</see>.</remarks>
 <seelaso cref="M:Tools.WindowsT.WPF.WpfExtensions.GetVisualParent(System.Windows.DependencyObject)"/>
 <version stage="Nightly" version="1.5.3">This function is new in version 1.5.3</version> 
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.ShowDialog(System.Windows.Window,System.Windows.UIElement)">
 <summary>Sets window owner and opens it and returns only when the newly opened window is closed.</summary>
 <returns>A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that signifies how a window was closed by the user.</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="M:System.Windows.Window.ShowDialog" /> is called on a <see cref="T:System.Windows.Window" /> that is visible -or- <see cref="M:System.Windows.Window.ShowDialog" /> is called on a visible <see cref="T:System.Windows.Window" /> that was opened by calling <see cref="M:System.Windows.Window.ShowDialog" />. -or-
 <see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <param name="Window">Window to be shown</param>
 <param name="Owner">Owner <see cref="T:System.Windows.Window"/> or element in <see cref="T:System.Windows.Window"/> to show <paramref name="Window"/> modally against.</param>
 <remarks>If <paramref name="Owner"/> is null or <paramref name="Owner"/> is not of type <see cref="T:System.Windows.Window"/> and function <see cref="!:GetVisualParent(Of Window)"/> cannot find parent <see cref="T:System.Windows.Window"/> of <paramref name="Owner"/>, <paramref name="Owner"/> is ignored and original <see cref="P:System.Windows.Window.Owner"/> is kept.</remarks>
 <version stage="Nightly" version="1.5.3">This function is new in version 1.5.3</version> 
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.FindVisualChildren(System.Windows.DependencyObject,System.Func{System.Windows.DependencyObject,System.Boolean},System.Boolean)">
 <summary>Enumerates all the visual children of given <see cref="T:System.Windows.DependencyObject"/> which conform to given condition</summary>
 <param name="parent">A <see cref="T:System.Windows.DependencyObject"/> to look for children in</param>
 <param name="condition">Condition to be used to filer children objects</param>
 <param name="onlyFirstLevel">True not to look inside objects fulfilling the condition, false to enumerate children of these objects recursivelly.</param>
 <returns>Visual children of <paramref name="parent"/> fulfilling <paramref name="condition"/>. If <paramref name="onlyFirstLevel"/> is false search is done inside these objects as well and objects are returned in in-order order.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is null or <paramref name="condition"/> is null.</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.FindVisualChildren``1(System.Windows.DependencyObject,System.Boolean)">
 <summary>Enumerates all the visual children of given <see cref="T:System.Windows.DependencyObject"/> of given type</summary>
 <typeparam name="T">Type (derived from <see cref="T:System.Windows.DependencyObject"/>) to to serach for children of</typeparam>
 <param name="parent">A <see cref="T:System.Windows.DependencyObject"/> to look for children in</param>
 <param name="onlyFirstLevel">True not to look inside objects of type <typeparamref name="T"/>, false to enumerate children of these objects recursivelly.</param>
 <returns>Visual children of <paramref name="parent"/> of type <typeparamref name="T"/>. If <paramref name="onlyFirstLevel"/> is false search is done inside these objects as well and objects are returned in in-order order.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is null.</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.FindVisualChild(System.Windows.DependencyObject,System.Func{System.Windows.DependencyObject,System.Boolean})">
 <summary>Finds first visual child of given <see cref="T:System.Windows.DependencyObject"/> which conforms to given condition</summary>
 <param name="parent">A <see cref="T:System.Windows.DependencyObject"/> to search for visual child of</param>
 <param name="condition">Function evaluated for each visual child of <paramref name="parent"/> until conforming child is found</param>
 <returns>First visual child of <paramref name="parent"/> for which <paramref name="condition"/> returns true; null when no such child can be found</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is null -or- <paramref name="condition"/> is null</exception>
 <version version="1.3.5" stage="Nightly">This function is new in version 1.3.5</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.FindVisualChild``1(System.Windows.DependencyObject)">
 <summary>Finds first visual child of given <see cref="T:System.Windows.DependencyObject"/> of specific type</summary>
 <param name="parent">A <see cref="T:System.Windows.DependencyObject"/> to search for visual child of</param>
 <typeparam name="T">Type of child to search for</typeparam>
 <returns>First visual child of <paramref name="parent"/> which is of type <typeparamref name="T"/>; null when no such child can be found</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is null</exception>
 <version version="1.3.5" stage="Nightly">This function is new in version 1.3.5</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.FindVisualChild``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
 <summary>Finds first visual child of given <see cref="T:System.Windows.DependencyObject"/> of specific type which conforms to given condition</summary>
 <param name="parent">A <see cref="T:System.Windows.DependencyObject"/> to search for visual child of</param>
 <param name="condition">Function evaluated for each visual child of <paramref name="parent"/> which is of type <typeparamref name="T"/> until conforming child is found</param>
 <typeparam name="T">Type of child to search for</typeparam>
 <returns>First visual child of <paramref name="parent"/> which is of type <typeparamref name="T"/> and which conforms to <paramref name="condition"/>; null when no such child can be found</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is null -or- <paramref name="condition"/> is null</exception>
 <version version="1.3.5" stage="Nightly">This function is new in version 1.3.5</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.FindLogicalAncestor``1(System.Windows.DependencyObject)">
 <summary>Searches for ancestor of given WPF object of given type in logical tree</summary>
 <param name="obj">Object to find ancestor of</param>
 <typeparam name="TAncestor">Type of ancestor to find. This type must be or derive from <see cref="T:System.Windows.DependencyObject"/>.</typeparam>
 <returns>The closest ancestor of object <paramref name="obj"/> which's type is <typeparamref name="TAncestor"/>. Null where there is no such ancestor.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
 <remarks>
 This function uses <see cref="M:System.Windows.ContentOperations.GetParent(System.Windows.ContentElement)"/> to walk visual tree upwards from <paramref name="obj"/>.
 <para>If <typeparamref name="TAncestor"/> is <see cref="T:System.Windows.Window"/> (not type derived from <see cref="T:System.Windows.Window"/>) <see cref="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)"/> is used instead.</para>
 </remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.LogicalParent(System.Windows.DependencyObject)">
 <summary>Returns the parent object of the specified object by processing the logical tree.</summary>
 <param name="obj">The object to find the parent object for. This is expected to be either a <see cref="T:System.Windows.FrameworkElement"/> or a <see cref="T:System.Windows.FrameworkContentElement"/>.</param>
 <returns>The requested parent object.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
 <seelaso cref="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)"/>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.LogicalChildren(System.Windows.DependencyObject)">
 <summary>Returns the collection of immediate child objects of the specified object, by processing the logical tree.</summary>
 <param name="obj">The object from which to start processing the logical tree. This is expected to be either a <see cref="T:System.Windows.FrameworkElement"/> or <see cref="T:System.Windows.FrameworkContentElement"/>.</param>
 <returns>The enumerable collection of immediate child objects from the logical tree of the specified object.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
 <seelaso cref="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)"/>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.FindLogicalNode(System.Windows.DependencyObject,System.String)">
 <summary>Attempts to find and return an object that has the specified name. The search starts from the specified object and continues into subnodes of the logical tree.</summary>
 <param name="logicalTreeNode">The object to start searching from. This object must be either a <see cref="T:System.Windows.FrameworkElement"/> or a <see cref="T:System.Windows.FrameworkContentElement"/>.</param>
 <param name="elementName">The name of the object to find.</param>
 <returns>The object with the matching name, if one is found; returns null if no matching name was found in the logical tree.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="logicalTreeNode"/> is null</exception>
 <seelaso cref="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)"/>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.BringIntoView(System.Windows.DependencyObject)">
 <summary>Attempts to bring the requested UI element into view and raises the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView"/> event on the target in order to report the results.</summary>
 <param name="obj">The UI element to bring into view.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is null</exception>
 <seelaso cref="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)"/>
 <version version="1.5.3">This method is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.SetWindowPosition(System.Windows.Window,System.Drawing.Rectangle)">
 <summary>Sets windows position and size. Prevents window from leaking out of screen.</summary>
 <param name="Window">Window to set position of</param>
 <param name="Position">Proposed position and size of <paramref name="Window"/> in window client coordinates</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <remarks>If <paramref name="Position"/> <see cref="P:System.Drawing.Rectangle.IsEmpty">is empty</see>, neither window position nor size is set, but off-screen prevention alghoritm is run for window current position.</remarks>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.GetWindowPosition(System.Windows.Window)">
 <summary>Gets size and location of the <see cref="T:System.Windows.Window"/></summary>
 <param name="Window">A <see cref="T:System.Windows.Window"/> to get size and location of</param>
 <returns>Rectangle of <paramref name="Window"/> in window coordinates</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.GetXamlService(System.IServiceProvider,Tools.WindowsT.WPF.XamlService)">
 <summary>Gets one of predefined well-known XAML services usually provided by <see cref="T:System.IServiceProvider"/> in XAML context such as <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)"/>.</summary>
 <param name="provider">An <see cref="T:System.IServiceProvider"/> to get service from.</param>
 <param name="service">Specifies service to get</param>
 <returns>Service requested in <paramref name="service"/> parameter; nulll when <paramref name="provider"/> is nulll or does not provide service requested.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="service"/> is not one of <see cref="T:Tools.WindowsT.WPF.XamlService"/> values</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.GetXamlService(System.IServiceProvider,Tools.WindowsT.WPF.XamlService,System.Boolean)">
 <summary>Gets one of predefined well-known XAML services usually provided by <see cref="T:System.IServiceProvider"/> in XAML context such as <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)"/>.</summary>
 <param name="provider">An <see cref="T:System.IServiceProvider"/> to get service from.</param>
 <param name="service">Specifies service to get</param>
 <param name="throwException">True to throw exception when <paramref name="provider"/> is null or does not provide service requested.</param>
 <returns>Service requested in <paramref name="service"/> parameter; nulll when <paramref name="provider"/> is nulll or does not provide service requested.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="service"/> is not one of <see cref="T:Tools.WindowsT.WPF.XamlService"/> values. <note>This exception is thrown even when <paramref name="throwException"/> is false.</note></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="throwException"/> is true and <paramref name="provider"/> is null.</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="provider"/> does not provide service requested and <paramref name="throwException"/> is true.</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.HasErrors(System.Windows.DependencyObject)">
 <summary>Gets a value that indicates whether any binding on given lement or any of its logical children has a <see cref="T:System.Windows.Controls.ValidationError"/>.</summary>
 <param name="parent">The element to check recursivelly for validation errors</param>
 <returns>True if the <see cref="F:System.Windows.Controls.Validation.HasErrorProperty"/> attached property is true for <paramref name="parent"/> or any of its logical children</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is null</exception>
 <seelaso cref="F:System.Windows.Controls.Validation.HasErrorProperty"/><seelaso cref="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)"/>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.WPF.WpfExtensions.GetErrors(System.Windows.DependencyObject)">
 <summary>Recursivelly gets validation errors of given elemnent and all its logical children</summary>
 <param name="parent">The element to check recursivelly for validation errors</param>
 <returns>Collection of validation errors for <paramref name="parent"/> and all its logical children</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="parent"/> is null</exception>
 <seelaso cref="F:System.Windows.Controls.Validation.ErrorsProperty"/><seelaso cref="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)"/>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="T:Tools.WindowsT.WPF.XamlService">
 <summary>Enumeration of well-known services that are often used with XAML (especially by <c>serviceProvider</c> parameters of <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)"/>)</summary>
 <seelaso cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)"/>
 <version stage="1.5.3">This enumeration is new in version 1.5.3</version>
</member>
<member name="F:Tools.WindowsT.WPF.XamlService.ProvideValueTarget">
 <summary><see cref="T:System.Windows.Markup.IProvideValueTarget"/> (Reports situational object-property relationships for markup extension evaluation.)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.XamlService.XamlTypeResolver">
 <summary><see cref="T:System.Windows.Markup.IXamlTypeResolver"/> (Resolves from named elements in XAML markup to the appropriate CLR type.)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.XamlService.XamlSchemaContextProvider">
 <summary><see cref="T:System.Xaml.IXamlSchemaContextProvider"/> (Provides XAML schema context information to type converters and markup extensions.)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.XamlService.UriContext">
 <summary><see cref="T:System.Windows.Markup.IUriContext"/> (Can use application context to resolve a provided relative URI to an absolute URI.)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.XamlService.AmbientProvider">
 <summary><see cref="T:System.Xaml.IAmbientProvider"/> (Can return information items of ambient properties or ambient types to type converters and markup extensions.)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.XamlService.DestinationTypeProvider">
 <summary><see cref="T:System.Xaml.IDestinationTypeProvider"/> (Can return a type system identifier for the destination type. The destination type is relevant for cases where there is an indirect reporting of destination type for a set operation based on reflection or other mechanisms.)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.XamlService.RootObjectProvider">
 <summary><see cref="T:System.Xaml.IRootObjectProvider"/> (Can return the root object of markup being parsed.)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.XamlService.XamlNameResolver">
 <summary><see cref="T:System.Xaml.IXamlNameResolver"/> (Can return objects specified by name, or alternatively returns a token. The service can also return an enumerable set of all named objects that are in the XAML namescope.)</summary>
</member>
<member name="F:Tools.WindowsT.WPF.XamlService.XamlNamespaceResolver">
 <summary><see cref="T:System.Xaml.IXamlNamespaceResolver"/> (Can return a XAML namespace based on its prefix as mapped in XAML markup.)</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.PropertyGridEditor`1">
 <summary>Strongly-typed <see cref="T:System.Windows.Forms.PropertyGrid"/></summary>
 <typeparam name="T">Type of object being edited</typeparam>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="F:Tools.WindowsT.FormsT.PropertyGridEditor`1._hlpHelp">
 <summary>Help provider</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.PropertyGridEditor`1.#ctor">
 <summary>Default CTor - creates a new instance of the <see cref="T:Tools.WindowsT.FormsT.PropertyGridEditor`1"/> class</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.PropertyGridEditor`1.#ctor(`0)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.FormsT.PropertyGridEditor`1"/> class and sets object to be edited</summary>
 <param name="SelectedObject">And object to be edited by newly created instance</param>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.SelectedObject">
 <summary>Gets or sets the object for which the grid displays properties.</summary>
 <returns>The first object in the object list. If there is no currently selected object the return is null.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.SelectedObjects">
 <summary>Gets or sets the currently selected objects.</summary>
 <returns>An array of type System.Object. The default is an empty array.</returns>
 <exception cref="T:System.ArgumentException">One of the items in the array of objects had a null value</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.PropertyGridEditor`1.SetHelp(System.String,System.String)">
 <summary>Sets <see cref="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.HelpNamespace"/> and <see cref="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.HelpKeyword"/> at once</summary>
 <param name="helpNamespace">New value of the <see cref="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.HelpNamespace"/> property</param>
 <param name="helpKeyword">New value of the <see cref="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.HelpKeyword"/> property</param>
 <remarks>This method sets <see cref="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.ShowHelp"/> to true and <see cref="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.HelpNavigator"/> to <see cref="F:System.Windows.Forms.HelpNavigator.Topic"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.HelpNamespace">
 <summary>Gets or sets a value specifying the name of the Help file associated with this <see cref="T:System.Windows.Forms.HelpProvider"/> object.</summary>
 <returns>The name of the Help file. This can be of the form C:\path\sample.chm or /folder/file.htm.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.HelpKeyword">
 <summary>The Help keyword for the control.</summary>
 <returns>The Help keyword associated with this control, or null if the <see cref="T:System.Windows.Forms.HelpProvider"/> is currently configured to display the entire Help file or is configured to provide a Help string.</returns>
 <value>The Help keyword to associate with the control.</value>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.HelpNavigator">
 <summary>The current <see cref="T:System.Windows.Forms.HelpNavigator"/> setting for the control.</summary>
 <returns>The <see cref="T:System.Windows.Forms.HelpNavigator"/> setting for the specified control. The default is <see cref="F:System.Windows.Forms.HelpNavigator.AssociateIndex"/>.</returns>
 <value>One of the <see cref="T:System.Windows.Forms.HelpNavigator"/> values.</value>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.HelpString">
 <summary>Contents of the pop-up Help window for the specified control.</summary>
 <returns>The Help string associated with this control. The default is null.</returns>
 <value>The Help string associated with the control.</value>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyGridEditor`1.ShowHelp">
 <summary>Inicates whether the specified control's Help should be displayed.</summary>
 <returns>true if Help will be displayed for the control; otherwise, false.</returns>
 <value>true if Help displays for the control; otherwise, false.</value>
</member>
<member name="M:Tools.WindowsT.FormsT.PropertyGridEditor`1.InitializeComponent">
 <summary>Initializes the control's component</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.PropertyDialog">
 <summary>Shows <see cref="P:Tools.WindowsT.FormsT.PropertyDialog.PropertyGrid"/> in a window</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.FormsT.PropertyDialog.#ctor">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.FormsT.PropertyDialog"/> class without initializing selected object</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.PropertyDialog.#ctor(System.Object)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.FormsT.PropertyDialog"/> class and selects single object</summary>
 <param name="selectedObject">An object to be selected in <see cref="P:Tools.WindowsT.FormsT.PropertyDialog.PropertyGrid"/>.</param>
</member>
<member name="M:Tools.WindowsT.FormsT.PropertyDialog.#ctor(System.Object[])">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.FormsT.PropertyDialog"/> class and selects multiple objects</summary>
 <param name="selectedObjects">Objects to be selected in <see cref="P:Tools.WindowsT.FormsT.PropertyDialog.PropertyGrid"/></param>
</member>
<member name="M:Tools.WindowsT.FormsT.PropertyDialog.#ctor(System.Collections.IEnumerable)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.FormsT.PropertyDialog"/> class and selects multiple objects</summary>
 <param name="selectedObjects">Objects to be selected in <see cref="P:Tools.WindowsT.FormsT.PropertyDialog.PropertyGrid"/></param>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyDialog.SelectedObject">
 <summary>gets or sets single selected object</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyDialog.SelectedObjects">
 <summary>Gets or sets multiple selected objects</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyDialog.PropertyGrid">
 <summary>gets an instance of a <see cref="P:Tools.WindowsT.FormsT.PropertyDialog.PropertyGrid"/> used to manipulate objects</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.PropertyDialog.Buttons">
 <summary>Gets or sets value indicating which buttons are visible in dialog</summary>
 <value>Only buttons <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.OK"/> and <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Cancel"/> are supported. Other values are ignored</value>
 <returns>Currently visible buttons</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.HTMLDialog">
 <summary>HTML dialog box</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.HTMLDialog.TextHtml">
 <summary>HTML text shown to the user</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.HTMLDialog.#ctor">
 <summary>Default CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.HTMLDialog.#ctor(System.String)">
 <summary>CTor with HTML text</summary>
 <param name="TextHtml">HTML text</param>
</member>
<member name="M:Tools.WindowsT.FormsT.HTMLDialog.ShowModal(System.String,System.Windows.Forms.IWin32Window)">
 <summary>Shows modal dilog with given HTML</summary>
 <param name="TextHtml">HTML text to be shown</param>
 <param name="owner">Owner of the dialog (can be null)</param>
 <returns>Dialog result</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.ProgressMonitor">
 <summary>This <see cref="T:System.Windows.Forms.Form"/> serves as predefined progress monitor with <see cref="T:System.Windows.Forms.ProgressBar"/> for <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/></summary>
 <remarks>See documentation of the <see cref="M:Tools.WindowsT.FormsT.ProgressMonitor.ApplyUserState(System.Object)"/> method in order to see rich options for reporting progress.</remarks>
 <seelaso cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitor"/>
 <version version="1.5.3">This class implements <see cref="T:Tools.WindowsT.IndependentT.IProgressMonitorUI"/> interface</version>
 <version version="1.5.3">Added support fro <see cref="T:System.Int32"/>, <see cref="T:System.Array"/> and <see cref="T:Tools.WindowsT.IndependentT.ProgressBarStyle"/> passed in user state of background worker <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> event.</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.#ctor">
 <summary>Default CTor</summary>
 <remarks>Value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/> property is populated with new instance of <see cref="T:System.ComponentModel.BackgroundWorker"/></remarks>
 <filterpriority>3</filterpriority>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.#ctor(System.ComponentModel.BackgroundWorker)">
 <summary>CTor</summary>
 <param name="bgw"><see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/> this form will report progress for</param>
 <exception cref="T:System.ArgumentNullException" ><paramref name="bgw"/> is null</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.#ctor(System.ComponentModel.BackgroundWorker,System.String,System.String)">
 <summary>CTor with title text and prompt</summary>
 <param name="bgw"><see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/> this form will report progress for</param>
 <exception cref="T:System.ArgumentNullException" ><paramref name="bgw"/> is null</exception>
 <param name="Text">Title text of window (see <see cref="P:System.Windows.Forms.Form.Text"/>)</param>
 <param name="Prompt">Prompt text (see <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.Prompt"/>)</param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.Show(System.ComponentModel.BackgroundWorker,System.String,System.String,System.Object,System.Object)">
 <summary>Shows progress form and runs worker</summary>
 <param name="bgw">Worker to run</param>
 <param name="Text">Title text of window (see <see  cref="P:System.Windows.Forms.Form.Text"/>)</param>
 <param name="Prompt">Text prompt (see <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.Prompt"/>)</param>
 <param name="Owner">Any object that implements <see cref="T:System.Windows.Forms.IWin32Window"/> or <see cref="T:System.Windows.Interop.IWin32Window"/>, or <see cref="T:System.Windows.Window"/> that represents the top-level window that will own the modal dialog box.</param>
 <param name="WorkerArgument">Optional parameter for background worker</param>
 <returns>Result of work of <paramref name="bgw"/></returns>
 <version version="1.5.3">Type of parameter <paramref name="Owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support WPF owners.</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.IProgressMonitorUI_ShowDialog(System.Object)">
 <summary>Shows window modally</summary>
 <param name="owner">Owner object of dialog. It can be either <see cref="T:System.Windows.Forms.IWin32Window"/> (e.g. <see cref="T:System.Windows.Forms.Form"/>), <see cref="T:System.Windows.Interop.IWin32Window"/> or <see cref="T:System.Windows.Window"/>. When owner is not of recognized type (or is null), it's ignored.</param>
 <returns>True when dialog was closed normally, false if it was closed because of user has cancelled the operation</returns>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.OnShown(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.Form.Shown" /> event.</summary>
 <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data. </param>
</member>
<member name="F:Tools.WindowsT.FormsT.ProgressMonitor._bgw">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker">
 <summary>Gets <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/> this form repports progress of</summary>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.ProgressBarStyle">
 <summary>Gets or sets style of <see cref="T:System.Windows.Forms.ProgressBar"/> that indicates progress of process</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value is not a member of the <see cref="T:System.Windows.Forms.ProgressBarStyle"/> enumeration.</exception>
 <seelaso cref="P:System.Windows.Forms.ProgressBar.Style"/>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.IProgressMonitorUI_ProgressBarStyle">
 <summary>Gets or sets current style of progress bar</summary>
 <remarks>This implementation supports all values defined in the <see cref="T:System.Windows.Forms.ProgressBarStyle"/> enumeration. Other values are corced to <see cref="F:Tools.WindowsT.IndependentT.ProgressBarStyle.Definite"/>.</remarks>
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.Progress">
 <summary>Gets or sets current value of <see cref="T:System.Windows.Forms.ProgressBar"/> that reports progress</summary>
 <exception cref="T:System.ArgumentException">Value being set is smaller than 0 or greater than 100.</exception>
</member>
<member name="F:Tools.WindowsT.FormsT.ProgressMonitor._CloseOnFinish">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.CloseOnFinish"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.CloseOnFinish">
 <summary>Gets or sets value indicating if form automatically closes when <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>.<see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">RunWorkerCompleted</see> event occures.</summary>
 <value>New behavoir. Defalt value is true.</value>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.OnProgressChanged(System.ComponentModel.BackgroundWorker,System.ComponentModel.ProgressChangedEventArgs)">
 <summary>Handles <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>.<see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged">ProgressChanged</see> event</summary>
 <param name="sender"><see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/></param>
 <param name="e">Event erguments</param>
 <remarks>
 This implementation takes value of <paramref name="e"/>.<see cref="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">ProgressPercentage</see> and if it is greater than or equal to zero passes it to the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.Progress"/> property.
 For details how thios implementation deals with <paramref name="e"/>.<see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState">UserState</see> see <see cref="M:Tools.WindowsT.FormsT.ProgressMonitor.ApplyUserState(System.Object)"/>.
 </remarks>
 <exception cref="T:System.ArgumentException"><paramref name="e"/>.<see cref="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">ProgressPercentage</see> is greater than 100.</exception>
 <version version="1.5.3">Major part of functionality of this method - user state application - extracted to a new method - <see cref="M:Tools.WindowsT.FormsT.ProgressMonitor.ApplyUserState(System.Object)"/>.</version>
 <version version="1.5.3">Added support for <see cref="T:System.Int32"/>, <see cref="T:Tools.WindowsT.IndependentT.ProgressBarStyle"/> and <see cref="T:System.Array"/> in <paramref name="e"/>.<see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState">UserState</see>.</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.ApplyUserState(System.Object)">
 <summary>Applies value passed to <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState"/></summary>
 <param name="userState">Value to apply</param>
 <remarks>This implementation treats values of some types in a special way:
 <list type="table">
 <listheader><term>Type</term><description>Action taken</description></listheader>
 <item><term><see cref="T:System.Windows.Forms.ProgressBarStyle"/> or <see cref="T:Tools.WindowsT.IndependentT.ProgressBarStyle"/></term><description>The value is passedto the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.ProgressBarStyle"/> property.</description></item>
 <item><term><see cref="T:System.String"/></term><description>The value is passed to the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.Information"/> property.</description></item>
 <item><term><see cref="T:System.Boolean"/></term><description>The value is passed to the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.CanCancel"/> property.</description></item>
 <item><term><see cref="T:System.ComponentModel.BackgroundWorker"/> (same instance as <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>)</term><description>The <see cref="M:Tools.WindowsT.FormsT.ProgressMonitor.Reset"/> method is called.</description></item>
 <item><term><see cref="T:System.Int32"/> (only when form range 0÷100)</term><description>The value is passed to the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.Progress"/> property (same as passing value greater than or equal to zero to <see cref="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage"/>).</description></item>
 <item><term><see cref="T:System.Array"/> (any type)</term><description>Individual items of the array are passed to the <see cref="M:Tools.WindowsT.FormsT.ProgressMonitor.ApplyUserState(System.Object)"/> method.</description></item>
 </list>
 Null values and values of unsupported types are ignored.</remarks>
 <version version="1.5.3">This method is new in version 1.5.3 (it extracts user state application logic from <see cref="M:Tools.WindowsT.FormsT.ProgressMonitor.OnProgressChanged(System.ComponentModel.BackgroundWorker,System.ComponentModel.ProgressChangedEventArgs)"/>.</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.OnRunWorkerCompleted(System.ComponentModel.BackgroundWorker,System.ComponentModel.RunWorkerCompletedEventArgs)">
 <summary>Handles <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>.<see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">RunWorkerCompleted</see> event.</summary>
 <param name="sender"><see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/></param>
 <param name="e">event arguments</param>
 <remarks>This implementation sets <see cref="P:System.Windows.Forms.Form.DialogResult"/> to <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> when <paramref name="e"/>.<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">Cancelled</see> is true; to <see cref="F:System.Windows.Forms.DialogResult.Abort"/> when <paramref name="e"/>.<see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> isnot nothing and to <see cref="F:System.Windows.Forms.DialogResult.OK"/> in all other cases. Then sets <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.WorkerResult"/>. If <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.CloseOnFinish"/> is true, closes the form.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.ProgressMonitor._WorkerResult">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.WorkerResult"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.WorkerResult">
 <summary>Gets or sets result of <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/> work</summary>
 <returns>Null until <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event occures. That returns its e parameter.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.Prompt">
 <summary>Gets or sets prompt diaplyed in upper part of form</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.Information">
 <summary>Gets or sets informative text displayed below the progress bar</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ProgressMonitor._CanCancel">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.CanCancel"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.CanCancel">
 <summary>Gets or sets value indicationg if dialog supports cancelation</summary>
 <value>Default value depends on <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>.<see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">WorkerSupportsCancellation</see> in time when it is passed to CTor.</value>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.ResetCanCancel">
 <summary>Resets value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.CanCancel"/> pproperty to its default value according to <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>.<see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">WorkerSupportsCancellation</see>.</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.ShouldSerializeResetCancel">
 <summary>Gets value indicationg if value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.CanCancel"/> property should be serializes</summary>
 <returns>True if value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.CanCancel"/> property differs from <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>.<see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">WorkerSupportsCancellation</see>.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.OnCancel">
 <summary>Performs cancellation. Called when the cancel button is clicked.</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.Reset">
 <summary>Resets the dialog</summary>
 <remarks>In case you want to use the dialog from multiple runs of <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>, you should call this method before each (excluding first, but you can to) runs of <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>. Alternativly you can report new run using <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> - see <see cref="M:Tools.WindowsT.FormsT.ProgressMonitor.OnProgressChanged(System.ComponentModel.BackgroundWorker,System.ComponentModel.ProgressChangedEventArgs)"/>.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.ProgressMonitor._DoWorkOnShow">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.DoWorkOnShow"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.DoWorkOnShow">
 <summary>Gets or sets value indicationg if form will call <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.BackgroundWorker"/>.<see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">RunWorkerAsync</see> when <see cref="E:System.Windows.Forms.Form.Shown"/> event occures.</summary>
 <seelaso cref="P:Tools.WindowsT.FormsT.ProgressMonitor.WorkerArgument"/>
 <value>Default value is true</value>
</member>
<member name="F:Tools.WindowsT.FormsT.ProgressMonitor._WorkerArgument">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.WorkerArgument"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.WorkerArgument">
 <summary>Gets or sets value of argument passed to <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> when <see cref="P:Tools.WindowsT.FormsT.ProgressMonitor.DoWorkOnShow"/> is true</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.IProgressMonitorUI_Title">
 <summary>Implements <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.Title"/></summary>
 <value>Title of window showing the progress. Default value is localized word "Progress"</value>
 <returns>Current title of window showing progress</returns>
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressMonitor.IInvoke_Invoke(System.Delegate,System.Object[])">
 <summary>Synchronously invokes a delegate in UI thread</summary>
 <param name="delegate">A delegate to be invoked</param>
 <param name="params">Delegate parameters</param>
 <returns>Result of delegate call</returns>
 <remarks>This function invokes <paramref name="delegate"/> in UI thread when <see cref="P:System.Windows.Forms.Control.InvokeRequired"/> denotes it as necessary.</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
 <seelaso cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)"/><seelaso cref="P:System.Windows.Forms.Control.InvokeRequired"/><seelaso cref="T:Tools.ThreadingT.IInvokeExtensions"/>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressMonitor.IProgressMonitorUI_OwnerObject">
 <summary>Gets an object that can be used as owner for modal windows</summary>
 <returns>This instance of <see cref="T:Tools.WindowsT.FormsT.ProgressMonitor"/></returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.VisualStyleExtensions">
 <summary>Provides extension mehods related to <see cref="N:System.Windows.Forms.VisualStyles"/></summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.VisualStyleExtensions.IsDefined(System.Windows.Forms.VisualStyles.VisualStyleElement)">
 <summary>Determines whether the specified visual style element is defined by the current visual style.</summary>
 <param name="element">A <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement" /> whose class and part combination will be verified.</param>
 <returns>true if the combination of the <see cref="P:System.Windows.Forms.VisualStyles.VisualStyleElement.ClassName" /> and <see cref="P:System.Windows.Forms.VisualStyles.VisualStyleElement.Part" /> properties of element are defined; otherwise, false. Returns false when vidsual styles are not supported.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.ObjectRenderer">
 <summary>Base class for themed and non-themed object rendereres</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.ObjectRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
 <summary>When overriden in derived class draws element background</summary>
 <param name="g">rahics to draw onto</param>
 <param name="BackgroundRectangle">Rectangle of element area</param>
 <param name="ClipRectangle">Rectangle that was invalidate and needs to be repainted</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.ObjectRenderer.DrawFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
 <summary>Draws focus rectangle</summary>
 <param name="g">Graphics to draw onto</param>
 <param name="Rectangle">Rectangle of focus rectangle</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception> 
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.ObjectRenderer.GetContentRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
 <summary>When overiden in derived class gets content rectangle of control being rendered</summary>
 <param name="g">Used for reference</param>
 <param name="ControlRectangle">Rectange of full control including edges</param>
 <returns>Rectangle aloocated for control content</returns>
 <remarks>This implementation always returns <paramref name="ControlRectangle"/> (unles an exception is thrown)</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception> 
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.ObjectRenderer.DrawContentFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
 <summary>Draws focusr rectangle using <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.ObjectRenderer.DrawFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)"/> at bounds obtained from <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.ObjectRenderer.GetContentRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)"/>.</summary>
 <param name="g">Graphics to draw onto</param>
 <param name="ControlRectangle">Rectange of full control including edges</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception> 
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer">
 <summary>Safe renderer containing both, themed and non-themed renderer</summary>
 <completionlist cref="T:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer"/>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer._Themed">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.Themed"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.Themed">
 <summary>Holds themed renderer. May be null.</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.NonThemed">
 <summary>Honlds non-themed renderer. Cannot be null.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer._NonThemed">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.NonThemed"/> proprty</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.#ctor(Tools.WindowsT.FormsT.VisualStylesT.ThemedObjectRenderer,Tools.WindowsT.FormsT.VisualStylesT.NonThemedObejctRenderer)">
 <summary>CTor</summary>
 <param name="Themed">Themed renderer. Can be null.</param>
 <param name="NonThemed">Non-themed renderer</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="NonThemed"/> is null</exception>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer._UseThemes">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.UseThemes"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.UseThemes">
 <summary>Gets or sets value indicatiing if themes hsould be used</summary>
 <remarks>True when themes are likely to be used</remarks>
 <value>True to use themes if possible; false to never use themes; default value is true</value>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
 <summary>Draws element background using either themed or untehemed renderer</summary>
 <param name="g">Grahics to draw onto</param>
 <param name="BackgroundRectangle">Rectangle of element area</param>
 <param name="ClipRectangle">Rectangle that was invalidate and needs to be repainted</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.GetContentRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
 <summary>Gets content rectangle of control being rendered</summary>
 <param name="g">Used for reference</param>
 <param name="ControlRectangle">Rectange of full control including edges</param>
 <returns>Rectangle aloocated for control content</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.DrawFocusRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
 <summary>Draws focus rectangle</summary>
 <param name="g">Graphics to draw onto</param>
 <param name="Rectangle">Rectangle of focus rectangle</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SafeObjectRenderer.PushButton">
 <summary>Gets renderer of push button</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedSafeRenderers.PushButton">
 <summary>Renders pus button</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedSafeRenderers.PushButton.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedSafeRenderers.PushButton.State">
 <summary>Gets or sets state of button to be rendered</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.ThemedObjectRenderer">
 <summary>Base class for themed renderers</summary>
 <completionlist cref="T:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer"/>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.ThemedObjectRenderer.Supported">
 <summary>Gets value indicatioing if this renderer is supported now</summary>
 <returns>True if renderer can render its object; false if non-themed rendere must be used. This implementation returns <see cref="P:System.Windows.Forms.VisualStyles.VisualStyleRenderer.IsSupported"/>.</returns>
 <remarks>Override this property to refine indication</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer">
 <summary>Base class for themed renderers base on UxThemes</summary>
 <completionlist cref="T:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer"/>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer._ClassName">
 <summary>Contains valkue of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ClassName"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer._Part">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Part"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ClassName">
 <summary>Gets class name this themed renderer renders</summary>
 <seelaso cref="P:System.Windows.Forms.VisualStyles.VisualStyleElement.ClassName"/>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Part">
 <summary>Gets part number this themed renderer renders</summary>
 <seelaso cref="P:System.Windows.Forms.VisualStyles.VisualStyleElement.Part"/>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.#ctor(System.String,System.Int32)">
 <summary>CTor</summary>
 <param name="ClassName">Class name to render</param>
 <param name="Part">Part number to render</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ClassName"/> is null</exception>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer._State">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State">
 <summary>Gets or sets state to be rendered</summary>
 <returns>Satate of object to be rendered</returns>
 <remarks>Use <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetStates"/> to get possible values of this property. When state cannot be rendered default state is used instead (<see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetFallback1"/>, <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetFallBack2"/>, <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetFallBack3"/>).</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetStates">
 <summary>When overriden in derived class gets lis of possible values of <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State"/> property</summary>
 <remarks>All values of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State"/> property. USage of another value may leed to fallback.</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Supported">
 <summary>Gets value indicatioing if this renderer is supported now</summary>
 <returns>True if renderer can render its object; false if non-themed renderer must be used. This implementation returns <see cref="P:System.Windows.Forms.VisualStyles.VisualStyleRenderer.IsSupported"/> and <see cref="M:System.Windows.Forms.VisualStyles.VisualStyleRenderer.IsElementDefined(System.Windows.Forms.VisualStyles.VisualStyleElement)"/> forelement of state <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State"/> or default state.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.IsCurrentDefined">
 <summary>Gets value indicating if current state of this instance is defined by current theme</summary>
 <returns>True if current visual style object identified by <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ClassName"/>, <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Part"/> and <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State"/> is defined by current theme; false otherwise</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetFallback1">
 <summary>When overriden in derived class gets 1st chance fallback state for current state identified by <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> object</summary>
 <returns>1st change fallback state identified by <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/>. <see cref="P:System.Windows.Forms.VisualStyles.VisualStyleElement.ClassName"/> must be same as <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ClassName"/>. When no 1st chance fallback is defined returns current state.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetFallBack2">
 <summary>When overriden in derived class gets 2nd chance fallback state for current state identified by <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> object</summary>
 <returns>2nd change fallback state identified by <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/>. <see cref="P:System.Windows.Forms.VisualStyles.VisualStyleElement.ClassName"/> must be same as <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ClassName"/>. When no 2nd chance fallback is defined returns <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetFallback1"/>.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetFallBack3">
 <summary>When overriden in derived class gets 3rd chance fallback state for current state identified by <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/> object</summary>
 <returns>3rd change fallback state identified by <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleElement"/>. <see cref="P:System.Windows.Forms.VisualStyles.VisualStyleElement.ClassName"/> must be same as <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ClassName"/>. When no 3rd chance fallback is defined returns <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetFallBack2"/>.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
 <summary>Draws element background using <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State"/> or default state if current state is not supported</summary>
 <param name="g">Grahics to draw onto</param>
 <param name="BackgroundRectangle">Rectangle of element area</param>
 <param name="ClipRectangle">Rectangle that was invalidate and needs to be repainted</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Supported"/> is false</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetRenderer">
 <summary>Gets renderer for current state or one of its fallback states</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Supported"/> is false</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.GetContentRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
 <summary>Gets content rectangle of control being rendered</summary>
 <param name="g">Used for reference</param>
 <param name="ControlRectangle">Rectange of full control including edges</param>
 <returns>Rectangle allocated for control content</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Supported"/> is false</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.PushButton">
 <summary>Renderer of normal button</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.RadioButton">
 <summary>Renderer of radio (option) button</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.CheckBox">
 <summary>Renderer of check box</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ComboBoxDropDownButton">
 <summary>Renderer of combo box drop down button</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Spin">
 <summary>Renderer of spin button</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ScrollBarArrow">
 <summary>Renderer of scroll bar arrow button</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ScrollBarThumbButton">
 <summary>Renderer of scroll bar thumb button</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ScrollBarTrack">
 <summary>Renderer of scroll bar track</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ScrollBarGripper">
 <summary>Renderer of scroll bar gripper</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ScrollBarSizeBox">
 <summary>Renderer of scroll bar size box</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.TabItem">
 <summary>Renderer of scroll tab item</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ExplorerHeaderClose">
 <summary>Renderer of explorer bar header close</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ExplorerPin">
 <summary>Renderer of explorer bar header pin</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ExplorerDoubleArrow">
 <summary>Renderer of explorer bar IE bar menu</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.ExplorerGroup">
 <summary>Renderer of explorer bar IE bar menu</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.HeaderItem">
 <summary>Renders header item</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.PushButton">
 <summary>Renders normal button</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.PushButton.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.PushButton.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.RadioButton">
 <summary>Renders radio (option) button</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.RadioButton.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.RadioButton.StateGroup">
 <summary>Gets state group of this option button</summary>
 <returns>True for checked state group false for unchecked</returns>
 <value>True for checked state false for uncheckd</value>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.RadioButton.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.CheckBox">
 <summary>Renders check box</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.CheckBox.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.CheckBox.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.CheckBox.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ComboBoxDropDownButton">
 <summary>Renders combo box drop down button</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ComboBoxDropDownButton.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ComboBoxDropDownButton.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.Spin">
 <summary>Renders spin button</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.Spin.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.Spin.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.Spin.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarArrow">
 <summary>Renders scroll bar arrow button</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarArrow.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarArrow.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarArrow.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarThumbButton">
 <summary>Renders scroll bar thumb button</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarThumbButton.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarThumbButton.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarThumbButton.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarTrack">
 <summary>Renders scroll bar track</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarTrack.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarTrack.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarTrack.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarGripper">
 <summary>Renders scroll bar gropper</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarGripper.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarGripper.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarGripper.State">
 <summary>This class recognizes only the <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/> state</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarGripper.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarSizeBox">
 <summary>Renders scroll bar size box</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarSizeBox.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarSizeBox.State">
 <summary>Gets or sets current state within group <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.StateGroup"/></summary>
 <value>You can set state to any value, event when such value is not member of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.GetStates"/> for curent group. BUt using undefined state is likely to casuse fallabsck to <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/> when rendering.</value>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ScrollBarSizeBox.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem">
 <summary>Renders tab item</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.GetFallBackGroup(System.Int32)">
 <summary>Gets falback group for given group</summary>
 <returns>Group number of fallback group for given group</returns>
 <param name="Group">Group to get fallback group of</param>
 <exception cref="T:System.ArgumentException"><paramref name="Group"/> is not defined</exception>
 <remarks>Returns <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.Normal"/>. For <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.TopBothEdges"/>, <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.TopLeftEdge"/> and <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.TopRightEdge"/> returns <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.Top"/> is curent visual style suports it; <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.Normal"/> otherwise.</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType">
 <summary>Tab item type</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.Normal">
 <summary>Default</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.LeftEdge">
 <summary>Left edge</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.RightEdge">
 <summary>Right edge</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.BothEdges">
 <summary>Both edges</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.Top">
 <summary>Top</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.TopLeftEdge">
 <summary>Top, left edge</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.TopRightEdge">
 <summary>Top, right edge</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.TabItemType.TopBothEdges">
 <summary>Top, both edges</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.TabItem.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerHeaderClose">
 <summary>Renders explorer bar header close</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerHeaderClose.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerHeaderClose.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerPin">
 <summary>Renders explorer bar header pin</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerPin.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerPin.StateGroup">
 <summary>Gets state group of this option button</summary>
 <returns>True for checked state group false for unchecked</returns>
 <value>True for checked state false for uncheckd</value>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerPin.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerIEBarMenu">
 <summary>Renders explorer bar IE bar menu</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerIEBarMenu.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerIEBarMenu.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup">
 <summary>Renders explorer bar header pin</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GroupType">
 <summary>Group types</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GroupType.NormalCollapse">
 <summary>Norlam collapse</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GroupType.NormalExpand">
 <summary>Normal expand</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GroupType.SpecialCollapse">
 <summary>Special collapse</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GroupType.SpecialExpand">
 <summary>Special expand</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GetFallBackGroup(System.Int32)">
 <summary>Gets falback group for given group</summary>
 <returns>Group number of fallback group for given group</returns>
 <param name="Group">Group to get fallback group of</param>
 <exception cref="T:System.ArgumentException"><paramref name="Group"/> is not defined</exception>
 <remarks>For <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GroupType.SpecialCollapse"/> returns <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GroupType.NormalExpand"/>; for <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GroupType.SpecialExpand"/> returns <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.ExplorerGroup.GroupType.NormalExpand"/>; <paramref name="Group"/> otherwise.</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.HeaderItem">
 <summary>Renders header item</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.HeaderItem.#ctor">
 <summary>CTor</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.HeaderItem.Types">
 <summary>Header item types</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.HeaderItem.Types.Normal">
 <summary>Normal</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.HeaderItem.Types.Left">
 <summary>Left (not supported by most themes)</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.HeaderItem.Types.Right">
 <summary>Right (not supported by most themes)</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.HeaderItem.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.HeaderItem.GetFallBackGroup(System.Int32)">
 <summary>Gets falback group for given group</summary>
 <returns>Group number of fallback group for given group</returns>
 <param name="Group">Group to get fallback group of</param>
 <exception cref="T:System.ArgumentException"><paramref name="Group"/> is not defined</exception>
 <remarks>This implementation always returns <see cref="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedThemedRenderers.HeaderItem.Types.Normal"/> (unless it throws an exception)</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer">
 <summary>Renderer of button-like control which state is specified by state group and sub-state</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.#ctor(System.String,System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Collections.Generic.IDictionary{System.Windows.Forms.VisualStyles.PushButtonState,System.Int32}})">
 <summary>CTor</summary>
 <param name="ClassName">CLass name to render</param>
 <param name="Part">Part number to render</param>
 <param name="GroupMap">Group map. Key contains numbers of groups, values contains group definitions. In group definition, keys are logical states (any integral value can be used but <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/> must be always present) and values are physical styles for renderer.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ClassName"/> or <paramref name="GroupMap"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="GroupMap"/> is empty -or- Group does not contain deifinition for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/>.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.#ctor(System.String,System.Int32,System.Int32[],System.Int32[][])">
 <summary>CTor from group codes and groups in separate arrays</summary>
 <param name="ClassName">CLass name to render</param>
 <param name="Part">Part number to render</param>
 <param name="GroupCodes">Codes of groups. Must have same lenght as <paramref name="GroupContent"/></param>
 <param name="GroupContent">Group definitions. Must have same lenght as <paramref name="GroupCodes"/>. Must have even lengh. First item is logical group code (preferrably one of <see cref="T:System.Windows.Forms.VisualStyles.PushButtonState"/> values), second value is physical grou code for renderer etc. Each grooup must contain definition for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ClassName"/>, <paramref name="GroupCodes"/> or <paramref name="GroupContent"/> is null</exception>
 <exception cref="T:System.ArgumentException">Length of <paramref name="GroupContent"/> is zero or length of <paramref name="GroupCodes"/> is zero or length of <paramref name="GroupCodes"/> difers from length of <paramref name="GroupContent"/>.
 -or- Group is empty or null -or- Group does not have even number of elements
 -or- Group does not contain deifinition for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/>.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroupMap(System.Int32[],System.Int32[][])">
 <summary>Converts group sepcification in arrays to group map dictionary.</summary>
 <param name="GroupCodes">Codes of groups. Must have same lenght as <paramref name="GroupContent"/></param>
 <param name="GroupContent">Group definitions. Must have same lenght as <paramref name="GroupCodes"/>. Must have even lengh. First item is logical group code (preferrably one of <see cref="T:System.Windows.Forms.VisualStyles.PushButtonState"/> values), second value is physical grou code for renderer etc. Each grooup must contain definition for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="GroupCodes"/> or <paramref name="GroupContent"/> is null</exception>
 <exception cref="T:System.ArgumentException">Length of <paramref name="GroupContent"/> is zero or length of <paramref name="GroupCodes"/> is zero or length of <paramref name="GroupCodes"/> difers from length of <paramref name="GroupContent"/>.
 -or- Group is empty or null -or- Group does not have even number of elements</exception>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer._GroupMap">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GroupMap"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GroupMap">
 <summary>Gets group map</summary>
 <remarks>Do not change content of group map</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer._StateGroup">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>Current group of states state is slecdted from</returns>
 <value>Changes group of states</value>
 <exception cref="T:System.ArgumentException">Value being set is not one of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups"/> values</exception>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer._StateGroupPartChange">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.PartChanges"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.PartChanges">
 <summary>Gets or sets map of <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> value to <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Part"/></summary>
 <value>Dictionary, keys are value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> property; values are value for <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Part"/> property.</value>
 <remarks>When this property is set and <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> changes, it changes <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Part"/> to corresponding value</remarks>
 <exception cref="T:System.InvalidOperationException">Attemt to change value of this property when it was already et to non-null.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.SetPartChanges(System.Int32[])">
 <summary>Sets value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.PartChanges"/> property from array</summary>
 <param name="Values">Map of <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> to <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Part"/>. 1st, 2nd, etc. are keys (<see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> values), 2nd, 4th etc. are values (correctponding <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.Part"/> values).</param>
 <exception cref="T:System.ArgumentException"><paramref name="Values"/> does not contain even number of items</exception>
 <exception cref="T:System.InvalidOperationException">Value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.PartChanges"/> property not null and <paramref name="Values"/> is not null.</exception>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer._State">
 <summary>Contains value of <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State">
 <summary>Gets or sets current state within group <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/></summary>
 <value>You can set state to any value, event when such value is not member of <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetStates"/> for curent group. BUt using undefined state is likely to casuse fallabsck to <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/> when rendering.</value>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.PhysicalState">
 <summary>Gets or sets value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State"/> property</summary>
 <remarks>Use this property only when you need to manipulate physical state rather than logical stored in <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.SetState">
 <summary>Applies changes in <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> and <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State"/> properties</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallback1">
 <summary>Gets 1st chance fallback state for current state</summary>
 <returns>Fallback state inside current group</returns>
 <remarks>This function cannot be overriden. Override <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBackState"/> instead.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBackState">
 <summary>Gets fallback state inside current group</summary>
 <returns>Logical number of fallback state for current <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State"/> in current <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/>.</returns>
 <remarks>Calls parametrized overload</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBackState(System.Int32,System.Windows.Forms.VisualStyles.PushButtonState)">
 <summary>Gets fallback state for given state in given group</summary>
 <param name="Group">Grou to get fallback state for</param>
 <param name="State">State to get fallback state for (this is logical state inside <paramref name="Group"/>)</param>
 <returns>Logical state number of state in group <paramref name="Group"/> which is fallback state for state <paramref name="State"/>. Returned state must be defined in group <paramref name="Group"/>.</returns>
 <remarks>This implementation always returns <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBack2">
 <summary>Gets 2nd chance fallback state for current state</summary>
 <returns>Same state (if exists; fallback otherwise) in fallback group for this group</returns>
 <remarks>This function cannot be overriden, override <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBackGroup"/> instead</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBackGroup">
 <summary>Gets fallback group for current <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/></summary>
 <returns>Fallback grou for current <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/></returns>
 <remarks>Calls parametrized overload</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBackGroup(System.Int32)">
 <summary>Gets falback group for given group</summary>
 <returns>Group number of fallback group for given group</returns>
 <param name="Group">Group to get fallback group of</param>
 <exception cref="T:System.ArgumentException"><paramref name="Group"/> is not defined</exception>
 <remarks>This implementation always returns <paramref name="Group"/> (unless it throws an exception)</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBack3">
 <summary>Gets 3rd fallback state for current state</summary>
 <returns>Default state in default group of current group</returns>
 <remarks>This method cannot be overriden. Override <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBackGroup"/> and <see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetFallBackState"/> instead</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetGroups">
 <summary>Gets possible value of <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> property</summary>
 <remarks>Possible value for <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> property</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetStates(System.Int32)">
 <summary>Gets possible values of <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State"/> property for given group</summary>
 <param name="Group">Group to get values for</param>
 <returns>Possible value of <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State"/> property when <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.StateGroup"/> is <paramref name="Group"/></returns>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="Group"/> is not defined</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.GetStates">
 <summary>Gest possible value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State"/> property</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer">
 <summary>Renderer that can render any button-like control based on UxThemes</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.#ctor(System.String,System.Int32,System.Collections.Generic.IDictionary{System.Windows.Forms.VisualStyles.PushButtonState,System.Int32})">
 <summary>CTor</summary>
 <param name="ClassName">CLass name to render</param>
 <param name="Part">Part number to render</param>
 <param name="Map">State map. Key contains logical states (<see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/> must be defined; any other integers can be used); values contains physical states for renderer. This is map of single group for <see cref="T:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer"/>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ClassName"/> is null or <paramref name="Map"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Map"/> does not contain definition for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.StateGroup">
 <summary>Gets or sets group of states state is being selected from</summary>
 <returns>0</returns>
 <value>Can be only 0</value>
 <exception cref="T:System.ArgumentException">Value being set is not 0.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.GetDefaultGroupMap(System.Collections.Generic.IDictionary{System.Windows.Forms.VisualStyles.PushButtonState,System.Int32})">
 <summary>Gets group map from state map</summary>
 <param name="Map">Group map</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Map"/> is null</exception>
 <returns>Dictionary containing <paramref name="Map"/> at key 0.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>CTor with <see cref="T:System.Windows.Forms.VisualStyles.PushButtonState"/> values mapping</summary>
 <param name="ClassName">CLass name to render</param>
 <param name="Part">Part number to render</param>
 <param name="Normal">Mapping for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/>. Cannot be ommitted</param>
 <param name="Hot">Mapping for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Hot"/>. -1 to ommit</param>
 <param name="Pressed">Mapping for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Pressed"/>. -1 to ommit</param>
 <param name="Default">Mapping for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Default"/>. -1 to ommit</param>
 <param name="Disabled">Mapping for <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Disabled"/>. -1 to ommit</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ClassName"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.#ctor(System.String,System.Int32,System.Int32[])">
 <summary>CTor from map in array</summary>
 <param name="ClassName">CLass name to render</param>
 <param name="Part">Part number to render</param>
 <param name="Map">Map. Keys are first, third, fifth etc. Values are second, fourth, sixth, etc. Must have even number of items. <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/> must be one of keys, other keys can be any integers, but <see cref="T:System.Windows.Forms.VisualStyles.PushButtonState"/> prefferably. When value is -1 it is skipped.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ClassName"/> or <paramref name="Map"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Map"/> has not even number of items, is empty (or contains only -1 values) or does not contain <see cref="F:System.Windows.Forms.VisualStyles.PushButtonState.Normal"/> as one of keys (or corresponding value is -1).</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.GetDictionary(System.Int32,System.Int32[])">
 <summary>Gets dictionary map from map in array</summary>
 <param name="NonIgnoreIndex">Index of key in array to inclue even if following value is -1</param>
 <param name="Map">Map in array. Odd indexes are kays, even are values</param>
 <returns>Map as dictionary. For value which's key index is <paramref name="NonIgnoreIndex"/> it is included even when value is -1; otherwise -1s are skiped.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Map"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Map"/> has odd number of items</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.StateMap">
 <summary>Gets state map</summary>
 <returns>Group map with key 0</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.GetStates">
 <summary>Gest possible values of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxThemeObjectRenderer.State"/> property</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.GetGroups">
 <summary>Gets possible value of <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.StateGroup"/> property</summary>
 <returns>aray containing only 0</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.GetStates(System.Int32)">
 <summary>Gets possible values of <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State"/> property for given group</summary>
 <param name="Group">Ignored. Should be 0.</param>
 <returns><see cref="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.GetPossibleStates"/></returns>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="Group"/> is not defined</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.GetPossibleStates">
 <summary>Gets possible value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State"/> property</summary>
 <returns>Possible value of the <see cref="P:Tools.WindowsT.FormsT.VisualStylesT.UxMultiGroupMultiStateRenderer.State"/> property</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.UxSingleGroupMultiStateRenderer.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.NonThemedObejctRenderer">
 <summary>Base class for non-themed renderers</summary>
 <completionlist cref="T:Tools.WindowsT.FormsT.VisualStylesT.NonThemedObejctRenderer"/>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.NonThemedObejctRenderer.PushButton">
 <summary>Gets renderer of push button</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.VisualStylesT.SpecializedNonThemedRenderers.PushButton">
 <summary>Renders pus button</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="F:Tools.WindowsT.FormsT.VisualStylesT.SpecializedNonThemedRenderers.PushButton._State">
 <summary>Contains value of the state property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.VisualStylesT.SpecializedNonThemedRenderers.PushButton.State">
 <summary>State of button</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.VisualStylesT.SpecializedNonThemedRenderers.PushButton.GetContentRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
 <summary>When overiden in derived class gets content rectangle of control being rendered</summary>
 <param name="g">Used for reference</param>
 <param name="ControlRectangle">Rectange of full control including edges</param>
 <returns>Rectangle aloocated for control content</returns>
 <remarks>This implementation always returns <paramref name="ControlRectangle"/> (unles an exception is thrown)</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="g"/> is null</exception>
</member>
<member name="T:Tools.WindowsT.FormsT.ObjectBrowser">
 <summary>Control for browsing .NET assemblies</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version stage="Nightly" version="1.5.2">Fixed: Uncatchable <see cref="T:System.ArgumentNullException"/> in tvwObjects_BeforeSelect on show of object.</version>
 <version version="1.5.2">Fixed: Resources-related errors</version>
 <version version="1.5.2">Removed <see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.FirstVersionAttribute"/></version>
 <version version="1.5.2">Added property <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.SelectedItem"/></version>
 <version version="1.5.2">Added <see cref="T:System.ComponentModel.DefaultEventAttribute"/>.</version>
 <version version="1.5.2">Added <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.SelectedItem"/> property</version>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._Assemblies">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects"/> property</summary>
 <remarks>Can be any object</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.Initializing">
 <summary>Is set to true when component is being constructed</summary>
 <remarks>It is used to stop some functionality during initialisation</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.#ctor">
 <summary>CTor</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowInheritedMembers">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInheritedMembers"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInheritedMembers">
 <summary>Gets or sets value indicating if inherited members are shown</summary>
 <value>True to show inherited members, false to hide them</value>
 <returns>Value indicating if inherited members are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowFlatNamespaces">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFlatNamespaces"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFlatNamespaces">
 <summary>Gets or sets value indicating if namespaces are show flat or hierachically</summary>
 <value>True to show flat namespaces, false to show hierarchic namespaces</value>
 <returns>Value indicating if namespaces are shown flat or hierarchic</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowNestedTypes">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowNestedTypes"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowNestedTypes">
 <summary>Gets or sets value indicating if nested types are shown</summary>
 <value>True to show nested types, false to hide them</value>
 <returns>Value indicating if nested types are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowPrivateMembers">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowPrivateMembers"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowPrivateMembers">
 <summary>Gets or sets value indicating if private members are shown</summary>
 <value>True to show private members, false to hide them</value>
 <returns>Value indicating if private members are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowInternalMembers">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInternalMembers"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInternalMembers">
 <summary>Gets or sets value indicating if internal members are shown</summary>
 <value>True to show internal members, false to hide them</value>
 <returns>Value indicating if internal members are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowProtectedMembers">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProtectedMembers"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProtectedMembers">
 <summary>Gets or sets value indicating if protected members are shown</summary>
 <value>True to show protected members, false to hide them</value>
 <returns>Value indicating if protected members are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowInstanceMembers">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInstanceMembers"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInstanceMembers">
 <summary>Gets or sets value indicating if instance members are shown</summary>
 <value>True to show instance members, false to hide them</value>
 <returns>Value indicating if instance members are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowStaticMembers">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowStaticMembers"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowStaticMembers">
 <summary>Gets or sets value indicating if static members are shown</summary>
 <value>True to show static members, false to hide them</value>
 <returns>Value indicating if static members are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowSpecialMembers">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowSpecialMembers"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowSpecialMembers">
 <summary>Gets or sets value indicating if special members (parts of properties and events) are shown</summary>
 <value>True to show special members, false to hide them</value>
 <returns>Value indicating if special members are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowGlobalMembers">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGlobalMembers"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGlobalMembers">
 <summary>Gets or sets value indicating if Global members (parts of properties and events) are shown</summary>
 <value>True to show Global members, false to hide them</value>
 <returns>Value indicating if Global members are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowProperties">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProperties"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProperties">
 <summary>Gets or sets value indicating if properties are shown</summary>
 <value>True to show properties  false to hide them</value>
 <returns>Value indicating if properties are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowEvents">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowEvents"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowEvents">
 <summary>Gets or sets value indicating if Events are shown</summary>
 <value>True to show Events  false to hide them</value>
 <returns>Value indicating if Events are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowMethods">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowMethods"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowMethods">
 <summary>Gets or sets value indicating if Methods are shown</summary>
 <value>True to show Methods  false to hide them</value>
 <returns>Value indicating if Methods are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowFields">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFields"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFields">
 <summary>Gets or sets value indicating if Fields are shown</summary>
 <value>True to show Fields  false to hide them</value>
 <returns>Value indicating if Fields are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowCTors">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowCTors"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowCTors">
 <summary>Gets or sets value indicating if CTors are shown</summary>
 <value>True to show CTors  false to hide them</value>
 <returns>Value indicating if CTors are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowInitializers">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInitializers"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInitializers">
 <summary>Gets or sets value indicating if Initializers are shown</summary>
 <value>True to show Initializers  false to hide them</value>
 <returns>Value indicating if Initializers are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowgenericArguments">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGenericArguments"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGenericArguments">
 <summary>Gets or sets value indicating if generic arguments (type parameters) are shown</summary>
 <value>True to show generic arguments  false to hide them</value>
 <returns>Value indicating if generic arguments are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowReferences">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowReferences"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowReferences">
 <summary>Gets or sets value indicating if references are shown</summary>
 <value>True to show references false to hide them</value>
 <returns>Value indicating if references are shown</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowBaseTypes">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowBaseTypes"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowBaseTypes">
 <summary>Gets or sets value indicating if base types are shown</summary>
 <value>True to show base types  false to hide them</value>
 <returns>Value indicating if base types are shown</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnShowChanged">
 <summary>Called after value of property that controls which members are displayed in <see cref="T:System.Windows.Forms.ListView"/> is changed.</summary>
 <remarks>Those properties are:
 <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowCTors"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowEvents"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowFields"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGenericArguments"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowGlobalMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInheritedMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInitializers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInstanceMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowMethods"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowInternalMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowNestedTypes"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowPrivateMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProperties"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowProtectedMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowSpecialMembers"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowStaticMembers"/>
 </remarks>
</member>
<member name="E:Tools.WindowsT.FormsT.ObjectBrowser.ShowChanged">
 <summary>Raised after property that controls which members are displayed in <see cref="T:System.Windows.Forms.ListView"/> was changed.</summary>
 <remarks>See <seealso cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnShowChanged"/> for list of properties that causes this event to be raised.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ActualizeNode(System.Windows.Forms.TreeNode)">
 <summary>Called recursivelly by <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnShowChanged"/> and itself in order to actualize content of each expanded node.</summary>
 <param name="Node">Node to actualize content of</param>
 <remarks>Note for inheritors: After actualizing content of this node, if there are any ünchanged nodes (that is your actualization logic is not delete all nodes and create them again) you should call this method on all the expanded nodes and replace content of all colapsed nodes by only tag-less node.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._DisplayMemberList">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayMemberList"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._DisplayProperties">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayProperties"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._DisplayDescription">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayDescription"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayMemberList">
 <summary>Gets or sets value indicationg if member list is shown</summary>
 <returns>True if member list is show, false when it is hidden</returns>
 <value>True to show member list; alse to hide it</value>
 <version stage="1.5.2">Property added</version>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayProperties">
 <summary>Gets or sets value indicationg if property grid is shown</summary>
 <returns>True if property grid is show, false when it is hidden</returns>
 <value>True to show ptoperty grid; alse to hide it</value>
 <version stage="1.5.2">Property added</version>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayDescription">
 <summary>Gets or sets value indicationg if description pane is shown</summary>
 <returns>True if description pane is show, false when it is hidden</returns>
 <value>True to show decription pane; alse to hide it</value>
 <version stage="1.5.2">Property added</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnDisplayChanged">
 <summary>Called when any of display properties changes</summary>
 <remarks>Dsiplay properties are <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayMemberList"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayProperties"/> and <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayDescription"/></remarks>
 <version version="1.5.2">Method added</version>
</member>
<member name="E:Tools.WindowsT.FormsT.ObjectBrowser.DisplayChanged">
 <summary>Raised when any of display properties changes</summary>
 <remarks>Dsiplay properties are <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayMemberList"/>, <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayProperties"/> and <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.DisplayDescription"/></remarks>
 <version version="1.5.2">Event added</version>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowShowMenu">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowShowMenu"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowShowMenu">
 <summary>Gets or sets value indicating if the Show menu is shown</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._ShowToolbar">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowToolbar"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.ShowToolbar">
 <summary>Gets or sets value indicating if the toolbar is shown</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects">
 <summary>List of assemblies or any other objects listed at top-level of tree-view</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ShouldSerializeObjects">
 <summary>Gets value indicating if the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects"/> property needs to be serialized</summary>
 <returns>True if the is any item in the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects"/> property</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ResetObjects">
 <summary>Resets the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Objects"/> property to it's initial state (empties it)</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetNode(System.Object)">
 <summary>Converts any object to <see cref="T:System.Windows.Forms.TreeNode"/></summary>
 <param name="Obj">Object to convert</param>
 <returns><see cref="T:System.Windows.Forms.TreeNode"/> to represent <paramref name="Obj"/></returns>
 <remarks>Note to inheritors: Newly created node must have <paramref name="Obj"/> as its <see cref="P:System.Windows.Forms.TreeNode.Tag"/>. If you call any of <see cref="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.EventInfo)"/> methods that returns image with overlay the image is automatically added to <see cref="T:System.Windows.Forms.ImageList"/> used by <see cref="T:System.Windows.Forms.TreeView"/> and <see cref="T:System.Windows.Forms.ListView"/>. You can then set <see cref="P:System.Windows.Forms.TreeNode.ImageKey"/> and <see cref="P:System.Windows.Forms.TreeNode.SelectedImageKey"/> to key in form "{0:d}_{1:d}" (see <see cref="T:System.String"/>) where 0 is numeric representation of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/> and 1 is numeric representation of <see cref="T:Tools.ReflectionT.CodeImages.ObjectModifiers"/>. This key is produced by the <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.Key(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)"/> function. If you want the node to be expandable, but you do not want to fill items right now, place only item without <see cref="P:System.Windows.Forms.TreeNode.Tag"/> into it.</remarks>
 <exception cref="T:System.Exception">An error ocured during creating node (not thrown when <paramref name="Obj"/> is <see cref="T:System.Exception"/>). Note to inheritors: Do not throw any exception when <paramref name="Obj"/> is <see cref="T:System.Exception"/>!</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetListItem(System.Object)">
 <summary>Converts any object to <see cref="T:System.Windows.Forms.ListViewItem"/></summary>
 <param name="obj">Object to converts</param>
 <returns><see cref="T:System.Windows.Forms.ListViewItem"/> repersenting <paramref name="obj"/></returns>
 <remarks>Note to inheritors: Newly created item must have <paramref name="Obj"/> as its <see cref="P:System.Windows.Forms.ListViewItem.Tag"/>. If you call any of <see cref="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.EventInfo)"/> methods that returns image with overlay the image is automatically added to <see cref="T:System.Windows.Forms.ImageList"/> used by <see cref="T:System.Windows.Forms.TreeView"/> and <see cref="T:System.Windows.Forms.ListView"/>. You can then set <see cref="P:System.Windows.Forms.TreeNode.ImageKey"/> and <see cref="P:System.Windows.Forms.TreeNode.SelectedImageKey"/> to key in form "{0:d}_{1:d}" (see <see cref="T:System.String"/>) where 0 is numeric representation of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/> and 1 is numeric representation of <see cref="T:Tools.ReflectionT.CodeImages.ObjectModifiers"/>. This key is produced by the <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.Key(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)"/> function. If you want the node to be expandable, but you do not want to fill items right now, place only item without <see cref="P:System.Windows.Forms.TreeNode.Tag"/> into it.</remarks>
 <exception cref="T:System.Exception">An error ocured during creating node (not thrown when <paramref name="Obj"/> is <see cref="T:System.Exception"/>). Note to inheritors: Do not throw any exception when <paramref name="Obj"/> is <see cref="T:System.Exception"/>!</exception>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.LastRequestedKey">
 <summary>Holds key of image that was last passed to <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.ImageRequested(System.Drawing.Image,Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ImageRequested(System.Drawing.Image,Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)">
 <summary>Handles the <see cref="E:Tools.ReflectionT.CodeImages.ImageRequested"/> event</summary>
 <param name="img">Image requaested</param>
 <param name="ObjectType">Type of object for that request</param>
 <param name="Modifiers">Object modifiers for that request</param>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.Key(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)">
 <summary>Converts object type and modifiers to string key</summary>
 <param name="ObjectType">Type of object</param>
 <param name="Modifiers">Ky modifiers</param>
 <returns>String created using <see cref="T:System.String"/>("{0:d}_{1:d}", <paramref name="ObjectType"/>, <paramref name="Modifiers"/>)</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChanged(System.Windows.Forms.Control,System.Object,System.Object)">
 <summary>Called after selected item changes</summary>
 <param name="Control">Control the item is member of (can be either <see cref="T:System.Windows.Forms.TreeView"/> or <see cref="T:System.Windows.Forms.ListView"/>).</param>
 <param name="Item">Item itself (can be <see cref="T:System.Windows.Forms.TreeNode"/> or <see cref="T:System.Windows.Forms.ListViewItem"/>)</param>
 <param name="ItemTag">Tag of item - selected object</param>
 <remarks>Cals <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChanged(System.EventArgs)"/> overload.
 <note type="inherinfo">Always call <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChanged(System.EventArgs)"/> or <see cref="E:Tools.WindowsT.FormsT.ObjectBrowser.SelectedItemChanged"/> will not be raised.</note></remarks>
 <version version="1.5.2">Added call to <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChanged(System.EventArgs)"/></version>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._CurrentSelectedItem">
 <summary>Contains value oft the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.CurrentSelectedItem"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.CurrentSelectedItem">
 <summary>Contains item that is currently selected</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.SelectedItem">
 <summary>Gets item that is curently selected in object browser</summary>
 <returns>Item curently selected in object browse</returns>
 <value>Object to select</value>
 <exception cref="T:System.ArgumentException">Value being set cannot be located</exception>
 <version version="1.5.2">Property added</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.FindItem(System.Windows.Forms.TreeNodeCollection,System.Object)">
 <summary>Finds item unsder given treenode</summary>
 <param name="item">Item (type, method, namespace etc.) to be found</param>
 <param name="Nodes">Nodes to search for item in.</param>
 <returns>Item location - <see cref="T:System.Windows.Forms.TreeNode"/> and tag of <see cref="T:System.Windows.Forms.ListViewItem"/> (if applicable); null when item was not found.</returns>
 <remarks>This function is used by setter of <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.SelectedItem"/>.</remarks>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ObjectBrowser.SelectedItemChanged"/> event</summary>
 <param name="e">Event arguments</param>        4
 <remarks><note type="inheritnfo">ALways call base class method in order the event to be raised.</note></remarks>
 <version version="1.5.2">Method added</version>
</member>
<member name="E:Tools.WindowsT.FormsT.ObjectBrowser.SelectedItemChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.SelectedItem"/> property changes</summary>
 <version version="1.5.2">Event added</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChangedInternal(System.Windows.Forms.Control,System.Object,System.Object)">
 <summary>Called after selected item changes or list-control changes. Reduse unnecesary calls of <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnSelectedItemChanged(System.EventArgs)"/></summary>
 <param name="Control">Control the item is member of (can be either <see cref="T:System.Windows.Forms.TreeView"/> or <see cref="T:System.Windows.Forms.ListView"/>).</param>
 <param name="Item">Item itself (can be <see cref="T:System.Windows.Forms.TreeNode"/> or <see cref="T:System.Windows.Forms.ListViewItem"/>)</param>
 <param name="ItemTag">Tag of item - selected object</param>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnAfterSelect(System.Windows.Forms.TreeViewEventArgs)">
 <summary>selected node in <see cref="T:System.Windows.Forms.TreeView"/> changes</summary>
 <param name="e">Arguments of the <see cref="E:System.Windows.Forms.TreeView.AfterSelect"/> event</param>
 <remarks><see cref="T:System.Windows.Forms.ListView"/> is empty when this method is called</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetShortDesc(System.Object)">
 <summary>Assigns short description of object selected in <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.tvwObjects"/> to <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.rtbShort"/></summary>
 <param name="Obj">Object to get description of (it is <see cref="P:System.Windows.Forms.TreeNode.Tag"/> of selected <see cref="T:System.Windows.Forms.TreeNode"/>)</param>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetItems(System.Object)">
 <summary>Gets list of items to show in <see cref="T:System.Windows.Forms.ListView"/>. Called after node in <see cref="T:System.Windows.Forms.TreeView"/> is selected</summary>
 <param name="obj"><see cref="P:System.Windows.Forms.TreeNode.Tag"/> of selected <see cref="T:System.Windows.Forms.TreeNode"/></param>
 <returns>List of object to pas to <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.GetListItem(System.Object)"/> and show</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)">
 <summary>Called when node which contain only one sub-node with empty <see cref="P:System.Windows.Forms.TreeNode.Tag">Tag</see> is about to be expanded.</summary>
 <param name="e">Arguments of <see cref="E:System.Windows.Forms.TreeView.BeforeExpand"/> event</param>
 <remarks><para>The empty sub-node is removed from current node before this method is called.</para>
 <para>The default implementation calls <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.GetChildren(System.Object)"/> and passes it's result to <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.GetNode(System.Object)"/> (if <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.FilterItem(System.Object)"/> succeeds for it) to obtain <see cref="T:System.Windows.Forms.TreeNode"/> which is added to node being expanded</para></remarks>
 <version version="1.5.2">Added filtering of items by calling <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.FilterItem(System.Object)"/>.</version>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.FilterItem(System.Object)">
 <summary>Filters item obtained from <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.GetChildren(System.Object)"/></summary>
 <param name="item">Item to filter</param>
 <returns>True to add the item to tree; false to skip it</returns>
 <remarks>This implementation performs filtering by raising the <see cref="E:Tools.WindowsT.FormsT.ObjectBrowser.ItemFiltering"/> event</remarks>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="E:Tools.WindowsT.FormsT.ObjectBrowser.ItemFiltering">
 <summary>Raised when item is about to be displayed to user. You can cancel the item.</summary>
 <version version="1.5.2">Event introduced</version>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.kpBaseTypes">
 <summary>Code for node representing all the base types</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.kpReferences">
 <summary>Code for node representing all the references</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.kpBaseType">
 <summary>Code for node representing single base type</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.kpReference">
 <summary>Code for node representing single referenced assembly</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.GetChildren(System.Object)">
 <summary>This function is called by default implementation of <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)"/> to obtain childrens of node being expanded.</summary>
 <param name="obj"><see cref="P:System.Windows.Forms.TreeNode.Tag"/> of node being expanded</param>
 <returns>Object to pass to <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.GetNode(System.Object)"/> in order to obtain node to add to current node. Can be null.</returns>
 <remarks>Note to inheritors: Feel free to throw an exception from this function. Default implementation of <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnBeforeExpand(System.Windows.Forms.TreeViewCancelEventArgs)"/> catches it and adds exception to tree instead of list of items. Another possibility is to catch exception and add it to list being returned. This way allows you to denote exception but continue enumeration other children.</remarks>
 <exception cref="T:System.Exception">An error ocured while getting children</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.ShouldShowMember(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
 <summary>Gets value indicating if member with given accesibility and static/instance behavior should be shown</summary>
 <param name="Private">Member is private</param>
 <param name="Family">Member as family (protected)</param>
 <param name="Assembly">Member is assembly (internal, friend)</param>
 <param name="Public">Member is public</param>
 <param name="FamAndAssem">Member is family-and-assembyl</param>
 <param name="FamOrAssem">Member is family-or-assembyl (protected firend)</param>
 <param name="Static">member is static</param>
 <param name="SkipStaticTest"><paramref name="Static"/> will not be tested</param>
 <returns>True if member should be shown</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event. Processes key events.</summary>
 <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data. </param>
 <remarks>This implementation processes keyboard events for this control with <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> set to true. Processed keys are:
 <list type="table">
 <listheader><term>Key</term><description>Action</description></listheader>
 <item><term><see cref="F:System.Windows.Forms.Keys.BrowserBack">Browser back</see></term><description>Navigate backward, calls <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnNavigateBackward"/>. </description></item>
 <item><term><see cref="F:System.Windows.Forms.Keys.BrowserForward">Browser forward</see></term><description>Navigate forward, calls <see cref="M:Tools.WindowsT.FormsT.ObjectBrowser.OnNavigateForward"/>. </description></item>
 </list>
 If the event is processed <paramref name="e"/>.<see cref="P:System.Windows.Forms.KeyEventArgs.Handled">Handled</see> is set to true.
 </remarks>        
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnNavigateForward">
 <summary>Called whne forward navigation is requested. Performs navigation and raises the <see cref="F:Tools.WindowsT.FormsT.ObjectBrowser.NavigateForwardEvent"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.OnNavigateBackward">
 <summary>Called whne backward navigation is requested. Performs navigation and raises the <see cref="F:Tools.WindowsT.FormsT.ObjectBrowser.NavigateBackwardEvent"/></summary>        
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser._Navigating">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.Navigating"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.Navigating">
 <summary>Gets or sets value indicating if backward/forward navigation is pending</summary>
 <returns>Value indicating if backward/forward navigation is pending</returns>
 <value>True if backward/forward navigation is currently pending and navigation is not automatically tracked because of it</value>
 <remarks>If this property is set to true the <see cref="E:System.Windows.Forms.TreeView.BeforeSelect"/> event of <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.tvwObjects"/> does not track change of node</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.ForwardStack">
 <summary>Stack of points for forward navigation</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.BackwardStack">
 <summary>Stack of points for backward navigation</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint">
 <summary>Represents point for forward/backward navigation</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.op_Implicit(System.Windows.Forms.TreeNode)~Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint">
 <summary>Converts <see cref="T:System.Windows.Forms.TreeNode"/> to <see cref="T:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.TreeNode"/></param>
 <returns>INstance of <see cref="T:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint"/> populated with <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint._Tag">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.Tag"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.Tag">
 <summary>Tag can contain any additional information for navigation point</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint._Node">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.Node"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.Node">
 <summary><see cref="T:System.Windows.Forms.TreeNode"/> that is point of navigation</summary>
 <remarks>Node must be always set but more information can be provided in order to allow navigation whne the node was already removed form <see cref="T:System.Windows.Forms.TreeView"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ObjectBrowser.NavigationPoint.#ctor(System.Windows.Forms.TreeNode)">
 <summary>CTor from <see cref="T:System.Windows.Forms.TreeNode"/></summary>
 <paramref name="Node">Node this navigation point points to. It cannot be null.</paramref>
 <exception cref="T:System.ArgumentNullException"><paramref name="Node"/> is null</exception>
</member>
<member name="E:Tools.WindowsT.FormsT.ObjectBrowser.NavigateForward">
 <summary>Raised after forward navigation ocured</summary>
 <param name="e"><see cref="F:System.EventArgs.Empty"/></param>
 <version version="1.5.2">Added <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="E:Tools.WindowsT.FormsT.ObjectBrowser.NavigateBackward">
 <summary>raised after backward navigation ocured</summary>
 <param name="e"><see cref="F:System.EventArgs.Empty"/></param>
 <version version="1.5.2">Added <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="T:Tools.WindowsT.FormsT.TextBoxWithStatus">
 <summary>Note: This control will be removed and replaced with attachable implementation of <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
</member>
<member name="T:Tools.WindowsT.FormsT.KeyWordsEditor">
 <summary>Control that allows eas and very sophisticated editing of set of keywords</summary>
 <remarks>There is a list of known keywords (which can be adited by user and persisted). Synonyms of keywords can be defined and added automatically in list.</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._AutoCompleteCacheName">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor.AutocompleteCache">
 <summary>Autocomplete chache shared across instances with same <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor.SharedStableList">
 <summary>Automatically shared lists of keywords for the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWords"/> property. Sharred accross instances with same <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor.SharedSynonymList">
 <summary>Automatically shared lists of synonyms for the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> property. Sharred accross instances with same <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._Synonyms">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms">
 <summary>Gets or sets synonyms configuration</summary>
 <remarks><para>Synonyms configuration is such that its list of pairs of arrays. Key array contain words one of which is added than also all key-array words are added and all value-array words are added to</para>
 <para>If this property is null then synonym capability of <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> is turned off</para></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetSharedSynonymsList(System.String)">
 <summary>Gets item of <see cref="F:Tools.WindowsT.FormsT.KeyWordsEditor.SharedSynonymList"/> with given key. Creates new item if given key does not exists.</summary>
 <param name="Name">Key of item to be returned</param>
 <returns>Item form <see cref="F:Tools.WindowsT.FormsT.KeyWordsEditor.SharedSynonymList"/> with given key. If such key is not presents adds an empty collection for it. If <paramref name="Name"/> is <see cref="F:System.String.Empty"/> or null returns null.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetSharedStableList(System.String)">
 <summary>Gets item of <see cref="F:Tools.WindowsT.FormsT.KeyWordsEditor.SharedStableList"/> with given key. Creates new item if given key does not exists.</summary>
 <param name="Name">Key of item to be returned</param>
 <returns>Item form <see cref="F:Tools.WindowsT.FormsT.KeyWordsEditor.SharedStableList"/> with given key. If such key is not presents adds an empty collection for it. If <paramref name="Name"/> is <see cref="F:System.String.Empty"/> or null returns null.</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._AutomaticLists">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists">
 <summary>Gets or sets value if this instance uses automacically shared lists of keywords and synonyms (among instances with same <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/>).</summary>
 <returns>In runtime indicates if both - <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWords"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> collections are automatically shared by this instance and all other instnces of <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> with same <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> = True.</returns>
 <value>In design time predefines run-time behaviour. In runtime chan be only changed form False to True.</value>
 <remarks>If set to false, you must set <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWords"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> properties in order editor to be fully functional.
 <para>In runtime this property cannot be changed from true to false. Set <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWords"/> or <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> property instead. (Exception is not thrown, but value does not change when changing from True to False).</para>
 </remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticsLists_Designer">
 <summary>Designer serialization proxy from <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> property</summary>
 <value>Setting this property to true is same as setting <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> to true. Setting this property to false sets <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> to false and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> to null</value>
 <returns><see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable"/></returns>
 <remarks>This property is not intended to be used by programmer. It supports designt-time serialization fo control.</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName">
 <summary>Name of per-session cache of keywords used by this instance and name of group of autocomplete items and synonyms (if used)</summary>
 <value>An enmpty <see cref="T:System.String"/> to use no temporary chache</value>
 <remarks>When <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> is true sets also name for list of autocomplete words and synonyms.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.RemoveHandlers">
 <summary>Removes handlers for temporary chache</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.AddHandlers">
 <summary>Adds handlers to temporary cache</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Autocomplete_Added(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemIndexEventArgs)">
 <summary>Handles adding item to either autocomplete source</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Autocomplete_Changed(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.OldNewItemEventArgs)">
 <summary>Handles change of item value in either autocomplete source</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.InAnyList(System.String)">
 <summary>Determines if autocomplete item is in one of autocomplete sources</summary>
 <param name="What">Item to search for</param>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.InOtherList(System.String,Tools.CollectionsT.GenericT.ListWithEvents{System.String})">
 <summary>Determines if item is member of autocomplete source other than given</summary>
 <param name="What">Item to search for</param>
 <param name="List">Autocomplete source not to search in</param>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Autocomplete_Removed(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemIndexEventArgs)">
 <summary>Hanldes removal of single item from either auto complete source</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Autocomplete_Cleared(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemsEventArgs)">
 <summary>Hanles clearing of either auto complete source</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor.__AutoCompleteStable">
 <summary>contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable">
 <summary>Permanent autocomplete source</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.TmiEnabled">
 <summary>Enables/disbaled ans shows/hides items of <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.cmsThesaurus"/> according to values of <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable"/></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.InstanceAutoCompleteChache">
 <summary>Gets autocomplete chache used by this instance (if any)</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnThesaurusClick(System.EventArgs)">
 <summary>Called when theasursu button is clicked. Shows thesaurus menu (if applicable)</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._CaseSensitive">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.CaseSensitive"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.CaseSensitive">
 <summary>Gets or sets value idicating if keywords are case sensitive</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusState">
 <summary>Gets or sets state of <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status"/></summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status">
 <summary><see cref="T:Tools.WindowsT.FormsT.StatusMarker"/> present on this control</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.ShouldSerializeStatus_">
 <summary>Gets value indicationg if the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status_"/> property should be serialized</summary>
 <returns>True if designer should serialize the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status_"/> property</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status_">
 <summary>Design-time proxy for the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.ThesaurusButtonState">
 <summary>Gets or sets state of thesaurus button</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.MergeButtonState">
 <summary>Gets or sets state of merge button</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.Merge">
 <summary>Gets or sets value indicating if merge button is checked (orange) or not (gray)</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.KeyWordsEditor.MergeChanged">
 <summary>Raised after value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Merge"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnMergeChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.KeyWordsEditor.MergeChanged"/> event</summary>
 <param name="e">Event params</param>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnTextChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.UserControl.TextChanged"/> event</summary>
 <param name="e">Event params</param>
 <remarks>Note for inheritors. If you want to keep <see cref="P:System.Windows.Forms.UserControl.Text"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.txtEdit">txtEdit</see>.<see cref="P:System.Windows.Forms.TextBox.Text">Text</see>, call base class method or sync them by your own</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.CSCompare(System.String,System.String)">
 <summary>Compares two <see cref="T:System.String">Strings</see> in way determined by the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.CaseSensitive"/> property</summary>
 <param name="Str1"><see cref="T:System.String"/> to compare</param>
 <param name="Str2"><see cref="T:System.String"/> to compare</param>
 <returns>True if parameters match; false otherwise</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.AddKeyword">
 <summary>Adds keyword from <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.txtEdit"/> into <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.lstKW"/> (it it is not there) and to <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.InstanceAutoCompleteChache"/> is it is not there and if it is not null</summary>
 <remarks>Also synonyms of that word are added to list</remarks>
</member>
<member name="E:Tools.WindowsT.FormsT.KeyWordsEditor.KeywordAdded">
 <summary>Raised when user adds keyword</summary>
 <remarks>Not raised when keyword is added programatically</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnKeywordAdded(Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.KeyWordsEditor.KeywordAdded"/> event</summary> 
 <param name="e">event parameters</param>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWords">
 <summary>List of keywords currenly in list</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Copy">
 <summary>Copies actually selected keywords to clipboard</summary>
 <seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.Cut"/><seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.Paste(System.Boolean)"/>
 <remarks><see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> uses clipboard format <see cref="F:System.Windows.Forms.TextDataFormat.UnicodeText"/> - one keyword on line</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Cut">
 <summary>Copies actually selected keywords to clipboard and removes them from editor</summary>
 <seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.Copy"/><seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.Paste(System.Boolean)"/>
 <remarks><see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> uses clipboard format <see cref="F:System.Windows.Forms.TextDataFormat.UnicodeText"/> - one keyword on line</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.Paste(System.Boolean)">
 <summary>pastes keywords form clipboard to editor</summary>
 <seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.Cut"/><seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.Copy"/>
 <remarks><see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> uses clipboard format <see cref="F:System.Windows.Forms.TextDataFormat.UnicodeText"/> - one keyword on line</remarks>
 <param name="SuppressMessageBoxes">True not to show any messages to the ueser (if false user may be promped when pasting more than 50 keywords or when any signgle keyword (line in text) is longer than 32 characters)</param>
 <returns>True if any keyword was added. False may be returned due empy clipboard, incompatible data in clipboard, user revocation or because all keywords wa already in list. Lines are separated by <see cref="P:System.Environment.NewLine"/> - any other separator causes improperly separated keywords to be pasted.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.RemoveSelectedItems">
 <summary>Deletes selected items from <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.lstKW"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.OnKeyWordRemoved(Tools.CollectionsT.GenericT.ListWithEvents{System.String}.ItemsEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWordRemoved"/> event</summary>
 <param name="e">Event params</param>
</member>
<member name="E:Tools.WindowsT.FormsT.KeyWordsEditor.KeyWordRemoved">
 <summary>Raised after user manually removes keyword(s)</summary>
 <remarks>Not raised when keywords are removed programatically</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._AutoChange">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoChange"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoChange">
 <summary>Gets or sets value indicating if <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status">Status</see>.<see cref="P:Tools.WindowsT.FormsT.StatusMarker.Status">Status</see> automatically changes when keyword is added or removed</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetSynonymIndexes(System.String)">
 <summary>Gets indexes to <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> where synonyms of given word are stored in </summary>
 <param name="Word">Word to search for synonyms of</param>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetSynonyms(System.String)">
 <summary>Gets all synonyms of given word including it</summary>
 <param name="Word">Word to get synonyms for</param>
 <returns>Synonyms of <paramref name="Word"/> (avoiding duplicates). When no synonyms are found <paramref name="Word"/> itself is returned</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.CSCompareI(System.String,System.String)">
 <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
 <param name="y">The second object to compare.</param>
 <param name="x">The first object to compare.</param>
 <returns>Value Condition Less than zerox is less than y.Zerox equals y.Greater than zerox is greater than y.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.ShowDialog">
 <summary>Shows forms tprovides dialog for editing settings for this instance</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetXML(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String[],System.String[]}})">
 <summary>Stores collection used by <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> in <see cref="T:System.Xml.Linq.XDocument"/></summary>
 <param name="Keywords"><see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable"/> collection. Can be null.</param>
 <param name="Synonyms"><see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> collection. Can be null.</param>
 <returns><see cref="T:System.Xml.Linq.XDocument"/> that stores given collections</returns>
 <seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetKeywordsAsXML"/>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetKeywordsAsXML">
 <summary>Gets all keywords and synonyms used by this <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> as <see cref="T:System.Xml.Linq.XDocument"/> that can be saved.</summary>
 <remarks><see cref="T:System.Xml.Linq.XDocument"/> that contains all the keywords and synonyms ready to be stored in file.</remarks>
 <seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.LoadFromXML(System.Xml.Linq.XDocument,System.Boolean)"/>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.XMLSchema">
 <summary>Gets XML-Schema used for storing keywords and synonyms</summary>
 <seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.LoadFromXML(System.Xml.Linq.XDocument,System.Boolean)"/><seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.GetKeywordsAsXML"/>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.LoadFromXML(System.Xml.Linq.XDocument,System.Boolean)">
 <summary>Loads keywords and synonyms from given XML document</summary>
 <param name="doc">Document to load setting from</param>
 <param name="JustThis">True to ensure that load involves only this instance of <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/>. False to load keywords and sysnonyms to shared collections (if possible).</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="doc"/> is null</exception>
 <exception cref="T:System.Xml.Schema.XmlSchemaException">Document <paramref name="doc"/> does not comply with XML-Schema http://dzonny.cz/xml/Tools.WindowsT.FormsT.KeyWordsEditor. This schema is stored as embdeded resource Tools.WindowsT.FormsT.KeyWordsEditor.xsd in this assembly.</exception>
 <remarks>
 <para>If <paramref name="JustThis"/> is true, collections <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteStable"/> and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Synonyms"/> are re-created and <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> is ste to false.</para>
 <para>If <paramref name="JustThis"/> is false, those collections are emptied and filled with newly loaded values. So, such load has effect on all instances of <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> which share same collections (using <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutomaticLists"/> and same <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/>, or by seting those collections manuallly tu same instance). <paramref name="JustThis"/> set to false is ignored for particular collection if the collection is null (in such case it is always re-created).</para>
 </remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.ParseFromXml(System.Xml.Linq.XDocument)">
 <summary>Parses given <see cref="T:System.Xml.Linq.XDocument"/> to collections used by <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/></summary>
 <param name="doc">Document to be parsed</param>
 <returns><see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/>. <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value1"/> contains list of keywords for autocomplete, <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value2"/> contains pairs of synonyms.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="doc"/> is null</exception>
 <exception cref="T:System.Xml.Schema.XmlSchemaException">Document <paramref name="doc"/> does not comply with XML-Schema http://dzonny.cz/xml/Tools.WindowsT.FormsT.KeyWordsEditor. This schema is stored as embdeded resource Tools.WindowsT.FormsT.KeyWordsEditor.xsd in this assembly.</exception>
 <seelaso cref="M:Tools.WindowsT.FormsT.KeyWordsEditor.LoadFromXML(System.Xml.Linq.XDocument,System.Boolean)"/>
</member>
<member name="T:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy">
 <summary>Proxy for the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.Status"/> property in design time</summary>
 <remarks>This class supports design-time behaviour of <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> and should not be used directly</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.kwe">
 <summary><see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> which owns <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/> this instance is proxy for</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.sm">
 <summary><see cref="T:Tools.WindowsT.FormsT.StatusMarker"/> this instance is proxy for</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.#ctor(Tools.WindowsT.FormsT.KeyWordsEditor)">
 <summary>CTor</summary>
 <param name="kwe"><see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> which owns <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/> this instance is proxy for</param>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.AddMenuState">
 <summary>Proxies <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status"/>.<see cref="P:Tools.WindowsT.FormsT.StatusMarker.AddMenuState">AddMenuState</see></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.DeleteMenuState">
 <summary>Proxies <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status"/>.<see cref="P:Tools.WindowsT.FormsT.StatusMarker.DeleteMenuState">DeleteMenuState</see></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.MarkAsChangedMenuState">
 <summary>Proxies <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status"/>.<see cref="P:Tools.WindowsT.FormsT.StatusMarker.MarkAsChangedMenuState">MarkAsChangedMenuState</see></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.ResetMenuState">
 <summary>Proxies <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status"/>.<see cref="P:Tools.WindowsT.FormsT.StatusMarker.ResetMenuState">ResetMenuState</see></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.AutoChanged">
 <summary>Proxies <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status"/>.<see cref="P:Tools.WindowsT.FormsT.StatusMarker.AutoChanged">AutoChanged</see></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.Status">
 <summary>Proxies <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.Status"/>.<see cref="P:Tools.WindowsT.FormsT.StatusMarker.Status">Status</see></summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.StatusMarker.Statuses"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.StatusProxy.ShouldSerialize">
 <summary>Gets value indicatiiong if any of properties should be serialized</summary>
 <returns>True if any of properties has value different from default</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.KeyWordsEditor.#ctor">
 <summary>CTor</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._ContextMenuEnabled">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.ContextMenuEnabled"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.KeyWordsEditor._ShortcutsEnabled">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.ShortcutsEnabled"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.ContextMenuEnabled">
 <summary>Gets or sets value indicating if context menu for <see cref="T:System.Windows.Forms.ListBox"/> which shows keybords is enabled</summary>
 <value>Default value is true</value>
 <returns>True if it is enabled, false if it is not</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.KeyWordsEditor.ShortcutsEnabled">
 <summary>Gets or sets value indicating if keyboard shortcuts for clipboard operations are allowed for keywords</summary>
 <value>Default value is true</value>
 <returns>True if shortcuts are enabled, false if they are not</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.ThesaurusForm">
 <summary>Editor of autocomplete list and synonym groups for <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ThesaurusForm.For">
 <summary><see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> this instance is for</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ThesaurusForm.#ctor(Tools.WindowsT.FormsT.KeyWordsEditor)">
 <summary>CTor</summary>
 <param name="For"><see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor"/> to be dialog for</param>
</member>
<member name="F:Tools.WindowsT.FormsT.ThesaurusForm.CacheGuid">
 <summary>Appended as suffix to <see cref="P:Tools.WindowsT.FormsT.KeyWordsEditor.AutoCompleteCacheName"/> of <see cref="T:Tools.WindowsT.FormsT.KeyWordsEditor">KeyWordsEditors</see> on this form.</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ThesaurusForm.Initialize">
 <summary>Initializes form</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy">
 <summary>Proxy of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> for <see cref="T:System.Windows.Forms.ComboBox"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy.Syns">
 <summary>Value being proxied</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy.#ctor(System.Collections.Generic.KeyValuePair{System.String[],System.String[]})">
 <summary>CTor</summary>
 <param name="Syns">Value to be proxied</param>
</member>
<member name="P:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy.DisplayMember">
 <summary>Display member for <see cref="T:System.Windows.Forms.ComboBox"/></summary>
 <returns>First item from <see cref="F:Tools.WindowsT.FormsT.ThesaurusForm.SynProxy.Syns">Syns</see>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see></returns>
</member>
<member name="M:Tools.WindowsT.FormsT.ThesaurusForm.ShowCache">
 <summary>Shows content of autocomplete cache</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ThesaurusForm.OldItem">
 <summary>Previosly selected item in <see cref="P:Tools.WindowsT.FormsT.ThesaurusForm.cmbSyn"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ThesaurusForm.StoreOldItem">
 <summary>Stores keywords from <see cref="P:Tools.WindowsT.FormsT.ThesaurusForm.kweValues"/> and <see cref="P:Tools.WindowsT.FormsT.ThesaurusForm.kweKeys"/> into <see cref="F:Tools.WindowsT.FormsT.ThesaurusForm.OldItem"/></summary>
</member>
<member name="T:Tools.WindowsT.FormsT.StatusMarker">
 <summary>Marks state of data item</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
</member>
<member name="T:Tools.WindowsT.FormsT.StatusMarker.Statuses">
 <summary>Supported states of <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Normal">
 <summary>Normal state (data are in sync)</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Null">
 <summary>Null (data are not available)</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.New">
 <summary>New (data was null and now it is not null)</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Changed">
 <summary>Changed (data was changed since last save)</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Deleted">
 <summary>Deleted (data was not null and now it is null)</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Error">
 <summary>Data error</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.NA">
 <summary>Data status unkown</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.StatusMarker._Status">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.StatusMarker.Status"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.StatusMarker.Status">
 <summary>Gets or sets shown status of the control</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.StatusMarker.Statuses"/></exception>
</member>
<member name="E:Tools.WindowsT.FormsT.StatusMarker.StatusChanged">
 <summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.Status"/> changes</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.StatusMarker.OnStatusChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.StatusChanged"/> event</summary>
 <param name="e">Event parameters (<see cref="F:System.EventArgs.Empty"/>)</param>
</member>
<member name="P:Tools.WindowsT.FormsT.StatusMarker.DeleteMenuState">
 <summary>Gets or set state of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiDelete"/></summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.StatusMarker.MarkAsChangedMenuState">
 <summary>Gets or set state of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiMarkAsChanged"/></summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.StatusMarker.ResetMenuState">
 <summary>Gets or set state of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiReset"/></summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.StatusMarker.MenuState(System.Windows.Forms.ToolStripMenuItem)">
 <summary>Gets or sets state of menu item</summary>
 <param name="Menu">Menu item to get or set state for</param>
</member>
<member name="P:Tools.WindowsT.FormsT.StatusMarker.AddMenuState">
 <summary>Gets or set state of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiAdd"/></summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
</member>
<member name="F:Tools.WindowsT.FormsT.StatusMarker._AutoChanged">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.StatusMarker.AutoChanged"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.StatusMarker.AutoChanged">
 <summary>Gets or sets value indicating if <see cref="P:Tools.WindowsT.FormsT.StatusMarker.Status"/> automatically changes to <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Changed"/> when <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiMarkAsChanged"/> is clicked</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.StatusMarker.Add">
 <summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiAdd"/> is clicked</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.StatusMarker.OnAdd(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.Add"/> event</summary>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.WindowsT.FormsT.StatusMarker.MarkAsChanged">
 <summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiMarkAsChanged"/> is clicked</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.StatusMarker.OnMarkAsChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.MarkAsChanged"/> event</summary>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.WindowsT.FormsT.StatusMarker.Reset">
 <summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiReset"/> is clicked</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.StatusMarker.OnReset(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.Reset"/> event</summary>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.WindowsT.FormsT.StatusMarker.Delete">
 <summary>Raised after <see cref="P:Tools.WindowsT.FormsT.StatusMarker.tmiDelete"/> is clicked</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.StatusMarker.OnDelete(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.StatusMarker.Delete"/> event</summary>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.WindowsT.FormsT.StatusMarker.OnButtonClick">
 <summary>Shows <see cref="P:Tools.WindowsT.FormsT.StatusMarker.cmsStatus"/></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.StatusMarker.AutoSize">
 <summary>Gets or sets if this control automatically sizes by its content</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl">
 <summary>Control this instance reports status of</summary>
 <value>Can be null if there is no auto-monitored control</value>
 <returns>Auto-monitored control or null if there is no auto-monitored control</returns>
 <remarks>
 <para>Supported types of StatusedControls are (ordered by precedence - if component implements <see cref="T:Tools.IReportsChange"/> then <see cref="T:Tools.IReportsChange"/> is used, otherwise <see cref="T:System.Windows.Forms.TextBoxBase"/> is checked etc.):</para>
 <list type="table">
 <listheader><term>Type</term><description>Depends on event</description></listheader>
 <item><term><see cref="T:Tools.IReportsChange"/></term><description><see cref="E:Tools.IReportsChange.Changed"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.TextBoxBase"/></term><description><see cref="E:System.Windows.Forms.Control.TextChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.NumericUpDown"/></term><description><see cref="E:System.Windows.Forms.NumericUpDown.ValueChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.DomainUpDown"/></term><description><see cref="E:System.Windows.Forms.DomainUpDown.SelectedItemChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.ComboBox"/></term><description>If <see cref="P:System.Windows.Forms.ComboBox.DropDownStyle"/> is <see cref="F:System.Windows.Forms.ComboBoxStyle.DropDownList"/> <see cref="E:System.Windows.Forms.ComboBox.SelectedIndexChanged"/>; <see cref="E:System.Windows.Forms.Control.TextChanged"/> otherwise</description>. Note: Do not change <see cref="P:System.Windows.Forms.ComboBox.DropDownStyle"/> property after the <see cref="T:System.Windows.Forms.ComboBox"/> is assigned to <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/></item>
 <item><term><see cref="T:System.Windows.Forms.CheckBox"/></term><description>If <see cref="P:System.Windows.Forms.CheckBox.ThreeState"/> is True <see cref="E:System.Windows.Forms.CheckBox.CheckStateChanged"/>; <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged"/> otherwise. Note: Do not change value of the <see cref="P:System.Windows.Forms.CheckBox.ThreeState"/> property after the <see cref="T:System.Windows.Forms.CheckBox"/> is assigned to <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.RadioButton"/></term><description><see cref="E:System.Windows.Forms.RadioButton.CheckedChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.CheckedListBox"/></term><description><see cref="E:System.Windows.Forms.CheckedListBox.ItemCheck"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.MonthCalendar"/></term><description><see cref="E:System.Windows.Forms.MonthCalendar.DateChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.DateTimePicker"/></term><description><see cref="E:System.Windows.Forms.DateTimePicker.ValueChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.TrackBar"/></term><description><see cref="E:System.Windows.Forms.TrackBar.ValueChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.ScrollBar"/></term><description><see cref="E:System.Windows.Forms.ScrollBar.ValueChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.ToolStripTextBox"/></term><description><see cref="E:System.Windows.Forms.ToolStripItem.TextChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.ToolStripComboBox"/></term><description>If <see cref="P:System.Windows.Forms.ToolStripComboBox.DropDownStyle"/> is <see cref="F:System.Windows.Forms.ComboBoxStyle.DropDownList"/> <see cref="E:System.Windows.Forms.ToolStripComboBox.SelectedIndexChanged"/>; <see cref="E:System.Windows.Forms.ToolStripItem.TextChanged"/> otherwise</description>. Note: Do not change <see cref="P:System.Windows.Forms.ToolStripComboBox.DropDownStyle"/> property after the <see cref="T:System.Windows.Forms.ToolStripComboBox"/> is assigned to <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/></item>
 <item><term><see cref="T:System.Windows.Forms.ToolStripButton"/></term><description><see cref="E:System.Windows.Forms.ToolStripButton.CheckedChanged"/></description></item>
 <item><term><see cref="T:System.Windows.Forms.ToolStripMenuItem"/></term><description><see cref="E:System.Windows.Forms.ToolStripMenuItem.CheckedChanged"/></description></item>
 </list>
 </remarks>
 <exception cref="T:System.NotSupportedException">Type of passed component is not supported</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.StatusMarker.RemoveHandler">
 <summary>Removes method <see cref="M:Tools.WindowsT.FormsT.StatusMarker.Handler``2(``0,``1)"/> as hendler of event of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/> where it was added in <see cref="M:Tools.WindowsT.FormsT.StatusMarker.AddHandler(System.ComponentModel.Component)"/> method</summary>
 <exception cref="T:System.NotSupportedException">Type of <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/> is not supported. See <seealso cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/> for list of supported types.</exception>
 <remarks>Note for inheritors: You can extedn <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/>'s support of statused controls either by overriding <see cref="M:Tools.WindowsT.FormsT.StatusMarker.AddHandler(System.ComponentModel.Component)"/> and <see cref="M:Tools.WindowsT.FormsT.StatusMarker.RemoveHandler"/> methods or by implementing <see cref="T:Tools.IReportsChange"/> by the control that should be supported</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.StatusMarker.AddHandler(System.ComponentModel.Component)">
 <summary>Adds method <see cref="M:Tools.WindowsT.FormsT.StatusMarker.Handler``2(``0,``1)"/> as handler of appropriate event of given component</summary>
 <param name="Component">Component to add handler to</param>
 <remarks>Note for inheritors: You can extedn <see cref="T:Tools.WindowsT.FormsT.StatusMarker"/>'s support of statused controls either by overriding <see cref="M:Tools.WindowsT.FormsT.StatusMarker.AddHandler(System.ComponentModel.Component)"/> and <see cref="M:Tools.WindowsT.FormsT.StatusMarker.RemoveHandler"/> methods or by implementing <see cref="T:Tools.IReportsChange"/> by the control that should be supported</remarks>
 <exception cref="T:System.NotSupportedException">Type of <paramref name="Component"/> is not supported. See <seealso cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/> for list of supported types.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.StatusMarker.Handler``2(``0,``1)">
 <summary>Handles change of value of monitored control</summary>
 <param name="sender">Source of event - should be same as <see cref="P:Tools.WindowsT.FormsT.StatusMarker.StatusedControl"/></param>
 <param name="e">Event arguments repored by <paramref name="sender"/></param>
 <typeparam name="TSender">Type of sender (typically <see cref="T:System.Object"/>)</typeparam>
 <typeparam name="TEventargs">Type of event arguments (typically <see cref="T:System.EventArgs"/>)</typeparam>
 <remarks>This method is generic because it is required for handlers to work. It does not rely on exact types of <paramref name="sender"/> amd <paramref name="e"/>.</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.IControlWithStatus">
 <summary>Provides common interface for controls that exposes its status</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="P:Tools.WindowsT.FormsT.IControlWithStatus.Status">
 <summary>Current status of control</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.IControlWithStatus.DeleteMenustate">
 <summary>State of delete menu item</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.IControlWithStatus.MarkAsChangedMenuState">
 <summary>State of mar-as-changed menu item</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.IControlWithStatus.ResetMenuState">
 <summary>state of reset menu item</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.IControlWithStatus.AddMenuState">
 <summary>state of add menu item</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.IControlWithStatus.AutoChanged">
 <summary>Indicates if <see cref="P:Tools.WindowsT.FormsT.IControlWithStatus.Status"/> automatically chnages to <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.Changed"/> and <see cref="F:Tools.WindowsT.FormsT.StatusMarker.Statuses.New"/> if user takes appropriate action</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.IControlWithStatus.Add">
 <summary>Raised after add menu item is clicked</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.IControlWithStatus.MarkAsChanged">
 <summary>Raised after mark-as-changed menu item is clicked</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.IControlWithStatus.Reset">
 <summary>Raised after reset menu item is clicked</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.IControlWithStatus.Delete">
 <summary>Raised after delete menu item is clcked</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.IControlWithStatus.StatusChanged">
 <summary>Raised after <see cref="P:Tools.WindowsT.FormsT.IControlWithStatus.Status"/> is changed</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.DataBoundToolStripComboBox">
 <summary><see cref="T:System.Windows.Forms.ToolStripComboBox"/> that allows databinding</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.DisplayMember">
 <summary>Gets or sets the property to display for <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/>.</summary>
 <returns>A <see cref="T:System.String"/> specifying the name of an object property that is contained in the collection specified by the <see cref="P:System.Windows.Forms.ListControl.DataSource"/> property. The default is an empty string ("").</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.ValueMember">
 <summary>Gets or sets the property to use as the actual value for the items in <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/>.</summary>
 <returns>A <see cref="T:System.String"/> representing the name of an object property that is contained in the collection specified by the <see cref="P:System.Windows.Forms.ListControl.DataSource"/> property. The default is an empty string ("").</returns>
 <exception cref="T:System.ArgumentException">The specified property cannot be found on the object specified by the <see cref="P:System.Windows.Forms.ListControl.DataSource"/> property.</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.DataSource">
 <summary>Gets or sets the data source for <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/>.</summary>
 <returns>An object that implements the <see cref="T:System.Collections.IList"/> interface, such as a <see cref="T:System.Data.DataSet"/> or an <see cref="T:System.Array"/>. The default is null.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.SelectedIndex">
 <summary>Gets or sets the index specifying the currently selected item.</summary>
 <returns>A zero-based index of the currently selected item. A value of negative one (-1) is returned if no item is selected.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.SelectedValue">
 <summary>Gets or sets the value of the member property specified by the <see cref="P:System.Windows.Forms.ListControl.ValueMember"/> property.</summary>
 <returns>An object containing the value of the member of the data source specified by the <see cref="P:System.Windows.Forms.ListControl.ValueMember"/> property.</returns>
 <exception cref="T:System.InvalidOperationException">The assigned value is null or the empty string ("").</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.DataBindings">
 <summary>Gets the data bindings for the control.</summary>
 <returns>A <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> that contains the <see cref="T:System.Windows.Forms.Binding"/> objects for the control.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.BindingContext">
 <summary>Gets or sets the <see cref="T:System.Windows.Forms.BindingContext"/> for the control.</summary>
 <returns>A <see cref="T:System.Windows.Forms.BindingContext"/> for the control.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.OnBindingContextChanged(System.Object,System.EventArgs)">
 <summary>Called when <see cref="E:System.Windows.Forms.Control.BindingContextChanged"/> of <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/> occures</summary>
 <param name="sender">Source of event (always <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/></param>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.OnBindingContextChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.BindingContextChanged"/> event</summary>
 <param name="e">Event parameters</param>
 <remarks>Note for inheritors: Always call base class's method in order event to be raised</remarks>
</member>
<member name="E:Tools.WindowsT.FormsT.DataBoundToolStripComboBox.BindingContextChanged">
 <summary>Fired when <see cref="E:System.Windows.Forms.Control.BindingContextChanged"/> of <see cref="P:System.Windows.Forms.ToolStripComboBox.ComboBox"/> occures</summary>
 <param name="sender">Source of the event - rhis isntance of <see cref="T:Tools.WindowsT.FormsT.DataBoundToolStripComboBox"/></param>
 <param name="e">Event parameters</param>
</member>
<member name="T:Tools.WindowsT.FormsT.DataBoundToolStripLabel">
 <summary><see cref="T:System.Windows.Forms.ToolStripLabel"/> that allows databinding</summary>
 <remarks><seealso>http://forums.devx.com/archive/index.php/t-153607.html</seealso></remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.WindowsT.FormsT.DataBoundToolStripLabel._context">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.BindingContext"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.DataBoundToolStripLabel._bindings">
 <summary>Contains value of the<see cref="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.DataBindings"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.BindingContext">
 <summary>Gets or sets the collection of currency managers for the <see cref="T:System.Windows.Forms.IBindableComponent"/>.</summary>
 <returns>The collection of <see cref="T:System.Windows.Forms.BindingManagerBase"/> objects for this <see cref="T:Tools.WindowsT.FormsT.DataBoundToolStripLabel"/>.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.DataBindings">
 <summary>Gets the collection of data-binding objects for this <see cref="T:System.Windows.Forms.IBindableComponent"/>.</summary>
 <returns>The <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> for this <see cref="T:Tools.WindowsT.FormsT.DataBoundToolStripLabel"/>.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.DataBoundToolStripLabel.Text">
 <summary>Gets or sets the text that is to be displayed on the item.</summary>
 <returns>A string representing the item's text. The default value is the empty string ("").</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DataBoundToolStripLabel.OnBindingContextChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.DataBoundToolStripLabel.BindingContextChanged"/> event</summary>
 <param name="e">Event parameters</param>
 <remarks>Note for inheritors: Always call base class's method in order event to be raised</remarks>
</member>
<member name="E:Tools.WindowsT.FormsT.DataBoundToolStripLabel.BindingContextChanged">
 <summary>Fired when <see cref="E:System.Windows.Forms.Control.BindingContextChanged"/> of <see cref="T:System.Windows.Forms.ComboBox"/> occures</summary>
 <param name="sender">Source of the event - rhis isntance of <see cref="T:Tools.WindowsT.FormsT.DataBoundToolStripComboBox"/></param>
 <param name="e">Event parameters</param>
</member>
<member name="T:Tools.WindowsT.FormsT.frmEncodingDialog">
 <summary>Representf dialog shown by <see cref="T:Tools.WindowsT.FormsT.EncodingDialog"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor">
 <summary>Instance of <see cref="T:Tools.WindowsT.FormsT.EncodingDialog"/> that owns this form</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.#ctor(Tools.WindowsT.FormsT.EncodingDialog)">
 <summary>CTor</summary>
 <param name="Owner">The <see cref="T:Tools.WindowsT.FormsT.EncodingDialog"/> that owns this form</param>
</member>
<member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.ValidateEncoding">
 <summary>Performs action before user is allowed to close the dialog</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.ValidationRequired">
 <summary>Set to True when <see cref="P:Tools.WindowsT.FormsT.frmEncodingDialog.bgwTestEncoding"/> was busy when trying to start it in order to validate encoding</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.OnTest(System.Text.EncodingInfo,System.ComponentModel.DoWorkEventArgs)">
 <summary>Called assynchronously when testing of encoding is required</summary>
 <param name="Encoding">Encoding to be tested</param>
 <param name="e">Arguments of <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> event tah can be used to obtain detailed information about invocation</param>
 <remarks>Do not use <paramref name="e"/>'s <see cref="P:System.ComponentModel.DoWorkEventArgs.Argument"/> it will be raplaced with return value of this function</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult">
 <summary>Result of encoding test</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult.Result">
 <summary><see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> decoded by selected encoding</summary>
 <remarks>Valid only when <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> is set</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult.CanDecode">
 <summary>Indicates if <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> can be encoded by selected encoding with no loss of data</summary>
 ''' <remarks>Valid only when <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> is set</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult.CanEncode">
 <summary>Indicates if <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> can be encoded by selected encoding with no loss of data</summary>
 <remarks>Valid only when <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> is set</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.TestResult.#ctor(System.String,System.Boolean,System.Boolean)">
 <summary>CTor</summary>
 <param name="Result"><see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> decoded by selected encoding</param>
 <param name="CanDecode">Indicates if <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> can be encoded by selected encoding with no loss of data</param>
 <param name="CanEncode">Valid only when <see cref="F:Tools.WindowsT.FormsT.frmEncodingDialog.ServesFor"/>'s <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> is set</param>
</member>
<member name="M:Tools.WindowsT.FormsT.frmEncodingDialog.OnTestFinished(Tools.WindowsT.FormsT.frmEncodingDialog.TestResult,System.ComponentModel.RunWorkerCompletedEventArgs)">
 <summary>Called synchronously when <see cref="M:Tools.WindowsT.FormsT.frmEncodingDialog.OnTest(System.Text.EncodingInfo,System.ComponentModel.DoWorkEventArgs)"/> finishes. Used to disply results of testing.</summary>
 <param name="result">Result of testing</param>
 <param name="e">Argument of <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> that can be used to obtain detailed information</param>
</member>
<member name="T:Tools.WindowsT.FormsT.EncodingDialog">
 <summary>Dialog that allows user to select encoding</summary>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingDialog.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingDialog.Reset">
 <summary>Resets the properties of a common dialog box to their default values</summary>
 <remarks>Note for inheritors: Call base class method in order to use default reset logic</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog._DialogForm">
 <summary>The form that realizes the dialog</summary>
 <remarks>This field should be no-null only when form is visible. Set it to instance of <see cref="T:Tools.WindowsT.FormsT.frmEncodingDialog"/> in <see cref="M:Tools.WindowsT.FormsT.EncodingDialog.ShowDialog(System.Windows.Forms.Form)"/>, the show it and then set it to null again.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog._SelectedEncoding">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.SelectedEncoding"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingDialog.SelectedEncoding">
 <summary>After dialog has ran returns the ancoding selected by user (if any)</summary>
 <value>Note for inheritors: Set this property in the <see cref="M:Tools.WindowsT.FormsT.EncodingDialog.ShowDialog(System.Windows.Forms.Form)"/> function</value>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog._Preselected">
 <summary>Contgains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.Preselected"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingDialog.Preselected">
 <summary>Specifies the <see cref="P:System.Text.EncodingInfo.CodePage"/> that will be selected when the dialog is shown (when encoding available)</summary>
 <value><see cref="P:System.Text.EncodingInfo.CodePage"/> of encoding to preselect or negative number to preslect no encoding</value>
 <returns><see cref="P:System.Text.EncodingInfo.CodePage"/> of preselected encoding or negativ value if no encoding will be preselected</returns>
 <remarks>After dialog has ran this property stays unchanged</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog._PreviewBytes">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes">
 <summary>Gets or sets text to decode by selected encoding and show preview to the user</summary>
 <remarks>If set preview will be shown</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog._PreviewString">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString">
 <summary>Gets or sets text to encode by selected encoding and inform user if all characters can be encoded using selected encoding</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog._RequireCorrect">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.RequireCorrect"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingDialog.RequireCorrect">
 <summary>Defines if user can select encoding that cannot be used on specified <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> or <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> without problems</summary>
 <remarks>Applicable only if at least one of <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewBytes"/> or <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.PreviewString"/> properties is set</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog._Text">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.Text"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingDialog.Text">
 <summary>Gets or sets text displayed in title of window of dialog</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog._ShowHelp">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingDialog.ShowHelp"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingDialog.ShowHelp">
 <summary>Determines if help button will be shown</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.EncodingDialog.OKClicked">
 <summary>Raised after user clicks OK and dialog allows him co select encoding</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Arguments of event</param>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingDialog.OnOKClicked(Tools.WindowsT.FormsT.EncodingDialog.EncodingCancelEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.EncodingDialog.OKClicked"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Call base calss method in order the event to be raised</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.EncodingDialog.EncodingCancelEventArgs">
 <summary>Argument of the <see cref="E:Tools.WindowsT.FormsT.EncodingDialog.OKClicked"/> event</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingCancelEventArgs.SelectedEncoding">
 <summary>Encoding that was selected in a dialog</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingDialog.EncodingCancelEventArgs.#ctor(System.Text.EncodingInfo)">
 <summary>CTor</summary>
 <param name="Encoding">Encoding selected in dialog to be verified by handling code</param>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingDialog.RunDialog(System.IntPtr)">
 <summary>When overridden in a derived class, specifies a common dialog box.</summary>
 <param name="hwndOwner">A value that represents the window handle of the owner window for the common dialog box.</param>
 <returns>true if the dialog box was successfully run; otherwise, false.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingDialog.ShowDialog(System.Windows.Forms.Form)">
 <param name="owner"><see cref="T:System.Windows.Forms.Form"/> that will own the dialog</param>
 <returns><see cref="F:System.Windows.Forms.DialogResult.OK"/> if the user clicks OK in the dialog box; otherwise, <see cref="F:System.Windows.Forms.DialogResult.Cancel"/>.</returns>
 <remarks>This function differs from the <see cref="M:System.Windows.Forms.CommonDialog.ShowDialog"/>. Use this shadow function rather than base class's one.</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters">
 <summary>Filters encoding by its parameters</summary>
 <remarks>This enumeration is used to either include only encodings or exclude all encodings that falle into either at least one or all groups specified</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedYes">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/> = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedNo">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/> = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserDisplayYes">
 <summary><see cref="P:System.Text.Encoding.IsBrowserDisplay"/> = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserDisplayNo">
 <summary><see cref="P:System.Text.Encoding.IsBrowserDisplay"/> = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserSaveYes">
 <summary><see cref="P:System.Text.Encoding.IsBrowserSave"/> = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserSaveNo">
 <summary><see cref="P:System.Text.Encoding.IsBrowserSave"/> = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserYes">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserDisplayYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserSaveYes"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserNo">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserDisplayNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserSaveNo"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsDisplayYes">
 <summary><see cref="P:System.Text.Encoding.IsMailNewsDisplay"/> = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsDisplayNo">
 <summary><see cref="P:System.Text.Encoding.IsBrowserDisplay"/> = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsSaveYes">
 <summary><see cref="P:System.Text.Encoding.IsMailNewsSave"/> = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsSaveNo">
 <summary><see cref="P:System.Text.Encoding.IsMailNewsSave"/> = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsYes">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsDisplayYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsSaveYes"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsNo">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsDisplayNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsSaveNo"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.ReadOnlyYes">
 <summary><see cref="P:System.Text.Encoding.IsReadOnly"/> = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.ReadOnlyNo">
 <summary><see cref="P:System.Text.Encoding.IsReadOnly"/> = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.SingleByte">
 <summary><see cref="P:System.Text.Encoding.IsSingleByte"/> = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MultiByte">
 <summary><see cref="P:System.Text.Encoding.IsSingleByte"/> = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentBodyYes">
 <summary><see cref="P:System.Text.Encoding.BodyName"/> isn not an empty string</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentBodyNo">
 <summary><see cref="P:System.Text.Encoding.BodyName"/> isn an empty string</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentHeaderYes">
 <summary><see cref="P:System.Text.Encoding.HeaderName"/> isn not an empty string</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentHeaderNo">
 <summary><see cref="P:System.Text.Encoding.HeaderName"/> isn an empty string</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentYes">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentBodyYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentHeaderYes"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentNo">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentBodyNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentHeaderNo"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailYes">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentYes"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNo">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNewsNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailAgentNo"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.InternetYes">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserYes"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.InternetNo">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.MailNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.BrowserNo"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCYes">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormC"/>) = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCNo">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormC"/>) = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedDYes">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormD"/>) = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedDNo">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormD"/>) = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKCYes">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKC"/>) = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKCNo">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKC"/>) = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKDYes">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKD"/>) = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKDNo">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKD"/>) = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCanonicalBothYes">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedDYes"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCanonicalBothNo">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedDNo"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCompatibilityBothYes">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKCYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKDYes"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCompatibilityBothNo">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKCNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedKDNo"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedAllYes">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCanonicalBothYes"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCompatibilityBothYes"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedAllNo">
 <summary>Or combination of <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCanonicalBothNo"/> and <see cref="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedFullCompatibilityBothNo"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCanonicalAtLeastOneYes">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormC"/>) = True -or- <see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormD"/>) = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCanonicalAtLeastOneNo">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormC"/>) = False -or- <see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormD"/>) = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCompatibilityAtLeastOneYes">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKC"/>) = True -or- <see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKD"/>) = True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedCompatibilityAtLeastOneNo">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKC"/>) = False -or- <see cref="M:System.Text.Encoding.IsAlwaysNormalized"/>(<see cref="F:System.Text.NormalizationForm.FormKD"/>) = False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedAtLeastOneYes">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/> with one of <see cref="T:System.Text.NormalizationForm"/> values returns True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.NormalizedAtLeastOneNo">
 <summary><see cref="M:System.Text.Encoding.IsAlwaysNormalized"/> with one of <see cref="T:System.Text.NormalizationForm"/> values returns False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.CodePage_EQ_WindowsCodePage">
 <summary><see cref="P:System.Text.Encoding.CodePage"/> = <see cref="P:System.Text.Encoding.WindowsCodePage"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.CodePage_NEQ_WindowsCodePage">
 <summary><see cref="P:System.Text.Encoding.CodePage"/> != <see cref="P:System.Text.Encoding.WindowsCodePage"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.PreambleYes">
 <summary><see cref="M:System.Text.Encoding.GetPreamble"/>.<see cref="P:System.Array.Length"/> > 0</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingDialog.EncodingFilters.PrembleNo">
 <summary><see cref="M:System.Text.Encoding.GetPreamble"/>.<see cref="P:System.Array.Length"/> = 0</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.EncodingSelector">
 <summary>Control taht allows user to chose from available encoding</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Beta"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.lvwEncodingListViewItemSorter_Changed(Tools.IReportsChange,System.EventArgs)">
 <summary>Handles <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event of <see cref="P:System.Windows.Forms.ListView.ListViewItemSorter"/> of <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.lvwEncoding"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.RefreshEncodings">
 <summary>Refreshes list of encodings</summary>
 <remarks>Encodings are obtainded from <see cref="M:System.Text.EncodingInfo.GetEncoding"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.RemoveEncoding(System.Text.EncodingInfo)">
 <summary>Removes first encoding with same <see cref="P:System.Text.EncodingInfo.CodePage"/> as <paramref name="Encoding"/>'s one</summary>
 <param name="Encoding">Encoding to remove</param>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.RemoveEncoding(System.Int32)">
 <summary>Removes first encoding with same <see cref="P:System.Text.EncodingInfo.CodePage"/> as <paramref name="Encoding"/></summary>
 <param name="CodePage">Code page to search for</param>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.Clear">
 <summary>Removes all encodings</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.Add(System.Text.EncodingInfo)">
 <summary>Adds given encoding (if encoding with same <see cref="P:System.Text.EncodingInfo.CodePage"/> is not present in list)</summary>
 <param name="Encoding">Encoding to add</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Encoding"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ContainsCodePage(System.Int32)">
 <summary>Determines wheather encoding with <see cref="P:System.Text.EncodingInfo.CodePage"/> equal to <paramref name="CP"/> is present in list</summary>
 <param name="CP">Code page to search for</param>
 <returns>True if encoding with same code page is found, otherwise not.</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector._DisplayStyle">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayStyle"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayStyle">
 <summary>Gets or sets format string used to display name of encodings in list</summary>
 <remarks>
 Property is ignored when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/>
 <list>
 <listheader>There are 3 parameters tah can be passed to format string:</listheader>
 <item>{0} - <see cref="P:System.Text.EncodingInfo.DisplayName"/></item>
 <item>{1} - <see cref="P:System.Text.EncodingInfo.Name"/></item>
 <item>{2} - <see cref="P:System.Text.EncodingInfo.CodePage"/></item>
 </list>
 <para>Expamples:
 <example>{0}</example> displays user-friendly name of encoding
 <example>{1} (CP {2})</example> displays IANA-registered name of encoding and its codepage.
 </para>
 <seealso cref="T:System.String"/>
 <seealso cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.DisplayStyle"/>
 </remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle">
 <summary>Styles of <see cref="T:Tools.WindowsT.FormsT.EncodingSelector"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ComboBox">
 <summary><see cref="T:Tools.WindowsT.FormsT.EncodingSelector"/> is realized by <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ComboBox"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListBox">
 <summary><see cref="T:Tools.WindowsT.FormsT.EncodingSelector"/> is realized by <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListBox"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView">
 <summary><see cref="T:Tools.WindowsT.FormsT.EncodingSelector"/> is realized by <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.Style">
 <summary>Defines control used for showing encodings</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Setting value that is not member of <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.DefaultMaximumSize">
 <summary>Gets the length and height, in pixels, that is specified as the default maximum size of a control.</summary>
 <returns>A <see cref="T:System.Drawing.Size"/> representing the size of the control.</returns>
 <remarks>If <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ComboBox"/> then height is limited to maximum height of <see cref="T:System.Windows.Forms.ComboBox"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.DefaultMinimumSize">
 <summary>Gets the length and height, in pixels, that is specified as the default minimum size of a control.</summary>
 <returns>A <see cref="T:System.Drawing.Size"/> representing the size of the control.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.Encodings">
 <summary>Gets lis of actualy displayed <see cref="T:System.Text.EncodingInfo"/>s</summary>
 <remarks>Avoid using this property for getting count of encoding. Use <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Count"/> instead</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.Count">
 <summary>Number of encodings displayed</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.ClearPending">
 <summary>True while <see cref="P:System.Windows.Forms.ListView.SelectedItems"/> of <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.lvwEncoding"/> are being cleared. Prevents raising <see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged"/> event multiple times</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndexChanged">
 <summary>Raised after the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndex"/> property is changed</summary>
 <param name="sender">The source of the evemt</param> 
 <param name="e">Arguments</param>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.OnSelectedIndexChanged">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndexChanged"/> event</summary>
 <remarks>Note to inheritors: Call base-class method <see cref="M:Tools.WindowsT.FormsT.EncodingSelector.OnSelectedIndexChanged"/> in order the <see cref="E:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndexChanged"/> event to be raised</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedIndex">
 <summary>Gets or sets index of currently selected encoding or -1 if no encoding is selected</summary>
 <exception cref="T:System.ArgumentOutOfRangeException">The assigned value is less than -1 or greater than or equal to <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Count"/>.</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedEncoding">
 <summary>Gets or sets currently selected encoding</summary>
 <exception cref="T:System.ArgumentException">Attempt to select encoding thet is not in list</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedCodepage">
 <summary>Gets code page identifier of selected encoding or tries to select encoding with given code page</summary>
 <value>Searches for encoding with given codepage. If found selects it. If <paramref name="value"/> is -1 then encoding is unselected.</value>
 <returns>Code page identifier of selected encoding</returns>
 <remarks><seealso cref="P:System.Text.EncodingInfo.CodePage"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.SelectedName">
 <summary>Gets The Internet Assigned Numbers Authority (IANA) name of selected encoding or tries to select encoding with given name</summary>
 <value>Searches for encoding with given name. If found selects it. If <paramref name="value"/> is an empty string then encoding is unselected.</value>
 <returns>The Internet Assigned Numbers Authority (IANA) name of selected encoding</returns>
 <remarks><seealso cref="P:System.Text.EncodingInfo.Name"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.BackColor">
 <summary>Gets or sets the background color for the control.</summary>
 <returns>A System.Drawing.Color that represents the background color of the control</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.ForeColor">
 <summary>Gets or sets the foreground color of the control.</summary>
 <returns>The foreground <see cref="T:System.Drawing.Color"/> of the control.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.BackgroundImage">
 <summary>Gets or sets the background image displayed in the control.</summary>
 <returns>An <see cref="T:System.Drawing.Image"/> that represents the image to display in the background of the control.</returns>
 <remarks>Applies only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.BackgroundImageLayout">
 <summary>Gets or sets an <see cref="T:System.Windows.Forms.ImageLayout"/> value.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.ImageLayout"/> values.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value specified is not one of the <see cref="T:System.Windows.Forms.ImageLayout"/> values</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderWidth">
 <summary>Defines width of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.Name"/></summary>
 <remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeNameColumnHeaderWidth">
 <summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderWidth"/> should be serialized</summary>
 <returns>True if value differs from default</returns>
 <remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetNameColumnHeaderWidth">
 <summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderWidth"/> to its default value</summary>
 <remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderWidth">
 <summary>Defines width of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.DisplayName"/></summary>
 <remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeDisplayNameColumnHeaderWidth">
 <summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderWidth"/> should be serialized</summary>
 <returns>True if value differs from default</returns>
 <remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetDisplayNameColumnHeaderWidth">
 <summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderWidth"/> to its default value</summary>
 <remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderWidth">
 <summary>Defines width of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.CodePage"/></summary>
 <remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeCodePageColumnHeaderWidth">
 <summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderWidth"/> should be serialized</summary>
 <returns>True if value differs from default</returns>
 <remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetCodePageColumnHeaderWidth">
 <summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderWidth"/> to its default value</summary>
 <remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderText">
 <summary>Gets or sets text of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.Name"/></summary>
 <remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeNameColumnHeaderText">
 <summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderText"/> should be serialized</summary>
 <returns>True if value differs from default</returns>
 <remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetNameColumnHeaderText">
 <summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.NameColumnHeaderText"/> to its default value</summary>
 <remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderText">
 <summary>Gets or sets text of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.DisplayName"/></summary>
 <remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeDisplayNameColumnHeaderText">
 <summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderText"/> should be serialized</summary>
 <returns>True if value differs from default</returns>
 <remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetDisplayNameColumnHeaderText">
 <summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.DisplayNameColumnHeaderText"/> to its default value</summary>
 <remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderText">
 <summary>Gets or sets text of <see cref="T:System.Windows.Forms.ColumnHeader"/> which displays <see cref="P:System.Text.EncodingInfo.CodePage"/></summary>
 <remarks>Applicable only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeCodePageColumnHeaderText">
 <summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderText"/> should be serialized</summary>
 <returns>True if value differs from default</returns>
 <remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetCodePageColumnHeaderText">
 <summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.CodePageColumnHeaderText"/> to its default value</summary>
 <remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.Sorting">
 <summary>Specifies column and order of sorting</summary>
 <remarks>Sorting can be changed by user by clicking column header. Sorting applies only when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ShouldSerializeSorting">
 <summary>Instructs designer if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Sorting"/> should be serialized</summary>
 <returns>True if value differs from default</returns>
 <remarks>User by Windows Forms Designer to determine wheater property should be initialized in designer-generated code or not</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.ResetSorting">
 <summary>Resets <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Sorting"/> to its default value</summary>
 <remarks>Used by <see cref="T:System.Windows.Forms.PropertyGrid"/></remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder">
 <summary>Specifies all possible orders of columns</summary>
 <remarks>
 Column order specification is <see cref="T:System.Int16"/> number divided into 3 4-bits long groups.
 First group is position of DisplayName column, second is position of name column and third of code page column.
 Positions in groups are 1-based.
 </remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.DisplayName_Name_CodePage">
 <summary>Columns are ordered: display name - name - code page</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.DisplayName_CodePage_Name">
 <summary>Columns are ordered: display name - codepage - name</summary> 
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.Name_DisplayName_CodePage">
 <summary>Columns are ordered: name - display name - code page</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.Name_CodePage_DisplayName">
 <summary>Columns are ordered: name - code page - display name</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.CodePage_DisplayName_Name">
 <summary>Columns are ordered: code page - display name - name</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.enmColumnOrder.CodePage_Name_DisplayName">
 <summary>Columns are ordered: code page - name - display name</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.ColumnOrder">
 <summary>Gets or setrs order of columns of <see cref="T:System.Windows.Forms.ListView"/> if <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/></summary>
</member>
<member name="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay">
 <summary>Wrapper class aroun <see cref="T:System.Text.EncodingInfo"/> in order to be displayed in list</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay._Info">
 <summary>Copntains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.Info"/> property</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.#ctor(System.Text.EncodingInfo)">
 <summary>CTor</summary>
 <param name="Info"><see cref="T:System.Text.EncodingInfo"/> to be wrapped</param>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay._DisplayStyle">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.DisplayStyle"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.DisplayStyle">
 <summary>Gets or sets format string used to display name of encoding in the <see cref="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.ToString"/> function</summary>
 <remarks>
 <list>
 <listheader>There are 3 parameters tah can be passed to format string:</listheader>
 <item>{0} - <see cref="P:System.Text.EncodingInfo.DisplayName"/></item>
 <item>{1} - <see cref="P:System.Text.EncodingInfo.Name"/></item>
 <item>{2} - <see cref="P:System.Text.EncodingInfo.CodePage"/></item>
 </list>
 <seealso cref="T:System.String"/>
 </remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.ToString">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/>.</summary>
 <returns><see cref="P:System.Text.EncodingInfo.DisplayName"/> of <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.Info"/></returns>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.Info">
 <summary>Gets or sets <see cref="T:System.Text.EncodingInfo"/> being wrapped</summary>
 <exception cref="T:System.ArgumentNullException">value is being set to null</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.op_Implicit(System.Text.EncodingInfo)~Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay">
 <summary>Converts <see cref="T:System.Text.EncodingInfo"/> to <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/></summary>
 <param name="a"><see cref="T:System.Text.EncodingInfo"/> to be converted</param>
 <returns>New instance of <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/> initialized with <paramref name="a"/> or null when <paramref name="a"/> is null.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.op_Implicit(Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay)~System.Text.EncodingInfo">
 <summary>Converts <see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/> to <see cref="T:System.Text.EncodingInfo"/></summary>
 <param name="a"><see cref="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay"/> to be converted</param>
 <returns>Value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingInfoToDisplay.Info"/> property of <paramref name="a"/> or null when <paramref name="a"/> is null.</returns>
</member>
<member name="E:Tools.WindowsT.FormsT.EncodingSelector.ItemDoubleClick">
 <summary>Raised when <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/> is <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListBox"/> or <see cref="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorStyle.ListView"/> and user doubleclicks on item or raised when use presses the enter key and some item is selected not depending on <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.Style"/></summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
</member>
<member name="T:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs">
 <summary>Erguments of the <see cref="E:Tools.WindowsT.FormsT.EncodingSelector.ItemDoubleClick"/> event</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs.#ctor(System.Text.EncodingInfo)">
 <summary>CTor</summary>
 <param name="Item">Encoding being selected when event occured</param>
</member>
<member name="F:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs._Item">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs.Item"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.EncodingSelector.EncodingSelectorItemClickEventArgs.Item">
 <summary>Encoding being selected when event occured</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel">
 <summary><see cref="T:System.Windows.Forms.LinkLabel"/> with improved design-time behavior</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.__Items">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> property</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.Text">
 <summary>Gets text currently displayed by this <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/></summary>
 <value>Property is read-only, exception <see cref="T:System.NotSupportedException"/> will be thrown when trying to set it</value>
 <exception cref="T:System.NotSupportedException">Trying to set this property</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkArea">
 <summary>Gets the range in the text treated as a link.</summary>
 <value>Property is read-only, exception <see cref="T:System.NotSupportedException"/> will be thrown when trying to set it</value>
 <returns>A System.Windows.Forms.LinkArea that represents the area treated as a link.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.Items">
 <summary>List of all items in label</summary>
 <remarks><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is set to False</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.ItemsNameTypeConverter">
 <summary>Simple converter taht shows the text (Items) as representation of property in property grid</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.ItemsNameTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
 <summary>Converts the given value object to the specified destination type.</summary>
 <param name="culture">The culture to which value will be converted.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="destinationType">The System.Type to convert the value to.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert. This parameter must inherit from <see cref="T:System.Collections.ICollection"/>.</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
 <exception cref="T:System.ArgumentNullException">destinationType is null.</exception>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel._Items_ItemValueChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem},Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem}.ItemValueChangedEventArgs)">
 <summary>
 Handles the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> event of <see cref="P:Tools.WindowsT.FormsT.LinkLabel._Items"/>.
 When property of item changes specific action is taken depending on the property.
 </summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters (expected to be <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/>)</param>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.RegenerateContent">
 <summary>Regenerates content of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/></summary>
 <remarks>Called by handlers of events of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.LinkLabel.LinkClicked"/> event.</summary>
 <param name="e">A <see cref="T:System.Windows.Forms.LinkLabelLinkClickedEventArgs"/> that contains the event data.</param>
 <remarks>Note for inheritors: Call base class <see cref="M:Tools.WindowsT.FormsT.LinkLabel.OnLinkClicked(System.Windows.Forms.LinkLabelLinkClickedEventArgs)"/> in order to raise <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked"/> and <see cref="E:System.Windows.Forms.LinkLabel.LinkClicked"/> events and <see cref="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink"/> to be followed</remarks>
</member>
<member name="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked">
 <summary>Raised after link is clicked</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters (contains info about link and item being clicked)</param>
 <remarks><list type="1">
 <listheader>The order of events is following</listheader>
 <item><see cref="E:System.Windows.Forms.LinkLabel.LinkClicked"/></item>
 <item><see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked"/></item>
 <item>If the item being clicked is <see cref="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink"/> and its <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/> is not null and <see cref="P:System.Windows.Forms.LinkLabelLinkClickedEventArgs.Button"/> is <see cref="F:System.Windows.Forms.MouseButtons.Left"/> or <see cref="F:System.Windows.Forms.MouseButtons.None"/> then Uri <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/> is opened via <see cref="M:System.Diagnostics.Process.Start"/></item>
 </list>
 </remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs">
 <summary>Arguments of the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked"/> event</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs._Item">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.Item"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs._LinkURI">
 <summary>Contains va lue of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.LinkURI"/> property</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.#ctor(System.Windows.Forms.LinkLabel.Link,System.Windows.Forms.MouseButtons)">
 <summary>CTor</summary>
 <param name="link"><see cref="P:System.Windows.Forms.LinkLabelLinkClickedEventArgs.Link"/> that was clicked</param>
 <param name="button">The mouse button used to click</param>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.Item">
 <summary>The item that was clicked</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkClickedEventArgs.LinkURI">
 <summary>In case the item is of the type <see cref="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink"/> then contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/> of the item.</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.PerformClick">
 <summary>Performs click event on <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/>. Causes raising the <see cref="E:System.Windows.Forms.Control.Click"/> event</summary>
 <remarks><see cref="E:System.Windows.Forms.Control.MouseDown"/>, <see cref="E:System.Windows.Forms.Control.MouseUp"/> and <see cref="E:System.Windows.Forms.Control.MouseClick"/> events are not raised</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.PerformClick(Tools.WindowsT.FormsT.LinkLabel.LinkItem,System.Windows.Forms.MouseButtons)">
 <summary>Perform click event on specified item of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/></summary>
 <param name="Item">Item on which perform the click</param>
 <param name="button">Mouse button to be simulated</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Item"/> is null</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Item"/> not found in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection</exception>
 <exception cref="T:System.InvalidOperationException">
 <paramref name="Item"/> found in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> colletion but not found as <see cref="P:System.Windows.Forms.LinkLabel.Link.LinkData"/> in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Links"/> collection. Note: This is internal error of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/> and thus should not be thrown if <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/> is implemented properly.
 Do not change value of <see cref="P:System.Windows.Forms.LinkLabel.Link.LinkData"/> or this exception will be thrown though there is no bug in <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/>.
 </exception>
 <remarks>
 <para>Causes raising <see cref="E:System.Windows.Forms.Control.Click"/> and <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkClicked"/> events</para>
 <para><see cref="E:System.Windows.Forms.Control.MouseDown"/>, <see cref="E:System.Windows.Forms.Control.MouseUp"/> and <see cref="E:System.Windows.Forms.Control.MouseClick"/> events are not raised</para>
 </remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.Links">
 <summary>Gets the collection of links contained within the <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/>.</summary>
 <remarks>
 <para>This shadowes property is read-only. Do not use unshadowing workarounds to obtain read-write acces to te <see cref="P:System.Windows.Forms.LinkLabel.Links"/> property - it will cause unxpected behaviour. Use the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection instead.</para>
 <para>Note that any change to the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collections causes complete change of <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Links"/> collection</para>
 <para>Do not change <see cref="P:System.Windows.Forms.LinkLabel.Link.Start"/> or <see cref="P:System.Windows.Forms.LinkLabel.Link.Length"/> properties unless you know what you are doing.</para>
 </remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.Links(Tools.WindowsT.FormsT.LinkLabel.LinkItem)">
 <summary>Gets acces to link associated with <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/> contained in <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/></summary>
 <param name="Item">Item which link to obtain</param>
 <returns><see cref="T:System.Windows.Forms.LinkLabel.Link"/> which <paramref name="Item"/> is represented by</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Item"/> not found in <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/></exception>
 <exception cref="T:System.InvalidOperationException">
 <paramref name="Item"/> found in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> colletion but not found as <see cref="P:System.Windows.Forms.LinkLabel.Link.LinkData"/> in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Links"/> collection. Note: This is internal error of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/> and thus should not be thrown if <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/> is implemented properly.
 Do not change value of <see cref="P:System.Windows.Forms.LinkLabel.Link.LinkData"/> or this exception will be thrown though there is no bug in <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/>.</exception>
 <remarks>
 <para>Do not make any changes in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection after modyfiyng any link or after creating reference to it. Also do not change values of items contained in the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection. These changes causes invalidation of all links.</para>
 <para>Do not change <see cref="P:System.Windows.Forms.LinkLabel.Link.Start"/> or <see cref="P:System.Windows.Forms.LinkLabel.Link.Length"/> properties unless you know what you are doing.</para>
 </remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem">
 <summary>Common base for items in <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.TextPropertyName">
 <summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property changes</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem._Text">
 <summary>Text to be shown</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text">
 <summary>Gets or sets text shown in place of this item</summary>
 <remarks>Note for inheritors: Call <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> after change of value (unless calling base class setter <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/>)</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.ToString">
 <summary>String representation of this instance</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed">
 <summary>Raised when value of member changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event information</param>
 <remarks><paramref name="e"/>Should contain additional information that can be used in event-handling code</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</summary>
 <param name="e">Event parameters</param>
 <remarks>Note for inheritors: Always call base class <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order the event to be raised</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.</summary>
 <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
 <remarks>Note to inheritors: If you like serialize more data then then <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property only, then override this method. If you want the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property to be serialized either call base class method <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> or serialize it in your code.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>CTor - deserializes <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/></summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
 <param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
 <exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
 <exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
 <remarks>Note to inheritors: If you want perform deserialization (stronly recomended) provide your own version of this CTor. In order to deserialize the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property you can either call this base class CTor or deserialize it by your own.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.#ctor">
 <summary>CTor</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.TextItem">
 <summary>Non-link (text only) item of <see cref="T:Tools.WindowsT.FormsT.LinkLabel"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.TextItem.#ctor">
 <summary>CTor (initializes with an empty string)</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.TextItem.#ctor(System.String)">
 <summary>CTor (initializes with text to display)</summary>
 <param name="Text">Text to be displayed</param>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.TextItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>CTor - deserializes <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/></summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
 <param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
 <exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
 <exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
 <remarks>Note to inheritors: If you want perform deserialization (stronly recomended) provide your own version of this CTor. In order to deserialize the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> property you can either call thisw base class CTor or deserialize it by your own.</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem">
 <summary>Generic link</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkDataPropertyName">
 <summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData"/> property changes</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.DescriptionPropertyName">
 <summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Description"/> property changes</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.NamePropertyName">
 <summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name"/> property changes</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.TagPropertyName">
 <summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Tag"/> property changes</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.VisitedPropertyName">
 <summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Visited"/> property changes</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem.EnabledPropertyName">
 <summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Enabled"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.#ctor">
 <summary>CTor (initializes with an empty string as <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> and null as <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.ToString">
 <summary>String representation</summary>
 <remarks>If <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name"/> is not an empty string then returns <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name"/> otherwise returns <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.#ctor(System.String,System.Object)">
 <summary>CTor (initializes <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Text"/> and optionally <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData"/></summary>
 <param name="Text">Text to be shown</param>
 <param name="LinkData">Data associtaed with new link</param>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>CTor - deserializes <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/></summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
 <param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
 <exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
 <exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
 <remarks>Note to inheritors: If you want perform deserialization (stronly recomended) provide your own version of this CTor. In order to deserialize the properties of this class you can either call this base class CTor or deserialize them by your own.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.</summary>
 <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
 <remarks>Note to inheritors: If you like serialize more data then then properties of this class, then override this method. If you want the properties of this class to be serialized either call base class method <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/> or serialize them in your code.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._LinkData">
 <summary>Data associated with the link</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData">
 <summary>Gets or sets data associated with the link</summary>
 <remarks>Note for inheritors: Call <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> after tha value is changed (unless calling base class setter <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.LinkData"/>)</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Description">
 <summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Description"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
 <remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Description">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Description"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name">
 <summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Name"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
 <remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Name">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Name"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Tag">
 <summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Tag"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
 <remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Tag">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Tag"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Visited">
 <summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Visited"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
 <remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Visited">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Visited"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Enabled">
 <summary>Stores value for the <see cref="P:System.Windows.Forms.LinkLabel.Link.Enabled"/> of <see cref="T:System.Windows.Forms.LinkLabel.Link"/> that represents this <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></summary>
 <remarks>Note for inheritors: Call base class setter or <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> method in order to raise the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkItem._Enabled">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkItem.Enabled"/> property</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink">
 <summary>Link that performs navigation automatically</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURIPropertyName">
 <summary>Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> passed in the <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event when the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.String)">
 <summary>CTor</summary>
 <param name="Text">Text to display</param>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.String,System.Uri)">
 <summary>CTor</summary>
 <param name="Text">Text to display</param>
 <param name="LinkURI">URI of target of new link</param>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.String,System.String)">
 <summary>CTor</summary>
 <param name="Text">Text to display</param>
 <param name="LinkPath">Path of target of new link</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null -and- type of <paramref name="value"/> is <see cref="T:System.String"/></exception>
 <exception cref="T:System.UriFormatException">Type of <paramref name="value"/> is <see cref="T:System.String"/> -and- <paramref name="value"/> is empty.-or- The scheme specified in <paramref name="value"/> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)"/>.-or- <paramref name="value"/> contains too many slashes.-or- The password specified in <paramref name="value"/> is not valid.-or- The host name specified in <paramref name="value"/> is not valid.-or- The file name specified in <paramref name="value"/> is not valid. -or- The user name specified in <paramref name="value"/> is not valid.-or- The host or authority name specified in <paramref name="value"/> cannot be terminated by backslashes.-or- The port number specified in <paramref name="value"/> is not valid or cannot be parsed.-or- The length of <paramref name="value"/> exceeds 65534 characters.-or- The length of the scheme specified in <paramref name="value"/> exceeds 1023 characters.-or- There is an invalid character sequence in <paramref name="value"/>.-or- The MS-DOS path specified in <paramref name="value"/> must start with c:\\.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.Uri)">
 <summary>CTor - initializes with URI and uses URI's string representation as text</summary>
 <param name="LinkURI">URI of terger of new link</param>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.AutoLink.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>CTor - deserializes <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/></summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
 <param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
 <exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
 <exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
 <remarks>Note to inheritors: If you want perform deserialization (stronly recomended) provide your own version of this CTor. In order to deserialize the properties of this class you can either call this base class CTor or deserialize them by your own.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.AutoLink._LinkURI">
 <summary>Target of link</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkData">
 <summary>Data associated with the link</summary>
 <value>New associated data (NOTE: value must be of type <see cref="T:System.Uri"/> or of type <see cref="T:System.String"/> that cab be used as parameter of <see cref="T:System.Uri"/>'s CTor)</value>
 <returns>Data associated with the link</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null -and- type of <paramref name="value"/> is <see cref="T:System.String"/></exception>
 <exception cref="T:System.UriFormatException">Type of <paramref name="value"/> is <see cref="T:System.String"/> -and- <paramref name="value"/> is empty.-or- The scheme specified in <paramref name="value"/> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)"/>.-or- <paramref name="value"/> contains too many slashes.-or- The password specified in <paramref name="value"/> is not valid.-or- The host name specified in <paramref name="value"/> is not valid.-or- The file name specified in <paramref name="value"/> is not valid. -or- The user name specified in <paramref name="value"/> is not valid.-or- The host or authority name specified in <paramref name="value"/> cannot be terminated by backslashes.-or- The port number specified in <paramref name="value"/> is not valid or cannot be parsed.-or- The length of <paramref name="value"/> exceeds 65534 characters.-or- The length of the scheme specified in <paramref name="value"/> exceeds 1023 characters.-or- There is an invalid character sequence in <paramref name="value"/>.-or- The MS-DOS path specified in <paramref name="value"/> must start with c:\\.</exception>
 <exception cref="T:System.InvalidCastException">Type of <paramref name="value"/> is neither <see cref="T:System.Uri"/> nor <see cref="T:System.String"/></exception>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI">
 <summary>Gets or sets URI to navigate to</summary>
 <value>Actuall URI or target of the link</value>
 <returns>New URI of target of the link</returns>
 <remarks>Note for inheritors: Call <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> after value is changed (unless calling base class setter <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/>)</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkPath">
 <summary>Gets or sets URI (in form of path string) to navigate to</summary>
 <returns>Actuall path of target of the link</returns>
 <value>New path of target of the link</value>
 <exception cref="T:System.UriFormatException"><paramref name="value"/> is empty.-or- The scheme specified in <paramref name="value"/> is not correctly formed. See <see cref="M:System.Uri.CheckSchemeName(System.String)"/>.-or- <paramref name="value"/> contains too many slashes.-or- The password specified in <paramref name="value"/> is not valid.-or- The host name specified in <paramref name="value"/> is not valid.-or- The file name specified in <paramref name="value"/> is not valid. -or- The user name specified in <paramref name="value"/> is not valid.-or- The host or authority name specified in <paramref name="value"/> cannot be terminated by backslashes.-or- The port number specified in <paramref name="value"/> is not valid or cannot be parsed.-or- The length of <paramref name="value"/> exceeds 65534 characters.-or- The length of the scheme specified in <paramref name="value"/> exceeds 1023 characters.-or- There is an invalid character sequence in <paramref name="value"/>.-or- The MS-DOS path specified in <paramref name="value"/> must start with c:\\.</exception>
 <remarks>
 <para>Exceptions thrown by <see cref="T:System.Uri"/>'s CTor</para>
 <para>Note for inheritors: Call <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.OnChanged(System.EventArgs)"/> (unless calling base class setter <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkPath"/> or <see cref="P:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURI"/></para>
 <para>Change of this value causes raising <see cref="E:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem.Changed"/> event with <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> set to <see cref="F:Tools.WindowsT.FormsT.LinkLabel.AutoLink.LinkURIPropertyName"/></para>
 </remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor">
 <summary>Allows editing of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.Items"/> collection at design-time</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.#ctor">
 <summary>CTor</summary>
 <remarks>Initializes base class <see cref="T:System.ComponentModel.Design.CollectionEditor"/> with type <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.#ctor(System.Boolean)">
 <summary>CTor</summary>
 <param name="UseStandardEditorForm">Initial value for the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.UseStandardEditorForm"/> property</param>
 <remarks>Initializes base class <see cref="T:System.ComponentModel.Design.CollectionEditor"/> with type <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor._UseStandardEditorForm">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.UseStandardEditorForm"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.UseStandardEditorForm">
 <summary>Determines behavior of the <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateCollectionForm"/> function. If True the that function returns <see cref="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionForm"/> otherwise returns instance of <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.Types">
 <summary>Types of items tha can be added into collection</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateNewItemTypes">
 <summary>Gets the data types that this collection editor can contain.</summary>
 <returns>An array of data types that this collection can contain.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateInstance(System.Type)">
 <summary>Creates a new instance of the specified collection item type.</summary>
 <param name="itemType">The type of item to create.</param>
 <returns>A new instance of the specified object.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="itemType"/> doesn't represent supported type - supported types are: <list><item><see cref="T:Tools.WindowsT.FormsT.LinkLabel.TextItem"/></item> <item><see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkItem"/></item> <see cref="T:Tools.WindowsT.FormsT.LinkLabel.AutoLink"/></list></exception>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateCollectionItemType">
 <summary>Gets the data type that this collection contains.</summary>
 <returns><see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/> type</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CreateCollectionForm">
 <summary>Creates a new form to display and edit the current collection.</summary>
 <returns>
 <para>A <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm"/> to provide as the user interface for editing the collection.</para>
 <para>Depending on <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.UseStandardEditorForm"/> returns either <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm"/> returned by <see cref="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionForm"/> or instance or <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm"/></para>
 </returns>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
 <summary>Edits the value of the specified object using the specified service provider and context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
 <param name="value">The object to edit the value of.</param>
 <param name="provider">A service provider object through which editing services can be obtained.</param>
 <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
 <exception cref="T:System.ComponentModel.Design.CheckoutException">An attempt to check out a file that is checked into a source code management program did not succeed</exception>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm">
 <summary>Provides a modal dialog box for editing the contents of the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>  using a <see cref="T:System.Drawing.Design.UITypeEditor"/>.</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Dispose(System.Boolean)">
 <summary>Form overrides dispose to clean up the component list.</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._lblItemInfo">
 <summary>Shows information about select items</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.components">
 <summary>Required by the Windows Form Designer</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.resources">
 <summary>Resources for this form</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.InitializeComponent">
 <summary>Initializes components</summary>
 <remarks>
 NOTE: The following procedure is required by the Windows Form Designer
 It can be modified using the Windows Form Designer.  
 Do not modify it using the code editor.
 </remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._splMain">
 <summary>Main <see cref="T:System.Windows.Forms.SplitContainer"/> that splits form into part of list and part of <see cref="T:System.Windows.Forms.PropertyGrid"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._tlpItems">
 <summary>List part of collection is located here</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._lstItems">
 <summary>Shows list of collection items</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._cmdUp">
 <summary>Moves selected item up</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._cmdDown">
 <summary>Moves selected item down</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._tosAdd">
 <summary>Contains <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbAdd"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._tsbAdd">
 <summary>Contains items for adding new items to the collection</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._tosRemove">
 <summary>Contains <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbRemove"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._tsbRemove">
 <summary>Removes selected items</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._pgrProperty">
 <summary>Displays and allows edit properties of selected items</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._cmdCancel">
 <summary>Closes form with no changes on collection</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._cmdOK">
 <summary>Closes form and applies changes on collection</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._totTT">
 <summary>Displays tool tip text on some controls</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm._Editor">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Editor"/> property</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.#ctor(Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor)">
 <summary>Initializes a new instance of the <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor"/> class.</summary>
 <param name="editor">The <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor"/> to use for editing the collection.</param>
 <exception cref="T:System.ArgumentException">
 <see cref="P:System.ComponentModel.Design.CollectionEditor.CollectionType"/> of <paramref name="Editor"/> is not <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>
 -or-
 <see cref="P:System.ComponentModel.Design.CollectionEditor.CollectionItemType"/> of <paramref name="Editor"/> is not <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/>
 -or-
 Any <see cref="P:System.ComponentModel.Design.CollectionEditor.NewItemTypes"/> of <paramref name="Editor"/> is not <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItem"/>
 </exception>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Add_Click(System.Object,System.EventArgs)">
 <summary>Adds item to collection</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Editor">
 <summary><see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor"/> used for editin collection</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.OnEditValueChanged">
 <summary>
 Provides an opportunity to perform processing when a collection value has changed.
 Shows items of collection in <see cref="T:System.Windows.Forms.ListBox"/>.
 </summary>
 <exception cref="T:System.InvalidCastException"><see cref="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.EditValue"/> is not of type <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></exception>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.ShowEditorDialog(System.Windows.Forms.Design.IWindowsFormsEditorService)">
 <summary>Shows the dialog box for the collection editor using the specified <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> object.</summary>
 <param name="edSvc">An <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> that can be used to show the dialog box.</param>
 <returns>A <see cref="T:System.Windows.Forms.DialogResult"/> that indicates the result code returned from the dialog box.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite">
 <summary>This class was copied from Friend Class System.ComponentModel.Design.CollectionEditor.PropertyGridSite using Reflector</summary>
 <remarks>
 I'm not very sure what exactly this class does or what exactly is used for. It supports <see cref="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm"/> functionality. Its instance is passed to <see cref="P:System.Windows.Forms.PropertyGrid.Site"/> property of <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.pgrProperty"/> in <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.OnEditValueChanged"/>
 IMHO it supports design-time interaction between <see cref="T:System.Windows.Forms.PropertyGrid"/> and the object being edited.
 </remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.comp">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Component"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.inGetService">
 <summary>Identifies if <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.GetService(System.Type)"/> is currently lying on callstack</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.sp">
 <summary>Contains instance of <see cref="T:System.IServiceProvider"/></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Component">
 <summary>Gets the component associated with the <see cref="T:System.ComponentModel.ISite"/> when implemented by a class.</summary>
 <returns>The <see cref="T:System.ComponentModel.IComponent"/> instance associated with the <see cref="T:System.ComponentModel.ISite"/>.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Container">
 <summary>Gets the <see cref="T:System.ComponentModel.IContainer"/> associated with the <see cref="T:System.ComponentModel.ISite"/> when implemented by a class.</summary>
 <returns>Always null in this implementation.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.DesignMode">
 <summary>Determines whether the component is in design mode when implemented by a class.</summary>
 <returns>Always false in this implementation</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Name">
 <summary>Gets or sets the name of the component associated with the <see cref="T:System.ComponentModel.ISite"/> when implemented by a class.</summary>
 <returns>Always an empty string in this implementation</returns>
 <value>Setting value has no effect</value>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.GetService(System.Type)">
 <summary>Gets the service object of the specified type.</summary>
 <param name="serviceType">An object that specifies the type of service object to get.</param>
 <returns>A service object of type serviceType.-or- null if there is no service object of type <paramref name="serviceType"/>.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.#ctor(System.IServiceProvider,System.ComponentModel.IComponent)">
 <summary>CTor</summary>
 <param name="sp">An instance of <see cref="T:System.IServiceProvider"/>. This value is never used.</param>
 <param name="comp">Value that will be returned by the <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.PropertyGridSite.Component"/> property</param>
</member>
<member name="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EditValue">
 <summary>Gets or sets the collection object to edit.</summary>
 <returns>The collection object to edit.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdClose_Click(System.Object,System.EventArgs)">
 <summary>Closes form with no changes on collection</summary>
 <remarks>Changes on collection items' properties are not discarded</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.ClosingCancel">
 <summary>If true than <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.CollectionForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)"/> cancels editing</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode">
 <summary>Modes for <see cref="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Enable(Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode)"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode.False">
 <summary>Set to False</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode.True">
 <summary>Set to True</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode.Multi">
 <summary>Set to True (only controls that can be used when multiple items are selected)</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.Enable(Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.EnableMode)">
 <summary>Sets <see cref="P:System.Windows.Forms.Control.Enabled"/> for item-related buttons (<see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdUp"/>, <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdDown"/>, <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbRemove"/>)</summary>
 <param name="Enabled">Mode of setting value</param>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdUp_Click(System.Object,System.EventArgs)">
 <summary>Moves selected item up</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdDown_Click(System.Object,System.EventArgs)">
 <summary>Moves selected item down</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.cmdOK_Click(System.Object,System.EventArgs)">
 <summary>Closes form and applies changes</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.tsbRemove_Click(System.Object,System.EventArgs)">
 <summary>Removes selected items</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.ResizeLabel">
 <summary>Changes <see cref="P:System.Windows.Forms.Control.MaximumSize"/> of <see cref="P:Tools.WindowsT.FormsT.LinkLabel.LinkLabelItemsEditor.CollectionForm.lblItemInfo"/> in order not to be wider than its container.</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.ProgressBarWithText">
 <summary>Implements <see cref="T:System.Windows.Forms.ProgressBar"/> with overlay text</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.WindowsT.FormsT.ProgressBarWithText.__tlb">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.Label"/> properzy</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.Label">
 <summary>gets or sets internal <see cref="T:Tools.WindowsT.FormsT.TransparentLabel"/> used to display text</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.InitLabel">
 <summary>Initializes the <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.Label"/> property</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.#ctor">
 <summary>CTor</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ProgressBarWithText._AutoText">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoText"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoText">
 <summary>Get or sets value indicating if text automatically displays value of progress bar</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.ProgressBarWithText._AutoTextFormat">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormat"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormat">
 <summary>Format string used to format value when displayed as text of control automatically.</summary>
 <remarks><seealso cref="T:System.Int32"/></remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.WndProc(System.Windows.Forms.Message@)">
 <summary>Processes Windows messages.</summary>
 <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process</param>
</member>
<member name="E:Tools.WindowsT.FormsT.ProgressBarWithText.ValueChanged">
 <summary>Occurs when <see cref="P:System.Windows.Forms.ProgressBar.Value"/> changes</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextChanged">
 <summary>Ocuurs when <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoText"/> changes</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormatChanged">
 <summary>Ocuurs when <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormat"/> changes</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnValueChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ProgressBarWithText.ValueChanged"/> event</summary>
 <param name="e">Property data</param>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnAutoTextChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextChanged"/> event</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnAutoTextFormatChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormatChanged"/> event</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnForeColorChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.</summary>
 <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.OnTextChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.ProgressBar.TextChanged"/> event.</summary>
 <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member>
<member name="M:Tools.WindowsT.FormsT.ProgressBarWithText.CreateAutoText">
 <summary>Formats <see cref="P:System.Windows.Forms.ProgressBar.Value"/> by <see cref="P:Tools.WindowsT.FormsT.ProgressBarWithText.AutoTextFormat"/></summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.Text">
 <summary>Gets or sets text of control.</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.TextAlign">
 <summary>Gets or sets the alignment of text in the label.</summary>
 <returns>One of the <see cref="T:System.Drawing.ContentAlignment"/> values. The default is <see cref="F:System.Drawing.ContentAlignment.MiddleCenter"/>.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value assigned is not one of the <see cref="T:System.Drawing.ContentAlignment"/> values. </exception>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.ForeColor">
 <summary>Gets or sets the foreground color of the control.</summary>
 <returns>The foreground System.Drawing.Color of the control. The default is the value of the System.Windows.Forms.Control.DefaultForeColor property.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.Font">
 <summary>Gets or sets the font of text in the <see cref="T:Tools.WindowsT.FormsT.ProgressBarWithText"/>.</summary>
 <returns>The <see cref="T:System.Drawing.Font"/> of the text. The default is the font set by the container</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.ProgressBarWithText.BackColor">
 <summary>Gets or sets the background color for the control.</summary>
 <returns>A <see cref="T:System.Drawing.Color"/> that represents the background color of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor"/> property.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.TransparentLabel">
 <summary><see cref="T:System.Windows.Forms.Label"/> which's background *really* transparent</summary>
 <remarks>To make this contro, transparent or semi-transparent se background color to color with alpha chanel</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentLabel.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentLabel.#ctor(System.String)">
 <summary>CTor with text</summary>
 <param name="Text">Default text of control</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentLabel.#ctor(System.Drawing.Color)">
 <summary>CTor with back color</summary>
 <param name="BackColor">Default background color</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentLabel.#ctor(System.Drawing.Color,System.String)">
 <summary>CTor with text and back color</summary>
 <param name="BackColor">Default background color</param>
 <param name="Text">Default text of control</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentLabel.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
 <summary>Paints the background of the control.</summary>
 <param name="pevent">A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains information about the control to paint</param>
</member>
<member name="P:Tools.WindowsT.FormsT.TransparentLabel.CreateParams">
 <summary>Gets the required creation parameters when the control handle is created.</summary>
 <returns>A <see cref="T:System.Windows.Forms.CreateParams"/> that contains the required creation parameters when the handle to the control is created.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentLabel.OnTextChanged(System.EventArgs)">
 <summary>Raisest the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event</summary>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentLabel.OnBackColorChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.</summary>
 <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
</member>
<member name="P:Tools.WindowsT.FormsT.TransparentLabel.AutoSize">
 <summary>Gets or sets a value indicating whether the control is automatically resized to display its entire contents.</summary>
 <returns>true if the control adjusts its width to closely fit its contents; otherwise, false. The default is false.</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.TransparentLabel.BackColor">
 <summary>Gets or sets the background color for the control.</summary>
 <returns>A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentLabel.ShouldSerializeBackColor">
 <summary>Returns value indicatin if <see cref="P:Tools.WindowsT.FormsT.TransparentLabel.BackColor"/> differs from its default value</summary>
 <returns>True if <see cref="P:Tools.WindowsT.FormsT.TransparentLabel.BackColor"/> is not <see cref="P:System.Drawing.Color.Transparent"/></returns>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentLabel.ResetBackColor">
 <summary>Sets <see cref="P:Tools.WindowsT.FormsT.TransparentLabel.BackColor"/> to <see cref="P:System.Drawing.Color.Transparent"/></summary>
</member>
<member name="T:Tools.WindowsT.FormsT.TransparentTextBox">
 <summary><see cref="T:System.Windows.Forms.RichTextBox"/> with transparent background</summary>
 <remarks>This control is 100% transaprent and cannot have any other than transparent <see cref="P:Tools.WindowsT.FormsT.TransparentTextBox.BackColor"/>. To make it semi-transparent, put it onto semitransparent panel.</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Beta"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.#ctor(System.String)">
 <summary>CTor with text</summary>
 <param name="Text">Default text of control</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.#ctor(System.Drawing.Color)">
 <summary>CTor with back color</summary>
 <param name="BackColor">Default background color</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.#ctor(System.Drawing.Color,System.String)">
 <summary>CTor with text and back color</summary>
 <param name="BackColor">Default background color</param>
 <param name="Text">Default text of control</param>
</member>
<member name="P:Tools.WindowsT.FormsT.TransparentTextBox.CreateParams">
 <summary>Gets the required creation parameters when the control handle is created.</summary>
 <returns>A <see cref="T:System.Windows.Forms.CreateParams"/> that contains the required creation parameters when the handle to the control is created.</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.TransparentTextBox.InInvalidateParent">
 <summary>Determines if <see cref="M:Tools.WindowsT.FormsT.TransparentTextBox.InvalidateParent(System.Drawing.Rectangle)"/> is currently on call stack to avoid recursive calls</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.InvalidateParent(System.Drawing.Rectangle)">
 <summary>Invalidates given parent rectrangle</summary>
 <param name="rect">Rectangle to be invalidated</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.WndProc(System.Windows.Forms.Message@)">
 <summary>Processes Windows messages.</summary>
 <param name="m">The Windows System.Windows.Forms.Message to process</param>
</member>
<member name="F:Tools.WindowsT.FormsT.TransparentTextBox.KbdProcess">
 <summary>True when <see cref="M:Tools.WindowsT.FormsT.TransparentTextBox.WndProc(System.Windows.Forms.Message@)"/> with keyboard message is on stack. Used in <see cref="M:Tools.WindowsT.FormsT.TransparentTextBox.OnTextChanged(System.EventArgs)"/> to decide wheather to invalidate whole control (False) or only starting at current line (True)</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnTextChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.</summary>
 <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnHScroll(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.RichTextBox.HScroll"/> event.</summary>
 <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnVScroll(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.RichTextBox.VScroll"/> event.</summary>
 <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnSelectionChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.RichTextBox.SelectionChanged"/> event.</summary>
 <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data</param>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.OnMove(System.EventArgs)">
 <summary>Raises the System.Windows.Forms.Control.Move event.</summary>
 <param name="e">An System.EventArgs that contains the event data.</param>
</member>
<member name="P:Tools.WindowsT.FormsT.TransparentTextBox.BackColor">
 <summary>Gets or sets the background color for the control.</summary>
 <returns>A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.TransparentTextBox.ResetBackColor">
 <summary>Sets <see cref="P:Tools.WindowsT.FormsT.TransparentTextBox.BackColor"/> to <see cref="P:System.Drawing.Color.Transparent"/></summary>
</member>
<member name="T:Tools.WindowsT.FormsT.AboutDialog">
 <summary>Represents about dialog for application</summary>
 <remarks>You can use it as is or derive it</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.AboutDialog.ShowModalDialog(System.Windows.Forms.IWin32Window)">
 <summary>Displays a modal dialog</summary>
 <param name="owner">Window, dialog will be modal to, or null</param>
 <returns>Result of dialog. <see cref="F:System.Windows.Forms.DialogResult.OK"/> when user clicked on OK button, pressed Enter or Escape; <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> when window was closed another way (e.g. the close (X) button in top right corner)</returns>
 <version version="1.5.3">Fix: Always returns <see cref="F:System.Windows.Forms.DialogResult.None"/>.</version>
</member>
<member name="T:Tools.WindowsT.FormsT.MessageBoxForm">
 <summary>Implements GUI (form) for <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/></summary>
 <remarks>
 <para>This class implements <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> in fully dynamic way. You can change all it's properties and all properties of its controls and those change are immediatelly displayed to user.</para>
 If you are passing some very custom implementation of <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/> to this form, you must ensure that :
 <list type="list">
 <item>Argument e of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">Items</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> event has always <see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> which is member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</item>
 <item>Argument e of the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged"/> and <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> events has always <see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> which is member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/> and is not <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/>.</item>
 </list>
 Violating these rules can lead to uncatchable <see cref="T:System.InvalidOperationException"/> being thrown when event occurs.
 </remarks>
 <version version="1.5.2">Fixed: Check box has not enough size.</version>
 <version version="1.5.2"><see cref="P:System.Windows.Forms.Button.DialogResult"/> is no longer set (it caused dialog to be closed even when event was cancelled).</version>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Dispose(System.Boolean)">
 <summary>Form overrides dispose to clean up the component list.</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.CommonDisposeActions">
 <summary>Common actions taken when form is closed or disposed</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.MessageBoxForm._MessageBox">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox">
 <summary>Gets <see cref="T:Tools.WindowsT.FormsT.MessageBox"/> this forms is GUI for</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.#ctor(Tools.WindowsT.FormsT.MessageBox)">
 <summary>CTor</summary>
 <param name="MessageBox"><see cref="T:Tools.WindowsT.FormsT.MessageBox"/> to initialize this form by</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.ApplyOptions">
 <summary>Applies <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options">Options</see></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Initialize">
 <summary>Initializes tis form by <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/>, called from CTor</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.MessageBoxForm.BottomControl">
 <summary>Additional control on messagebox below buttons</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.MessageBoxForm.TopControl">
 <summary>Additional control on messagebox abow prompt</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.MessageBoxForm.MidControl">
 <summary>Additional control on messagebox abow buttons</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachComboBoxHandlers(Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox,System.Boolean)">
 <summary>Attachs or detachs handlers for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/></summary>
 <param name="ComboBox"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/> to attach handlers to</param>
 <param name="attach">True to attach, false so detach</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachCheckBoxHandlers(Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox,System.Boolean)">
 <summary>Attachs or detachs handlers for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/></summary>
 <param name="CheckBox"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> to attach handlers to</param>
 <param name="attach">True to attach, false so detach</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachButtonHandlers(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton,System.Boolean)">
 <summary>Attachs or detachs handlers for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/></summary>
 <param name="Button"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> to attach handlers to</param>
 <param name="attach">True to attach, false so detach</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachRadioHandlers(Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton,System.Boolean)">
 <summary>Attachs or detachs handlers for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/></summary>
 <param name="Radio"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> to attach handlers to</param>
 <param name="attach">True to attach, false so detach</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.AttachMessageBoxHandlers(System.Boolean)">
 <summary>Attachs or tetachs handlers for <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox"/></summary>
 <param name="attach">True (default) to attach, false to detach</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.ApplyComboBox">
 <summary>Applyes the <see cref="T:System.Windows.Forms.ComboBox"/> onto <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.cmbCombo"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.CreateCheckBox(Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox)">
 <summary>Creates <see cref="T:System.Windows.Forms.CheckBox"/> from given <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/></summary>
 <param name="Chk">A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> to create <see cref="T:System.Windows.Forms.CheckBox"/> from</param>
 <returns><see cref="T:System.Windows.Forms.CheckBox"/> initiated by <paramref name="Chk"/></returns>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.CreateButton(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton)">
 <summary>Creates <see cref="T:System.Windows.Forms.Button"/> from <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/></summary>
 <param name="Button"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> to initialize new <see cref="T:System.Windows.Forms.Button"/> with</param>
 <returns>Newly created <see cref="T:System.Windows.Forms.Button"/> with attached <see cref="E:System.Windows.Forms.Control.Click"/> event to <see cref="M:Tools.WindowsT.FormsT.MessageBoxForm.Button_Click(System.Windows.Forms.Button,System.EventArgs)"/></returns>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.CreateRadio(Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton)">
 <summary>Creates <see cref="T:System.Windows.Forms.RadioButton"/> from <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/></summary>
 <param name="Radio"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> to initialize new <see cref="T:System.Windows.Forms.RadioButton"/> with</param>
 <returns>New created <see cref="T:System.Windows.Forms.RadioButton"/> with attached <see cref="E:System.Windows.Forms.RadioButton.CheckedChanged"/> event to <see cref="M:Tools.WindowsT.FormsT.MessageBoxForm.Radio_CheckedChanged(System.Windows.Forms.RadioButton,System.EventArgs)"/></returns>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Radio_CheckedChanged(Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton,Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
 <summary>Handles the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.CheckedChanged">CheckedChanged</see> event of items of the <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox">MessageBox</see>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see> collection</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Radio_CheckedChanged(System.Windows.Forms.RadioButton,System.EventArgs)">
 <summary>Hanles the <see cref="E:System.Windows.Forms.RadioButton.CheckedChanged"/> event of radio buttons</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.ComboBox_ItemsChanged(Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox,Tools.CollectionsT.GenericT.ListWithEvents{System.Object}.ListChangedEventArgs)">
 <exception cref="T:System.InvalidOperationException"><paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox_CheckBoxesChanged(Tools.WindowsT.FormsT.MessageBox,Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox}.ListChangedEventArgs)">
 <exception cref="T:System.InvalidOperationException"><paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> is <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/> or is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox_RadiosChanged(Tools.WindowsT.FormsT.MessageBox,Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton}.ListChangedEventArgs)">
 <exception cref="T:System.InvalidOperationException"><paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> is <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/> or is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox_ButtonsChanged(Tools.WindowsT.FormsT.MessageBox,Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton}.ListChangedEventArgs)">
 <exception cref="T:System.InvalidOperationException"><paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">Action</see> is <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/> or is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/>.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.PerformButtonRemoval(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton)">
 <summary>Performs actions needed when button is about to be removed. Does not remove button from <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.flpButtons"/>.</summary>
 <param name="Button">Button to be removed</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.PerformRadioRemoval(Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton)">
 <summary>Performs actions needed when radio button is about to be removed. Does not remove radio button from <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.flpRadio"/>.</summary>
 <param name="Button"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> to be removed</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.PerformCheckBoxRemoval(Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox)">
 <summary>Performs actions needed when check box is about to be removed. Does not remove radio button from <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.flpChecks"/>.</summary>
 <param name="mChk"><see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> to be removed</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.EnsureCancelButton">
 <summary>Ensures that <see cref="P:System.Windows.Forms.Form.CancelButton"/> is set to button with <see cref="P:System.Windows.Forms.Button.DialogResult">DialogResult</see> same as <see cref="P:Tools.WindowsT.FormsT.MessageBoxForm.MessageBox">MessageBox</see>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse">CloseResponse</see> or to null if appropriate button does not exist</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBoxForm.Close">
 <summary>Force closes the form</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.MessageBoxForm.AllowClose">
 <summary>When true <see cref="M:Tools.WindowsT.FormsT.MessageBoxForm.MessageBoxForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)"/> allows form to be closed on whatever reason without any action (use for programatic closes)</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.MessageBox">
 <summary>Implements <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> for as <see cref="P:Tools.WindowsT.FormsT.MessageBox.Form"/></summary>
 <remarks>The <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> is implemented with following notes:
 <list>
 <item><see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignJustify"/> is not supported, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft"/> is used instead.</item>
 </list>
 </remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2">Fixed: Check box has not enough size.</version>
 <version version="1.5.2">Fixed: Custom controls (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/>) derived from <see cref="T:System.Windows.UIElement"/> are not shown.</version>
 <version version="1.5.2">Fixed: Custom controls (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/>) get disposed when message box is closed.</version>
 <version version="1.5.2">Fixed: When custom control (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/>) is replaced wne message box is shown, the change does not take effect.</version>
 <version version="1.5.2">Fixed: Dialog closes even when button click operation is cancelled (see <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreview"/>)</version>
 <version version="1.5.3" stage="Beta">Added support for <see cref="T:System.Windows.Window"/> as message box owner required by changes in <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></version>
 <version version="1.5.3" stage="Beta">Owner of dialog now can be any <see cref="T:System.Windows.DependencyObject"/> hosted in <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBox.Dispose(System.Boolean)">
 <summary>Releases all resources used by the <see cref="T:System.ComponentModel.Component" />.</summary>
 <param name="disposing"> true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBox.Close(System.Windows.Forms.DialogResult)">
 <summary>If overriden in derived class closes the message box with given response</summary>
 <param name="Response">Response returned by the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function</param>
</member>
<member name="F:Tools.WindowsT.FormsT.MessageBox._Form">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.MessageBox.Form"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.MessageBox.Form">
 <summary>Gets or sets instance of <see cref="T:Tools.WindowsT.FormsT.MessageBoxForm"/> that currently shows the message box</summary>
 <value>This property should be set only from overriden <see cref="M:Tools.WindowsT.FormsT.MessageBox.PerformDialog(System.Boolean,System.Object)"/> when it does not calls base class method</value>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBox.PerformDialog(System.Boolean,System.Object)">
 <summary>Shows the dialog</summary>
 <param name="Modal">Indicates if dialog should be shown modally (true) or modells (false)</param>
 <param name="Owner">Parent window of dialog (may be null). This implementation recognizes values of type <see cref="T:System.Windows.Forms.IWin32Window"/>, <see cref="T:System.Windows.Interop.IWin32Window"/>, <see cref="T:System.Windows.Window"/> and <see cref="T:System.Windows.DependencyObject"/> (if hosted in <see cref="T:System.Windows.Window"/>). Unrecognized owners are treated as null.</param>
 <remarks>Note for inheritors: If you override thie method and do not call base class method, you must set value of the <see cref="P:Tools.WindowsT.FormsT.MessageBox.Form"/> property</remarks>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/></exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support <see cref="T:System.Windows.Forms.IWin32Window"/>, <see cref="T:System.Windows.Interop.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3" stage="Beta">The <paramref name="Owner"/> parameter acceps <see cref="T:System.Windows.DependencyObject"/> for which <see cref="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)"/> returns non-null value.</version>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBox.ShowDialogOn(System.Windows.Forms.Control)">
 <summary>Shows dialog in sync with thread ow given control modally to give control</summary>
 <param name="Owner">Control to show dialog on thread of and modally to (null to ignore)</param>
 <returns>Dialog result</returns>
</member>
<member name="P:Tools.WindowsT.FormsT.MessageBox.TopControlControl">
 <summary>gets <see cref="T:System.Windows.Forms.Control"/> representation of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> if possible</summary>
 <returns><see cref="T:System.Windows.Forms.Control"/> which represents <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> if possible, null otherwise</returns>
 <seealso cref="M:Tools.WindowsT.FormsT.MessageBox.GetControl(System.Object)"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.MidControlControl"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.BottomControlControl"/>
 <seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/>
 <version version="1.5.2">Fixed: First call for <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> being <see cref="T:System.Windows.UIElement"/> returns null.</version>
</member>
<member name="P:Tools.WindowsT.FormsT.MessageBox.MidControlControl">
 <summary>Gets <see cref="T:System.Windows.Forms.Control"/> representation of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> if possible</summary>
 <returns><see cref="T:System.Windows.Forms.Control"/> which represents <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> if possible, null otherwise</returns>
 <seealso cref="M:Tools.WindowsT.FormsT.MessageBox.GetControl(System.Object)"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.TopControlControl"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.BottomControlControl"/>
 <seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/>
 <version version="1.5.2">Fixed: First call for <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> being <see cref="T:System.Windows.UIElement"/> returns null.</version>
</member>
<member name="P:Tools.WindowsT.FormsT.MessageBox.BottomControlControl">
 <summary>Gets <see cref="T:System.Windows.Forms.Control"/> representation of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> if possible</summary>
 <returns><see cref="T:System.Windows.Forms.Control"/> which represents <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> if possible, null otherwise</returns>
 <seealso cref="M:Tools.WindowsT.FormsT.MessageBox.GetControl(System.Object)"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.TopControlControl"/><seealso cref="P:Tools.WindowsT.FormsT.MessageBox.MidControlControl"/>
 <seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/>
 <version version="1.5.2">Fixed: First call for <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> being <see cref="T:System.Windows.UIElement"/> returns null.</version>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBox.GetControl(System.Object)">
 <summary>Gets control from object</summary>
 <param name="Control">Object that represents a control. It can be <see cref="T:System.Windows.Forms.Control"/>, <see cref="T:System.Windows.UIElement"/></param>
 <returns><see cref="T:System.Windows.Forms.Control"/> which represents <paramref name="Control"/>. For same <paramref name="Control"/> returns same <see cref="T:System.Windows.Forms.Control"/>. Returns null if <paramref name="Control"/> is null or it is of unsupported type.</returns>
 <version version="1.5.2">Fixed: First call for <paramref name="Control"/> being <see cref="T:System.Windows.UIElement"/> returns null.</version>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBox.RecycleInternal">
 <summary>Performs all operations needed to switch <see cref="T:Tools.WindowsT.FormsT.MessageBox"/> form <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/> to <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/></summary>
 <remarks>Called by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/>.
 <para>Note to inheritors: Always call base-class method <see cref="M:Tools.WindowsT.FormsT.MessageBox.RecycleInternal"/>.</para></remarks>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/>. This exception never occures in this implementation because <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> ensures that <see cref="M:Tools.WindowsT.FormsT.MessageBox.RecycleInternal"/> is caled only when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/>.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.MessageBox.GetTextWithAccessKey(System.String,System.Char)">
 <summary>Gets text which contains Accesskey marker (&amp;)</summary>
 <param name="Text">Text (if it contains character used as accesskey markers they must be escaped)</param>
 <param name="AccessKey">Char representing accesskey (if char is not in <paramref name="Text"/> no accesskey marker should be inserted)</param>
 <returns><paramref name="Text"/> with accesskey denoted in it by &amp;.</returns>
 <version version="1.5.2">Function added</version>
</member>
<member name="T:Tools.WindowsT.FormsT.UserControlExtended">
 <summary>Provides empty base class for user controls that extends <see cref="T:System.Windows.Forms.UserControl"/> by adding several features.</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.WindowsT.FormsT.UserControlExtended.#ctor">
 <summary>CTor</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UserControlExtended._KeyPreview">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview">
 <summary>Gets or sets a value indicating whether the user control will receive key events before the event is passed to the control that has focus.</summary>
 <value>true if the user control will receive all key events; false if the currently selected user control on the control receives key events. The default is false.</value>
 <remarks>
 <para>When this property is set to true, the user control will receive all <see cref="E:System.Windows.Forms.Control.KeyPress"/>, <see cref="E:System.Windows.Forms.Control.KeyDown"/>, and <see cref="E:System.Windows.Forms.Control.KeyUp"/> events. After the user controls's event handlers have completed processing the keystroke, the keystroke is then assigned to the control with focus. For example, if the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property is set to true and the currently selected control is a <see cref="T:System.Windows.Forms.TextBox"/>, after the keystroke is handled by the event handlers of the user control the <see cref="T:System.Windows.Forms.TextBox"/> control will receive the key that was pressed. To handle keyboard events only at the user control level and not allow controls to receive keyboard events, set the <see cref="P:System.Windows.Forms.KeyPressEventArgs.Handled"/> property in your user controls's <see cref="E:System.Windows.Forms.Control.KeyPress"/> event handler to true.</para>
 <para>You can use this property to process most keystrokes in your user control and either handle the keystroke or call the appropriate control to handle the keystroke. For example, when a user control uses function keys, you might want to process the keystrokes at the user-control level rather than writing code for each control that might receive keystroke events.</para>
 <para>If a user control has no visible or enabled controls, it automatically receives all keyboard events.</para>
 <para>The described behavior is realized in overriden <see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)"/>.</para>
 <para>For more details see <seealso cref="P:System.Windows.Forms.Form.KeyPreview"/>. It works in the same way.</para>
 <para>When you are using derived control that inherits <see cref="T:Tools.WindowsT.FormsT.UserControlExtended"/> and has nativelly set this property to true, but this behavior interfers with functionality of your form, you can set this property to false (if it is not restricted by creator of derived control) to avoid such interference but with risk that some keyboard-driven functions of the controll will not work.</para>
 <para>Note for inheritors: You do not need to override this property (even you cannot) in order to change its design-time default value. You can simply set value of <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreviewDefaultValue"/> in CTor. You must also set same default value to <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> in CTor.</para>
 </remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.UserControlExtended._KeyPreviewDefaultValue">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreviewDefaultValue"/> property</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreviewDefaultValue">
 <summary>Contains default value of <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property</summary>
 <remarks>This default value is used by various tools (like Visual Studion WinForms designer) to indicate if value of property have been changed and thus must be serialized.
 You can change value of this in CTor of derived class in order to change design-time behaviour of your derived control</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.UserControlExtended.ShouldSerializeKeyPreview">
 <summary>Gets value indicating if value of the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property should be serialized (means it has different then default value)</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.UserControlExtended.ResetKeyPreview">
 <summary>Resets value of the <see cref="P:Tools.WindowsT.FormsT.UserControlExtended.KeyPreview"/> property to its default value</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.UserControlExtended.ProcessKeyPreview(System.Windows.Forms.Message@)">
 <summary>Previews a keyboard message.</summary>
 <returns>true if the message was processed by the control; otherwise, false.</returns>
 <param name="m">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process. </param>
</member>
<member name="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer">
 <summary>Implements the manual sorting of items in <see cref="T:System.Windows.Forms.ListView"/> by columns.</summary>
 <remarks>
 <seealso>http://msdn2.microsoft.com/en-us/library/system.windows.forms.listview.listviewitemsorter.aspx</seealso>
 </remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes">
 <summary>Possible ways of sorting</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes.String">
 <summary>Sort items as <see cref="T:System.String"/></summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes.Numeric">
 <summary>Sort items as numbers (<see cref="T:System.Decimal"/> is used)</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes.Zerofill">
 <summary>Sor as <see cref="T:System.String"/> filled on left side by zeros ("0") to specified width</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer._Column">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer._Descending">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer._SortMode">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer._ZerofillWidth">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.ZerofillWidth"/> property</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.#ctor">
 <summary>CTor with default <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> 0</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.#ctor(System.Int32,System.Boolean)">
 <summary>CTor</summary>
 <param name="column">Sort column index</param>
 <param name="Descending">Indicates reversed order of sorting</param>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.ZerofillWidth">
 <summary>Defines fill width applicable when <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode"/> is <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes.Zerofill"/></summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Setting value less than zero</exception>
 <remarks>When setting to value that differs from contemporary value the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode">
 <summary>Gets or sets the way of sorting</summary>
 <remarks>When setting to value that differs from contemporary value the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column">
 <summary>Gets or sets sort column index</summary>
 <remarks><para>Columns are index in zero-based way including first column. If column is out of range no exceprion is thrown but no sorting done. You can set column to e.g. -1 to avoid sorting.</para>
 <para>When setting to value that differs from contemporary value the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised.</para></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending">
 <summary>Gets or sets if sorting order is reversed</summary>
 <remarks>When setting to value that differs from contemporary value the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Set(System.Int32,System.Boolean,Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortModes,System.Int32)">
 <summary>Sets <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> and <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> properties at one step and prevents multiple raiseing of the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event</summary>
 <param name="Column">New value for the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> property</param>
 <param name="Descending">New value for the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> property</param>
 <param name="SortMode">New value for the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode"/> property</param>
 <param name="ZeroFillWidth">New value for the <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.ZerofillWidth"/> property</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ZeroFillWidth"/> is less than zero</exception>
 <remarks>In case some of parameters differs from value of corresponding property the <see cref="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed"/> event is raised</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Compare(System.Object,System.Object)">
 <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
 <param name="y">The second object to compare.</param>
 <param name="x">The first object to compare.</param>
 <returns>Value Condition Less than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/> equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
 <exception cref="T:System.ArgumentException">Either <paramref name="x"/> or <paramref name="y"/> is not <see cref="T:System.Windows.Forms.ListViewItem"/></exception>
 <remarks>Internally uses type-safe overload of <see cref="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Compare(System.Object,System.Object)"/>. Use it instead.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.op_Equality(Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer,Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer)">
 <summary>Compares two <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/>s</summary>
 <param name="a">Item to compare</param>
 <param name="b">Item to compare</param>
 <returns>True if both <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/>, <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/>, <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.SortMode"/> and <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.ZerofillWidth"/> are equal or both <paramref name="a"/> and <paramref name="b"/> are null. Otherwise False.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.op_Inequality(Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer,Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer)">
 <summary>Compares two <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/>s</summary>
 <param name="a">Item to compare</param>
 <param name="b">Item to compare</param>
 <returns>False if both <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> and <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> are equal or both <paramref name="a"/> and <paramref name="b"/> are null. Otherwise True.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.op_OnesComplement(Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer)">
 <summary>Inverts <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/>'s sort order</summary>
 <param name="a">Original <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/></param>
 <returns>A new instance of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer"/> with <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> property set to negation of <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> property of <paramref name="a"/></returns>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Compare(System.Windows.Forms.ListViewItem,System.Windows.Forms.ListViewItem)">
 <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
 <param name="liY">The second object to compare.</param>
 <param name="liX">The first object to compare.</param>
 <returns>Value Condition Less than zero <paramref name="liX"/> is less than <paramref name="liY"/>. Zero <paramref name="liX"/> equals <paramref name="liY"/>. Greater than zero <paramref name="liX"/> is greater than <paramref name="liY"/>.</returns>
</member>
<member name="E:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Changed">
 <summary>Raised when value of member changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event information (always <see cref="F:System.EventArgs.Empty"/> in this implementation</param>
 <remarks>Raiser when value of <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Column"/> or <see cref="P:Tools.WindowsT.FormsT.UtilitiesT.ListViewItemComparer.Descending"/> changes. Not raised in CTor</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState">
 <summary>Staes of controls</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ControlState.Enabled">
 <summary>Enabled and visible</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ControlState.Disabled">
 <summary>Disabled and visible</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.ControlState.Hidden">
 <summary>Disabled and hidden</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.UtilitiesT.WinFormsExtensions">
 <summary>Contains extension methods related to WinForms</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.UtilitiesT.WinFormsExtensions.ControlState(System.Windows.Forms.Control)">
 <summary>Applyes <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/> on given <see cref="T:System.Windows.Forms.Control"/> or gets its state</summary>
 <param name="Control">Control to get or set value for</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.ControlState"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Control"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.WinFormsExtensions.Remove(System.Windows.Forms.Control)">
 <summary>Removes control from parent its control</summary>
 <param name="Control">Control to be removed</param>
 <remarks>If <paramref name="Control"/>.<see cref="P:System.Windows.Forms.Control.Parent">Parent</see> is null, nozhing happens</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Control"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.WinFormsExtensions.ReplaceControl(System.Windows.Forms.TableLayoutPanel,System.Windows.Forms.Control,System.Windows.Forms.Control)">
 <summary>Replaces one <see cref="T:System.Windows.Forms.Control"/> in <see cref="T:System.Windows.Forms.TableLayoutPanel"/> with another</summary>
 <param name="tlp">A <see cref="T:System.Windows.Forms.TableLayoutPanel"/> to perform replacement in</param>
 <param name="OldControl">A <see cref="T:System.Windows.Forms.Control"/> to be replaced</param>
 <param name="NewControl">A <see cref="T:System.Windows.Forms.Control"/> to replace <paramref name="OldControl"/> with. If null <paramref name="OldControl"/> is just removed from <paramref name="tlp"/></param>
 <remarks>
 <paramref name="OldControl"/> is replaced with <paramref name="NewControl"/>.
 <paramref name="NewControl"/> inherits <see cref="M:System.Windows.Forms.TableLayoutPanel.GetRow(System.Windows.Forms.Control)">Row</see>, <see cref="M:System.Windows.Forms.TableLayoutPanel.GetColumn(System.Windows.Forms.Control)">Column</see>, <see cref="M:System.Windows.Forms.TableLayoutPanel.GetColumnSpan(System.Windows.Forms.Control)">ColumnSpan</see>, <see cref="M:System.Windows.Forms.TableLayoutPanel.GetRowSpan(System.Windows.Forms.Control)">RowSpan</see> and <see cref="P:System.Windows.Forms.Control.TabIndex"/> from <paramref name="OldControl"/>.
 <paramref name="OldControl"/> is removed from <paramref name="tlp"/>.<see cref="P:System.Windows.Forms.Control.Controls">Controls.</see>.
 <paramref name="NewControl"/> is removed from its old <see cref="P:System.Windows.Forms.Control.Parent">Parent</see>.
 </remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="tlp"/> is null -or- <paramref name="OldControl"/> is null</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="OldControl"/> is not contained within <paramref name="tlp"/>.<see cref="P:System.Windows.Forms.Control.Controls">Controls</see>.</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.WinFormsExtensions.FindActiveControl(System.Windows.Forms.Control,System.Func{System.Windows.Forms.Control,System.Boolean})">
 <summary>Recursivelly searches for innermost focused control placed on given control</summary>
 <param name="Control">Control to serach for child of</param>
 <param name="DoNotExpand">Optional. Call back function delegate. The function returns true for controls that should be treated as controls withoud child controls. If such control contains has or focus it is returned. This ¨function is called for <paramref name="Control"/> (passed in paramater) as well.</param>
 <returns>The inner most control that contain focus. Null when there is no such control and <paramref name="Control"/> also has not focus.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.WinFormsExtensions.GetNeighbourScreen(System.Windows.Forms.Screen,Tools.Direction)">
 <summary>Gets neighbouring screen to given screen in given direction</summary>
 <param name="Screen">Screen to get neighbour of</param>
 <param name="Direction">Direction in which (on which side) get neighbour</param>
 <returns>Screen that directly neighbours with <paramref name="Screen"/> in given <paramref name="Direction"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Screen"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Direction"/> is not one of <see cref="T:Tools.Direction"/> values</exception>
 <remarks>Maximal allowed gap or overlap between screens is 5px. For screen (B) to be considered neighbour with <paramref name="Screen"/> (A) screen edges must either share at least 25% of appropriate edge of <paramref name="Screen"/> (A) or screen (B) must share 100% of it's appropriate edge with <paramref name="Screen"/> (A).</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="T:Tools.WindowsT.FormsT.DerivedControls">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.AutoSize_d">
<summary>
Looks up a localized string similar to 'Gets or sets a value indicating whether the control is automatically resized to display its entire contents.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.AutoText_d">
<summary>
Looks up a localized string similar to 'Get or sets value indicating if text automatically displays value of progress bar'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.AutoTextChanged_d">
<summary>
Looks up a localized string similar to 'Ocuurs when AutoText changes'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.AutoTextFormat_d">
<summary>
Looks up a localized string similar to 'Format string used to format value when displayed as text of control automatically.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.AutoTextFormatChanged_d">
<summary>
Looks up a localized string similar to 'Ocuurs when AutoTextFormat changes'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.BindingContextChanged_d">
<summary>
Looks up a localized string similar to 'Fired when BindingContextChanged of internal ComboBox occurs'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.DataBindings_d">
<summary>
Looks up a localized string similar to 'Gets the data bindings for the control.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.DataSource_d">
<summary>
Looks up a localized string similar to 'Gets or sets the data source for internal ComboBox'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.Description_d">
<summary>
Looks up a localized string similar to 'Stores value for the Link.Description of Link that represents this LinkItem'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.DisplayMember_d">
<summary>
Looks up a localized string similar to 'Gets or sets the property to display for internal ComboBox.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.Enabled_d">
<summary>
Looks up a localized string similar to 'Stores value for the Link.Enabled of Link that represents this LinkItem'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.Help_c">
<summary>
Looks up a localized string similar to 'Help'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.HelpKeyword_d">
<summary>
Looks up a localized string similar to 'The Help keyword for the control.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.HelpNamespace_d">
<summary>
Looks up a localized string similar to 'A value specifying the name of the Help file associated with this System.Windows.Forms.HelpProvider object.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.HelpNavigator_d">
<summary>
Looks up a localized string similar to 'The current System.Windows.Forms.HelpNavigator setting for the control.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.HelpString_d">
<summary>
Looks up a localized string similar to 'Contents of the pop-up Help window for the specified control.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.KeyPreview_d">
<summary>
Looks up a localized string similar to 'Gets or sets a value indicating whether the form will receive key events before the event is passed to the control that has focus.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.KeyPreviewDefaultValue_d">
<summary>
Looks up a localized string similar to 'Contains default value of the KeyPreview property.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.LinkData_d">
<summary>
Looks up a localized string similar to 'Data associated with this link'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.LinkPath_d">
<summary>
Looks up a localized string similar to 'Path (string representation of URI) of target of the link'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.LinkURI_d">
<summary>
Looks up a localized string similar to 'URI of target of the link'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.ListOfAllItemsInLabel">
<summary>
Looks up a localized string similar to 'List of all items in label'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.Name_d">
<summary>
Looks up a localized string similar to 'Stores value for the Link.Name of Link that represents this LinkItem'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.ShowHelp_d">
<summary>
Looks up a localized string similar to 'Inicates whether the specified control&apos;s Help should be displayed.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.Tag_d">
<summary>
Looks up a localized string similar to 'Stores value for the Link.Tag of Link that represents this LinkItem'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.Text_LinkLabelItem_d">
<summary>
Looks up a localized string similar to 'Text to be show in place of this item'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.TextAlign_d">
<summary>
Looks up a localized string similar to 'Gets or sets the alignment of text in the label.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.ValueChanged_d">
<summary>
Looks up a localized string similar to 'Occurs when Value changes'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.ValueMember_d">
<summary>
Looks up a localized string similar to 'Gets or sets the property to use as the actual value for the items in internal ComboBox.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.DerivedControls.Visited_d">
<summary>
Looks up a localized string similar to 'Stores value for the Link.Visited of Link that represents this LinkItem'.
</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.AutoSize_dFormat">
<summary>
The stub formatting method returning the AutoSize_d property value.
</summary>
<returns>The AutoSize_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.AutoText_dFormat">
<summary>
The stub formatting method returning the AutoText_d property value.
</summary>
<returns>The AutoText_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.AutoTextChanged_dFormat">
<summary>
The stub formatting method returning the AutoTextChanged_d property value.
</summary>
<returns>The AutoTextChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.AutoTextFormat_dFormat">
<summary>
The stub formatting method returning the AutoTextFormat_d property value.
</summary>
<returns>The AutoTextFormat_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.AutoTextFormatChanged_dFormat">
<summary>
The stub formatting method returning the AutoTextFormatChanged_d property value.
</summary>
<returns>The AutoTextFormatChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.BindingContextChanged_dFormat">
<summary>
The stub formatting method returning the BindingContextChanged_d property value.
</summary>
<returns>The BindingContextChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.DataBindings_dFormat">
<summary>
The stub formatting method returning the DataBindings_d property value.
</summary>
<returns>The DataBindings_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.DataSource_dFormat">
<summary>
The stub formatting method returning the DataSource_d property value.
</summary>
<returns>The DataSource_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.Description_dFormat">
<summary>
The stub formatting method returning the Description_d property value.
</summary>
<returns>The Description_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.DisplayMember_dFormat">
<summary>
The stub formatting method returning the DisplayMember_d property value.
</summary>
<returns>The DisplayMember_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.Enabled_dFormat">
<summary>
The stub formatting method returning the Enabled_d property value.
</summary>
<returns>The Enabled_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.Help_cFormat">
<summary>
The stub formatting method returning the Help_c property value.
</summary>
<returns>The Help_c property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.HelpKeyword_dFormat">
<summary>
The stub formatting method returning the HelpKeyword_d property value.
</summary>
<returns>The HelpKeyword_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.HelpNamespace_dFormat">
<summary>
The stub formatting method returning the HelpNamespace_d property value.
</summary>
<returns>The HelpNamespace_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.HelpNavigator_dFormat">
<summary>
The stub formatting method returning the HelpNavigator_d property value.
</summary>
<returns>The HelpNavigator_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.HelpString_dFormat">
<summary>
The stub formatting method returning the HelpString_d property value.
</summary>
<returns>The HelpString_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.KeyPreview_dFormat">
<summary>
The stub formatting method returning the KeyPreview_d property value.
</summary>
<returns>The KeyPreview_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.KeyPreviewDefaultValue_dFormat">
<summary>
The stub formatting method returning the KeyPreviewDefaultValue_d property value.
</summary>
<returns>The KeyPreviewDefaultValue_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.LinkData_dFormat">
<summary>
The stub formatting method returning the LinkData_d property value.
</summary>
<returns>The LinkData_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.LinkPath_dFormat">
<summary>
The stub formatting method returning the LinkPath_d property value.
</summary>
<returns>The LinkPath_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.LinkURI_dFormat">
<summary>
The stub formatting method returning the LinkURI_d property value.
</summary>
<returns>The LinkURI_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.ListOfAllItemsInLabelFormat">
<summary>
The stub formatting method returning the ListOfAllItemsInLabel property value.
</summary>
<returns>The ListOfAllItemsInLabel property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.Name_dFormat">
<summary>
The stub formatting method returning the Name_d property value.
</summary>
<returns>The Name_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.ShowHelp_dFormat">
<summary>
The stub formatting method returning the ShowHelp_d property value.
</summary>
<returns>The ShowHelp_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.Tag_dFormat">
<summary>
The stub formatting method returning the Tag_d property value.
</summary>
<returns>The Tag_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.Text_LinkLabelItem_dFormat">
<summary>
The stub formatting method returning the Text_LinkLabelItem_d property value.
</summary>
<returns>The Text_LinkLabelItem_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.TextAlign_dFormat">
<summary>
The stub formatting method returning the TextAlign_d property value.
</summary>
<returns>The TextAlign_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.ValueChanged_dFormat">
<summary>
The stub formatting method returning the ValueChanged_d property value.
</summary>
<returns>The ValueChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.ValueMember_dFormat">
<summary>
The stub formatting method returning the ValueMember_d property value.
</summary>
<returns>The ValueMember_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.DerivedControls.Visited_dFormat">
<summary>
The stub formatting method returning the Visited_d property value.
</summary>
<returns>The Visited_d property value.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.Dialogs">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.About0">
<summary>
Looks up a localized string similar to 'About {0}'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.InnerException">
<summary>
Looks up a localized string similar to 'Inner exception: '.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.NoEncodingSelected">
<summary>
Looks up a localized string similar to 'No encoding selected'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.OKClicked_d">
<summary>
Looks up a localized string similar to 'Raised after user clicks OK and dialogs allows him to select encoding'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.Preselected_d">
<summary>
Looks up a localized string similar to 'Specifies code page of encoding that will be preselected when dialog is shown (if available). Set to negative value in order to preselect no encoding'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.PreviewBytes_d">
<summary>
Looks up a localized string similar to 'Text to decode using selected encoding and show as preview'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.PreviewString_d">
<summary>
Looks up a localized string similar to 'Text to encode using selected encoding and inform user if all characters can be encoded'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.PropertyChanged_d">
<summary>
Looks up a localized string similar to 'Occurs when a property value changes.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.RequireCorrect_d">
<summary>
Looks up a localized string similar to 'Defines if user can select encoding that can be used only with problems on given PreviewString on PreviewBytes'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.SelectEncodingPlease">
<summary>
Looks up a localized string similar to 'Select encoding please.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.ShowHelp_d">
<summary>
Looks up a localized string similar to 'Determines if help button will be shown'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.Text_d">
<summary>
Looks up a localized string similar to 'Text displayed in title of window'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.Text_dv">
<summary>
Looks up a localized string similar to 'Select encoding'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.TextAlignmentOfPrompt">
<summary>
Looks up a localized string similar to 'Text alignment of prompt'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.ValueIndicatingBidirectionlFlowDirection">
<summary>
Looks up a localized string similar to 'Value indicating bidirectionl flow direction'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Dialogs.WindowChanged_d">
<summary>
Looks up a localized string similar to 'Raised when value of the Window property changes'.
</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.About0Format(System.Object)">
<summary>
Formats a localized string similar to 'About {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.InnerExceptionFormat">
<summary>
The stub formatting method returning the InnerException property value.
</summary>
<returns>The InnerException property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.NoEncodingSelectedFormat">
<summary>
The stub formatting method returning the NoEncodingSelected property value.
</summary>
<returns>The NoEncodingSelected property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.OKClicked_dFormat">
<summary>
The stub formatting method returning the OKClicked_d property value.
</summary>
<returns>The OKClicked_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.Preselected_dFormat">
<summary>
The stub formatting method returning the Preselected_d property value.
</summary>
<returns>The Preselected_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.PreviewBytes_dFormat">
<summary>
The stub formatting method returning the PreviewBytes_d property value.
</summary>
<returns>The PreviewBytes_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.PreviewString_dFormat">
<summary>
The stub formatting method returning the PreviewString_d property value.
</summary>
<returns>The PreviewString_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.PropertyChanged_dFormat">
<summary>
The stub formatting method returning the PropertyChanged_d property value.
</summary>
<returns>The PropertyChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.RequireCorrect_dFormat">
<summary>
The stub formatting method returning the RequireCorrect_d property value.
</summary>
<returns>The RequireCorrect_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.SelectEncodingPleaseFormat">
<summary>
The stub formatting method returning the SelectEncodingPlease property value.
</summary>
<returns>The SelectEncodingPlease property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.ShowHelp_dFormat">
<summary>
The stub formatting method returning the ShowHelp_d property value.
</summary>
<returns>The ShowHelp_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.Text_dFormat">
<summary>
The stub formatting method returning the Text_d property value.
</summary>
<returns>The Text_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.Text_dvFormat">
<summary>
The stub formatting method returning the Text_dv property value.
</summary>
<returns>The Text_dv property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.TextAlignmentOfPromptFormat">
<summary>
The stub formatting method returning the TextAlignmentOfPrompt property value.
</summary>
<returns>The TextAlignmentOfPrompt property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.ValueIndicatingBidirectionlFlowDirectionFormat">
<summary>
The stub formatting method returning the ValueIndicatingBidirectionlFlowDirection property value.
</summary>
<returns>The ValueIndicatingBidirectionlFlowDirection property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.Dialogs.WindowChanged_dFormat">
<summary>
The stub formatting method returning the WindowChanged_d property value.
</summary>
<returns>The WindowChanged_d property value.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.CompositeControls">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Add_d">
<summary>
Looks up a localized string similar to 'Raised after Add menu item is clicked'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.AddMenuState_d">
<summary>
Looks up a localized string similar to 'State of the Add menu item'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.AutoChange_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Status.Status automatically changes when keyword is added or removed'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.AutoChanged_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Status automatically changes to Statuses.Changed when tmiMarkAsChanged is clicked'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.AutoCompleteCacheName_d">
<summary>
Looks up a localized string similar to 'Name of per-session cache of keywords used by this instance'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.AutomaticLists_d">
<summary>
Looks up a localized string similar to 'Indicates if editor uses automatically shared lists of keywords and synonyms (among instances with same AutoCompleteCacheName) or not.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.BaseTypes">
<summary>
Looks up a localized string similar to 'Base Types'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.CanCancel_d">
<summary>
Looks up a localized string similar to 'Indicates if dialog supports cancelation.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.CaseSensitive_d">
<summary>
Looks up a localized string similar to 'Gets or sets value idicating if keywords are case sensitive'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Changed">
<summary>
Looks up a localized string similar to 'Changed'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.CloseOnFinish_d">
<summary>
Looks up a localized string similar to 'Indicates if form automatically closes when BackgroundWorker finishes its work.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.CodePageColumnHeaderText_d">
<summary>
Looks up a localized string similar to 'Gets or sets text of ColumnHeader which displays CodePage of encoding. Applicable only when Style is ListView'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.CodePageColumnHeaderWidht_d">
<summary>
Looks up a localized string similar to 'Defines width of ColumnHeader which displays CodePage of encoding. Applicable only when Style is ListView'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ColumnOrder_d">
<summary>
Looks up a localized string similar to 'Gets or sets order of columns of ListView when Style is ListView'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ContextMenuEnabled_d">
<summary>
Looks up a localized string similar to 'Indicates if conext menu on ListBox with keywords is enabled'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Delete_d">
<summary>
Looks up a localized string similar to 'Raised after Delete menu item is clicked'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Deleted">
<summary>
Looks up a localized string similar to 'Deleted'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.DeleteMenuState_d">
<summary>
Looks up a localized string similar to 'State of the Delete menu item'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.DisplayChanged_d">
<summary>
Looks up a localized string similar to 'Raised when value of any properties indicating which parts of UI to show changes.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.DisplayDescription_d">
<summary>
Looks up a localized string similar to 'Indicates if description pane is shown'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.DisplayMemberList_d">
<summary>
Looks up a localized string similar to 'Indicates if member list is shown'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.DisplayNameColumnHeaderText_d">
<summary>
Looks up a localized string similar to 'Gets or sets text of ColumnHeader which displays DisplayName of encoding. Applicable only when Style is ListView'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.DisplayNameColumnHeaderWidth_d">
<summary>
Looks up a localized string similar to 'Defines width of ColumnHeader which displays DisplayName of encoding. Applicable only when Style is ListView'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.DisplayProperties_d">
<summary>
Looks up a localized string similar to 'Indicates if property grid is shown'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.DisplayStype_d">
<summary>
Looks up a localized string similar to 'Gets or sets format string used to display name of encodings in list.
{0} is replaced by user friendly encoding name, {1} is replaced with IANA-registered name and {2} is replaced with code page number'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.DoWorkOnShow_d">
<summary>
Looks up a localized string similar to 'When true form will automatically start BackgroundWorker whne the Shown events occurs.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Information_d">
<summary>
Looks up a localized string similar to 'Informative text displayed below the progress bar'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ItemDoubleClick_d">
<summary>
Looks up a localized string similar to 'Raised when Style is ListView or ListBox and user double clicks some item or raised when item is selected and user presses the enter key not depending on Style.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ItemFiltering_d">
<summary>
Looks up a localized string similar to 'Raised when item is about to be displayed to user. Operation can be cancelled.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.KeyWordRemoved_d">
<summary>
Looks up a localized string similar to 'Raised after user manually removes keyword(s)'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.MarkAsChanged_d">
<summary>
Looks up a localized string similar to 'Raised after Mark-as-changed menu item is clicked'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.MarkAsChangedMenuState_d">
<summary>
Looks up a localized string similar to 'State of the Mark-as-changed menu item'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Merge_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if merge button is checked (orange) or not (gray)'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.MergeButtonState_d">
<summary>
Looks up a localized string similar to 'Gets or sets state of merge button'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.MergeChanged_d">
<summary>
Looks up a localized string similar to 'Raised after value of the Merge property changed'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.NA">
<summary>
Looks up a localized string similar to 'N/A'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.NameColumnHeaderText_d">
<summary>
Looks up a localized string similar to 'Gets or sets text of ColumnHeader which displays Name of encoding. Applicable only when Style is ListView'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.NameColumnHeaderWidth_d">
<summary>
Looks up a localized string similar to 'Defines width of ColumnHeader which displays Name of encoding. Applicable only when Style is ListView'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.New_">
<summary>
Looks up a localized string similar to 'New'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Normal">
<summary>
Looks up a localized string similar to 'Normal'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Null">
<summary>
Looks up a localized string similar to 'Null'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Objects_d">
<summary>
Looks up a localized string similar to 'List of assemblies or any other objects listed at top-level of tree-view'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.PasteManyLines">
<summary>
Looks up a localized string similar to 'There are {0} lines of text in clipboard. Do you want to paste them as keywords?'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.PleaseWait">
<summary>
Looks up a localized string similar to 'Please wait...'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ProgressBarStyle_d">
<summary>
Looks up a localized string similar to 'Style of ProgressBar that shows progresss'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Prompt_d">
<summary>
Looks up a localized string similar to 'Information text displayed in upper part of form'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.References">
<summary>
Looks up a localized string similar to 'References'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Reset_d">
<summary>
Looks up a localized string similar to 'Raised after Reset menu item is clicked'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ResetMenuState_d">
<summary>
Looks up a localized string similar to 'State of the Reset menu item'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.SelectedCodePage_d">
<summary>
Looks up a localized string similar to 'Gets code page identifier of selected encoding or tries to select encoding with given code page'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.SelectedIndexChanged_d">
<summary>
Looks up a localized string similar to 'Raised after the SelectedIndex property is changed'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.SelectedName_d">
<summary>
Looks up a localized string similar to 'Gets The Internet Assigned Numbers Authority (IANA) name of selected encoding or tries to select encoding with given name'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShortcutsEnabled_d">
<summary>
Looks up a localized string similar to 'Indicates if keyboard shortcuts for clipboard manipulation are enabled'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowBaseTypes_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if base types are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowChanged_d">
<summary>
Looks up a localized string similar to 'Raised after property that controls which members are displayed in ListView was changed.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowCTors_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if CTors are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowEvents_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Events are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowFields_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Fields are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowFlatNamespaces_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if namespaces are shown flat (true) or hierarchically (false).'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowGenericArguments_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if generic arguments (type parameters) are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowGlobalMembers_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Global members (parts of properties and events) are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowInheritedMembers_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if inherited members are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowInitializers_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Initializers are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowInstanceMembers_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if instance members are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowInternalMembers_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Internal members are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowMethods_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Methods are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowNestedTypes_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if nested types are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowPrivateMembers_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if private members are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowProperties_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if properties are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowProtectedMembers_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Protected members are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowReferences_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if references are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowShowMenu_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if Show menu is shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowSpecialMembers_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if special members (parts of properties and events) are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowStaticMembers_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if static members are shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ShowToolbar_d">
<summary>
Looks up a localized string similar to 'Gets or sets value indicating if the toolbar is shown.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Sorting_d">
<summary>
Looks up a localized string similar to 'Specifies column and order of sorting. Applies only when Style is ListBox.'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Status_d">
<summary>
Looks up a localized string similar to 'StatusMarker present on this control'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.StatusChanged_d">
<summary>
Looks up a localized string similar to 'Raised after the Status property changes'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.StatusMarkerStatus_d">
<summary>
Looks up a localized string similar to 'Shown status of control'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.StatusState_d">
<summary>
Looks up a localized string similar to 'Gets or sets state of Status'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.Style_d">
<summary>
Looks up a localized string similar to 'Defines control used for showing encodings'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.ThesaurusButtonAttribute_d">
<summary>
Looks up a localized string similar to 'Gets or sets state of thesaurus button'.
</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.CompositeControls.WorkerArgument_d">
<summary>
Looks up a localized string similar to 'Argument passed to RunWorkerAsync method when DoWorkOnShow is true.'.
</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Add_dFormat">
<summary>
The stub formatting method returning the Add_d property value.
</summary>
<returns>The Add_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.AddMenuState_dFormat">
<summary>
The stub formatting method returning the AddMenuState_d property value.
</summary>
<returns>The AddMenuState_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.AutoChange_dFormat">
<summary>
The stub formatting method returning the AutoChange_d property value.
</summary>
<returns>The AutoChange_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.AutoChanged_dFormat">
<summary>
The stub formatting method returning the AutoChanged_d property value.
</summary>
<returns>The AutoChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.AutoCompleteCacheName_dFormat">
<summary>
The stub formatting method returning the AutoCompleteCacheName_d property value.
</summary>
<returns>The AutoCompleteCacheName_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.AutomaticLists_dFormat">
<summary>
The stub formatting method returning the AutomaticLists_d property value.
</summary>
<returns>The AutomaticLists_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.BaseTypesFormat">
<summary>
The stub formatting method returning the BaseTypes property value.
</summary>
<returns>The BaseTypes property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.CanCancel_dFormat">
<summary>
The stub formatting method returning the CanCancel_d property value.
</summary>
<returns>The CanCancel_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.CaseSensitive_dFormat">
<summary>
The stub formatting method returning the CaseSensitive_d property value.
</summary>
<returns>The CaseSensitive_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ChangedFormat">
<summary>
The stub formatting method returning the Changed property value.
</summary>
<returns>The Changed property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.CloseOnFinish_dFormat">
<summary>
The stub formatting method returning the CloseOnFinish_d property value.
</summary>
<returns>The CloseOnFinish_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.CodePageColumnHeaderText_dFormat">
<summary>
The stub formatting method returning the CodePageColumnHeaderText_d property value.
</summary>
<returns>The CodePageColumnHeaderText_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.CodePageColumnHeaderWidht_dFormat">
<summary>
The stub formatting method returning the CodePageColumnHeaderWidht_d property value.
</summary>
<returns>The CodePageColumnHeaderWidht_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ColumnOrder_dFormat">
<summary>
The stub formatting method returning the ColumnOrder_d property value.
</summary>
<returns>The ColumnOrder_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ContextMenuEnabled_dFormat">
<summary>
The stub formatting method returning the ContextMenuEnabled_d property value.
</summary>
<returns>The ContextMenuEnabled_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Delete_dFormat">
<summary>
The stub formatting method returning the Delete_d property value.
</summary>
<returns>The Delete_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DeletedFormat">
<summary>
The stub formatting method returning the Deleted property value.
</summary>
<returns>The Deleted property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DeleteMenuState_dFormat">
<summary>
The stub formatting method returning the DeleteMenuState_d property value.
</summary>
<returns>The DeleteMenuState_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DisplayChanged_dFormat">
<summary>
The stub formatting method returning the DisplayChanged_d property value.
</summary>
<returns>The DisplayChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DisplayDescription_dFormat">
<summary>
The stub formatting method returning the DisplayDescription_d property value.
</summary>
<returns>The DisplayDescription_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DisplayMemberList_dFormat">
<summary>
The stub formatting method returning the DisplayMemberList_d property value.
</summary>
<returns>The DisplayMemberList_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DisplayNameColumnHeaderText_dFormat">
<summary>
The stub formatting method returning the DisplayNameColumnHeaderText_d property value.
</summary>
<returns>The DisplayNameColumnHeaderText_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DisplayNameColumnHeaderWidth_dFormat">
<summary>
The stub formatting method returning the DisplayNameColumnHeaderWidth_d property value.
</summary>
<returns>The DisplayNameColumnHeaderWidth_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DisplayProperties_dFormat">
<summary>
The stub formatting method returning the DisplayProperties_d property value.
</summary>
<returns>The DisplayProperties_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DisplayStype_dFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Gets or sets format string used to display name of encodings in list.
{0} is replaced by user friendly encoding name, {1} is replaced with IANA-registered name and {2} is replaced with code page number'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.DoWorkOnShow_dFormat">
<summary>
The stub formatting method returning the DoWorkOnShow_d property value.
</summary>
<returns>The DoWorkOnShow_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Information_dFormat">
<summary>
The stub formatting method returning the Information_d property value.
</summary>
<returns>The Information_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ItemDoubleClick_dFormat">
<summary>
The stub formatting method returning the ItemDoubleClick_d property value.
</summary>
<returns>The ItemDoubleClick_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ItemFiltering_dFormat">
<summary>
The stub formatting method returning the ItemFiltering_d property value.
</summary>
<returns>The ItemFiltering_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.KeyWordRemoved_dFormat">
<summary>
The stub formatting method returning the KeyWordRemoved_d property value.
</summary>
<returns>The KeyWordRemoved_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.MarkAsChanged_dFormat">
<summary>
The stub formatting method returning the MarkAsChanged_d property value.
</summary>
<returns>The MarkAsChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.MarkAsChangedMenuState_dFormat">
<summary>
The stub formatting method returning the MarkAsChangedMenuState_d property value.
</summary>
<returns>The MarkAsChangedMenuState_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Merge_dFormat">
<summary>
The stub formatting method returning the Merge_d property value.
</summary>
<returns>The Merge_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.MergeButtonState_dFormat">
<summary>
The stub formatting method returning the MergeButtonState_d property value.
</summary>
<returns>The MergeButtonState_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.MergeChanged_dFormat">
<summary>
The stub formatting method returning the MergeChanged_d property value.
</summary>
<returns>The MergeChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.NAFormat">
<summary>
The stub formatting method returning the NA property value.
</summary>
<returns>The NA property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.NameColumnHeaderText_dFormat">
<summary>
The stub formatting method returning the NameColumnHeaderText_d property value.
</summary>
<returns>The NameColumnHeaderText_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.NameColumnHeaderWidth_dFormat">
<summary>
The stub formatting method returning the NameColumnHeaderWidth_d property value.
</summary>
<returns>The NameColumnHeaderWidth_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.New_Format">
<summary>
The stub formatting method returning the New_ property value.
</summary>
<returns>The New_ property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.NormalFormat">
<summary>
The stub formatting method returning the Normal property value.
</summary>
<returns>The Normal property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.NullFormat">
<summary>
The stub formatting method returning the Null property value.
</summary>
<returns>The Null property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Objects_dFormat">
<summary>
The stub formatting method returning the Objects_d property value.
</summary>
<returns>The Objects_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.PasteManyLinesFormat(System.Object)">
<summary>
Formats a localized string similar to 'There are {0} lines of text in clipboard. Do you want to paste them as keywords?'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.PleaseWaitFormat">
<summary>
The stub formatting method returning the PleaseWait property value.
</summary>
<returns>The PleaseWait property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ProgressBarStyle_dFormat">
<summary>
The stub formatting method returning the ProgressBarStyle_d property value.
</summary>
<returns>The ProgressBarStyle_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Prompt_dFormat">
<summary>
The stub formatting method returning the Prompt_d property value.
</summary>
<returns>The Prompt_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ReferencesFormat">
<summary>
The stub formatting method returning the References property value.
</summary>
<returns>The References property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Reset_dFormat">
<summary>
The stub formatting method returning the Reset_d property value.
</summary>
<returns>The Reset_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ResetMenuState_dFormat">
<summary>
The stub formatting method returning the ResetMenuState_d property value.
</summary>
<returns>The ResetMenuState_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.SelectedCodePage_dFormat">
<summary>
The stub formatting method returning the SelectedCodePage_d property value.
</summary>
<returns>The SelectedCodePage_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.SelectedIndexChanged_dFormat">
<summary>
The stub formatting method returning the SelectedIndexChanged_d property value.
</summary>
<returns>The SelectedIndexChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.SelectedName_dFormat">
<summary>
The stub formatting method returning the SelectedName_d property value.
</summary>
<returns>The SelectedName_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShortcutsEnabled_dFormat">
<summary>
The stub formatting method returning the ShortcutsEnabled_d property value.
</summary>
<returns>The ShortcutsEnabled_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowBaseTypes_dFormat">
<summary>
The stub formatting method returning the ShowBaseTypes_d property value.
</summary>
<returns>The ShowBaseTypes_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowChanged_dFormat">
<summary>
The stub formatting method returning the ShowChanged_d property value.
</summary>
<returns>The ShowChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowCTors_dFormat">
<summary>
The stub formatting method returning the ShowCTors_d property value.
</summary>
<returns>The ShowCTors_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowEvents_dFormat">
<summary>
The stub formatting method returning the ShowEvents_d property value.
</summary>
<returns>The ShowEvents_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowFields_dFormat">
<summary>
The stub formatting method returning the ShowFields_d property value.
</summary>
<returns>The ShowFields_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowFlatNamespaces_dFormat">
<summary>
The stub formatting method returning the ShowFlatNamespaces_d property value.
</summary>
<returns>The ShowFlatNamespaces_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowGenericArguments_dFormat">
<summary>
The stub formatting method returning the ShowGenericArguments_d property value.
</summary>
<returns>The ShowGenericArguments_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowGlobalMembers_dFormat">
<summary>
The stub formatting method returning the ShowGlobalMembers_d property value.
</summary>
<returns>The ShowGlobalMembers_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowInheritedMembers_dFormat">
<summary>
The stub formatting method returning the ShowInheritedMembers_d property value.
</summary>
<returns>The ShowInheritedMembers_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowInitializers_dFormat">
<summary>
The stub formatting method returning the ShowInitializers_d property value.
</summary>
<returns>The ShowInitializers_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowInstanceMembers_dFormat">
<summary>
The stub formatting method returning the ShowInstanceMembers_d property value.
</summary>
<returns>The ShowInstanceMembers_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowInternalMembers_dFormat">
<summary>
The stub formatting method returning the ShowInternalMembers_d property value.
</summary>
<returns>The ShowInternalMembers_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowMethods_dFormat">
<summary>
The stub formatting method returning the ShowMethods_d property value.
</summary>
<returns>The ShowMethods_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowNestedTypes_dFormat">
<summary>
The stub formatting method returning the ShowNestedTypes_d property value.
</summary>
<returns>The ShowNestedTypes_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowPrivateMembers_dFormat">
<summary>
The stub formatting method returning the ShowPrivateMembers_d property value.
</summary>
<returns>The ShowPrivateMembers_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowProperties_dFormat">
<summary>
The stub formatting method returning the ShowProperties_d property value.
</summary>
<returns>The ShowProperties_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowProtectedMembers_dFormat">
<summary>
The stub formatting method returning the ShowProtectedMembers_d property value.
</summary>
<returns>The ShowProtectedMembers_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowReferences_dFormat">
<summary>
The stub formatting method returning the ShowReferences_d property value.
</summary>
<returns>The ShowReferences_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowShowMenu_dFormat">
<summary>
The stub formatting method returning the ShowShowMenu_d property value.
</summary>
<returns>The ShowShowMenu_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowSpecialMembers_dFormat">
<summary>
The stub formatting method returning the ShowSpecialMembers_d property value.
</summary>
<returns>The ShowSpecialMembers_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowStaticMembers_dFormat">
<summary>
The stub formatting method returning the ShowStaticMembers_d property value.
</summary>
<returns>The ShowStaticMembers_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ShowToolbar_dFormat">
<summary>
The stub formatting method returning the ShowToolbar_d property value.
</summary>
<returns>The ShowToolbar_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Sorting_dFormat">
<summary>
The stub formatting method returning the Sorting_d property value.
</summary>
<returns>The Sorting_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Status_dFormat">
<summary>
The stub formatting method returning the Status_d property value.
</summary>
<returns>The Status_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.StatusChanged_dFormat">
<summary>
The stub formatting method returning the StatusChanged_d property value.
</summary>
<returns>The StatusChanged_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.StatusMarkerStatus_dFormat">
<summary>
The stub formatting method returning the StatusMarkerStatus_d property value.
</summary>
<returns>The StatusMarkerStatus_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.StatusState_dFormat">
<summary>
The stub formatting method returning the StatusState_d property value.
</summary>
<returns>The StatusState_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.Style_dFormat">
<summary>
The stub formatting method returning the Style_d property value.
</summary>
<returns>The Style_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.ThesaurusButtonAttribute_dFormat">
<summary>
The stub formatting method returning the ThesaurusButtonAttribute_d property value.
</summary>
<returns>The ThesaurusButtonAttribute_d property value.</returns>
</member>
<member name="M:Tools.WindowsT.FormsT.CompositeControls.WorkerArgument_dFormat">
<summary>
The stub formatting method returning the WorkerArgument_d property value.
</summary>
<returns>The WorkerArgument_d property value.</returns>
</member>
<member name="T:Tools.WindowsT.FormsT.Wizard">
 <summary>Wizard form</summary>
 <remarks>Typically you implement wizard steps as <see cref="T:System.Windows.Forms.Control">Controls</see> which implements <see cref="T:Tools.WindowsT.FormsT.IWizardControl"/>.
 However step of wizard can be any <see cref="T:System.Windows.Forms.Control"/>. In such case you can obtain wizard as YourControl.<see cref="M:System.Windows.Forms.Control.FindForm">FindForm</see>.</remarks>
 <version version="1.5.2" stage="Nightly">Class moved from experimental (namespace <see cref="N:Tools.Experimental.GUI"/>)</version>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard.DefaultPrevButtonText">
 <summary>Default text for previos step button</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard.DefaultNextButtonText">
 <summary>Default text for next step button</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard.DefaultCancelButtonText">
 <summary>Default text for cancel button</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.#cctor">
 <summary>Initializer</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.#ctor(System.Windows.Forms.Control)">
 <summary>CTor</summary>
 <param name="FirstStep">First step of wizard - it can be any control, but typically it vderives from <see cref="T:Tools.WindowsT.FormsT.IWizardControl"/></param>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.OnShown(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.Form.Shown"/> event.</summary>
 <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data</param>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.CurrentStep">
 <summary>Gets or sets current step of the wizard.</summary>
 <returns>Current step of the wizard</returns>
 <value>Typically use <see cref="M:Tools.WindowsT.FormsT.Wizard.GoNext"/> instead of setting this property</value>
 <remarks>
 This property does not tracks Previous/Back steps. 
 Note for inheritors: Value of this property is defined as first control of <see cref="P:Tools.WindowsT.FormsT.Wizard.panControlHost"/> (which is <see cref="P:Tools.WindowsT.FormsT.Wizard.WizardHostControl"/>).
 </remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.OnCurrentStepChanged">
 <summary>Raises the <see cref="E:Tools.WindowsT.FormsT.Wizard.CurrentStepChanged"/> event</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.Wizard.CurrentStepChanged">
 <summary>raised after <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.GoNext(System.Windows.Forms.Control)">
 <summary>Advances wizard to next step. Remembers current step. Typically use this method instead of setting the <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> proprty directly.</summary>
 <param name="Control">Next step of wizard. It can be any control, but typically it implements <see cref="T:Tools.WindowsT.FormsT.IWizardControl"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Control"/> is null</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex"/> &lt; <see cref="P:Tools.WindowsT.FormsT.Wizard.StepsCount"/> - 1 (Current step is not lats known step)</exception>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.ClearStepList(System.Int32)">
 <summary>Clears list of konown steps from given index</summary>
 <param name="From">Index of first step to delete. Must be greater than <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex"/></param>
 <exception cref="T:System.ArgumentException"><paramref name="From"/> &lt;= <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex"/> (cannot delete current or already passed step)</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.WizardHostControl">
 <summary>Gets control that hosts wizard control (<see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/>. This control becomes <see cref="P:System.Windows.Forms.Control.Parent"/> of <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/>.</summary>
 <remarks>This is <see cref="P:Tools.WindowsT.FormsT.Wizard.panControlHost"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.PrevButton">
 <summary>Button for going to previous step.</summary>
 <remarks>Use this property to hide/show or enable/disable the button or change text etc.
 Thi is <see cref="P:Tools.WindowsT.FormsT.Wizard.cmdBack"/>.</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.NextButton">
 <summary>Button for going to next step.</summary>
 <remarks>Use this property to hide/show or enable/disable the button or change text etc.
 This is <see cref="P:Tools.WindowsT.FormsT.Wizard.cmdNext"/>.</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.CancelWizardButton">
 <summary>Button for going cancelling wizard.</summary>
 <remarks>Use this property to hide/show or enable/disable the button or change text etc.
 This is <see cref="P:Tools.WindowsT.FormsT.Wizard.cmdCancel"/></remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard._NextStep">
 <summary>List of handler for the <see cref="E:Tools.WindowsT.FormsT.Wizard.NextStep"/> event</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.Wizard.NextStep">
 <summary>Raised before advancing to next step. Can be canceled.</summary>
 <remarks>If your step does not implement <see cref="T:Tools.WindowsT.FormsT.IWizardControl"/>, you should advance to next step in handler of this event manually - but only if current step is last step (<see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex"/> = <see cref="P:Tools.WindowsT.FormsT.Wizard.StepsCount"/> -1).
 If event handler is set to instance method of <see cref="T:System.Windows.Forms.Control"/> - derived class the event is raised for such handler only when <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> is the instance.
 This event is intended to be handled by control that implements wizard step, not by any control, bacause on <see cref="T:System.Windows.Forms.Control">Controls</see> it is raised only it the <see cref="T:System.Windows.Forms.Control">Control</see> is <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/>.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard._PrevStep">
 <summary>List of handler for the <see cref="E:Tools.WindowsT.FormsT.Wizard.PrevStep"/> event</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.Wizard.PrevStep">
 <summary>Raised before moving to previous step. Can be canceled.</summary>
 <remarks>If event handler is set to instance method of <see cref="T:System.Windows.Forms.Control"/> - derived class the event is raised for such handler only when <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> is the instance.
 This event is intended to be handled by control that implements wizard step, not by any control, bacause on <see cref="T:System.Windows.Forms.Control">Controls</see> it is raised only it the <see cref="T:System.Windows.Forms.Control">Control</see> is <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/>.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard._CancelWizard">
 <summary>List of handler for the <see cref="E:Tools.WindowsT.FormsT.Wizard.CancelWizard"/> event</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.Wizard.CancelWizard">
 <summary>Raised before canceling the wizard (by closing the window, pressing cancel button or calling <see cref="M:Tools.WindowsT.FormsT.Wizard.DoCancel"/>. Can be calceled.</summary>
 <remarks>If event handler is set to instance method of <see cref="T:System.Windows.Forms.Control"/> - derived class the event is raised for such handler only when <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> is the instance.
 This event is intended to be handled by control that implements wizard step, not by any control, bacause on <see cref="T:System.Windows.Forms.Control">Controls</see> it is raised only it the <see cref="T:System.Windows.Forms.Control">Control</see> is <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/>.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard._StepEnter">
 <summary>List of handler for the <see cref="E:Tools.WindowsT.FormsT.Wizard.StepEnter"/> event</summary>
</member>
<member name="E:Tools.WindowsT.FormsT.Wizard.StepEnter">
 <summary>raised when control becomes active step.</summary>
 <remarks>If event handler is set to instance method of <see cref="T:System.Windows.Forms.Control"/> - derived class the event is raised for such handler only when <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> is the instance.
 This event is intended to be handled by control that implements wizard step, not by any control, bacause on <see cref="T:System.Windows.Forms.Control">Controls</see> it is raised only it the <see cref="T:System.Windows.Forms.Control">Control</see> is <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.RaiseStepEvent``1(System.Object,``0,System.Collections.Generic.IEnumerable{System.EventHandler{``0}})">
 <summary>Raises event on current step</summary>
 <typeparam name="T">Type of event arguments</typeparam>
 <param name="sender">Source of event. Must be current instance</param>
 <param name="e">Event arguments</param>
 <param name="List">List of delegates to call</param>
 <exception cref="T:System.ArgumentException"><paramref name="sender"/> is not current instace</exception>
 <remarks>Delegate from <paramref name="List"/> collection is called only when <see cref="P:System.Delegate.Target"/> is null, <see cref="P:System.Delegate.Target"/> is not instance of <see cref="T:System.Windows.Forms.Control"/> or <see cref="P:System.Delegate.Target"/> is <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/></remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.Steps(System.Int32)">
 <summary>Pesudo-collection of all known steps. This is used to auto-navigation between steps.</summary>
 <param name="index">Index of step to obtain</param>
 <returns>Step at given index</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than <see cref="P:Tools.WindowsT.FormsT.Wizard.StepsCount"/>.</exception>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.StepsCount">
 <summary>Number of steps available in <see cref="P:Tools.WindowsT.FormsT.Wizard.Steps"/> pseudo-collection.</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.Steps">
 <summary>Enables enumeration through <see cref="P:Tools.WindowsT.FormsT.Wizard.Steps"/> pseudo-collection</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.Wizard.StepsIEnumerable">
 <summary>Implements <see cref="T:System.Collections.Generic.IEnumerable`1"/> for <see cref="P:Tools.WindowsT.FormsT.Wizard.Steps"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard.StepsIEnumerable.Parent">
 <summary>Owner of this instance</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.StepsIEnumerable.#ctor(Tools.WindowsT.FormsT.Wizard)">
 <summary>CTor</summary>
 <param name="Parent">Owner of this instance</param>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.StepsIEnumerable.GetEnumerator">
 <summary>Gets enumerator to iterate through <see cref="P:Tools.WindowsT.FormsT.Wizard.Steps"/> pseudo-collection</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.StepsIEnumerable._GetEnumerator">
 <summary>Gets enumerator to iterate through <see cref="P:Tools.WindowsT.FormsT.Wizard.Steps"/> pseudo-collection</summary>
 <remarks>Use type-safe <see cref="M:Tools.WindowsT.FormsT.Wizard.StepsIEnumerable.GetEnumerator"/> instead</remarks>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.StepsIEnumerable.Count">
 <summary>Gets number of items in <see cref="P:Tools.WindowsT.FormsT.Wizard.Steps"/> pseudo-collection</summary>
</member>
<member name="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex">
 <summary>Gets or sets index of current step</summary>
 <returns>Index of current step as stored. Can return -1 if value is not property initialized.</returns>
 <value>New index. Must be in range -1 ÷ <see cref="P:Tools.WindowsT.FormsT.Wizard.StepsCount"/> -1. It changes <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/>.
 If value being set is -1 <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> is not changed.</value>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is less than -1 or greater than or equal to <see cref="P:Tools.WindowsT.FormsT.Wizard.StepsCount"/></exception>
 <remarks>Value of this property is stored sseparatelly from <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> and thus it is possible to <see cref="P:Tools.WindowsT.FormsT.Wizard.Steps">Steps</see>[<see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex">CurrentStepIndex</see>] to differ from <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> if control is used in not-recomended way.</remarks>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard._Steps">
 <summary>Contains value of <see cref="P:Tools.WindowsT.FormsT.Wizard.Steps"/> property</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard._CurrentStepIndex">
 <summary>Contains value of <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.GoNext">
 <summary>Advances wizard to next step. Before it raises the <see cref="E:Tools.WindowsT.FormsT.Wizard.NextStep"/> event.</summary>
 <remarks>If <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> is last known step (<see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex"/> = <see cref="P:Tools.WindowsT.FormsT.Wizard.StepsCount"/> -1) and it implements <see cref="T:Tools.WindowsT.FormsT.IWizardControl"/> <see cref="M:Tools.WindowsT.FormsT.IWizardControl.GetNext"/> is called in order to obrain next step.
 If current step is not last step wizard activates next known step.
 If next step cannot be obtained (because of <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> does not implements <see cref="T:Tools.WindowsT.FormsT.IWizardControl"/> or <see cref="M:Tools.WindowsT.FormsT.IWizardControl.GetNext"/> return snull) nothing happens.
 So, when your control does not implement <see cref="T:Tools.WindowsT.FormsT.IWizardControl"/> you must manually advance to next step in handler of <see cref="E:Tools.WindowsT.FormsT.Wizard.NextStep"/> event - but only when <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStep"/> is last step.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.GoPrev">
 <summary>Navigates to previous step of wizard. Before it raises the <see cref="E:Tools.WindowsT.FormsT.Wizard.PrevStep"/> event.</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex"/> is 0</exception>
 <remarks>If <see cref="P:Tools.WindowsT.FormsT.Wizard.CurrentStepIndex"/> is -1 nothing happens</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.DoCancel">
 <summary>Cancels wizard dialog. before it raises the <see cref="E:Tools.WindowsT.FormsT.Wizard.CancelWizard"/> event</summary>
 <returns>True if dialog was closed</returns>
</member>
<member name="F:Tools.WindowsT.FormsT.Wizard.ForceClosing">
 <summary>If true <see cref="M:Tools.WindowsT.FormsT.Wizard.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)"/> never cancels closing of form (unless it is canceled by <see cref="M:System.Windows.Forms.Form.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)"/></summary>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.Form.FormClosing"/> event. It the event does not cancel form closing calls <see cref="M:Tools.WindowsT.FormsT.Wizard.DoCancel"/> (raises the <see cref="E:Tools.WindowsT.FormsT.Wizard.CancelWizard"/> event) where closing of form can be canceled, to.</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard.ForceCloseDialog">
 <summary>Closes wizard dialog without option to cancel the process and without noticing wizard control of current step.</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.StepEventArgs">
 <summary>Arguments of wizard events related to spets</summary>
 <version version="1.5.2" stage="Nightly">Class moved from experimental (namespace <see cref="N:Tools.Experimental.GUI"/>)</version>
</member>
<member name="M:Tools.WindowsT.FormsT.StepEventArgs.#ctor(System.Windows.Forms.Control)">
 <summary>CTor</summary>
 <param name="Control">Contro of the step</param>
</member>
<member name="F:Tools.WindowsT.FormsT.StepEventArgs.StepControl">
 <summary>Control of the step</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.IWizardControl">
 <summary>Provides basic interface for wizard steps of <see cref="P:Tools.WindowsT.FormsT.IWizardControl.Wizard"/>.</summary>
 <version version="1.5.2" stage="Nightly">Interface moved from experimental (namespace <see cref="N:Tools.Experimental.GUI"/>)</version>
</member>
<member name="P:Tools.WindowsT.FormsT.IWizardControl.Wizard">
 <summary>This property is being set by <see cref="P:Tools.WindowsT.FormsT.IWizardControl.Wizard"/> when control is added to <see cref="P:Tools.WindowsT.FormsT.IWizardControl.Wizard"/>.</summary>
 <returns>Owning wizard of this instance</returns>
 <value>Owning wizard initializes this property</value>
 <remarks>In setter of this property the wizard control should subscribe to wizard events.</remarks>
</member>
<member name="M:Tools.WindowsT.FormsT.IWizardControl.GetNext">
 <summary>Asks wizard control for control that follows after it.</summary>
 <remarks>Control returned by this function should implement <see cref="T:Tools.WindowsT.FormsT.IWizardControl"/>.</remarks>
</member>
<member name="T:Tools.WindowsT.FormsT.Wizard`1">
 <summary>Implements <see cref="T:Tools.WindowsT.FormsT.Wizard"/> with specific first-step control</summary>
 <typeparam name="T">Type of control of firts step</typeparam>
 <version version="1.5.2" stage="Nightly">Class moved from experimental (namespace <see cref="N:Tools.Experimental.GUI"/>)</version>
</member>
<member name="M:Tools.WindowsT.FormsT.Wizard`1.#ctor">
 <summary>CTor</summary>
</member>
<member name="T:Tools.WindowsT.IndependentT.IProgressMonitorUI">
 <summary>Represents progress monitor dialog with progress description, progress bar and cancel button</summary>
 <remarks>For details how background process can report it's state see <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker"/> property</remarks>
 <version version="1.5.3" stage="Nightly">This interface is new in version 1.5.3</version>
 <seelaso cref="T:Tools.WindowsT.FormsT.ProgressMonitor"/><seelaso cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitor"/>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker">
 <summary>Gets <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker"/> this form repports progress of</summary>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <remarks>
 Background worker can report status of background process in several ways. In most cases the <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> method is used.
 <list type="table"><listheader><term>UI change requested</term><description>Data to be passed</description></listheader>
 <item><term>Report percentage progress</term><description>Pass number from range 0÷100 to first parameter of <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/>. Or pass <see cref="T:System.Int32"/> from range 0÷100 to user state.</description></item>
 <item><term>Make progress monitor UI ignore reported percentage progress</term><description>Pass number lower than zero to first parameter of <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/>.</description></item>
 <item><term>Change style of progress bar</term><description>Pass value of type <see cref="T:Tools.WindowsT.IndependentT.ProgressBarStyle"/> to user data. <note>Some implementations of <see cref="T:Tools.WindowsT.IndependentT.IProgressMonitorUI"/> may also support values of type <see cref="T:System.Windows.Forms.ProgressBarStyle"/> or may support values which are not explicitly specified for either of these types.</note></description></item>
 <item><term>Show textual description of current status to user (set the <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.Information"/> property)</term><description>Pass <see cref="T:System.String"/> to user state.</description></item>
 <item><term>Allow or disallow process cancelllation (set the <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.CanCancel"/> property)</term><description>Pass <see cref="T:System.Boolean"/> to user state. <note>When passing <c>True</c>, <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"/> must be <c>True</c> as well.</note></description></item>
 <item><term>Call the <see cref="M:Tools.WindowsT.IndependentT.IProgressMonitorUI.Reset"/> method</term><see>Pass <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker"/> (same instance) to user data.</see></item>
 <item><term>Show message box or perform another operation which shall be performed in UI thread.</term><description>Use the <see cref="M:Tools.ThreadingT.IInvoke.Invoke(System.Delegate,System.Object[])"/> function - or better, use one of generic type-safe extension overloads provided by the <see cref="T:Tools.ThreadingT.IInvokeExtensions"/> module.</description></item>
 <item><term>Perform multiple actions</term><description>Pass <see cref="T:System.Array"/> to user state. Array items are evaluated according to rules stated above.</description></item>
 </list>
 Individual implementations of the <see cref="T:Tools.WindowsT.IndependentT.IProgressMonitorUI"/> interface may support additional types passed to <see cref="P:System.ComponentModel.ProgressChangedEventArgs.UserState"/> and shall ignore any types they does not support.
 See documentation of <see cref="T:Tools.WindowsT.IndependentT.IProgressMonitorUI"/> implementations such as <see cref="T:Tools.WindowsT.FormsT.ProgressMonitor"/> or <see cref="T:Tools.WindowsT.WPF.DialogsT.ProgressMonitor"/>.
 </remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.ProgressBarStyle">
 <summary>Gets or sets current style of progress bar</summary>
 <remarks>When value of this property is not one of values defined in the <see cref="T:Tools.WindowsT.IndependentT.ProgressBarStyle"/> enumeration, it means the prograss bar reports current status in an implementation-specific way. When property is set to unrecognized value, implementation may corce it to one of recognized values.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.Progress">
 <summary>Gets or sets current value of <see cref="T:System.Windows.Forms.ProgressBar"/> that reports progress</summary>
 <exception cref="T:System.ArgumentException">Value being set is smaller than 0 or greater than 100.</exception>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.WorkerResult">
 <summary>Gets or sets result of <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker"/> work</summary>
 <returns>Null until <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event occures. That returns its e parameter.</returns>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.Prompt">
 <summary>Gets or sets prompt diaplyed in upper part of form</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.Information">
 <summary>Gets or sets informative text displayed below the progress bar</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.CanCancel">
 <summary>Gets or sets value indicationg if dialog supports cancelation</summary>
 <value>Default value depends on <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker"/>.<see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">WorkerSupportsCancellation</see> in time when it is passed to CTor.</value>
</member>
<member name="M:Tools.WindowsT.IndependentT.IProgressMonitorUI.Reset">
 <summary>Resets the dialog</summary>
 <remarks>In case you want to use the dialog from multiple runs of <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker"/>, you should call this method before each (excluding first, but you can to) runs of <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker"/>. Alternativly you can report new run using <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)"/> - see <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker"/>.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.DoWorkOnShow">
 <summary>Gets or sets value indicationg if form will call <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.BackgroundWorker"/>.<see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">RunWorkerAsync</see> when window is shown.</summary>
 <seelaso cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.WorkerArgument"/>
 <value>Default value is true</value>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.WorkerArgument">
 <summary>Gets or sets value of argument passed to <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> when <see cref="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.DoWorkOnShow"/> is true</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.Title">
 <summary>Gets or sets dialog title</summary>
 <value>Title of window showing the progress. Default value is implementation dependent (e.g. localized word "Progress")</value>
 <returns>Current title of window showing progress</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.IProgressMonitorUI.ShowDialog(System.Object)">
 <summary>Shows window modally</summary>
 <param name="owner">Owner object of dialog. Each implementation should support at least objects of type <see cref="T:System.Windows.Forms.IWin32Window"/> (e.g. <see cref="T:System.Windows.Forms.Form"/>), <see cref="T:System.Windows.Interop.IWin32Window"/> and <see cref="T:System.Windows.Window"/>. When owner is not of recognized type (or is null, it's ignored.</param>
 <returns>True when dialog was closed normally, false if it was closed because of user has cancelled the operation</returns>
</member>
<member name="P:Tools.WindowsT.IndependentT.IProgressMonitorUI.OwnerObject">
 <summary>Gets an object that can be used as owner for modal windows</summary>
 <returns>Depending on implementation this method returns either <see cref="T:System.Windows.Forms.IWin32Window"/>, <see cref="T:System.Windows.Interop.IWin32Window"/> or <see cref="T:System.Windows.Window"/>. Null when owner object was not created yet or if it was already closed or destroyed.</returns>
</member>
<member name="T:Tools.WindowsT.IndependentT.ProgressBarStyle">
 <summary>Defines different progressbar styles</summary>
 <seelaso cref="T:System.Windows.Forms.ProgressBarStyle"/>
 <remarks>Any value different from <see cref="F:Tools.WindowsT.IndependentT.ProgressBarStyle.Indefinite"/> means that progressbar indicates actual progress. When value differes from <see cref="F:Tools.WindowsT.IndependentT.ProgressBarStyle.Definite"/> the style is implementation dependent.</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.ProgressBarStyle.Indefinite">
 <summary>Progressbar does not show actual progresss. It only indicates that something is going on.</summary>
 <seelaso cref="F:System.Windows.Forms.ProgressBarStyle.Marquee"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.ProgressBarStyle.Definite">
 <summary>Progressbar indicates actual progress in form of bar or otherwise</summary>
 <seelaso cref="F:System.Windows.Forms.ProgressBarStyle.Blocks"/>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor">
 <summary>Implements editor for <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/></summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.#ctor">
 <summary>Default CTor</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.#ctor(Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
 <summary>CTor with value</summary>
 <param name="Value">Initial value</param>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Value">
 <summary>Edited value</summary>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.ValueChanged">
 <summary>Raised ehan  value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Value"/> property changes</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor._Context">
 <summary>Contaisn value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Context"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Context">
 <summary>Stores context of current editing session</summary>
 <remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnBeforeShow"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnClosed"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnBeforeShow">
 <summary>Owner of control informs control that it is about to be shown by calling this methos. It is called just befiore the control is shown.</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnClosed">
 <summary>Informs control that it was just hidden by calling this method.</summary>
 <remarks>When implementing editor for reference type that is edited by changin its properties instead of changing its instance. Properties shouldbe changed in this method and onyl if <see cref="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Result"/> is true.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Result">
 <summary>Stores editing result</summary>
 <returns>True if editing was terminated with success, false if it was canceled</returns>
 <remarks>This property is set by owner of the control and is valid when and after <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnClosed"/> is called</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor._Service">
 <summary>Contaisn value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Service"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.Service">
 <summary>Stores <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> valid for current editing session</summary>
 <remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnBeforeShow"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBoxOptionsEditor.OnClosed"/>.</remarks>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox">
 <summary>Provides technology-independent managed base class for WinForms and WPF message boxes</summary>
 <remarks>
 This class implements <see cref="T:Tools.IReportsChange"/> and has plenty of events fo reporting changes of property values. Also types of some properties reports events when their properties are changed.
 The aim of such behavior is to provide dynamic message box which can be changed as it is displayd.
 However it is up to derived class which changes it will track and interpret as changes of dialog.
 <para>After message box is closed, it can be shown again (so called re-cycling; see <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/>).</para>
 <para>
 In order to prevent confusing multiple overloads, names of Modal_*, ModalF_*, ModelEx_* and Error_* functions are suffixed with abberivations of accepted parameters. The <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> method stays overloaded.
 Meaning of abberivations are following:
 <list type="table">
 <listheader><term>Abbr.</term><description>Meaning</description></listheader>
 <item><term>a</term><description>args - Formatting string arguments</description></item>
 <item><term>B</term><description>Buttons - Either <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> objects or or-ed values of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons"/></description></item>
 <item><term>E</term><description>Items - assorted items to be shown on message box such as buttons, checkboxes, comboboxes etc.</description></item>
 <item><term>H</term><description>ShowHandler - delegate to be called when message box is shown</description></item>
 <item><term>I</term><description>Icon - Either <see cref="T:System.Drawing.Icon"/>, <see cref="T:System.Drawing.Image"/> or <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> defining picture to be shown on message box</description></item>
 <item><term>M</term><description>Timer - Defines count-down time for self-closing message box</description></item>
 <item><term>O</term><description>Options - A <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/> value</description></item>
 <item><term>P</term><description>Prompt - Main text to be shown to user</description></item>
 <item><term>S</term><description>Sound - Sound to be played when message box is shown</description></item>
 <item><term>T</term><description>Title - Text of message box header (title bar)</description></item>
 <item><term>W</term><description>Owner - Owner of messagebox - the window to which the message box will be modal</description></item>
 <item><term>X</term><description>Exception - Exception message box will show information about</description></item>
 </list>
 </para>
 </remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2">Fixed: Some static functions throws exception when icon is not set or when default button is used (even implicitly)</version>
 <version version="1.5.3">All owner parameters changed form <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support more types of owners - <see cref="T:System.Windows.Forms.IWin32Window"/>, <see cref="T:System.Windows.Window"/> and <see cref="T:System.Windows.Interop.IWin32Window"/>. Changes are required in derived classes to support this change and those new owners.</version>
 <version version="1.5.3">WPF (<see cref="T:Tools.WindowsT.WPF.DialogsT.MessageBox"/>) and WinForms (<see cref="T:Tools.WindowsT.FormsT.MessageBox"/>) implementations changed to support any <see cref="T:System.Windows.DependencyObject"/> hosted in <see cref="T:System.Windows.Window"/> as owner.</version>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> caused that some functions rendered messagebox without buttons (or checkboxes/radios/combobox items).</version>
 <version version="1.5.3">The <c>Error_xxx</c> methods now show inner exception message as well and throw <see cref="T:System.ArgumentNullException"/> (instead of <see cref="T:System.NullReferenceException"/>) when exception is null.</version>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.TimerFormat">
 <summary>Recomended format for displaying timer.</summary>
 <remarks>This format is recognized by <see cref="T:Tools.TimeSpanFormattable"/>.</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._DefaultImplementation">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation">
 <summary>Gets or sets default implementation used for messageboxes shown by static <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> methods of this class</summary>
 <returns>Type currently used as default implementation of message box</returns>
 <value>Sets application-wide default implementation of message box</value>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <exception cref="T:System.ArgumentException">Value being set represents type that either does not derive from <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>, is abstract, is generic non-closed or hasn't parameter-less contructor.</exception>
 <remarks>Default implementation used is <see cref="T:Tools.WindowsT.FormsT.MessageBox"/> which uses WinForms technology.
 You can use this static poperty to change implementation of messagebox that is globaly used in your application. This property does not involve direct calls to derived classes, only calls of static methods on <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>.</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._Buttons">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._DefaultButton">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._CloseResponse">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._Prompt">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Prompt"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._Title">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Title"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._Icon">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Icon"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._Options">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._CheckBoxes">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._ComboBox">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._Radios">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._TopControl">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._MidControl">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._BottomControl">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._Timer">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Timer"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._TimeButton">
 <summary>Contaions value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._AllowClose">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.AllowClose"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._PlayOnShow">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.PlayOnShow"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.AllowClose">
 <summary>Gets or sets value indicating if dialog can be closed without clicking any of buttons</summary>
 <remarks>This does not affacet possibility to close message box programatically using the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Close"/> method.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.Buttons">
 <summary>Defines buttons displayed on message box</summary>
 <remarks>This collection reports event. You can use them to track changed of the collection either via events of the collection itself or via the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged"/> event.
 <para>Do not store nulls in the collection. It won't accept them and <see cref="T:System.OperationCanceledException"/> will be thrown.</para></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShouldSerializeButtons">
 <summary>gets value indicating if value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> property have been changed and sou it should be serialized</summary>
 <returns>Ture if <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> should be serialized, false if it has its default value</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ResetButtons">
 <summary>Resets the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> to its initial value</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton">
 <summary>Indicates 0-based index of button that has focus when message box is shown and that is default button for message box</summary>
 <remarks>Default button is treated as being clicked when user presses Enter. If value is set outside of range of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> (i.e. -1), message box has no default button.
 <para>If messagebox implementation supports changes of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> collection when displayed, this property is changed on buttom insert/removal and it points strill to the same physical button.</para>
 </remarks>
 <seealso cref="P:System.Windows.Forms.Form.AcceptButton"/>
 <seealso cref="P:System.Windows.Controls.Button.IsDefault"/>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse">
 <summary>Gets or sets value returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function when user closes the message box by closing window or by pressin escape</summary>
 <remarks>Values that are not members of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/> enumeration can be safely used.
 <para>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.AllowClose"/> is false this property ahs effect only when mapped to one of buttons (has same value as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of one buttons) and user presses escape.</para></remarks>
 <seealeo cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/><seealso cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShouldSerializeCloseResponse">
 <summary>gets value idicating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property should be serialuzed</summary>
 <returns>True when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> differs from <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse"/></returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ResetCloseResponse">
 <summary>Resets value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property to <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse"/></summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.UseDefaultCloseResponse">
 <summary>Gets value indicating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property has its default value</summary>
 <returns>True when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> equals to <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse"/>; false otherwise</returns>
 <value>Setting value of the property to true causes reseting value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> to its default value (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse"/>). Setting the property to false is ignored.</value>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.GetDefaultCloseResponse">
 <summary>Gets default value for the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property. The value depends on current content of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> collection.</summary>
 <returns>Default value for the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property</returns>
 <remarks>Following rules apply in given order:
 <list type="list">
 <item>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> is empty, returns <see cref="F:System.Windows.Forms.DialogResult.None"/></item>
 <item>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> has only one element, returns <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see> of that button</item>
 <item>If any button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see> <see cref="F:System.Windows.Forms.DialogResult.Cancel"/> exists returns <see cref="F:System.Windows.Forms.DialogResult.Cancel"/></item>
 <item>If any button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see> <see cref="F:System.Windows.Forms.DialogResult.No"/> exists returns <see cref="F:System.Windows.Forms.DialogResult.No"/></item>
 <item>If any button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see> <see cref="F:System.Windows.Forms.DialogResult.Abort"/> exists returns <see cref="F:System.Windows.Forms.DialogResult.Abort"/></item>
 <item>If any button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">Result</see> <see cref="F:System.Windows.Forms.DialogResult.Ignore"/> exists returns <see cref="F:System.Windows.Forms.DialogResult.Ignore"/></item>
 <item>In all other cases returns <see cref="F:System.Windows.Forms.DialogResult.None"/></item>
 </list>
 </remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.Prompt">
 <summary>Gets or sets text of prompt of message box.</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.Title">
 <summary>Gets or sets title text of message box</summary>
 <remarks>If value of thsi property is null or an empty string, application title is used (see <see cref="P:Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Title"/>)</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.Icon">
 <summary>Gets or sets icon image to display on the message box</summary>
 <remarks>Expected image size is 64×64px. Image is resized proportionaly to fit this size. This may be changed by derived class.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.Options">
 <summary>Gets or sets options of the message box</summary>
 <remarks>Text align applies only to prompt part of message box. In right-to-left reading text align has oposite meaning - <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft"/> aligns to right and <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignRight"/> aligns to left.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes">
 <summary>Check boxes displayed in messaqge box</summary>
 <remarks>This collection reports event. You can use them to track changes of the collection either via handling events of the collection or via the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.CheckBoxesChanged"/> event.
 <para>Do not store nulls in the collection. It won't accept them and <see cref="T:System.OperationCanceledException"/> will be thrown.</para></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShouldSerializeCheckBoxes">
 <summary>Gets value indicating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> property has changed and thus should be serialized</summary>
 <returns>True when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/>.<see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Count">Count</see> is non-zero</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ResetCheckBoxes">
 <summary>Resets value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> property to its default value (clears it)</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox">
 <summary>Gets or sets combo box (drop down list) displayed in message box</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.Radios">
 <summary>Radio buttons displayed on message box</summary>
 <remarks>This collection reports event. You can use them to track changes of the collection either via handling events of the collection or via the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> event.
 <para>Do not store nulls in the collection. It won't accept them and <see cref="T:System.OperationCanceledException"/> will be thrown.</para></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShouldSerializeRadios">
 <summary>Gets value idiciating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> property should be serialized</summary>
 <returns>True if count of items of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> is greater than zero</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ResetRadios">
 <summary>Resets value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> property to its default value (an empty list)</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.TopControl">
 <summary>Gets or sets additional control displayed at top of the message box (above message)</summary>
 <remarks>Implementation of message box (derived class) may accept only controls of specified type(s) like <see cref="T:System.Windows.Forms.Control"/> or <see cref="T:System.Windows.FrameworkElement"/> and ignore any other types.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MidControl">
 <summary>Gets or sets additional control displayed in the middle of the message box (above buttons)</summary>
 <remarks>Implementation of message box (derived class) may accept only controls of specified type(s) like <see cref="T:System.Windows.Forms.Control"/> or <see cref="T:System.Windows.FrameworkElement"/> and ignore any other types.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl">
 <summary>Gets or sets additional control displayed at bottom of the message box (below buttons)</summary>
 <remarks>Implementation of message box (derived class) may accept only controls of specified type(s) like <see cref="T:System.Windows.Forms.Control"/> or <see cref="T:System.Windows.FrameworkElement"/> and ignore any other types.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.Timer">
 <summary>Gets or sets value indicating for how long the message box will be displayed before it closes with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> as result.</summary>
 <remarks><see cref="F:System.TimeSpan.Zero"/> or less vaklue meand then no count-down takes effect</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton">
 <summary>Gets or sets value indicating 0-based index of button when count-down time is displayed</summary>
 <remarks>Following values has special meaning:
 <list type="table"><listheader><term>value</term><description>efect</description></listheader>
 <item><term>-1</term><description>Button is chosed automatically depending on <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property (if there are more buttons with same <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> first is used)</description></item>
 <item><term>&lt; -1</term><description>Count down time is displayed in message box title</description></item>
 <item><term>>= <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons">Buttons</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see></term><description>Count down is not displayed</description></item>
 </list>
 Count down is displayed as time in format h:mm:ss, m:ss or s depending on current value of time remaining (always the shortest possible format is used).</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.PlayOnShow">
 <summary>Gets or sets sound played when message box is shown</summary>
 <value>Sound played when message box is shown. Null if no sound shall be played.</value>
 <remarks>Current sound to be played when message box is show. Null if no sound is played.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.AddHandlers">
 <summary>Adds event handlers to collections</summary>
 <version version="1.5.2">Access changed from private to protected, made virtual</version>
 <remarks>In derived class override this method to attach cancelable handlers - later it is impossible. Do not forget to call base-class method. Note: This method is called by CTor.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.#ctor">
 <summary>Default CTor - creates messagebox with just one button <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OK"/></summary>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.AllowCloseChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.AllowClose"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnAllowCloseChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
 <summary>Raises tha <see cref="E:Tools.WindowsT.IndependentT.MessageBox.AllowCloseChanged"/> event. Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.Changed">
 <summary>Raised when value of member changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event information. For changes of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/>, <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> and <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> collections event argument of <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> is passed instead of argument of <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.Changed"/>.</param>
 <remarks><paramref name="e"/>Should contain additional information that can be used in event-handling code (e.g. use <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> class)</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Changed"/> event</summary>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.DefaultButtonChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnDefaultButtonChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Int32})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.DefaultButtonChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.CloseResponseChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnCloseResponseChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Windows.Forms.DialogResult})">
 <summary>Raises the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnCloseResponseChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Windows.Forms.DialogResult})"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.PromptChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Prompt"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnPromptChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.PromptChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.TitleChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Title"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnTitleChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TitleChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.IconChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Icon"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnIconChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Drawing.Image})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.IconChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.OptionsChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Options"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnOptionsChanged(Tools.IReportsChange.ValueChangedEventArgs{Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.OptionsChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.CheckBoxesChanged">
 <summary>Raised when content of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CheckBoxes"/> collection changes</summary>
 <param name="sender">Source of the event - always this instance of <see  cref="T:Tools.WindowsT.IndependentT.MessageBox"/></param>
 <param name="e">Event arguments. Argument e of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> is passed directly here.</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnCheckBoxesChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox},Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox}.ListChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.CheckBoxesChanged"/> event. Handles <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event. Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/>.</summary>
 <param name="sender">Source ot the event - <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/></param>
 <param name="e">Event arguments. Those arguemnts are directly passed to <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.ComboBoxChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/> property changes</summary>
 <remarks>This event tracks only changes of value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/> property itsels. It does not track changes of values of its inner properties.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnComboBoxChanged(Tools.IReportsChange.ValueChangedEventArgs{Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ComboBoxChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.TopControlChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TopControl"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnTopControlChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Object})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TopControlChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MidControlChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MidControl"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnMidControlChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Object})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MidControlChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.BottomControlChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.BottomControl"/> property changes</summary>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.ControlChangedEventHandler">
 <summary>Delegate for events <see cref="E:Tools.WindowsT.IndependentT.MessageBox.BottomControlChanged"/>, <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TopControlChanged"/> and <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MidControlChanged"/></summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnBottomControlChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Object})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.BottomControlChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.TimerChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Timer"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnTimerChanged(Tools.IReportsChange.ValueChangedEventArgs{System.TimeSpan})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TimerChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.TimeButtonChanged">
 <summary>Raised wghen value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton"/> property changes</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnTimeButtonChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Int32})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.TimeButtonChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged">
 <summary>Raised when content of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/> collection changes</summary>
 <param name="sender">Source of the event - always this instance of <see  cref="T:Tools.WindowsT.IndependentT.MessageBox"/></param>
 <param name="e">Event arguments. Argument e of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> is passed directly here.</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnRadiosChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton},Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton}.ListChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> event. Handles <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event. Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/>.</summary>
 <param name="sender">Source ot the event - <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Radios"/></param>
 <param name="e">Event arguments. Those arguemnts are directly passed to <see cref="E:Tools.WindowsT.IndependentT.MessageBox.RadiosChanged"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged">
 <summary>Raised when content of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> collection changes</summary>
 <param name="sender">Source of the event - always this instance of <see  cref="T:Tools.WindowsT.IndependentT.MessageBox"/></param>
 <param name="e">Event arguments. Argument e of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> is passed directly here.</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnButtonsChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton},Tools.CollectionsT.GenericT.ListWithEvents{Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton}.ListChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged"/> event. Handles <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons">Radios</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event. Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/>.</summary>
 <param name="sender">Source ot the event - <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/></param>
 <param name="e">Event arguments. Those arguemnts are directly passed to <see cref="E:Tools.WindowsT.IndependentT.MessageBox.ButtonsChanged"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnChanged(System.EventArgs)"/></param>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl">
 <summary>Common base for predefined message box controls</summary>
 <version version="1.5.2">Added implementation of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. No changes needed in derived classes when they call <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/> with <see cref="T:Tools.IReportsChange.ValueChangedEventArgsBase"/> or <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.</version>
 <version version="1.5.2">Added implementation of <see cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/></version>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl._Text">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl._ToolTip">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl._Enabled">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property</summary>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.TextChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
 <remarks>If derived control is editable, user can cause this event to be fired.</remarks>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTipChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.EnabledChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text">
 <summary>Gets or sets text displayed on control</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip">
 <summary>Gets or sets tool tip text for the button</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled">
 <summary>Gets or sets value indicating if button is enabled (accessible) or not</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnTextChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.TextChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnEnabledChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.EnabledChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnToolTipChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTipChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed">
 <summary>Raised when value of member changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event information</param>
 <remarks><paramref name="e"/>Additionla information - is <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> or <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed"/> event (and <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.PropertyChanged"/> when <paramref name="e"/> is <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>)</summary>
 <param name="e">Event parameters - should be <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> or <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1"/></param>
 <version version="1.5.2">Added raising of <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.PropertyChanged"/></version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.PropertyChanged"/> event</summary>
 <param name="e">Event arguments</param>
 <version version="1.5.2">Method added</version>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl._Control">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Control"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Control">
 <summary>Gets or sets physical control that currently implements this control</summary>
 <remarks>
 This property is intended to be used by GUI implementation to store instance of for example <see cref="T:System.Windows.Forms.Button"/> that currently represents the control.
 Its up to implementation how and if it will use this property. Caller should not rely on content of the property.
 </remarks>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.PropertyChanged">
 <summary>Occurs when a property value changes.</summary>
 <version version="1.5.2">Event introduced</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnBeingAddedToCollection(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)">
 <summary>Called before item is placed into collection</summary>
 <param name="Collection">Collection item is aboutto be placed into</param>
 <param name="index">Index item is being to be placed onto; null when collection does not support indexing.</param>
 <param name="Replace">True when item at index <paramref name="index"/> will be replaced by this instance; false if this instance will be inserted at <paramref name="index"/> and all subsequent items will be moved to nex index.</param>
 <exception cref="T:System.InvalidOperationException">This control was already added to collection owned by <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> and now attempt to add it to another such collection is done.</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnCollectionClearing(System.Collections.ICollection)">
 <summary>Called before all items are removed from collection by clearing it</summary>
 <param name="Collection">Collection item is about to be removed from</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnBeingRemovedFromCollection(System.Collections.ICollection,System.Nullable{System.Int32})">
 <summary>Called before item is removed from collection</summary>
 <param name="Collection">Collection item is about to be removed from</param>
 <param name="index">Index item is currently placed on; null when collection does not support indexing.</param>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl._Collections">
 <summary>Contains value of the <see cref="N:System.Collections"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.CollectionsThisControlIsIn">
 <summary>If supported by collection item gets all the collections item is in</summary>
 <returns>All the collections item is placed in; null when not supported by item class.</returns>
 <remarks><para>If item is placed multiple times in the same collection, this property contains this collection multiple times.</para></remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.__Collection">
 <summary>Collection which's owner owns this control</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Collection">
 <summary>Gets collection which's owner owns this control</summary>
 <returns>Collection which's <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Owner"/> owns this control</returns>
 <version version="1.5.2">Property added</version>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox">
 <summary>Gets messagebox this control is owned by</summary>
 <returns><see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> this control is owned by; or null</returns>
 <version version="1.5.2">Property added</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnAddedToCollection(System.Collections.ICollection,System.Nullable{System.Int32})">
 <summary>Called after item is added to collection</summary>
 <param name="Collection">Collection item was added into</param>
 <param name="index">Index at which the item was added. Note: Index may change later without notice (i.e. when collection gets sorted). Ic collection does not support indexing value is null.</param>
 <version version="1.5.2">Method added</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnRemovedFromCollection(System.Collections.ICollection)">
 <summary>Called after item is removed from collection (or after collection was cleared)</summary>
 <param name="Collection">Collection item was removed from</param>
 <version version="1.5.2">Method added</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnOwnerChanged(Tools.IReportsChange.ValueChangedEventArgs{Tools.WindowsT.IndependentT.MessageBox})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
 <version version="1.5.2">Method added</version>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/> property changes</summary>
 <version version="1.5.2">Event added</version>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton">
 <summary>Represents button for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
 <completionlist cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton._Result">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton._Button">
 <summary>Contains value of the <see cref="T:System.Windows.Forms.Button"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton._AccessKey">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton._HasChanged">
 <summary>Contains value of the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed"/> property</summary>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreview">
 <summary>Raised when button is clicked, before action associated with the button is taken. This event can be canceled.</summary>
 <param name="e">Event arguments. Can be used to cancel the event. <paramref name="e"/>.<see cref="P:System.ComponentModel.CancelEventArgs.Cancel">Cancel</see> false means tha message box will be closed; false means the message box will remain open.</param>
 <param name="sender">Instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> that have raised the event</param>
 <remarks>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult"/> <paramref name="e"/>.<see cref="P:System.ComponentModel.CancelEventArgs.Cancel">Cancel</see> is pre-set to true. That means that if it is not set to false, message box is not closed when help button is clicked.</remarks>
 <version version="1.5.2">Fixed: Using <see cref="T:Tools.WindowsT.FormsT.MessageBox"/> dialog closes even when event is cancelled.</version>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ResultChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKeyChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result">
 <summary>Gets or sets result produced by this button</summary>
 <remarks>In case you need to define your own buttons you can use this property and set it to value thet is not member of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/> enumeration.
 <para>Special result value <see cref="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult"/> defines help button. The <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> class does not pefrom any help-providing actions for that button, only, by default, thius button does not cause the messagebox to be closed.</para>
 </remarks>
 <seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Help"/>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey">
 <summary>Gets or sets access key (access character for the button)</summary>
 <value>Should be one of letters contained in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>, otherwise it is not guaranted that accesskey will work.</value>
 <remarks>
 As <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> is underlaying-technology independent, mnemonics for accesskeys (such as &amp; in WinForms and _ in WPF) should not be used. You should rather use this property.
 When you do not want to use accesskey for your button, set his property to 0 (null char, <see cref="F:Microsoft.VisualBasic.Constants.vbNullChar"/>).
 </remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OnAccessKeyChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Char})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKeyChanged"/> event</summary>
 <param name="e">Event arguments</param>
 <version version="1.5.2">Method added</version>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.HasChanged">
 <summary>Gets value indicating if any property of this instance have been changed since its construction</summary>
 <remarks>Changing this property does not cause the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed"/> event to be raised</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.IsConstructing">
 <summary>Ture indicates that this instance is currently being constructed</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor">
 <summary>CTor - creates new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/> class</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String)">
 <summary>CTor from button text</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Char)">
 <summary>CTor from button text and access key</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.String)">
 <summary>CTor from text and tool tip text</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.String,System.Char)">
 <summary>CTor from text, tool tip text and access key</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
 <param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Windows.Forms.DialogResult)">
 <summary>CTor from text and dialog result</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Windows.Forms.DialogResult,System.Char)">
 <summary>CTor from text, dialog result and access key</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
 <param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.String,System.Windows.Forms.DialogResult)">
 <summary>CTor from text, tool tip text and dialog result</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
 <param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.Windows.Forms.DialogResult)">
 <summary>CTor from <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/></summary>
 <param name="Result">Result of this button. Also determines text.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Result"/> is not member of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/></exception>
 <exception cref="T:System.ArgumentException"><paramref name="Result"/> is <see cref="F:System.Windows.Forms.DialogResult.None"/></exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.Windows.MessageBoxResult)">
 <summary>CTor from <see cref="T:System.Windows.MessageBoxResult"/></summary>
 <param name="Result">Result of this button. Also determines text.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Result"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/></exception>
 <exception cref="T:System.ArgumentException"><paramref name="Result"/> is <see cref="F:System.Windows.MessageBoxResult.None"/></exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(Microsoft.VisualBasic.MsgBoxResult)">
 <summary>CTor from <see cref="T:Microsoft.VisualBasic.MsgBoxResult"/></summary>
 <param name="Result">Result of this button. Also determines text.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Result"/> is not member of <see cref="T:Microsoft.VisualBasic.MsgBoxResult"/></exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton)">
 <summary>Cloning CTor</summary>
 <param name="Other">Instance to initialize new instance with</param>
 <remarks>Does not copy event handler, uses properties only.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Other"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.InitBy(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton)">
 <summary>Initializes current instance by another instance</summary>
 <param name="Button">Instance to initialize current instance with</param>
 <remarks>Does not initializes button events</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Button"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.String,System.Windows.Forms.DialogResult,System.Char)">
 <summary>CTor from text, tool tip text, dialog result and access key</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
 <param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
 <param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Boolean)">
 <summary>CTor from text and enabled value</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="Enabled">Initial value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,System.Windows.Forms.DialogResult,System.Boolean,System.String)">
 <summary>CTor from text, dialog result, tool tip text and enabled value</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="Enabled">Initial value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property</param>
 <param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
 <param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.#ctor(System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreviewEventHandler,System.String,System.Windows.Forms.DialogResult,System.Boolean,System.Char)">
 <summary>CTor from text, click event handler and optionally tool tip text, dialog result, access key and enabled value</summary>
 <param name="Text">Button's text (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>)</param>
 <param name="ClickPreview">Delegate handler for <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreview"/> event</param>
 <param name="ToolTip">Tool tip (help) text for button (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.ToolTip"/>)</param>
 <param name="Result">Result returned by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function when the button is clicked (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>)</param>
 <param name="Enabled">Initial value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Enabled"/> property</param>
 <param name="AccessKey">Character used as button shortcut (see <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.AccessKey"/>)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OnClick">
 <summary>Called by owner window when appropriate button is clicked. Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreview"/> event</summary>
 <returns>True if action associated with button can be performed. False when event was canceled</returns>
 <remarks>This function should be called only by class derived from <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> which owns the button.</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OK">
 <summary>Default OK button</summary>
 <returns>On each call retirns another (newly created instance) of button</returns>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Cancel">
 <summary>Default Cancel button</summary>
 <returns>On each call retirns another (newly created instance) of button</returns>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Yes">
 <summary>Default Yes button</summary>
 <returns>On each call retirns another (newly created instance) of button</returns>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.No">
 <summary>Defaut No button</summary>
 <returns>On each call retirns another (newly created instance) of button</returns>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Abort">
 <summary>Default Abort button</summary>
 <returns>On each call retirns another (newly created instance) of button</returns>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Retry">
 <summary>Default Retry button</summary>
 <returns>On each call retirns another (newly created instance) of button</returns>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Ignore">
 <summary>Default Ignore button</summary>
 <returns>On each call retirns another (newly created instance) of button</returns>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Help">
 <summary>Default Help button</summary>
 <returns>On each call retirns another (newly created instance) of button</returns>
 <remarks>
 <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of this button is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult"/>.
 The only difference between treating button with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> set to <see cref="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult"/> and other buttons is that by default dialog is not closed when help button is clicked.
 <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> does not take any help-providing action. See the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.ClickPreview"/> event in order to see how is controlled if dialog closes when button is clicked or not.
 </remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.GetButtons(System.Windows.Forms.MessageBoxButtons)">
 <summary>Gets buttons specified by WinForms enumeration value</summary>
 <param name="Buttons">Buttons to get</param>
 <returns>Array of buttons as specified in <paramref name="Buttons"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/></exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.GetButtons(System.Windows.MessageBoxButton)">
 <summary>Gets buttons specified by WPF enumeration value</summary>
 <param name="Buttons">Buttons to get</param>
 <returns>Array of buttons as specified in <paramref name="Buttons"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Buttons"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/></exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.GetButtons(Microsoft.VisualBasic.MsgBoxStyle)">
 <summary>Gets buttons specified by Visual Basic enumeration value</summary>
 <param name="Buttons">Buttons to get</param>
 <returns>Array of buttons as specified in <paramref name="Buttons"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Bitwise and of <paramref name="Buttons"/> and 7 is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> enumeration (values 0÷5)</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.GetButtons(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
 <summary>Gets buttons by bit aray</summary>
 <param name="Buttons">Bit mask of buttons to get</param>
 <returns>Array of buttons according to bit array <paramref name="Buttons"/></returns>
 <remarks>Order of buttons is Yes - No - OK - Abort - Retry - Ignore - Cancel - Help</remarks>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons">
 <summary>Bit aray for predefined buttons</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.OK">
 <summary>OK button</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Cancel">
 <summary>Cancel button</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Yes">
 <summary>Yes button</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.No">
 <summary>No button</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Abort">
 <summary>Abort button</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Retry">
 <summary>Retry button</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Ignore">
 <summary>Ignore button</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons.Help">
 <summary>Help button</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.IsDefault">
 <summary>Gets value indication if this button is default of message box</summary>
 <returns>True if this button is default; false if it is not</returns>
 <remarks>This poperty returns correct value only when button is stored in <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> with <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Owner"/> set to <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>. Then its change is reported via <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
 <para>Individual <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> implementation may, or may not utilize this property. It can ignore defualt button at all or determine it from <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton"/>.</para></remarks>
 <seelaso cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton"/>
 <version version="1.5.2">Property added</version>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.IsCancel">
 <summary>Gets value indicating if this button should be considered cancel button</summary>
 <returns>True if this button should be treated as cancel button; false it should not.</returns>
 <remarks>This poperty returns correct value only when button is stored in <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> with <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Owner"/> set to <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>. Then its cange is reported via <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
 <para>Individual <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> implementation may, or may not utilize this property. It can ignore defualt button at all or determine it from <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/>.</para></remarks>
 <seelaso cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/>
 <version version="1.5.2">Property added</version>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.IsTime">
 <summary>Gets value indicating if this button is timer button</summary>
 <returns>True if this button is selected fro timer; false otherwise</returns>
 <remarks>This property returns correct value only when button is stored in <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> with <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Owner"/> set to <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>. Then its change is reported via <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
 <para>Individual <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> implementation may, or may not utilize this property. It can ignore timer button at all or determine it from <see cref="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton"/>.</para></remarks>
 <seelaso cref="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton"/>
 <version version="1.5.2">Property added</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OnOwnerChanged(Tools.IReportsChange.ValueChangedEventArgs{Tools.WindowsT.IndependentT.MessageBox})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event arguments</param>
 <version version="1.5.2">Method added</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OwnerMessageBox_DefaultButtonChanged(Tools.WindowsT.IndependentT.MessageBox,System.EventArgs)">
 <summary>Handles change of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton">DefaultButton</see></summary>
 <param name="sender"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/></param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OwnerMessageBox_CloseResponseChanged(Tools.WindowsT.IndependentT.MessageBox,System.EventArgs)">
 <summary>Handles change of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultButton">DefaultButton</see></summary>
 <param name="sender"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/></param>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OwnerMessageBox_TimeButtonChanged(Tools.WindowsT.IndependentT.MessageBox,System.EventArgs)">
 <summary>Handles change of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.TimeButton">TimeButton</see></summary>
 <param name="sender"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/></param>
 <param name="e">Event arguments</param>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.TextIncludingAccessKey">
 <summary>Gets text of button with platform-specific accesskey indication</summary>
 <returns>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/> is not set returns <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>; if it is set uses <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetTextWithAccessKey(System.String,System.Char)"/>.</returns>
 <remarks>Change of this property is notified via <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</remarks>
 <version version="1.5.2">Property added</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.OwnerMessageBox_CountDown(Tools.WindowsT.IndependentT.MessageBox,System.EventArgs)">
 <summary>Handles the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/>.<see cref="E:Tools.WindowsT.IndependentT.MessageBox.CountDown">CountDown</see> event</summary>
 <param name="sender"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/></param>
 <param name="e">Event arguments</param>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.TextIncludingTimer">
 <summary>Gets text of button with with possible time text</summary>
 <returns>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/> is not set or countdown timer is not enabled or this button is not time button returns <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>; otherwise returns <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> appedned by <see cref="F:Tools.WindowsT.IndependentT.MessageBox.TimerFormat"/>-formatted <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.CurrentTimer">CurrentTimer</see> enclosed in braces (()).</returns>
 <remarks>Change of this property is notified via <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>. In order this to work correctly button must be stored in <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> with <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Owner"/> set to <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>.</remarks>
 <version version="1.5.2">Property added</version>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.TextIncludingAccessKeyAndTimer">
 <summary>Gets text of button with possible time text and platform-specific accesskey indication</summary>
 <returns>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/> is not set return <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/>; if this button is not time button or owning messagebox is not counting douw, returns <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.TextIncludingAccessKey"/>; otherwise returns <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.TextIncludingAccessKey"/>  appedned by <see cref="F:Tools.WindowsT.IndependentT.MessageBox.TimerFormat"/>-formatted <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OwnerMessageBox"/>.<see cref="P:Tools.WindowsT.IndependentT.MessageBox.CurrentTimer">CurrentTimer</see> enclosed in braces (()).</returns>
 <remarks>Change of this property is notofied via <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>. In order this to work correctly button must be stored in <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> with <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Owner"/> set to <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>.</remarks>
 <version version="1.5.2">Property added</version>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.HelpDialogResult">
 <summary>Value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> property for predefined <see cref="T:System.Windows.Forms.Help">Help</see> button</summary>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox">
 <summary>Represents check box control for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox._ThreeState">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeState"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox._State">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State"/> property</summary>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeStateChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeState"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.StateChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
 <remarks><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State"/> can be changed by user or programatically</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeState">
 <summary>Gets or sets value indicating if user can change state of checkbox between 3 or 2 states</summary>
 <remarks>2-state CheckBox allows user to change state only to <see cref="F:System.Windows.Forms.CheckState.Checked"/> or <see cref="F:System.Windows.Forms.CheckState.Unchecked"/></remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State">
 <summary>Gets or sets current state of check box</summary>
 <remarks>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeState"/> is false user cannot set checkbox to <see cref="F:System.Windows.Forms.CheckState.Indeterminate"/>, however you can achieve it programatically</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.#ctor">
 <summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> class</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.#ctor(System.String)">
 <summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> class with text</summary>
 <param name="Text">Initial text of the control (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> property)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.#ctor(System.String,System.Windows.Forms.CheckState)">
 <summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/> class with text and check state</summary>
 <param name="Text">Initial text of the control (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> property)</param>
 <param name="State">Initial state of the control (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.State"/> property)</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.OnStateChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Windows.Forms.CheckState})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.StateChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.OnThreeStateChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox.ThreeStateChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox">
 <summary>Represents combo box (drop down list) control for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
 <remarks>This class inherits implementation of <see cref="T:Tools.IReportsChange"/> from <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl"/>. The <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Changed"/> event when raised for change of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> collection, reports event arguments of <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">Items</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event (instead of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.Changed">Changed</see>).</remarks>
 <seealco cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnItemsChanged(Tools.CollectionsT.GenericT.ListWithEvents{System.Object},Tools.CollectionsT.GenericT.ListWithEvents{System.Object}.ListChangedEventArgs)"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._Editable">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Editable"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._Items">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._DisplayMember">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMember"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._SelectedItem">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox._SelectedIndex">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Editable">
 <summary>gets or sets value indicating if user can type any text to combo box</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">
 <summary>Itels in drop down of combo box</summary>
 <remarks>Register handlers with events of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> returned by this property or use <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ItemsChanged"/> event in order to track changes of the collection.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ShouldSerializeItems">
 <summary>Gets value indicating if the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> property should be serialized</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ResetItems">
 <summary>Resets the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> property to its decault value - removes all items.</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMember">
 <summary>Indicates member (property or field) used to obtain text displayed in drop down for each item.</summary>
 <seealso cref="P:System.Windows.Forms.ListControl.DisplayMember"/>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem">
 <summary>Gets or sets value indicating currently selected item</summary>
 <seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex"/>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex">
 <summary>Indicates 0-based index of item diaplyed in combo box</summary>
 <seealso cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem"/>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.EditableChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Editable"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnEditableChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.EditableChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMemberChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMember"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnDisplayMemberChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMemberChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItemChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
 <remarks><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItem"/> can be changed by user or programatically</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnSelectedItemChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Object})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedItemChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndexChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex"/> property changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Information about old and new value</param>
 <remarks><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndex"/> can be changed by user or programatically</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnSelectedIndexChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Int32})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.SelectedIndexChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ItemsChanged">
 <summary>Raised when something happens to the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> collection (when it raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> event).</summary>
 <param name="sender">Source of event (this instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/>)</param>
 <param name="e">Event arguments (originally passesd by <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">Items</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see></param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnItemsChanged(Tools.CollectionsT.GenericT.ListWithEvents{System.Object},Tools.CollectionsT.GenericT.ListWithEvents{System.Object}.ListChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ItemsChanged"/> event. Handles <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items">Items</see>.<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">CollectionChanged</see> event.</summary>
 <param name="sender"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.Items"/> (event source)</param>
 <param name="e">Event arguments</param>
 <remarks>This method (after the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.ItemsChanged"/> event is raised) also calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/> with <paramref name="e"/> as argument.</remarks>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.TextChanged">
 <summary>Raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.Text"/> is changed</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event arguments</param>
 <remarks>This event shadows <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.TextChanged"/> event only in order to change it's <see cref="T:System.ComponentModel.BrowsableAttribute"/> and <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.OnTextChanged(Tools.IReportsChange.ValueChangedEventArgs{System.String})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.TextChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/> base class method</summary>
 <param name="e">Event argumernts</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.#ctor">
 <summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/> class</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.#ctor(System.String,System.Object[])">
 <summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/> class with combo box items and display member</summary>
 <param name="DisplayMember">Initial value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.DisplayMember"/> property - name of member used to display items</param>
 <param name="Items">Initial items in combo box</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox.#ctor(System.Object[])">
 <summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxComboBox"/> class with items</summary>
 <param name="Items">Initial items in combo box</param>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton">
 <summary>Represents radio button (one from many check box) for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton._Checked">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.Checked"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.Checked">
 <summary>Gets or sets value indicating if control is checked or not</summary>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.CheckedChanged">
 <summary>raised when value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.Checked"/> property changes</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event arguments containing infomation about new and old value</param>
 <remarks>The <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.Checked"/> property can be changed programatically or by user</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.OnCheckedChanged(Tools.IReportsChange.ValueChangedEventArgs{System.Boolean})">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.CheckedChanged"/> event, calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxControl.OnChanged(System.EventArgs)"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.#ctor">
 <summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> class</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.#ctor(System.String)">
 <summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> class with text</summary>
 <param name="Text">Text of control</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton.#ctor(System.String,System.Boolean)">
 <summary>CTor - initializes new instance of the <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> class with text and check state</summary>
 <param name="Text">Text of control</param>
 <param name="Checked">Initial check state</param>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions">
 <summary>Options for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
 <remarks>Values of this enumeration can be combined as long as they fall to different groups. There are three groups of values -
 Align (<see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignCenter"/>,<see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignJustify"/>, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft"/>, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignRight"/>),
 Text flow (<see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Ltr"/>, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Rtl"/>) and
 Focus (<see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.BringToFront"/>).</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft">
 <summary>Text is aligned left (default). In rtl reading aligns text to right.</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignRight">
 <summary>Text is aligned right. In rtl reading aligns text to left.</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignCenter">
 <summary>Text is aligned center</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignJustify">
 <summary>Text is aligned to block. If target technology does not support <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignJustify"/> treats it as <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignLeft"/>.</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.AlignMask">
 <summary>Bitwise mask for AND-ing text alignment</summary>
 <remarks>This is actually not walue of enumeration.</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Ltr">
 <summary>Left-to-right reading (default)</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.Rtl">
 <summary>Right-to-left reading</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions.BringToFront">
 <summary>Force shows message box to the user even if application is not currently active</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptionsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from type <see cref="T:System.String"/> to type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/></param>
 <returns>Value of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/> initialized by <paramref name="value"/></returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptionsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
 <summary>Performs conversion from type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions"/> to type <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <see cref="T:System.String"/></returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowDialog">
 <summary>Shows modal dialog (and waits until the dialog is closed)</summary>
 <returns>Dialog result (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of clicked button)</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowDialog(System.Object)">
 <summary>Show modal dialog (and waits until the dialog is closed)</summary>
 <param name="Owner">Parent window of dialog (may be null) Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Dialog result (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of clicked button)</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.DisplayBox">
 <summary>Displays the dialog non-modally (execution continues immediatelly)</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.DisplayBox(System.Object)">
 <summary>Displays the dialog non-modally (execution continues immediatelly)</summary>
 <param name="Owner">Parent window of dialog (may be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.PerformDialog(System.Boolean,System.Object)">
 <summary>If overriden in derived class shows the dialog</summary>
 <param name="Modal">Indicates if dialog should be shown modally (true) or modells (false)</param>
 <param name="Owner">Parent window of dialog (may be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>. If implementation does not recognize type of owner it shall treat it as null.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/>. Overriding method shall check this condition and thrown an exception if condition is vialoted.</exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>. This requires changes in all derived classes!</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.PrePerformDialog(System.Boolean,System.Object)">
 <summary>Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> if necessary, then calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.PerformDialog(System.Boolean,System.Object)"/></summary>
 <param name="Modal">Indicates if dialog should be shown modally (true) or modells (false)</param>
 <param name="Owner">Parent window of dialog (may be null) Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/></exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Close">
 <summary>Closes message box with <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/></summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Close(System.Windows.Forms.DialogResult)">
 <summary>If overriden in derived class closes the message box with given response</summary>
 <param name="Response">Response returned by the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnClosed(System.EventArgs)">
 <summary>raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Closed"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Derived class should call this method when dialog is closed</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnShown">
 <summary>Called when dialog is shown. Performs some initialization (timer). Calls <see cref="M:Tools.WindowsT.IndependentT.MessageBox.PlaySound"/>. Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event.</summary>
 <remarks>Derived class should call this method after dialog is shown.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.PlaySound">
 <summary>If <see cref="P:Tools.WindowsT.IndependentT.MessageBox.PlayOnShow"/> is not null, plays it</summary>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.States">
 <summary>Possible state of the message box class instance</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.States.Created">
 <summary>Instance have been created, but message box have not been shown yet. You can modify message box properties.</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown">
 <summary>Message bos was shown to user and waits for user action. Only some properties can be modificated with effect.</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed">
 <summary>Message box was closed</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._State">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.State">
 <summary>Gets or sets value indicating current state of the message box</summary>
 <remarks>Value of this property is set by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnShown"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.OnClosed(System.EventArgs)"/> methods</remarks>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult">
 <summary>Gets result of dialog (<see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of button user has clicked on)</summary>
 <returns><see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/> of button user have clicked to or <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CloseResponse"/> when message box was closed by pressing escape, closing the window or timer.</returns>
 <value>Should be set by derived class when dialog is closed</value>
 <remarks>Value of this property is valid only when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/></remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._DialogResult">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DialogResult"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.ClickedButton">
 <summary>Gets button user have clicked on</summary>
 <returns>Button user have clicked on (or null if dialog was closed by window close button, pressing escape or timer)</returns>
 <remarks>Value of this property is valid only when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/></remarks>
 <value>Should be set by derived class when dialog is closed</value>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._ClickedButton">
 <summary>Contaisn value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ClickedButton"/> property</summary>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._ClosedByTimer">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ClosedByTimer"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.ClosedByTimer">
 <summary>Gets value indicationg if the message box was closed automatically after the time specified in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Timer"/> elapsed</summary>
 <returns>True if the message box was closed due to time elapsed, false otherwise</returns>
 <version version="1.5.2">Fixed: Value of this property is incorrect in handle of the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Closed"/> event</version>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.IsCountDown">
 <summary>Gets value indicationg if counting down is curently in progress</summary>
 <remarks>In order to cahnge value of this prioperty use <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ResumeCountDown"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.StopCountDown"/> methods</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._CountDownTimer">
 <summary>Timer that performs count downs</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnCountDown(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.CountDown"/> event</summary>
 <param name="e">Event argument</param>
 <remarks>Derived class should override this method in order to catch change of count down remaining time and call base class method.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnCountDownStopped">
 <summary>Called when count-down is stopped by calling <see cref="M:Tools.WindowsT.IndependentT.MessageBox.StopCountDown"/></summary>
 <remarks>Derived class should override this method in order to catch count-down stoped event and react somehow (hide count down text).<para>This implementation does nothing.</para></remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._CurrentTimer">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.CurrentTimer"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.CurrentTimer">
 <summary>Gets or sets current remaining time of count-down timer</summary>
 <remarks>If value id <see cref="F:System.TimeSpan.Zero"/> or less, count down ends and dialog is about to be closed</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.StopCountDown">
 <summary>Stops count-down timer ticking</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ResumeCountDown">
 <summary>Resumes previously stopped count down timer</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ResumeCountDown(System.TimeSpan)">
 <summary>Resumes previouskly stopped count down timer with new timer value</summary>
 <param name="TimeLeft">Count down timer time (after which the message box is closed)</param>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.CountDown">
 <summary>Raised when count-down timer ticks</summary>
 <remarks>Count down timer ticks each second once. First the event is raised immediatelly after the dialog is shown or count-down is resumed</remarks>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.Shown">
 <summary>Raised after dialog is shown</summary>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.Closed">
 <summary>Raised after dialog is closed</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Recycle">
 <summary>Switches <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> from <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/> to <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/> <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/></summary>
 <remarks>This method cannot be overriden. Override <see cref="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal"/> instead which is called only when necessary.
 <para>Calling this method has no effect when <see  cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/> and causes <see cref="T:System.InvalidOperationException"/> when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/>.</para>
 <para><see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> and <see cref="M:Tools.WindowsT.IndependentT.MessageBox.DisplayTemplate(Tools.WindowsT.IndependentT.MessageBox,System.Object,System.String,System.String)"/> instance methods call <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> if necessary.</para>
 <para>When re-cycling message boxex, you should keep in mind that youre can change state of it (check boxes, radio buttons, combo boxes, custom controls)</para></remarks>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Shown"/> or <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.States"/></exception>
</member>
<member name="E:Tools.WindowsT.IndependentT.MessageBox.Recycled">
 <summary>Raised when instance recycling process is completed</summary>
 <seealso cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.OnRecycled(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Recycled"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Called by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> after call of <see cref="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal">
 <summary>Performs all operations needed to switch <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> form <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/> to <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/></summary>
 <remarks>Called by <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/>.
 <para>Note to inheritors: Always call base-class method <see cref="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal"/>.</para></remarks>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/>. This exception never occures in this implementation because <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Recycle"/> ensures that <see cref="M:Tools.WindowsT.IndependentT.MessageBox.RecycleInternal"/> is caled only when <see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Closed"/>.</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault">
 <summary>Gets instance of default implementation of message box</summary>
 <returns>Instance of type which specified by the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> property</returns>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> is not <see cref="T:System.RuntimeType"/></exception>
 <exception cref="T:System.NotSupportedException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" /> .-or- Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to call default constructor of type which is specified in <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/>.</exception>
 <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or member was invoked with a late-binding mechanism.</exception>
 <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through Overload:<see cref="M:System.Type.GetTypeFromProgID(System.String)" /> or Overload:<see cref="M:System.Type.GetTypeFromCLSID(System.Guid)" />.</exception>
 <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
 <exception cref="T:System.Runtime.InteropServices.COMException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
 <exception cref="T:System.TypeLoadException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> is not a valid type.</exception>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.FakeBox">
 <summary>Does not implement <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/>. Used for initializing messageboxes using <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>.</summary>
 <remarks>This class cannot be used as message box directly. But you can create instance of it and use it as template for another message boxes.</remarks>
 <seelaso cref="M:Tools.WindowsT.IndependentT.MessageBox.ShowTemplate(Tools.WindowsT.IndependentT.MessageBox,System.Object,System.String,System.String)"/>
 <seelaso cref="M:Tools.WindowsT.IndependentT.MessageBox.DisplayTemplate(Tools.WindowsT.IndependentT.MessageBox,System.Object,System.String,System.String)"/>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.FakeBox.GetTextWithAccessKey(System.String,System.Char)">
 <summary>Gets text which contains Accesskey marker (like &amp; in WinForms or _ in WPF)</summary>
 <param name="Text">Text (if it contains character used as accesskey markers they must be escaped)</param>
 <param name="AccessKey">Char representing accesskey (if char is not in <paramref name="Text"/> no accesskey marker should be inserted)</param>
 <returns><paramref name="Text"/></returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.FakeBox.Close(System.Windows.Forms.DialogResult)">
 <summary>If overriden in derived class closes the message box with given response</summary>
 <param name="Response">Response returned by the <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)"/> function</param>
 <exception cref="T:System.NotImplementedException">Always</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.FakeBox.PerformDialog(System.Boolean,System.Object)">
 <summary>If overriden in derived class shows the dialog</summary>
 <param name="Modal">Indicates if dialog should be shown modally (true) or modells (false)</param>
 <param name="Owner">Parent window of dialog (may be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.WindowsT.IndependentT.MessageBox.State"/> is not <see cref="F:Tools.WindowsT.IndependentT.MessageBox.States.Created"/>. Overriding method shall check this condition and thrown an exception if condition is vialoted.</exception>
 <exception cref="T:System.NotImplementedException">Always</exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.FakeBox.#ctor">
 <summary>Default CTor</summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.FakeBox.#ctor(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
 <summary>CTor from buttons specified as OR-ed mask of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons"/> values</summary>
 <param name="Buttons">OR-ed values from <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons"/></param>
 <seelaso cref="M:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.GetButtons(Microsoft.VisualBasic.MsgBoxStyle)"/>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.InitializeDafault(Tools.WindowsT.IndependentT.MessageBox)">
 <summary>Initializes instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> obtained via <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/> using <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/></summary>
 <param name="Other">Instance properties of which will be used to initialize returned instance</param>
 <returns>Initialized instance of default implementation</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)">
 <summary>Initializes current instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> with setting of another <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
 <param name="Other"><see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> to initialize this instance with</param>
 <remarks>Do not use this method for vloning message boxes. This method is mainly intended for internal use. The <paramref name="Other"/> <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> should be only used for initializing this instance and should be never shown.
 This is because values of properties are simply copied form <paramref name="Other"/> to this instance ant thus both instances then shares same buttons and other controls which can cause instability when both instances are shown.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Other"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowTemplate(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Object,System.String,System.String)">
 <summary>Shows given modal message box initialized with given instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
 <param name="Instance">Instance to be show</param>
 <param name="InitializeFrom">Instance to initialize <paramref name="Instance"/> with</param>
 <param name="Owner">Owner window (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Prompt">If not null sets dfferent prompt then <paramref name="InitializeFrom"/></param>
 <param name="Title">Is not null sets diffetent title then <paramref name="InitializeFrom"/></param>
 <returns>Message box result</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Instance"/> or <paramref name="InitializeFrom"/> is null</exception>
 <remarks>For same reason as <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>, do not use <paramref name="InitializeFrom"/> to clonning live message boxes</remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.DisplayTemplate(Tools.WindowsT.IndependentT.MessageBox,Tools.WindowsT.IndependentT.MessageBox,System.Object,System.String,System.String)">
 <summary>Display given message box initialized with given instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> modeless</summary>
 <param name="Instance">Instance to be show</param>
 <param name="InitializeFrom">Instance to initialize <paramref name="Instance"/> with</param>
 <param name="Owner">Owner window (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Instance"/> or <paramref name="InitializeFrom"/> is null</exception>
 <remarks>For same reason as <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>, do not use <paramref name="InitializeFrom"/> to clonning live message boxes</remarks>
 <param name="Prompt">If not null sets dfferent prompt then <paramref name="InitializeFrom"/></param>
 <param name="Title">Is not null sets diffetent title then <paramref name="InitializeFrom"/></param>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowTemplate(Tools.WindowsT.IndependentT.MessageBox,System.Object,System.String,System.String)">
 <summary>Shows default (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/>) modal message box initialized with given instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
 <param name="InitializeFrom">Instance to initialize default message box with</param>
 <param name="Owner">Owner window (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Message box result</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="InitializeFrom"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Ther was an error obtainin default implementation instance via <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
 <remarks>For same reason as <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>, do not use <paramref name="InitializeFrom"/> to clonning live message boxes</remarks>
 <param name="Prompt">If not null sets dfferent prompt then <paramref name="InitializeFrom"/></param>
 <param name="Title">Is not null sets diffetent title then <paramref name="InitializeFrom"/></param>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.DisplayTemplate(Tools.WindowsT.IndependentT.MessageBox,System.Object,System.String,System.String)">
 <summary>Display default (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/>) message box initialized with given instance of <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> modeless</summary>
 <param name="InitializeFrom">Instance to initialize default message box with</param>
 <param name="Owner">Owner window (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="InitializeFrom"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Ther was an error obtainin default implementation instance via <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetDefault"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
 <remarks>For same reason as <see cref="M:Tools.WindowsT.IndependentT.MessageBox.InitializeFrom(Tools.WindowsT.IndependentT.MessageBox)"/>, do not use <paramref name="InitializeFrom"/> to clonning live message boxes</remarks>
 <param name="Prompt">If not null sets dfferent prompt then <paramref name="InitializeFrom"/></param>
 <param name="Title">Is not null sets diffetent title then <paramref name="InitializeFrom"/></param>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.GetIcon(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Default function used for converting enumeration values to icons for message box</summary>
 <param name="code">Code of icon to be obtained</param>
 <returns>Appropriate icon to code or null if no icon is associated with code</returns>
 <remarks>You can change which function <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> globaly uses for obtaining icons by setting the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/> static property</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.Forms.MessageBoxIcon)">
 <summary>Converts <see cref="T:System.Windows.Forms.MessageBoxIcon"/> to <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value</summary>
 <param name="code">A <see cref="T:System.Windows.Forms.MessageBoxIcon"/></param>
 <returns>Appropriate <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value. If <paramref name="code"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> returns <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.None"/></returns>
 <remarks>Several <see cref="T:System.Windows.Forms.MessageBoxIcon"/> values are converted to the same <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value because they have same numerical values and it is not possible to distinguish between them. You'd better using <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> directly</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(Microsoft.VisualBasic.MsgBoxStyle)">
 <summary>Converts <see cref="T:Microsoft.VisualBasic.MsgBoxStyle"/> to <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value</summary>
 <param name="code">A <see cref="T:Microsoft.VisualBasic.MsgBoxStyle"/></param>
 <returns>Appropriate <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value. If <paramref name="code"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> returns <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.None"/></returns>
 <remarks>Only bits masked with 0x70 mask are considered for conversion</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(System.Windows.MessageBoxImage)">
 <summary>Converts <see cref="T:System.Windows.MessageBoxImage"/> to <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value</summary>
 <param name="code">A <see cref="T:System.Windows.MessageBoxImage"/></param>
 <returns>Appropriate <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value. If <paramref name="code"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> returns <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.None"/></returns>
 <remarks>Several <see cref="T:System.Windows.MessageBoxImage"/> values are converted to the same <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> value because they have same numerical values and it is not possible to distinguish between them. You'd better using <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> directly</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox._GetIconDelegate">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate">
 <summary>Gets or sets delegate which is used for converting enumeration values to icons for message box</summary>
 <value>New delegate to be shared by all messageboxes for converting enumeration members to icons</value>
 <returns>Current delegate that converts enumeration values to icons for message box</returns>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <remarks>Default value is <see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetIcon(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)"/> function</remarks>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons">
 <summary>Enumeration of built-in icons for <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/></summary>
 <remarks>The <see cref="T:Tools.WindowsT.IndependentT.MessageBox"/> API allows you to pass any <see cref="T:System.Drawing.Image"/> as your own icon</remarks>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Asterisk">
 <summary>By default represented by a yellow bulb</summary>
 <seealso cref="F:System.Windows.Forms.MessageBoxIcon.Asterisk"/>
 <seealso cref="P:Tools.ResourcesT.Icons.Asterisk"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Error">
 <summary>By default represented by white X in red circle</summary>
 <seealso cref="F:System.Windows.Forms.MessageBoxIcon.Error"/>
 <seealso cref="P:Tools.ResourcesT.Icons.ErrorIcon"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Exclamation">
 <summary>By default represented by black exclamation mark (!) in yellow triangle</summary>
 <seealso cref="F:System.Windows.Forms.MessageBoxIcon.Exclamation"/>
 <seealso cref="P:Tools.ResourcesT.Icons.Exclamation"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Hand">
 <summary>By default represented by white hand in red circle</summary>
 <seealso cref="F:System.Windows.Forms.MessageBoxIcon.Hand"/>
 <seealso cref="P:Tools.ResourcesT.Icons.Hand"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Information">
 <summary>By default represented by white lowercase i in blue circle</summary>
 <seealso cref="F:System.Windows.Forms.MessageBoxIcon.Information"/>
 <seealso cref="P:Tools.ResourcesT.Icons.Information"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Question">
 <summary>By default represented by white question mark (?) in blue circle</summary>
 <seealso cref="F:System.Windows.Forms.MessageBoxIcon.Question"/>
 <seealso cref="P:Tools.ResourcesT.Icons.Question"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Stop">
 <summary>By default represented by default represented by no-entry (one way) traffic sign</summary>
 <seealso cref="F:System.Windows.Forms.MessageBoxIcon.Stop"/>
 <seealso cref="P:Tools.ResourcesT.Icons.StopIcon"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Warning">
 <summary>By default represented by black exclamation mark (!) in yellow circle</summary>
 <seealso cref="F:System.Windows.Forms.MessageBoxIcon.Warning"/>
 <seealso cref="P:Tools.ResourcesT.Icons.Warning"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.OK">
 <summary>By default represented by white check mark (✔) in green circle</summary>
 <seealso cref="P:Tools.ResourcesT.Icons.OK"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityError">
 <summary>By default represented by white X in red shield</summary>
 <seealso cref="P:Tools.ResourcesT.Icons.SecurityError"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityInformation">
 <summary>By default represented by shield with for fields - red, green, blue and yellow</summary>
 <seealso cref="P:Tools.ResourcesT.Icons.SecurityInformation"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityWarning">
 <summary>By default represented by black exclamation mark (!) in yellow shield</summary>
 <seealso cref="P:Tools.ResourcesT.Icons.SecurityWarning"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityOK">
 <summary>By default represented by white check mark (✔) in green shield</summary>
 <seealso cref="P:Tools.ResourcesT.Icons.SecurityOK"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.SecurityQuestion">
 <summary>By default represented by black quastion mark (?) in yellow shield</summary>
 <seealso cref="P:Tools.ResourcesT.Icons.SecurityQuestion"/>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.None">
 <summary>Represents no icon</summary>
 <seealso cref="F:System.Windows.Forms.MessageBoxIcon.None"/>
</member>
<member name="T:Tools.WindowsT.IndependentT.MessageBox.WPFWindow">
 <summary>The simpliest possible implementation of <see cref="T:System.Windows.Forms.IWin32Window"/></summary>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.WPFWindow.#ctor(System.IntPtr)">
 <summary>CTor</summary>
 <param name="handle">Handle new instance will point to</param>
</member>
<member name="F:Tools.WindowsT.IndependentT.MessageBox.WPFWindow._handle">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.IndependentT.MessageBox.WPFWindow.Handle"/> property</summary>
</member>
<member name="P:Tools.WindowsT.IndependentT.MessageBox.WPFWindow.Handle">
 <summary>Gets the handle to the window represented by the implementer.</summary>
 <returns>A handle to the window represented by the implementer.</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.IsValidMessageBoxButton(System.Windows.MessageBoxButton)">
 <summary>Gets value indicating if given value is valid <see cref="T:System.Windows.MessageBoxButton"/></summary>
 <param name="value">Value to test</param>
 <returns>Ture if <paramref name="value"/> is valid <see cref="T:System.Windows.MessageBoxButton"/></returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.IsValidMessageBoxImage(System.Windows.MessageBoxImage)">
 <summary>Gets value indicating if given value is valid <see cref="T:System.Windows.MessageBoxImage"/></summary>
 <param name="value">Value to test</param>
 <returns>Ture if <paramref name="value"/> is valid <see cref="T:System.Windows.MessageBoxImage"/></returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.IsValidMessageBoxOptions(System.Windows.MessageBoxOptions)">
 <summary>Gets value indicating if given value is valid <see cref="T:System.Windows.MessageBoxOptions"/></summary>
 <param name="value">Value to test</param>
 <returns>Ture if <paramref name="value"/> is valid <see cref="T:System.Windows.MessageBoxOptions"/></returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.IsValidMessageBoxResult(System.Windows.MessageBoxResult)">
 <summary>Gets value indicating if given value is valid <see cref="T:System.Windows.MessageBoxResult"/></summary>
 <param name="value">Value to test</param>
 <returns>Ture if <paramref name="value"/> is valid <see cref="T:System.Windows.MessageBoxResult"/></returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowWPF(System.String)">
 <summary>Displays a message box that has a message and that returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <remarks>This function is provided for compatibility with <see cref="T:System.Windows.MessageBox"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowWPF(System.String,System.String)">
 <summary>Displays a message box that has a message and title bar caption; and that returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <remarks>This function is provided for compatibility with <see cref="T:System.Windows.MessageBox"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String)">
 <summary>Displays a message box in front of the specified window. The message box displays a message and returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function but provides </remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
 <summary>Displays a message box that has a message, title bar caption, and button; and that returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function but provides </remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String)">
 <summary>Displays a message box in front of the specified window. The message box displays a message and title bar caption; and it returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function but provides </remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
 <summary>Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(Microsoft.VisualBasic.MsgBoxStyle)"/> for explanation.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display. Values <see cref="F:System.Windows.MessageBoxImage.Asterisk"/>, <see cref="F:System.Windows.MessageBoxImage.Hand"/>, <see cref="F:System.Windows.MessageBoxImage.Exclamation"/> and <see cref="F:System.Windows.MessageBoxImage.Question"/> are assciated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton)">
 <summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, and button; and it also returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
 <summary>Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(Microsoft.VisualBasic.MsgBoxStyle)"/> for explanation.</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult)">
 <summary>Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display. Values <see cref="F:System.Windows.MessageBoxImage.Asterisk"/>, <see cref="F:System.Windows.MessageBoxImage.Hand"/>, <see cref="F:System.Windows.MessageBoxImage.Exclamation"/> and <see cref="F:System.Windows.MessageBoxImage.Question"/> are assciated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
 <summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display.</param>
 <remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(Microsoft.VisualBasic.MsgBoxStyle)"/> for explanation.</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display. Values <see cref="F:System.Windows.MessageBoxImage.Asterisk"/>, <see cref="F:System.Windows.MessageBoxImage.Hand"/>, <see cref="F:System.Windows.MessageBoxImage.Exclamation"/> and <see cref="F:System.Windows.MessageBoxImage.Question"/> are assciated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
 <summary>Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result, complies with the specified options, and returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <param name="options">A <see cref="T:System.Windows.MessageBoxOptions" /> value object that specifies the options.</param>
 <remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(Microsoft.VisualBasic.MsgBoxStyle)"/> for explanation.</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
 <summary>Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result, complies with the specified options, and returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display. Values <see cref="F:System.Windows.MessageBoxImage.Asterisk"/>, <see cref="F:System.Windows.MessageBoxImage.Hand"/>, <see cref="F:System.Windows.MessageBoxImage.Exclamation"/> and <see cref="F:System.Windows.MessageBoxImage.Question"/> are assciated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <param name="options">A <see cref="T:System.Windows.MessageBoxOptions" /> value object that specifies the options.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
 <summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(Microsoft.VisualBasic.MsgBoxStyle)"/> for explanation.</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult)">
 <summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display. Values <see cref="F:System.Windows.MessageBoxImage.Asterisk"/>, <see cref="F:System.Windows.MessageBoxImage.Hand"/>, <see cref="F:System.Windows.MessageBoxImage.Exclamation"/> and <see cref="F:System.Windows.MessageBoxImage.Question"/> are assciated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
 <summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result, complies with the specified options, and returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <param name="options">A <see cref="T:System.Windows.MessageBoxOptions" /> value object that specifies the options.</param>
 <remarks>This function is provided mainly for compatibility with <see cref="T:System.Windows.MessageBox"/>. You'd bete use overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>. See <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ConvertIconConstant(Microsoft.VisualBasic.MsgBoxStyle)"/> for explanation.</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
 <summary>Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result, complies with the specified options, and returns a result.</summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display. Values <see cref="F:System.Windows.MessageBoxImage.Asterisk"/>, <see cref="F:System.Windows.MessageBoxImage.Hand"/>, <see cref="F:System.Windows.MessageBoxImage.Exclamation"/> and <see cref="F:System.Windows.MessageBoxImage.Question"/> are assciated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <param name="options">A <see cref="T:System.Windows.MessageBoxOptions" /> value object that specifies the options.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.MessageBox.Show(System.String)"/> function but provides the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowCore(System.IntPtr,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
 <summary>Performs WPF-like message box with <see cref="T:System.Windows.MessageBoxImage"/></summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display. Values <see cref="F:System.Windows.MessageBoxImage.Asterisk"/>, <see cref="F:System.Windows.MessageBoxImage.Hand"/>, <see cref="F:System.Windows.MessageBoxImage.Exclamation"/> and <see cref="F:System.Windows.MessageBoxImage.Question"/> are assciated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <param name="options">A <see cref="T:System.Windows.MessageBoxOptions" /> value object that specifies the options.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value
 =or = <paramref name="icon"/> is not member of <see cref="T:System.Windows.MessageBoxImage"/></exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowCore(System.IntPtr,System.String,System.String,System.Windows.MessageBoxButton,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
 <summary>Performs WPF-like message box with <see cref="T:System.Windows.Forms.MessageBoxIcon"/></summary>
 <returns>A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies which message box button is clicked by the user.</returns>
 <param name="owner">A <see cref="T:System.Windows.Window" /> that represents the owner window of the message box.</param>
 <param name="messageBoxText">A <see cref="T:System.String" /> that specifies the text to display.</param>
 <param name="caption">A <see cref="T:System.String" /> that specifies the title bar caption to display.</param>
 <param name="button">A <see cref="T:System.Windows.MessageBoxButton" /> value that specifies which button or buttons to display.</param>
 <param name="icon">A <see cref="T:System.Windows.MessageBoxImage" /> value that specifies the icon to display. Values <see cref="F:System.Windows.MessageBoxImage.Asterisk"/>, <see cref="F:System.Windows.MessageBoxImage.Hand"/>, <see cref="F:System.Windows.MessageBoxImage.Exclamation"/> and <see cref="F:System.Windows.MessageBoxImage.Question"/> are assciated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="defaultResult">A <see cref="T:System.Windows.MessageBoxResult" /> value that specifies the default result of the message box.</param>
 <param name="options">A <see cref="T:System.Windows.MessageBoxOptions" /> value object that specifies the options.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="button"/> is not member of <see cref="T:System.Windows.MessageBoxButton"/>
 =or= <paramref name="defaultResult"/> is not member of <see cref="T:System.Windows.MessageBoxResult"/>
 =or= <paramref name="options"/> is not valid <see cref="T:System.Windows.MessageBoxOptions"/> value</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String)">
 <summary>Displays a message box with specified text.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String)">
 <summary>Displays a message box with specified text and caption.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="caption">The text to display in the title bar of the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String)">
 <summary>Displays a message box in front of the specified object and with the specified text.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="Text">The text to display in the message box. </param>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function</remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
 <summary>Displays a message box with specified text, caption, and buttons.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="caption">The text to display in the title bar of the message box. </param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String,System.String)">
 <summary>Displays a message box in front of the specified object and with the specified text and caption.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="caption">The text to display in the title bar of the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function</remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
 <summary>Displays a message box with specified text, caption, buttons, and icon.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. Values <see cref="F:System.Windows.Forms.MessageBoxIcon.Asterisk"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Exclamation"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Hand"/> and <see cref="F:System.Windows.Forms.MessageBoxIcon.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="caption">The text to display in the title bar of the message box. </param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays a message box with specified text, caption, buttons, and icon.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. Values <see cref="F:System.Windows.Forms.MessageBoxIcon.Asterisk"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Exclamation"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Hand"/> and <see cref="F:System.Windows.Forms.MessageBoxIcon.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="caption">The text to display in the title bar of the message box. </param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
 <summary>Displays a message box in front of the specified object and with the specified text, caption, and buttons.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="Caption">The text to display in the title bar of the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function</remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
 <summary>Displays a message box with the specified text, caption, buttons, icon, and default button.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
 <param name="caption">The text to display in the title bar of the message box. </param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton)">
 <summary>Displays a message box with the specified text, caption, buttons, icon, and default button.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. Values <see cref="F:System.Windows.Forms.MessageBoxIcon.Asterisk"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Exclamation"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Hand"/> and <see cref="F:System.Windows.Forms.MessageBoxIcon.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="caption">The text to display in the title bar of the message box. </param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
 <summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, and icon.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="Text">The text to display in the message box. </param>
 <param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="Caption">The text to display in the title bar of the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, and icon.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="Text">The text to display in the message box. </param>
 <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. Values <see cref="F:System.Windows.Forms.MessageBoxIcon.Asterisk"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Exclamation"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Hand"/> and <see cref="F:System.Windows.Forms.MessageBoxIcon.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="Caption">The text to display in the title bar of the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
 <summary>Displays a message box with the specified text, caption, buttons, icon, default button, and options.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
 <param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
 <param name="caption">The text to display in the title bar of the message box. </param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
 <summary>Displays a message box with the specified text, caption, buttons, icon, default button, and options.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. Values <see cref="F:System.Windows.Forms.MessageBoxIcon.Asterisk"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Exclamation"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Hand"/> and <see cref="F:System.Windows.Forms.MessageBoxIcon.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
 <param name="caption">The text to display in the title bar of the message box. </param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
 <summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, and default button.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="Caption">The text to display in the title bar of the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton)">
 <summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, and default button.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. Values <see cref="F:System.Windows.Forms.MessageBoxIcon.Asterisk"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Exclamation"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Hand"/> and <see cref="F:System.Windows.Forms.MessageBoxIcon.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box. </param>
 <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="Caption">The text to display in the title bar of the message box. </param>
 <param name="text">The text to display in the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
 <summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, default button, and options.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="Text">The text to display in the message box. </param>
 <param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
 <param name="Options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box. </param>
 <param name="Caption">The text to display in the title bar of the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This overload is provided mainly for compatibility with <see cref="T:System.Windows.Forms.MessageBox"/>. You'd better use
 <see cref="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">overload which's <paramref name="icon"/> parameter is <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></see>.</remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Show(System.Object,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
 <summary>Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, default button, and options.</summary>
 <returns>One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.</returns>
 <param name="Text">The text to display in the message box. </param>
 <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. Values <see cref="F:System.Windows.Forms.MessageBoxIcon.Asterisk"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Exclamation"/>, <see cref="F:System.Windows.Forms.MessageBoxIcon.Hand"/> and <see cref="F:System.Windows.Forms.MessageBoxIcon.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="Options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box. </param>
 <param name="Caption">The text to display in the title bar of the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimics the <see cref="M:System.Windows.Forms.MessageBox.Show(System.String)"/> function, but the <paramref name="icon"/> parameter as <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowCore(System.Object,System.String,System.String,System.Windows.Forms.MessageBoxButtons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
 <summary>Performs modal dialog for WinForms-like functions with <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons"/></summary>
 <param name="Text">The text to display in the message box. </param>
 <param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
 <param name="Options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box. </param>
 <param name="Caption">The text to display in the title bar of the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ShowCore(System.Object,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
 <summary>Performs modal dialog for WinForms-like functions with <see cref="T:System.Windows.Forms.MessageBoxIcon"/></summary>
 <param name="Text">The text to display in the message box. </param>
 <param name="Icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box. </param>
 <param name="Options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
 <param name="Owner">Window that will own the modal dialog box. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box. </param>
 <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box. </param>
 <param name="Caption">The text to display in the title bar of the message box. </param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="buttons"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxButtons"/> =or=
 <paramref name="icon"/> is not member of <see cref="T:System.Windows.Forms.MessageBoxIcon"/> =or=
 <paramref name="defaultButton"/> is not membember of <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"/>
 </exception>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error worink working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/></exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object,System.Object)">
 <summary>Displays a message in a dialog box, waits for the user to click a button, and then returns an integer indicating which button the user clicked.</summary>
 <param name="Prompt">Required. String expression displayed as the message in the dialog box.</param>
 <param name="Buttons">Optional. Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If you omit Buttons, the default value is zero. Values <see cref="F:Microsoft.VisualBasic.MsgBoxStyle.Critical"/>, <see cref="F:Microsoft.VisualBasic.MsgBoxStyle.Exclamation"/> and <see cref="F:Microsoft.VisualBasic.MsgBoxStyle.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="Title">Optional. String expression displayed in the title bar of the dialog box. If you omit Title, the application name is placed in the title bar.</param>
 <returns>The result of message box indicatin pressed button.</returns>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimisc behaviour of the <see cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)"/> function</remarks>
 <param name="Owner">Owner window (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <version version="1.5.3" stage="Beta">Added parameter <paramref name="owner"/> because using <see cref="M:Tools.WindowsT.IndependentT.MessageBox.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object,System.Object)"/> without owner caused bad behavior in WPF applications.</version>
 <version version="1.5.4">Fix: <see cref="T:System.NullReferenceException"/> thrown if <paramref name="Title"/> or <paramref name="Prompt"/> is null.</version>
 <version version="1.5.4">Parameters renamed: <c>Prompt</c> to <c>prompt</c>, <c>Buttons</c> to <c>buttons</c>, <c>Title</c> to <c>title</c></version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MsgBoxF(System.String,Microsoft.VisualBasic.MsgBoxStyle,System.String,System.Object[])">
 <summary>Displays a formatted message in a dialog box, waits for the user to click a button, and then returns an integer indicating which button the user clicked.</summary>
 <param name="Prompt">Required. String expression displayed as the message in the dialog box.</param>
 <param name="Buttons">Optional. Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If you omit Buttons, the default value is zero. Values <see cref="F:Microsoft.VisualBasic.MsgBoxStyle.Critical"/>, <see cref="F:Microsoft.VisualBasic.MsgBoxStyle.Exclamation"/> and <see cref="F:Microsoft.VisualBasic.MsgBoxStyle.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="Title">Optional. String expression displayed in the title bar of the dialog box. If you omit Title, the application name is placed in the title bar.</param>
 <returns>The result of message box indicatin pressed button.</returns>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimisc and extends behaviour of the <see cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)"/> function</remarks>
 <param name="args">Formatting arguments passed to <see cref="T:System.String"/> along with <paramref name="prompt"/> to form message</param>
 <version version="1.5.3" stage="Beta">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.MsgBoxFW(System.String,Microsoft.VisualBasic.MsgBoxStyle,System.String,System.Object,System.Object[])">
 <summary>Displays a formatted message in a dialog box modal to given object, waits for the user to click a button, and then returns an integer indicating which button the user clicked.</summary>
 <param name="Prompt">Required. String expression displayed as the message in the dialog box.</param>
 <param name="Buttons">Optional. Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If you omit Buttons, the default value is zero. Values <see cref="F:Microsoft.VisualBasic.MsgBoxStyle.Critical"/>, <see cref="F:Microsoft.VisualBasic.MsgBoxStyle.Exclamation"/> and <see cref="F:Microsoft.VisualBasic.MsgBoxStyle.Question"/> are associated with appropriate <see cref="T:System.Media.SystemSounds"/>.</param>
 <param name="Title">Optional. String expression displayed in the title bar of the dialog box. If you omit Title, the application name is placed in the title bar.</param>
 <returns>The result of message box indicatin pressed button.</returns>
 <exception cref="T:System.Reflection.TargetInvocationException">There was an error working working with customized static properties such as <see cref="P:Tools.WindowsT.IndependentT.MessageBox.DefaultImplementation"/> or message box implementation failed.</exception>
 <remarks>This function mimisc and extends behaviour of the <see cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)"/> function</remarks>
 <param name="Owner">Owner window (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="args">Formatting arguments passed to <see cref="T:System.String"/> along with <paramref name="prompt"/> to form message</param>
 <version version="1.5.3" stage="Beta">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_P(System.String)">
 <summary>Displays modal message box with given prompt</summary>
 <param name="Prompt">Prompt to be shown</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PT(System.String,System.String)">
 <summary>Displays modal message box with given prompt and title</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_Pa(System.String,System.Object[])">
 <summary>Displays modal message box with formated prompt</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTa(System.String,System.String,System.Object[])">
 <summary>Displays modal message box with formated prompt and given title</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <param name="Title">Message box title</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTB(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
 <summary>Displays modal message box with given promt, title and buttons</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PB(System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
 <summary>Displays modal message box with given prompt and buttons</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTBa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Object[])">
 <summary>Displays modal message box with formate prompt, given title an buttons</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTI(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays modal message box with given prompt, title and icon</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTBI(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays modal message with given prompt, title, buttons and icon</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTIa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title and icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <param name="Title">Message box title</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/>. Some icons are associated with sound (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetAssociatedSound(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)"/>).</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTBIa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object[])">
 <summary>Displays modal message with formated prompt, given title, buttons and icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/> Some icons are associated with sound (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetAssociatedSound(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)"/>).</param>
 <returns>Indicates button clicked by user</returns>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTOBIS(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,Tools.MediaT.Sound)">
 <summary>Displays modal message box with given prompt, tile and options. Optinally also buttons and icon.</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Sound">Sound to be played when message box is shown. If null, it is chosen automatically.</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.GetAssociatedSound(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Gets sound associated with given icon</summary>
 <param name="Icon">Icon to get sound for</param>
 <returns>An instance of <see cref="T:Tools.MediaT.SystemSoundPlayer"/> if there is sound associated with <paramref name="Icon"/>; null otherwise</returns>
 <remarks>Current associatins are:
 <list type="table"><listheader><term>Icon</term><description>Sound</description></listheader>
 <item><see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Asterisk"/><description><see cref="P:System.Media.SystemSounds.Asterisk"/></description></item>
 <item><term><see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Error"/>, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Hand"/>, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Stop"/></term><description><see cref="P:System.Media.SystemSounds.Hand"/></description></item>
 <item><term><see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Question"/></term><description><see cref="P:System.Media.SystemSounds.Question"/></description></item>
 <item><term><see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Exclamation"/>, <see cref="F:Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons.Warning"/></term><see cref="P:System.Media.SystemSounds.Exclamation"/></item>
 </list>
 </remarks>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTOa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title and options </summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTOBa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title, options and buttons</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTOIa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title, options and predefined icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/> Some icons are associated with sound (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetAssociatedSound(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)"/>).</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTOBIa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title, options, buttons and predefined icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/>. Some icons are associated with sound (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetAssociatedSound(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)"/>).</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTBI(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image)">
 <summary>Displays modal message with given prompt, title, buttons and custom icon</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTIa(System.String,System.String,System.Drawing.Image,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title and custom icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <param name="Title">Message box title</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTBIa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,System.Object[])">
 <summary>Displays modal message with formated prompt, given title, buttons and custom  icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <returns>Indicates button clicked by user</returns>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTOIBS(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.MediaT.Sound)">
 <summary>Displays modal message box with given prompt, tile and options and custom icon. Optinally also buttons.</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Sound">Sound to be played when message box is shown</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTOIa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Drawing.Image,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title, options and custom icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTOISa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Drawing.Image,Tools.MediaT.Sound,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title, options and custom icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"></paramref> can be null. Some icons are associated with sound (<see cref="M:Tools.WindowsT.IndependentT.MessageBox.GetAssociatedSound(Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)"/>).</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"></paramref> using the <see cref="T:System.String"></see> function.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTOBIa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title, options, buttons and custom icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTOBISa(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,Tools.MediaT.Sound,System.Object[])">
 <summary>Displays modal message box with formated prompt, given title, options, buttons and custom icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <param name="Sound">Sound to be played when message box is shown</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTI(System.String,System.String,System.Drawing.Image)">
 <summary>Displays modal message box with given prompt, title and custom icon</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTIW(System.String,System.String,System.Drawing.Image,System.Object)">
 <summary>Displays modal messagebox with given prompt, title and custom icon. Message box is modal to given owner.</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Indicates button clicked by user</returns>
 <version version="1.5.3" stage="Beta">This function is new in 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTIW(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object)">
 <summary>Displays modal messagebox with given prompt, title and icon. Message box is modal to given owner.</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Indicates button clicked by user</returns>
 <version version="1.5.3" stage="Beta">This function is new in 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTIB(System.String,System.String,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
 <summary>Displays modal message box with given prompt, title, custom icon and custom buttons</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTOIB(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
 <summary>Displays modal message box with given prompt, title, options, custom icon and custom buttons</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <returns>Indicates button clicked by user</returns>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTWBIO(System.String,System.String,System.Object,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
 <summary>Display modal message box with given prompt, title and owner. Optionally specifies buttons, icon and options</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <returns>Indicates button clicked by user</returns>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <version version="1.5.3" stage="Beta">Fixed: This function always returns <see cref="F:System.Windows.Forms.DialogResult.None"/></version>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTWBIa(System.String,System.String,System.Object,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,System.Object[])">
 <summary>Display modal message box with formated promt, given title, owner, buttons, icon</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <returns>Indicates button clicked by user</returns>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTWBIa(System.String,System.String,System.Object,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,System.Object[])">
 <summary>Display modal message box with formated promt, given title, owner, buttons, one of predefined icons</summary>
 <param name="prompt">Format string for promt to be shown to user</param>
 <param name="title">Message box title</param>
 <param name="owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="buttons">Defines which buttons will be available to user</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <param name="icon">Icon that will be shown on messagebox.</param>
 <returns>Indicates button clicked by user</returns>
 <version version="1.5.3" stage="Beta">This overload is new in bersion 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalF_PTWa(System.String,System.String,System.Object,System.Object[])">
 <summary>Dsiplays modal message box with formated prompt, given title and owner</summary>
 <param name="Prompt">Format string for promt to be shown to user</param>
 <param name="Title">Message box title</param>
 <param name="arguments">Formating arguments for prompt. Arguments are placed in place of placeholders in <paramref name="Prompt"/> using the <see cref="T:System.String"/> function.</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Indicates button clicked by user</returns>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3" stage="Beta">Fix: This function always returns <see cref="F:System.Windows.Forms.DialogResult.None"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTMBIOW(System.String,System.String,System.TimeSpan,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object)">
 <summary>Displays autoclosing modal message box</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Timer">Time after which the message box will close automatically</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Indicates button clicked by user</returns>
 <version version="1.5.3" stage="Beta">Fixed: This function always returns <see cref="F:System.Windows.Forms.DialogResult.None"/></version>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Modal_PTMBIOW(System.String,System.String,System.Int32,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object)">
 <summary>Displays autoclosing modal message box</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Timer">Time (in seconds) after which the message box will close automatically</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Indicates button clicked by user</returns>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)">
 <summary>Displays modal messagebox with given prompt, title, items and optionally icon, options, owner, timer, show handler and sound</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Timer">Time (in seconds) after which the message box will close automatically</param>
 <param name="ShownHandler">Delegate that will handle the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event of message box</param>
 <param name="Sound">Sound to be played whne message box is shown.</param>
 <returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3" stage="Beta">Fixed: Values in <paramref name="Items"/> are not processed. This bug affected may methods depending on this one.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTIOWMHE(System.String,System.String,System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},System.Object[])">
 <summary>Displays modal messagebox with given prompt, title, items, icon, options, owner, timer and show handler</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Options">Options that controls messagebox layout and behaviour</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Timer">Time (in seconds) after which the message box will close automatically</param>
 <param name="ShownHandler">Delegate that will handle the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event of message box</param>
 <returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that objects in <paramref name="Items"/> were not processed.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTIWMHE(System.String,System.String,System.Drawing.Image,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},System.Object[])">
 <summary>Displays modal message box with given prompt, title, icon, owner, timer, show ahndler and items</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Timer">Time (in seconds) after which the message box will close automatically</param>
 <param name="ShownHandler">Delegate that will handle the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event of message box</param>
 <returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that objects in <paramref name="Items"/> were not processed.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTIWMHB(System.String,System.String,System.Drawing.Image,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
 <summary>Displays modal message box with given prompt, title, icon, owner, timer, show ahndler and buttons</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Timer">Time (in seconds) after which the message box will close automatically</param>
 <param name="ShownHandler">Delegate that will handle the <see cref="E:Tools.WindowsT.IndependentT.MessageBox.Shown"/> event of message box</param>
 <returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that objects in <paramref name="Buttons"/> were not processed.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTIWS(System.String,System.String,System.Drawing.Image,System.Object,System.Object[])">
 <summary>Displays modal message box with given prompt, title, icon, owner and items</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that objects in <paramref name="Items"/> were not processed.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTIWB(System.String,System.String,System.Drawing.Image,System.Object,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
 <summary>Displays modal message box with given prompt, title, icon and owner and buttons</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
 <param name="Icon">Icon that will be shown on messagebox. Default preffered size is 64×64 px (can be changed in derived class). <paramref name="Icon"/> can be null.</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that objects in <paramref name="Buttons"/> were not processed.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTS(System.String,System.String,System.Object[])">
 <summary>Displays modal message box with given prompt, title and items</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Items">Items to be shown in message box. Place items of type <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxCheckBox"/>, <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxRadioButton"/> and <see cref="T:System.String"/> here. <see cref="T:System.String"/> items are placed inside <see cref="P:Tools.WindowsT.IndependentT.MessageBox.ComboBox"/>. Items of other types are ignored.</param>
 <returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that objects in <paramref name="Items"/> were not processed.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTB(System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
 <summary>Displays modal message box with given prompt, title and buttons</summary>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Custom buttons. Each button should have different <see cref="P:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Result"/>, so you can distinguish which button was clicked.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
 <returns>Instance of message box. The instance is alredy closed when this function returns.</returns>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that objects in <paramref name="Buttons"/> were not processed.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Error_X(System.Exception)">
 <summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
 <param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
 <returns>Indicates button clicked by user</returns>
 <remarks>Title will contain <see cref="P:System.Reflection.MemberInfo.Name"/> of exception</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is null</exception>
 <version version="1.5.3">Message from inner exceptions is shown as well</version>
 <version version="1.5.3"><see cref="T:System.ArgumentNullException"/> is thrown when <paramref name="ex"/> is null (instead of <see cref="T:System.NullReferenceException"/>)</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Error_XW(System.Exception,System.Object)">
 <summary>Displays modal message box with information about given <see cref="T:System.Exception"/> modal to giwen owner</summary>
 <param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is null</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Error_XT(System.Exception,System.String)">
 <summary>Displays modal message box with information about <see cref="T:System.Exception"/> and custom title</summary>
 <param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
 <param name="Title">Message box title</param>
 <returns>Indicates button clicked by user</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is nulll</exception>
 <version version="1.5.3">Message from inner exceptions is shown as well</version>
 <version version="1.5.3"><see cref="T:System.ArgumentNullException"/> is thrown when <paramref name="ex"/> is null (instead of <see cref="T:System.NullReferenceException"/>)</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Error_XTW(System.Exception,System.String,System.Object)">
 <summary>Displays modal message box with information about <see cref="T:System.Exception"/> with given title and owner</summary>
 <param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
 <param name="Title">Message box title</param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Indicates button clicked by user</returns>   
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is nulll</exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3">Message from inner exceptions is shown as well</version>
 <version version="1.5.3"><see cref="T:System.ArgumentNullException"/> is thrown when <paramref name="ex"/> is null (instead of <see cref="T:System.NullReferenceException"/>)</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Error_XBI(System.Exception,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
 <param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <returns>Indicates button clicked by user</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is nulll</exception>
 <version version="1.5.3">Message from inner exceptions is shown as well</version>
 <version version="1.5.3"><see cref="T:System.ArgumentNullException"/> is thrown when <paramref name="ex"/> is null (instead of <see cref="T:System.NullReferenceException"/>)</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Error_XTBI(System.Exception,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
 <param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <returns>Indicates button clicked by user</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is nulll</exception>
 <version version="1.5.3">Message from inner exceptions is shown as well</version>
 <version version="1.5.3"><see cref="T:System.ArgumentNullException"/> is thrown when <paramref name="ex"/> is null (instead of <see cref="T:System.NullReferenceException"/>)</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Error_XBWI(System.Exception,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Object,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
 <param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <returns>Indicates button clicked by user</returns>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is null</exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3" stage="Beta">Fix: <paramref name="Buttons"/> goes to prompt rather than forming buttons. Only OK button si always show.</version>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that that messagebox was rendered without buttons.</version>
 <version version="1.5.3">Message from inner exceptions is shown as well</version>
 <version version="1.5.3"><see cref="T:System.ArgumentNullException"/> is thrown when <paramref name="ex"/> is null (instead of <see cref="T:System.NullReferenceException"/>)</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Error_XTBWI(System.Exception,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Object,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons)">
 <summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
 <param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Indicates button clicked by user</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is nulll</exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3" stage="Beta">Fix: <paramref name="Buttons"/> goes to prompt rather than forming buttons. Only OK button si always show.</version>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that messagebox was shown without buttons.</version>
 <version version="1.5.3">Message from inner exceptions is shown as well</version>
 <version version="1.5.3"><see cref="T:System.ArgumentNullException"/> is thrown when <paramref name="ex"/> is null (instead of <see cref="T:System.NullReferenceException"/>)</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.Error_XPTIBWO(System.Exception,System.String,System.String,Tools.WindowsT.IndependentT.MessageBox.MessageBoxIcons,Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons,System.Object,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions)">
 <summary>Displays modal message box with information about <see cref="T:System.Exception"/></summary>
 <param name="ex">Exception to show <see cref="P:System.Exception.Message"/> of</param>
 <param name="Title">Message box title</param>
 <param name="Buttons">Defines which buttons will be available to user</param>
 <param name="Icon">Defines one of predefined icons to show to user. Actual image is obtained via <see cref="P:Tools.WindowsT.IndependentT.MessageBox.GetIconDelegate"/></param>
 <returns>Indicates button clicked by user</returns>
 <param name="Owner">The window message box window will be modal to (can be null). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <param name="Prompt">Prompt to be shown</param>
 <param name="Options">Dialog options</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is null</exception>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
 <version version="1.5.3" stage="Beta">Fix: <paramref name="Buttons"/> goes to prompt rather than forming buttons. Only OK button si always show.</version>
 <version version="1.5.3">Fix: Bug in <see cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalEx_PTEIOWMHS(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Drawing.Image,Tools.WindowsT.IndependentT.MessageBox.MessageBoxOptions,System.Object,System.Int32,Tools.EventHandler{Tools.WindowsT.IndependentT.MessageBox,System.EventArgs},Tools.MediaT.Sound)"/> (which this method depends on) caused that messagebox was rendered without buttons.</version>
 <version version="1.5.3">Message from inner exceptions is shown as well</version>
 <version version="1.5.3"><see cref="T:System.ArgumentNullException"/> is thrown when <paramref name="ex"/> is null (instead of <see cref="T:System.NullReferenceException"/>)</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.GetErrorMessage(System.Exception)">
 <summary>Gets composed error message for given <see cref="T:System.Exception"/> and all inner exceptions</summary>
 <param name="ex">Exception to get message for</param>
 <returns><paramref name="ex"/>.<see cref="P:System.Exception.Message">Message</see> and <see cref="P:System.Exception.Message">messages</see> of all <see cref="P:System.Exception.InnerException">inner exceptions</see>, separated by new line and localized text "Inner exception: ".</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="ex"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.SetButtons(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton[])">
 <summary>Replaces <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> with given buttons</summary>
 <param name="Buttons">New buttons</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Buttons"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.SetButtons(Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons)">
 <summary>Replaces <see cref="P:Tools.WindowsT.IndependentT.MessageBox.Buttons"/> with buttons created from their <see cref="T:Tools.WindowsT.IndependentT.MessageBox.MessageBoxButton.Buttons"/> specification</summary>
 <param name="Buttons">Indicates buttons to create</param>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.GetTextWithAccessKey(System.String,System.Char)">
 <summary>When overriden in derived class gets text which contains Accesskey marker (like &amp; in WinForms or _ in WPF)</summary>
 <param name="Text">Text (if it contains character used as accesskey markers they must be escaped)</param>
 <param name="AccessKey">Char representing accesskey (if char is not in <paramref name="Text"/> no accesskey marker should be inserted)</param>
 <returns><paramref name="Text"/> with accesskey denoted in it; or <paramref name="Text"/> if platfrom derived class implements messagebox for does not indicate accesskey in text.</returns>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.GetTextWithAccessKey(System.String,System.Char,System.Char)">
 <summary>Creates accesskey text by prepending given char before accesskey character</summary>
 <param name="Text">Text of control</param>
 <param name="AccessKey">Accesskey to prepend char in front of</param>
 <param name="PrependChar">Char to be prepended</param>
 <returns><paramref name="Text"/> with first occurence of <paramref name="AccessKey"/> replaced with <paramref name="PrependChar"/> and <paramref name="AccessKey"/>.</returns>
 <remarks><paramref name="AccessKey"/> is escaped by duplication</remarks>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalSync(System.Windows.Forms.Control,System.Object)">
 <summary>Displays modal messagebox in sync with given control</summary>
 <param name="Control">Control to diplay dialog in thread control was created by</param>
 <param name="Owner">Optional owner of dialog (the window dialog will be modal to). Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Result of diloag identifiing pressed button</returns>
 <remarks>This function can be used to display dialogs from background worker thread</remarks>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.IndependentT.MessageBox.ModalSyncTemplate(System.Windows.Forms.Control,Tools.WindowsT.IndependentT.MessageBox,System.String,System.String,System.Object)">
 <summary>Displays modal message box in sync with given control</summary>
 <param name="Control">Control to diplay dialog in thread control was created by</param>
 <param name="Template">Instance to initialize default message box with</param>
 <param name="Prompt">If not null specified different prompt of messagebox</param>
 <param name="Title">If not null specifies different title of messagebox</param>
 <param name="Owner">Optional owner of messagebox - the window messagebox will be modal to. Typical values are <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/> If implementation does not recognize type of owner it ignores it.</param>
 <returns>Result of messagebox which identified button that was pressed</returns>
 <seelaso cref="T:Tools.WindowsT.IndependentT.MessageBox.FakeBox"/>
 <seelaso cref="M:Tools.WindowsT.IndependentT.MessageBox.ShowTemplate(Tools.WindowsT.IndependentT.MessageBox,System.Object,System.String,System.String)"/>
 <seelaso cref="M:Tools.WindowsT.IndependentT.MessageBox.DisplayTemplate(Tools.WindowsT.IndependentT.MessageBox,System.Object,System.String,System.String)"/>
 <seelaso cref="M:Tools.WindowsT.IndependentT.MessageBox.ModalSync(System.Windows.Forms.Control,System.Object)"/>
 <version version="1.5.3" stage="Beta">Type of parameter <paramref name="owner"/> changed from <see cref="T:System.Windows.Forms.IWin32Window"/> to <see cref="T:System.Object"/> to support both - <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Window"/>.</version>
</member>
<member name="T:Tools.WindowsT.InteropT.InteropExtensions">
 <summary>Contains extension methods for WPF - WinForms interoperability</summary>
 <seealso cref="T:Tools.Tools.WindowsT.InteropT.NativeInteropExtensions"/>
 <version version="1.5.3." stage="Alpha">Introduced new overloads to <see cref="M:Tools.WindowsT.InteropT.InteropExtensions.Show(System.Windows.Forms.Form,System.Windows.Interop.IWin32Window)"/> and <see cref="M:Tools.WindowsT.InteropT.InteropExtensions.ShowDialog(System.Windows.Forms.CommonDialog,System.Windows.Interop.IWin32Window)"/> methods to support <see cref="T:System.Windows.Interop.IWin32Window"/>.</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToBitmapSource(System.Drawing.Bitmap)">
 <summary>Converts <see cref="T:System.Drawing.Image"/> to WPF <see cref="T:System.Windows.Media.Imaging.BitmapSource"/></summary>
 <param name="Image">An <see cref="T:System.Drawing.Image"/></param>
 <returns><see cref="T:System.Windows.Media.Imaging.BitmapSource"/> created from <paramref name="Image"/>; null when <paramref name="Image"/> is null.</returns>
 <remarks><see cref="M:Tools.Tools.WindowsT.InteropT.NativeInteropExtensions.ToBitmapSource(System.Drawing.Bitmap)"/> may be more efficient way of converting bitmaps.</remarks>
 <seelaso cref="M:System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap(System.IntPtr,System.IntPtr,System.Windows.Int32Rect,System.Windows.Media.Imaging.BitmapSizeOptions)"/>
 <version version="1.5.3">In version 1.5.3 overload for <see cref="T:System.Drawing.Image"/> overload was added and since then this overload calls that overload.</version>
 <seelaso cref="M:Tools.Tools.WindowsT.InteropT.NativeInteropExtensions.ToBitmapSourceFast(System.Drawing.Bitmap)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToBitmapSource(System.Drawing.Image)">
 <summary>Converts <see cref="T:System.Drawing.Image"/> to WPF <see cref="T:System.Windows.Media.Imaging.BitmapSource"/></summary>
 <param name="Image">An <see cref="T:System.Drawing.Image"/></param>
 <returns><see cref="T:System.Windows.Media.Imaging.BitmapSource"/> created from <paramref name="Image"/>; null when <paramref name="Image"/> is null.</returns>
 <remarks>For <see cref="T:System.Drawing.Bitmap"/>, you may consider using <see cref="M:Tools.Tools.WindowsT.InteropT.NativeInteropExtensions.ToBitmapSourceFast(System.Drawing.Bitmap)"/> which is faster but depends on Windows API.</remarks>
 <version version="1.5.3">This overload is new in version 1.5.3</version>
 <seelaso cref="M:Tools.Tools.WindowsT.InteropT.NativeInteropExtensions.ToBitmapSourceFast(System.Drawing.Image)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToBitmapSource(System.Drawing.Icon)">
 <summary>Converts <see cref="T:System.Drawing.Icon"/> to WPF <see cref="T:System.Windows.Media.Imaging.BitmapSource"/></summary>
 <param name="Icon">An <see cref="T:System.Drawing.Icon"/></param>
 <returns><see cref="T:System.Windows.Media.Imaging.BitmapSource"/> created from <paramref name="Icon"/>; null when <paramref name="Icon"/> is null.</returns>
 <seelaso cref="M:System.Windows.Interop.Imaging.CreateBitmapSourceFromHIcon(System.IntPtr,System.Windows.Int32Rect,System.Windows.Media.Imaging.BitmapSizeOptions)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToBitmap(System.Windows.Media.Imaging.BitmapSource)">
 <summary>Converts <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> to <see cref="T:System.Drawing.Bitmap"/></summary>
 <param name="Source">A <see cref="T:System.Windows.Media.Imaging.BitmapSource"/></param>
 <returns><see cref="T:System.Drawing.Bitmap"/> created from <paramref name="Source"/>; null when <paramref name="Source"/> is null.</returns>
 <remarks>Uses <see cref="M:System.Windows.Media.Imaging.BitmapEncoder.Save(System.IO.Stream)"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ColorFromArgb(System.Int32)">
 <summary>Gets <see cref="T:System.Windows.Media.Color"/> from ARGB value</summary>
 <param name="argb">COlor ARGB value</param>
 <returns>A color instance initialized from <paramref name="argb"/>.</returns>
 <version version="1.5.4">This method is new in version 1.5.4</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToArgb(System.Windows.Media.Color)">
 <summary>Gets the 32-bit ARGB value of given <see cref="T:System.Windows.Media.Color"/> structure.</summary>
 <param name="Color">Color to get ARGB value of</param>
 <returns>The 32-bit ARGB value of <paramref name="Color"/>.</returns>
 <version version="1.5.3.">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToArgb(System.Nullable{System.Windows.Media.Color})">
 <summary>Gets the 32-bit ARGB value of given <see cref="T:System.Windows.Media.Color"/> structure.</summary>
 <param name="Color">COlor to get ARGB value of or null</param>
 <returns>The 32-bit ARGB value of <paramref name="Color"/>, or null when <paramref name="Color"/> is null.</returns>
 <version version="1.5.3.">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToColor(System.Windows.Media.Color)">
 <summary>Gets <see cref="T:System.Drawing.Color"/> equivalent to given <see cref="T:System.Windows.Media.Color"/></summary>
 <param name="Color"><see cref="T:System.Windows.Media.Color"/> to get <see cref="T:System.Drawing.Color"/> for</param>
 <returns><see cref="T:System.Drawing.Color"/> initialized to same ARGB as <paramref name="Color"/></returns>
 <version version="1.5.3.">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToColor(System.Nullable{System.Windows.Media.Color})">
 <summary>Gets <see cref="T:System.Drawing.Color"/> equivalent to given <see cref="T:System.Windows.Media.Color"/></summary>
 <param name="Color"><see cref="T:System.Windows.Media.Color"/> to get <see cref="T:System.Drawing.Color"/> for</param>
 <returns><see cref="T:System.Drawing.Color"/> initialized to same ARGB as <paramref name="Color"/>; null when <paramref name="Color"/> is null</returns>
 <version version="1.5.3.">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToColor(System.Drawing.Color)">
 <summary>Gets <see cref="T:System.Windows.Media.Color"/> equivalent to given <see cref="T:System.Drawing.Color"/></summary>
 <param name="Color"><see cref="T:System.Drawing.Color"/> to get <see cref="T:System.Windows.Media.Color"/> for</param>
 <returns><see cref="T:System.Windows.Media.Color"/> initialized to same ARGB as <paramref name="Color"/></returns>
 <version version="1.5.3.">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ToColor(System.Nullable{System.Drawing.Color})">
 <summary>Gets <see cref="T:System.Windows.Media.Color"/> equivalent to given <see cref="T:System.Drawing.Color"/></summary>
 <param name="Color"><see cref="T:System.Drawing.Color"/> to get <see cref="T:System.Windows.Media.Color"/> for</param>
 <returns><see cref="T:System.Windows.Media.Color"/> initialized to same ARGB as <paramref name="Color"/>; null when <paramref name="Color"/> is null</returns>
 <version version="1.5.3.">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.Show(System.Windows.Forms.Form,System.Windows.Window)">
 <summary>Shows <see cref="T:System.Windows.Forms.Form"/> floating over <see cref="T:System.Windows.Window"/></summary>
 <param name="Form"><see cref="T:System.Windows.Forms.Form"/> to be shown</param>
 <param name="Owner">Owner <see cref="T:System.Windows.Window"/>; can be null</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Form"/> is null</exception>
 <version version="1.5.2">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ShowDialog(System.Windows.Forms.Form,System.Windows.Window)">
 <summary>Shows <see cref="T:System.Windows.Forms.Form"/> modally for given <see cref="T:System.Windows.Window"/></summary>
 <param name="Form"><see cref="T:System.Windows.Forms.Form"/> to be shown</param>
 <param name="Owner">Owner <see cref="T:System.Windows.Window"/>. Can be null.</param>
 <returns>One of <see cref="T:System.Windows.Forms.DialogResult"/> values</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Form"/> is null</exception>
 <version version="1.5.2">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.Show(System.Windows.Window,System.Windows.Forms.IWin32Window)">
 <summary>Shows <see cref="T:System.Windows.Window"/> floating over given native window such as <see cref="T:System.Windows.Forms.Form"/></summary>
 <param name="Window"><see cref="T:System.Windows.Window"/> to be shown</param>
 <param name="Owner">Owner form or other native window. Can be null.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <version version="1.5.2">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.Show(System.Windows.Forms.Form,System.Windows.Interop.IWin32Window)">
 <summary>Shows <see cref="T:System.Windows.Forms.Form"/> floating over <see cref="T:System.Windows.Interop.IWin32Window"/></summary>
 <param name="Form"><see cref="T:System.Windows.Forms.Form"/> to be shown</param>
 <param name="Owner">Owner <see cref="T:System.Windows.Interop.IWin32Window"/>; can be null</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Form"/> is null</exception>
 <version version="1.5.3">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.Show(System.Windows.Window,System.Windows.Interop.IWin32Window)">
 <summary>Shows <see cref="T:System.Windows.Window"/> floating over given native window such as <see cref="T:System.Windows.Forms.Form"/></summary>
 <param name="Window"><see cref="T:System.Windows.Window"/> to be shown</param>
 <param name="Owner">Owner form or other native window. Can be null.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <version version="1.5.3">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ShowDialog(System.Windows.Forms.Form,System.Windows.Interop.IWin32Window)">
 <summary>Shows <see cref="T:System.Windows.Forms.Form"/> modally for given <see cref="T:System.Windows.Interop.IWin32Window"/></summary>
 <param name="Form"><see cref="T:System.Windows.Forms.Form"/> to be shown</param>
 <param name="Owner">Owner <see cref="T:System.Windows.Interop.IWin32Window"/>. Can be null.</param>
 <returns>One of <see cref="T:System.Windows.Forms.DialogResult"/> values</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Form"/> is null</exception>
 <version version="1.5.3">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ShowDialog(System.Windows.Window,System.Windows.Interop.IWin32Window)">
 <summary>Shows <see cref="T:System.Windows.Window"/> modally to given native window such as <see cref="T:System.Windows.Forms.Form"/></summary>
 <param name="Window"><see cref="T:System.Windows.Window"/> to be shown</param>
 <param name="Owner">Owner form or other native window. Can be null.</param>
 <returns>A <see cref="T:System.Nullable`1"/> value of type <see cref="T:System.Boolean"/> that signifies how <paramref name="Window"/> was closed by the user.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <version version="1.5.3">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ShowDialog(System.Windows.Window,System.Windows.Forms.IWin32Window)">
 <summary>Shows <see cref="T:System.Windows.Window"/> modally to given native window such as <see cref="T:System.Windows.Forms.Form"/></summary>
 <param name="Window"><see cref="T:System.Windows.Window"/> to be shown</param>
 <param name="Owner">Owner form or other native window. Can be null.</param>
 <returns>A <see cref="T:System.Nullable`1"/> value of type <see cref="T:System.Boolean"/> that signifies how <paramref name="Window"/> was closed by the user.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <version version="1.5.2">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.GetHandle(System.Windows.Window)">
 <summary>Gets handle of <see cref="T:System.Windows.Window"/></summary>
 <param name="Window"><see cref="T:System.Windows.Window"/> to get handle of</param>
 <returns>Handle of <paramref name="Window"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <version version="1.5.2">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.GetOwner(System.Windows.Window)">
 <summary>Gets owner of <see cref="T:System.Windows.Window"/> as native <see cref="T:System.Windows.Interop.IWin32Window"/></summary>
 <param name="Window">Window to get owner of</param>
 <returns><see cref="T:System.Windows.Forms.Control"/> such as <see cref="T:System.Windows.Forms.Form"/> that is owner of <paramref name="Window"/> or <see cref="T:System.Windows.Forms.NativeWindow"/> when owner of <paramref name="Window"/> is not <see cref="T:System.Windows.Forms.Control"/>; <see langword="null"/> when <paramref name="Window"/> has no owner.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <version version="1.5.2">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.SetOwner(System.Windows.Window,System.Windows.Forms.IWin32Window)">
 <summary>Sest owner of <see cref="T:System.Windows.Window"/> to native window such as <see cref="T:System.Windows.Forms.Form"/></summary>
 <param name="Window"><see cref="T:System.Windows.Window"/> to set owner of</param>
 <param name="Owner">New owner of <paramref name="Window"/>; null to remove parent of <paramref name="Window"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <version version="1.5.2">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.SetOwner(System.Windows.Window,System.Windows.Interop.IWin32Window)">
 <summary>Sest owner of <see cref="T:System.Windows.Window"/> to native window such as <see cref="T:System.Windows.Forms.Form"/></summary>
 <param name="Window"><see cref="T:System.Windows.Window"/> to set owner of</param>
 <param name="Owner">New owner of <paramref name="Window"/>; null to remove parent of <paramref name="Window"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Window"/> is null</exception>
 <version version="1.5.3">Method instroduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ShowDialog(System.Windows.Forms.CommonDialog,System.Windows.Window)">
 <summary>Runs a common dialog box with the specified owner (<see cref="T:System.Windows.Window"/>).</summary>
 <param name="dlg">A dialog to be shown</param>
 <param name="owner">A <see cref="T:System.Windows.Window"/> that will own modal dialog. If null modal dialog is shown without explicit parent.</param>
 <returns>True if the user clicks OK in the dialog box; otherwise, False.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="dlg"/> is null</exception>
 <version version="1.3.5">This function is new in version 1.3.5</version>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.ShowDialog(System.Windows.Forms.CommonDialog,System.Windows.Interop.IWin32Window)">
 <summary>Runs a common dialog box with the specified owner (<see cref="T:System.Windows.Interop.IWin32Window"/>).</summary>
 <param name="owner">An <see cref="T:System.Windows.Interop.IWin32Window"/> that will own modal dialog. If null modal dialog is shown without explicit parent.</param>
 <param name="dlg">A dialog to be shown</param>
 <returns>True if the user clicks OK in the dialog box; otherwise, False.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="dlg"/> is null</exception>
 <version version="1.3.5">This function is new in version 1.3.5</version>
</member>
<member name="T:Tools.WindowsT.InteropT.InteropExtensions.Win32WindowHelper">
 <summary>Helper class which implements <see cref="T:System.Windows.Forms.IWin32Window"/> and <see cref="T:System.Windows.Interop.IWin32Window"/> interfaces for various purposes</summary>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.Win32WindowHelper.#ctor(System.Windows.Window)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.InteropT.InteropExtensions.Win32WindowHelper"/> class from <see cref="T:System.Windows.Window"/></summary>
 <param name="window">A <see cref="T:System.Windows.Window"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="window"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.InteropT.InteropExtensions.Win32WindowHelper.#ctor(System.Windows.Interop.IWin32Window)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.WindowsT.InteropT.InteropExtensions.Win32WindowHelper"/> class from <see cref="T:System.Windows.Interop.IWin32Window"/></summary>
 <param name="window">A <see cref="T:System.Windows.Interop.IWin32Window"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="window"/> is null</exception>
</member>
<member name="P:Tools.WindowsT.InteropT.InteropExtensions.Win32WindowHelper.Handle">
 <summary>Gets the handle to the window represented by the implementer.</summary>
 <returns>A handle to the window represented by the implementer.</returns>
</member>
<member name="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs">
 <summary>Wraps <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> as clas derived from <see cref="T:System.EventArgs"/></summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version stage="Nightly" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.#ctor(System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>CTor</summary>
 <param name="DependencyPropertyChangedEventArgs">Instance to be wraped</param>
</member>
<member name="F:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.e">
 <summary>Instance being wrapped</summary>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.op_Implicit(System.Windows.DependencyPropertyChangedEventArgs)~Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs">
 <summary>Converts <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> to <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/></summary>
 <param name="a">A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/></param> 
 <returns>New instance of <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/> wrapping <paramref name="a"/></returns>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.op_Implicit(Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs)~System.Windows.DependencyPropertyChangedEventArgs">
 <summary>Converts <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/> to <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/></summary>
 <param name="a">A <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/></param>
 <returns><see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> wraped by <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="P:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.OldValue">
 <summary>Gets the value of the property before the change.</summary>
 <returns>The property value before the change.</returns>
 <seelaso cref="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue"/>
</member>
<member name="P:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.NewValue">
 <summary>Gets the value of the property before the change.</summary>
 <returns>The property value before the change.</returns>
 <seelaso cref="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue"/>
</member>
<member name="P:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.Property">
 <summary>Gets the identifier for the dependency property where the value change occurred.</summary>
 <returns>The identifier field of the dependency property where the value change occurred.</returns>
 <seelaso cref="P:System.Windows.DependencyPropertyChangedEventArgs.Property"/>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs" />. </param>
 <remarks><see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/> can be compared to <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> and to <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/>. Comparison with other types returns false.</remarks>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Indicates whether the current object is equal to another object of the type <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/>.</summary>
 <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false. It true if <paramref name="other"/> equals to <see cref="F:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.e"/>.</returns>
 <param name="other">An object to compare with this object.</param>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.Equals(Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false. It is true if <paramref name="other"/>.<see cref="F:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.e">e</see> equals to <see cref="F:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.e"/>.</returns>
 <param name="other">An object to compare with this object.</param>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs)">
 <summary>Compares <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> and <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/> for equality</summary>
 <returns>true when <paramref name="a"/> equals to <paramref name="b"/></returns>
 <param name="a">A System.Windows.DependencyPropertyChangedEventArgs</param>
 <param name="b">A DependencyPropertyChangedEventArgsEventArgs</param>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.op_Equality(Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Compares <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/> and <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> for equality</summary>
 <returns>true when <paramref name="b"/> equals to <paramref name="a"/></returns>
 <param name="a">A DependencyPropertyChangedEventArgsEventArgs</param>
 <param name="b">A System.Windows.DependencyPropertyChangedEventArgs</param>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.op_Equality(Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs,Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs)">
 <summary>Compares two <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/> objects for equality</summary>
 <returns>true when <paramref name="a"/> equals to <paramref name="b"/></returns>
 <param name="a">A <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/></param>
 <param name="b">A <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/></param>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs)">
 <summary>Compares <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> and <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/> for inequality</summary>
 <returns>false when <paramref name="a"/> equals to <paramref name="b"/></returns>
 <param name="a">A System.Windows.DependencyPropertyChangedEventArgs</param>
 <param name="b">A DependencyPropertyChangedEventArgsEventArgs</param>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.op_Inequality(Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
 <summary>Compares <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/> and <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> for inequality</summary>
 <returns>false when <paramref name="b"/> equals to <paramref name="a"/></returns>
 <param name="a">A DependencyPropertyChangedEventArgsEventArgs</param>
 <param name="b">A System.Windows.DependencyPropertyChangedEventArgs</param>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.op_Inequality(Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs,Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs)">
 <summary>Compares two <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/> objects for inequality</summary>
 <returns>false when <paramref name="a"/> equals to <paramref name="b"/></returns>
 <param name="a">A <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/></param>
 <param name="b">A <see cref="T:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs"/></param>
 <seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/>
</member>
<member name="M:Tools.WindowsT.InteropT.DependencyPropertyChangedEventArgsEventArgs.GetHashCode">
 <summary>Gets a hash code for <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> being wrapped.</summary>
 <returns>A signed 32-bit integer hash code.</returns>
</member>
<member name="T:Tools.WindowsT.InteropT.IsWindowsFormsControlVisibilityConverter">
 <summary>Converter that converts any value of type <see cref="T:System.Windows.Forms.Control"/> to <see cref="F:System.Windows.Visibility.Visible"/> and any other to <see cref="F:System.Windows.Visibility.Hidden"/></summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.IsWindowsFormsControlVisibilityConverter.Convert(System.Object,System.Object,System.Globalization.CultureInfo)">
 <summary>Converts a value.</summary>
 <param name="value">The value produced by the binding source.</param>
 <param name="parameter">Ignored</param>
 <param name="culture">Ignored</param>
 <returns>A converted value. If the method returns null, the valid null value is used.</returns>
</member>
<member name="M:Tools.WindowsT.InteropT.IsWindowsFormsControlVisibilityConverter.ConvertBack(System.Windows.Visibility,System.Object,System.Globalization.CultureInfo)">
 <summary>Does norhing</summary>
 <param name="value">ignored</param>
 <param name="parameter">ignored</param>
 <param name="culture">ignored</param>
 <returns><see cref="F:System.Windows.Data.Binding.DoNothing"/></returns>
</member>
<member name="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs">
 <summary>Wraps <see cref="T:System.Windows.SizeChangedInfo"/> as clas derived from <see cref="T:System.EventArgs"/></summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version stage="Nightly" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.#ctor(System.Windows.SizeChangedInfo)">
 <summary>CTor from <see cref="T:System.Windows.SizeChangedInfo"/></summary>
 <param name="SizeChangedInfo">A <see cref="T:System.Windows.SizeChangedInfo"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="SizeChangedInfo"/> is null</exception>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.#ctor(System.Windows.SizeChangedEventArgs)">
 <summary>CTor from <see cref="T:System.Windows.SizeChangedEventArgs"/></summary>
 <param name="SizeChangedEventArgs">A <see cref="T:System.Windows.SizeChangedEventArgs"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="SizeChangedEventArgs"/> is null</exception>
</member>
<member name="F:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs._Value1">
 <summary>Contains value of the <see cref="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.Value"/> property. Nul when this instace was created from <see cref="T:System.Windows.SizeChangedEventArgs"/> and <see cref="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.Value"/> have not been got yet.</summary>
</member>
<member name="F:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs._Value2">
 <summary>If this instance was created from <see cref="T:System.Windows.SizeChangedEventArgs"/>, contains them; otherwise null</summary>
</member>
<member name="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.Value">
 <summary>Gets <see cref="T:System.Windows.SizeChangedInfo"/> this instance wraps</summary>
 <returns>Instance this instance wraps when it wraps <see cref="T:System.Windows.SizeChangedInfo"/> or appropriate instance when this instance wraps <see cref="T:System.Windows.SizeChangedEventArgs"/>.</returns>
 <exception cref="T:System.InvalidOperationException">This instance wraps <see cref="T:System.Windows.SizeChangedEventArgs"/> and its <see cref="P:System.Windows.RoutedEventArgs.OriginalSource"/> is not <see cref="T:System.Windows.UIElement"/>.</exception>
 <remarks>When this instance encaplsulates <see cref="T:System.Windows.SizeChangedEventArgs"/> subsequent calls to getter of this property returns same instance of <see cref="T:System.Windows.SizeChangedInfo"/>.</remarks>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.Equals(System.Windows.SizeChangedEventArgs)">
 <summary>Indicates whether the current object is equal to another <see cref="T:System.Windows.SizeChangedEventArgs"/>.</summary>
 <returns>true if the current object is equal to the 
 <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
 <remarks>Instances are compared by their HeightChanged, NewSize, PreviousSize and WidthChanged properties</remarks>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.Equals(System.Windows.SizeChangedInfo)">
 <summary>Indicates whether the current object is equal to another <see cref="T:System.Windows.SizeChangedInfo"/>.</summary>
 <returns>true if the current object is equal to the 
 <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
 <remarks>Instances are compared by their HeightChanged, NewSize, PreviousSize and WidthChanged properties</remarks>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <exception cref="T:System.NullReferenceException">The 
 <paramref name="obj" /> parameter is null.</exception>
 <remarks>This instance can be compared to objects of type <see cref="T:System.Windows.SizeChangedInfo"/>, <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/> and <see cref="T:System.Windows.SizeChangedEventArgs"/>; otherwise returns false.</remarks>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.Equals(Tools.WindowsT.InteropT.SizeChangedInfoEventArgs)">
 <summary>Indicates whether the current object is equal to another <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/>.</summary>
 <returns>true if the current object is equal to the 
 <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
 <remarks>Instances are compared by their <see cref="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.HeightChanged"/>, <see cref="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.NewSize"/>, <see cref="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.PreviousSize"/> and <see cref="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.WidthChanged"/> properties</remarks>
</member>
<member name="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.HeightChanged">
 <summary>Gets a value indicating whether this <see cref="T:System.Windows.SizeChangedInfo" /> reports a size change that includes a significant change to the Height component.</summary>
 <returns>true if there is a significant Height component change; otherwise, false.</returns>
 <seelaso cref="P:System.Windows.SizeChangedInfo.HeightChanged"/><seelaso cref="P:System.Windows.SizeChangedEventArgs.HeightChanged"/>
</member>
<member name="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.WidthChanged">
 <summary>Gets a value that declares whether the Width component of the size changed.</summary>
 <seelaso cref="P:System.Windows.SizeChangedInfo.WidthChanged"/><seelaso cref="P:System.Windows.SizeChangedEventArgs.WidthChanged"/>
</member>
<member name="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.NewSize">
 <summary>Gets the new size being reported.</summary>
 <returns>The new size.</returns>
 <seelaso cref="P:System.Windows.SizeChangedInfo.NewSize"/><seelaso cref="P:System.Windows.SizeChangedEventArgs.NewSize"/>
</member>
<member name="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.PreviousSize">
 <summary>Gets the previous size of the size-related value being reported as changed.</summary>
 <returns>The previous size.</returns>
 <seelaso cref="P:System.Windows.SizeChangedInfo.PreviousSize"/><seelaso cref="P:System.Windows.SizeChangedEventArgs.PreviousSize"/>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.op_Implicit(System.Windows.SizeChangedInfo)~Tools.WindowsT.InteropT.SizeChangedInfoEventArgs">
 <summary>Converts <see cref="T:System.Windows.SizeChangedInfo"/> to <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/></summary>
 <param name="a">A <see cref="T:System.Windows.SizeChangedInfo"/></param>
 <returns>Instance encapsulating <paramref name="a"/>. Null when <paramref name="a"/> is null.</returns>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.op_Explicit(Tools.WindowsT.InteropT.SizeChangedInfoEventArgs)~System.Windows.SizeChangedInfo">
 <summary>Converts <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/> to <see cref="T:System.Windows.SizeChangedInfo"/></summary>
 <param name="a">A <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/></param>
 <returns>If <paramref name="a"/> encapsulates <see cref="T:System.Windows.SizeChangedInfo"/> returns it; otherwise (<paramref name="a"/> encapsulets <see cref="T:System.Windows.SizeChangedEventArgs"/>), new instance of <see cref="T:System.Windows.SizeChangedInfo"/> is created from it or precreated instance is returned. Null when <paramref name="a"/> is null.</returns>
 <exception cref="T:System.InvalidOperationException"><paramref name="a"/> encapsulates <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/> and its <see cref="P:System.Windows.RoutedEventArgs.OriginalSource"/> is not <see cref="T:System.Windows.UIElement"/></exception>
 <seelaso cref="P:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.Value"/>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.op_Implicit(System.Windows.SizeChangedEventArgs)~Tools.WindowsT.InteropT.SizeChangedInfoEventArgs">
 <summary>Converts <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/> to <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/></summary>
 <param name="a">A <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/></param>
 <returns>Instance encapsulating <paramref name="a"/>.  Null when <paramref name="a"/> is null.</returns>
</member>
<member name="M:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs.op_Explicit(Tools.WindowsT.InteropT.SizeChangedInfoEventArgs)~System.Windows.SizeChangedEventArgs">
 <summary>Atemts to convert <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/> to <see cref="T:System.Windows.SizeChangedEventArgs"/></summary>
 <param name="a">A <see cref="T:Tools.WindowsT.InteropT.SizeChangedInfoEventArgs"/></param>
 <returns><see cref="T:System.Windows.SizeChangedEventArgs"/> encapsulated by <paramref name="a"/>.  Null when <paramref name="a"/> is null.</returns>
 <exception cref="T:System.InvalidOperationException"><paramref name="a"/> does not encapsulate <see cref="T:System.Windows.SizeChangedEventArgs"/>.</exception>
</member>
<member name="T:Tools.Direction">
 <summary>Neighbourhood directions</summary>
 <version version="1.5.3">This enumeration is new in version 1.5.3</version>
</member>
<member name="F:Tools.Direction.Left">
 <summary>Left neighbour</summary>
</member>
<member name="F:Tools.Direction.Right">
 <summary>Right neighbour</summary>
</member>
<member name="F:Tools.Direction.Top">
 <summary>Top (front) neighbour</summary>
</member>
<member name="F:Tools.Direction.Bottom">
 <summary>Bottom (back) neighbour</summary>
</member>
<member name="T:Tools.ResourcesT.Icons">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.Asterisk">
<summary>
Looks up a resource 'Asterisk'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.ErrorIcon">
<summary>
Looks up a resource 'ErrorIcon'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.Exclamation">
<summary>
Looks up a resource 'Exclamation'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.Hand">
<summary>
Looks up a resource 'Hand'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.Information">
<summary>
Looks up a resource 'Information'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.OK">
<summary>
Looks up a resource 'OK'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.Question">
<summary>
Looks up a resource 'Question'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.SecurityError">
<summary>
Looks up a resource 'SecurityError'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.SecurityInformation">
<summary>
Looks up a resource 'SecurityInformation'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.SecurityOK">
<summary>
Looks up a resource 'SecurityOK'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.SecurityQuestion">
<summary>
Looks up a resource 'SecurityQuestion'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.SecurityWarning">
<summary>
Looks up a resource 'SecurityWarning'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.StopIcon">
<summary>
Looks up a resource 'StopIcon'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Icons.Warning">
<summary>
Looks up a resource 'Warning'.
</summary>
</member>
<member name="T:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper">
<summary>
GeneratedInternalTypeHelper
</summary>
</member>
<member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
<summary>
CreateInstance
</summary>
</member>
<member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
<summary>
GetPropertyValue
</summary>
</member>
<member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
<summary>
SetPropertyValue
</summary>
</member>
<member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
<summary>
CreateDelegate
</summary>
</member>
<member name="M:Tools.XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
<summary>
AddEventHandler
</summary>
</member>
</members>
</doc>
