<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tools.Metadata
</name>
</assembly>
<members>
<member name="T:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader">
 <summary>Represernts marker (block of JPEG file)</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="T:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers">
 <summary>Known types of JPEG markers</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.SOI">
 <summary>Start Of Image marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.EOI">
 <summary>End Of Image marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.SOS">
 <summary>Start Of Stream marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP0">
 <summary>APP0 (JFIF) marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP1">
 <summary>APP1 marker (used for Exif and XMP)</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP2">
 <summary>APP2 marker (used for Exif extension)</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP3">
 <summary>APP3 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP4">
 <summary>APP4 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP5">
 <summary>APP5 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP6">
 <summary>APP6 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP7">
 <summary>APP7 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP8">
 <summary>APP8 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP9">
 <summary>APP9 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP10">
 <summary>APP10 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP11">
 <summary>APP11 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP12">
 <summary>APP12 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP13">
 <summary>APP13 marker (used for PhoroShop 8BIM which contains EXIF)</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP14">
 <summary>APP14 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.APP15">
 <summary>APP15 marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.DQT">
 <summary>Define Quantization Table marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.DHT">
 <summary>Define Huffman Table marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.Comment">
 <summary>JPEG comment marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.SOF">
 <summary>Start Of Frame marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.Unknown">
 <summary>Unknown marker (not recognized by this application)</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.DRI">
 <summary>Define Restart Interoperability marker</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader._Code">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Code"/>property</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader._Length">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Length"/> property</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader._Data">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Data"/> property</summary>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.#ctor(System.IO.Stream,System.Int64)">
 <summary>CTor - constructs JPEG marker from data present at given offset of given <see cref="T:System.IO.Stream"/></summary>
 <param name="Stream"><see cref="T:System.IO.Stream"/> to read data from, should be stream of whole JPEG file</param>
 <param name="Offset">Offset to start reading data at</param>
 <exception cref="T:System.IO.InvalidDataException">
 Marker code doesn's start with FFh -or-
 Marker which's Lenght is set to 0 or 1 found (doesn't applly to SOI and EOI)
 </exception>
 <exception cref="T:System.IO.IOException">IO error while reding <paramref name="Stream"/></exception>
 <exception cref="T:System.IO.EndOfStreamException">End of stream <paramref name="Stream"/> reached unexpectedly</exception>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader._Offset">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Offset"/> property</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Offset">
 <summary>Offset of marker in stream it was constructed of</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Code">
 <summary>2 Bytes code of marker</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Length">
 <summary>Lenght of marker exluding marker code, including size specification</summary>
 <remarks>Actual length of whole segment including marker code is always 2 bytes more</remarks>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Data">
 <summary>Stream of marker's data</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.MarkerCode">
 <summary>Code of marker</summary>
 <returns>Code of marker if marker was recognized a known marker, <see cref="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Markers.Unknown"/> otherwise</returns>
 <remarks>See <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGMarkerReader.Code"/> property for full code</remarks>
</member>
<member name="T:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader">
 <summary>Provides tools realted to reading from JPEG graphic file format on low level</summary>
 <remarks>
 This <see cref="T:Tools.MetadataT.IMetadataProvider"/> provides Exif (<see cref="T:Tools.MetadataT.ExifT.Exif"/>), IPTC (<see cref="T:Tools.MetadataT.IptcT.Iptc"/>), image (<see cref="T:Tools.MetadataT.ImageMetadata"/>) and system (<see cref="T:Tools.MetadataT.SystemMetadata"/>) metadata.
 In order system and image metadata to be available instance must be constructed from <see cref="T:System.IO.FileStream"/> or form file path.
 </remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2">Added implementation of <see cref="T:Tools.MetadataT.ExifT.IExifWriter"/></version>
 <version version="1.5.2">Implemented the <see cref="T:Tools.MetadataT.IMetadataProvider"/> interface</version>
 <version version="1.5.3">Added support for <see cref="T:Tools.MetadataT.SystemMetadata"/> and <see cref="T:Tools.MetadataT.ImageMetadata"/> for <see cref="T:Tools.MetadataT.IMetadataProvider"/>.</version>
 <version version="1.5.3">Fix: <see cref="T:System.IO.InvalidDataException"/> may be thrown when working with IPTC or Photoshop 8BIM data due to bug in <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.WholeSize"/> implementation. This happened especially for files edited with Adobe Photop.</version>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Stream">
 <summary>Stream of opened file</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.JPEGStream">
 <summary>Stream of whole JPEG file</summary>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.#ctor(System.String,System.Boolean)">
 <summary>CTor from file</summary>
 <param name="Path">Path to file to read from</param>
 <param name="Write">Opens file for writing as well as for reading if true. This is necessary for <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.IPTCEmbed(System.Byte[])"/>, <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetWritableExifStream"/> and <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ExifEmbded(System.Byte[])"/> to work</param>
 <exception cref="T:System.IO.DirectoryNotFoundException">The specified <paramref name="path"/> is invalid, such as being on an unmapped drive.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="path"/> is null.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The access requested (readonly) is not permitted by the operating system for the specified path.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="path"/> is an empty string (""), contains only white space, or contains one or more invalid characters.</exception>
 <exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <paramref name="path"/>, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid JPEG marker found (code doesn't start with FFh, length set to 0 or 2) -or-
 JPEG stream doesn't start with corect SOI marker -or-
 JPEG stream doesn't end with corect EOI marker
 </exception>
 <remarks>When using this contructor system (<see cref="T:Tools.MetadataT.SystemMetadata"/>) and image (<see cref="T:Tools.MetadataT.ImageMetadata"/>) will be available.</remarks>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.#ctor(System.IO.Stream)">
 <summary>CTor from stream</summary>
 <param name="Stream"><see cref="T:System.IO.Stream"/> to read data from</param>
 <exception cref="T:System.NotSupportedException"><paramref name="Stream"/> doesn't support read or seek (the <see cref="P:System.IO.Stream.CanRead"/> or <see cref="P:System.IO.Stream.CanSeek"/> returns false)</exception>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid JPEG marker found (code doesn't start with FFh, length set to 0 or 2) -or-
 JPEG stream doesn't start with corect SOI marker -or-
 JPEG stream doesn't end with corect EOI marker
 </exception>
 <remarks>The <paramref name="Stream"/> is not automatically closed when instance is disposed.
 <para>When using this contructor system (<see cref="T:Tools.MetadataT.SystemMetadata"/>) and image (<see cref="T:Tools.MetadataT.ImageMetadata"/>) will be available only when <paramref name="Stream"/> is <see cref="T:System.IO.FileStream"/>.</para></remarks>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader._Markers">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Markers"/> property</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader._ImageStream">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ImageStream"/> property</summary>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Parse">
 <summary>Parses given JPEG file and extracts JPEG markers and image data streams</summary>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid JPEG marker found (code doesn't start with FFh, length set to 0 or 2) -or-
 JPEG stream doesn't start with corect SOI marker -or-
 JPEG stream doesn't end with corect EOI marker -or-
 EOI not found at the end of image
 </exception>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Markers">
 <summary>List of markers this JPEG stream</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ImageStream">
 <summary>Stream constrained to Image stream part of JPEG stream</summary>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetExifStream">
 <summary>Gets stream of Exif data</summary>
 <remarks>
 <para>Stream content starts with TIFF header</para>
 <para>If there is no Exif data in file stream can be null or have zero length</para>
 <para>Stream supports reading and seeking</para>
 </remarks>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader._SupportFujiFilmFineFix2800Zoom">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.SupportFujiFilmFineFix2800Zoom"/> property</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.SupportFujiFilmFineFix2800Zoom">
 <summary>Gets or sets value indicating if non-standard way of embdeding Exif data seen in file from FujiFilm FineFix 2800 is supported</summary>
 <returns>True if the format is supported, false if not</returns>
 <value>Set value of this property prior of calling <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetExifStream"/> or <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ExifMarkerIndex"/>.</value>
 <remarks>FujiFilm FinePix 2800 Zomm adds 4 more bytes between APP1 marker size indication and start of Exif block. This is considered non-standard and supported only when this property is set to true.
 <para>The bytes added has following meaning: 2 bytes FFE1 (repeated APP1 marker); 2 bytes size (unsigned, big endian). The is by 4 bytes lower then size stored in APP1 marker itself.</para></remarks>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader._SupportFujiFilmFineFix2800ZoomInEffect">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.SupportFujiFilmFineFix2800ZoomInEffect"/> property</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.SupportFujiFilmFineFix2800ZoomInEffect">
 <summary>Gets value indicating if <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.SupportFujiFilmFineFix2800Zoom"/> property being set to true has effect</summary>
 <returns>True if Exif data was found and are in format recognized only when the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.SupportFujiFilmFineFix2800Zoom"/> was true</returns>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader._ExifMarkerIndex">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ExifMarkerIndex"/> property</summary>
 <remarks>If value is less than -1 <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ExifMarkerIndex"/> has not been aquired, if value is -1 then there if no Exif data</remarks>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ExifMarkerIndex">
 <summary>Gets index of marker which stores Exif data</summary>
 <returns>Index of marker into <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Markers"/> collection in which Exif data are stored, -1 if there are no Exif data</returns>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetExif">
 <summary>Gets exif metadata contained in this instance</summary>
 <returns>Exif metadata contained in this instance or null when <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ContainsExif"/> is false.</returns>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ContainsExif">
 <summary>Gets value indicating if there is any Exif data currently embdeded in this instance.</summary>
 <returns>True if thie instance contains Exif data and <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetWritableExifStream"/> returns valid stream of Exif data, false where there is no Exif data, so it is safe to use <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ExifEmbded(System.Byte[])"/> without possible data loss of unknown Exif content.</returns>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetWritableExifStream">
 <summary>Gets stream of Exif data</summary>
 <returns>Stream of Exif data which supports reading as well as writing. Return value can be null or zero-lenght stream if there is currently no Exif data.
 <para>If this function returns null, caller shall use <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ExifEmbded(System.Byte[])"/> instead.</para></returns>
 <remarks>
 <para>If class implements <see cref="T:Tools.MetadataT.ExifT.IExifGetter"/> as well as <see cref="T:Tools.MetadataT.ExifT.IExifWriter"/> the <see cref="M:Tools.MetadataT.ExifT.IExifGetter.GetExifStream"/> and <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetWritableExifStream"/> functions can be (but have not to be) implemented by same function.
 Note: You can find it better to implement both methods separatelly, because stream returned by <see cref="M:Tools.MetadataT.ExifT.IExifGetter.GetExifStream"/> can have simplier implementation.</para>
 <para>Stream content must start with TIFF header.</para>
 <para>If there is no exif data in file stream can have zero lenght.</para>
 <para>Stream must support reading, writing and seeking.</para>
 <para>Stream must support changes of its lenght - both growing and shrinking. Namely when stream is returned as constrained stream which represents part of another stream it must properly handle situation when new Exif data are shorter or longer than original.
 The tools library provides class <see cref="T:Tools.IOt.OverflowStream"/> which implements stream that operates over another base stream and supports changes of lenght.</para>
 </remarks>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetIPTCStream">
 <summary>Gets stream of IPTC data</summary>
 <remarks>
 <para>Stream content starts with first tag marker 1Ch of IPTC stream</para>
 <para>If there is no IPTC data in file stream can be null or have zero length</para>
 <para>Stream supports reading and seeking</para>
 </remarks>
 <exception cref="T:System.IO.IOException">IO error while reding Photoshop block stream</exception>
 <exception cref="T:System.IO.EndOfStreamException">End of stream Photoshop block stream reached unexpectedly</exception>
 <exception cref="T:System.IO.InvalidDataException">
 An 8BIM segment doesn't start with string '8BIM'
 Sum of reported size and start of an 8BIM segment data exceeds length of Photoshop block stream
 </exception>
 <version version="1.5.3">Fix: <see cref="T:System.IO.InvalidDataException"/> may be thrown due to bug in <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.WholeSize"/> implementation. This happened especially for files edited with Adobe Photop.</version>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.IPTC8BIM">
 <summary>Value of <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.Type"/> of 8BIM segment that contains IPTC stream</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.IPTC8BIMSegmentIndex">
 <summary>Gets index of 8BIM segment which stores IPTC data</summary>
 <returns>Index of 8BIM segment into <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Get8BIMSegments"/> collection in which IPTC data are stored, -1 if there are no IPTC data</returns>
 <version version="1.5.3">Fix: <see cref="T:System.IO.InvalidDataException"/> may be thrown due to bug in <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.WholeSize"/> implementation. This happened especially for files edited with Adobe Photop.</version>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Get8BIMSegments">
 <summary>Parses Photoshop segment in current JPEG image and return all 8BIM segments contained in it</summary>
 <returns>Collection of <see cref="T:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader"/> representing all 8BIM segments contained in Photoshop block of current image, an empty collection if there are no 8BIM segments (or no Photoshop block or no APP13 marker)</returns>
 <exception cref="T:System.IO.IOException">IO error while reding Photoshop block stream</exception>
 <exception cref="T:System.IO.EndOfStreamException">End of stream Photoshop block stream reached unexpectedly</exception>
 <exception cref="T:System.IO.InvalidDataException">
 An 8BIM segment doesn't start with string '8BIM'
 Sum of reported size and start of an 8BIM segment data exceeds length of Photoshop block stream
 </exception>
 <version version="1.5.3">Fix: <see cref="T:System.IO.InvalidDataException"/> may be thrown due to bug in <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.WholeSize"/> implementation. This happened especially for files edited with Adobe Photop.</version>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetPhotoShopStream">
 <summary>Gets stream of PhotoShop data</summary>
 <remarks>
 <para>Stream content starts with marker of first 8BIM segment</para>
 <para>If there is no Photoshop data in file stream can be null or have zero length</para>
 <para>Stream supports reading and seeking</para>
 </remarks>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader._PhotoshopMarkerIndex">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.PhotoshopMarkerIndex"/> property</summary>
 <remarks>If value is less than -1 <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.PhotoshopMarkerIndex"/> has not been aquired yet, if value is -1 then there if no Photoshop data</remarks>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.PhotoshopMarkerIndex">
 <summary>Gets index of marker which stores Photoshop data</summary>
 <returns>Index of marker into <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Markers"/> collection in which Photoshop data are stored, -1 if there are no Photoshop data</returns>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.IPTCEmbed(System.Byte[])">
 <summary>Writes given IPTC data to stream of JPEG file</summary>
 <param name="IPTCData">Data to be written</param>
 <remarks>either replaces existing IPTC data, adds new 8BIM segment or adds new APP14 marker</remarks>
 <exception cref="T:System.InvalidOperationException">No JPEG marker found</exception>
 <exception cref="T:System.IO.IOException">An IO error occurs</exception>
 <exception cref="T:System.ObjectDisposedException"><see cref="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Stream"/> is closed</exception>
 <exception cref="T:System.NotSupportedException">
 <see cref="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Stream"/> does not support seeking -or-
 <see cref="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Stream"/> does not support writing -or-
 <see cref="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Stream"/> does not suport reading
 </exception>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.BIM8Header(System.UInt32)">
 <summary>Gets bytes of header of 8BIM 1C02 segment</summary>
 <param name="IPTCDataLength">Size of segment data part to be reported</param>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ContainsIptc">
 <summary>Gets value indicating if this instance contains IPTC metadata</summary>
 <returns>True if this instance containins IPTC metadata; false otherwise</returns>
 <seelaso cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.IPTC8BIMSegmentIndex"/>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetIptc">
 <summary>Gets IPTC metadata contained in this instance</summary>
 <returns>IPTC metadata contained in this instace; null when <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.ContainsIptc"/> is false</returns>
 <exception cref="T:System.IO.InvalidDataException">Tag marker other than 1Ch found</exception>
 <exception cref="T:System.NotSupportedException">Extended-size tag found</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.CloseStreamOnDispose">
 <summary>stream will be closed when <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Dispose"/> is invoked</summary>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Dispose(System.Boolean)">
 <summary><see cref="T:System.IDisposable"/></summary>
 <param name="disposing">Free shared unmanaged resources</param>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Contains(System.String)">
 <summary>Gets value indicating if metadata of particular type are provided by this provider</summary>
 <param name="MetadataName">Name of metadata type</param>
 <returns>True if this provider contains metadata with given name</returns>
 <version version="1.5.2">Function added</version>
 <version version="1.5.3">Added support for <see cref="T:Tools.MetadataT.SystemMetadata"/> and <see cref="T:Tools.MetadataT.ImageMetadata"/></version>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetContainedMetadataNames">
 <summary>Gets names of metadata actually contained in metadata source represented by this provider</summary>
 <returns>Names of metadata usefull with the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Metadata(System.String)"/> function. Never returns null; may return an empty enumeration.</returns>
 <version version="1.5.2">Function added</version>
 <version version="1.5.3">Added support for <see cref="T:Tools.MetadataT.SystemMetadata"/> and <see cref="T:Tools.MetadataT.ImageMetadata"/></version>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetSupportedMetadataNames">
 <summary>Get all the names of metadata supported by this provider (even when some of the metadata cannot be provided by current instance)</summary>
 <returns>An array containing <see cref="F:Tools.MetadataT.ExifT.Exif.ExifName"/>, <see cref="F:Tools.MetadataT.IptcT.Iptc.IptcName"/>, <see cref="F:Tools.MetadataT.SystemMetadata.SystemName"/> and <see cref="F:Tools.MetadataT.ImageMetadata.ImageName"/>.</returns>
 <version version="1.5.2">Function added</version>
 <version version="1.5.3">Added <see cref="F:Tools.MetadataT.SystemMetadata.SystemName"/> and <see cref="F:Tools.MetadataT.ImageMetadata.ImageName"/></version>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.Metadata(System.String)">
 <summary>Gets metadata of particular type</summary>
 <param name="MetadataName">Name of metadata to get (see <see cref="M:Tools.DrawingT.DrawingIOt.JPEG.JPEGReader.GetSupportedMetadataNames"/> for possible values)</param>
 <returns>Metadata of requested type; or null if metadata of type <paramref name="MetadataName"/> are not contained in this instance or are not supported by this provider.</returns>
 <remarks>Supported types are Exif (<see cref="F:Tools.MetadataT.ExifT.Exif.ExifName"/>), IPTC (<see cref="F:Tools.MetadataT.IptcT.Iptc.IptcName"/>), <see cref="T:Tools.MetadataT.SystemMetadata"/> and <see cref="T:Tools.MetadataT.ImageMetadata"/>.</remarks>
 <version version="1.5.2">Property added</version>
 <version version="1.5.3">Added support for <see cref="T:Tools.MetadataT.SystemMetadata"/> and <see cref="T:Tools.MetadataT.ImageMetadata"/></version>
</member>
<member name="T:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader">
 <summary>Represents Photoshop 8BIM segment</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.3">Added <see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/>.</version>
 <version version="1.5.3"><see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.WholeSize"/> may be reported incorrectly</version>
</member>
<member name="M:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.#ctor(System.IO.Stream,System.Int64)">
 <summary>CTor</summary>
 <param name="Stream">Steam which contains segment data</param>
 <param name="Offset">Offest of start of segment within <paramref name="Stream"/></param>
 <exception cref="T:System.IO.IOException">IO error while reding <paramref name="Stream"/></exception>
 <exception cref="T:System.IO.EndOfStreamException">End of stream <paramref name="Stream"/> reached unexpectedly</exception>
 <exception cref="T:System.IO.InvalidDataException">
 Segment doesn't start with string '8BIM'
 Sum of reported size and start of segment data exceeds length of <paramref name="Stream"/>
 </exception>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader._NamePaddNeeded">
 <summary>True when name is padded to odd lenght (event with size specification) by one null byte</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader._Type">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.Type"/> property</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader._Name">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.Name"/> property</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader._DataSize">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.DataSize"/> property</summary>
</member>
<member name="F:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader._Data">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.Data"/> property</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.WholeSize">
 <summary>Size of whole 8BIM segment including all header information</summary>
 <remarks>See <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.DataSize"/> for size of data part of segment</remarks>
 <version version="1.5.3">Fix: Size may be reported incorrectly.</version>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.DataPadNeeded">
 <summary>True when data must be padded with one null byte to even lenght</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.NamePaddNeeded">
 <summary>True when name is padded to odd lenght (event with size specification) by one null byte</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.Type">
 <summary>Type of segment</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.Name">
 <summary>Name of segment</summary>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.DataSize">
 <summary>Size of data part of segment</summary>
 <remarks>See <see cref="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.WholeSize"/> for size of whole segment including all header information</remarks>
</member>
<member name="P:Tools.DrawingT.DrawingIOt.JPEG.Photoshop8BIMReader.Data">
 <summary>Stream of data part of segment</summary>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifMapGenerator">
 <summary>Generates map of Exif metadata in order to get known which areas can be safely overwritten without loss of unknown data (maker notes, unknown sub-ifds etc.)</summary>
 <remarks>This is advanced class to advancedly deal with Exif metadata. You usually do not need to use it directly. Just instruct another class to take advantage of this one.</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifMapGenerator.AttachTo(Tools.MetadataT.ExifT.ExifReaderSettings)">
 <summary>Attaches this map generator to given <see cref="T:Tools.MetadataT.ExifT.ExifReaderSettings"/></summary>
 <param name="Settings"><see cref="T:Tools.MetadataT.ExifT.ExifReaderSettings"/> to attach to</param>
 <exception cref="T:System.InvalidOperationException">This instance is already attached</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Settings"/> is null</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifMapGenerator.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifMapGenerator.#ctor(Tools.MetadataT.ExifT.ExifReaderSettings)">
 <summary>CTpr from <see cref="T:Tools.MetadataT.ExifT.ExifReaderSettings"/></summary>
 <param name="Settings"><see cref="T:Tools.MetadataT.ExifT.ExifReaderSettings"/> to attach to</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Settings"/> is null</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifMapGenerator.CreateMap(System.IO.Stream)">
 <summary>Reads all the Exif metadata and creates map of it</summary>
 <param name="Source">Stream which contains the metadata</param>
 <returns>Map of read metadata</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Source"/> is null</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="Source"/> is not zero-lenght and does not support seeking and reeding.</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifMapGenerator.CreateMap(Tools.MetadataT.ExifT.IExifGetter)">
 <summary>Reads all the Exif metadata and creates map of it</summary>
 <param name="Source">Source of exif data</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Source"/> is null</exception>
 <returns>Map of read metadata</returns>
 <exception cref="T:System.InvalidOperationException">Stream obtained from <paramref name="Source"/> is not zero-lenght and does not support seeking and reeding.</exception>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifMapGenerator._Map">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifMapGenerator.Map"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifMapGenerator.Map">
 <summary>After all metadata was read contains map of them</summary>
 <returns>Array that defines which exif metadata are located where in the stream</returns>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifMapGenerator.OnItem(System.Object,Tools.MetadataT.ExifT.ExifReader.ExifEventArgs)">
 <summary>Handles <see cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadItem"/> event and creates the map as metadata are read</summary>
 <param name="sender">Actual instance which parses the metadata</param>
 <param name="e">Event arguments</param>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifReader">
 <summary>Provides low level access to stream of Exif data</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2">Exif data of type ASCII are required to be terminated with nullchar. The nullchar is trimmed.</version>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs">
 <summary>Arguments of event which occures during Exif metedata reading</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs._Skip">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.Skip"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs._CanSkip">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs._ItemStream">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs._ItemObject">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs._ItemKind">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemKind"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs._ItemAbsoluteOffset">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs._ItemLength">
 <summary>Contains value of the the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.Skip">
 <summary>Gets or sets value indicating if current Exif metadata item should be skipped</summary>
 <returns>True to skip the item (do not read its interior), false to read and parse the item</returns>
 <value>Set this property to true to skip part of Exif metadata and save time by skipping reading of information which you do not need.</value>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is valsa and value is being set to true</exception>
 <remarks>When some metadata are skipped, the in-memory representation is incomplete and should not be used for round-trip reads and writes because it can cause data loss.</remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip">
 <summary>Gets value indicating if the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.Skip"/> property can be set to true</summary>
 <returns>True when the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.Skip"/> property can be set to true; false otherwise.</returns>
 <seealso cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.Skip"/>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream">
 <summary>Gets stream that contains data of currently read Exif metadata item</summary>
 <returns>Stream associated with current metadata item or null if no stream is associated.</returns>
 <remarks>The stream always supports seeking and is read-only. The stream posicion can be invalid. Always seek to strem start before reading it!</remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject">
 <summary>Gets object associated with currently read Exif metadata item. Can be null.</summary>
 <returns>Associated object or null when no object is associated</returns>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemKind">
 <summary>Gets value indicating which kind of item was read</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset">
 <summary>Gets absolute position (from start of Exif (TIFF) header) of Exif metadata item beig red</summary>
 <returns>TIFF header-relative position or -1 if position is not set</returns>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength">
 <summary>Gets length of Exif metadata item being read in Bytes</summary>
 <returns>The lenght of bytes or -1 if lenght is not used by this item</returns>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.#ctor(Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds,System.Boolean,System.IO.Stream,System.Object,System.Int64,System.Int64)">
 <summary>CTor</summary>
 <param name="ItemKind">Kind of item being currently read</param>
 <param name="CanSkip">Indicates if calle supports skipping of the item</param>
 <param name="ItemStream">If item has stream, the stream; null otherwise. The item is always represented by whole stream. Handler must seek the streem to zero. Strem must support seeking and reading. Streem position can be initially nonzero, but it does not mena that object data starts at current position. Handler can change position in streem - caller must be able to recover from it.</param>
 <param name="ItemObject">If item can be reprsesented as object, the object; null otherwise</param>
 <exception cref="T:System.ArgumentException"><paramref name="ItemStream"/> is not null and it either does not support seeking or reading (<see cref="P:System.IO.Stream.CanSeek"/> or <see cref="P:System.IO.Stream.CanRead"/> is false)</exception>
 <param name="Pos">Tiff-header realetive position of start of item (-1 if not supported by item)</param>
 <param name="Len">Lenght (in bytes) of item. (-1 if not supported by the item)</param>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds">
 <summary>Kinds of Exif metadata items as reported by reader events</summary>
 <seealso cref="T:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs"/><seealso cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemKind"/>
 <remarks>This enumeration is also used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/>, but only some (the most low-level ones) members are valid for it.</remarks>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Unknown">
 <summary>Not used by <see cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadItem"/>, but used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/> to indicate bytes of unknown purpose in Exif metadata block</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Exif">
 <summary>
 Raised only once at the beginning or reading.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> contains whole strem.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is null.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is true.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is 0.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is length of whole stream.</item>
 </list>
 <para>Caught by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/> to determine length of stream but not used in map.</para></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Bom">
 <summary>
 Raised when the Byte Order mark (BOM) is read. This is the 2nd event and occures only once.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is BOM text ("II" or "MM" or any 2-characters long string in case <see cref="T:System.IO.InvalidDataException"/> passed to <see cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadError"/> will immediatelly follow; you can recover the exception and Little Endian byte order will be used.)</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is 0.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 2.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para>
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.BomTest">
 <summary>
 Raised when the Byte Order mark test is read. This is the 3rd event and occures only once.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is 0x2A (<see cref="T:System.UInt16"/>) (or any other number when unrecoverable <see cref="T:System.IO.InvalidDataException"/> will be throwm immediatelly.)</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is 2.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 2.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para>
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Ifd0Offset">
 <summary>
 Raised when offset to 1st IFD (IFD0) is read. This is the 4th event and occures only once.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is <see cref="T:System.UInt32"/> offset to 1st IFD (usually 0x8)</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is 4.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 4.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para>
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.IfdNumberOfEntries">
 <summary>
 Raised when number of entries in IFD is read. Occurs for each IFD and SubIFD.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is <see cref="T:System.UInt16"/> number of entries</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is position of the number.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 2.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para>
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Ifd">
 <summary>
 Raised before IFD is read.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is null</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is true.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is position of first entry.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 12 * numjber of entries.</item>
 </list>
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TagNumber">
 <summary>
 Raised when tag number is read.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is <see cref="T:System.UInt16"/> tag number</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is position of tag number.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 2.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para>
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TagDataType">
 <summary>
 Raised when tag data type is read.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is <see cref="T:System.UInt16"/> tag data type (see <see cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/>)</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is position of data type number.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 2.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para>
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TagComponents">
 <summary>
 Raised when tag number of components is read.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is <see cref="T:System.UInt32"/> number of components</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is position of tag number of bcomponents.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 4.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para>
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TagDataOrOffset">
 <summary>
 Raised when tag data part is read. Note: Tag data part contains either data or pointer to data depending on if data fits into 4 bytes.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is <see cref="T:System.Byte"/> 4-bytes data part of tag</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is position data part of tag.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 4.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para>
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TagHeader">
 <summary>
 Raised when whole tag header is read, before tag data are parsed.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is null</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is true.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is position of tag number.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 12.</item>
 </list>
 This event carrys no information about tag being red. All necessary informations can be collected from events <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TagNumber"/>, <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TagDataType"/>, <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TagComponents"/> and <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TagDataOrOffset"/> which always preceed this event in given order.
 </summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.ExternalTagData">
 <summary>
 Raised when tag data stored outside of tag are read. Raised ony for tags which has data longer than 4 bytes.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.DirectoryEntry"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is <see cref="T:System.Byte"/> array with data.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is position of data.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is length of data (if previously the <see cref="T:System.InvalidOperationException"/> was recovered the actual lenght of data is less).</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Tag">
 <summary>
 Raised after whole tag if read and parsed
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is <see cref="T:Tools.MetadataT.ExifT.DirectoryEntry"/></item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is -1 (not supported).</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is -1 (not supported).</item>
 </list></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.NextIfdOffset">
 <summary>
 Raised when pointer to next IFD is read at the end of each IFD
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is <see cref="T:System.UInt32"/> pointer to next IFD.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> position of pointer.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is 4.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Thumbnail">
 <summary>
 Raised before thumbnail is read.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is null.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.IfdMain"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is null.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is true.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is -1 (not supported).</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is -1 (not supported).</item>
 </list></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.JpegThumbnail">
 <summary>
 Raised when reading JPEG thumbnail data.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is JPEG thumbnail data stream.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.IfdMain"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is null.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is offset of thumbnail SOI (where JPEG data starts).</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is length of JPEG data.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TiffThumbnailPart">
 <summary>
 Raised when reading part of TIFF thumbnailo data (TIFF thumbnail can be placed in more than one part).
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> is stream to that part of data.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.IfdMain"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is null.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is offset to start of stream of part.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is legnth of part.</item>
 </list><para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TiffThumbNail">
 <summary>
 Raised after all TIFF thumbnail sub-streams are detected.
 <list type="bullet">
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemStream"/> stream of all TIFF thumbnail data.</item>
 <item>Sender is <see cref="T:Tools.MetadataT.ExifT.IfdMain"/>.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemObject"/> is null.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.CanSkip"/> is false.</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemAbsoluteOffset"/> is -1 (not supported).</item>
 <item><see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.ItemLength"/> is -1 (not supported).</item>
 </list></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Empty">
 <summary>Used neither by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/> nor by <see cref="T:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs"/>. Indicates that given byte is unused.</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.SubIfdMask">
 <summary>Or mask that applies to <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.IfdNumberOfEntries"/>, <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Ifd"/> and <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.NextIfdOffset"/>
 to make <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.SubIfdNumberOfEntries"/>, <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.SubIfd"/> and <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.NextSubIfdOffset"/> respectively.
 This value itself is never used as event identifier.</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.SubIfdNumberOfEntries">
 <summary>Same meaning as <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.IfdNumberOfEntries"/> but for SubIFD. <para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.SubIfd">
 <summary>Same meaning as <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Ifd"/> but for SubIFD. <para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.NextSubIfdOffset">
 <summary>Same meaning as <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.NextIfdOffset"/> but for SubIFD. <para>Used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/></para></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.WriterMask">
 <summary>Or mask applied by <see cref="T:Tools.MetadataT.ExifT.ExifWriter"/> to items written by it to distinguish them from original ones. Not used by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/> and <see cref="T:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs"/>.</summary>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext">
 <summary>Run-time read-only representation of <see cref="T:Tools.MetadataT.ExifT.ExifReaderSettings"/></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.ErrorRecovery">
 <summary>Error recovery mode</summary>
 <seealso cref="P:Tools.MetadataT.ExifT.ExifReaderSettings.ErrorRecovery"/>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.ReadThumbnail">
 <summary>True to read thumbnail to <see cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData"/></summary>
 <seealso cref="P:Tools.MetadataT.ExifT.ExifReaderSettings.ReadThumbnail"/>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.ExifReader">
 <summary><see cref="T:Tools.MetadataT.ExifT.ExifReader"/> these settings are valid for</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.OnErrorhandler">
 <summary>Handler of error. </summary>
 <seealso cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadError"/>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.OnItemHandler">
 <summary>Handler for item-read event</summary>
 <seealso cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadItem"/>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext._TiffHeaderOffset">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.TiffHeaderOffset"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.TiffHeaderOffsetSet">
 <summary>Contains value indicating if value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.TiffHeaderOffset"/> was already set</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.TiffHeaderOffset">
 <summary>Absolute of start of TIFF header in all nested streams</summary>
 <returns>In case the stream from which Exif data are read is <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> contains value of the <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.TruePosition"/> property when value of tzhe <see cref="P:System.IO.Stream.Position"/> is zero. In case the stream is not <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> contains zero.</returns>
 <value>Value of this property can be set only once. By default it is done by <see cref="T:Tools.MetadataT.ExifT.ExifReader"/> at the very beginning of reading.</value>
 <exception cref="T:System.InvalidOperationException">Value of the property was alread set and is being set again</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.#ctor(Tools.MetadataT.ExifT.ExifReader,Tools.MetadataT.ExifT.ExifReaderSettings)">
 <summary>CTor</summary><param name="Settings">An <see cref="T:Tools.MetadataT.ExifT.ExifReaderSettings"/> to populate new instance with</param>
 <param name="Owner"><see cref="T:Tools.MetadataT.ExifT.ExifReader"/> these settings are valid for</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Settings"/> is null</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.OnError(System.Exception)">
 <summary>Handles error during Exif parsing - either throws it or returns</summary>
 <param name="Ex"><see cref="T:System.Exception"/> that is about to be thrown</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Ex"/> is null</exception>
 <exception cref="T:System.Exception">Throws <paramref name="Ex"/> when either <see cref="F:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.ErrorRecovery"/> is <see cref="F:Tools.MetadataT.ExifT.ErrorRecoveryModes.ThrowException"/> or <see cref="F:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.ErrorRecovery"/> is <see cref="F:Tools.MetadataT.ExifT.ErrorRecoveryModes.Custom"/> and handler indicates that exception should be thrown.</exception>
 <remarks>The aim of this method is to throw <paramref name="Ex"/> in case is should not be recoverd</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.OnItem(System.Object,Tools.MetadataT.ExifT.ExifReader.ExifEventArgs)">
 <summary>Raises the <see cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadItem"/> event</summary>
 <param name="sender">Actual object that performs reading of now-read part of Exif metadata</param>
 <param name="e">Event arguments</param>
 <returns><paramref name="e"/>.<see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.Skip">Skip</see></returns>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext.OnItem(System.Object,Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds,System.Boolean,System.IO.Stream,System.Object,System.Int64,System.Int64,System.Boolean)">
 <summary>Raqises the <see cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadItem"/> event</summary>
 <param name="sender">Actual object that performs reading of now-read part of Exif metadata</param>
 <param name="Kind">Kind of item being currently read</param>
 <param name="CanSkip">Indicates if calle supports skipping of the item</param>
 <param name="str">If item has stream, the stream; null otherwise. The item is always represented by whole stream. Handler must seek the streem to zero. Strem must support seeking and reading. Streem position can be initially nonzero, but it does not mena that object data starts at current position. Handler can change position in streem - caller must be able to recover from it.</param>
 <param name="obj">If item can be reprsesented as object, the object; null otherwise</param>
 <exception cref="T:System.ArgumentException"><paramref name="ItemStream"/> is not null and it either does not support seeking or reading (<see cref="P:System.IO.Stream.CanSeek"/> or <see cref="P:System.IO.Stream.CanRead"/> is false)</exception>
 <returns>Value indicating if now-read item should be skipped (see <see cref="P:Tools.MetadataT.ExifT.ExifReader.ExifEventArgs.Skip"/>)</returns>
 <param name="MaintainStreamPosition">True to ensure that <see cref="P:System.IO.Stream.Position"/> is same before and after the handler is called</param>
 <param name="Pos">Tiff-header realetive position of start of item (-1 if not supported by item)</param>
 <param name="Len">Lenght (in bytes) of item. (-1 if not supported by the item)</param>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifSubIFDName">
 <summary>Name of Exif Sub IFD (see <see cref="P:Tools.MetadataT.ExifT.SubIfd.Desc"/>)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.GPSSubIFDName">
 <summary>Name of Exif Sub IFD (see <see cref="P:Tools.MetadataT.ExifT.SubIfd.Desc"/>)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.ExifInteroperabilityName">
 <summary>Name of Exif Interoperability Sub IFD (see <see cref="T:Tools.MetadataT.ExifT.IfdInterop"/>)</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.#ctor(System.IO.Stream)">
 <summary>CTor from <see cref="T:System.IO.Stream"/></summary>
 <param name="Stream"><see cref="T:System.IO.Stream"/> that contains Exif data</param>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="Stream"/> is not zero-lenght or null and does not support seeking and reeding.</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.#ctor(Tools.MetadataT.ExifT.IExifGetter)">
 <summary>CTor from <see cref="T:Tools.MetadataT.ExifT.IExifGetter"/></summary>
 <param name="Container">Object that contains <see cref="T:System.IO.Stream"/> with Exif data</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Container"/> is null</exception>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <exception cref="T:System.InvalidOperationException">Stream obtained from <paramref name="Container"/> is not zero-lenght or null and does not support seeking and reeding.</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.#ctor(System.IO.Stream,Tools.MetadataT.ExifT.ExifReaderSettings)">
 <summary>CTor from <see cref="T:System.IO.Stream"/></summary>
 <param name="Stream"><see cref="T:System.IO.Stream"/> that contains Exif data</param>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="Stream"/> is not zero-lenght or null and does not support seeking and reeding.</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.#ctor(Tools.MetadataT.ExifT.IExifGetter,Tools.MetadataT.ExifT.ExifReaderSettings)">
 <summary>CTor from <see cref="T:Tools.MetadataT.ExifT.IExifGetter"/></summary>
 <param name="Container">Object that contains <see cref="T:System.IO.Stream"/> with Exif data</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Container"/> is null</exception>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <exception cref="T:System.InvalidOperationException">Stream obtained from <paramref name="Container"/> is not zero-lenght or null and does not support seeking and reeding.</exception>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader.Settings">
 <summary>Setting that apply on this parsing</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifReader.Parse">
 <summary>Parses stream of Exif data</summary>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.ExifReader.Stream"/> does not support seeking and reading.</exception>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader._Stream">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.Stream"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.Stream">
 <summary>Stream used to obtain Exif data</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader._IFDs">
 <summary>Contains value for the <see cref="P:Tools.MetadataT.ExifT.ExifReader.IFDs"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReader._ByteOrder">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReader.ByteOrder"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.ByteOrder">
 <summary>Byte order used by this <see cref="T:Tools.MetadataT.ExifT.ExifReader"/></summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReader.IFDs">
 <summary>Collection of IFDs (Image File Directories) in this Exif block</summary>
</member>
<member name="T:Tools.MetadataT.ExifT.ErrorRecoveryModes">
 <summary>Defines error recovery modes for <see cref="T:Tools.MetadataT.ExifT.ExifReader"/></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ErrorRecoveryModes.ThrowException">
 <summary>An exception is thrown for each error and reading is terminated</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ErrorRecoveryModes.Recover">
 <summary>If possible, errors are ignored, exceptions are not thrown and reading continues.</summary>
 <remarks>You can get incomplete results in this scenario</remarks>
</member>
<member name="F:Tools.MetadataT.ExifT.ErrorRecoveryModes.Custom">
 <summary>The <see cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadError"/> event is raised. Reading continues (if possible) or terminates depending on event handler</summary>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifReaderSettings">
 <summary>Settings for <see cref="T:Tools.MetadataT.ExifT.ExifReader"/></summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReaderSettings._ErrorRecovery">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReaderSettings.ErrorRecovery"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReaderSettings._ReadThumbnail">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifReaderSettings.ReadThumbnail"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReaderSettings.ErrorRecovery">
 <summary>Gets or sets error recovery mode</summary>
 <returns>Current error recover mode</returns>
 <value>Default value is <see cref="F:Tools.MetadataT.ExifT.ErrorRecoveryModes.ThrowException"/>.</value>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.MetadataT.ExifT.ErrorRecoveryModes"/></exception>
 <remarks>Changes of value of this property after parsing was started does not affect parsing</remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifReaderSettings.ReadThumbnail">
 <summary>Gets or sets value indicating if thumbnail image from exif is read and cached</summary>
 <returns>True if thumbnail is read and cached to <see cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData"/>. False when image is not chached</returns>
 <value>Default value is false</value>
 <remarks>Changes of value of this property after parsing was started does not affect parsing.</remarks>
</member>
<member name="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadError">
 <summary>Event is raised when there is an error during reading of Exif data and <see cref="P:Tools.MetadataT.ExifT.ExifReaderSettings.ErrorRecovery"/> is <see cref="F:Tools.MetadataT.ExifT.ErrorRecoveryModes.Custom"/></summary>
 <remarks>Handler can decide to throw an exception or to recover. However it is not guaranted that recovery is always possible.
 <para>Handlers added after parsing was started are ignored.</para>
 <para>Allowing reader to recover from error can cause the in-memory representation of Exif metadata to be incomplete. Incomplete representation should never be used for round-trip reads and writes because it can cause data losss.</para>
 </remarks>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReaderSettings.ReadErrorHandler">
 <summary>Contains invocation list for the <see cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadError"/> event</summary>
</member>
<member name="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadItem">
 <summary>Event raised when Exif metadata item is encountered</summary>
 <remarks>Handlers added after parsing was started are ignored.
 <para>The only generic way to cancel reading of Exif metadata before it is completed is throwin an exception from handler. Some Exif items can be skipped.</para></remarks>
 <param name="sender">The actual object which implements reading of current item.</param>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifReaderSettings.ReadItemEventHandler">
 <summary>Contains invocatipon list for the <see cref="E:Tools.MetadataT.ExifT.ExifReaderSettings.ReadItem"/> event</summary>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdMain">
 <summary>Exif main and thumbnail IFD</summary>
 <version stage="Nightly" version="1.5.2">Several <see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added for properties that should not be shown in property grid</version>
 <version version="1.5.2"><see cref="T:System.ComponentModel.TypeConverterAttribute"/>(<see cref="T:System.ComponentModel.ExpandableObjectConverter"/>) added for <see cref="P:Tools.MetadataT.ExifT.IfdMain.ExifSubIFD"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.GPSSubIFD"/>.</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdMain.Tags">
 <summary>Tag numbers used in IFD0 and IFD1</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added for enum items.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.ExifIFD">
 <summary>Exif IFD Pointer</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.GPSIFD">
 <summary>GPS Info IFD Pointer</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.ImageWidth">
 <summary>Image width</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.ImageLength">
 <summary>Image height</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.BitsPerSample">
 <summary>Number of bits per component</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.Compression">
 <summary>Compression scheme</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.PhotometricInterpretation">
 <summary>Pixel composition</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.Orientation">
 <summary>Orientation of image</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.SamplesPerPixel">
 <summary>Number of components</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.PlanarConfiguration">
 <summary>Image data arrangement</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.YCbCrSubSampling">
 <summary>Subsampling ratio of Y to C</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.YCbCrPositioning">
 <summary>Y and C positioning</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.XResolution">
 <summary>Image resolution in width direction</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.YResolution">
 <summary>Image resolution in height direction</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.ResolutionUnit">
 <summary>Unit of X and Y resolution</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.StripOffsets">
 <summary>Image data location</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.RowsPerStrip">
 <summary>Number of rows per strip</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.StripByteCounts">
 <summary>Bytes per compressed strip</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.JPEGInterchangeFormat">
 <summary>Offset to JPEG SOI</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.JPEGInterchangeFormatLength">
 <summary>Bytes of JPEG data</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.TransferFunction">
 <summary>Transfer function</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.WhitePoint">
 <summary>White point chromaticity</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.PrimaryChromaticities">
 <summary>Chromaticities of primaries</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.YCbCrCoefficients">
 <summary>Color space transformation matrix coefficients</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.ReferenceBlackWhite">
 <summary>Pair of black and white reference values</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.DateTime">
 <summary>File change date and time</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.ImageDescription">
 <summary>Image title</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.Make">
 <summary>Image input equipment manufacturer</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.Model">
 <summary>Image input equipment model</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.Software">
 <summary>Software used</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.Artist">
 <summary>Person who created the image</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.Tags.Copyright">
 <summary>Copyright holder</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.ExifIFD">
 <summary>Exif IFD Pointer</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.GPSIFD">
 <summary>GPS Info IFD Pointer</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.ImageWidth">
 <summary>Image width</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.ImageLength">
 <summary>Image height</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.BitsPerSample">
 <summary>Number of bits per component</summary>
 <returns>Typical number of items in an array returned by this property is 3.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 3 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdMain.CompressionValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed">
 <summary>uncompressed</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.JPEG">
 <summary>JPEG compression (thumbnails only)</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.Compression">
 <summary>Compression scheme</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.CompressionValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretationValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretation"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretationValues.RGB">
 <summary>RGB</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretationValues.YCbCr">
 <summary>YCbCr</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretation">
 <summary>Pixel composition</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretationValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdMain.OrientationValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdMain.Orientation"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.OrientationValues.TopLeft">
 <summary>The 0th row is at the visual top of the image, and the 0th column is the visual left-hand side.</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.OrientationValues.TopRight">
 <summary>The 0th row is at the visual top of the image, and the 0th column is the visual right-hand side.</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.OrientationValues.BottomRight">
 <summary>The 0th row is at the visual bottom of the image, and the 0th column is the visual right-hand side.</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.OrientationValues.BottomLeft">
 <summary>The 0th row is at the visual bottom of the image, and the 0th column is the visual left-hand side.</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.OrientationValues.LeftTop">
 <summary>The 0th row is the visual left-hand side of the image, and the 0th column is the visual top.</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.OrientationValues.RightTop">
 <summary>The 0th row is the visual right-hand side of the image, and the 0th column is the visual top.</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.OrientationValues.RightBottom">
 <summary>The 0th row is the visual right-hand side of the image, and the 0th column is the visual bottom.</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.OrientationValues.LeftBottom">
 <summary>The 0th row is the visual left-hand side of the image, and the 0th column is the visual bottom.</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.Orientation">
 <summary>Orientation of image</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.OrientationValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.SamplesPerPixel">
 <summary>Number of components</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdMain.PlanarConfigurationValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdMain.PlanarConfiguration"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.PlanarConfigurationValues.Chunky">
 <summary>chunky format</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.PlanarConfigurationValues.Planar">
 <summary>planar format</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.PlanarConfiguration">
 <summary>Image data arrangement</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.PlanarConfigurationValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.YCbCrSubSampling">
 <summary>Subsampling ratio of Y to C</summary>
 <returns>Typical number of items in an array returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 2 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdMain.YCbCrPositioningValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdMain.YCbCrPositioning"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.YCbCrPositioningValues.Centered">
 <summary>centered</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.YCbCrPositioningValues.Cosited">
 <summary>co-sited</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.YCbCrPositioning">
 <summary>Y and C positioning</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.YCbCrPositioningValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.XResolution">
 <summary>Image resolution in width direction</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.YResolution">
 <summary>Image resolution in height direction</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.ResolutionUnit">
 <summary>Unit of X and Y resolution</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.StripOffsets">
 <summary>Image data location</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.RowsPerStrip">
 <summary>Number of rows per strip</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.StripByteCounts">
 <summary>Bytes per compressed strip</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.JPEGInterchangeFormat">
 <summary>Offset to JPEG SOI</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.JPEGInterchangeFormatLength">
 <summary>Bytes of JPEG data</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.TransferFunction">
 <summary>Transfer function</summary>
 <returns>Typical number of items in an array returned by this property is 768.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 768 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.WhitePoint">
 <summary>White point chromaticity</summary>
 <returns>Typical number of items in an array returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 2 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.PrimaryChromaticities">
 <summary>Chromaticities of primaries</summary>
 <returns>Typical number of items in an array returned by this property is 6.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 6 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.YCbCrCoefficients">
 <summary>Color space transformation matrix coefficients</summary>
 <returns>Typical number of items in an array returned by this property is 3.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 3 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.ReferenceBlackWhite">
 <summary>Pair of black and white reference values</summary>
 <returns>Typical number of items in an array returned by this property is 6.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 6 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.DateTime">
 <summary>File change date and time</summary>
 <returns>Typical number of characters in a string returned by this property is 20.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 19 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.ImageDescription">
 <summary>Image title</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.Make">
 <summary>Image input equipment manufacturer</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.Model">
 <summary>Image input equipment model</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.Software">
 <summary>Software used</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.Artist">
 <summary>Person who created the image</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.Copyright">
 <summary>Copyright holder</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.#ctor">
 <summary>CTor - empty IFD</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.#ctor(Tools.MetadataT.ExifT.ExifIfdReader,System.Boolean)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
 <param name="AutoReadNext">Automatically read IFDs that follow this one</param>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.#ctor(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.ReadNextIFDs(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>Reads IFDs following this one</summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that read this IFD</param>
 <remarks>This implementation reads all the IFDs that follows (are pointed by) this instance. Newly read IFDs are of type <see cref="T:Tools.MetadataT.ExifT.IfdMain"/>.</remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.Record(Tools.MetadataT.ExifT.IfdMain.Tags)">
 <summary>Gets or sets value of specified record</summary>
 <param name="Type">Recognized tagname of record that determines data type as well as number of components</param>
 <value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
 <returns>Value of record with tag number specified by <paramref name="Type"/> if type for this tag number specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.ReadStandardSubIFDs(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>Reads known subIFDs nested within this IFD.</summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Reader"/> is null.</exception>
 <remarks><para>Note: This method is called by CTor if the <see cref="T:Tools.MetadataT.ExifT.Ifd"/> class after all records have been initialized.
 This method is not intended to be called directly from user code.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.OnSubIFDAddingAlways(System.Int32,Tools.MetadataT.ExifT.SubIfd,Tools.ComponentModelT.CancelMessageEventArgs)">
 <summary>Handles adding of subIFD from any reason before it is addaed. This event can be cancelled.</summary>
 <param name="Item">Item being added</param>
 <param name="e">Event that supports cancelling</param>
 <param name="Key">Record number which points to subIFD being added. This is always value form range of <see cref="T:System.UInt16"/>.</param>
 <remarks>This methods calls base class method <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAddingAlways(System.Int32,Tools.MetadataT.ExifT.SubIfd,Tools.ComponentModelT.CancelMessageEventArgs)"/>.
 Then ensures that SubIFD on key <see cref="F:Tools.MetadataT.ExifT.IfdMain.Tags.GPSIFD"/> is always of type <see cref="T:Tools.MetadataT.ExifT.IfdGps"/> and at <see cref="F:Tools.MetadataT.ExifT.IfdMain.Tags.ExifIFD"/> is always of type <see cref="T:Tools.MetadataT.ExifT.IfdExif"/></remarks>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Key"/> is not within range of values of <see cref="T:System.UInt32"/></exception>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.ExifSubIFD">
 <summary>Gets or sets Exif IFD nested within this IFD</summary>
 <returns>Exif IFD nested in this IFD or null</returns>
 <value>You can set or replace Exif SubIFD by setting this property. By setting it to null you can remove it.</value>
 <version version="1.5.2"><see cref="T:System.ComponentModel.TypeConverterAttribute"/>(<see cref="T:System.ComponentModel.ExpandableObjectConverter"/>) added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.GPSSubIFD">
 <summary>Gets or sets GPS IFD nested within this IFD</summary>
 <returns>GPS IFD nested in this IFD or null</returns>
 <value>You can set or replace GPS SubIFD by setting this property. By setting it to null you can remove it.</value>
 <version version="1.5.2"><see cref="T:System.ComponentModel.TypeConverterAttribute"/>(<see cref="T:System.ComponentModel.ExpandableObjectConverter"/>) added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.HasThumbnail">
 <summary>Gets value indicating if this Exif contains link to thumbnail</summary>
 <returns>True if <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.JPEG"/> and both <see cref="P:Tools.MetadataT.ExifT.IfdMain.JPEGInterchangeFormat"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.JPEGInterchangeFormatLength"/> are set or <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/> and both <see cref="P:Tools.MetadataT.ExifT.IfdMain.StripOffsets"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.StripByteCounts"/> are set.</returns>
 <remarks>This property may return true even if <see cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.Thumbnail"/> return null. This is caused by the fat that reading thumbnail was not allowed during file parsing.
 In such case thumbnail can be obtained using either <see cref="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnailRawStream(Tools.MetadataT.ExifT.ExifReader)"/> or <see cref="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnail(Tools.MetadataT.ExifT.ExifReader)"/>, but you must have acces to original <see cref="T:Tools.MetadataT.ExifT.ExifReader"/> which was source for this instance.</remarks>
 <seealso cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData"/><seealso cref="P:Tools.MetadataT.ExifT.IfdMain.Thumbnail"/>
 <seelso cref="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnail(Tools.MetadataT.ExifT.ExifReader)"/><seealso cref="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnailRawStream(Tools.MetadataT.ExifT.ExifReader)"/>
 <version version="1.5.2"><see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain._ThumbnailData">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain.ByteOrder">
 <summary>Keeps byte order of original file (for purposes of thumbnail extraction)</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData">
 <summary>Gets thumbnail data as array of bytes</summary>
 <returns>Image data of thumbnail embdeded in this IFD or null when thumbnail is not present or have not been parsed out.</returns>
 <seealso cref="P:Tools.MetadataT.ExifT.IfdMain.Thumbnail"/><seealso cref="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnailRawStream(Tools.MetadataT.ExifT.ExifReader)"/>
 <version version="1.5.2"><see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.Thumbnail">
 <summary>Gets thumbnail image embdeded in this IFD</summary>
 <returns>Enmdeded thumbnail image or null</returns>
 <exception cref="T:System.InvalidOperationException">Image data are invalid =or= <see cref="P:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretation"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretationValues"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/> =or= <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.CompressionValues"/></exception>
 <seealso cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData"/><seealso cref="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnail(Tools.MetadataT.ExifT.ExifReader)"/>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnailRawStream(Tools.MetadataT.ExifT.ExifReader,Tools.MetadataT.ExifT.ExifReader.ExifReaderContext)">
 <summary>Gtes stream that contains raw thumbnail data</summary>
 <param name="Reader">Original reader that was used to retrieve all exif information from image. The reader must contain exactly same data this IFD was constructed from otherwise corrupted thumbnail image may be returned.</param>
 <param name="Context">Settings applicable to reading</param>
 <returns>Stream to read image data. Format of image data depends on <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> and if <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/> also depends on <see cref="P:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretation"/>. Returns null if <see cref="P:Tools.MetadataT.ExifT.IfdMain.HasThumbnail"/> is false.</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/> and lengths of <see cref="P:Tools.MetadataT.ExifT.IfdMain.StripOffsets"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.StripByteCounts"/> differs.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Reader"/> is null.</exception>
 <exception cref="T:System.IO.InvalidDataException">Thumbnail size and offsets are specified in such way that thumbnail data are located otside of Exif stream.</exception>
 <remarks>In order tu succsefully retrieve image thumbnail data the <paramref name="Reader"/>.<see cref="P:Tools.MetadataT.ExifT.ExifReader.Stream"/> must be the same strem this IFD was constructed from and must not be closed.</remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnail(Tools.MetadataT.ExifT.ExifReader)"/><seealso cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData"/>
 <version version="1.5.2"><see cref="T:System.IO.InvalidDataException"/> added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnailRawStream(Tools.MetadataT.ExifT.ExifReader)">
 <summary>Gets stream that contains raw thumbnail data</summary>
 <param name="Reader">Original reader that was used to retrieve all exif information from image. The reader must contain exactly same data this IFD was constructed from otherwise corrupted thumbnail image may be returned.</param>
 <returns>Stream to read image data. Format of image data depends on <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> and if <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/> also depends on <see cref="P:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretation"/>. Returns null if <see cref="P:Tools.MetadataT.ExifT.IfdMain.HasThumbnail"/> is false.</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/> and lengths of <see cref="P:Tools.MetadataT.ExifT.IfdMain.StripOffsets"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.StripByteCounts"/> differs.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Reader"/> is null.</exception>
 <exception cref="T:System.IO.InvalidDataException">Thumbnail size and offsets are specified in such way that thumbnail data are located otside of Exif stream.</exception>
 <remarks>In order tu succsefully retrieve image thumbnail data the <paramref name="Reader"/>.<see cref="P:Tools.MetadataT.ExifT.ExifReader.Stream"/> must be the same strem this IFD was constructed from and must not be closed.</remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnail(Tools.MetadataT.ExifT.ExifReader)"/><seealso cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData"/>
 <version version="1.5.2"><see cref="T:System.IO.InvalidDataException"/> added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnail(Tools.MetadataT.ExifT.ExifReader)">
 <summary>Gerts thumbnail image embdeded in this IFD</summary>
 <param name="Reader">Original reader that was used to retrieve all exif information from image. The reader must contain exactly same data this IFD was constructed from otherwise corrupted thumbnail image may be returned.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/> and lengths of <see cref="P:Tools.MetadataT.ExifT.IfdMain.StripOffsets"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.StripByteCounts"/> differs.
 -or- <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretation"/> is not set or is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretationValues"/> -or- 
 Image data are invalid.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Reader"/> is null.</exception>
 <exception cref="T:System.IO.InvalidDataException">Thumbnail size and offsets are specified in such way that thumbnail data are located otside of Exif stream.</exception>
 <remarks>In order tu succsefully retrieve image thumbnail data the <paramref name="Reader"/>.<see cref="P:Tools.MetadataT.ExifT.ExifReader.Stream"/> must be the same strem this IFD was constructed from and must not be closed.</remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnailRawStream(Tools.MetadataT.ExifT.ExifReader)"/><seealso cref="P:Tools.MetadataT.ExifT.IfdMain.Thumbnail"/>
 <version version="1.5.2"><see cref="T:System.IO.InvalidDataException"/> added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.GetThumbnailFromStream(System.IO.Stream,Tools.IOt.BinaryReader.ByteAlign)">
 <summary>Creates thumbnail image from raw thumbnail data stored as stored in Exif</summary>
 <param name="ImageData">Raw image data to create thumbnail from</param>
 <returns>Image created from <paramref name="ImageData"/></returns>
 <exception cref="T:System.InvalidOperationException">Image data are invalid =or= <see cref="P:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretation"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.PhotometricInterpretationValues"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/> =or= <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdMain.CompressionValues"/></exception>
 <param name="ByteAlign">Byte align of source stream</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="ByteAlign"/> is not member of <see cref="T:Tools.IOt.BinaryReader.ByteAlign"/> and <see cref="P:Tools.MetadataT.ExifT.IfdMain.Compression"/> is <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/>.</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.SetThumbnail(System.Drawing.Image,Tools.MetadataT.ExifT.IfdMain.CompressionValues)">
 <summary>Changes thumbnail in this IFD. Do not use with IFD0.</summary>
 <param name="Image">Image to use as thumbnail</param>
 <param name="ImageFormat">Format of thumbnail</param>
 <remarks><para>Setting thumbnail on IFD causes all records and subIFDs to be removed and replaced. Do not use this method with 1ss IFD (IFD0) of image or you will loose all the Exif data in <see cref="P:Tools.MetadataT.ExifT.IfdMain.ExifSubIFD"/>.</para>
 <para>This method is not CLS-compliant, but there is CLS-compliant overload.</para></remarks>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdMain._ThumbnailChanged">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailChanged"/></summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailChanged">
 <summary>Gets value indicating if thumbnail was changed</summary>
 <returns>True when thumbnail was changed using <see cref="M:Tools.MetadataT.ExifT.IfdMain.SetThumbnail(System.Drawing.Image,System.Boolean)"/></returns>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.SetThumbnail(System.Drawing.Image,System.Boolean)">
 <summary>Changes thumbnail in this IFD. Do not use with IFD0. (CLS-compliant overload)</summary>
 <param name="Image">Image to use as thumbnail</param>
 <param name="UseJpegFormat">True to use <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.JPEG"/>, false to use <see cref="F:Tools.MetadataT.ExifT.IfdMain.CompressionValues.uncompressed"/></param>
 <remarks><para>Setting thumbnail on IFD causes all records and subIFDs to be removed and replaced. Do not use this method with 1ss IFD (IFD0) of image or you will loose all the Exif data in <see cref="P:Tools.MetadataT.ExifT.IfdMain.ExifSubIFD"/>.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdMain.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <remarks>This clones current IFD and all its subIFDs. Resulting subIFD is not bound to <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> and has no <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> and <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/>. <see cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailData"/> is cloned as well and <see cref="P:Tools.MetadataT.ExifT.IfdMain.ThumbnailChanged"/> is set to true.</remarks>
 <version version="1.5.2">Method added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdMain.TagFormat(System.UInt16)">
 <summary>Gets format for tag specified</summary>
 <param name="Tag">Tag record number in current IFD</param>
 <returns>If <paramref name="tag"/> is known by current implementation returns its typical description. Null if tag is not known.</returns>
 <version version="1.5.4">This property overload is new in version 1.5.4</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif">
 <summary>Exif Sub IFD</summary>
 <version stage="Nightly" version="1.5.2">Several <see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added for properties that should not be shown in property grid</version>
 <version version="1.5.2"><see cref="T:System.ComponentModel.TypeConverterAttribute"/>(<see cref="T:System.ComponentModel.ExpandableObjectConverter"/>) added for <see cref="P:Tools.MetadataT.ExifT.IfdExif.InteropSubIFD"/>.</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.Tags">
 <summary>Tag numbers used in Exif Sub IFD</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added for enum items.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.InteroperabilityIFD">
 <summary>Interoperability IFD Pointer</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ExifVersion">
 <summary>Exif version</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.FlashpixVersion">
 <summary>Supported Flashpix version</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ColorSpace">
 <summary>Color space information</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ComponentsConfiguration">
 <summary>Meaning of each component</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.CompressedBitsPerPixel">
 <summary>Image compression mode</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.PixelXDimension">
 <summary>Valid image width</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.PixelYDimension">
 <summary>Valid image height</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.MakerNote">
 <summary>Manufacturer notes</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.UserComment">
 <summary>User comments</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.RelatedSoundFile">
 <summary>Related audio file</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.DateTimeOriginal">
 <summary>Date and time of original data generation</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
 <version version="1.5.3">Expected number of components changed from 20 to 19. This is ad-hoc fix date format compatibility issues.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.DateTimeDigitized">
 <summary>Date and time of digital data generation</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
 <version version="1.5.3">Expected number of components changed from 20 to 19. This is ad-hoc fix date format compatibility issues.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SubSecTime">
 <summary>DateTime subseconds</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SubSecTimeOriginal">
 <summary>DateTimeOriginal subseconds</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SubSecTimeDigitized">
 <summary>DateTimeDigitized subseconds</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ExposureTime">
 <summary>Exposure time</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.FNumber">
 <summary>F number</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ExposureProgram">
 <summary>Exposure program</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SpectralSensitivity">
 <summary>Spectral sensitivity</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ISOSpeedRatings">
 <summary>ISO speed rating</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.OECF">
 <summary>Optoelectric conversion factor</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ShutterSpeedValue">
 <summary>Shutter speed</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ApertureValue">
 <summary>Aperture</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.BrightnessValue">
 <summary>Brightness</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ExposureBiasValue">
 <summary>Exposure bias</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.MaxApertureValue">
 <summary>Maximum lens aperture</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SubjectDistance">
 <summary>Subject distance</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.MeteringMode">
 <summary>Metering mode</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.LightSource">
 <summary>Light source</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.Flash">
 <summary>Flash</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.FocalLength">
 <summary>Lens focal length</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SubjectArea">
 <summary>Subject area</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.FlashEnergy">
 <summary>Flash energy</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SpatialFrequencyResponse">
 <summary>Spatial frequency response</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.FocalPlaneXResolution">
 <summary>Focal plane X resolution</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.FocalPlaneYResolution">
 <summary>Focal plane Y resolution</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.FocalPlaneResolutionUnit">
 <summary>Focal plane resolution unit</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SubjectLocation">
 <summary>Subject location</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ExposureIndex">
 <summary>Exposure index</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SensingMethod">
 <summary>Sensing method</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.FileSource">
 <summary>File source</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SceneType">
 <summary>Scene type</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.CFAPattern">
 <summary>CFA pattern</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.CustomRendered">
 <summary>Custom image processing</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ExposureMode">
 <summary>Exposure mode</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.WhiteBalance">
 <summary>White balance</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.DigitalZoomRatio">
 <summary>Digital zoom ratio</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.FocalLengthIn35mmFilm">
 <summary>Focal length in 35 mm film</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SceneCaptureType">
 <summary>Scene capture type</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.GainControl">
 <summary>Gain control</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.Contrast">
 <summary>Contrast</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.Saturation">
 <summary>Saturation</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.Sharpness">
 <summary>Sharpness</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.DeviceSettingDescription">
 <summary>Device settings description</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.SubjectDistanceRange">
 <summary>Subject distance range</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.Tags.ImageUniqueID">
 <summary>Unique image ID</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.InteroperabilityIFD">
 <summary>Interoperability IFD Pointer</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ExifVersion">
 <summary>Exif version</summary>
 <returns>Typical number of items in an array returned by this property is 4.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 4 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.FlashpixVersionValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.FlashpixVersion"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.FlashpixVersionValues.Flashpix10">
 <summary>Flashpix Format Version 1.0</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.FlashpixVersion">
 <summary>Supported Flashpix version</summary>
 <returns>Typical number of items in an array returned by this property is 4.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 4 items</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.FlashpixVersionValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.ColorSpaceValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.ColorSpace"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ColorSpaceValues.sRGB">
 <summary>sRGB</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ColorSpaceValues.Uncalibrated">
 <summary>Uncalibrated</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ColorSpace">
 <summary>Color space information</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.ColorSpaceValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.ComponentsConfigurationValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.ComponentsConfiguration"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ComponentsConfigurationValues.DoesNotExist">
 <summary>does not exist</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ComponentsConfigurationValues.Y">
 <summary>Y</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ComponentsConfigurationValues.Cb">
 <summary>Cb</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ComponentsConfigurationValues.Cr">
 <summary>Cr</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ComponentsConfigurationValues.R">
 <summary>R</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ComponentsConfigurationValues.G">
 <summary>G</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ComponentsConfigurationValues.B">
 <summary>B</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ComponentsConfiguration">
 <summary>Meaning of each component</summary>
 <returns>Typical number of items in an array returned by this property is 4.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 4 items</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.ComponentsConfigurationValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.CompressedBitsPerPixel">
 <summary>Image compression mode</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.PixelXDimension">
 <summary>Valid image width</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.PixelYDimension">
 <summary>Valid image height</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.MakerNote">
 <summary>Manufacturer notes</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.UserComment">
 <summary>User comments</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.RelatedSoundFile">
 <summary>Related audio file</summary>
 <returns>Typical number of characters in a string returned by this property is 13.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 12 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.DateTimeOriginal">
 <summary>Date and time of original data generation</summary>
 <returns>Typical number of characters in a string returned by this property is 19.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 18 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.DateTimeDigitized">
 <summary>Date and time of digital data generation</summary>
 <returns>Typical number of characters in a string returned by this property is 19.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 18 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SubSecTime">
 <summary>DateTime subseconds</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SubSecTimeOriginal">
 <summary>DateTimeOriginal subseconds</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SubSecTimeDigitized">
 <summary>DateTimeDigitized subseconds</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ExposureTime">
 <summary>Exposure time</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.FNumber">
 <summary>F number</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.ExposureProgram"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues.NotDefined">
 <summary>Not defined</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues.Manual">
 <summary>Manual</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues.NormalProgram">
 <summary>Normal program</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues.AperturePriority">
 <summary>Aperture priority</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues.ShutterPriority">
 <summary>Shutter priority</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues.CreativeProgram">
 <summary>Creative program (biased toward depth of field)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues.ActionProgram">
 <summary>Action program (biased toward fast shutter speed)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues.PortraitMode">
 <summary>Portrait mode (for closeup photos with the background out of focus)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues.LandscapeMode">
 <summary>Landscape mode (for landscape photos with the background in focus)</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ExposureProgram">
 <summary>Exposure program</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.ExposureProgramValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SpectralSensitivity">
 <summary>Spectral sensitivity</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ISOSpeedRatings">
 <summary>ISO speed rating</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.OECF">
 <summary>Optoelectric conversion factor</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ShutterSpeedValue">
 <summary>Shutter speed</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ApertureValue">
 <summary>Aperture</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.BrightnessValue">
 <summary>Brightness</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ExposureBiasValue">
 <summary>Exposure bias</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.MaxApertureValue">
 <summary>Maximum lens aperture</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SubjectDistance">
 <summary>Subject distance</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.MeteringMode"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues.Unknown">
 <summary>unknown</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues.Average">
 <summary>Average</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues.CenterWeightedAverage">
 <summary>Center weighted average</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues.Spot">
 <summary>Spot</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues.MultiSpot">
 <summary>MultiSpot</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues.Pattern">
 <summary>Pattern</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues.PartialMode">
 <summary>Partial</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues.Other">
 <summary>Other</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.MeteringMode">
 <summary>Metering mode</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.MeteringModeValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.LightSourceValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.LightSource"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.unknown">
 <summary>unknown</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.Daylight">
 <summary>Daylight</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.Fluorescent">
 <summary>Fluorescent</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.Tungsten">
 <summary>Tungsten (incandescent light)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.Flash">
 <summary>Flash</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.FineWeather">
 <summary>Fine weather</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.CloudyWeather">
 <summary>Cloudy weather</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.Shade">
 <summary>Shade</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.DaylightFluorescent">
 <summary>Daylight fluorescent (D 5700 – 7100K)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.DayWhiteFluorescent">
 <summary>Day white fluorescent (N 4600 – 5400K)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.CoolWhiteFluorescent">
 <summary>Cool white fluorescent (W 3900 – 4500K)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.WhiteFluorescent">
 <summary>White fluorescent (WW 3200 – 3700K)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.StandardLightA">
 <summary>Standard light A</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.StandardLightB">
 <summary>Standard light B</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.StandardLightC">
 <summary>Standard light C</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.D55">
 <summary>D55</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.D65">
 <summary>D65</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.D75">
 <summary>D75</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.D50">
 <summary>D50</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.ISOStudioTungsten">
 <summary>ISO studio tungsten</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.LightSourceValues.OtherLightSource">
 <summary>other light source</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.LightSource">
 <summary>Light source</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.LightSourceValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.Flash">
 <summary>Flash</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.FocalLength">
 <summary>Lens focal length</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SubjectArea">
 <summary>Subject area</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.FlashEnergy">
 <summary>Flash energy</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SpatialFrequencyResponse">
 <summary>Spatial frequency response</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.FocalPlaneXResolution">
 <summary>Focal plane X resolution</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.FocalPlaneYResolution">
 <summary>Focal plane Y resolution</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.FocalPlaneResolutionUnit">
 <summary>Focal plane resolution unit</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SubjectLocation">
 <summary>Subject location</summary>
 <returns>Typical number of items in an array returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 2 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ExposureIndex">
 <summary>Exposure index</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.SensingMethodValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.SensingMethod"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SensingMethodValues.NotDefined">
 <summary>Not defined</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SensingMethodValues.OneChipColorAreaSensor">
 <summary>One-chip color area sensor</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SensingMethodValues.TwoChipColorAreaSensor">
 <summary>Two-chip color area sensor</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SensingMethodValues.ThreeChipColorAreaSensor">
 <summary>Three-chip color area sensor</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SensingMethodValues.ColorSequentialAreaSensor">
 <summary>Color sequential area sensor</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SensingMethodValues.TrilinearSensor">
 <summary>Trilinear sensor</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SensingMethodValues.ColorSequentialLinearSensor">
 <summary>Color sequential linear sensor</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SensingMethod">
 <summary>Sensing method</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.SensingMethodValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.FileSourceValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.FileSource"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.FileSourceValues.DSC">
 <summary>DSC</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.FileSource">
 <summary>File source</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.FileSourceValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SceneType">
 <summary>Scene type</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.CFAPattern">
 <summary>CFA pattern</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.CustomRenderedValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.CustomRendered"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.CustomRenderedValues.NormalProcess">
 <summary>Normal process</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.CustomRenderedValues.Customrocess">
 <summary>Custom process</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.CustomRendered">
 <summary>Custom image processing</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.CustomRenderedValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.ExposureModeValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.ExposureMode"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureModeValues.AutoExposure">
 <summary>Auto exposure</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureModeValues.ManualExposure">
 <summary>Manual exposure</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExposureModeValues.AutoBracket">
 <summary>Auto bracket</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ExposureMode">
 <summary>Exposure mode</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.ExposureModeValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.WhiteBalanceValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.WhiteBalance"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.WhiteBalanceValues.Auto">
 <summary>Auto white balance</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.WhiteBalanceValues.Manual">
 <summary>Manual white balance</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.WhiteBalance">
 <summary>White balance</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.WhiteBalanceValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.DigitalZoomRatio">
 <summary>Digital zoom ratio</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.FocalLengthIn35mmFilmValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.FocalLengthIn35mmFilm"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.FocalLengthIn35mmFilmValues.Standard">
 <summary>Standard</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.FocalLengthIn35mmFilmValues.Landscape">
 <summary>Landscape</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.FocalLengthIn35mmFilmValues.Portrait">
 <summary>Portrait</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.FocalLengthIn35mmFilmValues.NightScene">
 <summary>Night scene</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.FocalLengthIn35mmFilm">
 <summary>Focal length in 35 mm film</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.FocalLengthIn35mmFilmValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SceneCaptureType">
 <summary>Scene capture type</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.GainControlValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.GainControl"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.GainControlValues.None">
 <summary>None</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.GainControlValues.LowGainUp">
 <summary>Low gain up</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.GainControlValues.HighGainUp">
 <summary>High gain up</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.GainControlValues.LowGainDown">
 <summary>Low gain down</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.GainControlValues.HighGainDown">
 <summary>High gain down</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.GainControl">
 <summary>Gain control</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.GainControlValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.ContrastValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.Contrast"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ContrastValues.Normal">
 <summary>Normal</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ContrastValues.Soft">
 <summary>Soft</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ContrastValues.Hard">
 <summary>Hard</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.Contrast">
 <summary>Contrast</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.ContrastValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.SaturationValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.Saturation"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SaturationValues.Normal">
 <summary>Normal</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SaturationValues.Low">
 <summary>Low saturation</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SaturationValues.High">
 <summary>High saturation</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.Saturation">
 <summary>Saturation</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.SaturationValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.SharpnessValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.Sharpness"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SharpnessValues.Normal">
 <summary>Normal</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SharpnessValues.Soft">
 <summary>Soft</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SharpnessValues.Hard">
 <summary>Hard</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.Sharpness">
 <summary>Sharpness</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.SharpnessValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.DeviceSettingDescription">
 <summary>Device settings description</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdExif.SubjectDistanceRangeValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.SubjectDistanceRange"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SubjectDistanceRangeValues.unknown">
 <summary>unknown</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SubjectDistanceRangeValues.Macro">
 <summary>Macro</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SubjectDistanceRangeValues.CloseView">
 <summary>Close view</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.SubjectDistanceRangeValues.DistantView">
 <summary>Distant view</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.SubjectDistanceRange">
 <summary>Subject distance range</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdExif.SubjectDistanceRangeValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.ImageUniqueID">
 <summary>Unique image ID</summary>
 <returns>Typical number of characters in a string returned by this property is 33.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 32 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdExif.#ctor">
 <summary>CTor - empty IFD</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdExif.#ctor(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdExif.#ctor(Tools.MetadataT.ExifT.ExifIfdReader,System.Boolean)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
 <param name="AutoReadNext">Automatically read IFDs tha follows this one</param>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.Record(Tools.MetadataT.ExifT.IfdExif.Tags)">
 <summary>Gets or sets value of specified record</summary>
 <param name="Type">Recognized tagname of record that determines data type as well as number of components</param>
 <value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
 <returns>Value of record with tag number specified by <paramref name="Type"/> if type for this tag number specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdExif.ReadStandardSubIFDs(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>Reads known subIFDs nested within this IFD.</summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Reader"/> is null.</exception>
 <remarks><para>Note: This method is called by CTor if the <see cref="T:Tools.MetadataT.ExifT.Ifd"/> class after all records have been initialized.
 This method is not intended to be called directly from user code.</para></remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.InteropSubIFD">
 <summary>Gets or sets interoperability IFD nested within this IFD</summary>
 <returns>Interoperability IFD nested in this ExifSubIFD or null</returns>
 <value>You can set or replace interoperability SubIFD by setting this property. By setting it to null you can remove it.</value>
 <version version="1.5.2"><see cref="T:System.ComponentModel.TypeConverterAttribute"/>(<see cref="T:System.ComponentModel.ExpandableObjectConverter"/>) added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdExif.OnSubIFDAddingAlways(System.Int32,Tools.MetadataT.ExifT.SubIfd,Tools.ComponentModelT.CancelMessageEventArgs)">
 <summary>Handles adding of subIFD from any reason before it is addaed. This event can be cancelled.</summary>
 <param name="Item">Item being added</param>
 <param name="e">Event that supports cancelling</param>
 <param name="Key">Record number which points to subIFD being added. This is always value form range of <see cref="T:System.UInt16"/>.</param>
 <remarks>This methods calls base class method <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAddingAlways(System.Int32,Tools.MetadataT.ExifT.SubIfd,Tools.ComponentModelT.CancelMessageEventArgs)"/>.
 Then ensures that SubIFD on key <see cref="F:Tools.MetadataT.ExifT.IfdExif.Tags.InteroperabilityIFD"/> is always of type <see cref="T:Tools.MetadataT.ExifT.IfdInterop"/>.</remarks>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Key"/> is not within range of values of <see cref="T:System.UInt32"/></exception>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdExif.ExifDateFormat">
 <summary>Date-time format used by Exif for storing date-time values as <see cref="P:Tools.MetadataT.ExifT.IfdExif.DateTimeDigitized"/> or <see cref="P:Tools.MetadataT.ExifT.IfdExif.DateTimeOriginal"/>.</summary>
 <version version="1.5.2">Constant introduced</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.DateTimeDigitizedDate">
 <summary>Gets or sets value of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.DateTimeDigitized"/> as <see cref="T:System.DateTime"/></summary>
 <returns>Date and time when image was digitized or null when property is not set</returns>
 <value>Date and time when image was digitized or null to unset the property</value>
 <seelaso cref="P:Tools.MetadataT.ExifT.IfdExif.DateTimeOriginalDate"/><seelaso cref="P:Tools.MetadataT.ExifT.IfdExif.DateTimeDigitized"/>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.DateTimeOriginalDate">
 <summary>Gets or sets value of the <see cref="P:Tools.MetadataT.ExifT.IfdExif.DateTimeOriginal"/> as <see cref="T:System.DateTime"/></summary>
 <returns>Date and time when image was created or null when property is not set</returns>
 <value>Date and time when image was created or null to unset the property</value>
 <remarks>In case the image was not originally taken as digital, this date should be prior to <see cref="P:Tools.MetadataT.ExifT.IfdExif.DateTimeDigitizedDate"/></remarks>
 <seelaso cref="P:Tools.MetadataT.ExifT.IfdExif.DateTimeDigitizedDate"/><seelaso cref="P:Tools.MetadataT.ExifT.IfdExif.DateTimeOriginal"/>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdExif.TagFormat(System.UInt16)">
 <summary>Gets format for tag specified</summary>
 <param name="Tag">Tag record number in current IFD</param>
 <returns>If <paramref name="tag"/> is known by current implementation returns its typical description. Null if tag is not known.</returns>
 <version version="1.5.4">This property overload is new in version 1.5.4</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdGps">
 <summary>Exif GPS IFD</summary>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdGps.Tags">
 <summary>Tag numbers used in GPS Sub IFD</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added for enum items.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSVersionID">
 <summary>GPS tag version</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSLatitudeRef">
 <summary>North or South Latitude</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSLatitude">
 <summary>Latitude</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSLongitudeRef">
 <summary>East or West Longitude</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSLongitude">
 <summary>Longitude</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSAltitudeRef">
 <summary>Altitude reference</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSAltitude">
 <summary>Altitude</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSTimeStamp">
 <summary>GPS time (atomic clock)</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSSatellites">
 <summary>GPS satellites used for measurement</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSStatus">
 <summary>GPS receiver status</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSMeasureMode">
 <summary>GPS measurement mode</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDOP">
 <summary>Measurement precision</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSSpeedRef">
 <summary>Speed unit</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSSpeed">
 <summary>Speed of GPS receiver</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSTrackRef">
 <summary>Reference for direction of movement</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSTrack">
 <summary>Direction of movement</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSImgDirectionRef">
 <summary>Reference for direction of image</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSImgDirection">
 <summary>Direction of image</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSMapDatum">
 <summary>Geodetic survey data used</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestLatitudeRef">
 <summary>Reference for latitude of destination</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestLatitude">
 <summary>Latitude of destination</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestLongitudeRef">
 <summary>Reference for longitude of destination</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestLongitude">
 <summary>Longitude of destination</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestBearingRef">
 <summary>Reference for bearing of destination</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestBearing">
 <summary>Bearing of destination</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestDistanceRef">
 <summary>Reference for distance to destination</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestDistance">
 <summary>Distance to destination</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSProcessingMethod">
 <summary>Name of GPS processing method</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSAreaInformation">
 <summary>Name of GPS area</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDateStamp">
 <summary>GPS date</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDifferential">
 <summary>GPS differential correction</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSVersionID">
 <summary>GPS tag version</summary>
 <returns>Typical number of items in an array returned by this property is 4.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 4 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdGps.GPSLatitudeRefValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSLatitudeRef"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSLatitudeRefValues.North">
 <summary>Nort latitude</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSLatitudeRefValues.South">
 <summary>South latitude</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSLatitudeRef">
 <summary>North or South Latitude</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSLatitudeRefValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSLatitude">
 <summary>Latitude</summary>
 <returns>Typical number of items in an array returned by this property is 3.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 3 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdGps.GPSLongitudeRefValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSLongitudeRef"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSLongitudeRefValues.East">
 <summary>East longitude</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSLongitudeRefValues.West">
 <summary>West longitude</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSLongitudeRef">
 <summary>East or West Longitude</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSLongitudeRefValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSLongitude">
 <summary>Longitude</summary>
 <returns>Typical number of items in an array returned by this property is 3.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 3 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdGps.GPSAltitudeRefValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSAltitudeRef"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSAltitudeRefValues.SeaLevel">
 <summary>Sea level</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSAltitudeRefValues.SeaLevelReference">
 <summary>Sea level reference (negative value)</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSAltitudeRef">
 <summary>Altitude reference</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSAltitudeRefValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSAltitude">
 <summary>Altitude</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSTimeStamp">
 <summary>GPS time (atomic clock)</summary>
 <returns>Typical number of items in an array returned by this property is 3.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 3 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSSatellites">
 <summary>GPS satellites used for measurement</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdGps.GPSStatusValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSStatus"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSStatusValues.InProgress">
 <summary>Measurement in progress</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSStatusValues.Interoperability">
 <summary>Measurement Interoperability</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSStatus">
 <summary>GPS receiver status</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSStatusValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdGps.GPSMeasureModeValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSMeasureMode"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSMeasureModeValues.Measurement2D">
 <summary>2-dimensional measurement</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSMeasureModeValues.Measurement3D">
 <summary>3-dimensional measurement</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSMeasureMode">
 <summary>GPS measurement mode</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSMeasureModeValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDOP">
 <summary>Measurement precision</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdGps.GPSSpeedRefValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSSpeedRef"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSSpeedRefValues.KilometersPeHour">
 <summary>Kilometers per hour</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSSpeedRefValues.MilesPerHour">
 <summary>Miles per hour</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSSpeedRefValues.Knots">
 <summary>Knots</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSSpeedRef">
 <summary>Speed unit</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSSpeedRefValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSSpeed">
 <summary>Speed of GPS receiver</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdGps.GPSTrackRefValues">
 <summary>Possible values of the <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSTrackRef"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSTrackRefValues.TrueDirection">
 <summary>True direction</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdGps.GPSTrackRefValues.MagneticDirection">
 <summary>Magnetic direction</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSTrackRef">
 <summary>Reference for direction of movement</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSTrackRefValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSTrack">
 <summary>Direction of movement</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSImgDirectionRef">
 <summary>Reference for direction of image</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSTrackRefValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSImgDirection">
 <summary>Direction of image</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSMapDatum">
 <summary>Geodetic survey data used</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDestLatitudeRef">
 <summary>Reference for latitude of destination</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSLatitudeRefValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDestLatitude">
 <summary>Latitude of destination</summary>
 <returns>Typical number of items in an array returned by this property is 3.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 3 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDestLongitudeRef">
 <summary>Reference for longitude of destination</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSLongitudeRefValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDestLongitude">
 <summary>Longitude of destination</summary>
 <returns>Typical number of items in an array returned by this property is 3.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is array of exactly 3 items</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDestBearingRef">
 <summary>Reference for bearing of destination</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of item of <paramref name="value"/> is not member of <see cref="T:Tools.MetadataT.ExifT.IfdGps.GPSTrackRefValues"/></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDestBearing">
 <summary>Bearing of destination</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDestDistanceRef">
 <summary>Reference for distance to destination</summary>
 <returns>Typical number of characters in a string returned by this property is 2.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 1 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDestDistance">
 <summary>Distance to destination</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSProcessingMethod">
 <summary>Name of GPS processing method</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSAreaInformation">
 <summary>Name of GPS area</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDateStamp">
 <summary>GPS date</summary>
 <returns>Typical number of characters in a string returned by this property is 11.</returns>
 <exception cref='T:System.ArgumentException'>Value being set is neither null nor it is string of exactly 10 characters.<note>Terminating nulchar is counted to total lenght of string wheather it is specififed in value being set or not. So, if you don't have a nullchar at the end of your string it must be one character shorther!</note></exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> documentation added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.GPSDifferential">
 <summary>GPS differential correction</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdGps.#ctor">
 <summary>CTor - empty IFD</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdGps.#ctor(Tools.MetadataT.ExifT.ExifIfdReader,System.Boolean)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
 <param name="AutoReadNext">Automatically read IFDs that follows this one</param>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdGps.#ctor(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.Record(Tools.MetadataT.ExifT.IfdGps.Tags)">
 <summary>Gets or sets value of specified record</summary>
 <param name="Type">Recognized tagname of record that determines data type as well as number of components</param>
 <value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
 <returns>Value of record with tag number specified by <paramref name="Type"/> if type for this tag number specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.TagFormat(System.UInt16)">
 <summary>Gets format for tag specified</summary>
 <param name="Tag">Tag record number in current IFD</param>
 <returns>If <paramref name="tag"/> is known by current implementation returns its typical description. Null if tag is not known.</returns>
 <version version="1.5.4">This property overload is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.Latitude">
 <summary>Gets <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSLatitude"/> as <see cref="T:Tools.NumericsT.Angle"/></summary>
 <returns>Positive or negative <see cref="T:Tools.NumericsT.Angle"/> depending on <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSLatitudeRef"/></returns>
 <version version="1.5.4">This property is new in 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdGps.Longitude">
 <summary>Gets <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSLongitude"/> as <see cref="T:Tools.NumericsT.Angle"/></summary>
 <returns>Positive or negative <see cref="T:Tools.NumericsT.Angle"/> depending on <see cref="P:Tools.MetadataT.ExifT.IfdGps.GPSLongitudeRef"/></returns>
 <version version="1.5.4">This property is new in 1.5.4</version>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdInterop">
 <summary>Exif Interoperability IFD</summary>
</member>
<member name="T:Tools.MetadataT.ExifT.IfdInterop.Tags">
 <summary>Tag numbers used in Exif Interoperability IFD</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added for enum items.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.IfdInterop.Tags.InteroperabilityIndex">
 <summary>Indicates the identification of the Interoperability rule.</summary>
 <version version="1.5.2"><see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/> added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdInterop.InteroperabilityIndex">
 <summary>Indicates the identification of the Interoperability rule.</summary>
 <version version="1.5.2"><see cref="T:System.ComponentModel.DisplayNameAttribute"/> added</version>
 <version version="1.5.4">Fix: Returned string no longer contains terminating nullchars.</version>
 <version version="1.5.4">Type changed from <see cref="T:System.String"/> to <see cref="T:System.Char"/>.</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdInterop.#ctor">
 <summary>CTor - empty IFD</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdInterop.#ctor(Tools.MetadataT.ExifT.ExifIfdReader,System.Boolean)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
 <param name="AutoReadNext">Automatically read IFDs that follows this one</param>
</member>
<member name="M:Tools.MetadataT.ExifT.IfdInterop.#ctor(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdInterop.Record(Tools.MetadataT.ExifT.IfdInterop.Tags)">
 <summary>Gets or sets value of specified record</summary>
 <param name="Type">Recognized tagname of record that determines data type as well as number of components</param>
 <value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
 <returns>Value of record with tag number specified by <paramref name="Type"/> if type for this tag number specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member>
<member name="P:Tools.MetadataT.ExifT.IfdInterop.TagFormat(System.UInt16)">
 <summary>Gets format for tag specified</summary>
 <param name="Tag">Tag record number in current IFD</param>
 <returns>If <paramref name="tag"/> is known by current implementation returns its typical description. Null if tag is not known.</returns>
 <version version="1.5.4">This property overload is new in version 1.5.4</version>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifWriter">
 <summary>This class provides low-level writer of Exif matadata</summary>
 <version stage="Nightly" version="1.5.2">Class accessibility changed from Firend to Public</version>
 <version version="1.5.2">New overloaded method <see cref="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)"/> introduced.</version>
 <version version="1.5.2">ASCII-type data are automatically appended with nullchar when required (missing)</version>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter._Writer">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifWriter.Writer"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifWriter.Writer">
 <summary>Contains stream to write data to</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.Reader">
 <summary>Reader over stream data are written to</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.Map">
 <summary>May contain map of stream if map is associated</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.NewMap">
 <summary>Contains new map generated by writer</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifWriter.OutputMap">
 <summary>Gets copy of output map created while writing Exif metadata to the stream</summary>
 <returns>Output map describing usage of bytes in output stream</returns>
 <remarks>Reaturned array does contain neither items with set <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.WriterMask"/> nor <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Empty"/></remarks>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifWriter.WriterStates">
 <summary>States of writer</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Beginning">
 <summary>Before start of writing</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.General">
 <summary>General state, IFDs can be written</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records">
 <summary>Writer is writing records inside IFD</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Finnished">
 <summary>writing was finished</summary>
 <seealso cref="M:Tools.MetadataT.ExifT.ExifWriter.EndWriting"/>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter._WriterState">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifWriter.WriterState">
 <summary>Gets or sets current state of writer</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <paramref name="writerstates"/></exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.#ctor(System.IO.Stream,Tools.IOt.BinaryReader.ByteAlign)">
 <summary>CTor - creates new instance of <see cref="T:Tools.MetadataT.ExifT.ExifWriter"/> for new Exif metadata stream</summary>
 <param name="Stream">Stream to write data to</param>
 <param name="ByteAlign">Exif byte align</param>
 <remarks>This constructor creates instance of writer that cannot preserve unknown metadata from originals stream (like maker notes)</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Stream"/> does not support reading, seeking and writing</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Align"/> is not member of <see cref="T:Tools.IOt.BinaryReader.ByteAlign"/></exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.#ctor(System.IO.Stream,Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds[])">
 <summary>CTor - creates new instance of <see cref="T:Tools.MetadataT.ExifT.ExifWriter"/> for exisitin Exif metadata stream</summary>
 <param name="Stream">Stream that contains original Exif metadata</param>
 <param name="Map">Map of <paramref name="Stream"/> (usually generated by <see cref="T:Tools.MetadataT.ExifT.ExifMapGenerator"/>).</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> or <paramref name="Map"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Stream"/> cannot read, write or seek -or- lengths of <paramref name="Map"/> nas <paramref name="Stream"/> differs -or- Lenght of <paramref name="Stream"/> is less than 12 -or- <paramref name="Stream"/> contains invalid byte order marker -or- Byte order marker present at <paramref name="Stream"/> is violated by following byte order marker test -or- <paramref name="Map"/> does not start with 2×<see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Bom"/>, 2×<see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.BomTest"/> and 4× <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Ifd0Offset"/> -or- <paramref name="Map"/> contains writer-generated item (which or-masks with <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.WriterMask"/>).</exception>
 <version version="1.5.2">Fixed: <see cref="T:System.ArgumentException"/> ("Begining of Exif map is invalid") is always thrown.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter._PreserveThumbnail">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifWriter.PreserveThumbnail"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifWriter.PreserveThumbnail">
 <summary>Gets or sets value indicating if thumbnail will be preserved in original stream</summary>
 <returns>Value indicating if thumbnail will be preserved in original stream</returns>
 <value>Default value is false. Chage it to true if you want ot preserve Exif thumbnail in original stream (if there is any) and you are not giong to write own thumbnail in there.</value>
 <exception cref="T:System.InvalidOperationException">Writing has already started -or- This instance was not given map of original steream in CTor.</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.WriteHeader">
 <summary>Writes Exif TIFF header</summary>
 <returns>4 - offset where pointer to IFD0 must be written.</returns>
 <remarks>This must be first call to writer. This call can appear only once.</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.AllocateIfd(System.Int32,System.Int32,System.Boolean,Tools.MetadataT.ExifT.ExifWriter.PointerSizes)">
 <summary>In stream allocates space for IFD of given size</summary>
 <param name="OffsetToPointer">Offset to pointer to IFD. Allocated position will be recorder here.</param>
 <param name="NumberOfRecords">Number of records in IFD.</param>
 <returns>Offset position of pointer to next IFD</returns>
 <remarks>This method allocates space of size appropriate to IFD with given number of elements. There is almost no check (see exceptions) of validity of <paramref name="OffsetToPointer"/>. You must use value returned by <see cref="M:Tools.MetadataT.ExifT.ExifWriter.WriteHeader"/> or <see cref="M:Tools.MetadataT.ExifT.ExifWriter.AllocateIfd(System.Int32,System.Int32,System.Boolean,Tools.MetadataT.ExifT.ExifWriter.PointerSizes)"/>, or use position of tag in order to write subIFD. This function also writes number of entries to allocated space and initializes pointer to next IFD to 0.</remarks>
 <param name="PointerSize">Defines data type of pointer at <paramref name="OffsetToPointer"/>. Default type for IFDs is <see cref="F:Tools.MetadataT.ExifT.ExifWriter.PointerSizes.UInt32"/>.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="OffsetToPointer"/> is less than 4 -or- <paramref name="NumberOfRecords"/> is less then zer -or- <paramref name="NumberOfRecords"/> is greater than <see cref="T:System.UInt16"/></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="PointerSize"/> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifWriter.PointerSizes"/></exception>
 <exception cref="T:System.InvalidOperationException">IFD cannot be written in current state of writer. Such as previous IFD was not finnished yet or header was not written yet.</exception>
 <exception cref="T:System.OverflowException">Offset found for IFD cannot be represented in datatype <paramref name="PointerSize"/></exception>
 <param name="IsSubIfd">Indicates if IFD being written is SubIFD. This has only impact on output map.</param>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.WriteRecord(Tools.MetadataT.ExifT.DirectoryEntry)">
 <summary>Writes directory entry record to output stream</summary>
 <param name="Record">Record to be written</param>
 <returns>Position where data was written</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Record"/> is null or <paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.Data">Data</see> is null</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is not <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/> or all records have been already written</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.DataType">DataType</see> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/>.</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.Data">Data</see> is of different type then is reported by <paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.DataType">DataType</see></exception>
 <exception cref="T:System.ArgumentException"><paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.Components">Components</see> differes from number of components in <paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.Data">Data</see></exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.WriteRecord(System.Int32,Tools.MetadataT.ExifT.ExifRecord)">
 <summary>Writes directory entry record to output stream</summary>
 <param name="Record">Record to be written</param>
 <param name="TagNumber">Number of record</param>
 <returns>Position where data was written</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Record"/> is null or <paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecord.Data">Data</see> is null</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is not <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/> or all records have been already written</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType">DataType</see>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType">DataType</see> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/>.</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecord.Data">Data</see> is of different type then is reported by <paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType">DataType</see>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType">DataType</see></exception>
 <exception cref="T:System.ArgumentException"><paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType">¨DataType</see>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.NumberOfElements">NumberOfElements</see> differes from number of components in <paramref name="Record"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecord.Data">Data</see></exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="TagNumber"/> is less than zero or greater than <see cref="T:System.UInt16"/></exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.WriteRecord(System.UInt16,Tools.MetadataT.ExifT.ExifDataTypes,System.UInt32,System.Object)">
 <summary>Writes record (directory entry) to output stream</summary>
 <param name="TagNumber">Number of directory entry (so called tag number)</param>
 <param name="DataType">Data type of directory entry</param>
 <param name="NumberOfComponets">Number of components of type <paramref name="DataType"/> in this directory entry</param>
 <param name="Data">Data to be written</param>
 <returns>Position where data was written</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Data"/> is null</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is not <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/> or all records have been already written</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="DataType"/> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/></exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="Data"/> is of different type then reported by <paramref name="DataType"/>. Acceptable types are scalars and 1D array of type reported by <paramref name="DataType"/>.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="NumberOfComponets"/> differs from number of items in <paramref name="Data"/></exception>
 <remarks>This method is not CLS-compliant, but CLS-compliant overload with <see cref="T:Tools.MetadataT.ExifT.DirectoryEntry"/> as parameter is available.</remarks>
 <version version="1.5.2">ASCII data are automatically appended with nullchar when missing.</version>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.WritePointedBlob(System.Int32,System.Byte[],Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds,Tools.MetadataT.ExifT.ExifWriter.PointerSizes)">
 <summary>Writes pointer BLOb to metadata stream</summary>
 <param name="PointerOffset">Offset of pointer to BLOb. Offset of BLOb will be written here. It sould be value returned from <see cref="M:Tools.MetadataT.ExifT.ExifWriter.WriteRecord(System.Int32,Tools.MetadataT.ExifT.ExifRecord)"/>.</param>
 <param name="Blob">BLOb data</param>
 <param name="BlobType">Type of BLOB reported to output stream. Only allowed values are <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Unknown"/>, <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.JpegThumbnail"/> and <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TiffThumbNail"/></param>
 <param name="PointerSize">Defines data type of pointer</param>
 <returns>Offset position where first byte of blob was written</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="PointerSize"/> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifWriter.PointerSizes"/> -or- <paramref name="BlobType"/> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Blob"/> is null</exception>
 <seealso cref="T:System.ArgumentException"><paramref name="BlobType"/> is none of <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Unknown"/>, <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.JpegThumbnail"/> and <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.TiffThumbnailPart"/></seealso>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="PointerOffset"/> is less than 4</exception>
 <exception cref="T:System.OverflowException">Position of blob cannot be stored in value of type <paramref name="PointerSize"/></exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Beginning"/> or <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Finnished"/></exception>
 <remarks>Pointer blob is some large block of binary data written in Exif stream. Great example is thumbnail image.</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.EndWriting">
 <summary>Performs terminating operations and finnishes writing</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is not <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.General"/></exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.NormalizeData(System.Object,Tools.MetadataT.ExifT.ExifDataTypes)">
 <summary>Converts Exif data to array type</summary>
 <param name="Data">Data to be converted</param>
 <param name="DataType">Type of data</param>
 <returns>Array of items of given type, if <paramref name="Data"/> was of array of <paramref name="DataType"/> or <paramref name="DataType"/>; otherwise null. For ASCII data last char is ensured to be nullchar (appended if not present).</returns>
 <version version="1.5.2">Marked as CLS-incompliant</version>
 <version version="1.5.2">Data of type ASCII are appended with nullchar if it is not already last char of data.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.LastPosition">
 <summary>If <see cref="F:Tools.MetadataT.ExifT.ExifWriter.Map"/> is null contains last written position in stream; otherwise contains offset of byte before first free byte in stream</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.FindFreeSpace(System.Int32)">
 <summary>Gets offset of position where given number of bytes can be written</summary>
 <param name="Size">Size of block (in bytes) to find space for</param>
 <returns>Ofset of free block of size of <paramref name="Size"/> bytes</returns>
 <remarks>The returned block may lay at the end of stream</remarks>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter._RecordsToWrite">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifWriter.RecordsToWrite"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifWriter.RecordsToWrite">
 <summary>Gets number of records to be written when <see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/></summary>
 <returns>When <see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/> total number of records to be written; otherwise return value is meaningless.</returns>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter._RecordsWritten">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifWriter.RecordsWritten"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifWriter.RecordsWritten">
 <summary>Gets number of records (of total) <see cref="P:Tools.MetadataT.ExifT.ExifWriter.RecordsToWrite"/> written when <see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/></summary>
 <returns>When <see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/> gets number of records (of total <see cref="P:Tools.MetadataT.ExifT.ExifWriter.RecordsToWrite"/>) that was already written to current IFD; otherwise is meaningless.</returns>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter._FirstRecordOffset">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifWriter.FirstRecordOffset"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifWriter.FirstRecordOffset">
 <summary>Gets offset of first record when <see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/></summary>
 <returns>When <see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/> gets offset (in bytes, from bebinning) to firs record of IFD currently being written; otherwise is meaningless</returns>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifWriter.PointerSizes">
 <summary>Supportede datatypes for pointers in Exif stream</summary>
 <remarks>Values of items are same as values of corresponding items in <see cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/></remarks>
 <seealso cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.PointerSizes.Byte">
 <summary>1-byte (8-bits) unsigned integer</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.PointerSizes.UInt16">
 <summary>2-bytes (16-bits) unsigned integer</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifWriter.PointerSizes.UInt32">
 <summary>4-bytes (32-bits) unsigned integer</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifWriter.WriterMap(System.Int32)">
 <summary>Gets or sets state of byte at given index in map</summary>
 <param name="Index">Index in map. If index is out of range, it is allocated in output map, not in input one.</param>
 <value>Value to be written. Values are always or-ed with <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.WriterMask"/> before writing</value>
 <returns>Current value form output map at given index. Or <see cref="F:Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds.Empty"/> if <paramref name="Index"/> is out of rangte of output map.</returns>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifWriter.WriterMapLenght">
 <summary>Gets current number of valid items in <see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterMap(System.Int32)"/></summary>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback">
 <summary>Delegate used as callback function by <see cref="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)"/> method whenever record is written to stream</summary>
 <param name="Sender">Instance of <see cref="T:Tools.MetadataT.ExifT.ExifWriter"/> that called the callback</param>
 <param name="Ifd"><see cref="T:Tools.MetadataT.ExifT.Ifd"/> record belongs to. This can be <see cref="T:Tools.MetadataT.ExifT.SubIfd"/>.</param>
 <param name="RecordTag">Number of record tag</param>
 <param name="RecordData">Record data that have benn written.</param>
 <param name="DataOffset">Offset in stream where recor data have been written</param>
 <remarks>You can use this delegate to write BLOb data (<see cref="M:Tools.MetadataT.ExifT.ExifWriter.WritePointedBlob(System.Int32,System.Byte[],Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds,Tools.MetadataT.ExifT.ExifWriter.PointerSizes)"/> to record).
 <para>This delegate is not CLS-compliant. There is <see cref="T:Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallbackCls"/> which is CLS-compliant.</para></remarks>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallbackCls">
 <summary>Delegate used as callback function by <see cref="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)"/> method whenever record is written to stream (CLS-compliant)</summary>
 <param name="Sender">Instance of <see cref="T:Tools.MetadataT.ExifT.ExifWriter"/> that called the callback</param>
 <param name="Ifd"><see cref="T:Tools.MetadataT.ExifT.Ifd"/> record belongs to. This can be <see cref="T:Tools.MetadataT.ExifT.SubIfd"/>.</param>
 <param name="RecordTag">Number of record tag (values are in range of <see cref="T:System.UInt16"/> type)</param>
 <param name="RecordData">Record data that have benn written.</param>
 <param name="DataOffset">Offset in stream where recor data have been written</param>
 <remarks>You can use this delegate to write BLOb data (<see cref="M:Tools.MetadataT.ExifT.ExifWriter.WritePointedBlob(System.Int32,System.Byte[],Tools.MetadataT.ExifT.ExifReader.ReaderItemKinds,Tools.MetadataT.ExifT.ExifWriter.PointerSizes)"/> to record).</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)">
 <summary>Saves all the exif data from given <see cref="T:Tools.MetadataT.ExifT.Exif"/></summary>
 <remarks>This method is not CLS-compliant, but there is CLS-compilant overload.
 <para>This function calls <see cref="M:Tools.MetadataT.ExifT.ExifWriter.EndWriting"/> when all data are written.</para>
 <para>Thumbnail behavior of this function depends on <see cref="P:Tools.MetadataT.ExifT.ExifWriter.PreserveThumbnail"/>. This function alone is not capable of writing thumbnail, use <paramref name="RecordWrittenCallback"/> to write thumbnail data as pointed BLOb.</para></remarks>
 <param name="Data"><see cref="T:Tools.MetadataT.ExifT.Exif"/> to save</param>
 <param name="RecordWrittenCallback">Optional callback function called whenever record is written</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Data"/> is null -or- Data stored in any record are null.</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Any <see cref="T:Tools.MetadataT.ExifT.Ifd"/> contains pointer to SubIFD and data type of the pointer is not one of <see cref="T:Tools.MetadataT.ExifT.ExifWriter.PointerSizes"/>. -or- Record of unsupported datatype reached.</exception>
 <exception cref="T:System.ArgumentException">Any <see cref="T:Tools.MetadataT.ExifT.Ifd"/> contains pointer to SubIFD and data type of the pointer has multiple components. -or- <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.NumberOfElements">NumberOfElements</see> of any record differes from number of components in <see cref="P:Tools.MetadataT.ExifT.ExifRecord.Data"/></exception>
 <exception cref="T:Tools.TypeMismatchException"><see cref="P:Tools.MetadataT.ExifT.ExifRecord.Data"/> of any record is of different type than is reported by <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType">DataType</see></exception>
 <version version="1.5.2">Method introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallbackCls)">
 <summary>Saves all the exif data from given <see cref="T:Tools.MetadataT.ExifT.Exif"/> (CLS compliant)</summary>
 <param name="Data"><see cref="T:Tools.MetadataT.ExifT.Exif"/> to save</param>
 <param name="RecordWrittenCallback">Optional callback function called whenever record is written</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Data"/> is null -or- Data stored in any rord are null.</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Any <see cref="T:Tools.MetadataT.ExifT.Ifd"/> contains pointer to SubIFD and data type of the pointer is not one of <see cref="T:Tools.MetadataT.ExifT.ExifWriter.PointerSizes"/>. -or- Record of unsupported datatype reached.</exception>
 <exception cref="T:System.ArgumentException">Any <see cref="T:Tools.MetadataT.ExifT.Ifd"/> contains pointer to SubIFD and data type of the pointer has multiple components. -or- <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.NumberOfElements">NumberOfElements</see> of any record differes from number of components in <see cref="P:Tools.MetadataT.ExifT.ExifRecord.Data"/></exception>
 <exception cref="T:Tools.TypeMismatchException"><see cref="P:Tools.MetadataT.ExifT.ExifRecord.Data"/> of any record is of different type than is reported by <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType">DataType</see></exception>
 <remarks><para>This function calls <see cref="M:Tools.MetadataT.ExifT.ExifWriter.EndWriting"/> when all data are written.</para>
 <para>Thumbnail behavior of this function depends on <see cref="P:Tools.MetadataT.ExifT.ExifWriter.PreserveThumbnail"/>. This function alone is not capable of writing thumbnail, use <paramref name="RecordWrittenCallback"/> to write thumbnail data as pointed BLOb.</para></remarks>
 <version version="1.5.2">Method introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifWriter.SaveIfdRecords(Tools.MetadataT.ExifT.Ifd,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)">
 <summary>Save all records of one IFD. If IFD contains SubIFDs thay are saved too.</summary>
 <param name="Ifd">Ifd to save records of. There must be prealocated space for records using <see cref="M:Tools.MetadataT.ExifT.ExifWriter.AllocateIfd(System.Int32,System.Int32,System.Boolean,Tools.MetadataT.ExifT.ExifWriter.PointerSizes)"/>.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Ifd"/> contains pointer to SubIFD and data type of the pointer is not one of <see cref="T:Tools.MetadataT.ExifT.ExifWriter.PointerSizes"/>. -or- Record of unsupported datatype reached.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Ifd"/> contains pointer to SubIFD and data type of the pointer has multiple components.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Ifd"/> is null -or- data stored in any rord are null.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.MetadataT.ExifT.ExifWriter.WriterState"/> is not <see cref="F:Tools.MetadataT.ExifT.ExifWriter.WriterStates.Records"/> or all records have been already written -or- Not enought space for al records ahve been allocated.</exception>
 <exception cref="T:Tools.TypeMismatchException"><see cref="P:Tools.MetadataT.ExifT.ExifRecord.Data"/> of any record is of different type then is reported by <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType">DataType</see></exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.NumberOfElements">NumberOfElements</see> of any record differes from number of components in <see cref="P:Tools.MetadataT.ExifT.ExifRecord.Data"/></exception>
</member>
<member name="T:Tools.MetadataT.ExifT.Ifd">
 <summary>Provides read-write access to Image File Directory of Exif data</summary>
 <version stage="Nightly" version="1.5.2">Several <see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added for properties that should not be shown in property grid</version>
 <version version="1.5.2">Added implementation of <see cref="T:Tools.ICloneable`1"/>.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.Ifd._OriginalOffset">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.OriginalOffset"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.OriginalOffset">
 <summary>Gtes original offset of the IFD</summary>
 <returns>Original offset of IFD in Exif block. 0 if this instance was not constructed from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/>.</returns>
 <remarks>As this property is not wery important it has no CLS-compliant alternative.</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.#ctor">
 <summary>CTor - empty IFD</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.#ctor(Tools.MetadataT.ExifT.ExifIfdReader,System.Boolean)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
 
 <param name="AutoReadNext">Automatically read IFDs that follows this one</param>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.ReadNextIFDs(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>Reads IFDs following this one</summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that read this IFD</param>
 <remarks>This implementation reads all the IFDs that follows (are pointed by) this instance. Newly read IFDs are of type <see cref="T:Tools.MetadataT.ExifT.Ifd"/>.
 <para>Note for inheritors: Derived class my chose to override this method and read IFDs of different type.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.#ctor(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.ReadStandardSubIFDs(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>If overriden in derived class reads known subIFDs nested within this IFD.</summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD.</param>
 <exception cref="T:System.ArgumentNullException">Can be thrown by overriden method when <paramref name="Reader"/> is null.</exception>
 <remarks>This implementation does nothing.
 <para>Note for inheritors: This method is called by CTor if the <see cref="T:Tools.MetadataT.ExifT.Ifd"/> class after all records have been initialized. This method is not intended to be called directly from user code.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordAdding(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.CancelableKeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records">Records</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding">Adding</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>The event can be cancelled. In such case the <see cref="T:System.OperationCanceledException"/> is thrown by collection.
 <para>This handler is not CLS-compliant an there is no CLS-compliant alternaive</para>
 <para>Calls <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordAddingAlways(Tools.ComponentModelT.CancelMessageEventArgs,System.Int32,Tools.MetadataT.ExifT.ExifRecord)"/></para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordAddingAlways(Tools.ComponentModelT.CancelMessageEventArgs,System.Int32,Tools.MetadataT.ExifT.ExifRecord)">
 <summary>Called everywhen when record is aded or replaced to the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/> collection</summary>
 <param name="e">Event arguments - can be used to cancel the event</param>
 <param name="Key">Key being added or replaced</param>
 <param name="Item">New item to pe placed at <paramref name="Key"/></param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Key"/> is not valid <see cref="T:System.UInt16"/> value</exception>
 <remarks>This event can be cancelled.
 <para>Called by <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordAdding(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.CancelableKeyValueEventArgs)"/> and <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordChanging(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.CancelableKeyValueEventArgs)"/></para>
 <para>Note for inheritors: Alway call base class method.</para>
 <para>This implementation cancels the event when record with key which is used as pointer to subIFD is passed and the record being passed is not UInt16, 1 element, fixed lenght.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordAdded(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.KeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records">Records</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added">Added</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordRemoving(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.CancelableKeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records">Records</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing">Removing</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>The event can be cancelled. In such case the <see cref="T:System.OperationCanceledException"/> is thrown by collection.
 <para>This handler is not CLS-compliant an there is no CLS-compliant alternaive</para>
 <para>Calls <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordRemovingAlways(Tools.ComponentModelT.CancelMessageEventArgs,System.Int32,Tools.MetadataT.ExifT.ExifRecord)"/></para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordRemovingAlways(Tools.ComponentModelT.CancelMessageEventArgs,System.Int32,Tools.MetadataT.ExifT.ExifRecord)">
 <summary>Called whenewer record is about to be removed from or replaced in the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/> collection</summary>
 <remarks>This event can be cancelled.
 <para>Called by: <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordRemoving(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.CancelableKeyValueEventArgs)"/>, <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordsClearing(Tools.ComponentModelT.CancelMessageEventArgs)"/>, <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordChanging(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.CancelableKeyValueEventArgs)"/>.</para>
 <para>Note for inheritors: Always call base class method.</para></remarks>        
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordRemoved(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.KeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records">Records</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed">Removed</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordsClearing(Tools.ComponentModelT.CancelMessageEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records">Records</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clearing">Clearing</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>The event can be cancelled. In such case the <see cref="T:System.OperationCanceledException"/> is thrown by collection.
 <para>This handler is not CLS-compliant an there is no CLS-compliant alternaive. Handler is marked as CLS-incompliant although it has CLS-compliant header because all other handlers are CLS-incompliant.</para>
 <para>Calls <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordRemovingAlways(Tools.ComponentModelT.CancelMessageEventArgs,System.Int32,Tools.MetadataT.ExifT.ExifRecord)"/> for each record in the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/> collection.</para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordsCleared(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.DictionaryItemsEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records">Records</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Cleared">Cleared</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordChanging(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.CancelableKeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records">Records</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging">ItemChanging</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>The event can be cancelled.
 <para>This handler is not CLS-compliant an there is no CLS-compliant alternaive.</para>
 <para>Calls <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordRemovingAlways(Tools.ComponentModelT.CancelMessageEventArgs,System.Int32,Tools.MetadataT.ExifT.ExifRecord)"/> and <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordAddingAlways(Tools.ComponentModelT.CancelMessageEventArgs,System.Int32,Tools.MetadataT.ExifT.ExifRecord)"/></para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordChanged(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.OldNewValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records">Records</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged">ItemChanged</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordValueChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.MetadataT.ExifT.ExifRecord}.ItemValueChangedEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records">Records</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemValueChanged">ItemValueChanged</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordsChanged(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.ExifRecord}.DictionaryChangedEventArgs)">
 <summary>Handles any change of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/> collection or its item (the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CollectionChanged"/> event)</summary>
 <param name="e">Event arguments</param>
 <remarks>This method is not CLS-compliant, but there is CLS-compliant overload.
 <para>Note for inheritors: Alwas call base class method.</para></remarks>
</member>
<member name="F:Tools.MetadataT.ExifT.Ifd.OnRecordsChanged_OnStack">
 <summary>Indicates call stack of both <see cref="M:Tools.MetadataT.ExifT.Ifd.OnRecordsChanged(Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase)"/> overloads</summary>
 <remarks>This is here in order to CLS compliant call CLS incompliant and vice versa</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnRecordsChanged(Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase)">
 <summary>Handles any change of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/> collection or its item (the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CollectionChanged"/> event)</summary>
 <param name="e">Event arguments - this is actually instance of CLS-incompliant generic class <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs"/>.</param>
 <remarks>In case your language can use CLS-incompliant method, you should rather use CLS-incompliant overload of this methos.
 <para>Note for inheritors: Always call base class method.</para></remarks>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="e"/> is not of type <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>[<see cref="T:System.UInt16"/>, <see cref="T:Tools.MetadataT.ExifT.ExifRecord"/>].<see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs">DictionaryChangedEventArgs</see></exception>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAdding(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.CancelableKeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">SubIFDs</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding">Adding</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>The event can be cancelled. In such case the <see cref="T:System.OperationCanceledException"/> is thrown by collection.
 <para>This handler is not CLS-compliant an there is no CLS-compliant alternaive</para>
 <para>This implementation does nothing.</para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAdded(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.KeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">SubIFDs</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added">Added</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing.</para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDRemoving(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.CancelableKeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">SubIFDs</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing">Removing</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>The event can be cancelled. In such case the <see cref="T:System.OperationCanceledException"/> is thrown by collection.
 <para>This handler is not CLS-compliant an there is no CLS-compliant alternaive</para>
 <para>This implementation does nothing.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDRemoved(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.KeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">SubIFDs</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed">Removed</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing.</para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDRemovedAlways(Tools.MetadataT.ExifT.SubIfd)">
 <summary>Handles removal of subIFD from any reason</summary>
 <param name="Item">Item that was removed</param>
 <remarks>Called by <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDRemoved(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.KeyValueEventArgs)"/>, <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDsCleared(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.DictionaryItemsEventArgs)"/>, <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDChanged(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.OldNewValueEventArgs)"/>.
 <para>Sets <paramref name="Item"/>.<see cref="P:Tools.MetadataT.ExifT.Ifd.Exif">Exif</see> to null, <paramref name="Item"/>.<see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentIFD">ParentIFD</see> to null and <paramref name="Item"/>.<see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord">ParentRecord</see> to zero.</para>
 <para>Note for inherotors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAddingAlways(System.Int32,Tools.MetadataT.ExifT.SubIfd,Tools.ComponentModelT.CancelMessageEventArgs)">
 <summary>Handles adding of subIFD from any reason before it is addaed. This event can be cancelled.</summary>
 <param name="Item">Item being added</param>
 <param name="e">Event that supports cancelling</param>
 <param name="Key">Record number which points to subIFD being added. This is always value form range of <see cref="T:System.UInt16"/>.</param>
 <remarks>Called by <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAdding(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.CancelableKeyValueEventArgs)"/>, <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDChanging(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.CancelableKeyValueEventArgs)"/>
 <para>This method checks if subIFD can be added or not. <paramref name="Item"/>.<see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> must be null or same as of this instance, <paramref name="Item"/>.<see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentIFD"/> must be null.
 Also <paramref name="Key"/> must represent record which either is not present in current instance or is of type single <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.UInt16"/>.</para>
 <para>Note for inheritors: Always call base class methosd.</para></remarks>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Key"/> is not within range of values of <see cref="T:System.UInt32"/></exception>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAddedAlways(System.Int32,Tools.MetadataT.ExifT.SubIfd)">
 <summary>Handles adding of subIFD from any reason after it is added</summary>
 <param name="Item">Item that was added</param>
 <param name="Key">Key at which it was added</param>
 <remarks>Sets <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/>, <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentIFD"/> and <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord"/> of <paramref name="Item"/>. Creates new record with number <paramref name="Key"/> if it does not exist yet.
 <para>Called by <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAdded(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.KeyValueEventArgs)"/> and <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDChanged(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.OldNewValueEventArgs)"/></para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDsClearing(Tools.ComponentModelT.CancelMessageEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">SubIFDs</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clearing">Clearing</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>The event can be cancelled. In such case the <see cref="T:System.OperationCanceledException"/> is thrown by collection.
 <para>This handler is not CLS-compliant an there is no CLS-compliant alternaive. Handler is marked as CLS-incompliant although it has CLS-compliant header because all other handlers are CLS-incompliant.</para>
 <para>This implementation does nothing.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDsCleared(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.DictionaryItemsEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">SubIFDs</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Cleared">Cleared</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing.</para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDChanging(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.CancelableKeyValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">SubIFDs</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging">ItemChanging</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>The event can be cancelled.
 <para>This handler is not CLS-compliant an there is no CLS-compliant alternaive</para>
 <para>This implementation does nothing.</para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDChanged(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.OldNewValueEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">SubIFDs</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged">ItemChanged</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing.</para>
 <para>Note for inheritors: Always call base class method.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDValueChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.MetadataT.ExifT.SubIfd}.ItemValueChangedEventArgs)">
 <summary>Handles the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">SubIFDs</see>.<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemValueChanged">ItemValueChanged</see> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This handler is not CLS-compliant an there is no CLS-compliant alternaive.
 <para>This implementation does nothing.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDsChanged(Tools.CollectionsT.GenericT.DictionaryWithEvents{System.UInt16,Tools.MetadataT.ExifT.SubIfd}.DictionaryChangedEventArgs)">
 <summary>Handles any change of the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs"/> collection or its item (the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CollectionChanged"/> event)</summary>
 <param name="e">Event arguments</param>
 <remarks>This method is not CLS-compliant, but there is CLS-compliant overload.
 <para>Note for inheritors: Alwas call base class method.</para></remarks>
</member>
<member name="F:Tools.MetadataT.ExifT.Ifd.OnSubIFDsChanged_OnStack">
 <summary>Indicates call stack of both <see cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDsChanged(Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase)"/> overloads</summary>
 <remarks>This is here in order to CLS compliant call CLS incompliant and vice versa</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDsChanged(Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase)">
 <summary>Handles any change of the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs"/> collection or its item (the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CollectionChanged"/> event)</summary>
 <param name="e">Event arguments - this is actually instance of CLS-incompliant generic class <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs"/>.</param>
 <remarks>In case your language can use CLS-incompliant method, you should rather use CLS-incompliant overload of this methos.
 <para>Note for inheritors: Always call base class method.</para></remarks>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="e"/> is not of type <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>[<see cref="T:System.UInt16"/>, <see cref="T:Tools.MetadataT.ExifT.IfdExif"/>].<see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs">DictionaryChangedEventArgs</see></exception>
</member>
<member name="E:Tools.MetadataT.ExifT.Ifd.Changed">
 <summary>Raised when value of member changes</summary>
 <remarks><paramref name="e"/>Contain additional information that can be used in event-handling code (contains instance of generic class <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/>)
 <para>Changes of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> and the <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> property are not tracked.</para></remarks>
 <seealso cref="M:Tools.MetadataT.ExifT.Ifd.OnChanged(System.EventArgs)"/>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.MetadataT.ExifT.Ifd.Changed"/> event, handles any change in current instance</summary>
 <param name="e">Event argument. If the event is caused directly by this instance (not by nested object) the <paramref name="e"/> parameter is <see cref="T:Tools.IReportsChange.ValueChangedEventArgsBase"/>.</param>
 <remarks>Changes of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> and the <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> property are not tracked</remarks>
 <seelaso cref="E:Tools.MetadataT.ExifT.Ifd.Changed"/>
</member>
<member name="F:Tools.MetadataT.ExifT.Ifd._exif">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.Exif">
 <summary>Gets instance of <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> this IFD behaves as instance of</summary>
 <value>Setting this property changes <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> property of all subsequent IFDs in <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> linked-list and of all subIFDs in <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs"/>.</value>
 <returns>Instance of the <see cref="T:Tools.MetadataT.ExifT.Exif"/> class this instance is associated with; or null if this instance is not associated with instance of <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/>.</returns>
 <exception cref="T:System.ArgumentException">Internal only: Value being set differs from value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> property of <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> IFD (when <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> is non-null)</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnExifChanged">
 <summary>If overriden in derived class performs derived class-specific tasks related to change of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> property</summary>
 <remarks>Note for inheritors: You do not have to call base class method. <para>This implementation does nothing.</para></remarks>
</member>
<member name="F:Tools.MetadataT.ExifT.Ifd._records">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.Records">
 <summary>Records in this Image File Directory</summary>
 <remarks>Record cannot be removed from or replaced in the collection when it points to subIFD. The <see cref="T:System.OperationCanceledException"/> is thrown in case of attempt to do so.</remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.Record(Tools.MetadataT.ExifT.ExifTagFormat)">
 <summary>Gets or sets value of specified record</summary>
 <param name="Type">Type of record specifies data types of recor as well as number of components</param>
 <value>New value for record. New value is assigned even if old value is of incompatible type. If value is null an item is deleted.</value>
 <returns>Value of record with tag number specified in <paramref name="Type"/> if type specifies that number of components can vary or if number of components match actual number of components in record. If there is no tag with specified number present in this IFD or number of components constraint is being violated null is returned.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <exception cref="T:System.OperationCanceledException">In setter: Such record alerady exists and points to subIFD.</exception>
 <seelaso cref="P:Tools.MetadataT.ExifT.Ifd.Records"/>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.Record(System.Int32)">
 <summary>Gets or sets record by <see cref="T:System.Int32">integer</see> key</summary>
 <param name="key">Number of record to get or set</param>
 <returns>Record with given <paramref name="key"/></returns>
 <value>If record with given <paramref name="key"/> exists it si replaced. If it does not exist it is added to the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/> collection.</value>
 <remarks>This is CLS-compliant overload or CLS-incompliant property.</remarks>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Key"/> is less than <see cref="T:System.UInt16"/> or greater than <see cref="T:System.UInt16"/></exception>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException">In getter: <paramref name="key"/> is not member of <see cref="M:Tools.MetadataT.ExifT.Ifd.GetRecordKeys"/></exception>
 <exception cref="T:System.OperationCanceledException">In setter: Record with given <paramref name="key"/> already exists and points to subIFD.</exception>
 <seelaso cref="M:Tools.MetadataT.ExifT.Ifd.GetRecordKeys"/><seelaso cref="P:Tools.MetadataT.ExifT.Ifd.Records"/>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.GetRecordKeys">
 <summary>Gets all the keys in the <see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/> collection</summary>
 <returns><see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/>.<see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Keys">Keys</see></returns>
 <remarks>This function is here for languages which cannot consume CLS-incompliant property <see cref="P:Tools.MetadataT.ExifT.Ifd.Records"/>.</remarks>
 <seelaso cref="P:Tools.MetadataT.ExifT.Ifd.Records"/><seelaso cref="P:Tools.MetadataT.ExifT.Ifd.Record(System.Int32)"/>
</member>
<member name="F:Tools.MetadataT.ExifT.Ifd._Following">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.Following">
 <summary>Gets or sets IFD that follows this IFD in Exif block</summary>
 <returns><see cref="T:Tools.MetadataT.ExifT.Ifd"/> which follows current IFD or null if there is no folowing IFD</returns>
 <value>Sets following IFD of current IFD.</value>
 <remarks>By setting this property you detaches all the following IFDs from linked-list of IFDs and replaces them by value being set (this may optionally have set the <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> property).
 <para>This property is not initialized automatically when instance of <see cref="T:Tools.MetadataT.ExifT.Ifd"/> is created directly. Code that wants to utilize linked lists of IFDs must initialize this property itself - such as <see cref="T:Tools.MetadataT.ExifT.Exif"/> does.</para></remarks>
 <exception cref="T:System.ArgumentException">Value being set have current instance as one of its <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> IFDs =or= Value being set has non-null value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> property. =or= Value being set has non-null <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> property which is different of <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> of this instance (including situation when <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> property of this instance is null and <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> property of value being set is non-null). =or= <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> is not null and value being set is already used as IFD at another position in <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/>.</exception>
 <exception cref="T:Tools.TypeMismatchException">Value being set is of type <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFD(System.Int32)"/> -or- <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> is not null and this instance if <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif">Exif</see>.<see cref="P:Tools.MetadataT.ExifT.Exif.IFD0">IFD0</see> and value being set is not of type <see cref="T:Tools.MetadataT.ExifT.IfdMain"/>.</exception>
 <version version="1.5.2"><see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.OnFollowingChanged(Tools.IReportsChange.ValueChangedEventArgs{Tools.MetadataT.ExifT.Ifd})">
 <summary>Handles change of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> property.</summary>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.VerifyFollowing(Tools.MetadataT.ExifT.Ifd)">
 <summary>Performs additional verification of value being passed to the <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> prooperty</summary>
 <param name="Following">Value to verify</param>
 <exception cref="T:System.Exception">Overriden method can throw any exception when it refuses to accept given value ias new value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> property</exception>
 <exception cref="T:Tools.TypeMismatchException">This implementation throws <see cref="T:Tools.TypeMismatchException"/> when <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> is not null and this instance is <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif">Exif</see>.<see cref="P:Tools.MetadataT.ExifT.Exif.IFD0">IFD0</see> and <paramref name="Following"/> is not of type <see cref="T:Tools.MetadataT.ExifT.IfdMain"/> (so it is not necessary to perform this verification in <see cref="T:Tools.MetadataT.ExifT.IfdMain"/> derived class).</exception>
</member>
<member name="F:Tools.MetadataT.ExifT.Ifd._Previous">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.Previous">
 <summary>Gets IFD that precedes current IFD</summary>
 <returns><see cref="T:Tools.MetadataT.ExifT.Ifd"/> which precedes current IFD; null when this IFD is first in linked-list of IFDs</returns>
 <value>Set accessor of this property is not publicly accessible, so it cannot be set diretly. This property is set when instance is passed to <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> property (and unset when it is removed from there).</value>
 <remarks>Internal note: Value being set of this property is nohow checked. You should always ensure that <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> of previous IFD is same as <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> of following IFD.</remarks>
 <version version="1.5.2"><see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.SubIFDs">
 <summary>Gets dictionary of subIFDs of this IFD.</summary>
 <returns>Dictionary which contains all the subIFDs in this IFD. Each subIFD is pointed by one record of type <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.UInt32"/>.</returns>
 <seelaso cref="P:Tools.MetadataT.ExifT.Ifd.SubIFD(System.Int32)"/>
 <remarks>When an item is added to this dictionary it must have <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> either null or same is this instance and it must heva <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentIFD"/> null. It also cannot be null itself.
 Its <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/>, <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentIFD"/> and <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord"/> is set to appropriate values. If this instance contains record which will become parent record of subIFD being added it must be of type <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.UInt16"/>. If there is no record with given number, such record is created. If any constraint is violated <see cref="T:System.OperationCanceledException"/> is thrown.
 <para>When item is removed its <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/>, <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentIFD"/> are set to null.</para></remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAddedAlways(System.Int32,Tools.MetadataT.ExifT.SubIfd)"/>, <seelaso cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDAddingAlways(System.Int32,Tools.MetadataT.ExifT.SubIfd,Tools.ComponentModelT.CancelMessageEventArgs)"/>, <seelaso cref="M:Tools.MetadataT.ExifT.Ifd.OnSubIFDRemovedAlways(Tools.MetadataT.ExifT.SubIfd)"/>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.SubIFD(System.Int32)">
 <summary>Gets or sets SubIFD pointed by record with given number</summary>
 <param name="Key">Number of Exif record in current IFD which a) is pointer (getter) b) will become pointer (setter) of a) returned SubIFDs (getter) b) value being set (setter)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Key"/> is less than <see cref="T:System.UInt16"/> or greater than <see cref="T:System.UInt16"/></exception>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException">In getter: <paramref name="Key"/> does not exist (is not present in <see cref="M:Tools.MetadataT.ExifT.Ifd.GetSubIFDsKeys"/>)</exception>
 <remarks>You can set value for key which is not present in <see cref="M:Tools.MetadataT.ExifT.Ifd.GetSubIFDsKeys"/>. If the key is present, record with this number must be of type <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.UInt32"/></remarks>
 <seelaso cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs"/><seelaso cref="M:Tools.MetadataT.ExifT.Ifd.GetSubIFDsKeys"/>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.GetSubIFDsKeys">
 <summary>Gets all the keys of <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs"/> dictionary</summary>
 <returns><see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs"/>.<see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Keys">Keys</see></returns>
 <remarks>This method is here for compatibility with languages that cannot consume CLS-incompliant property <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs"/>.</remarks>
 <seelaso cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs"/><seelaso cref="P:Tools.MetadataT.ExifT.Ifd.SubIFD(System.Int32)"/>
</member>
<member name="F:Tools.MetadataT.ExifT.Ifd._SubIFDs">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.SubIFDs"/> property</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance.</returns>
 <remarks>Use type-safe <see cref="M:Tools.MetadataT.ExifT.Ifd.Clone"/> instead.</remarks>
 <version version="1.5.2">Method added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <remarks>This clones current IFD and all its subIFDs. Resulting subIFD is not bound to <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> and has no <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> and <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/>.</remarks>
 <version version="1.5.2">Method added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.CopyRecords(Tools.MetadataT.ExifT.Ifd,Tools.MetadataT.ExifT.Ifd)">
 <summary>Copies all records from one <see cref="T:Tools.MetadataT.ExifT.Ifd"/> to another</summary>
 <param name="Source">Source IFD</param>
 <param name="Target">Target IFD</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Source"/> or <paramref name="Target"/> is null</exception>
 <version version="1.5.2">Method added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Ifd.CopySubIfds(Tools.MetadataT.ExifT.Ifd,Tools.MetadataT.ExifT.Ifd)">
 <summary>Copies all subIFDs from one <see cref="T:Tools.MetadataT.ExifT.Ifd"/> to another. Copies IFDs following any subIFD and subIFDs of subIFDs. Uses the <see cref="M:Tools.MetadataT.ExifT.Ifd.Clone"/> method.</summary>
 <param name="Source">Source IFD</param>
 <param name="Target">Target IFD</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Source"/> or <paramref name="Target"/> is null</exception>
 <version version="1.5.2">Method added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.Ifd.TagFormat(System.UInt16)">
 <summary>When overriden in derived class gets format for tag specified</summary>
 <param name="Tag">Tag record number in current IFD</param>
 <returns>If <paramref name="tag"/> is known by current implementation returns its typical description. Null if tag is not known.</returns>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="T:Tools.MetadataT.ExifT.SubIfd">
 <summary>Represents any Exif Sub-IFD (an IFD embdeded somewhere in IFD block and pointed by some tag from another IFD)</summary>
 <version stage="Nightly" version="1.5.2">Several <see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added for properties that should not be shown in property grid</version>
</member>
<member name="M:Tools.MetadataT.ExifT.SubIfd.#ctor">
 <summary>CTor - empty IFD</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.SubIfd.#ctor(Tools.MetadataT.ExifT.ExifIfdReader,System.Boolean)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
 <param name="AutoReadNext">Atomatically read IFDs that follows this one</param>
</member>
<member name="M:Tools.MetadataT.ExifT.SubIfd.#ctor(Tools.MetadataT.ExifT.ExifIfdReader)">
 <summary>CTor - reads content from <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that has read data of this IFD. Can be null</param>
</member>
<member name="P:Tools.MetadataT.ExifT.SubIfd.ParentIFD">
 <summary>Gets IFD this subIFD is nested within</summary>
 <returns>IFD this subIFD is nested within or null when this subIFD have not been associated with parent IFD yet.</returns>
 <value>Setter of this property is not bublicly accessible. Value of this property is set when subIFD is associted with parent IFD.</value>
 <seelaso cref="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord"/>
 <version version="1.5.2"><see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added</version>
</member>
<member name="F:Tools.MetadataT.ExifT.SubIfd._ParentIFD">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentIFD"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.SubIfd._ParentRecord">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord">
 <summary>Gets tag number of record this subIFD is pointed by</summary>
 <returns>Tag number of record this subIFD is pointed by</returns>
 <value>Setter of this property is not publicly accessible. Value of this property is set when subIFD is associated with parent IFD</value>
 <remarks>This property is of type which is not CLS-compliant. Function <see cref="M:Tools.MetadataT.ExifT.SubIfd.getParentRecord"/> returns value of this property in CLS-compliant type.
 <para>When some Exif tag is referenced as parent record of some subIFD its value is meaningless - actually it is address of start of subIFD in Exif stream which can change after saving. Although you can change value of such tag, it has no effect. Value of this the tag is automatically computed when Exif is about to be saved.</para></remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.SubIfd.getParentRecord"/><seelaso cref="P:Tools.MetadataT.ExifT.SubIfd.ParentIFD"/>
</member>
<member name="M:Tools.MetadataT.ExifT.SubIfd.getParentRecord">
 <summary>Returns value of the <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord"/> property in CLS-compliant type <see cref="T:System.Int32"/></summary>
 <returns><see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord"/></returns>
 <remarks>This function is provided only for CLS-compliance reasons. You'd better use <see cref="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord"/> property.</remarks>
 <seelaso cref="P:Tools.MetadataT.ExifT.SubIfd.ParentRecord"/>
</member>
<member name="F:Tools.MetadataT.ExifT.SubIfd._Desc">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.SubIfd.Desc"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.SubIfd.Desc">
 <summary>Descriptive name of this Sub IFD</summary>
 <returns>Usually contain an empty string for non starndard Sub IFDs and comon English name for standard Sub IFDs. For non-standard Sub IFDs only when library have some ideda what can this Sub IFD mean this Sub IFD is captioned somehow</returns>
 <remarks>Currently there are no Non Standard Sub IFDs that have any caption, Captions of standard Sub IFDs are public constants declared in <see cref="T:Tools.MetadataT.ExifT.ExifReader"/></remarks>
 <version version="1.5.2"><see cref="T:System.ComponentModel.BrowsableAttribute"/>(false) added</version>
</member>
<member name="T:Tools.MetadataT.ExifT.Exif">
 <summary>Provides high-level acces to Exif metadata</summary>
 <remarks>This <see cref="T:Tools.MetadataT.IMetadata"/> supports metadata keys in format "X:RecordNumber" where X is either number of main IFD or E for Exif sub-IFD, G for GPS sub-IFD or I for interop sub-IFD.</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2">Methods <see cref="M:Tools.MetadataT.ExifT.Exif.Load(System.IO.Stream)"/>, <see cref="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)"/>, <see cref="M:Tools.MetadataT.ExifT.Exif.Save(System.IO.Stream)"/> and <see cref="M:Tools.MetadataT.ExifT.Exif.Update(System.IO.Stream)"/> added.</version>
 <version version="1.5.2">Added implementation of <see cref="T:Tools.IReportsChange"/></version>
 <version version="1.5.2">The <see cref="T:Tools.MetadataT.IMetadata"/> interface implemented</version>
</member>
<member name="F:Tools.MetadataT.ExifT.Exif.ExifName">
 <summary>Name used to identify Exif metadata in <see cref="T:Tools.MetadataT.IMetadataProvider"/></summary>
 <version version="1.5.2">Constant introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.#ctor">
 <summary>Do nothing CTor</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.#ctor(Tools.MetadataT.ExifT.ExifReader)">
 <summary>CTor - loads data from <see cref="T:Tools.MetadataT.ExifT.ExifReader"/></summary>
 <param name="reader"><see cref="T:Tools.MetadataT.ExifT.ExifReader"/> to load data from</param>
 <remarks>Instance created by this constructor cannot be easily used to updated Exif data stored in stream (i.e. file). Use <see cref="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)"/> for this purpose.</remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)"/><seelaso cref="M:Tools.MetadataT.ExifT.Exif.Load(System.IO.Stream)"/>
</member>
<member name="F:Tools.MetadataT.ExifT.Exif.__IFD0">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.Exif.IFD0"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.Exif.IFD0">
 <summary>Gets or sets firts IFD of this instance (so-called Main IFD)</summary>
 <returns>First IFD (so-called IFD0 or Main IFD) of current Exif metadata</returns>
 <value>Sets firts IFD (so-called IFD0 or Main  IFD). It must be of type <see cref="T:Tools.MetadataT.ExifT.IfdMain"/></value>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> of value being set is non-null and is not current instance -or-
 <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> of value being set is non-null. -or-
 Value being set is already used somewhere else in this <see cref="T:Tools.MetadataT.ExifT.Exif"/>.</exception>
 <exception cref="T:Tools.TypeMismatchException">Value being set has <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> set but it is not of type <see cref="T:Tools.MetadataT.ExifT.IfdMain"/>.</exception>
 <seelaso cref="P:Tools.MetadataT.ExifT.Exif.ThumbnailIFD"/>
</member>
<member name="P:Tools.MetadataT.ExifT.Exif.ThumbnailIFD">
 <summary>Gets or sets IFD1 - so called Thumbnail IFD</summary>
 <returns>IFD1 if there is any; null otherwise</returns>
 <value>Sets IFD1 - the <see cref="P:Tools.MetadataT.ExifT.Ifd.Following">following</see> IFD of <see cref="P:Tools.MetadataT.ExifT.Exif.IFD0"/>. If <see cref="P:Tools.MetadataT.ExifT.Exif.IFD0"/> is null it is set to an empty instance of <see cref="T:Tools.MetadataT.ExifT.IfdMain"/></value>
 <exception cref="T:System.ArgumentException">Value being set have <see cref="P:Tools.MetadataT.ExifT.Exif.IFD0"/> as one of its <see cref="P:Tools.MetadataT.ExifT.Ifd.Following"/> IFDs =or= Value being set has non-null value of the <see cref="P:Tools.MetadataT.ExifT.Ifd.Previous"/> property. =or= Value being set has non-null <see cref="P:Tools.MetadataT.ExifT.Ifd.Exif"/> property which is different from current instance. =or= Value being set is already used as IFD at another position in this instance.</exception>
 <seelaso cref="P:Tools.MetadataT.ExifT.Exif.IFD0"/><seelaso cref="P:Tools.MetadataT.ExifT.Ifd.Following"/>
</member>
<member name="P:Tools.MetadataT.ExifT.Exif.SubIFDs">
 <summary>Gets all subIFDs and sub-subIFDs etc. present in this instance</summary>
 <remarks>Collection of all subIFDs in this instance. This collection does not contain IFDs folowing (linked-list connected) to subIFDs, but contains any possible subIFDs linked from such subIFD-following IFD.</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.ContainsIFD(Tools.MetadataT.ExifT.Ifd)">
 <summary>Gets value indicationg if given <see cref="P:Tools.MetadataT.ExifT.Exif.IFD(Tools.MetadataT.ExifT.Exif.IFDIndexes)"/> is used somewhere in this <see cref="T:Tools.MetadataT.ExifT.Exif"/></summary>
 <param name="IFD">Instance to look for</param>
 <remarks>True if given instance is used somewhere in current instance</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.Load(System.IO.Stream)">
 <summary>Loads Exif data from stream.</summary>
 <param name="Stream">Stream to load data from</param>
 <returns>Exif data loaded from <paramref name="Stream"/></returns>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> is null.</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="Stream"/> is not zero-lenght and does not support seeking and reeding.</exception>
 <remarks>Data loaded by this method are not intended to be edited and saved (though it is possible via <see cref="T:Tools.MetadataT.ExifT.ExifWriter"/>).</remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)"/>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.Load(Tools.MetadataT.ExifT.IExifGetter)">
 <summary>Loads Exif data from <see cref="T:Tools.MetadataT.ExifT.IExifGetter"/>.</summary>
 <param name="Source"><see cref="T:Tools.MetadataT.ExifT.IExifGetter"/> to load data from.</param>
 <returns>Exif data loaded from <paramref name="Source"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name=" Source "/> is null</exception>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <exception cref="T:System.InvalidOperationException">Stream obtained from <paramref name="Source"/> is not zero-lenght and does not support seeking and reeding.</exception>
 <remarks>Data loaded by this method are not intended to be edited and saved (though it is possible via <see cref="T:Tools.MetadataT.ExifT.ExifWriter"/>).</remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)"/>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)">
 <summary>Loads Exif data from stream. Data loaded by this method can be updated and than saved back.</summary>
 <param name="Stream">Stream to load data from</param>
 <returns>Exif data loaded from <paramref name="Stream"/></returns>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> is null.</exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="Stream"/> is not zero-lenght and does not support seeking and reeding.</exception>
 <seelaso cref="M:Tools.MetadataT.ExifT.Exif.Update(System.IO.Stream)"/>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="F:Tools.MetadataT.ExifT.Exif.OriginalData">
 <summary>Keeps original data this instance was loaded from.</summary>
 <remarks>Data re kept for saving purposes.</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(Tools.MetadataT.ExifT.IExifGetter)">
 <summary>Loads Exif data from <see cref="T:Tools.MetadataT.ExifT.IExifGetter"/>. Data loaded by this method can be updated and than saved back.</summary>
 <param name="Source"><see cref="T:Tools.MetadataT.ExifT.IExifGetter"/> providing stream to load data from</param>
 <returns>Exif data loaded from <paramref name="Stream"/></returns>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.ObjectDisposedException">The source stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Source"/> is null.</exception>
 <seelaso cref="M:Tools.MetadataT.ExifT.Exif.Update(System.IO.Stream)"/>
 <exception cref="T:System.InvalidOperationException">Stream obtained from <paramref name="Source"/> is not zero-lenght and does not support seeking and reeding.</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.Save(System.IO.Stream)">
 <summary>Saves Exif data to stream</summary>
 <param name="Stream">Stream to save data to</param>
 <remarks>This method simply replace any Exif data previously in stream. It does not preseve any unknown data such as Maker notes. Use <see cref="M:Tools.MetadataT.ExifT.Exif.Update(System.IO.Stream)"/> to preserv unknown data.</remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.Exif.Update(System.IO.Stream)"/>
 <exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> is null</exception>
 <exception cref="T:System.InvalidOperationException">The <see cref="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)"/> method failed. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Stream"/> does not support reading, seeking and writing</exception>
 <version version="1.5.2">Method introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.Save(Tools.MetadataT.ExifT.IExifWriter)">
 <summary>Saves Exif data to <see cref="T:Tools.MetadataT.ExifT.IExifWriter"/></summary>
 <param name="Target"><see cref="T:Tools.MetadataT.ExifT.IExifWriter"/> providing stream to save data to</param>
 <remarks>This method simply replace any Exif data previously in stream. It does not preseve any unknown data such as Maker notes. Use <see cref="M:Tools.MetadataT.ExifT.Exif.Update(System.IO.Stream)"/> to preserv unknown data.</remarks>
 <seelaso cref="M:Tools.MetadataT.ExifT.Exif.Update(System.IO.Stream)"/>
 <exception cref="T:System.ArgumentNullException"><paramref name="Target"/> is null</exception>
 <exception cref="T:System.InvalidOperationException">The <see cref="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)"/> method failed. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
 <exception cref="T:System.ArgumentException">Stream obtained from <paramref name="Target"/> does not support reading, seeking and writing</exception>
 <version version="1.5.2">Method introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.Update(System.IO.Stream)">
 <summary>Updates Exif data in stream with new values preserving all unknown data.</summary>
 <param name="Stream">Stream to updata data in</param>
 <remarks>This method can only update data in stream with same content as stream this instance was created from using <see cref="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)"/>.
 <para>When this method finishes succesfully, this instance can be used to update <paramref name="Stream"/> again, but it can no longer be used to update original stream it was created from.</para>
 <para>Although this method preserves any data in Exif stream that this implementation of Exif does not undertand it is still possible to break the data. When you change value of record that is pointer to such unknown data. So, do not edit values of records you do not know what are the records good for.</para></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> is null.</exception>
 <exception cref="T:System.InvalidOperationException">This instance was not created using <see cref="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)"/>. 
 -or- Length of stream this instance was created from and length of <paramref name="Stream"/> differs.
 -or- The <see cref="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)"/> method failed. Seee <see cref="P:System.Exception.InnerException"/> for details.</exception>
 <exception cref="T:System.Data.DBConcurrencyException">Content of stream this instance was created from differs from content of <paramref name="Stream"/>.</exception>
 <version version="1.5.2">Method introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.Update(Tools.MetadataT.ExifT.IExifWriter)">
 <summary>Updates Exif data in <see cref="T:Tools.MetadataT.ExifT.IExifWriter"/> with new values preserving all unknown data.</summary>
 <param name="Target">Stream to updata data in</param>
 <remarks>This method can only update data in stream with same content as stream this instance was created from using <see cref="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)"/>.
 <para>When this method finishes succesfully, this instance can be used to update <paramref name="Target"/> again, but it can no longer be used to update original stream it was created from.</para>
 <para>Although this method preserves any data in Exif stream that this implementation of Exif does not undertand it is still possible to break the data. When you change value of record that is pointer to such unknown data. So, do not edit values of records you do not know what are the records good for.</para></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Target"/> is null.</exception>
 <exception cref="T:System.InvalidOperationException">This instance was not created using <see cref="M:Tools.MetadataT.ExifT.Exif.LoadForUpdating(System.IO.Stream)"/>. 
 -or- Length of stream this instance was created from and length of stream obtained from <paramref name="Target"/> differs.
 -or- The <see cref="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)"/> method failed. Seee <see cref="P:System.Exception.InnerException"/> for details.
 -or- Stream obtained from <paramref name="Target"/> is null or zero-lenght.</exception>
 <exception cref="T:System.Data.DBConcurrencyException">Content of stream this instance was created from differs from content of <paramref name="Stream"/>.</exception>
 <version version="1.5.2">Method introduced</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.OnChanged(System.EventArgs)">
 <summary>Raises the <see cref="M:Tools.MetadataT.ExifT.Exif.OnChanged(System.EventArgs)"/> event; caled when <see cref="P:Tools.MetadataT.ExifT.Exif.IFD0"/>.<see cref="E:Tools.MetadataT.ExifT.Ifd.Changed">Changed</see> occurs.</summary>
 <param name="e">Event parameters (passed from <see cref="P:Tools.MetadataT.ExifT.Exif.IFD0"/>.<see cref="E:Tools.MetadataT.ExifT.Ifd.Changed">Changed</see>)</param>
 <remarks><note type="inheritnifo">Always call base class method in order event to be raised.</note></remarks>
 <version version="1.5.2">Method added</version>
</member>
<member name="E:Tools.MetadataT.ExifT.Exif.Changed">
 <summary>Raised when value of member changes</summary>
 <remarks><paramref name="e"/>Should contain additional information that can be used in event-handling code (e.g. use <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> class)</remarks>
 <version version="1.5.2">Event added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data. </param>
 <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization. Ignored in this implementation. </param>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is nul</exception>
 <exception cref="T:System.InvalidOperationException">The <see cref="M:Tools.MetadataT.ExifT.ExifWriter.Save(Tools.MetadataT.ExifT.Exif,Tools.MetadataT.ExifT.ExifWriter.RecordWrittenCallback)"/> method failed. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
 <version version="1.5.2">Method added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>Deserialization CTor</summary>
 <param name="information"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> to read data from</param>
 <param name="context">Serialization context. Ignored.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="information"/> is null -or- Value of "data" in <paramref name="information"/> is null.</exception>
 <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="information"/> does not contain value named "data".</exception>
 <exception cref="T:System.InvalidCastException"><paramref name="information"/> contain value named "data", but it cannot be converted to <see cref="T:System.Byte"/>[].</exception>
 <exception cref="T:System.IO.InvalidDataException">
 Invalid byte order mark (other than 'II' or 'MM') at the beginning of stream -or-
 Byte order test (2 bytes next to byte order mark, 3rd and 4th bytes in stream) don't avaluates to value 2Ah
 </exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached unexpectedly.</exception>
 <version version="1.5.2">CTor added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.ContainsKey(System.String)">
 <summary>Gets value indicating wheather metadata value with given key is present in current instance</summary>
 <param name="Key">Key (or name) to check presence of (see <see cref="M:Tools.MetadataT.ExifT.Exif.GetPredefinedKeys"/> for possible values)</param>
 <returns>True when value for given key is present; false otherwise</returns>
 <remarks>The <paramref name="Key"/> parameter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Key"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> does not represent predefined Exif property name and: <paramref name="Key"/> does not contain exactly 2 :-separated parts or 1st part of <paramref name="Key"/> is neither E, G, I or integer number. or Record number part or <paramref name="Key"/> is not valid <see cref="T:System.UInt16"/> number.</exception>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetContainedKeys">
 <summary>Gets keys of all the metadata present in curent instance</summary>
 <returns>Keys in metadata-specific format of all the metadata present in curent instance. Never returns null; may return anempt enumeration.</returns>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetDescription(System.String)">
 <summary>Gets localized description for given key (or name)</summary>
 <param name="Key">Key (or name) to get description of</param>
 <returns>Localized description of purpose of metadata item identified by <paramref name="Key"/>; nul when description is not available.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> is in invalid format or it is not one of predefined names.</exception>
 <version version="1.5.2"></version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetHumanName(System.String)">
 <summary>Gets localized human-readable name for given key (or name)</summary>
 <param name="Key">Key (or name) to get name for</param>
 <returns>Human-readable descriptive name of metadata item identified by <paramref name="Key"/>; null when no such name is defined/known.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Key"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> does not represent predefined Exif property name and: <paramref name="Key"/> does not contain exactly 2 :-separated parts or 1st part of <paramref name="Key"/> is neither E, G, I or integer number. or Record number part or <paramref name="Key"/> is not valid <see cref="T:System.UInt16"/> number.</exception>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetKeyOfName(System.String)">
 <summary>Gets key for predefined name</summary>
 <param name="name">Name to get key for</param>
 <returns>Key in metadata-specific format for given predefined metadata item name</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Name"/> is not one of predefined names retuened by <see cref="M:Tools.MetadataT.ExifT.Exif.GetPredefinedNames"/>.</exception>
 <version version="1.5.2">Function added</version>
 <version version="1.5.3">Parameter <c>Name</c> renamed to <paramref name="name"/></version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetNameOfKey(System.String)">
 <summary>Gets name for key</summary>
 <param name="Key">Key to get name for</param>
 <returns>One of predefined names to use instead of <paramref name="Key"/>; null when given key has no corresponding name.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Key"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> does not contain exactly 2 :-separated parts or 1st part of <paramref name="Key"/> is neither E, G, I or integer number. or Record number part or <paramref name="Key"/> is not valid <see cref="T:System.UInt16"/> number.</exception>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetPredefinedKeys">
 <summary>Gets all keys predefined for curent metadata format</summary>
 <returns>Eumeration containing all predefined (well-known) keys of metadata for this metadata format. Returns always the same enumeration event when values for some keys are not present. Never returns null; may return an empty enumeration.</returns>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetPredefinedNames">
 <summary>Gets all predefined names for metadata keys</summary>
 <returns>Enumeration containing all predefined names of metadata items for this metadada format. Never returns null; may return an empty enumeration.</returns>
 <remarks>Names retuned are actually names of items from enumerations <see cref="T:Tools.MetadataT.ExifT.IfdMain.Tags"/>, <see cref="T:Tools.MetadataT.ExifT.IfdExif.Tags"/>, <see cref="T:Tools.MetadataT.ExifT.IfdGps.Tags"/> and <see cref="T:Tools.MetadataT.ExifT.IfdInterop.Tags"/>. There are no names predefined for IFD1 and following.</remarks>
 <version version="1.5.2">Function added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.Exif.Name">
 <summary>Gets name of metadata format represented by implementation</summary>
 <returns><see cref="F:Tools.MetadataT.ExifT.Exif.ExifName"/></returns>
 <remarks>All <see cref="T:Tools.MetadataT.IMetadataProvider">IMetadataProviders</see> returning Exif format should identify the format by this name.</remarks>
 <version version="1.5.2">Property added</version>
</member>
<member name="P:Tools.MetadataT.ExifT.Exif.Value(System.String)">
 <summary>Gets medata value with given key</summary>
 <param name="key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.ExifT.Exif.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key; or null if given metadata value is not supported</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid format and it is not one of predefined names</exception>
 <remarks>The <paramref name="Key"/> peremeter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> does not represent predefined Exif property name and: <paramref name="key"/> does not contain exactly 2 :-separated parts or 1st part of <paramref name="Key"/> is neither E, G, I or integer number. or Record number part or <paramref name="key"/> is not valid <see cref="T:System.UInt16"/> number.</exception>
 <version version="1.5.2">Property added</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
 <version version="1.5.4">Newly utilizes <see cref="P:Tools.MetadataT.ExifT.ExifTagFormat.EnumType"/>. If <see cref="P:Tools.MetadataT.ExifT.ExifTagFormat.EnumType"/> is specified for current tag attempts to provide value of enumerated type rather than of underlying type or <see cref="T:System.String"/>.</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetStringValue(System.String,System.IFormatProvider)">
 <summary>Gets metadata value with given key as string</summary>
 <param name="key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.ExifT.Exif.GetPredefinedKeys"/> for possible values)</param>
 <param name="provider">Culture to be used. If null current is used.</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value is not supported</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> has invalid format and it is not one of predefined names</exception>
 <remarks>The <paramref name="Key"/> peremeter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <version version="1.5.4">Method added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetStringValue(System.String)">
 <summary>Gets metadata value with given key as string</summary>
 <param name="key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.ExifT.Exif.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value is not supported</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid format and it is not one of predefined names</exception>
 <remarks>The <paramref name="key"/> peremeter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <version version="1.5.2">Method added</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
 <version version="1.5.4">Following tags now receive special string representation:
 <see cref="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSAltitude"/>, <see cref="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSLatitude"/>, <see cref="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSLongitude"/>, <see cref="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestLongitude"/>, <see cref="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestLatitude"/>, <see cref="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSLongitudeRef"/>, <see cref="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestLongitudeRef"/>, <see cref="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSLatitudeRef"/>, <see cref="F:Tools.MetadataT.ExifT.IfdGps.Tags.GPSDestLatitudeRef"/>
 </version>
</member>
<member name="P:Tools.MetadataT.ExifT.Exif.Disposed">
 <summary>Gets value indicating if this instance was already disposed or not</summary>
 <returns>This implementation always returns false because this class does not implement <see cref="T:System.IDisposable"/></returns>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="T:Tools.MetadataT.ExifT.Exif.IFDIndexes">
 <summary>Stores either non-negative (any, even undefined in this enumeration) value for IFD number or negative value for known sub-IFD</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.Exif.IFDIndexes.Exif">
 <summary>Exif sub-IFD</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.Exif.IFDIndexes.GPS">
 <summary>GPS sub-IFD</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.Exif.IFDIndexes.Interop">
 <summary>Interoperability sub-IFD</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.Exif.IFDIndexes.IFD0">
 <summary>IFD 0 (main IFD)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.Exif.IFDIndexes.ThumbnailIFD">
 <summary>Thumbnail IFD (IFD 1)</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.InterpretKey(System.String,Tools.MetadataT.ExifT.Exif.IFDIndexes@,System.UInt16@,System.Boolean)">
 <summary>Interprets Exif metadata key in format "X:RecordNumber" as IFD index and record number</summary>
 <param name="key">Key to interpret</param>
 <param name="ifd">When method returns contains index of IFD</param>
 <param name="recordNumber">When method returns contains record number</param>
 <param name="allowPredefined">True to allow predefined names to be utilized; false to allow keys in specified format only.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> does not represent predefined Exif property name (when <paramref name="allowPredefined"/> is true) and: <paramref name="key"/> does not contain exactly 2 :-separated parts or 1st part of <paramref name="key"/> is neither E, G, I or integer number. or Record number part or <paramref name="key"/> is not valid <see cref="T:System.UInt16"/> number.</exception>
 <version version="1.5.2">Method added</version>
 <version version="1.5.3">Parameters renamed: <c>Key</c> to <paramref name="key"/>, <c>IFD</c> to <paramref name="ifd"/>, <c>RecordNumber</c> to <paramref name="recordNumber"/>, <c>AllowPredefined</c> to <paramref name="allowPredefined"/>.</version>
</member>
<member name="P:Tools.MetadataT.ExifT.Exif.IFD(Tools.MetadataT.ExifT.Exif.IFDIndexes)">
 <summary>Gets IFD identified by <see cref="T:Tools.MetadataT.ExifT.Exif.IFDIndexes"/></summary>
 <param name="Index">Index identifiying the IFD</param>
 <returns>IFD identified by index, if exists; null otherwise</returns>
 <version version="1.5.2">Property added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetProperty(System.String)">
 <summary>Gets IFD property from tag key</summary>
 <param name="Key">Key to get property for</param>
 <returns>Property of <see cref="T:Tools.MetadataT.ExifT.Ifd"/>-derived class representing metadata item with key <paramref name="Key"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Key"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> does not represent predefined Exif property name and: <paramref name="Key"/> does not contain exactly 2 :-separated parts or 1st part of <paramref name="Key"/> is neither E, G, I or integer number. or Record number part or <paramref name="Key"/> is not valid <see cref="T:System.UInt16"/> number.</exception>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.MetadataT.ExifT.Exif.GetKeyOfName(System.String,System.Boolean)">
 <summary>Gets key for predefined name</summary>
 <param name="name">Name to get key for</param>
 <param name="throwException">True to throw <see cref="T:System.ArgumentException"/> whan <paramref name="name"/> is not known name.</param>
 <returns>Key in metadata-specific format for given predefined metadata item nam; null if key is not known.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="throwException"/> is true and <paramref name="Name"/> is not one of predefined names retuened by <see cref="M:Tools.MetadataT.ExifT.Exif.GetPredefinedNames"/>.</exception>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifRecordDescription">
 <summary>Describes one Exif record</summary>
 <remarks>Descibes which data type record actually contains, how many items of such datatype. For recognized tags also possible format is specified via <see cref="T:Tools.MetadataT.ExifT.ExifTagFormat"/></remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifRecordDescription.NumberOfElements">
 <summary>Number of elements of type <see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType"/> contained in record</summary>
 <remarks>Note for inheritors: Do not expose setter of this property. Do not change value of this property during live-time of instance. This restriction is here because <see cref="T:Tools.MetadataT.ExifT.ExifRecord"/> cannot track changes of this property.</remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType">
 <summary>Data type of items in record</summary>
 <remarks>Note for inheritors: Do not expose setter of this property. Do not change value of this property during live-time of instance. This restriction is here because <see cref="T:Tools.MetadataT.ExifT.ExifRecord"/> cannot track changes of this property.</remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifRecordDescription.#ctor(Tools.MetadataT.ExifT.ExifDataTypes,System.UInt16)">
 <summary>CTor</summary>
 <param name="DataType">Data type of record</param>
 <param name="NumberOfElements">Number of elements of type <paramref name="DataType"/> in record.</param>
 <param name="enumType">Type of enumeration (in case this record's value is enumerated)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="NumberOfElements"/> is 0</exception>
 <version version="1.5.4">Parameter names changed to cammelCase</version>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifRecordDescription.#ctor(System.UInt16,Tools.MetadataT.ExifT.ExifDataTypes)">
 <summary>Protected CTor that allows <see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.NumberOfElements"/> to be zero</summary>
 <param name="NumberOfElements">Number of elements of type <paramref name="DataType"/> in record.</param>
 <param name="DataType"></param>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifTagFormat">
 <summary>Describes which data can be stored in recognized Exif tag</summary>
 <remarks>Describas which datatype(s) and lengt if allowed for specific recognized Exif record. Actual content of record is described by <see cref="T:Tools.MetadataT.ExifT.ExifRecordDescription"/></remarks>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifTagFormat.#ctor(System.UInt16,System.UInt16,System.String,Tools.MetadataT.ExifT.ExifDataTypes[])">
 <summary>CTor</summary>
 <param name="NumberOfElements">Number of elemets that must exactly be in tag. If number of elements can varry pass 0 here</param>
 <param name="Tag">Number of tag</param>
 <param name="Name">Short name of tag</param>
 <param name="DataTypes">Possible datatypes of tag. First datatype specified must be the widest and must be always specified and will be used as default</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="DataTypes"/> is null or contains no element</exception>
 <version version="1.5.4">Parameter names changed to cammelCase</version>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifTagFormat.#ctor(System.UInt16,System.UInt16,System.String,System.Type,Tools.MetadataT.ExifT.ExifDataTypes[])">
 <summary>CTor</summary>
 <param name="NumberOfElements">Number of elemets that must exactly be in tag. If number of elements can varry pass 0 here</param>
 <param name="Tag">Number of tag</param>
 <param name="Name">Short name of tag</param>
 <param name="DataTypes">Possible datatypes of tag. First datatype specified must be the widest and must be always specified and will be used as default</param>
 <param name="enumType">Type of enum value of this tag is expected to be one of values of</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="DataTypes"/> is null or contains no element</exception>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifTagFormat.EnumType">
 <summary>Gets type of enumeration values of this tag should belong to</summary>
 <returns>Type of enumeration values of this tag should be member of, null if this tag does use enumerated values</returns>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifTagFormat.TestThrowReturn(Tools.MetadataT.ExifT.ExifDataTypes[])">
 <summary>Test if <paramref name="DataTypes"/> is null or containc no element</summary>
 <param name="DataTypes">Array to test</param>
 <returns><paramref name="DataTypes"/></returns>
 <remarks>Used by ctor</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="DataTypes"/> is null or contains no element</exception>
 <version version="1.5.4">Parameter name <c>DataTypes</c> changed to <c>dataTypes</c></version>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifTagFormat._tag">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifTagFormat.Tag"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifTagFormat._name">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifTagFormat.Name"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifTagFormat.otherDatatypes">
 <summary>Contains list of possible datatypes for tag excepting datatype specified in <see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType"/></summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifTagFormat.Name">
 <summary>Represents short unique name of tag used to reference it</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifTagFormat.Tag">
 <summary>Represents tag code in Exif</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifTagFormat.DataTypes">
 <summary>Datatypes allowed for this tag</summary>
 <returns>Array of datatypes allowed for this tag. First element of the array is same as <see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType"/> amd represents default and preffered datatype</returns>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifRecord">
 <summary>Represents one Exif record</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifRecord.Fixed">
 <summary>True if <see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.NumberOfElements"/> of this record is fixed</summary>
 <version version="1.5.3">Fix: Throws <see cref="T:System.StackOverflowException"/></version>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifRecord.DataType">
 <summary>Datatype and number of items of record</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifRecord.Data">
 <summary>Value of record</summary>
 <remarks>Actual type depends on <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/></remarks>
 <value>
 When passing a value to this property and <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/>.<see cref="P:Tools.MetadataT.ExifT.ExifRecordDescription.DataType">DataType</see> is <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.ASCII"/>
 if value being passed is not null-terminated a null character (termination) is added to a value.
 So, for non-fixed values, value being passed must be one-character shorther than actual site of dataset.
 </value>
 <exception cref="T:System.InvalidCastException">Setting value of incompatible type</exception>
 <exception cref="T:System.ArgumentException">Attempt to assign value with other number of components when <see cref="P:Tools.MetadataT.ExifT.ExifRecord.Fixed"/> set to true</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <version version="1.5.4">Added logic to add terminating null char for ASCII data sets.</version>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifRecord.SetDataValue``1(System.Object)">
 <summary>Sets <paramref name="value"/> to <see cref="F:Tools.MetadataT.ExifT.ExifRecord._data"/> according to <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/></summary>
 <param name="value">Value to be set</param>
 <typeparam name="T">Type of value to be set</typeparam>
 <exception cref="T:System.InvalidCastException">Setting value of incompatible type</exception>
 <exception cref="T:System.ArgumentException">Attempt to assigne value with other number of components when <see cref="P:Tools.MetadataT.ExifT.ExifRecord.Fixed"/> set to true</exception>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifRecord.#ctor(Tools.MetadataT.ExifT.ExifRecordDescription,System.Object,System.Boolean)">
 <summary>CTor</summary>
 <param name="Data">Initial value of this record</param>
 <param name="Type">Describes type of data contained in this flag</param>
 <param name="Fixed">Determines if length of data can be changed</param>
 <exception cref="T:System.InvalidCastException">Value passed to <paramref name="Data"/> is not compatible with <paramref name="Type"/> specified</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Fixed"/> is set to true and lenght of <paramref name="Data"/> violates this constaint</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Data"/> is null</exception>
 <version version="1.5.4">Parameter names changed ton cammelCase</version>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifRecord.#ctor(System.Object,Tools.MetadataT.ExifT.ExifDataTypes,System.UInt16,System.Boolean)">
 <summary>CTor</summary>
 <param name="Data">Initial value of this record</param>
 <param name="Type">Data type of record</param>
 <param name="NumberOfComponents">Number of components of <paramref name="Type"/></param>
 <param name="fixed">Determines if length of data can be changed</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Data"/> is null</exception>
 <version version="1.5.4">Parameter names changed ton cammelCase</version>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifRecord.OnChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.MetadataT.ExifT.ExifRecord.Changed"/> event</summary>
 <param name="e">Event argument. Should be <see cref="T:Tools.IReportsChange.ValueChangedEventArgsBase"/>.</param>
 <remarks>Changes of properties of <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/> are not tracked.</remarks>
</member>
<member name="E:Tools.MetadataT.ExifT.ExifRecord.Changed">
 <summary>Raised when value of member changes</summary>
 <remarks><paramref name="e"/>Should contain additional information that can be used in event-handling code (e.g. use <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> class)
 <para>Changes of properties of <see cref="P:Tools.MetadataT.ExifT.ExifRecord.DataType"/> are not tracked.</para></remarks>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifIfdReader">
 <summary>Provides low level access to stream containing exif IFD (Image File Directory) or SubIFD</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2">ASCII Exif data are required to end with nullchar and the nullchar is trimmed</version>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifIfdReader.Settings">
 <summary>Settings that apply to reading</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifIfdReader.#ctor(Tools.MetadataT.ExifT.ExifReader,System.UInt32,Tools.MetadataT.ExifT.ExifReader.ExifReaderContext,System.Boolean@)">
 <summary>Advanced CTor used by <see cref="T:Tools.MetadataT.ExifT.ExifReader"/>. Allows passing context and indication of read cancellation.</summary>
 <param name="Exif"><see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.ExifReader"/> that contains this IFD</param>
 <param name="Offset">Offset of start of this IFD in <paramref name="Stream"/></param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the Exif stream is reached unexpectedly.</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Directory entry of unknown data type found</exception>
 <exception cref="T:System.IO.InvalidDataException">Tag data of some are placed outside the tag and cannot be read -or- (recoverable) ASCII data does not end with nullchar</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Context"/> is null.</exception>
 <param name="Context">Contains context and event handlers for this reading</param>
 <param name="Cancelled">Output parameter. Is set to true when handler cancells reading of whole IFD body</param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.MetadataT.ExifT.ExifIfdReader.#ctor(Tools.MetadataT.ExifT.ExifReader,System.UInt32)">
 <summary>CTor (uses default settings)</summary>
 <param name="Exif"><see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.ExifReader"/> that contains this IFD</param>
 <param name="Offset">Offset of start of this IFD in <paramref name="Stream"/></param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the Exif stream is reached unexpectedly.</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Directory entry of unknown data type found</exception>
 <exception cref="T:System.IO.InvalidDataException">Tag data of some are placed outside the tag and cannot be read</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifIfdReader._ExifReader">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.ExifReader"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifIfdReader.ExifReader">
 <summary>Gets <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.ExifReader"/> this <see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> have read data from.</summary>
 <returns>Instance of <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.ExifReader"/> that was passed to CTor of this instance.</returns>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifIfdReader._Entries">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.Entries"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifIfdReader._NextIFD">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.NextIFD"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifIfdReader.NextIFD">
 <summary>Offset of following IFD (or 0 if this is last IFD)</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifIfdReader.Entries">
 <summary>Entries in this IFD</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifIfdReader._Offset">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.Offest"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifIfdReader.Offest">
 <summary>Offset of this IFD in Exif data block</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.ExifIfdReader.IsSubIfd">
 <summary>Gets value indicating if this instance is reader of IFD or SubIFD</summary>
 <returns>True if this instance is reader of SubIFD. This implementation always returns false.</returns>
</member>
<member name="T:Tools.MetadataT.ExifT.SubIFDReader">
 <summary>Represents reader of Sub IFD</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.SubIFDReader.#ctor(Tools.MetadataT.ExifT.ExifReader,System.UInt32,System.String,Tools.MetadataT.ExifT.ExifIfdReader,System.Int32,Tools.MetadataT.ExifT.ExifIfdReader,System.Boolean@)">
 <summary>CTor</summary>
 <param name="Exif"><see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.ExifReader"/> that contains this IFD</param>
 <param name="Offset">Offset of start of this IFD in <paramref name="Stream"/></param>
 <param name="Desc">Descriptive name of this Sub IFD</param>
 <param name="ParentIFD"><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that represent IFD that contains current Sub IFD</param>
 <param name="ParentRecord">Point to <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.Entries"/> collection that points to record that points to this Sub IFD</param>
 <param name="PreviousSubIFD">Sub IFD which's <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.NextIFD"/> points to this Sub IFD. Can be null if this is first Sub IFD in line</param>
 <param name="Cancelled">Output parameter set to true if reading of the ifd was cancelled in event handler.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the Exif stream is reached unexpectedly.</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Directory entry of unknown data type found</exception>
 <exception cref="T:System.IO.InvalidDataException">Tag data of some are placed otside the tag and cannot be read</exception>
</member>
<member name="P:Tools.MetadataT.ExifT.SubIFDReader.IsSubIfd">
 <summary>Gets value indicating if this instance is reader of IFD or SubIFD</summary>
 <returns>True if this instance is reader of SubIFD. This implementation always returns true.</returns>
</member>
<member name="F:Tools.MetadataT.ExifT.SubIFDReader._Desc">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.SubIFDReader.Desc"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.SubIFDReader._ParentIFD">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.SubIFDReader.ParentIFD"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.SubIFDReader._ParentRecord">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.SubIFDReader.ParentRecord"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.SubIFDReader._PreviousSubIFD">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.SubIFDReader.PreviousSubIFD"/> property</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.SubIFDReader.Desc">
 <summary>Descriptive name of this Sub IFD</summary>
 <returns>Usually contain an empty string for non starndard Sub IFDs and comon English name for standard Sub IFDs. For non-standard Sub IFDs only when library have some ideda what can this Sub IFD mean this Sub IFD is captioned somehow</returns>
 <remarks>Currently there are no Non Standard Sub IFDs that have any caption, Captions of staandard Sub IFDs are public onstants declared in <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.ExifReader"/></remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.SubIFDReader.ParentIFD">
 <summary><see cref="T:Tools.MetadataT.ExifT.ExifIfdReader"/> that represent IFD that contains current Sub IFD</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.SubIFDReader.ParentRecord">
 <summary>Point to <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.Entries"/> collection that points to record that points to this Sub IFD</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.SubIFDReader.PreviousSubIFD">
 <summary>Sub IFD which's <see cref="P:Tools.MetadataT.ExifT.ExifIfdReader.NextIFD"/> points to this Sub IFD. Can be null if this is first Sub IFD in line</summary>
 <remarks>This can be standart Sub IFD (like Exif Sub IFD) or nonstandart one</remarks>
</member>
<member name="T:Tools.MetadataT.ExifT.DirectoryEntry">
 <summary>Represents read-only directory entry of Exif data</summary>
 <version version="1.5.2" stage="Nightly">Updated to use 2×32 bit <see cref="T:Tools.NumericsT.SRational"/> and <see cref="T:Tools.NumericsT.URational"/> instead of 2×16 bits ones.</version>
</member>
<member name="F:Tools.MetadataT.ExifT.DirectoryEntry._tag">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.Tag"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.DirectoryEntry._componets">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.Components"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.DirectoryEntry._dataIsStoredOutside">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.DataIsStoredOutside"/> property</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.DirectoryEntry._data">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.Data"/> property</summary>
</member>
<member name="M:Tools.MetadataT.ExifT.DirectoryEntry.#ctor(System.UInt16,Tools.MetadataT.ExifT.ExifDataTypes,System.UInt32,System.Byte[],Tools.MetadataT.ExifT.ExifReader,Tools.MetadataT.ExifT.ExifReader.ExifReaderContext)">
 <summary>CTor with <see cref="T:Tools.MetadataT.ExifT.ExifReader.ExifReaderContext"/></summary>
 <param name="tag">Tag identifier</param>
 <param name="kind">Data type</param>
 <param name="components">Number of components</param>
 <param name="data">Data or offset to data</param>
 <param name="exif"><see cref="T:Tools.MetadataT.ExifT.ExifReader"/> to obtain data from when <paramref name="Data"/> doesn't contain data but offset to data</param>
 <param name="context">Setting which takes effect on reading.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Kind"/> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/></exception>
 <exception cref="T:System.IO.InvalidDataException">Tag data are placed otside the tag and cannot be read -or- <paramref name="Kind"/> is <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.ASCII"/> and ASCII string is not ended with nullchar. Not thrown when exception is recoverable via <paramref name="Context"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Context"/> is null</exception>
 <version version="1.5.2"><see cref="T:System.IO.InvalidDataException"/> is thrown when <paramref name="Kind"/> is <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.ASCII"/> and string does not end with nullchar.</version>
 <version version="1.5.4">Parameter names changed to camelCase.</version>
</member>
<member name="M:Tools.MetadataT.ExifT.DirectoryEntry.#ctor(System.UInt16,Tools.MetadataT.ExifT.ExifDataTypes,System.UInt32,System.Byte[],Tools.MetadataT.ExifT.ExifReader)">
 <summary>CTor (uses default settings)</summary>
 <param name="tag">Tag identifier</param>
 <param name="kind">Data type</param>
 <param name="components">Number of components</param>
 <param name="data">Data or offset to data</param>
 <param name="exif"><see cref="T:Tools.MetadataT.ExifT.ExifReader"/> to obtain data from when <paramref name="Data"/> doesn't contain data but offset to data</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Kind"/> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/></exception>
 <exception cref="T:System.IO.InvalidDataException">Tag data are placed otside the tag and cannot be read</exception>
 <version version="1.5.4">Parameter names changed to camelCase</version>
</member>
<member name="M:Tools.MetadataT.ExifT.DirectoryEntry.ReadData(Tools.MetadataT.ExifT.ExifDataTypes,System.Byte[],System.Int32,Tools.IOt.BinaryReader.ByteAlign,Tools.MetadataT.ExifT.ExifReader.ExifReaderContext)">
 <summary>Reads data of specified type freom given <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s</summary>
 <param name="type">Type of data to read</param>
 <param name="align">Format in whicvh data are stored</param>
 <param name="buffer">Buffer to read data from</param>
 <param name="components">Number of components to be read</param>
 <returns>Data read from buffer. If <paramref name="Components"/> is 1 scalar of specified type is returned, <see cref="T:System.Array"/> otherwise with exceptions: 1 component of type <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.ASCII"/> resuts to <see cref="T:System.Char"/>, more components results to <see cref="T:System.String"/>; <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.NA"/> always results to <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Type"/> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/> (and error recovery is not allowed).</exception>
 <exception cref="T:System.IO.InvalidDataException"><paramref name="Type"/> is <see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.ASCII"/> and string is not terminated with nullchar  (and error recovery is not allowed).</exception>
 <param name="Context">Setting which takes effect on reading.</param>
 <version version="1.5.2">Updated to use 2×32 bits <see cref="T:Tools.NumericsT.SRational"/> and <see cref="T:Tools.NumericsT.URational"/> instead fo 2×16 bits.</version>
 <version version="1.5.2">ASCII values are required to end with nullchar, it's trimmed and <see cref="T:System.IO.InvalidDataException"/> is thrown when they don't end.</version>
 <version version="1.5.4">Parameter names changed to camelCase</version>
</member>
<member name="M:Tools.MetadataT.ExifT.DirectoryEntry.BytesPerComponent(Tools.MetadataT.ExifT.ExifDataTypes)">
 <summary>Gets number of bytes per component of specified Exif data type</summary>
 <param name="DataType">Data type to get number of bytes per component of</param>
 <returns>Number of bytes per one component of specified Exif data type</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="DataType"/> is not member of <see cref="T:Tools.MetadataT.ExifT.ExifDataTypes"/></exception>
</member>
<member name="P:Tools.MetadataT.ExifT.DirectoryEntry.Tag">
 <summary>Identifier of this directory entry (tag)</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.DirectoryEntry.DataType">
 <summary>Kind of data stored in this directory entry</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.DirectoryEntry.Components">
 <summary>Number of components of data stored in this directory entry</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.DirectoryEntry.DataIsStoredOutside">
 <summary>Gets wheather data is store inside directory entry (true) or outside (false)</summary>
</member>
<member name="P:Tools.MetadataT.ExifT.DirectoryEntry.Data">
 <summary>Data of this directory entry</summary>
 <remarks>
 Actual data type of this property depends on <see cref="P:Tools.MetadataT.ExifT.DirectoryEntry.DataType"/>
 <para>For ASCII properties data are terurned without terminating nullchar.</para>
 <note>If ASCII value contains a nullchar in middle of data only part before first nullchar is returned because as per Exif specificcation ASCII values are nullchar-terminated.</note>
 </remarks>
 <version version="1.5.4">Added nullchar handling</version>
</member>
<member name="T:Tools.MetadataT.ExifT.ExifDataTypes">
 <summary>Possible data types for Exif values</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.Byte">
 <summary>Unsigned 1-byte integer (<see cref="T:System.Byte"/>)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.ASCII">
 <summary>ASCII string</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.UInt16">
 <summary>Unsigned 2-bytes integer (<see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.UInt16"/>)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.UInt32">
 <summary>Unsigned 4-bytes integer (<see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.UInt32"/>)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.URational">
 <summary>Unsigned rational (2 4-bytes unsigned integers), first is numerator and second is deniminator</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.SByte">
 <summary>Singned 1-byte integer (<see cref="T:System.SByte"/>)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.NA">
 <summary>Unknown data type</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.Int16">
 <summary>Signed 2-bytes integer (<see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.Int16"/>)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.Int32">
 <summary>Signed 4-bytes integer (<see cref="F:Tools.MetadataT.ExifT.ExifDataTypes.Int32"/>)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.SRational">
 <summary>Signed rational (2 4-bytes signed integers), first is numerator and second is deniminator</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.Single">
 <summary>Single floating point number (<see cref="T:System.Single"/>)</summary>
</member>
<member name="F:Tools.MetadataT.ExifT.ExifDataTypes.Double">
 <summary>Double floating point number (<see cref="T:System.Double"/>)</summary>
</member>
<member name="T:Tools.MetadataT.ExifT.IExifGetter">
 <summary>Represents provider that provides stream of Exif data</summary>
 <seealso cref="T:Tools.MetadataT.ExifT.IExifWriter"/><seealso cref="T:Tools.MetadataT.IptcT.IIptcGetter"/>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Beta"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IExifGetter.GetExifStream">
 <summary>Gets stream of Exif data</summary>
 <returns>Stream of Exif data. Can return null or an empty stream where there are no Exif data.</returns>
 <remarks>
 <para>Stream content must start with TIFF header</para>
 <para>If there is no Exif data in file stream can be null or have zero length</para>
 <para>Stream must support reading and seeking</para>
 </remarks>
</member>
<member name="T:Tools.MetadataT.ExifT.IExifWriter">
 <summary>Represents provider that provides stream of Exif data for reading and writing</summary>
 <seealso cref="T:Tools.MetadataT.ExifT.IExifGetter"/><seealso cref="T:Tools.MetadataT.IptcT.IIptcWriter"/>
 <author www="htp://dzonny.cz">Đonny</author>
 <version stage="Beta" version="1.5.2">Added <see cref="M:Tools.MetadataT.ExifT.IExifWriter.ExifEmbded(System.IO.Stream)"/> overload</version>
</member>
<member name="M:Tools.MetadataT.ExifT.IExifWriter.GetWritableExifStream">
 <summary>Gets stream of Exif data</summary>
 <returns>Stream of Exif data which supports reading as well as writing. Return value can be null or zero-lenght stream if there is currently no Exif data.
 <para>If this function returns null, caller shall use <see cref="M:Tools.MetadataT.ExifT.IExifWriter.ExifEmbded(System.Byte[])"/> instead.</para></returns>
 <remarks>
 <para>If class implements <see cref="T:Tools.MetadataT.ExifT.IExifGetter"/> as well as <see cref="T:Tools.MetadataT.ExifT.IExifWriter"/> the <see cref="M:Tools.MetadataT.ExifT.IExifGetter.GetExifStream"/> and <see cref="M:Tools.MetadataT.ExifT.IExifWriter.GetWritableExifStream"/> functions can be (but have not to be) implemented by same function.
 Note: You can find it better to implement both methods separatelly, because stream returned by <see cref="M:Tools.MetadataT.ExifT.IExifGetter.GetExifStream"/> can have simplier implementation.</para>
 <para>Stream content must start with TIFF header.</para>
 <para>If there is no exif data in file stream can have zero lenght.</para>
 <para>Stream must support reading, writing and seeking.</para>
 <para>Stream must support changes of its lenght - both growing and shrinking. Namely when stream is returned as constrained stream which represents part of another stream it must properly handle situation when new Exif data are shorter or longer than original.
 The tools library provides class <see cref="T:Tools.IOt.OverflowStream"/> which implements stream that operates over another base stream and supports changes of lenght.</para>
 </remarks>
</member>
<member name="P:Tools.MetadataT.ExifT.IExifWriter.ContainsExif">
 <summary>Gets value indicating if there is any Exif data currently embdeded in this instance.</summary>
 <returns>True if thie instance contains Exif data and <see cref="M:Tools.MetadataT.ExifT.IExifWriter.GetWritableExifStream"/> returns valid stream of Exif data, false where there is no Exif data, so it is safe to use <see cref="M:Tools.MetadataT.ExifT.IExifWriter.ExifEmbded(System.Byte[])"/> without possible data loss of unknown Exif content.</returns>
</member>
<member name="M:Tools.MetadataT.ExifT.IExifWriter.ExifEmbded(System.Byte[])">
 <summary>Replaces whole Exif data with given aray of bytes</summary>
 <param name="ExifData">New Exif data to be embdeded in this instance. <paramref name="ExifData"/> contains full Exif data block including TIFF header. If <paramref name="ExifData"/> is null all Exif data shall be erased.</param>
</member>
<member name="M:Tools.MetadataT.ExifT.IExifWriter.ExifEmbded(System.IO.Stream)">
 <summary>Replaces whole Exif data with content of given stream.</summary>
 <param name="ExifData">Contains exif data. Stream must be on its initial position. This methods does not seek. Mus support reading. Contains full Exif data including TIFF header. If null Exif data should be erased.</param>
 <version version="1.5.2">This overload added</version>
</member>
<member name="T:Tools.MetadataT.ImageMetadata">
 <summary>Provides acces to common properties of images exposed by the <see cref="T:System.Drawing.Image"/> class using <see cref="T:Tools.MetadataT.IMetadata"/> interface</summary>
 <remarks>This implementation of <see cref="T:Tools.MetadataT.IMetadata"/> supports only named values. Possible values for keys are same as possible values for names.</remarks>
 <version version="1.5.3" stage="Nightly">Class introduced</version>
 <version version="1.5.4">Error messages, property names and descriptions localized.</version>
 <version version="1.5.4">This class now internally uses <see cref="T:Tools.MetadataT.MetadataPropertyDescriptor`1"/></version>
</member>
<member name="F:Tools.MetadataT.ImageMetadata.Image">
 <summary>Image, metadata are provided for</summary>
</member>
<member name="F:Tools.MetadataT.ImageMetadata.CreatedImage">
 <summary>True wne <see cref="F:Tools.MetadataT.ImageMetadata.Image"/> was created in CTor and thus should be destroyed in <see cref="M:Tools.MetadataT.ImageMetadata.Finalize"/>.</summary>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.#ctor(System.String)">
 <summary>CTor creates a new instance of <see cref="T:Tools.MetadataT.ImageMetadata"/> from image file represented by filename</summary>
 <param name="FileName"></param>
 <exception cref="T:System.ArgumentException">The file does not have a valid image format.  -or- GDI+ does not support the pixel format of the file. -or- <paramref name="FileName"/> is a System.Uri.</exception>
 <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
 <version version="1.5.4">Parameter name </version>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.#ctor">
 <summary>Creates a new empty instance of the <see cref="T:Tools.MetadataT.ImageMetadata"/> class</summary>
 <remarks>Instance created by this constructor cannot be used to obtain image metadata. It can be used only to enumerate supported fields.</remarks>
 <version version="1.5.3">This CTor is new in version 1.5.3</version>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.#ctor(System.Drawing.Image)">
 <summary>CTor creates new instance of <see cref="T:Tools.MetadataT.ImageMetadata"/> form <see cref="F:Tools.MetadataT.ImageMetadata.Image"/></summary>
 <param name="image"><see cref="F:Tools.MetadataT.ImageMetadata.Image"/> reperesneting image to provide metadata for</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is nul</exception>
 <version version="1.5.4">Parameter <c>Image</c> renamed to <c>image</c></version>
</member>
<member name="P:Tools.MetadataT.ImageMetadata.Width">
 <summary>Gets the width, in pixels, of this <see cref="T:System.Drawing.Image" />.</summary>
 <returns>The width, in pixels, of this <see cref="T:System.Drawing.Image" />.</returns>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.ImageMetadata.Height">
 <summary>Gets the height, in pixels, of this <see cref="T:System.Drawing.Image" />.</summary>
 <returns>The height, in pixels, of this <see cref="T:System.Drawing.Image" />.</returns>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.ImageMetadata.HorizontalResolution">
 <summary>Gets the horizontal resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />.</summary>
 <returns>The horizontal resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />.</returns>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.ImageMetadata.VerticalResolution">
 <summary>Gets the vertical resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />.</summary>
 <returns>The vertical resolution, in pixels per inch, of this <see cref="T:System.Drawing.Image" />.</returns>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.ImageMetadata.PixelFormat">
 <summary>Gets the pixel format for this <see cref="T:System.Drawing.Image" />.</summary>
 <returns>A <see cref="T:System.Drawing.Imaging.PixelFormat" /> that represents the pixel format for this <see cref="T:System.Drawing.Image" />.</returns>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="F:Tools.MetadataT.ImageMetadata.properties">
 <summary>Contains definition of <see cref="T:Tools.MetadataT.IMetadata"/> properties</summary>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.ContainsKey(System.String)">
 <summary>Gets value indicating wheather metadata value with given key is present in current instance</summary>
 <param name="key">Key (or name) to check presence of (see <see cref="M:Tools.MetadataT.ImageMetadata.GetPredefinedKeys"/> for possible values)</param>
 <returns>True when value for given key is present; false otherwise</returns>
 <remarks>The <paramref name="key"/> parameter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).
 <para>This implementation returns true forr all predefined keys.</para></remarks>
 <version version="1.5.4">Parameter name <c>Key</c> changed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.GetContainedKeys">
 <summary>Gets keys of all the metadata present in curent instance</summary>
 <returns>Keys in metadata-specific format of all the metadata present in curent instance. Never returns null; may return anempt enumeration.</returns>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.GetDescription(System.String)">
 <summary>Gets localized description for given key (or name)</summary>
 <param name="key">Key (or name) to get description of</param>
 <returns>Localized description of purpose of metadata item identified by <paramref name="key"/>; null when description is not available.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> is in invalid format or it is not one of predefined names.</exception>
 <version version="1.5.4">Fixed typo in English description of <see cref="P:Tools.MetadataT.ImageMetadata.HorizontalResolution"/></version>
 <version version="1.5.4">Parameter name <c>Key</c> changed to <c>key</c></version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> is now really thrown as documented. Previously returned null.</version>
 <version version="1.5.4">Descriptions extracted to resources and made localizable</version>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.GetHumanName(System.String)">
 <summary>Gets localized human-readable name for given key (or name)</summary>
 <param name="key">Key (or name) to get name for</param>
 <returns>Human-readable descriptive name of metadata item identified by <paramref name="key"/>; null when no such name is defined/known.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid formar or it is not one of predefined names.</exception>
 <version version="1.5.4">Parameter name <c>Key</c> changed to <c>key</c></version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> is now really thrown as documented. Previously returned null.</version>
 <version version="1.5.4">Human names extracted to resources and made localizable</version>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.GetKeyOfName(System.String)">
 <summary>Gets key for predefined name</summary>
 <param name="name">Name to get key for</param>
 <returns>Key in metadata-specific format for given predefined metadata item name</returns>
 <exception cref="T:System.ArgumentException"><paramref name="name"/> is not one of predefined names retuened by <see cref="M:Tools.MetadataT.ImageMetadata.GetPredefinedNames"/>.</exception>
 <remarks>This implementation either returns <paramref name="name"/> or throws <see cref="T:System.ArgumentException"/></remarks>
 <version version="1.5.4">Parameter name <c>Name</c> changed to <c>name</c>.</version>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.GetNameOfKey(System.String)">
 <summary>Gets name for key</summary>
 <param name="key">Key to get name for</param>
 <returns>One of predefined names to use instead of <paramref name="key"/>; null when given key has no corresponding name.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid format</exception>
 <remarks>This implementation either returns <paramref name="Name"/> or throws <see cref="T:System.ArgumentException"/></remarks>
 <version version="1.5.4">Parameter name <c>Key</c> changed to <c>key</c>.</version>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.GetPredefinedKeys">
 <summary>Gets all keys predefined for curent metadata format</summary>
 <returns>Eumeration containing all predefined (well-known) keys of metadata for this metadata format. Returns always the same enumeration even when values for some keys are not present. Never returns null; may return an empty enumeration.</returns>
 <remarks>Not all predefined keys are required to have corresponding names obtainable via <see cref="M:Tools.MetadataT.ImageMetadata.GetNameOfKey(System.String)"/>.
 <para>This implementation returns exactly the same collection as <see cref="M:Tools.MetadataT.ImageMetadata.GetPredefinedNames"/>.</para></remarks>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.GetPredefinedNames">
 <summary>Gets all predefined names for metadata keys</summary>
 <returns>Enumeration containing all predefined names of metadata items for this metadada format. Never returns null; may return an empty enumeration.</returns>
 <remarks>This implementation of <see cref="T:Tools.MetadataT.IMetadata"/> in fact supports only retrieval of metadata by name and thus keys keys are same as names.</remarks>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.GetStringValue(System.String)">
 <summary>Gets metadata value with given key as string</summary>
 <param name="key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.ImageMetadata.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value cannot be obtained</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> is not one of predefined names</exception>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.GetStringValue(System.String,System.IFormatProvider)">
 <summary>Gets metadata value with given key as string</summary>
 <param name="key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.ImageMetadata.GetPredefinedKeys"/> for possible values)</param>
 <param name="provider">Culture to be used. If null current is used.</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value cannot be obtained</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> is not one of predefined names</exception>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.ImageMetadata.Name">
 <summary>Gets name of metadata format represented by implementation</summary>
 <returns>Name to identify this metadata format by. Always returns <see cref="F:Tools.MetadataT.ImageMetadata.ImageName"/>.</returns>
 <remarks>All <see cref="T:Tools.MetadataT.IMetadataProvider">IMetadataProviders</see> returning this format should identify the format by this name.</remarks>
</member>
<member name="F:Tools.MetadataT.ImageMetadata.ImageName">
 <summary>Used to identify system metadata in <see cref="T:Tools.MetadataT.IMetadataProvider"/></summary>
 <seelaso cref="P:Tools.MetadataT.ImageMetadata.Name"/>
</member>
<member name="P:Tools.MetadataT.ImageMetadata.Value(System.String)">
 <summary>Gets medata value with given key</summary>
 <param name="key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.ImageMetadata.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key; or null if given metadata value cannot be obtained</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> is not one of predefined names</exception>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="P:Tools.MetadataT.ImageMetadata.Disposed">
 <summary>Gets value indicating if this instance was already disposed or not</summary>
 <returns>True if <see cref="M:Tools.MetadataT.ImageMetadata.Dispose"/> was called on this instace, false otherwise</returns>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.Finalize">
 <summary>Allows an System.Object to attempt to free resources and perform other cleanup operations before the System.Object is reclaimed by garbage collection.</summary>
</member>
<member name="M:Tools.MetadataT.ImageMetadata.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.GroupInfo">
 <summary>Information about group of tags</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.GroupInfo._Tags">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Tags"/> Proeprty</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.GroupInfo._Mandatory">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Mandatory"/> Proeprty</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.GroupInfo._Repeatable">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Repeatable"/> Proeprty</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.GroupInfo._Name">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Name"/> Proeprty</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.GroupInfo._HumanName">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.HumanName"/> Proeprty</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.GroupInfo._Group">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Group"/> Proeprty</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.GroupInfo._Category">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Category"/> Proeprty</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.GroupInfo._Description">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Description"/> Proeprty</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.GroupInfo._Type">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Type"/> Proeprty</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.GroupInfo.#ctor(System.String,System.String,Tools.MetadataT.IptcT.Groups,System.Type,System.String,System.String,System.Boolean,System.Boolean)">
 <summary>CTor</summary>
 <param name="Name">Name of group used in object structure</param>
 <param name="HumanName">Human-friendly name of group</param>
 <param name="Group">Group number</param>
 <param name="Type">Type that represents this group</param>
 <param name="Category">Category of this group</param>
 <param name="Description">Description</param>
 <param name="Mandatory">Group is mandatory according to IPTC standard</param>
 <param name="Repeatable">Group is repeatable</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Group"/> is not member of <see cref="T:Tools.MetadataT.IptcT.Groups"/></exception>
 <remarks>The <see cref="M:Tools.MetadataT.IptcT.GroupInfo.SetTags(Tools.MetadataT.IptcT.IptcTag[])"/> method must be used to complete initialization using this CTor.</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.GroupInfo.SetTags(Tools.MetadataT.IptcT.IptcTag[])">
 <summary>Initializes the value of the <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Tags"/> property</summary>
 <exception cref="T:System.InvalidOperationException">The <see cref="P:Tools.MetadataT.IptcT.GroupInfo.Tags"/> property have already been initialized</exception>
 <param name="Tags">Tags the group consists of</param>
 <exception cref="T:System.ArgumentException"><paramref name="Tags"/> is null or have less than 2 items</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.Type">
 <summary>Type that realizes object representation of this group</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.Tags">
 <summary>Tags present in this group</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.Mandatory">
 <summary>True if this group is mandatory according to IPTC standard</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.Repeatable">
 <summary>True if this group is repeatable</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.Name">
 <summary>Name of group used in object structure</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.HumanName">
 <summary>Human-friendly name of this group</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.Group">
 <summary>Code of this group</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.Category">
 <summary>Name of category of this group</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.Description">
 <summary>Description of this group</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.ARM">
 <summary>Abstract Relation Method</summary>
 <returns>Information about known group <see cref="F:Tools.MetadataT.IptcT.Groups.ARM"/></returns>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.ContentLocation">
 <summary>Country/geographical location referenced by the content of the object</summary>
 <returns>Information about known group <see cref="F:Tools.MetadataT.IptcT.Groups.ContentLocation"/></returns>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.Reference">
 <summary>Identifies a prior envelope to which the current object refers.</summary>
 <returns>Information about known group <see cref="F:Tools.MetadataT.IptcT.Groups.Reference"/></returns>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.ByLineInfo">
 <summary>Creator of the object data</summary>
 <returns>Information about known group <see cref="F:Tools.MetadataT.IptcT.Groups.ByLineInfo"/></returns>
</member>
<member name="P:Tools.MetadataT.IptcT.GroupInfo.ObjectDataPreview">
 <summary>Preview of embeded object</summary>
 <returns>Information about known group <see cref="F:Tools.MetadataT.IptcT.Groups.ObjectDataPreview"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.GroupInfo.GetAllGroups">
 <summary>Gets all known groups of IPTC tags</summary>
 <returns>All known groups of IPTC tags</returns>
</member>
<member name="T:Tools.MetadataT.IptcT.Group">
 <summary>Common base for all tag groups</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Group.GetGroupMap(Tools.MetadataT.IptcT.Iptc,Tools.MetadataT.IptcT.IptcTag[])">
 <summary>Gets assignmenst between group indexes of tags and indexes of groups</summary>
 <param name="Tags">Tags contained in this group</param>
 <param name="IPTC"><see cref="T:Tools.MetadataT.IptcT.Iptc"/> to create map for</param>
 <returns><see cref="T:System.Collections.Generic.List`1"/> where each item of list means one group instance and contains indexes of tags when obtained via tag properties</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Tags"/> is null or contains less then 2 items -or- <paramref name="IPTC"/> is null</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc">
 <summary>Provides high-level access to IPTC metadata</summary>
 <remarks>Value key format for this <see cref="T:Tools.MetadataT.IMetadata"/> is "RecordNumber:DatasetNumber".</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2">The <see cref="T:Tools.MetadataT.IMetadata"/> interface implemented</version>
 <version version="1.5.2">The <see cref="T:Tools.InternalT.AuthorAttribute"/>, <see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.FirstVersionAttribute"/> attributes removed</version>
 <version version="1.5.3">Added limited auto-detection of UTF-8 encoding based on <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/>. See <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> for details.</version>
 <version version="1.5.3">Changed encoding used when none is specified for <see cref="P:Tools.MetadataT.IptcT.Iptc.GraphicCharacters_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)"/>, <see cref="P:Tools.MetadataT.IptcT.Iptc.TextWithSpaces_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)"/>, <see cref="P:Tools.MetadataT.IptcT.Iptc.Text_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)"/>, <see cref="P:Tools.MetadataT.IptcT.Iptc.Num2_Str_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Text.Encoding)"/>, <see cref="P:Tools.MetadataT.IptcT.Iptc.Num3_Str_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Text.Encoding)"/>, <see cref="P:Tools.MetadataT.IptcT.Iptc.SubjectReference_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Text.Encoding)"/>, <see cref="P:Tools.MetadataT.IptcT.Iptc.Alpha_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Byte,System.Boolean,System.Text.Encoding)"/>: <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> is used for records 2 - 6 and 8, <see cref="P:System.Text.Encoding.ASCII"/> is used otherwise. (Previously: <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> is used whenever encoding is not specified).</version>
 <version version="1.5.3">Added the <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> property which when set to true allows values violating length constraints (according to IPTC standard) to be stored.</version>
 <version version="1.5.3">Properties of type HHMMSS_HHMM are also read when stored as HHMMSS only (before 1.5.3 an exception was thrown)</version>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup">
 <summary>Preview of embeded object</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.ToString">
 <summary>String representation (number of bytes)</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.Converter">
 <summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether changing a value on this object requires a call to the <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> method to create a new value.</summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <remarks>True</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.Converter.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
 <summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
 <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>New instance of <see cref="T:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup"/> initialized from <paramref name="propertyValues"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.Load(Tools.MetadataT.IptcT.Iptc)">
 <summary>Loads groups from IPTC</summary>
 <param name="IPTC"><see cref="T:Tools.MetadataT.IptcT.Iptc"/> to load groups from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.GroupInfo">
 <summary>Gets information about this group</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup._ObjectDataPreviewFileFormat">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.ObjectDataPreviewFileFormat"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.ObjectDataPreviewFileFormat">
 <summary>The file format of the ObjectData Preview.</summary>
 <remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup._ObjectDataPreviewFileFormatVersion">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.ObjectDataPreviewFileFormatVersion"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.ObjectDataPreviewFileFormatVersion">
 <summary>The particular version of the ObjectData Preview File Format specified in <see cref="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.ObjectDataPreviewFileFormat"/></summary>
 <remarks>The File Format Version is taken from the list included in Appendix A</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup._ObjectDataPreviewData">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.ObjectDataPreviewData"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewGroup.ObjectDataPreviewData">
 <summary>Maximum size of 256000 octets consisting of binary data.</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup">
 <summary>Country/geographical location referenced by the content of the object</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup.ToString">
 <summary>String representation</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup.Load(Tools.MetadataT.IptcT.Iptc)">
 <summary>Loads groups from IPTC</summary>
 <param name="IPTC"><see cref="T:Tools.MetadataT.IptcT.Iptc"/> to load groups from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup.GroupInfo">
 <summary>Gets information about this group</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup._ContentLocationCode">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup.ContentLocationCode"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup.ContentLocationCode">
 <summary>Indicates the code of a country/geographical location referenced by the content of the object.</summary>
 <remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a country, e.g. ships at sea, space, IPTC will assign an appropriate threecharacter code under the provisions of ISO3166 to avoid conflicts. (see Appendix D) .</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup._ContentLocationName">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup.ContentLocationName"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ContentLocationGroup.ContentLocationName">
 <summary>Provides a full, publishable name of a country/geographical location referenced by the content of the object, according to guidelines of the provider.</summary>
 <remarks>If used in the same object with DataSet , must immediately follow and correspond to it.</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ARMGroup">
 <summary>Abstract Relation Method</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ARMGroup.#ctor">
 <summary>CTor</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ARMGroup.Converter">
 <summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.MetadataT.IptcT.Iptc.ARMGroup"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ARMGroup.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether changing a value on this object requires a call to the <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> method to create a new value.</summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <remarks>True</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ARMGroup.Converter.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
 <summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
 <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>New instance of <see cref="T:Tools.MetadataT.IptcT.Iptc.ARMGroup"/> initialized from <paramref name="propertyValues"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ARMGroup.Load(Tools.MetadataT.IptcT.Iptc)">
 <summary>Loads groups from IPTC</summary>
 <param name="IPTC"><see cref="T:Tools.MetadataT.IptcT.Iptc"/> to load groups from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ARMGroup.GroupInfo">
 <summary>Gets information about this group</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ARMGroup._ARMIdentifier">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ARMGroup.ARMIdentifier"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ARMGroup.ARMIdentifier">
 <summary>The DataSet identifies the Abstract Relationship Method (ARM) which is described in a document registered by the originator of the ARM with the IPTC and NAA.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ARMGroup._ARMVersion">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ARMGroup.ARMVersion"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ARMGroup.ARMVersion">
 <summary>A number representing the particular version of the ARM specified in DataSet <see cref='P:Tools.MetadataT.IptcT.Iptc.ARMGroup.ARMIdentifier'/>.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.IptcName">
 <summary>Name identifying IPTC metadata in <see cref="T:Tools.MetadataT.IMetadataProvider"/></summary>
 <version version="1.5.2">Constant introduced</version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.#ctor">
 <summary>Do nothing CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc._Tags_Change(Tools.CollectionsT.GenericT.ListWithEvents{System.Collections.Generic.KeyValuePair{Tools.MetadataT.IptcT.DataSetIdentification,System.Byte[]}},Tools.CollectionsT.GenericT.ListWithEvents{System.Collections.Generic.KeyValuePair{Tools.MetadataT.IptcT.DataSetIdentification,System.Byte[]}}.CancelableItemIndexEventArgs)">
 <summary>Handles <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events and checks if added item data are not so long</summary>
 <param name="sender"><see cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/></param>
 <param name="e">Event arguments</param>
 <remarks>The <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set tor true when lenght of data is longer than 32767 which causet <see cref="T:System.OperationCanceledException"/> to be thrown by caller</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc._Tags">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.Tags"/> property</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.#ctor(Tools.MetadataT.IptcT.IptcReader)">
 <summary>CTor from <see cref="T:Tools.MetadataT.IptcT.IptcReader"/></summary>
 <param name="Reader"><see cref="T:Tools.MetadataT.IptcT.IptcReader"/> to read all tags from. No data loaded when null.</param>
 <version version="1.5.4">Parameter <c>Reader</c> renamed to <c>reader</c></version>
 <version version="1.5.4">Exception is no longer thrown when <paramref name="reader"/> is null</version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.RecordNumbers,System.Byte)">
 <summary>Gets details about tag format by tag record and number</summary>
 <param name="Record">Recor number</param>
 <param name="TagNumber">Number of tag within <paramref name="Record"></paramref></param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
 <paramref name="Record"/> is not member of <see cref="T:Tools.MetadataT.IptcT.RecordNumbers"/> -or- <paramref name="TagNumber"/> is not tag within <paramref name="record"/>.
 </exception>
 <version version="1.5.4">Parameters renamed: <c>Record</c> to <c>record</c>, <c>TagNumber</c> to <c>tagNumber</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.#ctor(Tools.MetadataT.IptcT.IIptcGetter)">
 <summary>CTor from <see cref="T:Tools.MetadataT.IptcT.IIptcGetter"/></summary>
 <param name="Getter"><see cref="T:Tools.MetadataT.IptcT.IIptcGetter"/> that contains IPTC stream. No data loaded when null.</param>
 <exception cref="T:System.IO.InvalidDataException">Tag marker other than 1Ch found</exception>
 <exception cref="T:System.NotSupportedException">Extended-size tag found</exception>
 <version version="1.5.4">Parameter <c>Getter</c> renamed to <c>getter</c></version>
 <version version="1.5.4">Exception is no longer thrown when <paramref name="getter"/> is null.</version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.Clear(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Removes all occurences of specified tag</summary>         
 <param name="Key">Tag to remove</param>                            
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.Clear">
 <summary>Removes all tags</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.Contains(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets count of tags with specified key</summary>
 <param name="Key">DataSet identification to count tags with</param>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.OnValueChanged(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Called when value of any tag changes</summary>
 <param name="Tag">Recod and dataset number</param>
 <remarks>
 <para>Called by <see cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/>'s setter.</para>
 <para>Note for inheritors: Call base class method in order to automatically compute size of embdeded file and invalidate cache for <see cref="P:Tools.MetadataT.IptcT.Iptc.BW460_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean)"/></para>
 </remarks>
 <version version="1.5.4">Parameter <c>Tag</c> renamed to <c>tag</c></version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets values associated with particular tag</summary>
 <param name="Key">Tag identification</param>
 <remarks>This property does no checks if tag <paramref name="Key"/> is repeatable or not and does not checks structure of byte arrays that represents values of tags, so you can totally corrupt structure if some fields. Also tag grouping is not checked. You should use this property very carefully or you can damage internal structure of IPTC data</remarks>
 <value>New values for particular tag. Values of tags are replaced with new values. If there was more tags with same <paramref name="Key"/> than is being set then the next tags are removed. If there was less tags with same <paramref name="Key"/> necessary items are added at the end of the stream</value>
 <returns>List of values of tag or null if tag is missing</returns>
 <exception cref="T:System.NotSupportedException">Setting byte array longer then 32767</exception>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Tags">
 <summary>All tags and their values in IPTC stream</summary>
 <remarks><see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> and <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>' setter throws an <see cref="T:System.OperationCanceledException"/> when trying to arr or set item that consists of more than 32767 bytes</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.SortTags">
 <summary>Sorts tags so they are ordered in IPTC-standard-non-violating manner</summary>
 <remarks>That means that they are ordered by recod number. Order of individual datasets inside records is kept</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetBytes">
 <summary>Gets bytes of IPTC stream</summary>
 <returns>IPTC data encoded according to the IPTC standard in set of tags</returns>
 <remarks>The tag format is following:
 B1: 0x1C, B2: Record Number, B3 DataSet Number, B4&amp;5 Length of data, B6+ Data
 </remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ParseKey(System.String,System.Boolean)">
 <summary>Parses key from its string value or predefined name</summary>
 <param name="Key">Key to parse</param>
 <param name="TryPredefined">True to try get predefined dataset identification by name; false to use code only.</param>
 <returns>Parsed key</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> is not predefined key (or <paramref name="TryPredefined"/> is false) and is in invalid format for <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/>.</exception>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter names converted to camelCase</version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.KeyFromPredefinedName(System.String)">
 <summary>Gets <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> from <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.PropertyName"/></summary>
 <param name="Key">Name of dataset identification to get</param>
 <returns>Dataset identification or null if no dataset identification with given <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.PropertyName"/> is in <see cref="M:Tools.MetadataT.IptcT.DataSetIdentification.KnownDataSets(System.Boolean)"/>.</returns>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ContainsKey(System.String)">
 <summary>Gets value indicating wheather metadata value with given key is present in current instance</summary>
 <param name="Key">Key (or name) to check presence of (see <see cref="M:Tools.MetadataT.IptcT.Iptc.GetPredefinedKeys"/> for possible values)</param>
 <returns>True when value for given key is present; false otherwise</returns>
 <remarks>The <paramref name="Key"/> parameter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> has invalid format and it is not one of predefined names</exception>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetContainedKeys">
 <summary>Gets keys of all the metadata present in curent instance</summary>
 <returns>Keys in metadata-specific format of all the metadata present in curent instance. Never returns null; may return anempt enumeration.</returns>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetDescription(System.String)">
 <summary>Gets localized description for given key (or name)</summary>
 <param name="Key">Key (or name) to get description of</param>
 <returns>Localized description of purpose of metadata item identified by <paramref name="Key"/>; nul when description is not available.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> is in invalid format or it is not one of predefined names.</exception>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetHumanName(System.String)">
 <summary>Gets localized human-readable name for given key (or name)</summary>
 <param name="Key">Key (or name) to get name for</param>
 <returns>Human-readable descriptive name of metadata item identified by <paramref name="Key"/>; null when no such name is defined/known.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> has invalid formar or it is not one of predefined names.</exception>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetKeyOfName(System.String)">
 <summary>Gets key for predefined name</summary>
 <param name="Name">Name to get key for</param>
 <returns>Key in metadata-specific format for given predefined metadata item name</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Name"/> is not one of predefined names retuened by <see cref="M:Tools.MetadataT.IptcT.Iptc.GetPredefinedNames"/>.</exception>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter <c>Name</c> renamed to <c>name</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetNameOfKey(System.String)">
 <summary>Gets name for key</summary>
 <param name="Key">Key to get name for</param>
 <returns>One of predefined names to use instead of <paramref name="Key"/>; null when given key has no corresponding name.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> has invalid format</exception>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetPredefinedKeys">
 <summary>Gets all keys predefined for curent metadata format</summary>
 <returns>Eumeration containing all predefined (well-known) keys of metadata for this metadata format. Returns always the same enumeration event when values for some keys are not present. Never returns null; may return an empty enumeration.</returns>
 <remarks>Not all predefined keys are required to have corresponding names obtainable via <see cref="M:Tools.MetadataT.IptcT.Iptc.GetNameOfKey(System.String)"/>.</remarks>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetPredefinedNames">
 <summary>Gets all predefined names for metadata keys</summary>
 <returns>Enumeration containing all predefined names of metadata items for this metadada format. Never returns null; may return an empty enumeration.</returns>
 <remarks>Metadata format may support 2 formats of retrieving of metadata values: By key and by name. The by-name format is optional.
 Keys are typically computer-friendly strings (like tag numbers or addresses) and metedata format may support values with non-predefined keys.
 Names are typically human-friendly (not-localized) string (like names) and only predefined names are supported (if any). Each name must have its corresponding key. Names are only aliases to certain important keys.</remarks>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Name">
 <summary>Gets name of metadata format represented by implementation</summary>
 <returns><see cref="F:Tools.MetadataT.IptcT.Iptc.IptcName"/></returns>
 <remarks>All <see cref="T:Tools.MetadataT.IMetadataProvider">IMetadataProviders</see> returning IPTC format should identify the format by this name.</remarks>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Value(System.String)">
 <summary>Gets medata value with given key</summary>
 <param name="Key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.IptcT.Iptc.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key; or null if given metadata value is not supported</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> has invalid format and it is not one of predefined names</exception>
 <remarks>The <paramref name="Key"/> peremeter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <version version="1.5.2">Property introduced</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetStringValue(System.String)">
 <summary>Gets metadata value with given key as string</summary>
 <param name="Key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.IptcT.Iptc.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value is not supported</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> has invalid format and it is not one of predefined names</exception>
 <remarks>The <paramref name="Key"/> peremeter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetStringValue(System.String,System.IFormatProvider)">
 <summary>Gets metadata value with given key as string</summary>
 <param name="key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.IptcT.Iptc.GetPredefinedKeys"/> for possible values)</param>
 <param name="provider">Culture to be used. If null current is used.</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value is not supported</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid format and it is not one of predefined names</exception>
 <remarks>The <paramref name="key"/> peremeter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Disposed">
 <summary>Gets value indicating if this instance was already disposed or not</summary>
 <returns>This implementation always returns false because this class does not implement <see cref="T:System.IDisposable"/></returns>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetEnum(Tools.MetadataT.IptcT.RecordNumbers)">
 <summary>Gets Enum that contains list of tags for specific record (group of tags)</summary>
 <param name="Record">Number of record to get enum for</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value of <paramref name="Record"/> is not member of <see cref="T:Tools.MetadataT.IptcT.RecordNumbers"/></exception>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.AdvisedActions">
 <summary>Possible values of <see cref="P:Tools.MetadataT.IptcT.Iptc.ActionAdvised"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AdvisedActions.ObjectKill">
 <summary>Object Kill. Signifies that the provider wishes the holder of a copy of the referenced object make no further use of that information and take steps to prevent further distribution thereof.</summary>
 <remarks>Implies that any use of the object might result in embarrassment or other exposure of the provider and/or recipient.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AdvisedActions.ObjectReplace">
 <summary>Object Replace. Signifies that the provider wants to replace the referenced object with the object provided under the current envelope.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AdvisedActions.ObjectAppend">
 <summary>Object Append. Signifies that the provider wants to append to the referenced object information provided in the objectdata of the current envelope.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AdvisedActions.ObjectReference">
 <summary>Object Reference. Signifies that the provider wants to make reference to objectdata in a different envelope.</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ARMMethods">
 <summary>Abstract Relation Methods Identifiers</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ARMMethods.IPTCMethod1">
 <summary>Using DataSets 2:45, 2:47 and 2:50 (<see cref='P:Tools.MetadataT.IptcT.Iptc.ReferenceService'/>, <see cref='P:Tools.MetadataT.IptcT.Iptc.ReferenceDate'/> and <see cref='P:Tools.MetadataT.IptcT.Iptc.ReferenceNumber'/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ARMMethods.IPTCMethod2">
 <summary>Using DataSet 1:100 (<see cref='P:Tools.MetadataT.IptcT.Iptc.UNO'/>)</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ARMVersions">
 <summary>Abstract Relation Method Versions</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ARMVersions.ARM1">
 <summary>The only ARM version</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ColourRepresentations">
 <summary>Indicates colour representations</summary>
 <remarks>The value is composed from two parts - number of components and buid-up structure of image. Use masks to get these componets.</remarks>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.NumberOfComponentsMask">
 <summary>Mask for getting number of components</summary>
 <remarks>To get number of components AND enumeration value with this mask. To get numeric value right-shift AND-ed value by 8 bits.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.ImageBuildUpStructureMask">
 <summary>Mask for getting buid-up structure of image</summary>
 <remarks>To get image build-up structure AND enumeration value with this mask.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.Monochrome">
 <summary>Monochrome</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.ThreeComponents">
 <summary>Three componnets</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.FourComponents">
 <summary>Four components</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.NoImage">
 <summary>No Image</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.SingleFrame">
 <summary>Single frame.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.SequentialFrameMultipleObjects">
 <summary>Frame sequential in multiple objects (one component per object)</summary>
 <remarks>Only one component of a colour image in one envelope</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.SequentialFrameOneObject">
 <summary>Frame sequential in one object</summary>
 <remarks>All components of a colour imagein one envelope.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.LineSequential">
 <summary>Line sequential</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.PixelSequential">
 <summary>Pixel sequential</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourRepresentations.SpecialStructure">
 <summary>Special interleaving structure</summary>
 <remarks>The special interleaving structures refer to defined methods given in Appendix G according to the value in the sampling structure DataSet 3:90</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue">
 <summary>Allowed Interchange Colour Space values</summary>
 <remarks>Other values are reserved for future use.</remarks>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue.none">
 <summary>No colour space set</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue.XyzCie">
 <summary>X,Y,Z CIE colour space (default illuminant D50)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue.RgbSmpte">
 <summary>RGB SMPTE</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue.YuvK">
 <summary>Y,U,V (K) (default illuminant D65)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue.Rgb">
 <summary>RGB device dependent</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue.Cmyk">
 <summary>CMY(K) device dependent</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue.LabKCie">
 <summary>L*a*b* (K) CIE colour space (default illuminant D50)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue.YCbCr">
 <summary>YCbCr</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ColourSpaceValue.sRgb">
 <summary>sRGB</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.CustomRating">
 <summary>Custom rating values</summary>
 <version version="1.5.4">This enum is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.CustomRating.Rejected">
 <summary>User rated the subject as rejected</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.CustomRating.NotRated">
 <summary>Rating was not set yet</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.CustomRating.Star1">
 <summary>User rated the subject with 1 star</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.CustomRating.Star2">
 <summary>User rated the subject with 2 stars</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.CustomRating.Star3">
 <summary>User rated the subject with 3 stars</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.CustomRating.Star4">
 <summary>User rated the subject with 4 stars</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.CustomRating.Star5">
 <summary>User rated the subject with 5 stars</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail">
 <summary>Subject Detail Name and Subject Refrence Number relationship (Economy, Business &amp; Finnance)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.ArableFarming">
 <summary>Arable Farming</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.FishingIndustry">
 <summary>Fishing Industry</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.ForestryAndTimber">
 <summary>Forestry &amp; Timber</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.LivestockFarming">
 <summary>Livestock Farming</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Biotechnology">
 <summary>Biotechnology</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Fertilisers">
 <summary>Fertilisers</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.HealthAndBeautyProducts">
 <summary>Health &amp; Beauty products</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.InorganicChemicals">
 <summary>Inorganic chemicals</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.OrganicChemicals">
 <summary>Organic chemicals</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Pharmaceuticals">
 <summary>Pharmaceuticals</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.SyntheticsAndPlastics">
 <summary>Synthetics &amp; Plastics</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Hardware">
 <summary>Hardware</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Networking">
 <summary>Networking</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.SatelliteTechnology">
 <summary>Satellite technology</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.SemiconductorsAndActiveComponents">
 <summary>Semiconductors &amp; active components</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Software">
 <summary>Software</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.TelecommunicationsEquipment">
 <summary>Telecommunications Equipment</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.TelecommunicationsServices">
 <summary>Telecommunications Services</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.HeavyConstruction">
 <summary>Heavy construction</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.HouseBuilding">
 <summary>House building</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.RealEstate">
 <summary>Real Estate</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.AlternativeEnergy">
 <summary>Alternative energy</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Coal">
 <summary>Coal</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.OilAndGasDownstreamActivities">
 <summary>Oil &amp; Gas - Downstream activities</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.OilAndGasUpstreamActivities">
 <summary>Oil &amp; Gas - Upstream activities</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.NuclearPower">
 <summary>Nuclear power</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.ElectricityProductionAndDistribution">
 <summary>Electricity Production &amp; Distribution</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.WasteManagementAndPollutionControl">
 <summary>Waste Management &amp; Pollution Control</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.WaterSupply">
 <summary>Water Supply</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.AccountancyAndAuditing">
 <summary>Accountancy &amp; Auditing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Banking">
 <summary>Banking</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.ConsultancyServices">
 <summary>Consultancy Services</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.EmploymentAgencies">
 <summary>Employment Agencies</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.HealthcareProviders">
 <summary>Healthcare Providers</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Insurance">
 <summary>Insurance</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.LegalServices">
 <summary>Legal services</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.MarketResearch">
 <summary>Market research</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.StockBroking">
 <summary>Stock broking</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Clothing">
 <summary>Clothing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.DepartmentStores">
 <summary>Department stores</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.FoodDistribution">
 <summary>Food</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.MailOrder">
 <summary>Mail Order</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Retail">
 <summary>Retail</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.SpecialityAtores">
 <summary>Speciality stores</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Wholesale">
 <summary>Wholesale</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.CentralBanks">
 <summary>Central Banks</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.ConsumerIssues">
 <summary>Consumer Issues</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.DebtMarkets">
 <summary>Debt Markets</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.EconomicIndicators">
 <summary>Economic Indicators</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.EmergingMarketsDebt">
 <summary>Emerging Markets Debt</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.ForeignExchangeMarkets">
 <summary>Foreign Exchange Markets</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.GovernmentAid">
 <summary>Government Aid</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.GovernmentDebt">
 <summary>Government Debt</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.InterestRates">
 <summary>Interest Rates</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.InternationalEconomicInstitutions">
 <summary>International Economic Institutions</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.InternationalTradeIssues">
 <summary>International Trade Issues</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.LoanMarkets">
 <summary>Loan Markets</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Energy">
 <summary>Energy</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Metals">
 <summary>Metals</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Securities">
 <summary>Securities</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.SoftCommodities">
 <summary>Soft Commodities</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Advertising">
 <summary>Advertising</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Books">
 <summary>Books</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Cinema">
 <summary>Cinema</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.NewsAgencies">
 <summary>News Agencies</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.NewspaperAndMagazines">
 <summary>Newspaper &amp; Magazines</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Online">
 <summary>Online</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.PublicRelations">
 <summary>Public Relations</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Radio">
 <summary>Radio</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.SatelliteAndCableServices">
 <summary>Satellite &amp; Cable Services</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Television">
 <summary>Television</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Aerospace">
 <summary>Aerospace</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.AutomotiveEquipment">
 <summary>Automotive Equipment</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.DefenceEquipment">
 <summary>Defence Equipment</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.ElectricalAppliances">
 <summary>Electrical Appliances</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.HeavyEngineering">
 <summary>Heavy engineering</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.IndustrialComponents">
 <summary>Industrial components</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.InstrumentEngineering">
 <summary>Instrument engineering</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Shipbuilding">
 <summary>Shipbuilding</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.BuildingMaterials">
 <summary>Building materials</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.GoldAndPreciousMaterials">
 <summary>Gold &amp; Precious Materials</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.IronAndSteel">
 <summary>Iron &amp; Steel</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.NonFerrousMetals">
 <summary>Non ferrous metals</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.AlcoholicDrinks">
 <summary>Alcoholic Drinks</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.FoodIndustry">
 <summary>Food</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.FurnishingsAndFurniture">
 <summary>Furnishings &amp; Furniture</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.PaperAndPackagingProducts">
 <summary>Paper &amp; packaging products</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Rubberproducts">
 <summary>Rubber products</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.SoftDrinks">
 <summary>Soft Drinks</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.TextilesAndClothing">
 <summary>Textiles &amp; Clothing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Tobacco">
 <summary>Tobacco</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.CasinosAndGambling">
 <summary>Casinos &amp; Gambling</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.HotelsAndAccommodation">
 <summary>Hotels &amp; accommodation</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.RecreationalAndSportsGoods">
 <summary>Recreational &amp; Sports goods</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.RestaurantsAndCatering">
 <summary>Restaurants &amp; catering</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.TourOperators">
 <summary>Tour operators</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.AirTransport">
 <summary>Air Transport</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.Railway">
 <summary>Railway</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.RoadTransport">
 <summary>Road Transport</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail.WaterwayAndMaritimeTransport">
 <summary>Waterway &amp; Maritime Transport</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.EditorialUpdateValues">
 <summary>Values for <see cref="P:Tools.MetadataT.IptcT.Iptc.EditorialUpdate"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.EditorialUpdateValues.AdditionalLanguage">
 <summary>Additional language. Signifies that the accompanying Record 2 DataSets repeat information from another object in a different natural language (as indicated by DataSet 2:135 - <see cref='P:Tools.MetadataT.IptcT.Iptc.LanguageIdentifier'/>).</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.FileFormats">
 <summary>Registered file formats by IPTC and NAA</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NoObjectData">
 <summary>No Object Data</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NewsphotoParameterRecord">
 <summary>IPTC-NAA Digital Newsphoto Parameter Record</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.RecommendedMessageFormat">
 <summary>IPTC7901 Recommended Message Format</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.TIFF">
 <summary>Tagged Image File Format (Adobe/Aldus Image data) (Recommended for image ObjectData Preview)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.AdobeIllustrator">
 <summary>Illustrator (Adobe Graphics data)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.AppleSingle">
 <summary>AppleSingle (Apple Computer Inc)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NAA89_3">
 <summary>NAA 89-3 (ANPA 1312)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.MacBinary">
 <summary>MacBinary II</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.UCOFF">
 <summary>IPTC Unstructured Character Oriented File Format (UCOFF)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.UnitedPressInternationalANPA1312">
 <summary>United Press International ANPA 1312 variant</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.UnitedPressInternationalDownLoadMessage">
 <summary>United Press International Down-Load Message</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.JPEG">
 <summary>¤ JPEG File Interchange (JFIF) (Recommended for image ObjectData Preview)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.PhotoCDImagePac">
 <summary>Photo-CD Image-Pac (Eastman Kodak)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.BMP">
 <summary>¤ Microsoft Bit Mapped Graphics File [*.BMP] (Recommended for image ObjectData Preview)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.WAV">
 <summary>Digital Audio File [*.WAV] (Microsoft &amp; Creative Labs)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.AVI">
 <summary>Audio plus Moving Video [*.AVI] (Microsoft)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.EXE">
 <summary>PC DOS/Windows Executable Files [*.COM][*.EXE]</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.ZIP">
 <summary>Compressed Binary File [*.ZIP] (PKWare Inc)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.AIFF">
 <summary>Audio Interchange File Format AIFF (Apple Computer Inc)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.RIFFWave">
 <summary>RIFF Wave (Microsoft Corporation)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.Freehand">
 <summary>Freehand (Macromedia/Aldus)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.HTML">
 <summary>Hypertext Markup Language "HTML" (The Internet Society)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.MP2">
 <summary>MPEG 2 Audio Layer 2 (Musicom), ISO/IEC</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.MP3">
 <summary>MPEG 2 Audio Layer 3, ISO/IEC</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.PDF">
 <summary>Portable Document File (*.PDF) Adobe</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NITF">
 <summary>News Industry Text Format (NITF)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.TAR">
 <summary>Tape Archive (*.TAR)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.TTNITF_DTD">
 <summary>Tidningarnas Telegrambyrå NITF version (TTNITF DTD)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.RBNITF_DTD">
 <summary>Ritzaus Bureau NITF version (RBNITF DTD)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormats.CorelDraw">
 <summary>Corel Draw [*.CDR]</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.FileFormatVersions">
 <summary>File format version registered for NAA and IPTC</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormatVersions.V0">
 <summary>Version 1 for FileFormat <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NoObjectData"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormatVersions.V1">
 <summary>Version 1 for file fromat <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NewsphotoParameterRecord"/> and <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NAA89_3"/>, 5.0 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.TIFF"/>, 1.40 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.AdobeIllustrator"/>, 2 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.AppleSingle"/>, 1.02 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.JPEG"/> and 3.1 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.Freehand"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormatVersions.V2">
 <summary>Version 2 for file format <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NewsphotoParameterRecord"/>, 6.0 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.TIFF"/>, 4.0 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.Freehand"/> and 2.0 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.HTML"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormatVersions.V3">
 <summary>Version 3 for file format <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NewsphotoParameterRecord"/> and 5.0 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.Freehand"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.FileFormatVersions.V4">
 <summary>Version 4 for file format <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.NewsphotoParameterRecord"/> and <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.RecommendedMessageFormat"/> and 5.5 for <see cref="F:Tools.MetadataT.IptcT.Iptc.FileFormats.Freehand"/></summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ImageRotationValue">
 <summary>Possible inage rotations in clockwise direction</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageRotationValue.None">
 <summary>no rotation</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageRotationValue.Rot90">
 <summary>90 degrees rotation</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageRotationValue.Rot180">
 <summary>180 degrees rotation</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageRotationValue.Rot270">
 <summary>270 degrees rotation</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents">
 <summary>Number of components in image and special meanings of some numbers</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents.NoObjectData">
 <summary>Record 2 caption for specific image</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents.BW">
 <summary>Image has 1 component</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents.Component2">
 <summary>Image has 2 components</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents.Component3">
 <summary>Image has 3 components</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents.Component4">
 <summary>Image has 4 components</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents.SuplementaryData">
 <summary>the objectdata contains supplementary data to an image</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ObjectAttributes">
 <summary>Object Attribute Number abd Object Name relationship</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Current">
 <summary>Current</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Analysis">
 <summary>Analysis</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.ArchiveMaterial">
 <summary>Archive material</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Background">
 <summary>Background</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Feature">
 <summary>Feature</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Forecast">
 <summary>Forecast</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.History">
 <summary>History</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Obituary">
 <summary>Obituary</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Opinion">
 <summary>Opinion</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.PollsAndSurveys">
 <summary>Polls &amp; Surveys</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Profile">
 <summary>Profile</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.ResultsListingsAndTables">
 <summary>Results Listings &amp; Tables</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.SideBarAndSupportingInformation">
 <summary>Side bar &amp; Supporting information</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Summary">
 <summary>Summary</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.TranscriptAndVerbatim">
 <summary>Transcript &amp; Verbatim</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Interview">
 <summary>Interview</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.FromTheScene">
 <summary>From the Scene</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Retrospective">
 <summary>Retrospective</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Statistics">
 <summary>Statistics</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.Update">
 <summary>Update</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.WrapUp">
 <summary>Wrap-up</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectAttributes.PressRelease">
 <summary>Press Release</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ObjectTypes">
 <summary>Object Type Number and Object Type Name relationship</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectTypes.News">
 <summary>News</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectTypes.Data">
 <summary>Data. Data in this context implies typically non narrative information, usually not eligible for journalistic intervention or modification. It also applies to information routed by the provider from a third party to the user. Examples are sports results, stock prices and agate.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectTypes.Advisory">
 <summary>Advisory</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.QuantisationMethodValue">
 <summary>Possible qantisation methods</summary>
 <remarks>Other values are reserved for future use. For quantisation methods 0 and 1, ascending values correspond to increasing reflectance/transmittance.</remarks>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.QuantisationMethodValue.LinearReflectanceTransmittance">
 <summary>Linear reflectance/transmittance (The domain in which the relative reflectance/transmittance of an image is mapped linearly onto a finite scale of integers (CCITT T1).)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.QuantisationMethodValue.LinearDensity">
 <summary>Linear density (The domain in which the relative density of an image is mapped linearly onto a finite scale of integers.)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.QuantisationMethodValue.IPTCRefB">
 <summary>IPTC ref “B” (Defined by IPTC in 1985 and amended in January 1990 to suppress reference to “Pixel Density.”)</summary>
 <remarks>see Appendix H</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.QuantisationMethodValue.LinearDotPercent">
 <summary>Linear Dot Percent (The domain in which the relative dot percent of an image is mapped linearly onto a finite scale of integers.)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.QuantisationMethodValue.ApDomesticAnalogue">
 <summary>AP Domestic Analogue (This may be described mathematically as either [√(linear density)] or [√(log (reflectance/transmittance))].)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.QuantisationMethodValue.CompressionMethodSpecific">
 <summary>Compression method specific (Defined within the compression method.)</summary>
 <remarks>Refer to Appendix A</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.QuantisationMethodValue.ColourSpaceSpecific">
 <summary>Colour Space Specific (quantisation method is contained within the Colour Space definition for DataSet 3:64 values of 1,2,3,6 or 7.)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.QuantisationMethodValue.GammaCompensated">
 <summary>Gamma Compensated (the domain in which the relative reflectance/transmittance is raised to the power of the inverse of gamma.)</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.SamplingStructureType">
 <summary>Enumerates possible spatial and temporal relations between pixels</summary>
 <remarks>Other values are reserved for future use.</remarks>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SamplingStructureType.OrthogonalSame">
 <summary>Orthogonal with the same relative sampling frequencies on each component.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SamplingStructureType.OrthogonalRatio">
 <summary>Orthogonal with the sampling frequencies in the ratio of 4:2:2:(4) as described in Appendix G. This structure can only be used with the YUV(K) or LAB(K) colour spaces.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SamplingStructureType.Custom">
 <summary>defined within the compression process.</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ScanningDirectionValue">
 <summary>Possible scanning directions</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ScanningDirectionValue.LeftRightTopBottom">
 <summary>left to right, top to bottom.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ScanningDirectionValue.RightLeftTopBottom">
 <summary>right to left, top to bottom.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ScanningDirectionValue.LeftRightBottomTop">
 <summary>left to right, bottom to top.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ScanningDirectionValue.RightLeftBottomTop">
 <summary>right to left, bottom to top.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ScanningDirectionValue.TopBottomLeftRight">
 <summary>top to bottom, left to right.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ScanningDirectionValue.BottomTopLeftRight">
 <summary>bottom to top, left to right.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ScanningDirectionValue.TopBottomRightLeft">
 <summary>top to bottom, right to left.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ScanningDirectionValue.BottomTopRightLeft">
 <summary>bottom to top, right to left.</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers">
 <summary>Subject Matter Name and Subject Reference Number relationship</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Archaeology">
 <summary>Archaeology</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Architecture">
 <summary>Architecture</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Bullfighting">
 <summary>Bullfighting</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Carnival">
 <summary>Carnival</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Cinema">
 <summary>Cinema</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Dance">
 <summary>Dance</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Fashion">
 <summary>Fashion</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Language">
 <summary>Language</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.LibrariesMuseums">
 <summary>Libraries &amp; Museums</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Literature">
 <summary>Literature</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Music">
 <summary>Music</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Painting">
 <summary>Painting</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Photography">
 <summary>Photography</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Radio">
 <summary>Radio</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Sculpture">
 <summary>Sculpture</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Television">
 <summary>Television</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Theatre">
 <summary>Theatre</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Crime">
 <summary>Crime</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Judiciary">
 <summary>Judiciary</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Police">
 <summary>Police</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Punishment">
 <summary>Punishment</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Prison">
 <summary>Prison</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Drought">
 <summary>Drought</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Earthquake">
 <summary>Earthquake</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Famine">
 <summary>Famine</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Fire">
 <summary>Fire</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Flood">
 <summary>Flood</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.IndustrialAccident">
 <summary>Industrial accident</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.MeteorologicalDisaster">
 <summary>Meteorological disaster</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.NuclearAccident">
 <summary>Nuclear accident</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Pollution">
 <summary>Pollution</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.TransportAccident">
 <summary>Transport accident</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.VolcanicEruption">
 <summary>Volcanic eruption</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Agriculture">
 <summary>Agriculture</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Chemicals">
 <summary>Chemicals</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ComputingAndInformationTechnology">
 <summary>Computing &amp; Information Technology</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ConstructionAndProperty">
 <summary>Construction &amp; Property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.EnergyAndResources">
 <summary>Energy &amp; Resources</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.FinancialAndBusinessServices">
 <summary>Financial &amp; Business Services</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.GoodsDistribution">
 <summary>Goods Distribution</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.MacroEconomics">
 <summary>Macro Economics</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Markets">
 <summary>Markets</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Media">
 <summary>Media</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.MetalGoodsAndEngineering">
 <summary>Metal Goods &amp; Engineering</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.MetalsAndMinerals">
 <summary>Metals &amp; Minerals</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ProcessIndustries">
 <summary>Process Industries</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.TourismAndLeisure">
 <summary>Tourism &amp; Leisure</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Transport">
 <summary>Transport</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.AdultEducation">
 <summary>Adult Education</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.FurtherEducation">
 <summary>Further Education</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ParentOrganisations">
 <summary>Parent Organisations</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Preschooling">
 <summary>Preschooling</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Schools">
 <summary>Schools</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.TeachersUnions">
 <summary>Teachers Unions</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.University">
 <summary>University</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.AlternativeEnergy">
 <summary>Alternative Energy</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Conservation">
 <summary>Conservation</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.EnergySavings">
 <summary>Energy Savings</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.EnvironmentalPolitics">
 <summary>Environmental Politics</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.EnvironmentalPollution">
 <summary>Environmental pollution</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.NaturalResources">
 <summary>Natural resources</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Nature">
 <summary>Nature</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Population">
 <summary>Population</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Waste">
 <summary>Waste</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.WaterSupplies">
 <summary>Water Supplies</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Diseases">
 <summary>Diseases</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.EpidemicAndPlague">
 <summary>Epidemic &amp; Plague</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.HealthTreatment">
 <summary>Health treatment</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.HealthOrganisations">
 <summary>Health organisations</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.MedicalResearch">
 <summary>Medical research</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.MedicalStaff">
 <summary>Medical staff</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Medicines">
 <summary>Medicines</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.PreventativeMedicine">
 <summary>Preventative medicine</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Animals">
 <summary>Animals</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Curiosities">
 <summary>Curiosities</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.People">
 <summary>People</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Apprentices">
 <summary>Apprentices</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.CollectiveContracts">
 <summary>Collective contracts</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Employment">
 <summary>Employment</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.LabourDispute">
 <summary>Labour dispute</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.LabourLegislation">
 <summary>Labour legislation</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Retirement">
 <summary>Retirement</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Retraining">
 <summary>Retraining</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Strike">
 <summary>Strike</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Unemployment">
 <summary>Unemployment</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Unions">
 <summary>Unions</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.WagesAndPensions">
 <summary>Wages &amp; Pensions</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.WorkRelations">
 <summary>Work Relations</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Games">
 <summary>Games</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.GamingAndLotteries">
 <summary>Gaming &amp; Lotteries</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Gastronomy">
 <summary>Gastronomy</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Hobbies">
 <summary>Hobbies</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.HolidaysOrVacations">
 <summary>Holidays or vacations</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Tourism">
 <summary>Tourism</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Defence">
 <summary>Defence</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Diplomacy">
 <summary>Diplomacy</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Elections">
 <summary>Elections</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.EspionageAndIntelligence">
 <summary>Espionage &amp; Intelligence</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ForeignAid">
 <summary>Foreign Aid</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Government">
 <summary>Government</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.HumanRights">
 <summary>Human Rights</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.LocalAuthorities">
 <summary>Local authorities</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Parliament">
 <summary>Parliament</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Parties">
 <summary>Parties</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Refugees">
 <summary>Refugees</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.RegionalAuthorities">
 <summary>Regional authorities</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.StateBudget">
 <summary>State Budget</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.TreatiesAndOrganisations">
 <summary>Treaties &amp; Organisations</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.CultsAndSects">
 <summary>Cults &amp; sects</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Faith">
 <summary>Faith</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.FreeMasonry">
 <summary>Free masonry</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ReligiousInstitutions">
 <summary>Religious institutions</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.AppliedSciences">
 <summary>Applied Sciences</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Engineering">
 <summary>Engineering</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.HumanSciences">
 <summary>Human Sciences</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.NaturalSciences">
 <summary>Natural Sciences</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.PhilosophicalSciences">
 <summary>Philosophical Sciences</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Research">
 <summary>Research</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ScientificExploration">
 <summary>Scientific exploration</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.SpaceProgrammes">
 <summary>Space programmes</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Addiction">
 <summary>Addiction</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Charity">
 <summary>Charity</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Demographics">
 <summary>Demographics</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Disabled">
 <summary>Disabled</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Euthanasia">
 <summary>Euthanasia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Family">
 <summary>Family</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.FamilyPlanning">
 <summary>Family planning</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.HealthInsurance">
 <summary>Health insurance</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Homelessness">
 <summary>Homelessness</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.MinorityGroups">
 <summary>Minority groups</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Pornography">
 <summary>Pornography</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Poverty">
 <summary>Poverty</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Prostitution">
 <summary>Prostitution</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Racism">
 <summary>Racism</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Welfare">
 <summary>Welfare</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Aero">
 <summary>Aero and Aviation Sports</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.AlpineSkiing">
 <summary>Alpine Skiing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.AmericanFootball">
 <summary>American Football</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Archery">
 <summary>Archery</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.AthleticsTrackAndField">
 <summary>Athletics, Track &amp; Field</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Badminton">
 <summary>Badminton</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Baseball">
 <summary>Baseball</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Basketball">
 <summary>Basketball</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Biathlon">
 <summary>Biathlon</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.BilliardsSnookerPool">
 <summary>Billiards, Snooker and Pool</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Bobsleigh">
 <summary>Bobsleigh</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Bowling">
 <summary>Bowling</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.BowlsAndPetanque">
 <summary>Bowls &amp; Petanque</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Boxing">
 <summary>Boxing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.CanoeingAndKayaking">
 <summary>Canoeing &amp; Kayaking</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Climbing">
 <summary>Climbing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Cricket">
 <summary>Cricket</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Curling">
 <summary>Curling</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Cycling">
 <summary>Cycling</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Dancing">
 <summary>Dancing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Diving">
 <summary>Diving</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Equestrian">
 <summary>Equestrian</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Fencing">
 <summary>Fencing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.FieldHockey">
 <summary>Field Hockey</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.FigureSkating">
 <summary>Figure Skating</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.FreestyleSkiing">
 <summary>Freestyle Skiing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Golf">
 <summary>Golf</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Gymnastics">
 <summary>Gymnastics</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Handball">
 <summary>Handball (Team)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Horse">
 <summary>Horse Racing, Harness Racing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.IceHockey">
 <summary>Ice Hockey</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.JaiAlai">
 <summary>Jai Alai (Pelota)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Judo">
 <summary>Judo</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Karate">
 <summary>Karate</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Lacrosse">
 <summary>Lacrosse</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Luge">
 <summary>Luge</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Marathon">
 <summary>Marathon</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ModernPentathlon">
 <summary>Modern Pentathlon</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.MotorRacing">
 <summary>Motor Racing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.MotorRallying">
 <summary>Motor Rallying</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Motorcycling">
 <summary>Motorcycling</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Netball">
 <summary>Netball</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.NordicSkiing">
 <summary>Nordic Skiing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Orienteering">
 <summary>Orienteering</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Polo">
 <summary>Polo</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.PowerBoating">
 <summary>Power Boating</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Rowing">
 <summary>Rowing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.RugbyLeague">
 <summary>Rugby League</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.RugbyUnion">
 <summary>Rugby Union</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Sailing">
 <summary>Sailing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Shooting">
 <summary>Shooting</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.SkiJumping">
 <summary>Ski Jumping</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.SnowBoarding">
 <summary>Snow Boarding</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Soccer">
 <summary>Soccer</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Softball">
 <summary>Softball</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.SpeedSkating">
 <summary>Speed Skating</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Speedway">
 <summary>Speedway</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.SportsOrganisations">
 <summary>Sports Organisations</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Squash">
 <summary>Squash</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.SumoWrestling">
 <summary>Sumo Wrestling</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Surfing">
 <summary>Surfing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Swimming">
 <summary>Swimming</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.TableTennis">
 <summary>Table Tennis</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.TaekwonDo">
 <summary>Taekwon-Do</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Tennis">
 <summary>Tennis</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Triathlon">
 <summary>Triathlon</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Volleyball">
 <summary>Volleyball</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.WaterPolo">
 <summary>Water Polo</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.WaterSkiing">
 <summary>Water Skiing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Weightlifting">
 <summary>Weightlifting</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Windsurfing">
 <summary>Windsurfing</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Wrestling">
 <summary>Wrestling</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ActsOfTerror">
 <summary>Acts of terror</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ArmedConflict">
 <summary>Armed conflict</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.CivilUnrest">
 <summary>Civil unrest</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.CoupDEtat">
 <summary>Coup d'Etat</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.GuerrillaActivities">
 <summary>Guerrilla activities</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Massacre">
 <summary>Massacre</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Riots">
 <summary>Riots</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.ViolentDemonstrations">
 <summary>Violent demonstrations</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.War">
 <summary>War</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Forecasts">
 <summary>Forecasts</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.GlobalChange">
 <summary>Global change</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Reports">
 <summary>Reports</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Statistics">
 <summary>Statistics</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers.Warnings">
 <summary>Warnings</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers">
 <summary>Subject Reference Number and Subject Name relationship (version IPTC/1)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.ArtsCultureEntertainment">
 <summary>Matters pertaining to the advancement and refinement of the human mind, of interests, skills, tastes and emotions</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.CrimeLawJustice">
 <summary>Establishment and/or statement of the rules of behaviour in society, the enforcement of these rules, breaches of the rules and the punishment of offenders. Organisations and bodies involved in these activities.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.DisastersAccidents">
 <summary>Man made and natural events resulting in loss of life or injury to living creatures and/or damage to inanimate objects or property.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.EconomyBusinessFinance">
 <summary>All matters concerning the planning, production and exchange of wealth.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.Education">
 <summary>All aspects of furthering knowledge of human individuals from birth to death.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.EnvironmentalIssues">
 <summary>All aspects of protection, damage, and condition of the ecosystem of the planet earth and its surroundings.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.Health">
 <summary>All aspects pertaining to the physical and mental welfare of human beings.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.HumanInterest">
 <summary>Lighter items about individuals, groups, animals or objects.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.Labour">
 <summary>Social aspects, organisations, rules and conditions affecting the employment of human effort for the generation of wealth or provision of services and the economic support of the unemployed.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.LifestyleAndLeisure">
 <summary>Activities undertaken for pleasure, relaxation or recreation outside paid employment, including eating and travel.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.Politics">
 <summary>Local, regional, national and international exercise of power, or struggle for power, and the relationships between governing bodies and states.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.ReligionBelief">
 <summary>All aspects of human existence involving theology, philosophy, ethics and spirituality.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.ScienceTechnology">
 <summary>All aspects pertaining to human understanding of nature and the physical world and the development and application of this knowledge</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.SocialIssues">
 <summary>Aspects of the behaviour of humans affecting the quality of life.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.Sport">
 <summary>Competitive exercise involving physical effort. Organisations and bodies involved in these activities.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.UnrestConflictsWar">
 <summary>Acts of socially or politically motivated protest and/or violence.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers.Weather">
 <summary>The study, reporting and predic meteorological phenomena.</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.SupplementTypeValue">
 <summary>Numbers indicating image content</summary>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SupplementTypeValue.Unknown">
 <summary>Value is used if the first octet of DataSet 2:130 (<see cref='P:Tools.MetadataT.IptcT.Iptc.ImageType'/>) &amp;lt;> 9 (<see cref='F:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents.SuplementaryData'/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SupplementTypeValue.ReducedResolutionImage">
 <summary>Reduced resolution image.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SupplementTypeValue.Logo">
 <summary>Logo</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.SupplementTypeValue.RasterizedCaption">
 <summary>Rasterized caption.</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.AudioDataType">
 <summary>The exact type of audio contained in the current objectdata.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AudioDataType.Actuality">
 <summary>Actuality</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AudioDataType.QuestionAndAnswer">
 <summary>Question and answer session</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AudioDataType.Music">
 <summary>Music, transmitted by itself</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AudioDataType.Response">
 <summary>Response to a question</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AudioDataType.RawSound">
 <summary>Raw sound</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AudioDataType.Scener">
 <summary>Scener</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AudioDataType.TextOnly">
 <summary>Text only</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AudioDataType.Voicer">
 <summary>Voicer</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.AudioDataType.Wrap">
 <summary>Wrap</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ImageTypeContents">
 <summary>Exact content of the current objectdata in terms of colour composition.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.Monochrome">
 <summary>Monochrome</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.Yellow">
 <summary>Yellow component</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.Magenta">
 <summary>Magenta component</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.Cyan">
 <summary>Cyan component</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.Black">
 <summary>Black component</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.Red">
 <summary>Red component</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.Green">
 <summary>Green component</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.Blue">
 <summary>Blue component</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.Text">
 <summary>Text only</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.FrameSequential">
 <summary>Full colour composite, frame sequential</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.LineSequential">
 <summary>Full colour composite, line sequential</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.PixesSequential">
 <summary>Full colour composite, pixel sequential</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ImageTypeContents.SpecialSequential">
 <summary>Full colour composite, special sequential</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.InformationProviders">
 <summary>Information Providers Reference</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.AFP">
 <summary>Agence France Presse</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.AP">
 <summary>Associated Press</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.APD">
 <summary>Associated Press</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.APE">
 <summary>Associated Press</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.APF">
 <summary>Associated Press</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.APS">
 <summary>Associated Press</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.BN">
 <summary>Canadian Press</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.CP">
 <summary>Canadian Press</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.CTK">
 <summary>Czech News Agency</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.dpa">
 <summary>Deutsche Presse-Agentur GmbH</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.HNA">
 <summary>Croatian News Agency</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.IPTC">
 <summary>International Press Telecommunications Council</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.MTI">
 <summary>Magyar Távirati Iroda / Hungarian News Agency</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.PC">
 <summary>Canadian Press</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.PN">
 <summary>Canadian Press</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.REUTERS">
 <summary>Reuters</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.STA">
 <summary>Slovenska Tiskovna Agencija</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.TT">
 <summary>Tidningarnas Telegrambyrå</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.UP">
 <summary>United Press International</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.InformationProviders.UPI">
 <summary>United Press International</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ISO3166">
 <summary>ISO 3166-1 alpha-3 codes used by <see cref="P:Tools.MetadataT.IptcT.Iptc.ContentLocationCode"/> with addition of some spacial codes used there.</summary>
 <remarks>Reserved code elements are codes which, while not ISO 3166-1 codes, are in use for some applications in conjunction with the ISO 3166 codes. The ISO 3166/MA therefore reserves them, so that they are not used for new official ISO 3166 codes, thereby creating conflicts between the standard and those applications.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Aruba">
 <summary>Aruba</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Afghanistan">
 <summary>Afghanistan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Angola">
 <summary>Angola</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Anguilla">
 <summary>Anguilla</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Åland">
 <summary>Åland Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Albania">
 <summary>Albania</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Andorra">
 <summary>Andorra</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.NetherlandsAntilles">
 <summary>Netherlands Antilles</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.UnitedArabEmirates">
 <summary>United Arab Emirates</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Argentina">
 <summary>Argentina</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Armenia">
 <summary>Armenia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.AmericanSamoa">
 <summary>American Samoa</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Antarctica">
 <summary>Antarctica</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.FrenchSouthernTerritories">
 <summary>French Southern Territories</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.AntiguaAndBarbuda">
 <summary>Antigua and Barbuda</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Australia">
 <summary>Australia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Austria">
 <summary>Austria</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Azerbaijan">
 <summary>Azerbaijan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Burundi">
 <summary>Burundi</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Belgium">
 <summary>Belgium</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Benin">
 <summary>Benin</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.BurkinaFaso">
 <summary>Burkina Faso</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Bangladesh">
 <summary>Bangladesh</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Bulgaria">
 <summary>Bulgaria</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Bahrain">
 <summary>Bahrain</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Bahamas">
 <summary>Bahamas</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.BosniaAndHerzegovina">
 <summary>Bosnia and Herzegovina</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Belarus">
 <summary>Belarus</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Belize">
 <summary>Belize</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Bermuda">
 <summary>Bermuda</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Bolivia">
 <summary>Bolivia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Brazil">
 <summary>Brazil</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Barbados">
 <summary>Barbados</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Brunei">
 <summary>Brunei Darussalam</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Bhutan">
 <summary>Bhutan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.BouvetIsland">
 <summary>Bouvet Island</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Botswana">
 <summary>Botswana</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.CentralAfricanRepublic">
 <summary>Central African Republic</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Canada">
 <summary>Canada</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.CocosIslands">
 <summary>Cocos (Keeling) Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Switzerland">
 <summary>Switzerland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Chile">
 <summary>Chile</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.China">
 <summary>China</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.CôteDIvoire">
 <summary>Côte d'Ivoire</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Cameroon">
 <summary>Cameroon</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Zaire">
 <summary>Congo, the Democratic Republic of the[1]</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Congo">
 <summary>Congo</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.CookIslands">
 <summary>Cook Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Colombia">
 <summary>Colombia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Comoros">
 <summary>Comoros</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.CapeVerde">
 <summary>Cape Verde</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.CostaRica">
 <summary>Costa Rica</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Cuba">
 <summary>Cuba</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.ChristmasIsland">
 <summary>Christmas Island</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.CaymanIslands">
 <summary>Cayman Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Cyprus">
 <summary>Cyprus</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.CzechRepublic">
 <summary>Czech Republic</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Germany">
 <summary>Germany</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Djibouti">
 <summary>Djibouti</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Dominica">
 <summary>Dominica</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Denmark">
 <summary>Denmark</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.DominicanRepublic">
 <summary>Dominican Republic</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Algeria">
 <summary>Algeria</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Ecuador">
 <summary>Ecuador</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Egypt">
 <summary>Egypt</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Eritrea">
 <summary>Eritrea</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.WesternSahara">
 <summary>Western Sahara</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Spain">
 <summary>Spain</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Estonia">
 <summary>Estonia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Ethiopia">
 <summary>Ethiopia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Finland">
 <summary>Finland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Fiji">
 <summary>Fiji</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.FalklandIslands">
 <summary>Falkland Islands (Malvinas)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.France">
 <summary>France</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.FaroeIslands">
 <summary>Faroe Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Micronesia">
 <summary>Micronesia, Federated States of</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Gabon">
 <summary>Gabon</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.UnitedKingdom">
 <summary>United Kingdom</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Georgia">
 <summary>Georgia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Guernsey">
 <summary>Guernsey</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Ghana">
 <summary>Ghana</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Gibraltar">
 <summary>Gibraltar</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Guinea">
 <summary>Guinea</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Guadeloupe">
 <summary>Guadeloupe</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Gambia">
 <summary>Gambia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.GuineaBissau">
 <summary>Guinea-Bissau</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.EquatorialGuinea">
 <summary>Equatorial Guinea</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Greece">
 <summary>Greece</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Grenada">
 <summary>Grenada</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Greenland">
 <summary>Greenland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Guatemala">
 <summary>Guatemala</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.FrenchGuiana">
 <summary>French Guiana</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Guam">
 <summary>Guam</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Guyana">
 <summary>Guyana</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.HongKong">
 <summary>Hong Kong</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.HeardIslandAndMcDonaldIslands">
 <summary>Heard Island and McDonald Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Honduras">
 <summary>Honduras</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Croatia">
 <summary>Croatia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Haiti">
 <summary>Haiti</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Hungary">
 <summary>Hungary</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Indonesia">
 <summary>Indonesia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Man">
 <summary>Isle of Man</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.India">
 <summary>India</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.BritishIndianOceanTerritory">
 <summary>British Indian Ocean Territory</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Ireland">
 <summary>Ireland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Iran">
 <summary>Iran, Islamic Republic of</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Iraq">
 <summary>Iraq</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Iceland">
 <summary>Iceland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Israel">
 <summary>Israel</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Italy">
 <summary>Italy</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Jamaica">
 <summary>Jamaica</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Jersey">
 <summary>Jersey</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Jordan">
 <summary>Jordan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Japan">
 <summary>Japan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Kazakhstan">
 <summary>Kazakhstan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Kenya">
 <summary>Kenya</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Kyrgyzstan">
 <summary>Kyrgyzstan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Cambodia">
 <summary>Cambodia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Kiribati">
 <summary>Kiribati</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SaintKittsAndNevis">
 <summary>Saint Kitts and Nevis</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Korea">
 <summary>Korea, Republic of</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Kuwait">
 <summary>Kuwait</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Laos">
 <summary>Lao People's Democratic Republic</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Lebanon">
 <summary>Lebanon</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Liberia">
 <summary>Liberia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Libya">
 <summary>Libyan Arab Jamahiriya</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SaintLucia">
 <summary>Saint Lucia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Liechtenstein">
 <summary>Liechtenstein</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SriLanka">
 <summary>Sri Lanka</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Lesotho">
 <summary>Lesotho</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Lithuania">
 <summary>Lithuania</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Luxembourg">
 <summary>Luxembourg</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Latvia">
 <summary>Latvia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Macao">
 <summary>Macao</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Morocco">
 <summary>Morocco</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Monaco">
 <summary>Monaco</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Moldova">
 <summary>Moldova, Republic of</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Madagascar">
 <summary>Madagascar</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Maldives">
 <summary>Maldives</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Mexico">
 <summary>Mexico</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.MarshallIslands">
 <summary>Marshall Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Macedonia">
 <summary>Macedonia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Mali">
 <summary>Mali</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Malta">
 <summary>Malta</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Myanmar">
 <summary>Myanmar</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Montenegro">
 <summary>Montenegro</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Mongolia">
 <summary>Mongolia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.NorthernMarianaIslands">
 <summary>Northern Mariana Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Mozambique">
 <summary>Mozambique</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Mauritania">
 <summary>Mauritania</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Montserrat">
 <summary>Montserrat</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Martinique">
 <summary>Martinique</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Mauritius">
 <summary>Mauritius</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Malawi">
 <summary>Malawi</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Malaysia">
 <summary>Malaysia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Mayotte">
 <summary>Mayotte</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Namibia">
 <summary>Namibia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.NewCaledonia">
 <summary>New Caledonia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Niger">
 <summary>Niger</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Norfolk">
 <summary>Norfolk Island</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Nigeria">
 <summary>Nigeria</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Nicaragua">
 <summary>Nicaragua</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Niue">
 <summary>Niue</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Netherlands">
 <summary>Netherlands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Norway">
 <summary>Norway</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Nepal">
 <summary>Nepal</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Nauru">
 <summary>Nauru</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.NewZealand">
 <summary>New Zealand</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Oman">
 <summary>Oman</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Pakistan">
 <summary>Pakistan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Panama">
 <summary>Panama</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Pitcairn">
 <summary>Pitcairn</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Peru">
 <summary>Peru</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Philippines">
 <summary>Philippines</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Palau">
 <summary>Palau</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.PapuaNewGuinea">
 <summary>Papua New Guinea</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Poland">
 <summary>Poland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.PuertoRico">
 <summary>Puerto Rico</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.NortKorea">
 <summary>Korea, Democratic People's Republic of</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Portugal">
 <summary>Portugal</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Paraguay">
 <summary>Paraguay</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Palestina">
 <summary>Palestinian Territory, Occupied</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.FrenchPolynesia">
 <summary>French Polynesia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Qatar">
 <summary>Qatar</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Réunion">
 <summary>Réunion</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Romania">
 <summary>Romania</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Russiaa">
 <summary>Russian Federation</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Rwanda">
 <summary>Rwanda</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SaudiArabia">
 <summary>Saudi Arabia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Sudan">
 <summary>Sudan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Senegal">
 <summary>Senegal</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Singapore">
 <summary>Singapore</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SouthGeorgiaAndTheSouthSandwichIslands">
 <summary>South Georgia and the South Sandwich Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SaintHelena">
 <summary>Saint Helena</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SvalbardAndJanMayen">
 <summary>Svalbard and Jan Mayen</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SolomonIslands">
 <summary>Solomon Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SierraLeone">
 <summary>Sierra Leone</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Salvador">
 <summary>El Salvador</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SanMarino">
 <summary>San Marino</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Somalia">
 <summary>Somalia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SaintPierreAndMiquelon">
 <summary>Saint Pierre and Miquelon</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Serbia">
 <summary>Serbia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SaoTomeAndPrincipe">
 <summary>Sao Tome and Principe</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Suriname">
 <summary>Suriname</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Slovakia">
 <summary>Slovakia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Slovenia">
 <summary>Slovenia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Sweden">
 <summary>Sweden</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Swaziland">
 <summary>Swaziland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Seychelles">
 <summary>Seychelles</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Syria">
 <summary>Syrian Arab Republic</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.TurksAndCaicos">
 <summary>Turks and Caicos Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Chad">
 <summary>Chad</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Togo">
 <summary>Togo</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Thailand">
 <summary>Thailand</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Tajikistan">
 <summary>Tajikistan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Tokelau">
 <summary>Tokelau</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Turkmenistan">
 <summary>Turkmenistan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.TimorLeste">
 <summary>Timor-Leste</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Tonga">
 <summary>Tonga</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.TrinidadAndTobago">
 <summary>Trinidad and Tobago</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Tunisia">
 <summary>Tunisia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Turkey">
 <summary>Turkey</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Tuvalu">
 <summary>Tuvalu</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Taiwan">
 <summary>Taiwan (ROC)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Tanzania">
 <summary>Tanzania, United Republic of</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Uganda">
 <summary>Uganda</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Ukraine">
 <summary>Ukraine</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.UnitedStatesMinorOutlyingIslands">
 <summary>United States Minor Outlying Islands</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Uruguay">
 <summary>Uruguay</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.USA">
 <summary>United States</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Uzbekistan">
 <summary>Uzbekistan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Vatican">
 <summary>Vatican City State (Holy See)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SaintVincentAndTheGrenadines">
 <summary>Saint Vincent and the Grenadines</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Venezuela">
 <summary>Venezuela</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.BritishVirginIslands">
 <summary>Virgin Islands, British</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.AmericanVirginIslands">
 <summary>Virgin Islands, U.S.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.VietNam">
 <summary>Viet Nam</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Vanuatu">
 <summary>Vanuatu</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.WallisAndFutuna">
 <summary>Wallis and Futuna</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Samoa">
 <summary>Samoa</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Yemen">
 <summary>Yemen</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.SouthAfrica">
 <summary>South Africa</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Zambia">
 <summary>Zambia</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Zimbabwe">
 <summary>Zimbabwe</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Ascension">
 <summary>Ascension Island — Reserved on request of UPU, also used by ITU</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Clipperton">
 <summary>Clipperton Island — Reserved on request of ITU</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.DiegoGarcia">
 <summary>Diego Garcia — Reserved on request of ITU</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.FranceMetropolitan">
 <summary>France, Metropolitan — Reserved on request of France</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.TristanDaCunha">
 <summary>Tristan da Cunha — Reserved on request of UPU</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.UnitedNations">
 <summary>United Nations</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.EuropeanUnion">
 <summary>European Union (formerly known as the EC and before that the EEC)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Space">
 <summary>Space</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.AtSea">
 <summary>at Sea</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.InFlight">
 <summary>In Flight</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.England">
 <summary>England (where greater granularity than Great Britain is desired)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Scotland">
 <summary>- Scotland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.NorthernIreland">
 <summary>Northern Ireland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ISO3166.Wales">
 <summary>Wales</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ObjectCycleValues">
 <summary>Values of <see cref="P:Tools.MetadataT.IptcT.Iptc.ObjectCycle"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectCycleValues.Morning">
 <summary>Morning</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectCycleValues.Evening">
 <summary>Evening</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ObjectCycleValues.Both">
 <summary>Both</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.Orientations">
 <summary>Possible orientations of image</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.Orientations.Portrait">
 <summary>Portrait</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.Orientations.Landscape">
 <summary>Landscape</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.Orientations.Square">
 <summary>Square</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.RecordNumbers,System.Byte,Tools.MetadataT.IptcT.GroupInfo)">
 <summary>Gets details about tag format by tag record and number</summary>
 <param name="Record">Recor number</param>
 <param name="TagNumber">Number of tag within <paramref name="Record"/></param>
 <param name="UseThisGroup">If not null given instance of <see cref="T:Tools.MetadataT.IptcT.GroupInfo"/> is used instead of obtaining new instance using shared property of the <see cref="T:Tools.MetadataT.IptcT.GroupInfo"/> class. (Relevant only for tags grouped into groups.)</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Record"/> is not member of <see cref="T:Tools.MetadataT.IptcT.RecordNumbers"/> -or- <paramref name="TagNumber"/> is not tag within <paramref name="record"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.EnvelopeTags)">
 <summary>Get details about tag format for tag from record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.Envelope"/></summary>
 <param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.MetadataT.IptcT.EnvelopeTags"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.ApplicationTags)">
 <summary>Get details about tag format for tag from record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.Application"/></summary>
 <param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.MetadataT.IptcT.ApplicationTags"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags)">
 <summary>Get details about tag format for tag from record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.DigitalNewsphotoParameter"/></summary>
 <param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.NotAllocated5Tags)">
 <summary>Get details about tag format for tag from record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.NotAllocated5"/></summary>
 <param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.MetadataT.IptcT.NotAllocated5Tags"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.PreObjectDataDescriptorRecordTags)">
 <summary>Get details about tag format for tag from record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.PreObjectDataDescriptorRecord"/></summary>
 <param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.MetadataT.IptcT.PreObjectDataDescriptorRecordTags"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.ObjectDataRecordTags)">
 <summary>Get details about tag format for tag from record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.ObjectDataRecord"/></summary>
 <param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.MetadataT.IptcT.ObjectDataRecordTags"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.PostObjectDataDescriptorRecordTags)">
 <summary>Get details about tag format for tag from record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.PostObjectDataDescriptorRecord"/></summary>
 <param name="Number">Number of tag within record</param>		''' <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Number"/> is not member of <see cref="T:Tools.MetadataT.IptcT.PostObjectDataDescriptorRecordTags"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetGroup(Tools.MetadataT.IptcT.Groups)">
 <summary>Gets information about known group of IPTC tags</summary>
 <param name="Group">Code of group to get information about</param>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ReferenceGroup">
 <summary>Identifies a prior envelope to which the current object refers.</summary>
 <remarks>Indicate that the current object refers to the content of a prior envelope.</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ReferenceGroup.Load(Tools.MetadataT.IptcT.Iptc)">
 <summary>Loads groups from IPTC</summary>
 <param name="IPTC"><see cref="T:Tools.MetadataT.IptcT.Iptc"/> to load groups from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ReferenceGroup.GroupInfo">
 <summary>Gets information about this group</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ReferenceGroup._ReferenceService">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ReferenceGroup.ReferenceService"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ReferenceGroup.ReferenceService">
 <summary>Identifies the Service Identifier of a prior envelope to which the current object refers.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ReferenceGroup._ReferenceDate">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ReferenceGroup.ReferenceDate"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ReferenceGroup.ReferenceDate">
 <summary>Identifies the date of a prior envelope to which the current object refers.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ReferenceGroup._ReferenceNumber">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ReferenceGroup.ReferenceNumber"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ReferenceGroup.ReferenceNumber">
 <summary>Identifies the Envelope Number of a prior envelope to which the current object refers.</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.Iptc.ByLineInfoGroup">
 <summary>Creator of the object data</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ByLineInfoGroup.Load(Tools.MetadataT.IptcT.Iptc)">
 <summary>Loads groups from IPTC</summary>
 <param name="IPTC"><see cref="T:Tools.MetadataT.IptcT.Iptc"/> to load groups from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="IPTC"/> is null</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ByLineInfoGroup.GroupInfo">
 <summary>Gets information about this group</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ByLineInfoGroup._ByLine">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ByLineInfoGroup.ByLine"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ByLineInfoGroup.ByLine">
 <summary>Contains name of the creator of the objectdata, e.g. writer, photographer or graphic artist.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.ByLineInfoGroup._ByLineTitle">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.ByLineInfoGroup.ByLineTitle"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ByLineInfoGroup.ByLineTitle">
 <summary>A by-line title is the title of the creator or creators of an objectdata. Where used, a by-line title should follow the by-line it modifies.</summary>
 <remarks>Examples: "Staff Photographer", "Corresponsal", "Envoyé Spécial"</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ARM">
 <summary>Abstract Relation Method</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ContentLocation">
 <summary>Country/geographical location referenced by the content of the object</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Reference">
 <summary>Identifies a prior envelope to which the current object refers.</summary>
 <remarks>Indicate that the current object refers to the content of a prior envelope.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ByLineInfo">
 <summary>Creator of the object data</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreview">
 <summary>Preview of embeded object</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ModelVersion">
 <summary>A number identifying the version of the Information Interchange Model, Part I, utilised by the provider.</summary>
 <remarks>Version numbers are assigned by IPTC and NAA. The version number of this record is four (4).</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Destination">
 <summary>This DataSet is to accommodate some providers who require routing information above the appropriate OSI layers.</summary>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.FileFormat">
 <summary>A number representing the file format.</summary>
 <remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it (see Appendix A). The information is used to route the data to the appropriate system and to allow the receiving system to perform the appropriate actions thereto.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.FileFormatVersion">
 <summary>A binary number representing the particular version of the <see cref="P:Tools.MetadataT.IptcT.Iptc.FileFormat"/></summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ServiceIdentifier">
 <summary>Identifies the provider and product.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.EnvelopeNumber">
 <summary>The characters form a number that will be unique for the date specified in <see cref="P:Tools.MetadataT.IptcT.Iptc.DateSent"/> and for the Service Identifier specified in <see cref="P:Tools.MetadataT.IptcT.Iptc.ServiceIdentifier"/>.</summary>
 <remarks>If identical envelope numbers appear with the same date and with the same Service Identifier, records 2-9 must be unchanged from the original. This is not intended to be a sequential serial number reception check.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ProductID">
 <summary>Allows a provider to identify subsets of its overall service.</summary>
 <remarks>Used to provide receiving organisation data on which to select, route, or otherwise handle data.</remarks>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.EnvelopePriority">
 <summary>Specifies the envelope handling priority and not the editorial urgency (see 2:10, <see cref="P:Tools.MetadataT.IptcT.Iptc.Urgency"/>).</summary>
 <remarks>'1' indicates the most urgent, '5' the normal urgency, and '8' the least urgent copy. The numeral '9' indicates a User Defined Priority. The numeral '0' is reserved for future use.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.DateSent">
 <summary>Indicates year, month and day the service sent the material.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.TimeSent">
 <summary>This is the time the service sent the material.</summary>
 <remarks>This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet">
 <summary>Array of bytes consisting of one or more control functions used for the announcement, invocation or designation of coded character sets. The control functions follow the ISO 2022 standard and may consist of the escape control character and one or more graphic characters. For more details see Appendix C, the IPTC-NAA Code Library.</summary>
 <remarks>The control functions apply to character oriented DataSets in records 2-6. They also apply to record 8, unless the objectdata explicitly, or the File Format implicitly, defines character sets otherwise. If this DataSet contains the designation function for Unicode in UTF-8 then no other announcement, designation or invocation functions are permitted in this DataSet or in records 2-6. For all other character sets, one or more escape sequences are used: for the announcement of the code extension facilities used in the data which follows, for the initial designation of the G0, G1, G2 and G3 graphic character sets and for the initial invocation of the graphic set (7 bits) or the lefthand and the right-hand graphic set (8 bits) and for the initial invocation of the C0 (7 bits) or of the C0 and the C1 control character sets (8 bits). The announcement of the code extension facilities, if transmitted, must appear in this data set. Designation and invocation of graphic and control function sets (shifting) may be transmitted anywhere where the escape and the other necessary control characters are permitted. However, it is recommended to transmit in this DataSet an initial designation and invocation, i.e. to define all designations and the shift status currently in use by transmitting the appropriate escape sequences and locking-shift functions. If is omitted, the default for records 2-6 and 8 is ISO 646 IRV (7 bits) or ISO 4873 DV (8 bits). Record 1 shall always use ISO 646 IRV or ISO 4873 DV respectively. ECMA as the ISO Registration Authority for escape sequences maintains the International Register of Coded Character Sets to be used with escape sequences, a register of Codes and allocated standardised escape sequences, which are recognised by IPTC-NAA without further approval procedure. The registration procedure is defined in ISO 2375. IPTC-NAA maintain a Register of Codes and allocated private escape sequences, which are shown in paragraph 1.2. IPTC may, as Sponsoring Authority, submit such private sequence Codes for approval as standardised sequence Codes. The registers consist of a Graphic repertoire, a Control function repertoire and a Repertoire of other coding systems (e.g. complete Codes). Together they represent the IPTC-NAA Code Library. Graphic Repertoire94-character sets (intermediate character 2/8 to 2/11)002ISO 646 IRV 4/0004ISO 646 British Version 4/1006ISO 646 USA Version (ASCII) 4/2008-1NATS Primary Set for Finland and Sweden 4/3008-2NATS Secondary Set for Finland and Sweden 4/4009-1NATS Primary Set for Denmark and Norway 4/5009-2NATS Secondary Set for Denmark and Norway 4/6010ISO 646 Swedish Version (SEN 850200) 4/7015ISO 646 Italian Version (ECMA) 5/9016ISO 646 Portuguese Version (ECMA Olivetti) 4/12017ISO 646 Spanish Version (ECMA Olivetti) 5/10018ISO 646 Greek Version (ECMA) 5/11021ISO 646 German Version (DIN 66003) 4/11037Basic Cyrillic Character Set (ISO 5427) 4/14060ISO 646 Norwegian Version (NS 4551) 6/0069ISO 646 French Version (NF Z 62010-1982) 6/6084ISO 646 Portuguese Version (ECMA IBM) 6/7085ISO 646 Spanish Version (ECMA IBM) 6/8086ISO 646 Hungarian Version (HS 7795/3) 6/9121Alternate Primary Graphic Set No. 1 (Canada CSA Z 243.4-1985) 7/7122Alternate Primary Graphic Set No. 2 (Canada CSA Z 243.4-1985) 7/896-character sets (intermediate character 2/12 to 2/15):100Right-hand Part of Latin Alphabet No. 1 (ISO 8859-1) 4/1101Right-hand Part of Latin Alphabet No. 2 (ISO 8859-2) 4/2109Right-hand Part of Latin Alphabet No. 3 (ISO 8859-3) 4/3110Right-hand Part of Latin Alphabet No. 4 (ISO 8859-4) 4/4111Right-hand Part of Latin/Cyrillic Alphabet (ISO 8859-5) 4/0125Right-hand Part of Latin/Greek Alphabet (ISO 8859-7) 4/6127Right-hand Part of Latin/Arabic Alphabet (ISO 8859-6) 4/7138Right-hand Part of Latin/Hebrew Alphabet (ISO 8859-8) 4/8139Right-hand Part of Czechoslovak Standard (ČSN 369103) 4/9Multiple-Byte Graphic Character Sets (1st intermediate character 2/4, 2nd intermediate character 2/8 to 2/11)87Japanese characters (JIS X 0208-1983) 4/2Control Function RepertoireC0 Control Function Sets (intermediate character 2/1)001C0 Set of ISO 646 4/0026IPTC C0 Set for newspaper text transmission 4/3036C0 Set of ISO 646 with SS2 instead of IS4 4/4104Minimum C0 Set for ISO 4873 4/7 C1 Control Function Sets (intermediate character 2/2)077C1 Control Set of ISO 6429 4/3105Minimum C1 Set for ISO 4873 4/7 Single Additional Control Functions062Locking-Shift Two (LS2), ISO 2022 6/14063Locking-Shift Three (LS3), ISO 2022 6/15064Locking-Shift Three Right (LS3R), ISO 2022 7/12065Locking-Shift Two Right (LS2R), ISO 2022 7/13066Locking-Shift One Right (LS1R), ISO 2022 7/14Repertoire of Other Coding Systems (e.g. complete Codes, intermediate character 2/5 )196UCS Transformation Format (UTF-8) 4/7 What's mentioned above is from definition of IPTC standard. This class currently does not support all encodings that can be advertised here neither it supports changes of encodings using ISO 2022 mechanism anywhere in text. Only certain encodings are supported - see the property for details.</remarks>
 <version version="1.5.3">Added limited support for UTF-8 based encoding autodetection based on value of this dataset.</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.UNO">
 <summary>UNO Unique Name of Object, providing eternal, globally unique identification for objects as specified in the IIM, independent of provider and for any media form.</summary>
 <remarks>The provider must ensure the UNO is unique. Objects with the same UNO are identical.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.RecordVersion">
 <summary>A number identifying the version of the Information Interchange Model, Part II (Record 2:xx), utilised by the provider.</summary>
 <remarks>Version numbers are assigned by IPTC and NAA. The version number of this record is four (4). Same tag called Record Version" also exists in record no. 3.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectTypeReference">
 <summary>The Object Type is used to distinguish between different types of objects within the IIM.</summary>
 <remarks>The first part is a number representing a language independent international reference to an Object Type followed by a colon separator. The second part, if used, is a text representation of the Object Type Number (maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix G, or in the language of the service as indicated in DataSet 2:135 (<see cref='P:Tools.MetadataT.IptcT.Iptc.LanguageIdentifier'/>)</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectAttributeReference">
 <summary>The Object Attribute defines the nature of the object independent of the Subject.</summary>
 <remarks>The first part is a number representing a language independent international reference to an Object Attribute followed by a colon separator. The second part, if used, is a text representation of the Object Attribute Number ( maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix G, or in the language of the service as indicated in DataSet 2:135 (<see cref='P:Tools.MetadataT.IptcT.Iptc.LanguageIdentifier'/>)</remarks>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectName">
 <summary>Used as a shorthand reference for the object. Changes to existing data, such as updated stories or new crops on photos, should be identified in Edit Status.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.EditStatus">
 <summary>Status of the objectdata, according to the practice of the provider.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.EditorialUpdate">
 <summary>Indicates the type of update that this object provides to a previous object. The link to the previous object is made using the ARM (DataSets 1:120 and 1:122 (<see cref='P:Tools.MetadataT.IptcT.Iptc.ARM'/>)), according to the practices of the provider.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Urgency">
 <summary>Specifies the editorial urgency of content and not necessarily the envelope handling priority (see 1:60, <see cref="P:Tools.MetadataT.IptcT.Iptc.EnvelopePriority"/>).</summary>
 <remarks>The '1' is most urgent, '5' normal and '8' denotes the least-urgent copy. The numerals '9' and '0' are reserved for future use.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.SubjectReference">
 <summary>The Subject Reference is a structured definition of the subject matter.</summary>
 <remarks>It must contain an IPR (default value is "IPTC"), an 8 digit Subject Reference Number and an optional Subject Name, Subject Matter Name and Subject Detail Name. Each part of the Subject reference is separated by a colon (:). The Subject Reference Number contains three parts, a 2 digit Subject Number, a 3 digit Subject Matter Number and a 3 digit Subject Detail Number thus providing unique identification of the object's subject.</remarks>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Category">
 <summary>Identifies the subject of the objectdata in the opinion of the provider.</summary>
 <remarks>A list of categories will be maintained by a regional registry, where available, otherwise by the provider.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.SupplementalCategory">
 <summary>Supplemental categories further refine the subject of an objectdata.</summary>
 <remarks>Only a single supplemental category may be contained in each DataSet. A supplemental category may include any of the recognised categories as used in . Otherwise, selection of supplemental categories are left to the provider.</remarks>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.FixtureIdentifier">
 <summary>Identifies objectdata that recurs often and predictably.</summary>
 <remarks>Enables users to immediately find or recall such an object.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Keywords">
 <summary>Used to indicate specific information retrieval words.</summary>
 <remarks>Each keyword uses a single Keywords DataSet. Multiple keywords use multiple Keywords DataSets. It is expected that a provider of various types of data that are related in subject matter uses the same keyword, enabling the receiving system or subsystems to search across all types of data for related material.</remarks>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ReleaseDate">
 <summary>The earliest date the provider intends the object to be used.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ReleaseTime">
 <summary>The earliest time the provider intends the object to be used.</summary>
 <remarks>This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ExpirationDate">
 <summary>The latest date the provider or owner intends the objectdata to be used.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ExpirationTime">
 <summary>The latest time the provider or owner intends the objectdata to be used.</summary>
 <remarks>This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.SpecialInstructions">
 <summary>Other editorial instructions concerning the use of the objectdata, such as embargoes and warnings.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ActionAdvised">
 <summary>Indicates the type of action that this object provides to a previous object.</summary>
 <remarks>The link to the previous object is made using the (DataSets 1:120 () and 1:122 ()), according to the practices of the provider.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.DateCreated">
 <summary>The date the intellectual content of the objectdata was created rather than the date of the creation of the physical representation.</summary>
 <remarks>Thus a photo taken during the American Civil War would carry a creation date during that epoch (1861-1865) rather than the date the photo was digitised for archiving.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.TimeCreated">
 <summary>The time the intellectual content of the objectdata current source material was created rather than the creation of the physical representation.</summary>
 <remarks>Where the time cannot be precisely determined, the closest approximation should be used. This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.DigitalCreationDate">
 <summary>The date the digital representation of the objectdata was created.</summary>
 <remarks>Thus a photo taken during the American Civil War would carry a Digital Creation Date within the past several years rather than the date where the image was captured on film, glass plate or other substrate during that epoch (1861-1865).</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.DigitalCreationTime">
 <summary>The time the digital representation of the objectdata was created.</summary>
 <remarks>This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.OriginatingProgram">
 <summary>Identifies the type of program used to originate the objectdata.</summary>
 <remarks>Note: This DataSet to form an advisory to the user and are not "computer" fields. Programmers should not expect to find computer-readable information in this DataSet.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ProgramVersion">
 <summary>Identifies the type of program used to originate the objectdata.</summary>
 <remarks>Note: This DataSet to form an advisory to the user and are not "computer" fields. Programmers should not expect to find computer-readable information in this DataSet.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectCycle">
 <summary>Virtually only used in North America.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.City">
 <summary>Identifies city of objectdata origin according to guidelines established by the provider.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.SubLocation">
 <summary>Identifies the location within a city from which the objectdata originates, according to guidelines established by the provider.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ProvinceState">
 <summary>Identifies Province/State of origin according to guidelines established by the provider.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.CountryPrimaryLocationCode">
 <summary>Indicates the code of the country/primary location where the intellectual property of the objectdata was created, e.g. a photo was taken, an event occurred.</summary>
 <remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a new country, e.g. ships at sea, space, IPTC will assign an appropriate three-character code under the provisions of ISO3166 to avoid conflicts. (see Appendix D)</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.CountryPrimaryLocationName">
 <summary>Provides full, publishable, name of the country/primary location where the intellectual property of the objectdata was created, according to guidelines of the provider.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.OriginalTransmissionReference">
 <summary>A code representing the location of original transmission according to practices of the provider.</summary>
 <remarks>Examples: BER-5, PAR-12-11-01</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Headline">
 <summary>A publishable entry providing a synopsis of the contents of the objectdata.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Credit">
 <summary>Identifies the provider of the objectdata, not necessarily the owner/creator.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Source">
 <summary>Identifies the original owner of the intellectual content of the objectdata.</summary>
 <remarks>This could be an agency, a member of an agency or an individual.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.CopyrightNotice">
 <summary>Contains any necessary copyright notice.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Contact">
 <summary>Identifies the person or organisation which can provide further background information on the objectdata.</summary>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.CaptionAbstract">
 <summary>A textual description of the objectdata, particularly used where the object is not text.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.WriterEditor">
 <summary>Identification of the name of the person involved in the writing, editing or correcting the objectdata or caption/abstract.</summary>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.RasterizedeCaption">
 <summary>Image width 460 pixels and image height 128 pixels. Scanning direction bottom to top, left to right.</summary>
 <remarks>Contains the rasterized objectdata description and is used where characters that have not been coded are required for the caption.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ImageType">
 <summary>Image Type</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ImageOrientation">
 <summary>Indicates the layout of the image area.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.LanguageIdentifier">
 <summary>Describes the major national language of the object, according to the 2-letter codes of ISO 639:1988.</summary>
 <remarks>Does not define or imply any coded character set, but is used for internal routing, e.g. to various editorial desks. Implementation note: Programmers should provide for three octets for Language Identifier because the ISO is expected to provide for 3-letter codes in the future.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.AudioType">
 <summary>Type of audio in objectdata</summary>
 <remarks>Note: When '0' or 'T' is used, the only authorised combination is "0T". This is the mechanism for sending a caption either to supplement an audio cut sent previously without a caption or to correct a previously sent caption.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.AudioSamplingRate">
 <summary>Sampling rate, representing the sampling rate in hertz (Hz).</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.AudioSamplingResolution">
 <summary>The number of bits in each audio sample.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.AudioDuration">
 <summary>The running time of an audio objectdata when played back at the speed at which it was recorded.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.AudioOutcue">
 <summary>Identifies the content of the end of an audio objectdata, according to guidelines established by the provider.</summary>
 <remarks>The outcue generally consists of the final words spoken within an audio objectdata or the final sounds heard.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.RecordVersion3">
 <summary>A binary number representing the version of the Digital Newsphoto Parameter Record utilised by the provider.</summary>
 <remarks>Version numbers are assigned by IPTC and NAA. The version of this record is four (4). Same tag called "Record Version" also exists in record no. 2.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.PictureNumber">
 <summary>The picture number provides a universally unique reference to an image.</summary>
 <remarks>For example, colour images, when split with colour components into multiple objects, i.e. envelopes, would carry the same Picture Number.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.PixelsPerLine">
 <summary>A number representing the number of pixels in a scan line for the component with the highest resolution.</summary>
 <remarks>Not valid when DataSet 3:60 () octet zero (0) is 0 (zero).NCPS values are 1024 or 2048.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.NumberOfLines">
 <summary>A number representing the number of scan lines comprising the image for the component with the highest resolution.</summary>
 <remarks>Not valid when DataSet 3:60 () octet zero (0) is 0 (zero).NCPS range is 1 to 2048.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.PixelSizeInScanningDirection">
 <summary>A number indicating the number of pixels per unit length in the scanning direction.</summary>
 <remarks>Not valid when DataSet 3:60 () octet zero (0) is 0 (zero). NCPS value is 1.Pixel Size is a relative size expressed as the ratio of 3:40 to 3:50 (3:40/3:50).</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.PixelSizePerpendicularToScanningDirection">
 <summary>A number indicating the number of pixels per unit length perpendicular to the scanning direction.</summary>
 <remarks>Not valid when DataSet 3:60 () octet zero (0) is 0 (zero). NCPS value is 1.Pixel Size is a relative size expressed as the ratio of 3:40 to 3:50 (3:40/3:50).</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.SupplementType">
 <summary>A number indicating the image content.</summary>
 <remarks>Mandatory when the numeric character in DataSet 2:130 () is ‘9’ ()</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ColourRepresentation">
 <summary>Indicates colour representation</summary>
 <remarks>The special interleaving structures refer to defined methods given in Appendix G according to the value in the sampling structure DataSet 3:90. Allowed combinations are: 0,01,03,0 - 4,0 (In a single-frame colour image, a colour is described with a single sample per pixel.)3,1 - 3,2 - 3,3 - 3,4 - 3,54,1 - 4,2 - 4,3 - 4,4 - 4,5NCPS values are 1,0 , 3,1 or 3,5.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.InterchangeColourSpace">
 <summary>A value indicating the colour space in which the pixel values are expressed for each component in the image.</summary>
 <remarks>Mandatory if DataSet 3:60 octet zero (0) has a value greater than one, i.e. a multi-component image. Not valid when DataSet 3:60 octet zero (0) is 0 (zero). NCPS values are 0, 4 or 7 (, or ).</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ColourSequence">
 <summary>Each of 1 to four octets contains a binary number that relates to the colour component using the identification number assigned to it in the appendix for each colour space.</summary>
 <remarks>The sequence specifies the sequence of the components as they appear in the objectdataFor frame sequential components, only one octet is set to identify the current colour component in the objectdata.Mandatory if DataSet 3:60 octet zero (0) has a value greater than one, i.e. a multi-component image AND the value of octet one (1) is 0, 1, 2, 3, or 4, i.e. single frame, frame sequential, line sequential or pixel sequential. Not valid when DataSet 3:60 octet zero (0) is 0 (zero).Allowed values are: 0 - 1 - 2 - 3 - 4; 0 - may be used for “monochrome” or “no image” representations. Other values are reserved.NCPS values are 0,1,2,3 or 123.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.IccInputColourProfile">
 <summary>Specifies the International Color Consortium profile for the scanning/source device used to generate the digital image files.</summary>
 <remarks>Valid when DataSet 3:64 has values 1,2,4,5 or 8.This profile can be used to translate the image colour information from the input device colour space into another device's native colour space. The ICC profile is specified in ISO/TC 130/WG2N562.Maximul alloved lenght of this field according to IPCT IIM standard is 512K. However current implementation does not allow such big fields.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ColourCalibrationMatrixTable">
 <summary>This DataSet is no longer required as its contents have been rendered obsolete by the introduction of DataSet P3:66 (ICC Input Colour Profile).</summary>
 <remarks>This DataSet will be removed from the next Version of this Standard.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.LookupTable">
 <summary>Consists of one, three or four one-dimensional lookup tables (LUT).</summary>
 <remarks>The LUT relates to the image data in the colour space defined in DataSet 3:64 and specifies the correction to apply to the pixel values before display or printing of the image. Not applicable if the colour space requires converting before display or printing. Maximul alloved lenght of this field according to IPCT IIM standard is 131072. However current implementation does not allow such big fields.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.NumberOfIndexEntries">
 <summary>A binary number representing the number of index entries in the DataSet 3:85 (<see cref="P:Tools.MetadataT.IptcT.Iptc.ColourPalette"/>).</summary>
 <remarks>Mandatory where DataSet 3:60 octet zero (0) has a value greater than one, i.e. a multi-component image AND the value of octet one (1) is 0, i.e. single-frame. Not relevant for other image types.0 - No Colour Palette contained in DataSet 3:85. A default palette should be used. 1 - 65535 - valid numbers.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ColourPalette">
 <summary>In a single-frame colour image, a colour is described with a single sample per pixel.</summary>
 <remarks>Mandatory if 3:84 exists and is non zero.The pixel value is used as an index into the Colour Palette.The purpose of the Colour Palette is to act as a lookup table mapping the pixel values into the Colour Space defined in 3:64.The number of index entries is defined in DataSet 3:84.The number of output values is defined in octet zero of DataSet 3:60.The number of octets used for each output value is deducted from 3:135.The colour sequence of the output values is defined in 3:65. A default palette may be referenced if this DataSet is omitted. A number of default palettes may be held to be selected according to the device identifier component of the Picture Number 3:10.Maximul alloved lenght of this field according to IPCT IIM standard is 524288. However current implementation does not allow such big fields.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.NumberOfBitsPerSample">
 <summary>A number between 1 and 16 that indicates the number of bits per pixel value used as entries in the Colour Palette. These values are found in the objectdata itself.</summary>
 <remarks>Mandatory if DataSet 3:60 octet zero (0) has a value greater than one, i.e. a multi-component image AND the value of octet one (1) is 0, i.e. single frame. Not relevant for other image types.Each entry should be in one octet if number of bits is less than or equal to 8 and in two octets if number of bits is between 9 and 16, the least significant bit should always be aligned on the least significant bit of the least significant octet.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.SamplingStructure">
 <summary>A number defining the spatial and temporal relationship between pixels.</summary>
 <remarks>NCPS values are 0 or 2.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ScanningDirection">
 <summary>A number indicating the correct relative two dimensional order of the pixels in the objectdata. Eight possibilities exist.</summary>
 <remarks>Not valid when DataSet 3:60 octet zero (0) is 0 (zero).NCPS value is 0.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ImageRotation">
 <summary>A number indicating the clockwise rotation applied to the image for presentation.</summary>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.DataCompressionMethod">
 <summary>Specifies data compression method</summary>
 <remarks>Not valid when DataSet 3:60 octet zero (0) is 0 (zero).Octets 0-1 contain a binary number identifying the providerowner of the algorithm.Octet 2 contains a binary number identifying the type of compression algorithm.Octet 3 contains a binary number identifying the revision number of the algorithm.An identification number is issued by IPTC-NAA to providersowners of compression algorithms upon request (see Appendix A). The numbers identifying type and revision of algorithms are managed by the providers-owners.A zero (0) value of all octets in this DataSet identifies an uncompressed image. In this case the component values should be in one octet if number of bits is less than or equal to 8 and in two octets if number of bits is between 9 and 16, the least significant bit always being aligned on the least significant bit of the least significant octet.NCPS values are 0000 or 0121.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.QuantisationMethod">
 <summary>Contains a binary number identifying the quantisation law.</summary>
 <remarks>The relations between different quantisation methods are described in DNPR Guideline 1. Not valid when DataSet 3:60 octet zero (0) is 0 (zero).NCPS values are 0 or 5.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.EndPoints">
 <summary>These end points apply to the coding process.</summary>
 <remarks>2n octets. Valid only when DataSet 3:64 has a value of 0,1,2,4 or 5. Not relevant for other colour spaces. n = the number of octets per component as derived from 3:135 multiplied by the number of components. The number of components is 1 when octet one (1) of DataSet 3:60 has a value of one (1), in all other cases the number is defined in octet zero (0) of DataSet 3:60.The first n octets contain the values representing the minimum density that is encoded for each component in the order specified in DataSet 3:65.The second n octets contain the values representing the maximum density that is encoded for each component in the order specified in DataSet 3:65.The difference between the maximum and minimum density for every component is the same and given by the Maximum Density Range value in DataSet 3:140.NCPS end point values are 255 and 0.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ExcursionTolerance">
 <summary>Indicates if values outside the range defined by the end points in DataSet 3:125 may occur.</summary>
 <remarks>NCPS value is false</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.BitsPerComponent">
 <summary>Contains a sequence of one or more octets describing the number of bits used to encode each component. The sequence is specified by the order of components in DataSet 3:65.</summary>
 <remarks>The number of octets is 1 when octet one (1) of DataSet 3:60 has a value of one (1), in all other cases the number of octets is equivalent to the number of components specified in octet zero (0) of DataSet 3:60.Each octet contains a binary value between one and 16.NCPS values are 8 or 888.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.MaximumDensityRange">
 <summary>A binary value which specifies the maximum density range multiplied by 100.</summary>
 <remarks>Not valid when DataSet 3:60 octet zero (0) is 0 (zero).The value represents the difference between the lowest density and the highest density points that can be encoded by the originating system.NCPS value is 160.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.GammaCompensatedValue">
 <summary>A binary value which specifies the value of gamma for the device multiplied by 100.</summary>
 <remarks>Valid only when DataSet 3:120 has a value of 5 or 7.If this DataSet is omitted receiving equipment should assume that a gamma value of 2.22 appliesNCPS value is 222</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.OverallRating">
 <summary>Overall rating of the subject</summary>
 <remarks>This property is not part of IPTC IIM standard and other software may ignore or remove it.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.TechnicalQuality">
 <summary>Rates technical quality of subject data (e.g. Is the photo sharp?)</summary>
 <remarks>This property is not part of IPTC IIM standard and other software may ignore or remove it.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ArtQuality">
 <summary>Rates artistic quality of subject data (i.e. How nice it is?)</summary>
 <remarks>This property is not part of IPTC IIM standard and other software may ignore or remove it.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.InformationValue">
 <summary>Rates information value of subject data (i.e. Does it provide any valuable information?)</summary>
 <remarks>This property is not part of IPTC IIM standard and other software may ignore or remove it.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.SizeMode">
 <summary>The octet is set to the binary value of '0' if the size of the objectdata is not known and is set to '1' if the size of the objectdata is known at the beginning of transfer.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.MaxSubfileSize">
 <summary>The maximum size for the following Subfile DataSet(s).</summary>
 <remarks>The largest number is not defined, but programmers should provide at least for the largest binary number contained in four octets taken together. If the entire object is to be transferred together within a single DataSet 8:10, the number equals the size of the object.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectDataSizeAnnounced">
 <summary>A binary number representing the overall size of the objectdata, expressed in octets, not including tags, if that size is known when transfer commences.</summary>
 <remarks>Mandatory if DataSet has value '1' and not allowed if DataSet has value '0'.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.MaximumObjectDataSize">
 <summary>Used when objectdata size is not known, indicating the largest size, expressed in octets, that the objectdata can possibly have, not including tags.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Subfile">
 <summary>Subfile DataSet containing the objectdata itself.</summary>
 <remarks>Subfiles must be sequential so that the subfiles may be reassembled.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ConfirmedObjectDataSize">
 <summary>Total size of the objectdata, in octets, without tags.</summary>
 <remarks>This number should equal the number in DataSet if the size of the objectdata is known and has been provided.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ARMIdentifier">
 <summary>The DataSet identifies the Abstract Relationship Method (ARM) which is described in a document registered by the originator of the ARM with the IPTC and NAA.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ARMVersion">
 <summary>A number representing the particular version of the ARM specified in DataSet <see cref='P:Tools.MetadataT.IptcT.Iptc.ARMIdentifier'/>.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ContentLocationCode">
 <summary>Indicates the code of a country/geographical location referenced by the content of the object.</summary>
 <remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a country, e.g. ships at sea, space, IPTC will assign an appropriate threecharacter code under the provisions of ISO3166 to avoid conflicts. (see Appendix D) .</remarks>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ContentLocationName">
 <summary>Provides a full, publishable name of a country/geographical location referenced by the content of the object, according to guidelines of the provider.</summary>
 <remarks>If used in the same object with DataSet , must immediately follow and correspond to it.</remarks>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ReferenceService">
 <summary>Identifies the Service Identifier of a prior envelope to which the current object refers.</summary>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ReferenceDate">
 <summary>Identifies the date of a prior envelope to which the current object refers.</summary>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ReferenceNumber">
 <summary>Identifies the Envelope Number of a prior envelope to which the current object refers.</summary>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ByLine">
 <summary>Contains name of the creator of the objectdata, e.g. writer, photographer or graphic artist.</summary>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ByLineTitle">
 <summary>A by-line title is the title of the creator or creators of an objectdata. Where used, a by-line title should follow the by-line it modifies.</summary>
 <remarks>Examples: "Staff Photographer", "Corresponsal", "Envoyé Spécial"</remarks>
 <returns>If this instance contains this tag(s) retuns them. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewFileFormat">
 <summary>The file format of the ObjectData Preview.</summary>
 <remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it.</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewFileFormatVersion">
 <summary>The particular version of the ObjectData Preview File Format specified in <see cref="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewFileFormat"/></summary>
 <remarks>The File Format Version is taken from the list included in Appendix A</remarks>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewData">
 <summary>Maximum size of 256000 octets consisting of binary data.</summary>
 <returns>If this instance contains this tag retuns it. Otherwise returns null</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid.</exception>
 <exception cref="T:Tools.MetadataT.IptcT.IptcSetException">Invalid value pased to property or other serialization error occured</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTypedValue(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets value of given dataset in expected type for that dataset</summary>
 <param name="Item">Identifies data set by its record number and data set number</param>
 <returns>Value of property identified by <paramref name="Item"/>. If there is not property appropriate for <paramref name="item"/> value is returned as string. If there is no such value, null is returned.</returns>
 <exception cref="T:Tools.MetadataT.IptcT.IptcGetException">Tag exists in this instance but it's value is invalid according to its type (if it is know tag) or as string (if it is unknown tag).</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc._Encoding">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.encodingSetExternally">
 <summary>Indicates whether value of the <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> property was set externally or not</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Encoding">
 <summary>Encoding used for encoding and decoding some texts (applies only to records 2 - 6 and 8 (see remarks))</summary>
 <value>
 By setting this property to null encoding is reset to default (either <see cref="P:System.Text.Encoding.Default"/> or autodetect from <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/>) and <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> tracing is turned on.
 By setting this property to non-null value <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> change-tracking is turned of.
 </value>
 <returns>Current encoding used for decoding string values stored in records 2-6.</returns>
 <remarks>
 <para>
 By setting this property you can change encoding strings are treated as being stored in. Default encoding is <see cref="P:System.Text.Encoding.Default"/>.
 By setting this property <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> is NOT changed and existing string properties are NOT converted to a new encoding. Simply bytes of existing string properties are kept unchanged and treated as string stored in a new encoding specified.
 </para>
 <para>
 Until this property is set from ouside of an <see cref="T:Tools.MetadataT.IptcT.Iptc"/> object it's value is determined by following logic:
 When <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> is not specified or not understood <see cref="P:System.Text.Encoding.Default"/> is used.
 When <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> is specified and understood appropriate encoding is used.
 When value of <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> changes <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> changes as well - either to a new encoding (if it is understood) or to <see cref="P:System.Text.Encoding.Default"/> (if a new encoding is not understood).
 Making change of <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> has same affect on string properties as making change of <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> - existing binary values are treated as being under a new encoding.
 </para>
 <para>Currently of a few encodings are understood by <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/>. 
 Only UTF-8 encodings with ISO 2022 registration numbers 190, 191, 192 and 196 are supported.
 Other encodings are ignored (treated as <see cref="P:System.Text.Encoding.Default"/>).
 </para>
 <para>Once you set value of this property from code automatic tracking of changes of <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> stops.</para>
 <para>
 <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> also specifies encoding hint for record 8 (<see cref="F:Tools.MetadataT.IptcT.RecordNumbers.ObjectDataRecord"/>).
 You shall decide yourself whether to use this hint or not when decoding binary data from record 8.
 <see cref="T:Tools.MetadataT.IptcT.Iptc"/> class does not apply any encoding on binary data in record 8.
 However when text data are read from record 8 encoding is applied same way as in records 2 - 6.
 </para>
 </remarks>
 <seelaso cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/><seelaso cref="M:Tools.TextT.EncodingT.ISO2022.DetectEncoding(System.Byte[],Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/>
 <version version="1.5.3">Support to detect UTF-8 encodings (numbers 190, 191, 192 and 196 according to ISO 2022) from <see cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> addded.</version>
 <version version="1.5.3"><see cref="T:System.Diagnostics.DebuggerStepThroughAttribute"/> removed from getter.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.UnsignedBinaryNumber_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.UnsignedBinaryNumber"/></summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentException">Value stored in IPTC stream has lenght neither 1, 2, 4 nor 8 (in Getter)</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Boolean_Binary_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Byte)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Boolean_Binary"/></summary>
 <param name="Key">Record and dataset number</param>
 <param name="Bytes">Number of bytes per one boolean item (ignored in Getter)</param>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Byte_Binary_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Byte_Binary"/></summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentException">Value stored in IPTC stream has lenght neither 1, 2, 4 nor 8 (in Getter)</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.UShort_Binary_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.UShort_Binary"/></summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentException">Value stored in IPTC stream has lenght neither 1, 2, 4 nor 8 (in Getter)</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.UInt_Binary_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.UInt_Binary"/></summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentException">Value stored in IPTC stream has lenght neither 1, 2, 4 nor 8 (in Getter)</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.NumericChar_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Byte,System.Boolean)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.NumericChar"/></summary>
 <param name="key">Record and dataset number</param>
 <param name="Len">Maximal or fixed lenght of string (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Fixed"><paramref name="Len"/> determines fixed lenght (ignored in Getter)</param>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <exception cref="T:System.InvalidCastException">Cannot convert stored bytes into number (in Getter)</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="Len"/> is 0 and <paramref name="Fixed"/> is True (in Setter) -or- Number to be stored is negative (in Setter)</exception>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Number cannot be stored in given number of bytes (if <paramref name="Len"/> is non-zero and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is false, in Setter)</exception>
 <version version="1.5.3">Fix: <paramref name="Len"/> is not enforced in setter.</version>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies when <paramref name="Fixed"/> is false.</version>
 <version version="1.5.3"><see cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Is thrown instead of <see cref="T:System.ArgumentException"/> when lenght constraint is violated.</see></version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.GraphicCharacters_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)">
 <summary>Gets or sets values(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.GraphicCharacters"/></summary>
 <param name="Key">Record and dataset number</param>
 <param name="Len">Maximal or fixed lenght of string (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
 <param name="Encoding">Encoding to be used. Is ommited or nothing then <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> or default is used</param>
 <exception cref="T:System.ArgumentException"><paramref name="Len"/> is 0 and <paramref name="Fixed"/> is true (in Setter) -or-  One of values being set contains non-graphic character (in setter)</exception>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">One of values being set violates <paramref name="Len"/> and/or <paramref name="Fixed"/> constraint after being encoded (not thrown when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true).</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Len"/> is negative (in Setter)</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/>
 <version version="1.5.3">When <paramref name="Encoding"/> is null <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> is used for records 2 - 6 and 8, otherwise <see cref="P:System.Text.Encoding.ASCII"/> (equal to ISO 646 IRV) is used. (Previous behavior was use <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> whenever <paramref name="Encoding"/> is null. Also note that <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> behavior is changed in 1.5.3.)</version>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies when <paramref name="Fixed"/> is false.</version>
 <version version="1.5.3"><see cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Is thrown instead of <see cref="T:System.ArgumentException"/> when lenght constraint is violated.</see></version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.TextWithSpaces_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)">
 <summary>Gets or sets values(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.TextWithSpaces"/></summary>
 <param name="Key">Record and dataset number</param>
 <param name="Len">Maximal or fixed lenght of string (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
 <param name="Encoding">Encoding to be used. Is ommited or nothing then <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> or default is used</param>
 <exception cref="T:System.ArgumentException">
 <paramref name="Len"/> is 0 and <paramref name="Fixed"/> is true (in Setter) -or-  One of values being set contains non-graphic-non-space character (in setter) -or- <paramref name="Len"/> is negative (in setter)</exception>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">One of values being set violates <paramref name="Len"/> and/or <paramref name="Fixed"/> constraint after being encoded (not thrown when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true.</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/><seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/><seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Text_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)"/>
 <version version="1.5.3">When <paramref name="Encoding"/> is null <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> is used for records 2 - 6 and 8, otherwise <see cref="P:System.Text.Encoding.ASCII"/> (equal to ISO 646 IRV) is used. (Previous behavior was use <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> whenever <paramref name="Encoding"/> is null. Also note that <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> behavior is changed in 1.5.3.)</version>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies when <paramref name="Fixed"/> is false.</version>
 <version version="1.5.3"><see cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Is thrown instead of <see cref="T:System.ArgumentException"/> when lenght constraint is violated.</see></version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Text_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)">
 <summary>Gets or sets values(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.TextWithSpaces"/></summary>
 <param name="Key">Record and dataset number</param>
 <param name="Len">Maximal or fixed lenght of string (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
 <param name="Encoding">Encoding to be used. Is ommited or nothing then <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> or default is used</param>
 <exception cref="T:System.ArgumentException"><paramref name="Len"/> is 0 and <paramref name="Fixed"/> is true (in Setter) -or- One of values being set contains non-graphic-non-space-non-cr-non-lf character (in setter)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Len"/> is negative (in Setter)</exception>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">One of values being set violates <paramref name="Len"/> and/or <paramref name="Fixed"/> constraint after being encoded (not thrown when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true.</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/><seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/><seelaso cref="P:Tools.MetadataT.IptcT.Iptc.TextWithSpaces_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean,System.Text.Encoding)"/>
 <version version="1.5.3">When <paramref name="Encoding"/> is null <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> is used for records 2 - 6 and 8, otherwise <see cref="P:System.Text.Encoding.ASCII"/> (equal to ISO 646 IRV) is used. (Previous behavior was use <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> whenever <paramref name="Encoding"/> is null. Also note that <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> behavior is changed in 1.5.3.)</version>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies when <paramref name="Fixed"/> is false.</version>
 <version version="1.5.3"><see cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Is thrown instead of <see cref="T:System.ArgumentException"/> when lenght constraint is violated.</see></version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.BW460_460">
 <summary>Bitmap of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.BW460"/> has 460 columns</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.BW460_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean)">
 <summary>Gets or sets value(s) of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.BW460"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <param name="Len">Maximal or fixed lenght of serialized bitmap (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Fixed"><paramref name="Len"/> represents fixed lenght of serialized bitmap (ignored in Getter)</param>
 <exception cref="T:System.ArgumentException"><paramref name="Fixed"/> is True and <paramref name="Len"/> is 0 (in Setter) -or- Bitmap being set has width different form 460 (in Setter)</exception>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Bitmap violates lenght constraint after serialization (in Setter; not thrown when <paramref name="Fixed"/> is true and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is false)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Len"/> is negative (in Setter)</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies when <paramref name="Fixed"/> is false.</version>
 <version version="1.5.3"><see cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Is thrown instead of <see cref="T:System.ArgumentException"/> when lenght constraint is violated.</see></version>
</member>
<member name="F:Tools.MetadataT.IptcT.Iptc.Cache">
 <summary>Cache for <see cref="P:Tools.MetadataT.IptcT.Iptc.BW460_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean)"/></summary>
 <remarks>FIlled by <see cref="P:Tools.MetadataT.IptcT.Iptc.BW460_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean)"/> getter, invalidated by <see cref="M:Tools.MetadataT.IptcT.Iptc.OnValueChanged(Tools.MetadataT.IptcT.DataSetIdentification)"/></remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.Ba2Bytes(System.Collections.BitArray)">
 <summary>Converts <see cref="T:System.Collections.BitArray"/> into <see cref="T:System.Byte"/></summary>
 <param name="ba">Bits to be converted</param>
 <returns>Array of <see cref="T:System.Byte"/>()</returns>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Enum_Binary_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Type)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Enum_Binary"/></summary>
 <param name="Key">Record and dataset number</param>
 <param name="Type">Type of neumeration </param>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <exception cref="T:System.ArgumentException">
 Underlying type of enumeration is neither <see cref="T:System.Byte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/> nor <see cref="T:System.Int64"/> (in Setter) -or-
 <paramref name="Type"/> is not <see cref="T:System.Enum"/> (in Setter)</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Enum is restricted and value being set is not member of <paramref name="Type"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <exception cref="T:System.MissingMethodException">Failed to create instance of given enumeration (in Getter; sohold not occure if norma enumeration is passed to <paramref name="Type"/>)</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Enum_NumChar_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Type,System.Byte,System.Boolean)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Enum_NumChar"/></summary>
 <param name="Key">Record and dataset number</param>
 <param name="Type">Type of neumeration </param>
 <param name="Len">Maximal or fixed lenght of string (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <exception cref="T:System.ArgumentException">
 <paramref name="Fixed"/> is True and <paramref name="Len"/> is 0 -or-
 <paramref name="Type"/> is not <see cref="T:System.Enum"/> (in Setter)</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Restrict"/> is True and value being set is not member of <paramref name="Type"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <exception cref="T:System.MissingMethodException">Failed to create instance of given enumeration (in Getter; sohold not occure if norma enumeration is passed to <paramref name="Type"/>)</exception>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Encoded length of string violates lenght constraint (not thrown when <paramref name="Fixed"/> is true and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is false).</exception>
 <version version="1.5.3">Fix: <paramref name="Len"/> is not enforced in setter.</version>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies when <paramref name="Fixed"/> is false.</version>
 <version version="1.5.3"><see cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Is thrown instead of <see cref="T:System.ArgumentException"/> when lenght constraint is violated.</see></version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.CCYYMMDD_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.CCYYMMDD"/></summary>
 <param name="Key">Record and dataset number</param>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <exception cref="T:System.ArgumentException">Stored date has lenght different from 8 (in Getter)</exception>
 <exception cref="T:System.InvalidCastException">Stored date contains non-number (in Getter)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Stored date's value of month or day is invalid (i.e. 0 or 13 or more months or 0 or more than valid in month days) (in Getter)</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.CCYYMMDDOmmitable_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.CCYYMMDDOmmitable"/></summary>
 <param name="Key">Record and dataset number</param>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <exception cref="T:System.ArgumentException">Stored date ha lenght different from 8 (in Getter)</exception>
 <exception cref="T:System.InvalidCastException">Stored date contains non-number (in Getter)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">
 Stored date's value of month or day is invalid (i.e. 13 or more months or more than 31 days) (in Getter) -or-
 Date being set is invalid (day is invalid in month context) (in Setter) -or-
 Month or year is ommited when day is not ommited or year is ommited when month or day is not ommited (in Setter)
 </exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.HHMMSS_HHMM_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.HHMMSS_HHMM"/></summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentException">
 Stored time has length different than 11 and 6 (in Getter) -or-
 Stored time has something else then + or - on 7th position (in Getter)
 </exception>
 <exception cref="T:System.InvalidCastException">Stored time has non-numeric character on any position excepting 7th (in Getter)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Stored time is out of range of possible values (see <seealso cref="T:Tools.MetadataT.IptcT.IptcDataTypes.Time"/> for details; <see cref="M:MetadataT.IptcT.IptcDataTypes.Time.#ctor(System.TimeSpan)"/> when length of stored time is 6)</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/><seelaso cref="P:Tools.MetadataT.IptcT.Iptc.HHMMSS_Value(Tools.MetadataT.IptcT.DataSetIdentification)"/>
 <version version="1.5.3">In getter: When stored time lenght is 6 <see cref="P:Tools.MetadataT.IptcT.Iptc.HHMMSS_Value(Tools.MetadataT.IptcT.DataSetIdentification)"/> is returned instead (with zero offset; previously <see cref="T:System.ArgumentException"/> used to be thrown).</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ByteArray_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean)">
 <summary>Gets or sets value of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Byte_Binary"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <param name="Len">Maximal or fixed data lenght (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Fixed"><paramref name="Len"/> is fixed length (ignored in Getter)</param>
 <exception cref="T:System.ArgumentException"><paramref name="Fixed"/> is True and <paramref name="Len"/> is 0 (in Setter)</exception>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Lenght of byte array is greater then <paramref name="Len"/> and <paramref name="Len"/> is non-zero or length of byte array differs from <paramref name="Len"/> and <paramref name="Fixed"/> is True (not thrown when <paramref name="Fixed"/> is true and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is false).</exception>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies when <paramref name="Fixed"/> is false.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.UNO_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.UNO"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentNullException">Stored value is null or empty (in Getter)</exception>
 <exception cref="T:System.ArgumentException">IPR or OVI part of stored value is invalid: contains unallowed charactes (white space, *, :, /, ?), is empty or violates lenght constraint. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.OVI"/> and <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> for more information (in Getter)</exception>
 <exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in stored value (in Getter)</exception>
 <exception cref="T:System.ArgumentException">UCD component of stored value is to short or contains invalid date (in Getter)</exception>
 <exception cref="T:System.InvalidCastException">UCD component odf stored value contains non-numeric character (in Getter)</exception>
 <exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> for more information. (in Getter)</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Num2_Str_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Text.Encoding)">
 <summary>Gets or sets value of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Num2_Str"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <param name="MaxLenght">Maximal lenght of serialized byte array (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Encoding">Encoding for string part (numeric should always uses <see cref="P:System.Text.Encoding.ASCII"/>). If ommited or null then <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> or default is used.</param>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Serialized value is longer than <paramref name="MaxLenght"/> bytes or serialized numeric part is not of lenght 2 bytes (not thrown for entire lenght when <paramref name="Fixed"/> is true and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is false).</exception> 
 <seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/>
 <version version="1.5.3">When <paramref name="Encoding"/> is null <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> is used for records 2 - 6 and 8, otherwise <see cref="P:System.Text.Encoding.ASCII"/> (equal to ISO 646 IRV) is used. (Previous behavior was use <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> whenever <paramref name="Encoding"/> is null. Also note that <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> behavior is changed in 1.5.3.)</version>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Num3_Str_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Text.Encoding)">
 <summary>Gets or sets value of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Num2_Str"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <param name="MaxLenght">Maximal lenght of serialized byte array (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Encoding">Encoding for string patr (numeric should always uses <see cref="P:System.Text.Encoding.ASCII"/>). If ommited or null then <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> or default is used.</param>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Serialized value is longer than <paramref name="MaxLenght"/> bytes or serialized numeric part is not of lenght 3 bytes (not thrown for entire length when <paramref name="Fixed"/> is true and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is false).</exception> 
 <seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/>
 <version version="1.5.3">When <paramref name="Encoding"/> is null <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> is used for records 2 - 6 and 8, otherwise <see cref="P:System.Text.Encoding.ASCII"/> (equal to ISO 646 IRV) is used. (Previous behavior was use <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> whenever <paramref name="Encoding"/> is null. Also note that <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> behavior is changed in 1.5.3.)</version>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.SubjectReference_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Text.Encoding)">
 <summary>Gets or sets value(s) of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.SubjectReference"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <param name="Encoding">Encoding used to encode and decode names. If ommited <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> or default is used.</param>
 <exception cref="T:System.IndexOutOfRangeException">Stored value have more than 5 :-separated parts (in Getter)</exception>
 <exception cref="T:System.ArgumentException">Stored value have less then 5 :-separated parts (in Getter)</exception>
 <exception cref="T:System.InvalidOperationException">Setting value which's part(s) serializes into byte array of bad lengths (allowed lenghts are 1÷32 for <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/>, 8 for <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectReferenceNumber"/> and 0÷64 for names) (in setter)</exception>
 <seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/>
 <version version="1.5.3">When <paramref name="Encoding"/> is null <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> is used for records 2 - 6 and 8, otherwise <see cref="P:System.Text.Encoding.ASCII"/> (equal to ISO 646 IRV) is used. (Previous behavior was use <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> whenever <paramref name="Encoding"/> is null. Also note that <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> behavior is changed in 1.5.3.)</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.PictureNumber_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.PictureNumber"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentException">In getter: Value of dataset does not have exactly 15 octets</exception>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.Alpha_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Byte,System.Boolean,System.Text.Encoding)">
 <summary>Gets or sets values(s) of type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Alpha"/></summary>
 <param name="Key">Record and dataset number</param>
 <param name="Len">Maximal or fixed lenght of string (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
 <param name="Encoding">Encoding to be used. Is ommited or nothing then <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> or default is used</param>
 <exception cref="T:System.ArgumentException"><paramref name="Len"/> is 0 and <paramref name="Fixed"/> is true (in Setter) -or- One of values being set contains non-alpha character (in setter)</exception>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">One of values being set violates <paramref name="Len"/> and/or <paramref name="Fixed"/> constraint after being encoded (not thrown when <paramref name="Fixed"/> is true and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is false).</exception>
 <remarks><seealso cref="P:Tools.MetadataT.IptcT.Iptc.Tag(Tools.MetadataT.IptcT.DataSetIdentification)"/> for behavior details</remarks>
 <seelaso cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/>
 <version version="1.5.3">When <paramref name="Encoding"/> is null <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> is used for records 2 - 6 and 8, otherwise <see cref="P:System.Text.Encoding.ASCII"/> (equal to ISO 646 IRV) is used. (Previous behavior was use <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> whenever <paramref name="Encoding"/> is null. Also note that <see cref="P:Tools.MetadataT.IptcT.Iptc.Encoding"/> behavior is changed in 1.5.3.)</version>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies when <paramref name="Fixed"/> is false.</version>
 <version version="1.5.3"><see cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Is thrown instead of <see cref="T:System.ArgumentException"/> when lenght constraint is violated.</see></version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.StringEnum_Value(Tools.MetadataT.IptcT.DataSetIdentification,System.Type,System.Byte,System.Boolean)">
 <summary>Gets or sets value of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.StringEnum"/> type</summary>
 <param name="Key">Record or dataset number</param>
 <param name="Type">Type of enum in value</param>
 <param name="Len">Maximal or fixed lenght of string after encoding (ignored in Getter, and in setter when <paramref name="Fixed"/> is false and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is true; 0 for no limit)</param>
 <param name="Fixed"><paramref name="Len"/> determines fixed lenght instead of maximal if True (ignored in Getter)</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="P:Tools.MetadataT.IptcT.StringEnum.EnumType"/> has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or it has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> set to true and value is not member of <see cref="P:Tools.MetadataT.IptcT.StringEnum.EnumType"/> (in Setter)</exception>
 <exception cref="T:System.ArrayTypeMismatchException"><see cref="P:Tools.MetadataT.IptcT.StringEnum.EnumType"/> differs from <paramref name="Type"/> (in setter)</exception>
 <exception cref="T:System.ArgumentException">
 Error while creating generic instance - caused by wrong <paramref name="Type"/> (in Getter) -or-
 Stored value contains invalid character (non-graphic-non-space-non-ASCII) (in getter) -or-
 <paramref name="Fixed"/> is true and <paramref name="Len"/> is 0
 </exception>
 <exception cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">Value violates length constaraint after serialization (in Setter, not thrown when <paramref name="Fixed"/> is true and <see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> is false)</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <version version="1.5.3"><see cref="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints"/> applies when <paramref name="Fixed"/> is false.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.ImageType_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.ImageType"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentException">
 Stored value has length different than 2B (in Getter) -or-
 2nd byte of stored value cannot be interpreted as <see cref="T:Tools.MetadataT.IptcT.Iptc.ImageTypeContents"/> (in Getter)
 </exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.AudioType_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.ImageType"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentException">
 Stored value has length different than 2B (in Getter) -or-
 2nd byte of stored value cannot be interpreted as <see cref="T:Tools.MetadataT.IptcT.Iptc.AudioDataType"/> (in Getter) -or-
 Setting value which's serializatazion produes more or less than 2 bytes
 </exception>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.HHMMSS_Value(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets or sets value(s) of <see cref="F:Tools.MetadataT.IptcT.IptcTypes.HHMMSS"/> type</summary>
 <param name="Key">Record and dataset number</param>
 <exception cref="T:System.ArgumentException">Stored item's length differs from 6 (in Getter)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:System.TimeSpan"/> to be stored is less than <see cref="F:System.TimeSpan.Zero"/> or it's <see cref="P:System.TimeSpan.TotalDays"/> is greater than or equal to 1 (in setter)</exception>
 <exception cref="T:System.InvalidCastException">Stored item contains non-numeric character (in Getter)</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ConvertEnumList``1(System.Collections.Generic.List{System.Enum})">
 <summary>Converts <see cref="T:System.Collections.Generic.List`1"/> into <see cref="T:System.Collections.Generic.List`1"/> of any <see cref="T:System.Enum"/></summary>
 <param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
 <typeparam name="TEnum">Type of <see cref="T:System.Enum"/></typeparam>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ConvertEnumList``1(System.Collections.Generic.List{``0})">
 <summary>Converts <see cref="T:System.Collections.Generic.List`1"/> of any <see cref="T:System.Enum"/> into <see cref="T:System.Collections.Generic.List`1"/></summary>
 <param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
 <typeparam name="TEnum">Type of <see cref="T:System.Enum"/></typeparam>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ConvertNumStrList``2(System.Collections.Generic.List{``0})">
 <summary>Converts <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> to <see cref="T:System.Collections.Generic.List`1"/> of another <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> that drives from first one</summary>
 <param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
 <typeparam name="TNumStr1">Type of items in <paramref name="From"/></typeparam>
 <typeparam name="TNumStr2">Type of items in return value</typeparam>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ConvertNumStrList``2(System.Collections.Generic.List{``1})">
 <summary>Converts <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> that derives from another <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> to list of that another <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/></summary>
 <param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
 <typeparam name="TNumStr1">Type of items in return value</typeparam>
 <typeparam name="TNumStr2">Type of item in <paramref name="From"/></typeparam>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ConvertEnumList``1(System.Collections.Generic.List{Tools.MetadataT.IptcT.IptcDataTypes.StringEnum})">
 <summary>Converts <see cref="T:System.Collections.Generic.List`1"/> into <see cref="T:System.Collections.Generic.List`1"/> of any <see cref="T:System.Enum"/></summary>
 <param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
 <typeparam name="TEnum">Type of <see cref="T:System.Enum"/></typeparam>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ConvertEnumList``1(System.Collections.Generic.List{Tools.MetadataT.IptcT.IptcDataTypes.StringEnum{``0}})">
 <summary>Converts <see cref="T:System.Collections.Generic.List`1"/> of any <see cref="T:System.Enum"/> into <see cref="T:System.Collections.Generic.List`1"/></summary>
 <param name="From"><see cref="T:System.Collections.Generic.List`1"/> to be converted</param>
 <typeparam name="TEnum">Type of <see cref="T:System.Enum"/></typeparam>
</member>
<member name="P:Tools.MetadataT.IptcT.Iptc.IgnoreLenghtConstraints">
 <summary>Gets or sets value indicating wheather this instance of <see cref="T:Tools.MetadataT.IptcT.Iptc"/> allows to save limited variable-length values when value being set exceeds maximum allowed lenght of the property.</summary>
 <value>True to allow saving variable-lenght values with lenght exceeding lenght constraint; false to throw <see cref="T:Tools.MetadataT.IptcT.LengthConstraintViolationException"/>.</value>
 <remarks>It's always possible to read values violating lenght constraints.</remarks>
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.IsTextWithSpaces(System.String)">
 <summary>Indicates if given string contains only graphic characters and spaces</summary>
 <param name="Str">String to be verified</param>
 <returns>True if string contains only graphic characters and spaces, false otherwise</returns>
 <remarks>All characters with ASCII code higher than space are considered graphic</remarks>
 <version version="1.5.4">Parameter <c>Str</c> renamed to <c>str</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.IsText(System.String)">
 <summary>Indicates if given string contains only graphic characters, spaces, Crs and Lfs</summary>
 <param name="Str">String to be verified</param>
 <returns>True if string contains only graphic characters, spaces, Crs and Lfs, false otherwise</returns>
 <remarks>All characters with ASCII code higher than space are considered graphic</remarks>
 <version version="1.5.4">Parameter <c>Str</c> renamed to <c>str</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.IsGraphicCharacters(System.String)">
 <summary>Indicates if given string contains only graphic characters</summary>
 <param name="Str">String to be verified</param>
 <returns>True if string contains only graphic characters, false otherwise</returns>
 <remarks>All characters with ASCII code higher than space are considered graphic</remarks>
 <version version="1.5.4">Parameter <c>Str</c> renamed to <c>str</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.IsAlpha(System.String)">
 <summary>Indicates if given string contains only alpha characters</summary>
 <param name="Str">String to be verified</param>
 <returns>True if string contains only alpha characters, false otherwise</returns>
 <version version="1.5.4">Parameter <c>Str</c> renamed to <c>str</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetUnderlyingType(Tools.MetadataT.IptcT.IptcTypes)">
 <summary>Returns <see cref="T:System.Type"/> that is used to store values of particular <see cref="T:Tools.MetadataT.IptcT.IptcTypes">IPTC type</see></summary>
 <param name="IPTCType">IPTC type to get <see cref="T:System.Type"/> for</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="IPTCType"/> is not member of <see cref="T:Tools.MetadataT.IptcT.IptcTypes"/></exception>
 <version version="1.5.4">Parameter <c>IPTCType</c> renamed to <c>iptcType</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.GetTag(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Gets details about tag format</summary>
 <param name="Tag">tag to get details for</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Either <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.RecordNumber"/> of <paramref name="Tag"/> is unknown or <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.DatasetNumber"/> of <paramref name="Tag"/> is unknown within <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.RecordNumber"/> of <paramref name="Tag"/></exception>
 <version version="1.5.4">Parameter <c>Tag</c> renamed to <c>tag</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.IntFromBytes(System.Byte,System.Byte[])">
 <summary>Ready signed ingere from byte array</summary>
 <param name="Count">Number of bytes to read (can be 1,2,4,8)</param>
 <param name="Bytes">Byte array to read from</param>
 <returns>Signed integer stored in given byte array</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Count"/> is not 1,2,4 or 8</exception>
 <exception cref="T:System.IO.EndOfStreamException">There are not enough bytes in <paramref name="Bytes"/></exception>
 <version version="1.5.4">Parameter names changed: <c>Count</c> to <c>count</c>, <c>Bytes</c> to <c>bytes</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.UIntFromBytes(System.Byte,System.Byte[])">
 <summary>Ready unsigned ingere from byte array</summary>
 <param name="Count">Number of bytes to read (can be 1,2,4,8)</param>
 <param name="Bytes">Byte array to read from</param>
 <returns>Unsigned integer stored in given byte array</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Count"/> is not 1,2,4 or 8</exception>
 <exception cref="T:System.IO.EndOfStreamException">There are not enough bytes in <paramref name="Bytes"/></exception>
 <version version="1.5.4">Parameter names changed: <c>Count</c> to <c>count</c>, <c>Bytes</c> to <c>bytes</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.NumCharFromBytes(System.Byte[])">
 <summary>Converts array of bytes that contains string to number</summary>
 <param name="Bytes">Bytest to be converted</param>
 <returns>Number that can be converted at least to <see cref="T:System.Int64"/> or <see cref="T:System.UInt64"/></returns>
 <exception cref="T:System.InvalidCastException">Cannot convert string stored in <paramref name="Bytes"/> to <see cref="T:System.Decimal"/></exception>
 <version version="1.5.4">Name of parameter <c>Bytes</c> changed to <c>bytes</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ToBytes(System.Byte,System.Decimal,System.Boolean)">
 <summary>Converts number to array of bytes in which the number is stored as ASCII string</summary>
 <param name="Count">Number of bytes to get (0 means no limit)</param>
 <param name="Number">Number to be stored</param>
 <returns>Array of bytes that contains <paramref name="Count"/> bytes consisting of string representation of <paramref name="Number"/></returns>
 <param name="Fixed"><paramref name="Count"/> represents fixed lenght of returned byte array (True) or maximal variable lenght (False)</param>
 <exception cref="T:System.ArgumentException">
 <paramref name="Count"/> is 0 and <paramref name="Fixed"/> is True -or-
 <paramref name="Count"/> is not 0 and number cannot be stored in number of bytes specified in <paramref name="Count"/>
 </exception>
 <version version="1.5.4">Parameter names changed to camelCase</version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ToBytes(System.Byte,System.Int64)">
 <summary>Converts signed integer to array of bytes</summary>
 <param name="Count">Length of integral value and returned array (can be 1,2,4,8)</param>
 <param name="Int">Value to be converted</param>
 <returns>Array of bytes representing <paramref name="Int"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="Count"/> is not 1,2,4 or 8</exception>
 <exception cref="T:System.Diagnostics.OverflowAction"><paramref name="Int"/>'s value does not fit into integral value of <paramref name="Count"/> bytes</exception>
 <version version="1.5.4">Fixed bug: Method didnt't worked property when <paramref name="Count"/> was 1 (it always stored 0)</version>
 <version version="1.5.4">Parameter names changed: <c>Count</c> to <c>count</c>, <c>Int</c> to <c>int</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.Iptc.ToBytes(System.Byte,System.UInt64)">
 <summary>Converts unsigned integer to array of bytes</summary>
 <param name="Count">Length of integral value and returned array (can be 1,2,4,8)</param>
 <param name="Int">Value to be converted</param>
 <returns>Array of bytes representing <paramref name="Int"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="Count"/> is not 1,2,4 or 8</exception>
 <exception cref="T:System.Diagnostics.OverflowAction"><paramref name="Int"/>'s value does not fit into integral value of <paramref name="Count"/> bytes</exception>
 <version version="1.5.4">Fixed bug: Method didnt't worked property when <paramref name="Count"/> was 1 (it always stored 0)</version>
 <version version="1.5.4">Parameter names changed: <c>Count</c> to <c>count</c>, <c>Int</c> to <c>int</c></version>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcException">
 <summary>Represents common base for <see cref="T:Tools.MetadataT.IptcT.IptcGetException"/> and <see cref="T:Tools.MetadataT.IptcT.IptcSetException"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcException.#ctor(System.Exception)">
 <summary>CTor</summary>
 <param name="InnerException">Inner exception</param>
 <version version="1.5.4">Parameter <c>InnerException</c> renamed to <c>innerException</c></version>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcGetException">
 <summary>Thrown when an error occurs when geting IPTC tag value</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcGetException.#ctor(System.Exception)">
 <summary>CTor</summary>
 <param name="InnerException">Inner exception</param>
 <version version="1.5.4">Parameter <c>InnerException</c> renamed to <c>innerException</c></version>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcSetException">
 <summary>Thrown when an error occurs when setting IPTC tag value</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcSetException.#ctor(System.Exception)">
 <summary>CTor</summary>
 <param name="InnerException">Inner exception</param>
 <version version="1.5.4">Parameter <c>InnerException</c> renamed to <c>innerException</c></version>
</member>
<member name="T:Tools.MetadataT.IptcT.DataSetIdentification">
 <summary>Identifies IPTC tag (DataSet). Used for indexing.</summary>
 <completionlist cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.#ctor(System.String)">
 <summary>CTor form string representation</summary>
 <param name="RecordAndDataSet">String representation in format "RecordNumber:DatasetNumber"</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="RecordAndDataSet"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="RecordAndDataSet"/> does not contain 2 :-separated parts -or- any part of <paramref name="RecordAndDataSet"/> is not in correct format for <see cref="M:System.Int32.Parse(System.String)"/> in invariant culture.</exception>
 <exception cref="T:System.OverflowException">Any part of <paramref name="RecordAndDataSet"/> does not fit to <see cref="T:System.Int32"/> data type or to <see cref="T:System.Byte"/> data type.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">RecordNumber-part is greater than 9</exception> 
 <seelaso cref="M:Tools.MetadataT.IptcT.DataSetIdentification.Parse(System.String)"/>
 <version version="1.5.2">Constructor introduced</version>
 <version version="1.5.4">Parameter <c>RecordAndDataSet</c> renamed to <c>recordAndDataSet</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.Parse(System.String)">
 <summary>Parses <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> from string representation</summary>
 <param name="Value">String representation in format "RecordNumber:DatasetNumber"</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Value"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="Value"/> does not contain 2 :-separated parts -or- any part of <paramref name="Value"/> is not in correct format for <see cref="M:System.Int32.Parse(System.String)"/> in invariant culture.</exception>
 <exception cref="T:System.OverflowException">Any part of <paramref name="Value"/> does not fit to <see cref="T:System.Int32"/> data type or to <see cref="T:System.Byte"/> data type.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">RecordNumber-part is greater than 9</exception> 
 <seelaso cref="M:Tools.MetadataT.IptcT.DataSetIdentification.TryParse(System.String,Tools.MetadataT.IptcT.DataSetIdentification@)"/>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter <c>Value</c> renamed to <c>value</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.TryParse(System.String,Tools.MetadataT.IptcT.DataSetIdentification@)">
 <summary>Attempts to parse <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> from string representation</summary>
 <param name="Value">String representation in format "RecordNumber:DatasetNumber"</param>
 <param name="ParsedValue">When successfull contains parsed value when function returns</param>
 <returns>True when successfull; false when <paramref name="Value"/> is invalid.</returns>
 <seelaso cref="M:Tools.MetadataT.IptcT.DataSetIdentification.Parse(System.String)"/>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.4">Parameter names changed: <c>Value</c> to <c>value</c>, <c>ParsedValue</c> to <c>parsedValue</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.ToString">
 <summary>Gets string representation of current <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/></summary>
 <returns>String in format "RecordNumber:DatasetNumber" in invariant culture</returns>
 <version version="1.5.2">Override introduced</version>
</member>
<member name="F:Tools.MetadataT.IptcT.DataSetIdentification._RecordNumber">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.RecordNumber"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.DataSetIdentification._DataSetNumber">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.DatasetNumber"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.DataSetIdentification._PropertyName">
 <summary>Contains balue of the <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.PropertyName"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.DataSetIdentification._DisplayName">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.DisplayName"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.RecordNumber">
 <summary>Record (tag group) number</summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is greater than 9</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.DatasetNumber">
 <summary>DataSet (tag) number</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.PropertyName">
 <summary>Gets or sets name of property of the <see cref="T:Tools.MetadataT.IptcT.Iptc"/> class this dataset is accessible via. Null if this is not known dataset.</summary>
 <returns>Name of property of the <see cref="T:Tools.MetadataT.IptcT.Iptc"/> class this data set is accessible via. Null if this is not standard dataset.</returns>
 <value>Name of property of the <see cref="T:Tools.MetadataT.IptcT.Iptc"/> class this dataset is accessible via. Such property must exist.</value>
 <seelaso cref="P:Tools.MetadataT.IptcT.IptcTag.Name"/>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.DisplayName">
 <summary>Gets or localized display name of dataset.</summary>
 <returns>Localized display name of data set. Null if data set has no name.</returns>
 <value>Localized display name of data set. Null if data set has no name.</value>
 <seelaso cref="P:Tools.MetadataT.IptcT.IptcTag.HumanName"/>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.#ctor(Tools.DataStructuresT.GenericT.IPair{Tools.MetadataT.IptcT.RecordNumbers,System.Byte})">
 <summary>Copy CTor from <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/>[<see cref="T:Tools.MetadataT.IptcT.RecordNumbers"/>, <see cref="T:System.Byte"/>]</summary>
 <param name="From">Instance to be cloned</param>
 <version version="1.5.4">Parameter <c>From</c> renamed to <c>from</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.#ctor(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Copy CTor</summary>
 <param name="From">Instance to be cloned</param>
 <version version="1.5.4">Parameter <c>From</c> renamed to <c>from</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.#ctor(Tools.MetadataT.IptcT.RecordNumbers,System.Byte,System.String,System.String)">
 <summary>CTor</summary>
 <param name="RecordNumber">Number of record (tag group)</param>
 <param name="DataSetNumber">Number of dataset (tag)</param>
 <param name="DisplayName">Localized display name of data set property (null if data set has no name)</param>
 <param name="PropertyName">Name of property of the <see cref="T:Tools.MetadataT.IptcT.Iptc"/> class this data set is accessible via (null if this is not known data set accessible via property of the <see cref="T:Tools.MetadataT.IptcT.Iptc"/> class)</param>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.Swap">
 <summary>Swaps values <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value2"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.ICloneable__IPair__RecordNumbers_Byte_____Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.op_Equality(Tools.MetadataT.IptcT.DataSetIdentification,Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Compares two <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/>s</summary>
 <param name="a">A <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> to be compared</param>
 <param name="b">A <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> to be compared</param>
 <returns>True when <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.DatasetNumber"/> and <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.RecordNumber"/> equals</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.op_Inequality(Tools.MetadataT.IptcT.DataSetIdentification,Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Compares two <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/>s</summary>
 <param name="a">A <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> to be compared</param>
 <param name="b">A <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> to be compared</param>
 <returns>False when <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.DatasetNumber"/> and <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.RecordNumber"/> equals</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
 <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
 <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false</returns>
 <remarks>Obsolete: Use type safe overload instead</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.Equals(Tools.DataStructuresT.GenericT.IPair{Tools.MetadataT.IptcT.RecordNumbers,System.Byte})">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <param name="other">An object to compare with this object.</param>
 <returns>True if <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.DatasetNumber"/> and <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.RecordNumber"/> of this instance and <paramref name="other"/> equals</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.GetHashCode">
 <summary>Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for use in hashing algorithms and data structures like a hash table.</summary>
 <returns>A hash code for the current System.Object</returns>
</member>
<member name="F:Tools.MetadataT.IptcT.DataSetIdentification._KnownDataSetsInternal">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.KnownDataSetsInternal"/> property (null when property has not been initialized yet)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.DataSetIdentification.KnownDataSetsInternalSyncLock">
 <summary>Synchronisation object for initializaion rountine of the <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.KnownDataSetsInternal"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.KnownDataSetsInternal">
 <summary>Contains cached value of the <see cref="M:Tools.MetadataT.IptcT.DataSetIdentification.KnownDataSets(System.Boolean)"/> (with hidden ones)</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.GetKnownDataSet(Tools.MetadataT.IptcT.RecordNumbers,System.Byte)">
 <summary>Gets known data set from record number and tag number</summary>
 <param name="RecordNumber">Recor number</param>
 <param name="Tag">Tag number</param>
 <remarks>If dataset with given <paramref name="RecordNumber"/> and <paramref name="Tag"/> exists in <see cref="M:Tools.MetadataT.IptcT.DataSetIdentification.KnownDataSets(System.Boolean)"/> returns item from there, otherwise returns newly created instance of <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> initialized with <paramref name="RecordNumber"/> nad <paramref name="Tag"/> (with null <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.DisplayName"/> and <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.PropertyName"/>).</remarks>
 <version version="1.5.4">Parameters renamed: <c>RecordNumber</c> to <c>recordNumber</c>, <c>Tag</c> to <c>tag</c></version>
</member>
<member name="T:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch">
 <summary>Gives acctess to <see cref="T:System.Predicate`1"/> that matches <see cref="T:System.Collections.Generic.KeyValuePair`2"/> which's <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> is same as given <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.Match">
 <summary><see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> to compare <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> with</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.#ctor(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>CTor</summary>
 <param name="Match"><see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/> to compare <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> with</param>
 <version version="1.5.4">Parameter <c>Match</c> renamed to <c>match</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.Predicate``1(System.Collections.Generic.KeyValuePair{Tools.MetadataT.IptcT.DataSetIdentification,``0})">
 <summary>Function which's delegate can be passed for example to <see cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/></summary>
 <param name="Pair">Item to match with <see cref="F:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.Match"/></param>
 <typeparam name="T">Type of value stored in <see cref="T:System.Collections.Generic.KeyValuePair`2"/></typeparam>
 <version version="1.5.4">Parameter <c>Pair</c> renamed to <c>pair</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.GetPredicate``1(Tools.MetadataT.IptcT.DataSetIdentification)">
 <summary>Returns delegate of <see cref="M:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.Predicate``1(System.Collections.Generic.KeyValuePair{Tools.MetadataT.IptcT.DataSetIdentification,``0})"/> of newly created instance of <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch"/></summary>
 <param name="Match">Key to compare with</param>
 <returns>Delegate of <see cref="M:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.Predicate``1(System.Collections.Generic.KeyValuePair{Tools.MetadataT.IptcT.DataSetIdentification,``0})"/></returns>
 <typeparam name="T">Type of value of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> that can be passed to returned <see cref="T:System.Predicate`1"/></typeparam>
 <version version="1.5.4">Parameter <c>Match</c> renamed to <c>match</c></version>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.GetIndices``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Tools.MetadataT.IptcT.DataSetIdentification,``0}})">
 <summary>Gets indices of items in given <see cref="T:System.Collections.Generic.IEnumerable`1"/> which's <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> matches <see cref="F:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.Match"/></summary>
 <param name="List">List to search within</param>
 <returns>List of indices of items which's <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/> matches <see cref="F:Tools.MetadataT.IptcT.DataSetIdentification.PairMatch.Match"/></returns>
 <typeparam name="T">Type of value of <see cref="T:System.Collections.Generic.KeyValuePair`2"/></typeparam>
 <version version="1.5.4">Parameter <c>List</c> renamed to <c>list</c></version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ModelVersion">
 <summary>A number identifying the version of the Information Interchange Model, Part I, utilised by the provider.</summary>
 <remarks>Version numbers are assigned by IPTC and NAA. The version number of this record is four (4).</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.Destination">
 <summary>This DataSet is to accommodate some providers who require routing information above the appropriate OSI layers.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.FileFormat">
 <summary>A number representing the file format.</summary>
 <remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it (see Appendix A). The information is used to route the data to the appropriate system and to allow the receiving system to perform the appropriate actions thereto.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.FileFormatVersion">
 <summary>A binary number representing the particular version of the <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.FileFormat"/></summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ServiceIdentifier">
 <summary>Identifies the provider and product.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.EnvelopeNumber">
 <summary>The characters form a number that will be unique for the date specified in <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.DateSent"/> and for the Service Identifier specified in <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.ServiceIdentifier"/>.</summary>
 <remarks>If identical envelope numbers appear with the same date and with the same Service Identifier, records 2-9 must be unchanged from the original. This is not intended to be a sequential serial number reception check.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ProductID">
 <summary>Allows a provider to identify subsets of its overall service.</summary>
 <remarks>Used to provide receiving organisation data on which to select, route, or otherwise handle data.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.EnvelopePriority">
 <summary>Specifies the envelope handling priority and not the editorial urgency (see 2:10, <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.Urgency"/>).</summary>
 <remarks>'1' indicates the most urgent, '5' the normal urgency, and '8' the least urgent copy. The numeral '9' indicates a User Defined Priority. The numeral '0' is reserved for future use.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.DateSent">
 <summary>Indicates year, month and day the service sent the material.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.TimeSent">
 <summary>This is the time the service sent the material.</summary>
 <remarks>This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.CodedCharacterSet">
 <summary>Array of bytes consisting of one or more control functions used for the announcement, invocation or designation of coded character sets. The control functions follow the ISO 2022 standard and may consist of the escape control character and one or more graphic characters. For more details see Appendix C, the IPTC-NAA Code Library.</summary>
 <remarks>The control functions apply to character oriented DataSets in records 2-6. They also apply to record 8, unless the objectdata explicitly, or the File Format implicitly, defines character sets otherwise. If this DataSet contains the designation function for Unicode in UTF-8 then no other announcement, designation or invocation functions are permitted in this DataSet or in records 2-6. For all other character sets, one or more escape sequences are used: for the announcement of the code extension facilities used in the data which follows, for the initial designation of the G0, G1, G2 and G3 graphic character sets and for the initial invocation of the graphic set (7 bits) or the lefthand and the right-hand graphic set (8 bits) and for the initial invocation of the C0 (7 bits) or of the C0 and the C1 control character sets (8 bits). The announcement of the code extension facilities, if transmitted, must appear in this data set. Designation and invocation of graphic and control function sets (shifting) may be transmitted anywhere where the escape and the other necessary control characters are permitted. However, it is recommended to transmit in this DataSet an initial designation and invocation, i.e. to define all designations and the shift status currently in use by transmitting the appropriate escape sequences and locking-shift functions. If is omitted, the default for records 2-6 and 8 is ISO 646 IRV (7 bits) or ISO 4873 DV (8 bits). Record 1 shall always use ISO 646 IRV or ISO 4873 DV respectively. ECMA as the ISO Registration Authority for escape sequences maintains the International Register of Coded Character Sets to be used with escape sequences, a register of Codes and allocated standardised escape sequences, which are recognised by IPTC-NAA without further approval procedure. The registration procedure is defined in ISO 2375. IPTC-NAA maintain a Register of Codes and allocated private escape sequences, which are shown in paragraph 1.2. IPTC may, as Sponsoring Authority, submit such private sequence Codes for approval as standardised sequence Codes. The registers consist of a Graphic repertoire, a Control function repertoire and a Repertoire of other coding systems (e.g. complete Codes). Together they represent the IPTC-NAA Code Library. Graphic Repertoire94-character sets (intermediate character 2/8 to 2/11)002ISO 646 IRV 4/0004ISO 646 British Version 4/1006ISO 646 USA Version (ASCII) 4/2008-1NATS Primary Set for Finland and Sweden 4/3008-2NATS Secondary Set for Finland and Sweden 4/4009-1NATS Primary Set for Denmark and Norway 4/5009-2NATS Secondary Set for Denmark and Norway 4/6010ISO 646 Swedish Version (SEN 850200) 4/7015ISO 646 Italian Version (ECMA) 5/9016ISO 646 Portuguese Version (ECMA Olivetti) 4/12017ISO 646 Spanish Version (ECMA Olivetti) 5/10018ISO 646 Greek Version (ECMA) 5/11021ISO 646 German Version (DIN 66003) 4/11037Basic Cyrillic Character Set (ISO 5427) 4/14060ISO 646 Norwegian Version (NS 4551) 6/0069ISO 646 French Version (NF Z 62010-1982) 6/6084ISO 646 Portuguese Version (ECMA IBM) 6/7085ISO 646 Spanish Version (ECMA IBM) 6/8086ISO 646 Hungarian Version (HS 7795/3) 6/9121Alternate Primary Graphic Set No. 1 (Canada CSA Z 243.4-1985) 7/7122Alternate Primary Graphic Set No. 2 (Canada CSA Z 243.4-1985) 7/896-character sets (intermediate character 2/12 to 2/15):100Right-hand Part of Latin Alphabet No. 1 (ISO 8859-1) 4/1101Right-hand Part of Latin Alphabet No. 2 (ISO 8859-2) 4/2109Right-hand Part of Latin Alphabet No. 3 (ISO 8859-3) 4/3110Right-hand Part of Latin Alphabet No. 4 (ISO 8859-4) 4/4111Right-hand Part of Latin/Cyrillic Alphabet (ISO 8859-5) 4/0125Right-hand Part of Latin/Greek Alphabet (ISO 8859-7) 4/6127Right-hand Part of Latin/Arabic Alphabet (ISO 8859-6) 4/7138Right-hand Part of Latin/Hebrew Alphabet (ISO 8859-8) 4/8139Right-hand Part of Czechoslovak Standard (ČSN 369103) 4/9Multiple-Byte Graphic Character Sets (1st intermediate character 2/4, 2nd intermediate character 2/8 to 2/11)87Japanese characters (JIS X 0208-1983) 4/2Control Function RepertoireC0 Control Function Sets (intermediate character 2/1)001C0 Set of ISO 646 4/0026IPTC C0 Set for newspaper text transmission 4/3036C0 Set of ISO 646 with SS2 instead of IS4 4/4104Minimum C0 Set for ISO 4873 4/7 C1 Control Function Sets (intermediate character 2/2)077C1 Control Set of ISO 6429 4/3105Minimum C1 Set for ISO 4873 4/7 Single Additional Control Functions062Locking-Shift Two (LS2), ISO 2022 6/14063Locking-Shift Three (LS3), ISO 2022 6/15064Locking-Shift Three Right (LS3R), ISO 2022 7/12065Locking-Shift Two Right (LS2R), ISO 2022 7/13066Locking-Shift One Right (LS1R), ISO 2022 7/14Repertoire of Other Coding Systems (e.g. complete Codes, intermediate character 2/5 )196UCS Transformation Format (UTF-8) 4/7 What's mentioned above is from definition of IPTC standard. This class currently does not support all encodings that can be advertised here neither it supports changes of encodings using ISO 2022 mechanism anywhere in text. Only certain encodings are supported - see the property for details.</remarks>
 <version version="1.5.3">Added limited support for UTF-8 based encoding autodetection based on value of this dataset.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.UNO">
 <summary>UNO Unique Name of Object, providing eternal, globally unique identification for objects as specified in the IIM, independent of provider and for any media form.</summary>
 <remarks>The provider must ensure the UNO is unique. Objects with the same UNO are identical.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ARMIdentifier">
 <summary>The DataSet identifies the Abstract Relationship Method (ARM) which is described in a document registered by the originator of the ARM with the IPTC and NAA.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ARMVersion">
 <summary>A number representing the particular version of the ARM specified in DataSet <see cref='P:Tools.MetadataT.IptcT.DataSetIdentification.ARMIdentifier'/>.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.RecordVersion">
 <summary>A number identifying the version of the Information Interchange Model, Part II (Record 2:xx), utilised by the provider.</summary>
 <remarks>Version numbers are assigned by IPTC and NAA. The version number of this record is four (4). Same tag called Record Version" also exists in record no. 3.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ObjectTypeReference">
 <summary>The Object Type is used to distinguish between different types of objects within the IIM.</summary>
 <remarks>The first part is a number representing a language independent international reference to an Object Type followed by a colon separator. The second part, if used, is a text representation of the Object Type Number (maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix G, or in the language of the service as indicated in DataSet 2:135 (<see cref='P:Tools.MetadataT.IptcT.DataSetIdentification.LanguageIdentifier'/>)</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ObjectAttributeReference">
 <summary>The Object Attribute defines the nature of the object independent of the Subject.</summary>
 <remarks>The first part is a number representing a language independent international reference to an Object Attribute followed by a colon separator. The second part, if used, is a text representation of the Object Attribute Number ( maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix G, or in the language of the service as indicated in DataSet 2:135 (<see cref='P:Tools.MetadataT.IptcT.DataSetIdentification.LanguageIdentifier'/>)</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ObjectName">
 <summary>Used as a shorthand reference for the object. Changes to existing data, such as updated stories or new crops on photos, should be identified in Edit Status.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.EditStatus">
 <summary>Status of the objectdata, according to the practice of the provider.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.EditorialUpdate">
 <summary>Indicates the type of update that this object provides to a previous object. The link to the previous object is made using the ARM (DataSets 1:120 and 1:122 (<see cref='P:Tools.MetadataT.IptcT.Iptc.ARM'/>)), according to the practices of the provider.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.Urgency">
 <summary>Specifies the editorial urgency of content and not necessarily the envelope handling priority (see 1:60, <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.EnvelopePriority"/>).</summary>
 <remarks>The '1' is most urgent, '5' normal and '8' denotes the least-urgent copy. The numerals '9' and '0' are reserved for future use.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.SubjectReference">
 <summary>The Subject Reference is a structured definition of the subject matter.</summary>
 <remarks>It must contain an IPR (default value is "IPTC"), an 8 digit Subject Reference Number and an optional Subject Name, Subject Matter Name and Subject Detail Name. Each part of the Subject reference is separated by a colon (:). The Subject Reference Number contains three parts, a 2 digit Subject Number, a 3 digit Subject Matter Number and a 3 digit Subject Detail Number thus providing unique identification of the object's subject.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.Category">
 <summary>Identifies the subject of the objectdata in the opinion of the provider.</summary>
 <remarks>A list of categories will be maintained by a regional registry, where available, otherwise by the provider.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.SupplementalCategory">
 <summary>Supplemental categories further refine the subject of an objectdata.</summary>
 <remarks>Only a single supplemental category may be contained in each DataSet. A supplemental category may include any of the recognised categories as used in . Otherwise, selection of supplemental categories are left to the provider.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.FixtureIdentifier">
 <summary>Identifies objectdata that recurs often and predictably.</summary>
 <remarks>Enables users to immediately find or recall such an object.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.Keywords">
 <summary>Used to indicate specific information retrieval words.</summary>
 <remarks>Each keyword uses a single Keywords DataSet. Multiple keywords use multiple Keywords DataSets. It is expected that a provider of various types of data that are related in subject matter uses the same keyword, enabling the receiving system or subsystems to search across all types of data for related material.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ContentLocationCode">
 <summary>Indicates the code of a country/geographical location referenced by the content of the object.</summary>
 <remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a country, e.g. ships at sea, space, IPTC will assign an appropriate threecharacter code under the provisions of ISO3166 to avoid conflicts. (see Appendix D) .</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ContentLocationName">
 <summary>Provides a full, publishable name of a country/geographical location referenced by the content of the object, according to guidelines of the provider.</summary>
 <remarks>If used in the same object with DataSet , must immediately follow and correspond to it.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ReleaseDate">
 <summary>The earliest date the provider intends the object to be used.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ReleaseTime">
 <summary>The earliest time the provider intends the object to be used.</summary>
 <remarks>This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ExpirationDate">
 <summary>The latest date the provider or owner intends the objectdata to be used.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ExpirationTime">
 <summary>The latest time the provider or owner intends the objectdata to be used.</summary>
 <remarks>This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.SpecialInstructions">
 <summary>Other editorial instructions concerning the use of the objectdata, such as embargoes and warnings.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ActionAdvised">
 <summary>Indicates the type of action that this object provides to a previous object.</summary>
 <remarks>The link to the previous object is made using the (DataSets 1:120 () and 1:122 ()), according to the practices of the provider.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ReferenceService">
 <summary>Identifies the Service Identifier of a prior envelope to which the current object refers.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ReferenceDate">
 <summary>Identifies the date of a prior envelope to which the current object refers.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ReferenceNumber">
 <summary>Identifies the Envelope Number of a prior envelope to which the current object refers.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.DateCreated">
 <summary>The date the intellectual content of the objectdata was created rather than the date of the creation of the physical representation.</summary>
 <remarks>Thus a photo taken during the American Civil War would carry a creation date during that epoch (1861-1865) rather than the date the photo was digitised for archiving.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.TimeCreated">
 <summary>The time the intellectual content of the objectdata current source material was created rather than the creation of the physical representation.</summary>
 <remarks>Where the time cannot be precisely determined, the closest approximation should be used. This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.DigitalCreationDate">
 <summary>The date the digital representation of the objectdata was created.</summary>
 <remarks>Thus a photo taken during the American Civil War would carry a Digital Creation Date within the past several years rather than the date where the image was captured on film, glass plate or other substrate during that epoch (1861-1865).</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.DigitalCreationTime">
 <summary>The time the digital representation of the objectdata was created.</summary>
 <remarks>This property should be stored in HHMMSS+HHMM format. When IPTC value was originally stored in HHMMSS format it can be red as well (but it's IPTC IIM standard violation).</remarks>
 <version version="1.5.3">Values in HHMMSS format can be read.</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.OriginatingProgram">
 <summary>Identifies the type of program used to originate the objectdata.</summary>
 <remarks>Note: This DataSet to form an advisory to the user and are not "computer" fields. Programmers should not expect to find computer-readable information in this DataSet.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ProgramVersion">
 <summary>Identifies the type of program used to originate the objectdata.</summary>
 <remarks>Note: This DataSet to form an advisory to the user and are not "computer" fields. Programmers should not expect to find computer-readable information in this DataSet.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ObjectCycle">
 <summary>Virtually only used in North America.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ByLine">
 <summary>Contains name of the creator of the objectdata, e.g. writer, photographer or graphic artist.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ByLineTitle">
 <summary>A by-line title is the title of the creator or creators of an objectdata. Where used, a by-line title should follow the by-line it modifies.</summary>
 <remarks>Examples: "Staff Photographer", "Corresponsal", "Envoyé Spécial"</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.City">
 <summary>Identifies city of objectdata origin according to guidelines established by the provider.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.SubLocation">
 <summary>Identifies the location within a city from which the objectdata originates, according to guidelines established by the provider.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ProvinceState">
 <summary>Identifies Province/State of origin according to guidelines established by the provider.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.CountryPrimaryLocationCode">
 <summary>Indicates the code of the country/primary location where the intellectual property of the objectdata was created, e.g. a photo was taken, an event occurred.</summary>
 <remarks>Where ISO has established an appropriate country code under ISO 3166, that code will be used. When ISO3166 does not adequately provide for identification of a location or a new country, e.g. ships at sea, space, IPTC will assign an appropriate three-character code under the provisions of ISO3166 to avoid conflicts. (see Appendix D)</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.CountryPrimaryLocationName">
 <summary>Provides full, publishable, name of the country/primary location where the intellectual property of the objectdata was created, according to guidelines of the provider.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.OriginalTransmissionReference">
 <summary>A code representing the location of original transmission according to practices of the provider.</summary>
 <remarks>Examples: BER-5, PAR-12-11-01</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.Headline">
 <summary>A publishable entry providing a synopsis of the contents of the objectdata.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.Credit">
 <summary>Identifies the provider of the objectdata, not necessarily the owner/creator.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.Source">
 <summary>Identifies the original owner of the intellectual content of the objectdata.</summary>
 <remarks>This could be an agency, a member of an agency or an individual.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.CopyrightNotice">
 <summary>Contains any necessary copyright notice.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.Contact">
 <summary>Identifies the person or organisation which can provide further background information on the objectdata.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.CaptionAbstract">
 <summary>A textual description of the objectdata, particularly used where the object is not text.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.WriterEditor">
 <summary>Identification of the name of the person involved in the writing, editing or correcting the objectdata or caption/abstract.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.RasterizedeCaption">
 <summary>Image width 460 pixels and image height 128 pixels. Scanning direction bottom to top, left to right.</summary>
 <remarks>Contains the rasterized objectdata description and is used where characters that have not been coded are required for the caption.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ImageType">
 <summary>Image Type</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ImageOrientation">
 <summary>Indicates the layout of the image area.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.LanguageIdentifier">
 <summary>Describes the major national language of the object, according to the 2-letter codes of ISO 639:1988.</summary>
 <remarks>Does not define or imply any coded character set, but is used for internal routing, e.g. to various editorial desks. Implementation note: Programmers should provide for three octets for Language Identifier because the ISO is expected to provide for 3-letter codes in the future.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.AudioType">
 <summary>Type of audio in objectdata</summary>
 <remarks>Note: When '0' or 'T' is used, the only authorised combination is "0T". This is the mechanism for sending a caption either to supplement an audio cut sent previously without a caption or to correct a previously sent caption.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.AudioSamplingRate">
 <summary>Sampling rate, representing the sampling rate in hertz (Hz).</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.AudioSamplingResolution">
 <summary>The number of bits in each audio sample.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.AudioDuration">
 <summary>The running time of an audio objectdata when played back at the speed at which it was recorded.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.AudioOutcue">
 <summary>Identifies the content of the end of an audio objectdata, according to guidelines established by the provider.</summary>
 <remarks>The outcue generally consists of the final words spoken within an audio objectdata or the final sounds heard.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ObjectDataPreviewFileFormat">
 <summary>The file format of the ObjectData Preview.</summary>
 <remarks>The file format must be registered with IPTC or NAA with a unique number assigned to it.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ObjectDataPreviewFileFormatVersion">
 <summary>The particular version of the ObjectData Preview File Format specified in <see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.ObjectDataPreviewFileFormat"/></summary>
 <remarks>The File Format Version is taken from the list included in Appendix A</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ObjectDataPreviewData">
 <summary>Maximum size of 256000 octets consisting of binary data.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.RecordVersion3">
 <summary>A binary number representing the version of the Digital Newsphoto Parameter Record utilised by the provider.</summary>
 <remarks>Version numbers are assigned by IPTC and NAA. The version of this record is four (4). Same tag called "Record Version" also exists in record no. 2.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.PictureNumber">
 <summary>The picture number provides a universally unique reference to an image.</summary>
 <remarks>For example, colour images, when split with colour components into multiple objects, i.e. envelopes, would carry the same Picture Number.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.PixelsPerLine">
 <summary>A number representing the number of pixels in a scan line for the component with the highest resolution.</summary>
 <remarks>Not valid when DataSet 3:60 () octet zero (0) is 0 (zero).NCPS values are 1024 or 2048.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.NumberOfLines">
 <summary>A number representing the number of scan lines comprising the image for the component with the highest resolution.</summary>
 <remarks>Not valid when DataSet 3:60 () octet zero (0) is 0 (zero).NCPS range is 1 to 2048.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.PixelSizeInScanningDirection">
 <summary>A number indicating the number of pixels per unit length in the scanning direction.</summary>
 <remarks>Not valid when DataSet 3:60 () octet zero (0) is 0 (zero). NCPS value is 1.Pixel Size is a relative size expressed as the ratio of 3:40 to 3:50 (3:40/3:50).</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.PixelSizePerpendicularToScanningDirection">
 <summary>A number indicating the number of pixels per unit length perpendicular to the scanning direction.</summary>
 <remarks>Not valid when DataSet 3:60 () octet zero (0) is 0 (zero). NCPS value is 1.Pixel Size is a relative size expressed as the ratio of 3:40 to 3:50 (3:40/3:50).</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.SupplementType">
 <summary>A number indicating the image content.</summary>
 <remarks>Mandatory when the numeric character in DataSet 2:130 () is ‘9’ ()</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ColourRepresentation">
 <summary>Indicates colour representation</summary>
 <remarks>The special interleaving structures refer to defined methods given in Appendix G according to the value in the sampling structure DataSet 3:90. Allowed combinations are: 0,01,03,0 - 4,0 (In a single-frame colour image, a colour is described with a single sample per pixel.)3,1 - 3,2 - 3,3 - 3,4 - 3,54,1 - 4,2 - 4,3 - 4,4 - 4,5NCPS values are 1,0 , 3,1 or 3,5.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.InterchangeColourSpace">
 <summary>A value indicating the colour space in which the pixel values are expressed for each component in the image.</summary>
 <remarks>Mandatory if DataSet 3:60 octet zero (0) has a value greater than one, i.e. a multi-component image. Not valid when DataSet 3:60 octet zero (0) is 0 (zero). NCPS values are 0, 4 or 7 (, or ).</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ColourSequence">
 <summary>Each of 1 to four octets contains a binary number that relates to the colour component using the identification number assigned to it in the appendix for each colour space.</summary>
 <remarks>The sequence specifies the sequence of the components as they appear in the objectdataFor frame sequential components, only one octet is set to identify the current colour component in the objectdata.Mandatory if DataSet 3:60 octet zero (0) has a value greater than one, i.e. a multi-component image AND the value of octet one (1) is 0, 1, 2, 3, or 4, i.e. single frame, frame sequential, line sequential or pixel sequential. Not valid when DataSet 3:60 octet zero (0) is 0 (zero).Allowed values are: 0 - 1 - 2 - 3 - 4; 0 - may be used for “monochrome” or “no image” representations. Other values are reserved.NCPS values are 0,1,2,3 or 123.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.IccInputColourProfile">
 <summary>Specifies the International Color Consortium profile for the scanning/source device used to generate the digital image files.</summary>
 <remarks>Valid when DataSet 3:64 has values 1,2,4,5 or 8.This profile can be used to translate the image colour information from the input device colour space into another device's native colour space. The ICC profile is specified in ISO/TC 130/WG2N562.Maximul alloved lenght of this field according to IPCT IIM standard is 512K. However current implementation does not allow such big fields.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ColourCalibrationMatrixTable">
 <summary>This DataSet is no longer required as its contents have been rendered obsolete by the introduction of DataSet P3:66 (ICC Input Colour Profile).</summary>
 <remarks>This DataSet will be removed from the next Version of this Standard.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.LookupTable">
 <summary>Consists of one, three or four one-dimensional lookup tables (LUT).</summary>
 <remarks>The LUT relates to the image data in the colour space defined in DataSet 3:64 and specifies the correction to apply to the pixel values before display or printing of the image. Not applicable if the colour space requires converting before display or printing. Maximul alloved lenght of this field according to IPCT IIM standard is 131072. However current implementation does not allow such big fields.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.NumberOfIndexEntries">
 <summary>A binary number representing the number of index entries in the DataSet 3:85 (<see cref="P:Tools.MetadataT.IptcT.DataSetIdentification.ColourPalette"/>).</summary>
 <remarks>Mandatory where DataSet 3:60 octet zero (0) has a value greater than one, i.e. a multi-component image AND the value of octet one (1) is 0, i.e. single-frame. Not relevant for other image types.0 - No Colour Palette contained in DataSet 3:85. A default palette should be used. 1 - 65535 - valid numbers.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ColourPalette">
 <summary>In a single-frame colour image, a colour is described with a single sample per pixel.</summary>
 <remarks>Mandatory if 3:84 exists and is non zero.The pixel value is used as an index into the Colour Palette.The purpose of the Colour Palette is to act as a lookup table mapping the pixel values into the Colour Space defined in 3:64.The number of index entries is defined in DataSet 3:84.The number of output values is defined in octet zero of DataSet 3:60.The number of octets used for each output value is deducted from 3:135.The colour sequence of the output values is defined in 3:65. A default palette may be referenced if this DataSet is omitted. A number of default palettes may be held to be selected according to the device identifier component of the Picture Number 3:10.Maximul alloved lenght of this field according to IPCT IIM standard is 524288. However current implementation does not allow such big fields.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.NumberOfBitsPerSample">
 <summary>A number between 1 and 16 that indicates the number of bits per pixel value used as entries in the Colour Palette. These values are found in the objectdata itself.</summary>
 <remarks>Mandatory if DataSet 3:60 octet zero (0) has a value greater than one, i.e. a multi-component image AND the value of octet one (1) is 0, i.e. single frame. Not relevant for other image types.Each entry should be in one octet if number of bits is less than or equal to 8 and in two octets if number of bits is between 9 and 16, the least significant bit should always be aligned on the least significant bit of the least significant octet.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.SamplingStructure">
 <summary>A number defining the spatial and temporal relationship between pixels.</summary>
 <remarks>NCPS values are 0 or 2.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ScanningDirection">
 <summary>A number indicating the correct relative two dimensional order of the pixels in the objectdata. Eight possibilities exist.</summary>
 <remarks>Not valid when DataSet 3:60 octet zero (0) is 0 (zero).NCPS value is 0.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ImageRotation">
 <summary>A number indicating the clockwise rotation applied to the image for presentation.</summary>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.DataCompressionMethod">
 <summary>Specifies data compression method</summary>
 <remarks>Not valid when DataSet 3:60 octet zero (0) is 0 (zero).Octets 0-1 contain a binary number identifying the providerowner of the algorithm.Octet 2 contains a binary number identifying the type of compression algorithm.Octet 3 contains a binary number identifying the revision number of the algorithm.An identification number is issued by IPTC-NAA to providersowners of compression algorithms upon request (see Appendix A). The numbers identifying type and revision of algorithms are managed by the providers-owners.A zero (0) value of all octets in this DataSet identifies an uncompressed image. In this case the component values should be in one octet if number of bits is less than or equal to 8 and in two octets if number of bits is between 9 and 16, the least significant bit always being aligned on the least significant bit of the least significant octet.NCPS values are 0000 or 0121.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.QuantisationMethod">
 <summary>Contains a binary number identifying the quantisation law.</summary>
 <remarks>The relations between different quantisation methods are described in DNPR Guideline 1. Not valid when DataSet 3:60 octet zero (0) is 0 (zero).NCPS values are 0 or 5.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.EndPoints">
 <summary>These end points apply to the coding process.</summary>
 <remarks>2n octets. Valid only when DataSet 3:64 has a value of 0,1,2,4 or 5. Not relevant for other colour spaces. n = the number of octets per component as derived from 3:135 multiplied by the number of components. The number of components is 1 when octet one (1) of DataSet 3:60 has a value of one (1), in all other cases the number is defined in octet zero (0) of DataSet 3:60.The first n octets contain the values representing the minimum density that is encoded for each component in the order specified in DataSet 3:65.The second n octets contain the values representing the maximum density that is encoded for each component in the order specified in DataSet 3:65.The difference between the maximum and minimum density for every component is the same and given by the Maximum Density Range value in DataSet 3:140.NCPS end point values are 255 and 0.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ExcursionTolerance">
 <summary>Indicates if values outside the range defined by the end points in DataSet 3:125 may occur.</summary>
 <remarks>NCPS value is false</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.BitsPerComponent">
 <summary>Contains a sequence of one or more octets describing the number of bits used to encode each component. The sequence is specified by the order of components in DataSet 3:65.</summary>
 <remarks>The number of octets is 1 when octet one (1) of DataSet 3:60 has a value of one (1), in all other cases the number of octets is equivalent to the number of components specified in octet zero (0) of DataSet 3:60.Each octet contains a binary value between one and 16.NCPS values are 8 or 888.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.MaximumDensityRange">
 <summary>A binary value which specifies the maximum density range multiplied by 100.</summary>
 <remarks>Not valid when DataSet 3:60 octet zero (0) is 0 (zero).The value represents the difference between the lowest density and the highest density points that can be encoded by the originating system.NCPS value is 160.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.GammaCompensatedValue">
 <summary>A binary value which specifies the value of gamma for the device multiplied by 100.</summary>
 <remarks>Valid only when DataSet 3:120 has a value of 5 or 7.If this DataSet is omitted receiving equipment should assume that a gamma value of 2.22 appliesNCPS value is 222</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.OverallRating">
 <summary>Overall rating of the subject</summary>
 <remarks>This property is not part of IPTC IIM standard and other software may ignore or remove it.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.TechnicalQuality">
 <summary>Rates technical quality of subject data (e.g. Is the photo sharp?)</summary>
 <remarks>This property is not part of IPTC IIM standard and other software may ignore or remove it.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ArtQuality">
 <summary>Rates artistic quality of subject data (i.e. How nice it is?)</summary>
 <remarks>This property is not part of IPTC IIM standard and other software may ignore or remove it.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.InformationValue">
 <summary>Rates information value of subject data (i.e. Does it provide any valuable information?)</summary>
 <remarks>This property is not part of IPTC IIM standard and other software may ignore or remove it.</remarks>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.SizeMode">
 <summary>The octet is set to the binary value of '0' if the size of the objectdata is not known and is set to '1' if the size of the objectdata is known at the beginning of transfer.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.MaxSubfileSize">
 <summary>The maximum size for the following Subfile DataSet(s).</summary>
 <remarks>The largest number is not defined, but programmers should provide at least for the largest binary number contained in four octets taken together. If the entire object is to be transferred together within a single DataSet 8:10, the number equals the size of the object.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ObjectDataSizeAnnounced">
 <summary>A binary number representing the overall size of the objectdata, expressed in octets, not including tags, if that size is known when transfer commences.</summary>
 <remarks>Mandatory if DataSet has value '1' and not allowed if DataSet has value '0'.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.MaximumObjectDataSize">
 <summary>Used when objectdata size is not known, indicating the largest size, expressed in octets, that the objectdata can possibly have, not including tags.</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.Subfile">
 <summary>Subfile DataSet containing the objectdata itself.</summary>
 <remarks>Subfiles must be sequential so that the subfiles may be reassembled.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.DataSetIdentification.ConfirmedObjectDataSize">
 <summary>Total size of the objectdata, in octets, without tags.</summary>
 <remarks>This number should equal the number in DataSet if the size of the objectdata is known and has been provided.</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.DataSetIdentification.KnownDataSets(System.Boolean)">
 <summary>Returns all known data sets</summary>
 <param name="Hidden">Returns also datasets that are within groups</param>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcTag">
 <summary>Describes IPTC dataset's (tag) properties</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcTag.#ctor(System.Byte,Tools.MetadataT.IptcT.RecordNumbers,System.String,System.String,Tools.MetadataT.IptcT.IptcTypes,System.Boolean,System.Boolean,System.Int16,System.Boolean,System.String,System.String,System.Type,System.Boolean,Tools.MetadataT.IptcT.GroupInfo)">
 <summary>CTor</summary>
 <param name="Number">Tag (dataset) number</param>
 <param name="Record">Group (record) number</param>
 <param name="Name">Name of tag used in object structure</param>
 <param name="HumanName">Human-friendly name of tga</param>
 <param name="Type">Type of tag data</param>
 <param name="Mandatory">mandatority according to IPTC standard</param>
 <param name="Repeatable">Repeatability</param>
 <param name="Length">Maximal length of taga data</param>
 <param name="Fixed">True <paramref name="Length"/> to be only lenght allowed</param>
 <param name="Category">Category of tag</param>
 <param name="Description">Description of tag</param>
 <param name="Enum">Type of enumeration if tag is enumeration</param>
 <param name="Lock">Lock properties after construction</param>
 <param name="Group">Group the tag ius member of (or null if tag is member of no group)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Record"/> is greater than 9 -or- <paramref name="Length"/> is less than zero</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Type"/> is not member of <see cref="T:Tools.MetadataT.IptcT.IptcTypes"/></exception>
 <version version="1.5.4">Parameter names changed to camelCase</version>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Locked">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Locked">
 <summary>Indicates if this instance is locked, so nothing can be changed</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Identification">
 <summary>Gets or sets record and dataset number</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Number">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Number"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Number">
 <summary>Number of tag (dataset)</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Group">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Group"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Group">
 <summary>If the tag is member of some group, gets the group</summary>
 <returns>If the tag is member of some group returns the group otherwise returns null</returns>
 <value>Group the tag is member of</value>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Record">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Record"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Record">
 <summary>Tag's number of record (group number)</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is greater than 9</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Name">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Name"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Name">
 <summary>Tag name as used in object structure</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
 <seelaso cref="P:Tools.MetadataT.IptcT.DataSetIdentification.PropertyName"/>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._HumanName">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.HumanName"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.HumanName">
 <summary>Human-friendly name of tag</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
 <seelaso cref="P:Tools.MetadataT.IptcT.DataSetIdentification.DisplayName"/>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Type">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Type"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Type">
 <summary>Type of tag</summary>
 <remarks>You can get type of value of tag by <see cref="M:Tools.MetadataT.IptcT.Iptc.GetUnderlyingType(Tools.MetadataT.IptcT.IptcTypes)"/> function or <see cref="P:Tools.MetadataT.IptcT.IptcTag.UnderlyingType"/> property</remarks>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.MetadataT.IptcT.IptcTypes"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcTag.IsEnumMember``1(``0)">
 <summary>Returns value indicating if givel value if member of enumeration</summary>
 <param name="value">Value to be checked</param>
 <returns>True if <paramref name="value"/> is member of <paramref name="T"/></returns>
 <typeparam name="T">Type of enumeration to be searched</typeparam>
 <exception cref="T:System.ArgumentException"><paramref name="T"/> is not <see cref="P:Tools.MetadataT.IptcT.IptcTag.Enum"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.UnderlyingType">
 <summary>Underlying type for <see cref="P:Tools.MetadataT.IptcT.IptcTag.Type"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Enum">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Enum"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Enum">
 <summary>Type of enumeration of tag (if type of tag is enumeration)</summary>
 <returns>If tag is enumeration then returns type of enumeration, null otherwise</returns>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
 <exception cref="T:System.ArgumentException">Type being set does not inherit from the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Enum"/> class</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Mandatory">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Mandatory"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Mandatory">
 <summary>Indicate if tag is mandatory according to IPTC standard</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Repeatable">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Repeatable"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Repeatable">
 <summary>Indicates if tag is repeatable</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Fixed">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Fixed"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Fixed">
 <summary>Indicates if length of tag data is fixed</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true -or- setting value to true when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Length"/> is 0</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Length">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Length"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Length">
 <summary>Maximal length of tag data in bytes. If <see cref="P:Tools.MetadataT.IptcT.IptcTag.Fixed"/> is true that this is also actual length of tagat data in bytes.</summary>
 <value>You can set length to 0 in order to mark length as unlimited. In such case <see cref="P:Tools.MetadataT.IptcT.IptcTag.Fixed"/> must be false</value>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true -or- setting value to 0 when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Fixed"/> is true</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">setting value to negative</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Category">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Category"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Category">
 <summary>Tag catagory</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTag._Description">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcTag.Description"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcTag.Description">
 <summary>Description of tag</summary>
 <exception cref="T:System.InvalidOperationException">Changing value when <see cref="P:Tools.MetadataT.IptcT.IptcTag.Locked"/> is true</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcReader">
 <summary>Provides low level access to stream of IPTC data</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcReader.#ctor(System.IO.Stream)">
 <summary>CTor from <see cref="T:System.IO.Stream"/></summary>
 <param name="Stream"><see cref="T:System.IO.Stream"/> that contains IPTC data</param>
 <exception cref="T:System.IO.InvalidDataException">Tag marker other than 1Ch found</exception>
 <exception cref="T:System.NotSupportedException">Extended-size tag found</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcReader.#ctor(Tools.MetadataT.IptcT.IIptcGetter)">
 <summary>CTor from <see cref="T:Tools.MetadataT.IptcT.IIptcGetter"/></summary>
 <param name="Container">Object that contains <see cref="T:System.IO.Stream"/> with IPTC data</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Container"/> is null</exception>
 <exception cref="T:System.IO.InvalidDataException">Tag marker other than 1Ch found</exception>
 <exception cref="T:System.NotSupportedException">Extended-size tag found</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcReader.Parse">
 <summary>Parses stream of IPTC data</summary>
 <exception cref="T:System.IO.InvalidDataException">Tag marker other than 1Ch found</exception>
 <exception cref="T:System.NotSupportedException">Extended-size tag found</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcReader._Records">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcReader.Records"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcReader._Stream">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcReader.Stream"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcReader.Stream">
 <summary>Stream used to obtain Exif data</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcReader.Records">
 <summary>Records in IPTC stream</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcRecord">
 <summary>Repreesents one IPTC record</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcRecord.#ctor(System.Byte,System.Byte,System.UInt16,System.Byte[])">
 <summary>CTor</summary>
 <param name="RecordNumber">Record group number</param>
 <param name="Tag">Data set number (usually called tag)</param>
 <param name="Size">Size of record - only not-extended sizes are supported</param>
 <param name="Data">Record data</param>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcRecord._RecordNumber">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcRecord.RecordNumber"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcRecord._Tag">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcRecord.Tag"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcRecord._Size">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcRecord.Size"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcRecord._Data">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcRecord.Data"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcRecord.RecordNumber">
 <summary>Group number of record</summary>
 <remarks>Usually 02h</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcRecord.Tag">
 <summary>Data set number (usually called tag)</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcRecord.Size">
 <summary>Size of record data</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcRecord.Data">
 <summary>Record data as <see cref="T:System.Array"/> of <see cref="T:System.Byte"/>s</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcRecord.StringData(System.Text.Encoding)">
 <summary>Record data as <see cref="T:System.String"/></summary>
 <param name="Encoding"><see cref="T:System.Text.Encoding"/> used to convert <see cref="T:System.Byte"/>s to <see cref="T:System.String"/>. If ommited <see cref="P:System.Text.Encoding.Default"/> is used</param>
</member>
<member name="T:Tools.MetadataT.IptcT.IIptcGetter">
 <summary>Represents provider that provides stream of IPTC data</summary>
 <seealso cref="T:Tools.MetadataT.IptcT.IIptcWriter"/><seealso cref="T:Tools.MetadataT.ExifT.IExifGetter"/>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Beta"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MetadataT.IptcT.IIptcGetter.GetIptcStream">
 <summary>Gets stream of IPTC data</summary>
 <returns>Stream of IPTC data</returns>
 <remarks>
 <para>Stream content must start with first tag marker 1Ch of IPTC stream</para>
 <para>If there is no IPTC data in file stream can be null or have zero length</para>
 <para>Stream must support reading and seeking</para>
 </remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.IIptcWriter">
 <summary>Represents provider that provides method to writed IPTC data into container</summary>
 <seealso cref="T:Tools.MetadataT.IptcT.IIptcGetter"/><seealso cref="T:Tools.MetadataT.ExifT.IExifWriter"/>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Beta"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MetadataT.IptcT.IIptcWriter.IptcEmbded(System.Byte[])">
 <summary>Writes IPTC data into container</summary>
 <param name="IPTCData">Data to be written</param>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference">
 <summary>IPTC Subject Reference (IPTC type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.SubjectReference"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjRefNMask">
 <summary>This masks <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectReferenceNumber"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjMatterMask">
 <summary>Thsi masks <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectMatterNumber"/></summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.IPRLengthLimit">
 <summary>Gets lenght limit for <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/></summary>
 <returns>32</returns>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference._SubjectReferenceNumber">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectReferenceNumber"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectReferenceNumber">
 <summary>Provides a numeric code to indicate the Subject Name plus optional Subject Matter and Subject Detail Names in the language of the service.</summary>
 <remarks>Subject Reference Numbers consist of 8 octets in the range 01000000 to 17999999 and represent a language independent international reference to a Subject. A Subject is identified by its Reference Number and corresponding Names taken from a standard lists given in Appendix H,I &amp; J.These lists are the English language reference versions.</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is member neither of <see cref="T:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers"/> nor of <see cref="T:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers"/> nor of <see cref="T:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail"/> nor it is 0</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectNumber">
 <summary>Subject component of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectReferenceNumber"/></summary>
 <remarks>The Subject identifies the general content of the objectdata as determined by the provider.</remarks>
 <value>New value for subject number. Setting this property resets <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectMatterNumber"/> and <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectDetailNumber"/> to zero</value>
 <returns>Subject number value or zero if none specified</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.MetadataT.IptcT.Iptc.SubjectReferenceNumbers"/> and it is not zero</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectMatterNumber">
 <summary>Matter component of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectReferenceNumber"/></summary>
 <remarks>A Subject Matter further refines the Subject of a News Object.</remarks>
 <value>New value for subject matter number. Setting this properry resets <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectDetailNumber"/> to zero</value>
 <returns>Subject matter number value or zero if none specified</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Valůue being set is not member of <see cref="T:Tools.MetadataT.IptcT.Iptc.SubjectMatterNumbers"/> and it is not zero</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectDetailNumber">
 <summary>Detail component of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectReferenceNumber"/></summary>
 <remarks>A Subject Detail further refines the Subject Matter of a News Object.</remarks>
 <value>New value for subject detail number</value>
 <returns>Subject detail number value or zero if none specified</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.MetadataT.IptcT.Iptc.EconomySubjectDetail"/> and it is not zero</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference._SubjectName">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectName"/> property</summary>              
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectName">
 <summary>A text representation of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectNumber"/> (maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix H, or in the language of the service as indicated in DataSet <see cref="P:Tools.MetadataT.IptcT.Iptc.LanguageIdentifier"/> (2:135)</summary>
 <remarks>The Subject identifies the general content of the objectdata as determined by the provider.</remarks>
 <exception cref="T:System.ArgumentException">Value being set is longer than 64 characters -or- value being set contains non-graphic character or * or ? or :</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference._SubjectMatterName">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectMatterName"/> property</summary>                         
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectMatterName">
 <summary>A text representation of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectMatterNumber"/></summary>
 <remarks>Maximum 64 octets consisting of graphic characters plus spaces either in English, as defined in Appendix I, or in the language of the service as indicated in DataSet <see cref="P:Tools.MetadataT.IptcT.Iptc.LanguageIdentifier"/> (2:135). A Subject Matter further refines the Subject of a News Object.</remarks>
 <exception cref="T:System.ArgumentException">Value being set is longer than 64 characters -or- value being set contains non-graphic character or * or ? or :</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference._SubjectDetailName">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectDetailName"/> property</summary>                         
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectDetailName">
 <summary>A text representation of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectDetailNumber"/></summary>
 <remarks>
 Maximum 64 octets consisting of graphic characters plus spaces either in English, as defined in Appendix J, or in the language of the service as indicated in DataSet <see cref="P:Tools.MetadataT.IptcT.Iptc.LanguageIdentifier"/> (2:135)
 <para>A Subject Detail further refines the Subject Matter of a News Object. A registry of Subject Reference Numbers, Subject Matter Names and Subject Detail Names, descriptions (if available) and their corresponding parent Subjects will be held by the IPTC in different languages, with translations as supplied by members. See Appendices I and J.</para></remarks>
 <exception cref="T:System.ArgumentException">Value being set is longer than 64 characters -or- value being set contains non-graphic character or * or ? or :</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.ToString">
 <summary>String representation if form <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/>:<see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectReferenceNumber"/>:<see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectName"/>:<see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectMatterName"/>:<see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectDetailName"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.#ctor(System.Byte[],System.Text.Encoding)">
 <summary>CTor from array of bytes</summary>
 <param name="Bytes">Bytes to construct new instance from</param>
 <param name="Encoding">Encoding used to decode names</param>
 <exception cref="T:System.IndexOutOfRangeException">There are more than 5 :-separated parts in <paramref name="Bytes"/></exception>
 <exception cref="T:System.ArgumentException">There are less or more :-separated parts in <paramref name="Bytes"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.ToBytes(System.Text.Encoding)">
 <summary>Serializes current instance into array of bytes</summary>
 <param name="Encoding">Encoding used to encode names</param>
 <returns>Array of bytes containing serialization of this instance according to the IPTC standard</returns>
 <exception cref="T:System.InvalidOperationException">Length of any serialized part violates IPTC specification (that is <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> must serialize to array of 1÷32 items, <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcSubjectReference.SubjectReferenceNumber"/> must serialize into array of 8 items and names must serialize into array of 0 to 64 items)</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr">
 <summary>Common base for classes that have the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr._IPR">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> property</summary>            
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR">
 <summary>Information Provider Reference A name, registered with the IPTC/NAA, identifying the provider that guarantees the uniqueness of the UNO</summary>            
 <remarks>A name, registered with the IPTC/NAA, identifying the provider that guarantees the uniqueness of the UNO</remarks>
 <value>A minimum of one and a maximum of 32 octets. A string of graphic characters, except colon ‘:’ solidus ‘/’, asterisk ‘*’ and question mark ‘?’, registered with, and approved by, the IPTC.</value>
 <exception cref="T:System.ArgumentException">Value being set contains unallowed characters (white space, *, :, /, ? or control characters) -or- value being set is an empty <see cref="T:System.String"/> or its <see cref="T:System.String"/> if more than 32 -or- length of value being set exceeds <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPRLengthLimit"/> -or- value being set contains character with code higher than 127</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.ListedIPR">
 <summary>Gets or sets value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> property as member of <see cref="T:Tools.MetadataT.IptcT.Iptc.InformationProviders"/></summary>
 <value>Value that is member of <see cref="T:Tools.MetadataT.IptcT.Iptc.InformationProviders"/></value>
 <returns>Value that is member of <see cref="T:Tools.MetadataT.IptcT.Iptc.InformationProviders"/> if <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> can be represented as member of <see cref="T:Tools.MetadataT.IptcT.Iptc.InformationProviders"/>, -1 otherwise</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Setting value that is not member of <see cref="T:Tools.MetadataT.IptcT.Iptc.InformationProviders"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPRValue">
 <summary>Value of either <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> or <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.ListedIPR"/> depending on if <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> is one of <see cref="T:Tools.MetadataT.IptcT.Iptc.InformationProviders"/> members</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPRLengthLimit">
 <summary>When overriden in derived class gets actual lenght limit for <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/></summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno">
 <summary>Represents IPTC UNO unique object identifier (IPTC type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.UNO"/>)</summary>
 <remarks>
 <para>The first three elements of the UNO (the UCD, the IPR and the ODE) together are allocated to the editorial content of the object.</para>
 <para>Any technical variants or changes in the presentation of an object, e.g. a picture being presented by a different file format, does not require the allocation of a new ODE but can be indicated by only generating a new OVI.</para>
 <para>Links may be set up to the complete UNO but the structure provides for linking to selected elements, e.g. to all objects of a specified provider.</para>
 </remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno._UCD">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.UCD"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.UCD">
 <summary>UNO Creation Date Specifies a 24 hour period in which the further elements of the UNO have to be unique.</summary>            
 <remarks>It also provides a search facility.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.IPRLengthLimit">
 <summary>Actual length limit of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/></summary>
 <returns>61 - (1 + length of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/>)</returns>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno._ODE">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> property</summary>            
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.#ctor(System.DateTime,Tools.MetadataT.IptcT.IptcDataTypes.StringEnum{Tools.MetadataT.IptcT.Iptc.InformationProviders},System.Collections.Generic.IEnumerable{System.String},System.String)">
 <summary>CTor</summary>
 <param name="UCD">UNO Creation Date</param>
 <param name="IPR">Information Provider Reference</param>
 <param name="ODE">Object Descriptor element</param>
 <param name="OVI">Object Variant Indicator</param>
 <exception cref="T:System.ArgumentException">
 <paramref name="IPR"/> contains unallowed characters (white space, *, :, /, ? or control characters or over code 127) -or- <paramref name="IPR"/> set is an empty <see cref="T:System.String"/> or its <see cref="T:System.String"/> if more than 32 -or- length of <paramref name="IPR"/> exceeds <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.IPRLengthLimit"/> -or-
 <paramref name="OVI"/> contains unallowed characters (white space, *, :, /, ? or control characters or over code 127) -or- <paramref name="OVI"/> is an empty <see cref="T:System.String"/> or its lenght is larger than 9
 </exception>
 <exception cref="T:System.OperationCanceledException">
 <paramref name="ODE"/> contains and invalid item (containing invalid characters (?,:,?,* or code over 127), too long or an empty string) or accumulated lenght of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> and <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> (including <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/>-<see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> separator and separators of items of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/>) is greater than 61 -or- <paramref name="ODE"/> contains no item</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.#ctor(System.Byte[])">
 <summary>CTor from byte array</summary>
 <param name="Bytes">Bytes to initialize new instance by</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Bytes"/> is null or empty</exception>
 <exception cref="T:System.ArgumentException">IPR or OVI part is invalid: contains unallowed charactes (white space, *, :, /, ? or over code 127), is empty or violates lenght constraint. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.OVI"/> and <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> for more information -or- UCD component is to short or contains invalid date</exception>
 <exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in <paramref name="Bytes"/></exception>
 <exception cref="T:System.InvalidCastException">UCD component contains non-numeric character</exception>
 <exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> for more information.</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Init(System.String)">
 <summary>Pseudo-CTor from string</summary>
 <param name="Text"><see cref="T:System.String"/> to initialize instance with</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Text"/> is null or empty</exception>
 <exception cref="T:System.ArgumentException">IPR or OVI part is invalid: contains unallowed charactes (white space, *, :, /, ? or over code 127), is empty or violates lenght constraint. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.OVI"/> and <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> for more information -or- UCD component is to short or contains invalid date</exception>
 <exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in <paramref name="Bytes"/></exception>
 <exception cref="T:System.InvalidCastException">UCD component contains non-numeric character</exception>
 <exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> for more information.</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.op_Implicit(Tools.MetadataT.IptcT.IptcDataTypes.IptcUno)~System.String">
 <summary>Converts <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno"/> to <see cref="T:System.String"/></summary>
 <param name="From"><see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno"/> to be converted</param>
 <returns><see cref="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ToString"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.op_Explicit(System.String)~Tools.MetadataT.IptcT.IptcDataTypes.IptcUno">
 <summary>Converts <see cref="T:System.String"/> to <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno"/></summary>
 <param name="Text"><see cref="T:System.String"/> to create <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno"/> from</param>
 <returns>New instance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno"/> initialized by <paramref name="Text"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Text"/> is null or empty</exception>
 <exception cref="T:System.ArgumentException">IPR or OVI part is invalid: contains unallowed charactes (white space, *, :, /, ? or over code 127), is empty or violates lenght constraint. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.OVI"/> and <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> for more information -or- UCD component is to short or contains invalid date</exception>
 <exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in <paramref name="Bytes"/></exception>
 <exception cref="T:System.InvalidCastException">UCD component contains non-numeric character</exception>
 <exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> for more information.</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.#ctor(System.String)">
 <summary>CTor from string</summary>
 <param name="Text"><see cref="T:System.String"/> to create instance from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Text"/> is null or empty</exception>
 <exception cref="T:System.ArgumentException">IPR or OVI part is invalid: contains unallowed charactes (white space, *, :, /, ? or over code 127), is empty or violates lenght constraint. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.OVI"/> and <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> for more information -or- UCD component is to short or contains invalid date</exception>
 <exception cref="T:System.IndexOutOfRangeException">There is not enough (4) parts separated by : in <paramref name="Bytes"/></exception>
 <exception cref="T:System.InvalidCastException">UCD component contains non-numeric character</exception>
 <exception cref="T:System.OperationCanceledException">ODE part is invalid. See <seealso cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> for more information.</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE_Removing(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.CancelableItemIndexEventArgs)">
 <summary>Block <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/>'s last item from being removed</summary>
 <param name="sender"><see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno._ODE"/></param>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE_Clearing(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.ComponentModelT.CancelMessageEventArgs)">
 <summary>Block <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> from being cleared</summary>
 <param name="sender"><see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno._ODE"/></param>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE_Adding(Tools.CollectionsT.GenericT.ListWithEvents{System.String},Tools.CollectionsT.GenericT.ListWithEvents{System.String}.CancelableItemIndexEventArgs)">
 <summary>Controls if item added to <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> are valid</summary>
 <param name="sender"><see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno._ODE"/></param>
 <param name="e">parameters of event</param>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE">
 <summary>Object Descriptor Element In conjunction with the UCD and the IPR, a string of characters ensuring the uniqueness of the UNO.</summary>            
 <value>A minimum of one and a maximum of 60 minus the number of IPR octets, consisting of graphic characters, except colon ‘:’ asterisk ‘*’ and question mark ‘?’. The provider bears the responsibility for the uniqueness of the ODE within a 24 hour cycle.</value>
 <exception cref="T:System.OperationCanceledException">
 The <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/>'s setter can throw an <see cref="T:System.OperationCanceledException"/> when trying to add invalid item (containing invalid characters (?,:,?,* or with code over 127), too long or an empty string) or accumulated lenght of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> and <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> (including <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/>-<see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> separator and separators of items of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/>) is greater than 61
 -and- <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(System.Object)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/> throws <see cref="T:System.OperationCanceledException"/> when trying to remove last item from <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/>
 -and- <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear"/> throws <see cref="T:System.OperationCanceledException"/> everywhen
 </exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODEDesign">
 <summary>Provides design-time support for editing the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> property</summary>
 <exception cref="T:System.OperationCanceledException">
 Trying to array that contains an invalid item(s) (containing invalid characters (?,:,?,* or with code over 127), too long or an empty string) or accumulated lenght of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/> and <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> (including <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.WithIpr.IPR"/>-<see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/> separator and separators of items of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ODE"/>) is greater than 61 -or-
 Trying to set an empty array
 </exception>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno._OVI">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.OVI"/> property</summary>            
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.OVI">
 <summary>Object Variant Indicator A string of characters indicating technical variants of the object such as partial objects, or changes of file formats, and coded character sets.</summary>             
 <value>A minimum of one and a maximum of 9 octets, consisting of graphic characters, except colon ‘:’, asterisk ‘*’ and question mark ‘?’. To indicate a technical variation of the object as so far identified by the first three elements. Such variation may be required, for instance, for the indication of part of the object, or variations of the file format, or coded character set. The default value is a single ‘0’ (zero) character indicating no further use of the OVI.</value>
 <exception cref="T:System.ArgumentException">Value being set contains unallowed characters (white space, *, :, /, ? or control characters) -or- value being set is an empty <see cref="T:System.String"/> or its lenght is larger than 9 -or- value being set contains character with code higher than 127</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.ToString">
 <summary>String representation in form UCD:IPR:ODE1/ODE2/ODE3:OVI</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter">
 <summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
 <returns>True is <paramref name="destinationType"/> is <see cref="T:System.String"/> otherwise calls <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
 <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
 <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null.</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
 <returns>True if <paramref name="sourceType"/> is <see cref="T:System.String"/> otherwice callse <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
 <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether changing a value on this object requires a call to System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary) to create a new value, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
 <summary>Creates an instance of the type that this System.ComponentModel.TypeConverter is associated with, using the specified context, given a set of property values for the object.</summary>
 <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>New instance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True if <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> of <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/> of <paramref name="context"/> is null</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of possible values, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno.Converter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
 <returns>Instance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcUno"/> if <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> of <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/> of <paramref name="context"/> is null; null otherwise</returns>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr">
 <summary>Represents combination of number and string</summary>
 <remarks>This class is abstract, derived class mus specify number of digits of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Number"/></remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.NumStr._Number">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Number"/> property</summary>            
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.NumStr._String">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.String"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.NumberDigits">
 <summary>If overriden in derived class returns number of digits in number. Should not be zero.</summary>            
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Number">
 <summary>Number in this <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/></summary>            
 <exception cref="T:System.ArgumentException">Number being set converted to string is longer than <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.NumberDigits"/></exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.String">
 <summary>Text of this <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/></summary>                        
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.ToString">
 <summary>String representation in format number;string</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Converter">
 <summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
 <returns>True if <paramref name="destinationType"/> is <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.String"/> otherwise calls <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
 <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
 <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null.</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True if <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> of <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> of <paramref name="context"/> is not null and is subclass of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> (not <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> itself)</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Converter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
 <summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
 <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>Instance of subclass of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> is type of property can be obtained from <paramref name="context"/> and it's subclass of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/>; null otherwise</returns>
 <exception cref="T:System.ArgumentException">Number property converted to string is longer than <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.NumberDigits"/></exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Number property is negative</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Type of property is constrained to enumerations and has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and Number property is not member of the enumeration</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
 <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>Converted insvance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> if <see cref="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported"/> returns true and <paramref name="value"/> consists of 2 ;-separated components or <paramref name="value"/> consists of 3 or 4 components; calls <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> otherwise.</returns>
 <exception cref="T:System.IndexOutOfRangeException"><paramref name="value"/> does not repsesent <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.String"/> consisting of 2 ;-separated parts</exception>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
 <exception cref="T:System.ArgumentException">Numeric (1st) part of <paramref name="value"/> converted to string is longer than <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.NumberDigits"/> -or-  Name of type (in 3 or 4 components-consisting string) is invalid, for example if it contains invalid characters, or if it is a zero-length string. -or- error when creating generic type from 4 components</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Numeric (1st) part of <paramref name="value"/> is negative</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Type of property is constrained to enumerations and has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and first part of <paramref name="value"/> is not member of the enumeration</exception>
 <exception cref="T:System.InvalidCastException">First part of <see cref="T:System.ValueType"/> cannot be converted to <see cref="T:System.Int32"/></exception>
 <exception cref="T:System.InvalidOperationException">There are neither 3 nor 4 components in <paramref name="context"/> and <paramref name="context"/> or any of it's values leading to <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> or thet value itself is null -or- There are 4 components in <paramref name="value"/> but first component is not generic type definition</exception>
 <remarks>
 If <paramref name="value"/> consists of 2 ;-separated components <paramref name="context"/> is needed to be non-null to obtain type of propery that will be instantiated.
 If <paramref name="value"/> consists of 3 components then first components denotes type. If it consists of 4 components then second componend is passed as typeparameter to first component. Types are expected as full names.
 </remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
 <returns>True if <paramref name="sourceType"/> is <see cref="T:System.String"/>; otherwice calls <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.#ctor(System.Int32,System.String)">
 <summary>CTor from number and string</summary>
 <param name="Num">Number</param>
 <param name="Str"><see cref="T:System.String"/></param>
 <exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr.NumberDigits"/></exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2">
 <summary>Represents combination of 2-digits numer and string (IPTC type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Num2_Str"/>)</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2.NumberDigits">
 <summary>Number of digits in number</summary>
 <returns>2</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2.#ctor(System.Int32,System.String)">
 <summary>CTor from number and string</summary>
 <param name="Num">Number</param>
 <param name="Str"><see cref="T:System.String"/></param>
 <exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2.NumberDigits"/> (2)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2`1">
 <summary><see cref="T:NumStr2"/> with numbers from enum</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2`1.EnumNumber">
 <summary>Number in this <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2`1"/></summary>            
 <exception cref="T:System.ArgumentException">Number being set converted to string is longer than 2 <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2.NumberDigits"/> -or- <typeparamref name="T"/> is not <see cref="T:System.Enum"/></exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><typeparamref name="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and value being set is not member of <typeparamref name="T"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2`1.Number">
 <summary>Number in this <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/></summary>            
 <exception cref="T:System.ArgumentException">Number being set converted to string is longer than 2 <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2.NumberDigits"/> -or- <typeparamref name="T"/> is not <see cref="T:System.Enum"/></exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><typeparamref name="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and value being set is not member of <typeparamref name="T"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2`1.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2`1.#ctor(`0,System.String)">
 <summary>CTor from number and string</summary>
 <param name="Num">Number</param>
 <param name="Str"><see cref="T:System.String"/></param>
 <exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr2.NumberDigits"/> (2)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><typeparamref name="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and <paramref name="Num"/> is not member of <typeparamref name="T"/></exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3`1">
 <summary><see cref="T:NumStr3"/> with numbers from enum</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3`1.EnumNumber">
 <summary>Number in this <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3`1"/></summary>            
 <exception cref="T:System.ArgumentException">Number being set converted to string is longer than 3 <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3.NumberDigits"/> -or- <typeparamref name="T"/> is not <see cref="T:System.Enum"/></exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><typeparamref name="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and value being set is not member of <typeparamref name="T"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3`1.Number">
 <summary>Number in this <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/></summary>            
 <exception cref="T:System.ArgumentException">Number being set converted to string is longer than 3 <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3.NumberDigits"/> -or- <typeparamref name="T"/> is not <see cref="T:System.Enum"/></exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Number beign set is negative</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><typeparamref name="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and value being set is not member of <typeparamref name="T"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3`1.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3`1.#ctor(`0,System.String)">
 <summary>CTor from number and string</summary>
 <param name="Num">Number</param>
 <param name="Str"><see cref="T:System.String"/></param>
 <exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3.NumberDigits"/> (3)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><typeparamref name="T"/> has <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> with <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True or it has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> and <paramref name="Num"/> is not member of <typeparamref name="T"/></exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3">
 <summary>Represents combination of 3-digits numer and string (IPTC type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.Num3_Str"/>)</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3.NumberDigits">
 <summary>Number of digits in number</summary>
 <returns>3</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3.#ctor(System.Int32,System.String)">
 <summary>CTor from number and string</summary>
 <param name="Num">Number</param>
 <param name="Str"><see cref="T:System.String"/></param>
 <exception cref="T:System.ArgumentException"><paramref name="Num"/> converted to string is longer than <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.NumStr3.NumberDigits"/> (3)</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Num"/> beign set is negative</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.IMediaType`2">
 <summary>Represents common interface for media types</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IMediaType`2.Count">
 <summary>Count fo components</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IMediaType`2.Code">
 <summary>Type code</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IMediaType`2.CodeString">
 <summary>Type code as character</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate">
 <summary>Represents date (Year, Month and Day) which's parts can be ommited by setting value to 0 (IPTC type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.CCYYMMDDOmmitable"/>)</summary>
 <remarks>Date represented by this structure can be invalid (e.g. 31.2.2008)</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate._Year">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Year"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate._Day">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Day"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate._Month">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Month"/> property</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.#ctor(System.Int16,System.Byte,System.Byte)">
 <summary>CTor</summary>
 <param name="Year">Year (or 0 if unknown)</param>
 <param name="Month">Month (or 0 if unknown)</param>
 <param name="Day">Day (or 0 if unknown)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Year"/> is less than zero or greater than 9999 -or- <paramref name="Month"/> is greater than 12 -or- <paramref name="Day"/> is greater than 31</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.#ctor(System.DateTime)">
 <summary>CTor from date</summary>
 <param name="Date"><see cref="T:System.DateTime"/> to initialize this instance with</param>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.op_Implicit(System.DateTime)~Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate">
 <summary>Converts <see cref="T:System.DateTime"/> into <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/></summary>
 <param name="From"><see cref="T:System.DateTime"/> to be converted</param>
 <returns><see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> initialized with <paramref name="From"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.op_Explicit(Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate)~System.DateTime">
 <summary>Converts <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> into <see cref="T:System.DateTime"/></summary>
 <param name="From"><see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> to be converted</param>
 <returns><see cref="T:System.DateTime"/> with same <see cref="P:System.DateTime.Year"/>, <see cref="P:System.DateTime.Month"/> and <see cref="P:System.DateTime.Day"/> properties as this instance</returns>
 <exception cref="T:System.InvalidCastException">This instance cannot be converted to <see cref="T:System.DateTime"/> because it contains invalid date or 0 in some propery</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Year">
 <summary>Year component of date</summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is less than zero or greater than 9999</exception>
 <value>Value of year component or zero if unknown</value>
 <returns>Year component or zero if unknown</returns>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Day">
 <summary>Day component of date</summary>
 <value>Value of day component or zero if unknown</value>
 <returns>Day component or zero if unknown</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">Setting value to value greater than 31</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Month">
 <summary>Month component of date</summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Setting value to value greater than 12</exception>
 <value>Value of month component or zero if unknown</value>
 <returns>Month component or zero if unknown</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.ToString">
 <summary>String representation in YYYYMMDD format</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.op_Explicit(System.String)~Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate">
 <summary>Converts <see cref="T:System.String"/> to <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/></summary>
 <param name="From"><see cref="T:System.String"/> to be converted</param>
 <returns><see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> created from <paramref name="From"/> in form YYYYMMDD</returns>
 <exception cref="T:System.InvalidCastException">Conversion cannot be performed</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.op_Implicit(Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate)~System.String">
 <summary>Converts <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> to <see cref="T:System.String"/></summary>
 <param name="From"><see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> to be converted</param>
 <returns><see cref="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.ToString"/></returns>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Converter">
 <summary><see cref="T:System.ComponentModel.TypeConverter"/> of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> to and from <see cref="T:System.String"/> and <see cref="T:System.DateTime"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/></param>
 <returns><see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> initialized by <paramref name="value"/></returns>
 <exception cref="T:System.InvalidCastException">Conversion cannot be performed</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate)">
 <summary>Performs conversion from <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> to <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in <see cref="T:System.String"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.DateTime)">
 <summary>Performs conversion from <see cref="T:System.DateTime"/> to <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/></param>
 <returns><see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> initialized by <paramref name="value"/></returns>
 <exception cref="T:System.InvalidCastException">Conversion cannot be performed</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate.Converter.ConvertToDate(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate)">
 <summary>Performs conversion from <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/> to <see cref="T:System.DateTime"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in <see cref="T:System.DateTime"/></returns>
 <exception cref="T:System.InvalidCastException">This instance cannot be converted to <see cref="T:System.DateTime"/> because it contains invalid date or 0 in some propery</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.Time">
 <summary>Contains time as hours, minutes and seconds and offset to UTC in hours and minutes (IPTC type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.HHMMSS_HHMM"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time._Time">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time._Offset">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MinOffset">
 <summary>Minimal allowed value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MaxOffset">
 <summary>Maximal allowed value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Maximum">
 <summary>Minimal allowed value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/> property</summary>
 <remarks>It's 23:59:59</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Minimum">
 <summary>maximal allowed value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/> property</summary>
 <remarks>It's zero</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time">
 <summary>Local time</summary>
 <value>Sub-second part of value is ignored (truncated)</value>
 <exception cref="T:System.ArgumentOutOfRangeException">Settign value otside of range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Minimum"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Maximum"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset">
 <summary>Time zone offset of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/></summary>
 <exception cref="T:System.ArgumentException">Setting offset to time with non-zero sub-minute component</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Setting offset outside of range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MinOffset"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MaxOffset"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Hours">
 <summary>Hour component of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/></summary>
 <exception cref="T:System.ArgumentOutOfRangeException">setting such value that <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/> leves range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Minimum"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Maximum"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Minutes">
 <summary>Hour component of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/></summary>
 <exception cref="T:System.ArgumentOutOfRangeException">setting such value that <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/> leves range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Minimum"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Maximum"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Seconds">
 <summary>Second component of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/></summary>
 <exception cref="T:System.ArgumentOutOfRangeException">setting such value that <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/> leves range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Minimum"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Maximum"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.OffsetHourAbs">
 <summary>Absolute value of hour component of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset"/></summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Setting value such that <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset"/> leaves range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MinOffset"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MaxOffset"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.NegativeOffset">
 <summary>Sign of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset"/></summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Setting value such that <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset"/> leaves range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MinOffset"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MaxOffset"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.OffsetMinuteAbs">
 <summary>Absolute value of minute part of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset"/></summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Setting value such that <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Offset"/> leaves range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MinOffset"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MaxOffset"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.Time.ToString">
 <summary>String representation in the HHMMSS±HHMM format</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.Time.#ctor(System.Byte,System.Byte,System.Byte,System.SByte,System.Byte)">
 <summary>CTor</summary>
 <param name="Hours">Hour component</param>
 <param name="Minutes">Minute component</param>
 <param name="Seconds">Second component</param>
 <param name="HourOffset">Hour component of offset</param>
 <param name="MinuteOffset">Minute component of offset</param>
 <exception cref="T:System.ArgumentOutOfRangeException">Time component exceeds range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Minimum"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Maximum"/> -or- offset component exceds range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MinOffset"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MaxOffset"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.Time.#ctor(System.TimeSpan)">
 <summary>CTor from <see cref="T:System.TimeSpan"/></summary>
 <param name="Time"><see cref="T:System.TimeSpan"/> to initialize this instance (time local in UTC+0:00)</param>
 <remarks>Offset is initialized to <see cref="F:System.TimeSpan.Zero"/></remarks>
 <exception cref="T:System.ArgumentOutOfRangeException">Time component exceeds range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Minimum"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Maximum"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.Time.#ctor(System.TimeSpan,System.TimeSpan)">
 <summary>CTor from <see cref="T:System.TimeSpan"/></summary>
 <param name="Time"><see cref="T:System.TimeSpan"/> to initialize this instance (local time)</param>
 <param name="Offset">Time zone offset</param>
 <exception cref="T:System.ArgumentOutOfRangeException">Time component exceeds range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Minimum"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Maximum"/> -or- offset component exceds range <see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MinOffset"/>÷<see cref="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.MaxOffset"/></exception>
 <exception cref="T:System.ArgumentException"><paramref name="Offset"/> contains non-zero sub-minute component</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.Time.#ctor(System.DateTime)">
 <summary>CTor from <see cref="T:System.DateTime"/></summary>
 <param name="Date"><see cref="T:System.DateTime"/> which time path will be used to initialize this instance</param>
 <remarks>Offset is initialized to <see cref="F:System.TimeSpan.Zero"/> (UTC+0:00)</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter">
 <summary>Converter of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/> values</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat">
 <summary>State of automat that parses string</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.H1">
 <summary>*HH:MM:SS±HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.H2">
 <summary>H*H:MM:SS±HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.H3">
 <summary>HH*:MM:SS±HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.M1">
 <summary>HH:*MM:SS±HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.M2">
 <summary>HH:M*M:SS±HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.M3">
 <summary>HH:MM*:SS±HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.S1">
 <summary>HH:MM:*SS±HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.S2">
 <summary>HH:MM:S*S±HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.S3">
 <summary>HH:MM:SS*±HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.OH1">
 <summary>HH:MM:SS±*HH:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.OH2">
 <summary>HH:MM:SS±H*H:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.OH3">
 <summary>HH:MM:SS±HH*:MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.OM1">
 <summary>HH:MM:SS±HH:*MM</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.OM2">
 <summary>HH:MM:SS±HH:M*M</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ParseAutomat.All">
 <summary>HH:MM:SS±HH:MM*</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from <see cref="T:System.String"/> to <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/></param>
 <returns>Value of type <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/> initialized by <paramref name="value"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.Time.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.MetadataT.IptcT.IptcDataTypes.Time)">
 <summary>Performs conversion from <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.Time.Time"/> to <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in <see cref="T:System.String"/></returns>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType">
 <summary>IPTC image type (IPTC type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.ImageType"/>)</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.#ctor(System.Byte,System.Char)">
 <summary>CTor</summary>
 <param name="TypeCode"><see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Type"/> as <see cref="T:System.Char"/></param>
 <param name="Components">Number of components</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Components"/> is not member of <see cref="T:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents"/> -or- <paramref name="TypeCode"/> cannot be interpreted as member of <see cref="T:Tools.MetadataT.IptcT.Iptc.ImageTypeContents"/></exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType._Type">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Type"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType._Components">
 <summary>Contains value of the <see cref="T:System.ComponentModel.Component"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Type">
 <summary>Type of components</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.MetadataT.IptcT.Iptc.ImageTypeContents"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Components">
 <summary>Number of components</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.TypeCode">
 <summary>Gets or sets <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Type"/> as <see cref="T:System.String"/></summary>
 <exception cref="T:System.ArgumentException">Value being set cannot be interpreted member of <see cref="T:Tools.MetadataT.IptcT.Iptc.ImageTypeContents"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.ToString">
 <summary>String representation in form 0T (components, type)</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Converter">
 <summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True if <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> of <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> of <paramref name="context"/> is not null and is subclass of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> (not <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> itself)</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Converter.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
 <summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
 <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>Instance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType"/> initialized by given property values</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType"/></param>
 <returns>Value of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType"/> initialized by <paramref name="value"/></returns>
 <exception cref="T:System.ArgumentException">Length of <paramref name="value"/> differs from 2</exception>
 <exception cref="T:System.InvalidCastException">Second character cannot be interpreted as number</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">First character cannot be interpreted as <see cref="T:Tools.MetadataT.IptcT.Iptc.ImageTypeContents"/> or second character cannot be interpreted as <see cref="T:Tools.MetadataT.IptcT.Iptc.ImageTypeComponents"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType)">
 <summary>Performs conversion from type <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcImageType"/> to type <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <see cref="T:System.String"/></returns>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType">
 <summary>IPTC audio type (IPTC type <see cref="F:Tools.MetadataT.IptcT.IptcTypes.AudioType"/>)</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.#ctor(System.Byte,System.Char)">
 <summary>CTor</summary>
 <param name="Components">Number of components</param>
 <param name="TypeCode">
 <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Type"></see> as <see cref="T:System.Char"></see></param>
 <exception cref="T:System.ArgumentOutOfRangeException">
 <paramref name="Components"></paramref> is not within range 0÷9</exception>
 <exception cref="T:System.ArgumentException">Cannot be interpreted as <see cref="T:Tools.MetadataT.IptcT.Iptc.AudioDataType"></see></exception>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType._Type">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Type"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType._Components">
 <summary>Contains value of the <see cref="T:System.ComponentModel.Component"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Type">
 <summary>Type of components</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.MetadataT.IptcT.Iptc.ImageTypeContents"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Components">
 <summary>Number of components</summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is ot of range 0÷9</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.TypeCode">
 <summary>Gets or sets <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Type"/> as <see cref="T:System.String"/></summary>
 <exception cref="T:System.ArgumentException">Value being set cannot be interpreted member of <see cref="T:Tools.MetadataT.IptcT.Iptc.AudioDataType"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.ToString">
 <summary>String representation in form 0T (components, type)</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Converter">
 <summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether changing a value on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> to create a new value, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True if <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> of <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> of <paramref name="context"/> is not null and is subclass of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> (not <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.NumStr"/> itself)</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Converter.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
 <summary>Creates an instance of the type that this <see cref="T:System.ComponentModel.TypeConverter"/> is associated with, using the specified context, given a set of property values for the object.</summary>
 <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> of new property values.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>Instance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType"/> initialized by given property values</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType"/></param>
 <returns>Value of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType"/> initialized by <paramref name="value"/></returns>
 <exception cref="T:System.ArgumentException">First character be interpreted as <see cref="T:Tools.MetadataT.IptcT.Iptc.AudioDataType"/> -or- length of <paramref name="value"/> differs from 2</exception>
 <exception cref="T:System.InvalidCastException">Second character cannot be interpreted as number</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType)">
 <summary>Performs conversion from type <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcAudioType"/> to type <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <see cref="T:System.String"/></returns>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum">
 <summary>Common base for all <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>s</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.#ctor">
 <summary>CTor</summary>
 <remarks>Nobody else can inherit this class</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.ToString">
 <summary>String representation</summary>
 <returns><see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.StringValue"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.Clone1">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <remarks>Use type-safe <see cref="M:System.Globalization.CultureInfo.Clone"/> instead</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.Swap">
 <summary>Swaps values <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.DecimalValue"/> and <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.StringValue"/></summary>            
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.DecimalValue">
 <summary>Gets or sets enumerated value as <see cref="T:System.Decimal"/></summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.EnumType"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.StringValue">
 <summary>Gets or sets string value</summary>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set cannot be represented in underlying enumeration and underlying enumeration is restricted (has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> is True)</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.EnumType">
 <summary>Gets type of enumeration derived class contains</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.containsImpl(System.Type)">
 <summary>Gets value indicating if this instance contains value of specified type</summary>
 <returns>True oif derived class's <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.contains(System.Type)"/> returns true for <paramref name="T"/> or if <paramref name="T"/> is <see cref="T:System.Decimal"/> and derived class's <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.contains(System.Type)"/> returns true for <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.EnumType"/></returns>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.contains(System.Type)">
 <summary>Gets value indicating if derived class contains value of givent type</summary>
 <param name="T">Type of value to be contained</param>
 <remarks>It can return false for <see cref="T:System.Decimal"/> even if <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.ContainsEnum"/> returns true</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.ContainsEnum">
 <summary>Gets value indicating if derived class contains enumerated value</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.ContainsString">
 <summary>Gets value indicating if derived class contains <see cref="T:System.String"/> value</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.IsEmpty">
 <summary>Gets value indicating if derived class is empty</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.objValue">
 <summary>Gets value containde in derived class in type-unsafe way</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.CloneDec">
 <summary>Clones instance of derived class as <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.GetInstance(System.Type,System.String)">
 <summary>Creates instance <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> with TEnum set to given <see cref="T:System.Type"/> and initialized with given <see cref="T:System.String"/></summary>
 <param name="Type">Type to pass to generic type parameter TEnum of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/></param>
 <param name="Value"><see cref="T:System.String"/> to initialize new instance with</param>
 <returns>New instance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> where TEnum is <paramref name="Type"/> initialized with <paramref name="Value"/></returns>
 <exception cref="T:System.ArgumentException">Error while creating generic instance</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Value"/> or <paramref name="Type"/> is null</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.Converter">
 <summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>'s</summary>
 <version version="1.5.4">Added <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/></version>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:StringEnum"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to <see cref="T:StringEnum"/></param>
 <returns><see cref="T:StringEnum"/> initialized by <paramref name="value"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null</exception>
 <exception cref="T:System.MissingMethodException">Cannot create an instance of generic class <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>. The constructor is missing.</exception>
 <exception cref="T:System.MemberAccessException">Cannot create an instance of generic class <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>. E.g. the class is abstract.</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Constructor of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> has thrown an exception.</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.MetadataT.IptcT.IptcDataTypes.StringEnum)">
 <summary>Performs conversion from <see cref="T:StringEnum"/> to <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in <see cref="T:System.String"/></returns>
 <remarks>Calls <see cref="M:StringEnum.StringValue"/></remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.Converter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True when <paramref name="context"/>'s <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/>'s <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> is <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.Converter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of possible values, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True when underlying enumeration of <paramref name="context"/>'s <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/>'s <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or its <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> has <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.Converter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter should not be null.</param>
 <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values obtained from underlying enumeration of <paramref name="context"/>'s <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/>'s <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> as values of <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/> (preffred) or names of items</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.StringEnumTypeDescriptionProvider">
 <summary>Custom type description provider for <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> generic classes</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.StringEnumTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
 <summary>Gets a custom type descriptor for the given type and object.</summary>
 <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
 <param name="instance">An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
 <returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide metadata for the type.</returns>
 <remarks>If <paramref name="objectType"/> or <paramref name="instance"/> is <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> returns <see cref="T: MetadataT.IptcT.IptcDataTypes.StringEnum`1+StringEnumTypeDescriptor"/>.</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1">
 <summary>Type that can contain value of "string enum" even when such value is not member of this enum</summary>
 <typeparam name="TEnum">Type of <see cref="P:StringEnum`0.EnumValue"/>. Must inherit from <see cref="T:System.Enum"/></typeparam>
 <version version="1.5.4">Added <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute"/>. This makes this class WPF binding-friendly.</version>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1._StringValue">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringValue"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1._EnumValue">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.EnumValue"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1._ContainsEnum">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.ContainsEnum"/> property</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.CloneEnum">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.CloneDec">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Swap">
 <summary>Swaps values <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.EnumValue"/> and <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringValue"/></summary>            
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.EnumValue">
 <summary>Gets or sets enumerated value</summary>
 <value>Anything to set enumerated value and delete string value</value>
 <returns>If this instance contains enumerated value then returns it, otherwise return 0</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="!:TEnum"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringValue">
 <summary>Gets or sets string value</summary>
 <value>Anything non-null to set string value and delete enumerated value (if string value is name of enum item then <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.EnumValue"/> is set instead of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringValue"/>. Value is considered to be name of enum if enum item has <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/> and <see cref="P:System.Xml.Serialization.XmlEnumAttribute.Name"/> equals to value or when enum member has not <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> and it's name is same as value.</value>
 <returns>If this instance contains string value then returns it, otherwise returns name of enum item contained in this instace</returns>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <exception cref="T:System.ArgumentException">Value being set contains unallowed character (non-grapic-non-space-non-ASCII)</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set cannot be represented in <see cref="!:TEnum"/> and <see cref="!:TEnum"/> is restricted (has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> is True)</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.contains(System.Type)">
 <summary>Identifies whether this instance contains value of specified type</summary>
 <param name="T">Type to be contained</param>
 <returns>True if this instance contais value of type <paramref name="T"/> otherwise False</returns>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.ContainsEnum">
 <summary>Determines if currrent instance contains enumerated value</summary>
 <value>This property cannot be set</value>
 <returns>True if this instance contains enumerated value</returns>
 <exception cref="T:System.NotSupportedException">An attempt to change value</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.ContainsString">
 <summary>Determines if currrent instance contains string value</summary>
 <value>This property cannot be set</value>
 <returns>Always True</returns>
 <exception cref="T:System.NotSupportedException">An attempt to set value to false</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.IsEmpty">
 <summary>Determines whether instance contains neither string nor enumerated value</summary>
 <returns>True when both values are not present. False if one of values is present (even if it contains null)</returns>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.objValue">
 <summary>Get or sets stored value in type-unsafe way</summary>
 <value>New value to be stored in this instance</value>
 <returns>Value stored in this instance</returns>
 <exception cref="T:System.NullReferenceException">When trying to set null value</exception>
 <exception cref="T:System.ArgumentException">When trying to set value of type other than <see cref="T:System.String"/> and <see cref="T:System.IConvertible"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.op_Implicit(System.String)~Tools.MetadataT.IptcT.IptcDataTypes.StringEnum{`0}">
 <summary>Converts <see cref="T:System.String"/> into <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/></summary>
 <param name="From">A <see cref="T:System.String"/> to be converted</param>
 <returns>New instance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> initialized with <paramref name="From"/> as <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringValue"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="From"/> is null</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.op_Explicit(`0)~Tools.MetadataT.IptcT.IptcDataTypes.StringEnum{`0}">
 <summary>Converts <see cref="!:TEnum"/> into <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/></summary>
 <param name="From">A <see cref="T:System.String"/> to be converted</param>
 <returns>New instance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> initialized with <paramref name="From"/> as <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringValue"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="From"/> is not member of <see cref="!:TEnum"/></exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.op_Implicit(Tools.MetadataT.IptcT.IptcDataTypes.StringEnum{`0})~System.String">
 <summary>Converts <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> to <see cref="T:System.String"/></summary>
 <param name="From">A <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> to be converted</param>
 <returns><see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringValue"/> of <paramref name="From"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.op_Implicit(Tools.MetadataT.IptcT.IptcDataTypes.StringEnum{`0})~`0">
 <summary>Converts <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> to <see cref="!:TEnum"/></summary>
 <param name="From">A <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/> to be converted</param>
 <returns><see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.EnumValue"/> of <paramref name="From"/> (it can be 0 if <paramref name="From"/> does not contain enum value)</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.ToString">
 <summary>String representation</summary>
 <returns><see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringValue"/></returns>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.DecimalValue">
 <summary>Gets or sets <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.EnumValue"/> as decimal</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="!:TEnum"/></exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.EnumType">
 <summary>Returns type of <see cref="!:TEnum"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.#ctor(System.String)">
 <summary>CTor from string value</summary>
 <param name="StringValue">String value top initialize new instance</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="StringValue"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="StringValue"/> contains unallowed character (non-grapic-non-space-non-ASCII)</exception>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter">
 <summary>Extends <see cref="T:StringEnum.Converter"/> so that it works even if it is given with null <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>. Supplies very simple fake own <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>.</summary>
 <version version="1.5.4">Added <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/></version>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.GetPropertyDescriptor">
 <summary>Gets substitution <see cref="T:System.ComponentModel.ITypeDescriptorContext"/></summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor">
 <summary>Very simple, context-less, read-only implementation of <see cref="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.PropertyDescriptor"/> and <see cref="T:System.ComponentModel.ITypeDescriptorContext"/></summary>
 <remarks>This class simply describes type <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>[<typeparamref name="TEnum"/>]</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.Container">
 <summary>Gets the container representing this <see cref="T:System.ComponentModel.TypeDescriptor" /> request.</summary>
 <returns>Null</returns>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.Instance">
 <summary>Gets the object that is connected with this type descriptor request.</summary>
 <returns>Null</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.OnComponentChanged">
 <summary>Does nothing</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.OnComponentChanging">
 <summary>Does nothing</summary>
 <returns>True</returns>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.PropertyDescriptor">
 <summary>Gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> that is associated with the given context item.</summary>
 <returns>This instance</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.GetService(System.Type)">
 <summary>Gets the service object of the specified type.</summary>
 <returns>null</returns>
 <param name="serviceType">Ignored.</param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.CanResetValue(System.Object)">
 <summary>Returns whether resetting an object changes its value.</summary>
 <returns>false</returns>
 <param name="component">Ignored.</param>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.ComponentType">
 <summary>Gets the type of the component this property is bound to.</summary>
 <returns>The <see cref="T:System.Object"/> type</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.GetValue(System.Object)">
 <summary>Gets the current value of the property on a component.</summary>
 <returns>Default value of type <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>[<typeparamref name="TEnum"/>]</returns>
 <param name="component">Ignored</param>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.IsReadOnly">
 <summary>Gets a value indicating whether this property is read-only.</summary>
 <returns>true</returns>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.PropertyType">
 <summary>Gets the type of the property.</summary>
 <returns>Type <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>[<typeparamref name="TEnum"/>]</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.ResetValue(System.Object)">
 <summary>Not supported</summary>
 <param name="component">Ignored</param>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.SetValue(System.Object,System.Object)">
 <summary>Not supported</summary>
 <param name="component">Ignored</param>
 <param name="value">Ignored</param>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.EnumPropertyDescriptor.ShouldSerializeValue(System.Object)">
 <summary>Determines a value indicating whether the value of this property needs to be persisted.</summary>
 <returns>true</returns>
 <param name="component">Ignored</param>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter should not be null.</param>
 <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set of valid values obtained from underlying enumeration of <paramref name="context"/>'s <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/>'s <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> as values of <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/> (preffred) or names of items</returns>
 <remarks>Unlike <see cref="M:StringEnum.Converter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)"/>, this method works even if <paramref name="context"/> is null</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True when <paramref name="context"/>'s <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/>'s <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> is <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/></returns>
 <remarks>Unlike <see cref="M:StringEnum.Converter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)"/>, this method works even if <paramref name="context"/> is null</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive list of possible values, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True when underlying enumeration of <paramref name="context"/>'s <see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"/>'s <see cref="P:System.ComponentModel.PropertyDescriptor.PropertyType"/> has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or its <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> has <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> True</returns>
 <remarks>Unlike <see cref="M:StringEnum.Converter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)"/>, this method works even if <paramref name="context"/> is null</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:StringEnum(Of T)"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to <see cref="T:StringEnum"/></param>
 <returns><see cref="T:StringEnum(Of T)"/> initialized by <paramref name="value"/></returns>
 <remarks>Unlike <see cref="M:StringEnum.Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)"/>, this method works even if <paramref name="context"/> or <paramref name="context"/>.<see cref="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">PropertyDescriptor</see> is null because it ignores <paramref name="context"/> and directly creates a new instance of type <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>.</remarks>
 <version version="1.5.4">CHanged implementation. The method now directly creates a new instance of <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>. Previously it called base class method and just ensured that <paramref name="context"/> was not null.</version>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.ConvertFromNull(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
 <summary>If overriden in derived class performs conversion form null to type <see cref="T:StringEnum"/></summary>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>Null value converted to type <see cref="T:StringEnum"/></returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.MetadataT.IptcT.IptcDataTypes.StringEnum)">
 <summary>Performs conversion from <see cref="T:StringEnum"/> to <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in <see cref="T:System.String"/></returns>
 <remarks>Calls <see cref="M:StringEnum.StringValue"/></remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether changing a value on this object requires a call to the <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> method to create a new value.</summary>
 <returns>true if changing a property on this object requires a call to <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> to create a new value; otherwise, false.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
 <summary>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or null if there are no properties.</returns>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
 <param name="value">An <see cref="T:System.Object" /> that specifies the type of array for which to get properties. </param>
 <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter. </param>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether this object supports properties.</summary>
 <returns>true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> should be called to find the properties of this object; otherwise, false.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.String)">
 <summary>Returns whether the given instance of <see cref="T:System.String"/> is valid for type <see cref="T:StringEnum"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">Value to test validity</param>
 <returns>true if the specified value is valid for this type <see cref="T:StringEnum"/>; otherwise, false.</returns>
 <remarks>If not overriden in derived class thi method calls <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> and checks if it throws an exception or not.</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.Converter.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
 <summary>Re-creates an <see cref="T:System.Object"/> given a set of property values for the object.</summary>
 <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> that represents a dictionary of new property values.</param>
 <returns>An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.</returns>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringEnumTypeDescriptor">
 <summary>Custom type descriptor for <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1"/>. It only provides converter.</summary>
 <seelaso cref="T:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum.StringEnumTypeDescriptionProvider"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.StringEnum`1.StringEnumTypeDescriptor.GetConverter">
 <summary>Returns a type converter for the type represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> for the type represented by this type descriptor. 
 This implementation returns a new instance of <see cref="T:System.Convert"/>.</returns>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.IptcPictureNumber">
 <summary>The picture number provides a universally unique reference to an image</summary>
 <version version="1.5.4">This structure is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcPictureNumber.Octets">
 <summary>Gets octets (bytes) that forms value of  <see cref="P:Tools.MetadataT.IptcT.Iptc.PictureNumber"/></summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcPictureNumber.#ctor(System.Byte[])">
 <summary>CTor - creates a new instance of the <see cref="P:Tools.MetadataT.IptcT.Iptc.PictureNumber"/> structure from byte array</summary>
 <param name="octets">Array of 16 bytes representing underlying value of this property</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="octets"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="octets"/> does not contain exactly 16 bytes</exception>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcPictureNumber.#ctor(Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber,System.Int16,System.DateTime,System.Int16)">
 <summary>CTor - creates a new instance of the <see cref="P:Tools.MetadataT.IptcT.Iptc.PictureNumber"/> structure from property values</summary>
 <param name="manufacturer">Identifies manufacturer</param>
 <param name="equipment">Identifies equipment (manufacturer-specific)</param>
 <param name="dateIdentifier">Indicates year, month and day the picture number was generated</param>
 <param name="numericIdentifier">Number generated for each picture by the same manufacturer and equipment in given day</param>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcPictureNumber.Manufacturer">
 <summary>Gets or sets Manufacturer’s Unique Identity (issued by IPTC)</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcPictureNumber.Equipment">
 <summary>Gets or sets equipment identifier</summary>
 <remarks>Used to indicate equipment type and managed by Manufacturer.</remarks>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcPictureNumber.DateIdentifier">
 <summary>Gets or sets value indicating year, month and day the picture number was generated.</summary>
 <remarks>Sub-day part of <see cref="T:System.DateTime"/> value is truncated.</remarks>
 <exception cref="T:System.FormatException">Octets 6 to 13 does not contain date in yyyyMMdd format.</exception>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcDataTypes.IptcPictureNumber.NumericIdentifier">
 <summary>Gets or sets a binary number generated each time a picture number is created and being unique for the same device and for the date contained in this DataSet.</summary>
 <remarks>When the originating device (scanner) is not able to generate a relevant picture number, each octet of the picture number should be set to value zero, i.e. a null value.</remarks>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcDataTypes.IptcPictureNumber.ToString">
 <summary>Gets string representation of this object</summary>
 <returns>String representation of this object</returns>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber">
 <summary>Numbers assigned by IPTC-NAA for manufacturers of image originating devices</summary>
 <remarks>The following series of numbers have been assigned by IPTC-NAA for manufacturers of image originating devices.
 <para>These numbers are used for manufacturer identification used in Device Identifier.</para></remarks>
 <version version="1.5.4">This enumeration is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.AssociatedPress">
 <summary>Associated Press, East Brunswick, NJ, USA</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.EastmanKodak">
 <summary>Eastman Kodak Co, Rochester, NY, USA</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.HaselbaldElectronicImaging">
 <summary>Hasselblad Electronic Imaging, Göteborg, Sweden</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.Tecnavia">
 <summary>Tecnavia SA, Agno, Switzerland</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.Nikon">
 <summary>Nikon Corporation, Tokyo, Japan</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.CoatsworthCommunications">
 <summary>Coatsworth Communications Inc. Canada</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.AgenceFrancePresse">
 <summary>Agence France Presse, Paris, France</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.TOne">
 <summary>T/One Inc. c/o SEG, Cambridge, MA, USA</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.AssociatedNewspapers">
 <summary>Associated Newspapers, UK</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.Reuters">
 <summary>Reuters London</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.SandiaImagingSystems">
 <summary>Sandia Imaging Systems Inc, Carrollton, TX, USA</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.DeutschePresseAgentur">
 <summary>Deutsche Presse-Agentur GmbH, Hamburg, Germany</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcDataTypes.ManufacturersIdentificationNumber.Visualize">
 <summary>Visualize, Madrid, Spain</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.RecordNumbers">
 <summary>Numbers of IPTC records (groups of tags)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.RecordNumbers.Envelope">
 <summary>Contains internal IPTC data used formerly in telecommunications. Now it is considered being deprecated and is not widely in use.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.RecordNumbers.Application">
 <summary>This record contain informative data about content. Whole record is optional, but when any tag is used then mandatory tags are mandatory.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.RecordNumbers.DigitalNewsphotoParameter">
 <summary>This record provides image parameters. The record is optional however when used some datasets are mandatory.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.RecordNumbers.NotAllocated5">
 <summary>Unallocated IPTC Record. <see cref="N:Tools.MetadataT.IptcT"/> uses it for custom proprietary properties.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.RecordNumbers.PreObjectDataDescriptorRecord">
 <summary>Information about ObjectData (before object has been sent)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.RecordNumbers.ObjectDataRecord">
 <summary>Contains embeded object</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.RecordNumbers.PostObjectDataDescriptorRecord">
 <summary>Confirmation of size of ObjectData</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.EnvelopeTags">
 <summary>Numbers of data sets (tags) inside record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.Envelope"/> (1)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.ModelVersion">
 <summary>A number identifying the version of the Information Interchange Model, Part I, utilised by the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ModelVersion"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.Destination">
 <summary>This DataSet is to accommodate some providers who require routing information above the appropriate OSI layers.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.Destination"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.FileFormat">
 <summary>A number representing the file format.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.FileFormat"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.FileFormatVersion">
 <summary>A binary number representing the particular version of the <see cref="F:Tools.MetadataT.IptcT.EnvelopeTags.FileFormat"/></summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.FileFormatVersion"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.ServiceIdentifier">
 <summary>Identifies the provider and product.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ServiceIdentifier"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.EnvelopeNumber">
 <summary>The characters form a number that will be unique for the date specified in <see cref="F:Tools.MetadataT.IptcT.EnvelopeTags.DateSent"/> and for the Service Identifier specified in <see cref="F:Tools.MetadataT.IptcT.EnvelopeTags.ServiceIdentifier"/>.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.EnvelopeNumber"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.ProductID">
 <summary>Allows a provider to identify subsets of its overall service.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ProductID"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.EnvelopePriority">
 <summary>Specifies the envelope handling priority and not the editorial urgency (see 2:10, <see cref="P:Tools.MetadataT.IptcT.Iptc.Urgency"/>).</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.EnvelopePriority"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.DateSent">
 <summary>Indicates year, month and day the service sent the material.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.DateSent"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.TimeSent">
 <summary>This is the time the service sent the material.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.TimeSent"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.CodedCharacterSet">
 <summary>Array of bytes consisting of one or more control functions used for the announcement, invocation or designation of coded character sets. The control functions follow the ISO 2022 standard and may consist of the escape control character and one or more graphic characters. For more details see Appendix C, the IPTC-NAA Code Library.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.CodedCharacterSet"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.UNO">
 <summary>UNO Unique Name of Object, providing eternal, globally unique identification for objects as specified in the IIM, independent of provider and for any media form.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.UNO"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.ARMIdentifier">
 <summary>The DataSet identifies the Abstract Relationship Method (ARM) which is described in a document registered by the originator of the ARM with the IPTC and NAA.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ARMIdentifier"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.EnvelopeTags.ARMVersion">
 <summary>A number representing the particular version of the ARM specified in DataSet <see cref='F:Tools.MetadataT.IptcT.EnvelopeTags.ARMIdentifier'/>.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ARMVersion"/> for more info.</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.ApplicationTags">
 <summary>Numbers of data sets (tags) inside record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.Application"/> (2)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.RecordVersion">
 <summary>A number identifying the version of the Information Interchange Model, Part II (Record 2:xx), utilised by the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.RecordVersion"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ObjectTypeReference">
 <summary>The Object Type is used to distinguish between different types of objects within the IIM.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ObjectTypeReference"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ObjectAttributeReference">
 <summary>The Object Attribute defines the nature of the object independent of the Subject.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ObjectAttributeReference"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ObjectName">
 <summary>Used as a shorthand reference for the object. Changes to existing data, such as updated stories or new crops on photos, should be identified in Edit Status.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ObjectName"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.EditStatus">
 <summary>Status of the objectdata, according to the practice of the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.EditStatus"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.EditorialUpdate">
 <summary>Indicates the type of update that this object provides to a previous object. The link to the previous object is made using the ARM (DataSets 1:120 and 1:122 (<see cref='P:Tools.MetadataT.IptcT.Iptc.ARM'/>)), according to the practices of the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.EditorialUpdate"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.Urgency">
 <summary>Specifies the editorial urgency of content and not necessarily the envelope handling priority (see 1:60, <see cref="P:Tools.MetadataT.IptcT.Iptc.EnvelopePriority"/>).</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.Urgency"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.SubjectReference">
 <summary>The Subject Reference is a structured definition of the subject matter.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.SubjectReference"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.Category">
 <summary>Identifies the subject of the objectdata in the opinion of the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.Category"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.SupplementalCategory">
 <summary>Supplemental categories further refine the subject of an objectdata.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.SupplementalCategory"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.FixtureIdentifier">
 <summary>Identifies objectdata that recurs often and predictably.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.FixtureIdentifier"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.Keywords">
 <summary>Used to indicate specific information retrieval words.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.Keywords"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ContentLocationCode">
 <summary>Indicates the code of a country/geographical location referenced by the content of the object.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ContentLocationCode"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ContentLocationName">
 <summary>Provides a full, publishable name of a country/geographical location referenced by the content of the object, according to guidelines of the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ContentLocationName"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ReleaseDate">
 <summary>The earliest date the provider intends the object to be used.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ReleaseDate"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ReleaseTime">
 <summary>The earliest time the provider intends the object to be used.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ReleaseTime"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ExpirationDate">
 <summary>The latest date the provider or owner intends the objectdata to be used.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ExpirationDate"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ExpirationTime">
 <summary>The latest time the provider or owner intends the objectdata to be used.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ExpirationTime"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.SpecialInstructions">
 <summary>Other editorial instructions concerning the use of the objectdata, such as embargoes and warnings.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.SpecialInstructions"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ActionAdvised">
 <summary>Indicates the type of action that this object provides to a previous object.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ActionAdvised"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ReferenceService">
 <summary>Identifies the Service Identifier of a prior envelope to which the current object refers.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ReferenceService"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ReferenceDate">
 <summary>Identifies the date of a prior envelope to which the current object refers.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ReferenceDate"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ReferenceNumber">
 <summary>Identifies the Envelope Number of a prior envelope to which the current object refers.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ReferenceNumber"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.DateCreated">
 <summary>The date the intellectual content of the objectdata was created rather than the date of the creation of the physical representation.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.DateCreated"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.TimeCreated">
 <summary>The time the intellectual content of the objectdata current source material was created rather than the creation of the physical representation.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.TimeCreated"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.DigitalCreationDate">
 <summary>The date the digital representation of the objectdata was created.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.DigitalCreationDate"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.DigitalCreationTime">
 <summary>The time the digital representation of the objectdata was created.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.DigitalCreationTime"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.OriginatingProgram">
 <summary>Identifies the type of program used to originate the objectdata.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.OriginatingProgram"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ProgramVersion">
 <summary>Identifies the type of program used to originate the objectdata.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ProgramVersion"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ObjectCycle">
 <summary>Virtually only used in North America.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ObjectCycle"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ByLine">
 <summary>Contains name of the creator of the objectdata, e.g. writer, photographer or graphic artist.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ByLine"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ByLineTitle">
 <summary>A by-line title is the title of the creator or creators of an objectdata. Where used, a by-line title should follow the by-line it modifies.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ByLineTitle"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.City">
 <summary>Identifies city of objectdata origin according to guidelines established by the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.City"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.SubLocation">
 <summary>Identifies the location within a city from which the objectdata originates, according to guidelines established by the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.SubLocation"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ProvinceState">
 <summary>Identifies Province/State of origin according to guidelines established by the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ProvinceState"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.CountryPrimaryLocationCode">
 <summary>Indicates the code of the country/primary location where the intellectual property of the objectdata was created, e.g. a photo was taken, an event occurred.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.CountryPrimaryLocationCode"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.CountryPrimaryLocationName">
 <summary>Provides full, publishable, name of the country/primary location where the intellectual property of the objectdata was created, according to guidelines of the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.CountryPrimaryLocationName"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.OriginalTransmissionReference">
 <summary>A code representing the location of original transmission according to practices of the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.OriginalTransmissionReference"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.Headline">
 <summary>A publishable entry providing a synopsis of the contents of the objectdata.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.Headline"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.Credit">
 <summary>Identifies the provider of the objectdata, not necessarily the owner/creator.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.Credit"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.Source">
 <summary>Identifies the original owner of the intellectual content of the objectdata.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.Source"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.CopyrightNotice">
 <summary>Contains any necessary copyright notice.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.CopyrightNotice"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.Contact">
 <summary>Identifies the person or organisation which can provide further background information on the objectdata.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.Contact"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.CaptionAbstract">
 <summary>A textual description of the objectdata, particularly used where the object is not text.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.CaptionAbstract"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.WriterEditor">
 <summary>Identification of the name of the person involved in the writing, editing or correcting the objectdata or caption/abstract.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.WriterEditor"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.RasterizedeCaption">
 <summary>Image width 460 pixels and image height 128 pixels. Scanning direction bottom to top, left to right.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.RasterizedeCaption"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ImageType">
 <summary>Image Type</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ImageType"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ImageOrientation">
 <summary>Indicates the layout of the image area.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ImageOrientation"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.LanguageIdentifier">
 <summary>Describes the major national language of the object, according to the 2-letter codes of ISO 639:1988.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.LanguageIdentifier"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.AudioType">
 <summary>Type of audio in objectdata</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.AudioType"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.AudioSamplingRate">
 <summary>Sampling rate, representing the sampling rate in hertz (Hz).</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.AudioSamplingRate"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.AudioSamplingResolution">
 <summary>The number of bits in each audio sample.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.AudioSamplingResolution"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.AudioDuration">
 <summary>The running time of an audio objectdata when played back at the speed at which it was recorded.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.AudioDuration"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.AudioOutcue">
 <summary>Identifies the content of the end of an audio objectdata, according to guidelines established by the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.AudioOutcue"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ObjectDataPreviewFileFormat">
 <summary>The file format of the ObjectData Preview.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewFileFormat"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ObjectDataPreviewFileFormatVersion">
 <summary>The particular version of the ObjectData Preview File Format specified in <see cref="F:Tools.MetadataT.IptcT.ApplicationTags.ObjectDataPreviewFileFormat"/></summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewFileFormatVersion"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.ApplicationTags.ObjectDataPreviewData">
 <summary>Maximum size of 256000 octets consisting of binary data.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ObjectDataPreviewData"/> for more info.</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags">
 <summary>Numbers of data sets (tags) inside record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.DigitalNewsphotoParameter"/> (3)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.RecordVersion3">
 <summary>A binary number representing the version of the Digital Newsphoto Parameter Record utilised by the provider.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.RecordVersion3"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.PictureNumber">
 <summary>The picture number provides a universally unique reference to an image.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.PictureNumber"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.PixelsPerLine">
 <summary>A number representing the number of pixels in a scan line for the component with the highest resolution.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.PixelsPerLine"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.NumberOfLines">
 <summary>A number representing the number of scan lines comprising the image for the component with the highest resolution.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.NumberOfLines"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.PixelSizeInScanningDirection">
 <summary>A number indicating the number of pixels per unit length in the scanning direction.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.PixelSizeInScanningDirection"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.PixelSizePerpendicularToScanningDirection">
 <summary>A number indicating the number of pixels per unit length perpendicular to the scanning direction.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.PixelSizePerpendicularToScanningDirection"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.SupplementType">
 <summary>A number indicating the image content.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.SupplementType"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.ColourRepresentation">
 <summary>Indicates colour representation</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ColourRepresentation"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.InterchangeColourSpace">
 <summary>A value indicating the colour space in which the pixel values are expressed for each component in the image.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.InterchangeColourSpace"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.ColourSequence">
 <summary>Each of 1 to four octets contains a binary number that relates to the colour component using the identification number assigned to it in the appendix for each colour space.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ColourSequence"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.IccInputColourProfile">
 <summary>Specifies the International Color Consortium profile for the scanning/source device used to generate the digital image files.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.IccInputColourProfile"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.ColourCalibrationMatrixTable">
 <summary>This DataSet is no longer required as its contents have been rendered obsolete by the introduction of DataSet P3:66 (ICC Input Colour Profile).</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ColourCalibrationMatrixTable"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.LookupTable">
 <summary>Consists of one, three or four one-dimensional lookup tables (LUT).</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.LookupTable"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.NumberOfIndexEntries">
 <summary>A binary number representing the number of index entries in the DataSet 3:85 (<see cref="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.ColourPalette"/>).</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.NumberOfIndexEntries"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.ColourPalette">
 <summary>In a single-frame colour image, a colour is described with a single sample per pixel.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ColourPalette"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.NumberOfBitsPerSample">
 <summary>A number between 1 and 16 that indicates the number of bits per pixel value used as entries in the Colour Palette. These values are found in the objectdata itself.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.NumberOfBitsPerSample"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.SamplingStructure">
 <summary>A number defining the spatial and temporal relationship between pixels.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.SamplingStructure"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.ScanningDirection">
 <summary>A number indicating the correct relative two dimensional order of the pixels in the objectdata. Eight possibilities exist.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ScanningDirection"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.ImageRotation">
 <summary>A number indicating the clockwise rotation applied to the image for presentation.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ImageRotation"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.DataCompressionMethod">
 <summary>Specifies data compression method</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.DataCompressionMethod"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.QuantisationMethod">
 <summary>Contains a binary number identifying the quantisation law.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.QuantisationMethod"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.EndPoints">
 <summary>These end points apply to the coding process.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.EndPoints"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.ExcursionTolerance">
 <summary>Indicates if values outside the range defined by the end points in DataSet 3:125 may occur.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ExcursionTolerance"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.BitsPerComponent">
 <summary>Contains a sequence of one or more octets describing the number of bits used to encode each component. The sequence is specified by the order of components in DataSet 3:65.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.BitsPerComponent"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.MaximumDensityRange">
 <summary>A binary value which specifies the maximum density range multiplied by 100.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.MaximumDensityRange"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.DigitalNewsphotoParameterTags.GammaCompensatedValue">
 <summary>A binary value which specifies the value of gamma for the device multiplied by 100.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.GammaCompensatedValue"/> for more info.</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.NotAllocated5Tags">
 <summary>Numbers of data sets (tags) inside record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.NotAllocated5"/> (5)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.NotAllocated5Tags.OverallRating">
 <summary>Overall rating of the subject</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.OverallRating"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.NotAllocated5Tags.TechnicalQuality">
 <summary>Rates technical quality of subject data (e.g. Is the photo sharp?)</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.TechnicalQuality"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.NotAllocated5Tags.ArtQuality">
 <summary>Rates artistic quality of subject data (i.e. How nice it is?)</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ArtQuality"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.NotAllocated5Tags.InformationValue">
 <summary>Rates information value of subject data (i.e. Does it provide any valuable information?)</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.InformationValue"/> for more info.</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.PreObjectDataDescriptorRecordTags">
 <summary>Numbers of data sets (tags) inside record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.PreObjectDataDescriptorRecord"/> (7)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.PreObjectDataDescriptorRecordTags.SizeMode">
 <summary>The octet is set to the binary value of '0' if the size of the objectdata is not known and is set to '1' if the size of the objectdata is known at the beginning of transfer.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.SizeMode"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.PreObjectDataDescriptorRecordTags.MaxSubfileSize">
 <summary>The maximum size for the following Subfile DataSet(s).</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.MaxSubfileSize"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.PreObjectDataDescriptorRecordTags.ObjectDataSizeAnnounced">
 <summary>A binary number representing the overall size of the objectdata, expressed in octets, not including tags, if that size is known when transfer commences.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ObjectDataSizeAnnounced"/> for more info.</remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.PreObjectDataDescriptorRecordTags.MaximumObjectDataSize">
 <summary>Used when objectdata size is not known, indicating the largest size, expressed in octets, that the objectdata can possibly have, not including tags.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.MaximumObjectDataSize"/> for more info.</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.ObjectDataRecordTags">
 <summary>Numbers of data sets (tags) inside record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.ObjectDataRecord"/> (8)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.ObjectDataRecordTags.Subfile">
 <summary>Subfile DataSet containing the objectdata itself.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.Subfile"/> for more info.</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.PostObjectDataDescriptorRecordTags">
 <summary>Numbers of data sets (tags) inside record <see cref="F:Tools.MetadataT.IptcT.RecordNumbers.PostObjectDataDescriptorRecord"/> (9)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.PostObjectDataDescriptorRecordTags.ConfirmedObjectDataSize">
 <summary>Total size of the objectdata, in octets, without tags.</summary>
 <remarks>See <seealso cref="P:Tools.MetadataT.IptcT.Iptc.ConfirmedObjectDataSize"/> for more info.</remarks>
</member>
<member name="T:Tools.MetadataT.IptcT.Groups">
 <summary>Groups of tags</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Groups.ARM">
 <summary>Abstract Relation Method</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Groups.ContentLocation">
 <summary>Country/geographical location referenced by the content of the object</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Groups.Reference">
 <summary>Identifies a prior envelope to which the current object refers.</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Groups.ByLineInfo">
 <summary>Creator of the object data</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.Groups.ObjectDataPreview">
 <summary>Preview of embeded object</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.LengthConstraintViolationException">
 <summary>Exception thrown when length constraint of string- or byte-oriented IPTC property is violated (and such violation is not allowed)</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.LengthConstraintViolationException.#ctor(System.String,System.Int32,System.Boolean)">
 <summary>CTor from property name, maximal allowed lenght (in bytes) and fixed indicator</summary>
 <param name="PropertyName">Name of property setting of which caused the exception (see <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.PropertyName"/>)</param>
 <param name="MaximalLength">Maximal length (in bytes) allowed for property value (see <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.MaximalLength"/></param>
 <param name="Fixed">True when <paramref name="MaximalLength"/> is also  inimal length (in bytes) allowed for property value (and thus the only allowed lenght) (see <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.Fixed"/>)</param>
</member>
<member name="M:Tools.MetadataT.IptcT.LengthConstraintViolationException.#ctor(Tools.MetadataT.IptcT.DataSetIdentification,System.Int32,System.Boolean)">
 <summary>CTor from <see cref="T:Tools.MetadataT.IptcT.DataSetIdentification"/>, maximal allowed lenght (in bytes) and fixed indicator</summary>
 <param name="Property">DataSet (IPTC property) which caused the exception (see <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.PropertyName"/>)</param>
 <param name="MaximalLength">Maximal length (in bytes) allowed for property value (see <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.MaximalLength"/></param>
 <param name="Fixed">True when <paramref name="MaximalLength"/> is also  inimal length (in bytes) allowed for property value (and thus the only allowed lenght) (see <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.Fixed"/>)</param>
</member>
<member name="F:Tools.MetadataT.IptcT.LengthConstraintViolationException._PropertyName">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.PropertyName"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.LengthConstraintViolationException._MaximalLength">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.MaximalLength"/> property</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.LengthConstraintViolationException._Fixed">
 <summary>Contains value of the <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.Fixed"/> property</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.PropertyName">
 <summary>Name of property setting of which caused the exception</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.MaximalLength">
 <summary>Maximal length (in bytes) allowed for property value</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.Fixed">
 <summary>True when <see cref="P:Tools.MetadataT.IptcT.LengthConstraintViolationException.MaximalLength"/> is also  inimal length (in bytes) allowed for property value (and thus the only allowed lenght)</summary>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcTypes">
 <summary>Types od data used by IPTC tags</summary>
 <version version="1.5.4">Added <see cref="F:Tools.MetadataT.IptcT.IptcTypes.PictureNumber"/></version>
 <version version="1.5.4">Added <see cref="F:Tools.MetadataT.IptcT.IptcTypes.UInt_Binary"/></version>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.UnsignedBinaryNumber">
 <summary>Unsigned binary number of unknown length (represented by <see cref="T:System.UInt64"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.Boolean_Binary">
 <summary>Binary stored boolean value (can be stored in multiple bytes. If any of bytes is nonzero, value is true) (represented by <see cref="T:System.Boolean"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.Byte_Binary">
 <summary>Binary stored 1 byte long unsigned integer (represented by <see cref="T:System.Byte"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.UShort_Binary">
 <summary>Binary stored 2 byte long unsigned integer (represented by <see cref="T:System.UInt16"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.UInt_Binary">
 <summary>Binary stored 4 byte long unsigned integer (represented by <see cref="T:System.UInt32"/>)</summary>
 <version version="1.5.4">This enum member is new in version 1.5.4</version>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.NumericChar">
 <summary>Number of variable length stored as string.</summary>
 <remarks>
 <list type="table"><listheader><term>Length up to characters</term><description>Represented by</description></listheader>
 <item><term>2</term><description><see cref="T:System.Byte"/></description></item>
 <item><term>4</term><description><see cref="T:System.Int16"/></description></item>
 <item><term>9</term><description><see cref="T:System.Int32"/></description></item>
 <item><term>19</term><description><see cref="T:System.Int64"/></description></item>
 <item><term>29</term><description><see cref="T:System.Decimal"/></description></item>
 <item><term>unknown</term><description><see cref="T:System.Decimal"/></description></item>
 </list>
 </remarks>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.GraphicCharacters">
 <summary>Grahic characters (no whitespaces, no control characters) (represented by <see cref="T:System.String"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.TextWithSpaces">
 <summary>Graphic characters and spaces (no tabs, no CR, no LF, no control characters) (represented by <see cref="T:System.String"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.Text">
 <summary>Printable text (no tabs, no control characters) (represented by <see cref="T:System.String"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.BW460">
 <summary>Black and white bitmap with width 460px (represented <see cref="T:System.Drawing.Bitmap"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.Enum_Binary">
 <summary>Enumeration stored as binary number (represented by various enums)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.Enum_NumChar">
 <summary>Enumeration stored as numeric string (represented by various enums)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.CCYYMMDD">
 <summary>Date stored as numeric characters in the YYYYMMDD format (represented by <see cref="T:System.DateTime"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.CCYYMMDDOmmitable">
 <summary>Date stored as numeric characters in the YYYYMMDD format (represented by <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.OmmitableDate"/>) Each component YYYY, MM and DD can be set to 0 is unknown</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.HHMMSS_HHMM">
 <summary>Time stored as numeric characters (and the ± sign) in format HHMMSS±HHMM (with time-zone offset from UTC) (represented by <see cref="T:Tools.MetadataT.IptcT.IptcDataTypes.Time"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.ByteArray">
 <summary>Generic array of bytes (represented by array of <see cref="T:System.Byte"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.UNO">
 <summary>Unique Object Identifier (represented by <see cref="F:Tools.MetadataT.IptcT.IptcTypes.UNO"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.Num2_Str">
 <summary>Combination of 2-digits number and optional <see cref="T:System.String"/> (represented by <see cref="T:Tools.DrawingT.IPTCt.NumStr2"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.Num3_Str">
 <summary>Combination of 3-digits number and optional <see cref="T:System.String"/> (represented by <see cref="T:Tools.MetadataT.IPTCt.NumStr3"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.SubjectReference">
 <summary>Subject reference (combination of IPR, subject number and description) (represented by <see cref="F:Tools.MetadataT.IptcT.IptcTypes.SubjectReference"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.Alpha">
 <summary>Alphabetic characters from latin alphabet (A-Z and a-z) (represented by <see cref="T:System.String"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.StringEnum">
 <summary>Enum which's values are strings (represented by various enums). Actual string value can be obtained via <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.ImageType">
 <summary>Type of image stored as numeric character and alphabetic character (represented by <see cref="F:Tools.MetadataT.IptcT.IptcTypes.ImageType"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.AudioType">
 <summary>Type of audio stored as numeric character and alphabetic character (represented by <see cref="F:Tools.MetadataT.IptcT.IptcTypes.AudioType"/>)</summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.HHMMSS">
 <summary>Duration in hours, minutes and seconds. Represented by <see cref="T:System.TimeSpan"/></summary>
</member>
<member name="F:Tools.MetadataT.IptcT.IptcTypes.PictureNumber">
 <summary>The picture number provides a universally unique reference to an image</summary>
 <version version="1.5.4">This enumeration member is new in version 1.5.4</version>
</member>
<member name="T:Tools.MetadataT.IptcT.IptcResources">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.Components_d">
<summary>
Looks up a localized string similar to 'Number of components'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.DateIdentifier_d">
<summary>
Looks up a localized string similar to 'Indicates year, month and day the picture number was generated.'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.DateIdentifier_n">
<summary>
Looks up a localized string similar to 'Date Identifier'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.Equipment_d">
<summary>
Looks up a localized string similar to 'Used to indicate equipment type and managed by Manufacturer.'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.Equipment_n">
<summary>
Looks up a localized string similar to 'Equipment'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.IPR_d">
<summary>
Looks up a localized string similar to 'Information Provider Reference A name, registered with the IPTC/NAA, identifying the provider that guarantees the uniqueness of the UNO'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.IPR_d2">
<summary>
Looks up a localized string similar to 'Information Provider Reference'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.IPR_n">
<summary>
Looks up a localized string similar to 'IPR'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.ManufacturerdUniqueIdentity_n">
<summary>
Looks up a localized string similar to 'Manufacturer’s Unique Identity'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.ManufacturersUniqueIdentity_d">
<summary>
Looks up a localized string similar to 'Manufacturer’s Unique Identity (issued by IPTC)'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.NumericIdentifier_d">
<summary>
Looks up a localized string similar to 'A binary number generated each time a picture number is created and being unique for the same device and for the date contained in this DataSet.'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.NumericIdentifier_n">
<summary>
Looks up a localized string similar to 'Numeric Identifier'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.ODE_d">
<summary>
Looks up a localized string similar to 'Object Descriptor Element In conjunction with the UCD and the IPR, a string of characters ensuring the uniqueness of the UNO.'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.ODE_n">
<summary>
Looks up a localized string similar to 'ODE'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.OVI_d">
<summary>
Looks up a localized string similar to 'Object Variant Indicator A string of characters indicating technical variants of the object such as partial objects, or changes of file formats, and coded character sets.'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.StringValueOfTheProperty0CanBeMaximally1BytesLong">
<summary>
Looks up a localized string similar to 'String value of the property {0} can be maximally {1} bytes long.'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.StringValueOfTheProperty0MustBe1BytesLong">
<summary>
Looks up a localized string similar to 'String value of the property {0} must be {1} bytes long.'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectDetailName_d">
<summary>
Looks up a localized string similar to 'A text representation of the Subject Detail Number'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectDetailName_n">
<summary>
Looks up a localized string similar to 'Subject Detail Name'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectDetailNumber_d">
<summary>
Looks up a localized string similar to 'Detail component of Subject Reference Number'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectDetailNumber_n">
<summary>
Looks up a localized string similar to 'Subject Detail Number'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectMatterName_d">
<summary>
Looks up a localized string similar to 'A text representation of the Subject Matter Number'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectMatterName_n">
<summary>
Looks up a localized string similar to 'Subject Matter Name'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectMatterNumber_d">
<summary>
Looks up a localized string similar to 'Matter component of Subject Reference Number'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectMatterNumber_n">
<summary>
Looks up a localized string similar to 'Subject Matter Number'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectName_d">
<summary>
Looks up a localized string similar to 'A text representation of the Subject Number (maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix H, or in the language of the service as indicated in DataSet Language Identifier (2:135)'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectName_n">
<summary>
Looks up a localized string similar to 'Subject Name'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectNumber_d">
<summary>
Looks up a localized string similar to 'Subject component of Subject Reference Number'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.SubjectNumber_n">
<summary>
Looks up a localized string similar to 'Subject Number'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.Type_d">
<summary>
Looks up a localized string similar to 'Type of components'.
</summary>
</member>
<member name="P:Tools.MetadataT.IptcT.IptcResources.UCD_d">
<summary>
Looks up a localized string similar to 'UNO Creation Date Specifies a 24 hour period in which the further elements of the UNO have to be unique.'.
</summary>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.Components_dFormat">
<summary>
The stub formatting method returning the Components_d property value.
</summary>
<returns>The Components_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.DateIdentifier_dFormat">
<summary>
The stub formatting method returning the DateIdentifier_d property value.
</summary>
<returns>The DateIdentifier_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.DateIdentifier_nFormat">
<summary>
The stub formatting method returning the DateIdentifier_n property value.
</summary>
<returns>The DateIdentifier_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.Equipment_dFormat">
<summary>
The stub formatting method returning the Equipment_d property value.
</summary>
<returns>The Equipment_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.Equipment_nFormat">
<summary>
The stub formatting method returning the Equipment_n property value.
</summary>
<returns>The Equipment_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.IPR_dFormat">
<summary>
The stub formatting method returning the IPR_d property value.
</summary>
<returns>The IPR_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.IPR_d2Format">
<summary>
The stub formatting method returning the IPR_d2 property value.
</summary>
<returns>The IPR_d2 property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.IPR_nFormat">
<summary>
The stub formatting method returning the IPR_n property value.
</summary>
<returns>The IPR_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.ManufacturerdUniqueIdentity_nFormat">
<summary>
The stub formatting method returning the ManufacturerdUniqueIdentity_n property value.
</summary>
<returns>The ManufacturerdUniqueIdentity_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.ManufacturersUniqueIdentity_dFormat">
<summary>
The stub formatting method returning the ManufacturersUniqueIdentity_d property value.
</summary>
<returns>The ManufacturersUniqueIdentity_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.NumericIdentifier_dFormat">
<summary>
The stub formatting method returning the NumericIdentifier_d property value.
</summary>
<returns>The NumericIdentifier_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.NumericIdentifier_nFormat">
<summary>
The stub formatting method returning the NumericIdentifier_n property value.
</summary>
<returns>The NumericIdentifier_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.ODE_dFormat">
<summary>
The stub formatting method returning the ODE_d property value.
</summary>
<returns>The ODE_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.ODE_nFormat">
<summary>
The stub formatting method returning the ODE_n property value.
</summary>
<returns>The ODE_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.OVI_dFormat">
<summary>
The stub formatting method returning the OVI_d property value.
</summary>
<returns>The OVI_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.StringValueOfTheProperty0CanBeMaximally1BytesLongFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'String value of the property {0} can be maximally {1} bytes long.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.StringValueOfTheProperty0MustBe1BytesLongFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'String value of the property {0} must be {1} bytes long.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectDetailName_dFormat">
<summary>
The stub formatting method returning the SubjectDetailName_d property value.
</summary>
<returns>The SubjectDetailName_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectDetailName_nFormat">
<summary>
The stub formatting method returning the SubjectDetailName_n property value.
</summary>
<returns>The SubjectDetailName_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectDetailNumber_dFormat">
<summary>
The stub formatting method returning the SubjectDetailNumber_d property value.
</summary>
<returns>The SubjectDetailNumber_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectDetailNumber_nFormat">
<summary>
The stub formatting method returning the SubjectDetailNumber_n property value.
</summary>
<returns>The SubjectDetailNumber_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectMatterName_dFormat">
<summary>
The stub formatting method returning the SubjectMatterName_d property value.
</summary>
<returns>The SubjectMatterName_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectMatterName_nFormat">
<summary>
The stub formatting method returning the SubjectMatterName_n property value.
</summary>
<returns>The SubjectMatterName_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectMatterNumber_dFormat">
<summary>
The stub formatting method returning the SubjectMatterNumber_d property value.
</summary>
<returns>The SubjectMatterNumber_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectMatterNumber_nFormat">
<summary>
The stub formatting method returning the SubjectMatterNumber_n property value.
</summary>
<returns>The SubjectMatterNumber_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectName_dFormat">
<summary>
The stub formatting method returning the SubjectName_d property value.
</summary>
<returns>The SubjectName_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectName_nFormat">
<summary>
The stub formatting method returning the SubjectName_n property value.
</summary>
<returns>The SubjectName_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectNumber_dFormat">
<summary>
The stub formatting method returning the SubjectNumber_d property value.
</summary>
<returns>The SubjectNumber_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.SubjectNumber_nFormat">
<summary>
The stub formatting method returning the SubjectNumber_n property value.
</summary>
<returns>The SubjectNumber_n property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.Type_dFormat">
<summary>
The stub formatting method returning the Type_d property value.
</summary>
<returns>The Type_d property value.</returns>
</member>
<member name="M:Tools.MetadataT.IptcT.IptcResources.UCD_dFormat">
<summary>
The stub formatting method returning the UCD_d property value.
</summary>
<returns>The UCD_d property value.</returns>
</member>
<member name="T:Tools.MetadataT.MetadataPropertyDescriptor`1">
 <summary>Descripbes a metadata property</summary>
 <typeparam name="TOwner">Type of <see cref="T:Tools.MetadataT.IMetadata"/> that constructed type provides metadata for</typeparam>
 <remarks>This is a helper class used internally by some simplier <see cref="T:Tools.MetadataT.IMetadata"/> implementations</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.MetadataPropertyDescriptor`1.ValueGetter">
 <summary>Gets or sets a method that gets metadata value</summary>
 <remarks>Argument of the method is metadata instance. Return value of the method is metadata value.</remarks>                       
 <exception cref="T:System.Exception">Delegate being set is rejected by derived class (see <see cref="M:Tools.MetadataT.MetadataPropertyDescriptor`1.SetValueGetterImpl(System.Func{`0,System.Object})"/>)</exception>
</member>
<member name="M:Tools.MetadataT.MetadataPropertyDescriptor`1.SetValueGetterImpl(System.Func{`0,System.Object})">
 <summary>When overriden in derived class validates that delegate passed to setter of the <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.ValueGetter"/> property is acceptable by derived class.</summary>
 <param name="value">Proposed new value of the <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.ValueGetter"/> property</param>
 <remarks>
 If validation fails throw an exception. If validation succeeds call base class method.
 <para>This implementation does no validation. It accepts any value and just stores it in backing field for the <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.ValueGetter"/> property</para>
 </remarks>
 <exception cref="T:System.Exception">When overriden by derived class: <paramref name="value"/> is regected by derived class</exception>
</member>
<member name="P:Tools.MetadataT.MetadataPropertyDescriptor`1.Key">
 <summary>Gets or sets key of this metadata item</summary>
</member>
<member name="P:Tools.MetadataT.MetadataPropertyDescriptor`1.HumanNameGetter">
 <summary>Gets or sets delagate that returns human-friendly name of this property</summary>
</member>
<member name="P:Tools.MetadataT.MetadataPropertyDescriptor`1.DescriptionGetter">
 <summary>Gets or sets delegate that returns human-readable description of this property</summary>
</member>
<member name="M:Tools.MetadataT.MetadataPropertyDescriptor`1.#ctor(System.String,System.Func{`0,System.Object},System.Func{System.String},System.Func{System.String})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.MetadataT.MetadataPropertyDescriptor`1"/> class</summary>
 <param name="key">Key of metadata property</param>
 <param name="valueGetter">Delegate for getting value of metadata property</param>
 <param name="humanNameGetter">Delegate for getting human-friendly name of the property</param>
 <param name="descriptionGetter">Delegate for getting human-readable description of the property</param>
</member>
<member name="M:Tools.MetadataT.MetadataPropertyDescriptor`1.#ctor(System.String,System.Func{System.String},System.Func{System.String})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.MetadataT.MetadataPropertyDescriptor`1"/> class without passing <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.ValueGetter"/> delegate</summary>
 <param name="key">Key of metadata property</param>
 <param name="humanNameGetter">Delegate for getting human-friendly name of the property</param>
 <param name="descriptionGetter">Delegate for getting human-readable description of the property</param>
 <remarks>The <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.ValueGetter"/> proeprty of newly created instance should be set ASAP after creating a new instance using this CTor - ideally in derived class CTor.</remarks>
</member>
<member name="M:Tools.MetadataT.MetadataPropertyDescriptor`1.GetValue(`0)">
 <summary>Invokes <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.ValueGetter"/> to get property value</summary>
 <param name="owner"><see cref="T:Tools.MetadataT.IMetadata"/> instance to get value for</param>
 <returns>Metadata value for property identified by <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.Key"/> of <paramref name="owner"/>. Null if <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.ValueGetter"/> is null</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is null</exception>
</member>
<member name="P:Tools.MetadataT.MetadataPropertyDescriptor`1.HumanName">
 <summary>Invokes <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.HumanNameGetter"/> to get human-friendly name of this property</summary>
 <returns>Human-friendly name of property identified by <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.Key"/>. Null if <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.HumanNameGetter"/> isnull.</returns>
</member>
<member name="P:Tools.MetadataT.MetadataPropertyDescriptor`1.Description">
 <summary>Invokes <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.DescriptionGetter"/> to get human-readable description of this property</summary>
 <returns>Human-readable description of property identified by <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.Key"/>. Null if <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.DescriptionGetter"/> isnull.</returns>
</member>
<member name="T:Tools.MetadataT.MetadataPropertyDescriptor`2">
 <summary>Describes a type-safe metadata property</summary>
 <typeparam name="TOwner">Type of <see cref="T:Tools.MetadataT.IMetadata"/> that constructed type provides metadata for</typeparam>
 <typeparam name="TValue">Type of property value</typeparam>
 <remarks>This is a helper class used internally by some simplier <see cref="T:Tools.MetadataT.IMetadata"/> implementations</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.MetadataT.MetadataPropertyDescriptor`2.#ctor(System.String,System.Func{`0,`1},System.Func{System.String},System.Func{System.String})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.MetadataT.MetadataPropertyDescriptor`1"/> class</summary>
 <param name="key">Key of metadata property</param>
 <param name="valueGetter">Delegate for getting value of metadata property</param>
 <param name="humanNameGetter">Delegate for getting human-friendly name of the property</param>
 <param name="descriptionGetter">Delegate for getting human-readable description of the property</param>
</member>
<member name="M:Tools.MetadataT.MetadataPropertyDescriptor`2.SetValueGetterImpl(System.Func{`0,System.Object})">
 <summary>Validates that delegate passed to setter of the <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`2.ValueGetter"/> property is acceptable by this class.</summary>
 <param name="value">Proposed new value of the <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`2.ValueGetter"/> property</param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is not acceptable as <see cref="T:System.Func`2"/>[<typeparamref name="TOwner"/>, <typeparamref name="TValue"/>]</exception>
</member>
<member name="P:Tools.MetadataT.MetadataPropertyDescriptor`2.ValueGetter">
 <summary>Gets or sets a method that gets metadata value</summary>
 <remarks>Argument of the method is metadata instance. Return value of the method is metadata value.</remarks>
</member>
<member name="M:Tools.MetadataT.MetadataPropertyDescriptor`2.GetValue(`0)">
 <summary>Invokes <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`2.ValueGetter"/> to get property value</summary>
 <param name="owner"><see cref="T:Tools.MetadataT.IMetadata"/> instance to get value for</param>
 <returns>Metadata value for property identified by <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`1.Key"/> of <paramref name="owner"/>. Null if <see cref="P:Tools.MetadataT.MetadataPropertyDescriptor`2.ValueGetter"/> is null</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="owner"/> is null</exception>
</member>
<member name="T:Tools.MetadataT.SystemMetadata">
 <summary>Provides access to system information about file in form of <see cref="T:Tools.MetadataT.IMetadata"/></summary>
 <remarks>This implementation of <see cref="T:Tools.MetadataT.IMetadata"/> supports only named values. Possible values for keys are same as possible values for names.</remarks>
 <version version="1.5.3" stage="Nightly">Class introduced</version>
 <version version="1.5.4">Metadata key <c>IsCompresses</c> renamed to <c>IsCompressed</c></version>
 <version version="1.5.4">This class now internally uses <see cref="T:Tools.MetadataT.MetadataPropertyDescriptor`1"/></version>
</member>
<member name="F:Tools.MetadataT.SystemMetadata.file">
 <summary>Represents file information about which are provided</summary>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.#ctor(System.String)">
 <summary>CTor from file path</summary>
 <param name="FileName">Full path to file</param>
 <exception cref="T:System.IO.FileNotFoundException">File with address <paramref name="FileName"/> does not exist.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have required permission</exception>
 <exception cref="T:System.UnauthorizedAccessException">Access to <paramref name="FileName"/> is denied.</exception>
 <version version="1.5.4">Parameter <c>FileName</c> renamed to <c>fileName</c></version>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.#ctor">
 <summary>Creates a new empty instance of the <see cref="T:Tools.MetadataT.SystemMetadata"/> class</summary>
 <remarks>Instance created by this contructor cannot be used for obtaining metadata. It can be used just for enumeration of supported metadata tags.</remarks>
 <version version="1.5.3">This CTor is new in version 1.5.3</version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.FullPath">
 <summary>Gets the full path of the directory or file.</summary>
 <returns>A string containing the full path.</returns>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.DirectoryName">
 <summary>Gets a string representing the directory's full path.</summary>
 <returns>A string representing the directory's full path.</returns>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentNullException">null was passed in for the directory name.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.FileName">
 <summary>Gets the name of the file.</summary>
 <returns>The name of the file.</returns>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.Size">
 <summary>Gets the size, in bytes, of the current file.</summary>
 <returns>The size of the current file in bytes.</returns>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot update the state of the file or directory.</exception>
 <exception cref="T:System.IO.FileNotFoundException">The file does not exist.  -or- The <see cref="P:Tools.MetadataT.SystemMetadata.Size"/> property is called for a directory.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.CreationTime">
 <summary>Gets the creation time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</summary>
 <returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
 <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.CreationTimeUtc">
 <summary>Gets the creation time, in coordinated universal time (UTC), of the current <see cref="T:System.IO.FileSystemInfo" /> object.</summary>
 <returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
 <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.LastWriteTime">
 <summary>Gets the time when the current file or directory was last written to.</summary>
 <returns>The time the current file was last written.</returns>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.LastWriteTimeUtc">
 <summary>Gets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary>
 <returns>The UTC time when the current file was last written to.</returns>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.LastAccessTime">
 <summary>Gets the time the current file or directory was last accessed.</summary>
 <returns>The time that the current file or directory was last accessed.</returns>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.LastAccessTimeUtc">
 <summary>Gets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary>
 <returns>The UTC time that the current file or directory was last accessed.</returns>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.Extension">
 <summary>Gets the string representing the extension part of the file.</summary>
 <returns>A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.</returns>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.NameWithoutExtension">
 <summary>Returns the file name of the specified path string without the extension.</summary>
 <returns>A <see cref="T:System.String" /> containing the string returned by <see cref="P:Tools.MetadataT.SystemMetadata.FileName" /> minus the last period (.) and all characters following it.</returns>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.IsReadOnly">
 <summary>Getsa value that determines if the current file is read only.</summary>
 <returns>true if the current file is read only; otherwise, false.</returns>
 <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo" /> object is read-only.  -or- This operation is not supported on the current platform.  -or- The caller does not have the required permission.</exception>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.IsCompressed">
 <summary>Gets value that determines if the current file is compressed.</summary>
 <returns>True if the current file is compressed; otherwise false</returns>
 <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.IsSystem">
 <summary>Gets value that determines if the current file is system.</summary>
 <returns>True if the current file is system; otherwise false</returns>
 <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.IsHidden">
 <summary>Gets value that determines if the current file is hidden.</summary>
 <returns>True if the current file is hidden; otherwise false</returns>
 <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.IsEncrypted">
 <summary>Gets value that determines if the current file is hiddne.</summary>
 <returns>True if the current file is hidden; otherwise false</returns>
 <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <version version="1.5.4">Property renamed from <c>IsEncrypred</c> (typo) to <c>IsEncrypted</c></version>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.Attributes">
 <summary>Gets the <see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.</summary>
 <returns><see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.</returns>
 <exception cref="T:System.IO.FileNotFoundException">The specified file does not exist.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
 <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception>
 <version version="1.5.4">Added <see cref="T:Tools.ComponentModelT.LDisplayNameAttribute"/> and <see cref="T:Tools.ComponentModelT.LDescriptionAttribute"/></version>
</member>
<member name="F:Tools.MetadataT.SystemMetadata.properties">
 <summary>Contains definition of <see cref="T:Tools.MetadataT.IMetadata"/> properties</summary>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.ContainsKey(System.String)">
 <summary>Gets value indicating wheather metadata value with given key is present in current instance</summary>
 <param name="key">Key (or name) to check presence of (see <see cref="M:Tools.MetadataT.SystemMetadata.GetPredefinedKeys"/> for possible values)</param>
 <returns>True when value for given key is present; false otherwise</returns>
 <remarks>The <paramref name="key"/> parameter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).
 <para>This implementation returns true forr all predefined keys.</para></remarks>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.GetContainedKeys">
 <summary>Gets keys of all the metadata present in curent instance</summary>
 <returns>Keys in metadata-specific format of all the metadata present in curent instance. Never returns null; may return anempt enumeration.</returns>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.GetDescription(System.String)">
 <summary>Gets localized description for given key (or name)</summary>
 <param name="Key">Key (or name) to get description of</param>
 <returns>Localized description of purpose of metadata item identified by <paramref name="Key"/>; null when description is not available.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> is in invalid format or it is not one of predefined names.</exception>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
 <version version="1.5.4">Descriptions extracted to resource and localized to Czech</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> is now really thrown as documented. Previously returned null.</version>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.GetHumanName(System.String)">
 <summary>Gets localized human-readable name for given key (or name)</summary>
 <param name="Key">Key (or name) to get name for</param>
 <returns>Human-readable descriptive name of metadata item identified by <paramref name="Key"/>; null when no such name is defined/known.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> has invalid formar or it is not one of predefined names.</exception>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
 <version version="1.5.4">Display names extracted to resource and localized to Czech</version>
 <version version="1.5.4"><see cref="T:System.ArgumentException"/> is now really thrown as documented. Previously returned null.</version>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.GetKeyOfName(System.String)">
 <summary>Gets key for predefined name</summary>
 <param name="name">Name to get key for</param>
 <returns>Key in metadata-specific format for given predefined metadata item name</returns>
 <exception cref="T:System.ArgumentException"><paramref name="name"/> is not one of predefined names retuened by <see cref="M:Tools.MetadataT.SystemMetadata.GetPredefinedNames"/>.</exception>
 <remarks>This implementation either returns <paramref name="name"/> or throws <see cref="T:System.ArgumentException"/></remarks>
 <version version="1.5.4">Message of <see cref="T:System.ArgumentException"/> made localizable and localized to Czech</version>
 <version version="1.5.4">Parameter name <c>Name</c> changed to <c>name</c>.</version>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.GetNameOfKey(System.String)">
 <summary>Gets name for key</summary>
 <param name="key">Key to get name for</param>
 <returns>One of predefined names to use instead of <paramref name="key"/>; null when given key has no corresponding name.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid format</exception>
 <remarks>This implementation either returns <paramref name="Name"/> or throws <see cref="T:System.ArgumentException"/></remarks>
 <version version="1.5.4">Message of <see cref="T:System.ArgumentException"/> made localizable and localized to Czech</version>
 <version version="1.5.4">Parameter name <c>Key</c> changed to <c>key</c>.</version>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.GetPredefinedKeys">
 <summary>Gets all keys predefined for curent metadata format</summary>
 <returns>Eumeration containing all predefined (well-known) keys of metadata for this metadata format. Returns always the same enumeration even when values for some keys are not present. Never returns null; may return an empty enumeration.</returns>
 <remarks>Not all predefined keys are required to have corresponding names obtainable via <see cref="M:Tools.MetadataT.SystemMetadata.GetNameOfKey(System.String)"/>.
 <para>This implementation returns aexactly the same collection as <see cref="M:Tools.MetadataT.SystemMetadata.GetPredefinedNames"/>.</para></remarks>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.GetPredefinedNames">
 <summary>Gets all predefined names for metadata keys</summary>
 <returns>Enumeration containing all predefined names of metadata items for this metadada format. Never returns null; may return an empty enumeration.</returns>
 <remarks>This implementation of <see cref="T:Tools.MetadataT.IMetadata"/> in fact supports only retrieval of metadata by name and thus keys keys are same as names.</remarks>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.GetStringValue(System.String)">
 <summary>Gets metadata value with given key as string</summary>
 <param name="Key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.SystemMetadata.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value cannot be obtained</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> is not one of predefined names</exception>
 <version version="1.5.4">Message of <see cref="T:System.ArgumentException"/> made localizable and localized to Czech</version>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.SystemMetadata.GetStringValue(System.String,System.IFormatProvider)">
 <summary>Gets metadata value with given key as string</summary>
 <param name="Key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.SystemMetadata.GetPredefinedKeys"/> for possible values)</param>
 <param name="provider">Culture to be used. If null current is used.</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value cannot be obtained</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> is not one of predefined names</exception>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.Name">
 <summary>Gets name of metadata format represented by implementation</summary>
 <returns>Name to identify this metadata format by. Always returns <see cref="F:Tools.MetadataT.SystemMetadata.SystemName"/>.</returns>
 <remarks>All <see cref="T:Tools.MetadataT.IMetadataProvider">IMetadataProviders</see> returning this format should identify the format by this name.</remarks>
</member>
<member name="F:Tools.MetadataT.SystemMetadata.SystemName">
 <summary>Used to identify system metadata in <see cref="T:Tools.MetadataT.IMetadataProvider"/></summary>
 <seelaso cref="P:Tools.MetadataT.SystemMetadata.Name"/>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.Value(System.String)">
 <summary>Gets medata value with given key</summary>
 <param name="Key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.SystemMetadata.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key; or null if given metadata value cannot be obtained</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> is not one of predefined names</exception>
 <version version="1.5.4">Message of <see cref="T:System.ArgumentException"/> made localizable and localized to Czech</version>
</member>
<member name="P:Tools.MetadataT.SystemMetadata.Disposed">
 <summary>Gets value indicating if this instance was already disposed or not</summary>
 <returns>This implementation always returns false because this class does not implement <see cref="T:System.IDisposable"/></returns>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="T:Tools.MetadataT.IMetadataProvider">
 <summary>Provides metadata information such as image or music metadata</summary>
 <remarks>Purpose of this interface is read-only metadata retrieval</remarks>
 <seelaso cref="T:Tools.MetadataT.IMetadata"/>
 <version version="1.5.2" stage="Nightly">Interface introduced</version>
</member>
<member name="M:Tools.MetadataT.IMetadataProvider.Contains(System.String)">
 <summary>Gets value indicating if metadata of particular type are provided by this provider</summary>
 <param name="MetadataName">Name of metadata type</param>
 <returns>True if this provider contains metadata with given name</returns>
 <version version="1.5.4">Parameter <c>MetadataName</c> renamed to <c>metadataName</c></version>
</member>
<member name="M:Tools.MetadataT.IMetadataProvider.GetContainedMetadataNames">
 <summary>Gets names of metadata actually contained in metadata source represented by this provider</summary>
 <returns>Names of metadata usefull with the <see cref="P:Tools.MetadataT.IMetadataProvider.Metadata(System.String)"/> function. Never returns null; may return an empty enumeration.</returns>
</member>
<member name="M:Tools.MetadataT.IMetadataProvider.GetSupportedMetadataNames">
 <summary>Get all the names of metadata supported by this provider (even when some of the metadata cannot be provided by current instance)</summary>
 <returns>Name sof metadata usefull with the <see cref="P:Tools.MetadataT.IMetadataProvider.Metadata(System.String)"/> function. Never returns null; should not return an empty enumeration.</returns>
</member>
<member name="P:Tools.MetadataT.IMetadataProvider.Metadata(System.String)">
 <summary>Gets metadata of particular type</summary>
 <param name="MetadataName">Name of metadata to get (see <see cref="M:Tools.MetadataT.IMetadataProvider.GetSupportedMetadataNames"/> for possible values)</param>
 <returns>Metadata of requested type; or null if metadata of type <paramref name="MetadataName"/> are not contained in this instance or are not supported by this provider.</returns>
 <version version="1.5.4">Parameter <c>MetadataName</c> renamed to <c>metadataName</c></version>
</member>
<member name="T:Tools.MetadataT.IMetadata">
 <summary>Represents kind of metadata provided by metadata provider (such as Exif or ID3)</summary>
 <remarks>Purpose of this interface is read-only metadata retrieval</remarks>
 <seelaso cref="T:Tools.MetadataT.IMetadataProvider"/>
 <version version="1.5.2" stage="Nightly">Interface introduced</version>
</member>
<member name="P:Tools.MetadataT.IMetadata.Name">
 <summary>Gets name of metadata format represented by implementation</summary>
 <returns>Name to identify this metadata format by</returns>
 <remarks>All <see cref="T:Tools.MetadataT.IMetadataProvider">IMetadataProviders</see> returning this format should identify the format by this name.</remarks>
</member>
<member name="P:Tools.MetadataT.IMetadata.Value(System.String)">
 <summary>Gets medata value with given key</summary>
 <param name="Key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.IMetadata.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key; or null if given metadata value is not supported</returns>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> has invalid format and it is not one of predefined names</exception>
 <remarks>The <paramref name="Key"/> peremeter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IMetadata.ContainsKey(System.String)">
 <summary>Gets value indicating wheather metadata value with given key is present in current instance</summary>
 <param name="Key">Key (or name) to check presence of (see <see cref="M:Tools.MetadataT.IMetadata.GetPredefinedKeys"/> for possible values)</param>
 <returns>True when value for given key is present; false otherwise</returns>
 <remarks>The <paramref name="Key"/> parameter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="Key"/> has invalid format and it is not one of predefined names</exception>
 <version version="1.5.4">Parameter <c>Key</c> renamed to <c>key</c></version>
</member>
<member name="M:Tools.MetadataT.IMetadata.GetContainedKeys">
 <summary>Gets keys of all the metadata present in curent instance</summary>
 <returns>Keys in metadata-specific format of all the metadata present in curent instance. Never returns null; may return anempt enumeration.</returns>
</member>
<member name="M:Tools.MetadataT.IMetadata.GetPredefinedKeys">
 <summary>Gets all keys predefined for curent metadata format</summary>
 <returns>Eumeration containing all predefined (well-known) keys of metadata for this metadata format. Returns always the same enumeration even when values for some keys are not present. Never returns null; may return an empty enumeration.</returns>
 <remarks>Not all predefined keys are required to have corresponding names obtainable via <see cref="M:Tools.MetadataT.IMetadata.GetNameOfKey(System.String)"/>.</remarks>
</member>
<member name="M:Tools.MetadataT.IMetadata.GetPredefinedNames">
 <summary>Gets all predefined names for metadata keys</summary>
 <returns>Enumeration containing all predefined names of metadata items for this metadada format. Never returns null; may return an empty enumeration.</returns>
 <remarks>Metadata format may support 2 formats of retrieving of metadata values: By key and by name. The by-name format is optional.
 Keys are typically computer-friendly strings (like tag numbers or addresses) and metedata format may support values with non-predefined keys.
 Names are typically human-friendly (not-localized) string (like names) and only predefined names are supported (if any). Each name must have its corresponding key. Names are only aliases to certain important keys.</remarks>
</member>
<member name="M:Tools.MetadataT.IMetadata.GetNameOfKey(System.String)">
 <summary>Gets name for key</summary>
 <param name="key">Key to get name for</param>
 <returns>One of predefined names to use instead of <paramref name="key"/>; null when given key has no corresponding name.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid format</exception>
 <version version="1.5.3">Parameter <c>Key</c> renamed to <paramref name="key"/>.</version>
</member>
<member name="M:Tools.MetadataT.IMetadata.GetKeyOfName(System.String)">
 <summary>Gets key for predefined name</summary>
 <param name="name">Name to get key for</param>
 <returns>Key in metadata-specific format for given predefined metadata item name</returns>
 <exception cref="T:System.ArgumentException"><paramref name="name"/> is not one of predefined names retuened by <see cref="M:Tools.MetadataT.IMetadata.GetPredefinedNames"/>.</exception>
 <version version="1.5.3">Parameter <c>Name</c> renamed to <paramref name="name"/>.</version>
</member>
<member name="M:Tools.MetadataT.IMetadata.GetHumanName(System.String)">
 <summary>Gets localized human-readable name for given key (or name)</summary>
 <param name="key">Key (or name) to get name for</param>
 <returns>Human-readable descriptive name of metadata item identified by <paramref name="key"/>; null when no such name is defined/known.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid formar or it is not one of predefined names.</exception>
 <version version="1.5.3">Parameter <c>Key</c> renamed to <paramref name="key"/>.</version>
</member>
<member name="M:Tools.MetadataT.IMetadata.GetDescription(System.String)">
 <summary>Gets localized description for given key (or name)</summary>
 <param name="key">Key (or name) to get description of</param>
 <returns>Localized description of purpose of metadata item identified by <paramref name="key"/>; nul when description is not available.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> is in invalid format or it is not one of predefined names.</exception>
 <version version="1.5.3">Parameter <c>Key</c> renamed to <paramref name="key"/>.</version>
</member>
<member name="M:Tools.MetadataT.IMetadata.GetStringValue(System.String)">
 <summary>Gets metadata value with given key as string</summary>
 <param name="key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.IMetadata.GetPredefinedKeys"/> for possible values)</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value is not supported</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid format and it is not one of predefined names</exception>
 <remarks>The <paramref name="key"/> peremeter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <version version="1.5.3">Parameter <c>Key</c> renamed to <paramref name="key"/>.</version>
</member>
<member name="M:Tools.MetadataT.IMetadata.GetStringValue(System.String,System.IFormatProvider)">
 <summary>Gets metadata value with given key as string using supplied culture</summary>
 <param name="key">Key (or name) to get vaue for (see <see cref="M:Tools.MetadataT.IMetadata.GetPredefinedKeys"/> for possible values)</param>
 <param name="provider">Culture to be used. If null current is used.</param>
 <returns>Value of metadata item with given key as string; or null if given metadata value is not supported</returns>
 <exception cref="T:System.ArgumentException"><paramref name="key"/> has invalid format and it is not one of predefined names</exception>
 <remarks>The <paramref name="key"/> peremeter can be either key in metadata-specific format or predefined name of metadata item (if predefined names are supported).</remarks>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="P:Tools.MetadataT.IMetadata.Disposed">
 <summary>Gets value indicating if this instance was already disposed or not</summary>
 <returns>
 If class that implements <see cref="T:Tools.MetadataT.IMetadata"/> does not implement <see cref="T:System.IDisposable"/> always returns false.
 If class that implements <see cref="T:Tools.MetadataT.IMetadata"/> implements <see cref="T:System.IDisposable"/> returns true when <see cref="M:System.IDisposable.Dispose"/> was called on that instance, false if it was not.
 </returns>
 <version version="1.5.4">This property is new in version 1.5.4</version>
</member>
<member name="T:Tools.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_Attributes">
<summary>
  Looks up a localized string similar to All file attributes OR-ed.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_CreationTime">
<summary>
  Looks up a localized string similar to Date and time when the file was created.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_CreationTimeUtc">
<summary>
  Looks up a localized string similar to Date and time when the file was created coordibates in universal time (UTC).
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_DirectoryName">
<summary>
  Looks up a localized string similar to Path to directory file is saved in.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_Extension">
<summary>
  Looks up a localized string similar to Extension part of file name. That&apos;s part after last dot..
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_FileName">
<summary>
  Looks up a localized string similar to Name of the file with extension.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_FullPath">
<summary>
  Looks up a localized string similar to Full path to file.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_Height">
<summary>
  Looks up a localized string similar to Image height in pixels.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_HorizontalResolution">
<summary>
  Looks up a localized string similar to Image horizontal resolution in pixels per inch.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_IsCompressed">
<summary>
  Looks up a localized string similar to Indicates if file is compresed.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_IsEncrypted">
<summary>
  Looks up a localized string similar to Indicates if file is encrypted.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_IsHidden">
<summary>
  Looks up a localized string similar to Indicates if file is hidden.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_IsReadOnly">
<summary>
  Looks up a localized string similar to Indicates if file is read only.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_IsSystem">
<summary>
  Looks up a localized string similar to Indicates if file is system file.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_LastAccessTime">
<summary>
  Looks up a localized string similar to Date and time the file was last accessed.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_LastAccessTimeUtc">
<summary>
  Looks up a localized string similar to Date and time coordinated in universal time (UTC) the file was last accesed.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_LastWriteTime">
<summary>
  Looks up a localized string similar to Date and time when the file was last written to.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_LastWriteTimeUtc">
<summary>
  Looks up a localized string similar to Date and time coordinated in universal time (UTC) the file was last written to.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_NameWithoutExtension">
<summary>
  Looks up a localized string similar to File name without extension, that&apos;s exluding last dot and text after it..
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_PixelFormat">
<summary>
  Looks up a localized string similar to Image pixel format.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_Size">
<summary>
  Looks up a localized string similar to Size of the file in bytes.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_VerticalResolution">
<summary>
  Looks up a localized string similar to Image vertical resolution in pixels per inch.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.d_Width">
<summary>
  Looks up a localized string similar to Image width in pixels.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.ex_NotKnownImageMetadataItemName">
<summary>
  Looks up a localized string similar to {0} is not known image metadata item name..
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_Attributes">
<summary>
  Looks up a localized string similar to Attributes.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_CreationTime">
<summary>
  Looks up a localized string similar to Creation time.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_CreationTimeUtc">
<summary>
  Looks up a localized string similar to Creation time UTC.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_DirectoryName">
<summary>
  Looks up a localized string similar to Directory.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_Extension">
<summary>
  Looks up a localized string similar to Extension.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_FileName">
<summary>
  Looks up a localized string similar to Name.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_FullPath">
<summary>
  Looks up a localized string similar to Full path.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_Hight">
<summary>
  Looks up a localized string similar to Hight.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_HorizontalResolution">
<summary>
  Looks up a localized string similar to Horizontal resolution.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_IsCompressed">
<summary>
  Looks up a localized string similar to Compressed.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_IsEncrypted">
<summary>
  Looks up a localized string similar to Encrypted.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_IsHidden">
<summary>
  Looks up a localized string similar to Hidden.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_IsReadOnly">
<summary>
  Looks up a localized string similar to Read only.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_IsSystem">
<summary>
  Looks up a localized string similar to System.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_LastAccessTime">
<summary>
  Looks up a localized string similar to Last access time.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_LastAccessTimeUtc">
<summary>
  Looks up a localized string similar to Last access time UTC.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_LastWriteTime">
<summary>
  Looks up a localized string similar to Last change time.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_LastWriteTimeUtc">
<summary>
  Looks up a localized string similar to Last change time UTC.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_NameWithoutExtension">
<summary>
  Looks up a localized string similar to Name without extension.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_PixelFormat">
<summary>
  Looks up a localized string similar to Pixel format.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_Size">
<summary>
  Looks up a localized string similar to Size.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_VerticalResolution">
<summary>
  Looks up a localized string similar to Vertical resolution.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.n_Width">
<summary>
  Looks up a localized string similar to Width.
</summary>
</member>
</members>
</doc>
