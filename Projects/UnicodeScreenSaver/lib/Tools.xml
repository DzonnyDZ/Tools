<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tools
</name>
</assembly>
<members>
<member name="M:Tools.ApplicationServicesT.ApplicationServices.ParseParameters(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>Pareses command line arguments from string array to key-values dictionary</summary>
 <param name="arguments">Application arguments</param>
 <param name="ignore1st">True to indicate that 1st (index 0) arggument in <paramref name="arguments"/> contains application executable name and should be ignored by this method</param>
 <returns>Dictionary containing values in front of = from each parameter as keys aand remainders of parameters as values.</returns>
 <remarks>Each commmand line ergument is expected to have form <c>key</c> or <c>key=value</c></remarks>
</member>
<member name="T:Tools.CodeDomT.Xml2CodeDom">
 <summary>Contains methods for converting various elements form the http://dzonny.cz/xml/schemas/CodeDom XML namespace to objects from <see cref="N:System.CodeDom"/> namespace.</summary>
</member>
<member name="T:Tools.CodeDomT.Xml2CodeDom.Names">
 <summary>Contains definitions of XML elements used by <see cref="M:Tools.CodeDomT.Xml2CodeDom.Xml2CodeDom(System.Xml.Linq.XDocument)"/> class</summary>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Names.#ctor">
 <summary>This method actually does not exists which prevents this class of being instantiated</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.CompileUnit">
 <summary>Represents name of the &lt;CompileUnit> element and CompileUnit type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Namespace">
 <summary>Represents name of the &lt;Namespace> element and Namespace type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.AttributeDeclaration">
 <summary>Represents name of the &lt;AttributeDeclaration> element and AttributeDeclaration type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.AssemblyReference">
 <summary>Represents name of the &lt;AssemblyReference> element and AssemblyReference type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Directive">
 <summary>Represents name of the &lt;Directive> element and Directive type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ChecksumPragma">
 <summary>Represents name of the &lt;ChecksumPragma> element and ChecksumPragma type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.RegionDirective">
 <summary>Represents name of the &lt;RegionDirective> element and RegionDirective type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.NamespaceImport">
 <summary>Represents name of the &lt;NamespaceImport> element and NamespaceImport type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.CommentStatement">
 <summary>Represents name of the &lt;CommentStatement> element and CommentStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.TypeDeclaration">
 <summary>Represents name of the &lt;TypeDeclaration> element and TypeDeclaration type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.AttributeArgument">
 <summary>Represents name of the &lt;AttributeArgument> element and AttributeArgument type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.TypeReference">
 <summary>Represents name of the &lt;TypeReference> element and TypeReference type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.TypeMember">
 <summary>Represents name of the &lt;TypeMember> element and TypeMember type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.TypeParameter">
 <summary>Represents name of the &lt;TypeParameter> element and TypeParameter type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.MemberEvent">
 <summary>Represents name of the &lt;MemberEvent> element and MemberEvent type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.MemberField">
 <summary>Represents name of the &lt;MemberField> element and MemberField type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.MemberMethod">
 <summary>Represents name of the &lt;MemberMethod> element and MemberMethod type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ParameterDeclarationExpression">
 <summary>Represents name of the &lt;ParameterDeclarationExpression> element and ParameterDeclarationExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Statement">
 <summary>Represents name of the &lt;Statement> element and Statement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.MemberProperty">
 <summary>Represents name of the &lt;MemberProperty> element and MemberProperty type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Expression">
 <summary>Represents name of the &lt;Expression> element and Expression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.SnippetTypeMember">
 <summary>Represents name of the &lt;SnippetTypeMember> element and SnippetTypeMember type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Constructor">
 <summary>Represents name of the &lt;Constructor> element and Constructor type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.EntryPointMethod">
 <summary>Represents name of the &lt;EntryPointMethod> element and EntryPointMethod type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.TypeConstructor">
 <summary>Represents name of the &lt;TypeConstructor> element and TypeConstructor type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.LinePragma">
 <summary>Represents name of the &lt;LinePragma> element and LinePragma type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Comment">
 <summary>Represents name of the &lt;Comment> element and Comment type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.SnippetCompileUnit">
 <summary>Represents name of the &lt;SnippetCompileUnit> element and SnippetCompileUnit type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.AssignStatement">
 <summary>Represents name of the &lt;AssignStatement> element and AssignStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.AttachEventStatement">
 <summary>Represents name of the &lt;AttachEventStatement> element and AttachEventStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ConditionStatement">
 <summary>Represents name of the &lt;ConditionStatement> element and ConditionStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ExpressionStatement">
 <summary>Represents name of the &lt;ExpressionStatement> element and ExpressionStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.GotoStatement">
 <summary>Represents name of the &lt;GotoStatement> element and GotoStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.IterationStatement">
 <summary>Represents name of the &lt;IterationStatement> element and IterationStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.LabeledStatement">
 <summary>Represents name of the &lt;LabeledStatement> element and LabeledStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.MethodReturnStatement">
 <summary>Represents name of the &lt;MethodReturnStatement> element and MethodReturnStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.RemoveEventStatement">
 <summary>Represents name of the &lt;RemoveEventStatement> element and RemoveEventStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.SnippetStatement">
 <summary>Represents name of the &lt;SnippetStatement> element and SnippetStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ThrowExceptionStatement">
 <summary>Represents name of the &lt;ThrowExceptionStatement> element and ThrowExceptionStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.TryCatchFinallyStatement">
 <summary>Represents name of the &lt;TryCatchFinallyStatement> element and TryCatchFinallyStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.VariableDeclarationStatement">
 <summary>Represents name of the &lt;VariableDeclarationStatement> element and VariableDeclarationStatement type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ArgumentReferenceExpression">
 <summary>Represents name of the &lt;ArgumentReferenceExpression> element and ArgumentReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ArrayCreateExpression">
 <summary>Represents name of the &lt;ArrayCreateExpression> element and ArrayCreateExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ArrayIndexerExpression">
 <summary>Represents name of the &lt;ArrayIndexerExpression> element and ArrayIndexerExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.BaseReferenceExpression">
 <summary>Represents name of the &lt;BaseReferenceExpression> element and BaseReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.BinaryOperatorExpression">
 <summary>Represents name of the &lt;BinaryOperatorExpression> element and BinaryOperatorExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.CastExpression">
 <summary>Represents name of the &lt;CastExpression> element and CastExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.DefaultValueExpression">
 <summary>Represents name of the &lt;DefaultValueExpression> element and DefaultValueExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.DelegateCreateExpression">
 <summary>Represents name of the &lt;DelegateCreateExpression> element and DelegateCreateExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.DelegateInvokeExpression">
 <summary>Represents name of the &lt;DelegateInvokeExpression> element and DelegateInvokeExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.DirectionExpression">
 <summary>Represents name of the &lt;DirectionExpression> element and DirectionExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.EventReferenceExpression">
 <summary>Represents name of the &lt;EventReferenceExpression> element and EventReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.FieldReferenceExpression">
 <summary>Represents name of the &lt;FieldReferenceExpression> element and FieldReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.IndexerExpression">
 <summary>Represents name of the &lt;IndexerExpression> element and IndexerExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.MethodInvokeExpression">
 <summary>Represents name of the &lt;MethodInvokeExpression> element and MethodInvokeExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.MethodReferenceExpression">
 <summary>Represents name of the &lt;MethodReferenceExpression> element and MethodReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ObjectCreateExpression">
 <summary>Represents name of the &lt;ObjectCreateExpression> element and ObjectCreateExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.PrimitiveExpression">
 <summary>Represents name of the &lt;PrimitiveExpression> element and PrimitiveExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.PropertyReferenceExpression">
 <summary>Represents name of the &lt;PropertyReferenceExpression> element and PropertyReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.PropertySetValueReferenceExpression">
 <summary>Represents name of the &lt;PropertySetValueReferenceExpression> element and PropertySetValueReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.SnippetExpression">
 <summary>Represents name of the &lt;SnippetExpression> element and SnippetExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.ThisReferenceExpression">
 <summary>Represents name of the &lt;ThisReferenceExpression> element and ThisReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.TypeOfExpression">
 <summary>Represents name of the &lt;TypeOfExpression> element and TypeOfExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.TypeReferenceExpression">
 <summary>Represents name of the &lt;TypeReferenceExpression> element and TypeReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.VariableReferenceExpression">
 <summary>Represents name of the &lt;VariableReferenceExpression> element and VariableReferenceExpression type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.CatchClause">
 <summary>Represents name of the &lt;CatchClause> element and CatchClause type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.TypeDelegate">
 <summary>Represents name of the &lt;TypeDelegate> element and TypeDelegate type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.UserData">
 <summary>Represents name of the &lt;UserData> element and UserData type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.String">
 <summary>Represents name of the &lt;String> element and String type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Char">
 <summary>Represents name of the &lt;Char> element and Char type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Byte">
 <summary>Represents name of the &lt;Byte> element and Byte type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.SByte">
 <summary>Represents name of the &lt;SByte> element and SByte type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Int16">
 <summary>Represents name of the &lt;Int16> element and Int16 type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.UInt16">
 <summary>Represents name of the &lt;UInt16> element and UInt16 type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Int32">
 <summary>Represents name of the &lt;Int32> element and Int32 type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.UInt32">
 <summary>Represents name of the &lt;UInt32> element and UInt32 type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Int64">
 <summary>Represents name of the &lt;Int64> element and Int64 type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.UInt64">
 <summary>Represents name of the &lt;UInt64> element and UInt64 type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Decimal">
 <summary>Represents name of the &lt;Decimal> element and Decimal type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Single">
 <summary>Represents name of the &lt;Single> element and Single type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Double">
 <summary>Represents name of the &lt;Double> element and Double type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.DateTime">
 <summary>Represents name of the &lt;DateTime> element and DateTime type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Null">
 <summary>Represents name of the &lt;Null> element and Null type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.Names.Boolean">
 <summary>Represents name of the &lt;Boolean> element and Boolean type</summary>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.CodeDomXmlNamespace">
 <summary>Name of namespace which is used for validation XML documents</summary>
 <remarks>Value of this field is always http://dzonny.cz/xml/schemas/CodeDom</remarks>
</member>
<member name="F:Tools.CodeDomT.Xml2CodeDom.xsiType">
 <summary>Name of the xsi:type attribute</summary>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetXmlSchema">
 <summary>Gets XML-Schema for the http://dzonny.cz/xml/schemas/CodeDom namespace.</summary>
 <returns>Xml schema for the http://dzonny.cz/xml/schemas/CodeDom namespace</returns>
 <remarks>This schema is used by the <see cref="M:Tools.CodeDomT.Xml2CodeDom.Xml2CodeDom(System.Xml.Linq.XDocument)"/> class for validation XML documents being converted to <see cref="N:System.CodeDom"/> objects.
 The schema can be obtained from embdeded resource Tools.CodeDomT.CodeDom.xsd or from source code of ĐTools library.</remarks>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2CompileUnit(System.Xml.XmlDocument)">
 <summary>Converts given <see cref="T:System.Xml.XmlDocument"/> to <see cref="T:System.CodeDom.CodeCompileUnit"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeCompileUnit"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is neither <c>&lt;CompileUnit></c> nor <c>&lt;SnippetCompileUnit></c>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2CompileUnit(System.Xml.Linq.XDocument)">
 <summary>Converts given <see cref="T:System.Xml.Linq.XDocument"/> to <see cref="T:System.CodeDom.CodeCompileUnit"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeCompileUnit"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is neither <c>&lt;CompileUnit></c> nor <c>&lt;SnippetCompileUnit></c>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2Namespace(System.Xml.XmlDocument)">
 <summary>Converts given <see cref="T:System.Xml.XmlDocument"/> to <see cref="T:System.CodeDom.CodeNamespace"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeNamespace"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is not <c>&lt;Namespace></c>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2Namespace(System.Xml.Linq.XDocument)">
 <summary>Converts given <see cref="T:System.Xml.Linq.XDocument"/> to <see cref="T:System.CodeDom.CodeNamespace"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeNamespace"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is not <c>&lt;Namespace></c>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2Type(System.Xml.XmlDocument)">
 <summary>Converts given <see cref="T:System.Xml.XmlDocument"/> to <see cref="T:System.CodeDom.CodeTypeDeclaration"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeTypeDeclaration"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is not <c>&lt;Type></c>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2Type(System.Xml.Linq.XDocument)">
 <summary>Converts given <see cref="T:System.Xml.Linq.XDocument"/> to <see cref="T:System.CodeDom.CodeTypeDeclaration"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeTypeDeclaration"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is not <c>&lt;Type></c>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2Method(System.Xml.XmlDocument)">
 <summary>Converts given <see cref="T:System.Xml.XmlDocument"/> to <see cref="T:System.CodeDom.CodeMemberMethod"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeMemberMethod"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is not <c>&lt;MemberMethod></c>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2Method(System.Xml.Linq.XDocument)">
 <summary>Converts given <see cref="T:System.Xml.Linq.XDocument"/> to <see cref="T:System.CodeDom.CodeMemberMethod"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeMemberMethod"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is not <c>&lt;MemberMethod></c>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2Expression(System.Xml.XmlDocument)">
 <summary>Converts given <see cref="T:System.Xml.XmlDocument"/> to <see cref="T:System.CodeDom.CodeExpression"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeExpression"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is does not represent supported expression.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2Expression(System.Xml.Linq.XDocument)">
 <summary>Converts given <see cref="T:System.Xml.Linq.XDocument"/> to <see cref="T:System.CodeDom.CodeExpression"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeExpression"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="Xml"/> is does not represent supported expression.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2CodeDom(System.Xml.XmlDocument)">
 <summary>Converts given <see cref="T:System.Xml.XmlDocument"/> to <see cref="T:System.CodeDom.CodeObject"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeObject"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.NotSupportedException">Root element of <paramref name="Xml"/> cannot be deserialized because it is unknown or its object representation does not derive from <see cref="T:System.CodeDom.CodeObject"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Xml2CodeDom(System.Xml.Linq.XDocument)">
 <summary>Converts given <see cref="T:System.Xml.Linq.XDocument"/> to <see cref="T:System.CodeDom.CodeObject"/></summary>
 <param name="Xml">Document ot convert</param>
 <returns><see cref="T:System.CodeDom.CodeObject"/> constructed from <paramref name="Xml"/></returns>
 <exception cref="T:System.Xml.XmlException">An error ocured while validating <paramref name="Xml"/> against XML-Schema</exception>
 <exception cref="T:System.NotSupportedException">Root element of <paramref name="Xml"/> cannot be deserialized because it is unknown or its object representation does not derive from <see cref="T:System.CodeDom.CodeObject"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Xml"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.ValidationHandler(System.Object,System.Xml.Schema.ValidationEventArgs)">
 <summary>Internal XML validation handler - throws on anny error, ignores warnings</summary>
 <param name="sender">Validation source</param>
 <param name="e">Validation arguments</param>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.CompileUnit2Xml(System.CodeDom.CodeCompileUnit)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeCompileUnit"/> to <see cref="T:System.Xml.Linq.XDocument"/></summary>
 <param name="CompileUnit">Object to serialize</param>
 <returns>XML document reperesenting given <see cref="T:System.CodeDom.CodeCompileUnit"/></returns>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Namespace2Xml(System.CodeDom.CodeNamespace)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeNamespace"/> to <see cref="T:System.Xml.Linq.XDocument"/></summary>
 <param name="Namespace">Object to serialize</param>
 <returns>XML document reperesenting given <see cref="T:System.CodeDom.CodeNamespace"/></returns>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Type2Xml(System.CodeDom.CodeTypeDeclaration)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTypeDeclaration"/> to <see cref="T:System.Xml.Linq.XDocument"/></summary>
 <param name="TypeDeclaration">Object to serialize</param>
 <returns>XML document reperesenting given <see cref="T:System.CodeDom.CodeTypeDeclaration"/></returns>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Method2Xml(System.CodeDom.CodeMemberMethod)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeMemberMethod"/> to <see cref="T:System.Xml.Linq.XDocument"/></summary>
 <param name="MemberMethod">Object to serialize</param>
 <returns>XML document reperesenting given <see cref="T:System.CodeDom.CodeMemberMethod"/></returns>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Expression2Xml(System.CodeDom.CodeExpression)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeExpression"/> to <see cref="T:System.Xml.Linq.XDocument"/></summary>
 <param name="Expression">Object to serialize</param>
 <returns>XML document reperesenting given <see cref="T:System.CodeDom.CodeExpression"/></returns>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.CodeDom2Xml(System.CodeDom.CodeObject)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeObject"/> to <see cref="T:System.Xml.Linq.XDocument"/></summary>
 <param name="CodeDom">Object to serialize</param>
 <returns>XML document reperesenting given <see cref="T:System.CodeDom.CodeObject"/></returns>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetCompileUnit(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeCompileUnit"/> from XML element</summary>
 <param name="Xml">XML element <c>&lt;CompileUnit></c> or <c>&lt;SnippetCompileUnit></c></param>
 <returns><see cref="T:System.CodeDom.CodeCompileUnit"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.PopulateUserData(System.CodeDom.CodeObject,System.Xml.Linq.XElement)">
 <summary>Populates <see cref="P:System.CodeDom.CodeObject.UserData"/> from element <c>&lt;UserData></c> in given <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Obj"><see cref="T:System.CodeDom.CodeObject"/> to popualte <see cref="P:System.CodeDom.CodeObject.UserData"/> of</param>
 <param name="Xml">Element of type <c>CodeObject</c> to populate <paramref name="Obj"/> from</param>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetLinePragma(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeLinePragma"/> represented by XML element</summary>
 <param name="Xml">XML element <c>&lt;LinePragma></c></param>
 <returns><see cref="T:System.CodeDom.CodeLinePragma"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetDirective(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeDirective"/> form XML element <c>&lt;Directive></c> of type <c>ChecksumPragma</c> or <c>RegionDirective</c> or form element <c>&lt;ChecksumPragma></c> or <c>&lt;RegionDirective></c></summary>
 <param name="Xml">XML element which represents directive</param>
 <returns><see cref="T:System.CodeDom.CodeDirective"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetAssemblyReference(System.Xml.Linq.XElement)">
 <summary>Gets value of the <c>&lt;AssemblyReference></c> element</summary>
 <param name="Xml">The <c>&lt;AssemblyReference></c> element</param>
 <returns><see cref="P:System.Xml.Linq.XElement.Value"/> of <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetAttributeDeclaration(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeAttributeDeclaration"/> from <c>&lt;AttributeDeclaration></c> element</summary>
 <param name="Xml">The <c>&lt;AttributeDeclaration></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeAttributeDeclaration"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetNamespace(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeNamespace"/> from <c>&lt;Namespace></c> element</summary>
 <param name="Xml">The <c>&lt;Namespace></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeNamespace"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetTypeReference(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeTypeReference"/> from <c>&lt;TypeReference></c> element</summary>
 <param name="Xml">The <c>&lt;TypeReference></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeTypeReference"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetAttributeArgument(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeAttributeArgument"/> from <c>&lt;AttributeArgument></c> element</summary>
 <param name="Xml">The <c>&lt;AttributeArgument></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeAttributeArgument"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetNamespaceImport(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeNamespaceImport"/> from <c>&lt;NamespaceImport></c> element</summary>
 <param name="Xml">The <c>&lt;NamespaceImport></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeNamespaceImport"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetCommentStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeCommentStatement"/> from <c>&lt;CommentStatement></c> element</summary>
 <param name="Xml">The <c>&lt;CommentStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeCommentStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.PopulateStatement(System.CodeDom.CodeStatement,System.Xml.Linq.XElement)">
 <summary>Populates properties of given <see cref="T:System.CodeDom.CodeStatement"/> from given <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Statement">Statement to populate</param>
 <param name="Xml">Source of properties</param>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetTypeDeclaration(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeTypeDeclaration"/> from <c>&lt;TypeDeclaration></c> element</summary>
 <param name="Xml">The <c>&lt;TypeDeclaration></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeTypeDeclaration"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.PopulateMember(System.CodeDom.CodeTypeMember,System.Xml.Linq.XElement)">
 <summary>Populates properties of given <see cref="T:System.CodeDom.CodeTypeMember"/> from given <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Member">Member to populate properties of</param>
 <param name="Xml">Xml element containing values of properties</param>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetBool(System.String)">
 <summary>Converts XML boolean value to <see cref="T:System.Boolean"/></summary>
 <param name="XmlValue">Value to be converted</param>
 <returns><see cref="T:System.Boolean"/> equivalent of <paramref name="XmlValue"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="XmlValue"/> does not represent valid XML boolean value</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeExpression"/> from <c>&lt;Expression></c> element</summary>
 <param name="Xml">The <c>&lt;Expression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeExpression"/> represented by <paramref name="Xml"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="Xml"/> does not represent supported type of expression.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetComment(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeComment"/> from <c>&lt;Comment></c> element</summary>
 <param name="Xml">The <c>&lt;Comment></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeComment"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetParameterDeclarationExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"/> from <c>&lt;ParameterDeclarationExpression></c> element</summary>
 <param name="Xml">The <c>&lt;ParameterDeclarationExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeParameterDeclarationExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.PopulateExpression(System.CodeDom.CodeExpression,System.Xml.Linq.XElement)">
 <summary>Populates properties of given <see cref="T:System.CodeDom.CodeExpression"/> from given <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Exp">Expression to populate properties of</param>
 <param name="Xml">XML element containing property data</param>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetTypeParameter(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeTypeParameter"/> from <c>&lt;TypeParameter></c> element</summary>
 <param name="Xml">The <c>&lt;TypeParameter></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeTypeParameter"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetTypeMember(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeTypeMember"/> from <c>&lt;TypeMember></c> element</summary>
 <param name="Xml">The <c>&lt;TypeMember></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeTypeMember"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetArgumentReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeArgumentReferenceExpression"/> from <c>&lt;ArgumentReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;ArgumentReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeArgumentReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetArrayCreateExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeArrayCreateExpression"/> from <c>&lt;ArrayCreateExpression></c> element</summary>
 <param name="Xml">The <c>&lt;ArrayCreateExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeArrayCreateExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetArrayIndexerExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeArrayIndexerExpression"/> from <c>&lt;ArrayIndexerExpression></c> element</summary>
 <param name="Xml">The <c>&lt;ArrayIndexerExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeArrayIndexerExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetBaseReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeBaseReferenceExpression"/> from <c>&lt;BaseReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;BaseReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeBaseReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetBinaryOperatorExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeBinaryOperatorExpression"/> from <c>&lt;BinaryOperatorExpression></c> element</summary>
 <param name="Xml">The <c>&lt;BinaryOperatorExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeBinaryOperatorExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetCastExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeCastExpression"/> from <c>&lt;CastExpression></c> element</summary>
 <param name="Xml">The <c>&lt;CastExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeCastExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetDefaultValueExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeDefaultValueExpression"/> from <c>&lt;DefaultValueExpression></c> element</summary>
 <param name="Xml">The <c>&lt;DefaultValueExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeDefaultValueExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetDelegateCreateExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeDelegateCreateExpression"/> from <c>&lt;DelegateCreateExpression></c> element</summary>
 <param name="Xml">The <c>&lt;DelegateCreateExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeDelegateCreateExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetDelegateInvokeExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeDelegateInvokeExpression"/> from <c>&lt;DelegateInvokeExpression></c> element</summary>
 <param name="Xml">The <c>&lt;DelegateInvokeExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeDelegateInvokeExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetDirectionExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeDirectionExpression"/> from <c>&lt;DirectionExpression></c> element</summary>
 <param name="Xml">The <c>&lt;DirectionExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeDirectionExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetEventReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeEventReferenceExpression"/> from <c>&lt;EventReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;EventReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeEventReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetFieldReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeFieldReferenceExpression"/> from <c>&lt;FieldReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;FieldReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeFieldReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetIndexerExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeIndexerExpression"/> from <c>&lt;IndexerExpression></c> element</summary>
 <param name="Xml">The <c>&lt;IndexerExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeIndexerExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetMethodInvokeExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeMethodInvokeExpression"/> from <c>&lt;MethodInvokeExpression></c> element</summary>
 <param name="Xml">The <c>&lt;MethodInvokeExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeMethodInvokeExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetMethodReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeMethodReferenceExpression"/> from <c>&lt;MethodReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;MethodReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeMethodReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetObjectCreateExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeObjectCreateExpression"/> from <c>&lt;ObjectCreateExpression></c> element</summary>
 <param name="Xml">The <c>&lt;ObjectCreateExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeObjectCreateExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetPrimitiveExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodePrimitiveExpression"/> from <c>&lt;PrimitiveExpression></c> element</summary>
 <param name="Xml">The <c>&lt;PrimitiveExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodePrimitiveExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetPropertyReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodePropertyReferenceExpression"/> from <c>&lt;PropertyReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;PropertyReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodePropertyReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetPropertySetValueReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression"/> from <c>&lt;PropertySetValueReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;PropertySetValueReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetSnippetExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeSnippetExpression"/> from <c>&lt;SnippetExpression></c> element</summary>
 <param name="Xml">The <c>&lt;SnippetExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeSnippetExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetThisReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeThisReferenceExpression"/> from <c>&lt;ThisReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;ThisReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeThisReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetTypeOfExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeTypeOfExpression"/> from <c>&lt;TypeOfExpression></c> element</summary>
 <param name="Xml">The <c>&lt;TypeOfExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeTypeOfExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetTypeReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeTypeReferenceExpression"/> from <c>&lt;TypeReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;TypeReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeTypeReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetVariableReferenceExpression(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeVariableReferenceExpression"/> from <c>&lt;VariableReferenceExpression></c> element</summary>
 <param name="Xml">The <c>&lt;VariableReferenceExpression></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeVariableReferenceExpression"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetMemberEvent(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeMemberEvent"/> from <c>&lt;MemberEvent></c> element</summary>
 <param name="Xml">The <c>&lt;MemberEvent></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeMemberEvent"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetMemberField(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeMemberField"/> from <c>&lt;MemberField></c> element</summary>
 <param name="Xml">The <c>&lt;MemberField></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeMemberField"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetMemberMethod(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeMemberMethod"/> from <c>&lt;MemberMethod></c> element</summary>
 <param name="Xml">The <c>&lt;MemberMethod></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeMemberMethod"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetMemberProperty(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeMemberProperty"/> from <c>&lt;MemberProperty></c> element</summary>
 <param name="Xml">The <c>&lt;MemberProperty></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeMemberProperty"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetSnippetTypeMember(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeSnippetTypeMember"/> from <c>&lt;SnippetTypeMember></c> element</summary>
 <param name="Xml">The <c>&lt;SnippetTypeMember></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeSnippetTypeMember"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeStatement"/> from <c>&lt;Statement></c> element</summary>
 <param name="Xml">The <c>&lt;Statement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetAssignStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeAssignStatement"/> from <c>&lt;AssignStatement></c> element</summary>
 <param name="Xml">The <c>&lt;AssignStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeAssignStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetAttachEventStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeAttachEventStatement"/> from <c>&lt;AttachEventStatement></c> element</summary>
 <param name="Xml">The <c>&lt;AttachEventStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeAttachEventStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetConditionStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeConditionStatement"/> from <c>&lt;ConditionStatement></c> element</summary>
 <param name="Xml">The <c>&lt;ConditionStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeConditionStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetExpressionStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeExpressionStatement"/> from <c>&lt;ExpressionStatement></c> element</summary>
 <param name="Xml">The <c>&lt;ExpressionStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeExpressionStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetGotoStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeGotoStatement"/> from <c>&lt;GotoStatement></c> element</summary>
 <param name="Xml">The <c>&lt;GotoStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeGotoStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetIterationStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeIterationStatement"/> from <c>&lt;IterationStatement></c> element</summary>
 <param name="Xml">The <c>&lt;IterationStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeIterationStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetLabeledStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeLabeledStatement"/> from <c>&lt;LabeledStatement></c> element</summary>
 <param name="Xml">The <c>&lt;LabeledStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeLabeledStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetMethodReturnStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeMethodReturnStatement"/> from <c>&lt;MethodReturnStatement></c> element</summary>
 <param name="Xml">The <c>&lt;MethodReturnStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeMethodReturnStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetRemoveEventStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeRemoveEventStatement"/> from <c>&lt;RemoveEventStatement></c> element</summary>
 <param name="Xml">The <c>&lt;RemoveEventStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeRemoveEventStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetSnippetStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeSnippetStatement"/> from <c>&lt;SnippetStatement></c> element</summary>
 <param name="Xml">The <c>&lt;SnippetStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeSnippetStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetThrowExceptionStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeThrowExceptionStatement"/> from <c>&lt;ThrowExceptionStatement></c> element</summary>
 <param name="Xml">The <c>&lt;ThrowExceptionStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeThrowExceptionStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetTryCatchFinallyStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement"/> from <c>&lt;TryCatchFinallyStatement></c> element</summary>
 <param name="Xml">The <c>&lt;TryCatchFinallyStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeTryCatchFinallyStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetCatchClause(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeCatchClause"/> from <c>&lt;CatchClause></c> element</summary>
 <param name="Xml">The <c>&lt;CatchClause></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeCatchClause"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetVariableDeclarationStatement(System.Xml.Linq.XElement)">
 <summary>Gets <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"/> from <c>&lt;VariableDeclarationStatement></c> element</summary>
 <param name="Xml">The <c>&lt;VariableDeclarationStatement></c> element</param>
 <returns><see cref="T:System.CodeDom.CodeVariableDeclarationStatement"/> represented by <paramref name="Xml"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeCollection``1(System.Xml.Linq.XElement,System.Collections.Generic.ICollection{``0},System.Func{``0,System.Xml.Linq.XElement})">
 <summary>Serializes given collection to XML embddeding it in given envelope and serializing its member using given serializer</summary>
 <typeparam name="T">Type of items in collection</typeparam>
 <param name="Envelope"><see cref="T:System.Xml.Linq.XElement"/> to embded serialized items in</param>
 <param name="Collection">Collection to serialize</param>
 <param name="ItemSerializer">Delegate to serialize individual items in collection</param>
 <returns><paramref name="Envelope"/> with serialized items from <paramref name="Collection"/> added as its children. Null when <paramref name="Collection"/> is null or is empty.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Envelope"/> or <paramref name="ItemSerializer"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeUserData(System.Collections.IDictionary,System.Xml.Linq.XElement)">
 <summary>Serializes user data <see cref="T:System.Collections.IDictionary"/> to <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="UserData">User data to serialize</param>
 <param name="Envelope"><see cref="T:System.Xml.Linq.XElement"/> to serialize user data to. If ommited &lt;UserData> element is created.</param>
 <remarks><paramref name="Envelope"/> or newly created &lt;UserData> element with <paramref name="UserData"/> serialized to. Null when <paramref name="UserData"/> is null or it is empy.</remarks>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeUserData(System.CodeDom.CodeObject,System.Xml.Linq.XElement)">
 <summary>Serializes <see cref="P:System.CodeDom.CodeObject.UserData"/> from given <see cref="T:System.CodeDom.CodeObject"/> to <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Object">Object containing user data to serialize</param>
 <param name="Envelope"><see cref="T:System.Xml.Linq.XElement"/> to serialize user data to. If ommited &lt;UserData> element is created.</param>
 <remarks><paramref name="Envelope"/> or newly created &lt;UserData> element with user data serialized to. Null when <paramref name="Object"/> is null or it is empy.</remarks>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Enum2List(System.Enum)">
 <summary>Gets or-ed value of enumeration type as list of names of or-ed values</summary>
 <param name="enm">Value to get list for</param>
 <returns>Space-separated list of names of constants from type of <paramref name="enm"/> which when or-ed gives value of <paramref name="enm"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeCompileUnit(System.CodeDom.CodeCompileUnit,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeCompileUnit"/> as </summary>
 <param name="CompileUnit">A <see cref="T:System.CodeDom.CodeCompileUnit"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="CompileUnit"/>. Null when <paramref name="CompileUnit"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeNamespace(System.CodeDom.CodeNamespace,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeNamespace"/> as </summary>
 <param name="Namespace">A <see cref="T:System.CodeDom.CodeNamespace"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="Namespace"/>. Null when <paramref name="Namespace"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeAttributeDeclaration(System.CodeDom.CodeAttributeDeclaration,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeAttributeDeclaration"/> as </summary>
 <param name="AttributeDeclaration">A <see cref="T:System.CodeDom.CodeAttributeDeclaration"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="AttributeDeclaration"/>. Null when <paramref name="AttributeDeclaration"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeAssemblyReference(System.String,System.Xml.Linq.XName)">
 <summary>Serializes given string representing AssemblyReference as </summary>
 <param name="AssemblyReference">String to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="AssemblyReference"/>. Null when <paramref name="AssemblyReference"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeDirective(System.CodeDom.CodeDirective,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeDirective"/> as </summary>
 <param name="Directive">A <see cref="T:System.CodeDom.CodeDirective"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="Directive"/>. Null when <paramref name="Directive"/> is null.</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="Directive"/> is neither <see cref="T:System.CodeDom.CodeChecksumPragma"/> nor <see cref="T:System.CodeDom.CodeRegionDirective"/></exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeDirectiveCommon(System.CodeDom.CodeDirective)">
 <summary>Serializes common properties of given <see cref="T:System.CodeDom.CodeDirective"/></summary>
 <param name="Directive"><see cref="T:System.CodeDom.CodeDirective"/> to serialize</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> which contains serialized <see cref="P:System.CodeDom.CodeObject.UserData"/> of <paramref name="Directive"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeChecksumPragma(System.CodeDom.CodeChecksumPragma,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeChecksumPragma"/> as </summary>
 <param name="ChecksumPragma">A <see cref="T:System.CodeDom.CodeChecksumPragma"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ChecksumPragma"/>. Null when <paramref name="ChecksumPragma"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeRegionDirective(System.CodeDom.CodeRegionDirective,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeRegionDirective"/> as </summary>
 <param name="RegionDirective">A <see cref="T:System.CodeDom.CodeRegionDirective"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="RegionDirective"/>. Null when <paramref name="RegionDirective"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeNamespaceImport(System.CodeDom.CodeNamespaceImport,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeNamespaceImport"/> as </summary>
 <param name="NamespaceImport">A <see cref="T:System.CodeDom.CodeNamespaceImport"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="NamespaceImport"/>. Null when <paramref name="NamespaceImport"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeCommentStatement(System.CodeDom.CodeCommentStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeCommentStatement"/> as </summary>
 <param name="CommentStatement">A <see cref="T:System.CodeDom.CodeCommentStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="CommentStatement"/>. Null when <paramref name="CommentStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeStatementCommon(System.CodeDom.CodeStatement)">
 <summary>Serializes common properties of <see cref="T:System.CodeDom.CodeStatement"/></summary>
 <param name="Statement">Statement to serialize properties of</param>
 <returns>Properties of <paramref name="Statement"/> seriaized as array of <see cref="T:System.Xml.Linq.XElement">XElements</see>. Some items in array may be null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeDeclaration(System.CodeDom.CodeTypeDeclaration,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTypeDeclaration"/> as </summary>
 <param name="TypeDeclaration">A <see cref="T:System.CodeDom.CodeTypeDeclaration"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="TypeDeclaration"/>. Null when <paramref name="TypeDeclaration"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeMemberCommonAttributes(System.CodeDom.CodeTypeMember)">
 <summary>Serializes common properties of <see cref="T:System.CodeDom.CodeTypeMember"/> to array of <see cref="T:System.Xml.Linq.XAttribute">XAttributes</see></summary>
 <param name="TypeMember"><see cref="T:System.CodeDom.CodeTypeMember"/> to serialize properties of</param>
 <returns>Array of serialized properties</returns>
 <remarks>Always use in conjunction with <see cref="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeMemberCommon(System.CodeDom.CodeTypeMember)"/></remarks>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeMemberCommon(System.CodeDom.CodeTypeMember)">
 <summary>Serializes common properties of <see cref="T:System.CodeDom.CodeTypeMember"/> to array of <see cref="T:System.Xml.Linq.XElement">XElements</see></summary>
 <param name="TypeMember"><see cref="T:System.CodeDom.CodeTypeMember"/> to serialize properties of</param>
 <returns>Array of serialized properties</returns>
 <remarks>Always use in conjunction with <see cref="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeMemberCommonAttributes(System.CodeDom.CodeTypeMember)"/></remarks>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeAttributeArgument(System.CodeDom.CodeAttributeArgument,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeAttributeArgument"/> as </summary>
 <param name="AttributeArgument">A <see cref="T:System.CodeDom.CodeAttributeArgument"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="AttributeArgument"/>. Null when <paramref name="AttributeArgument"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeReference(System.CodeDom.CodeTypeReference,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTypeReference"/> as </summary>
 <param name="TypeReference">A <see cref="T:System.CodeDom.CodeTypeReference"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="TypeReference"/>. Null when <paramref name="TypeReference"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeMember(System.CodeDom.CodeTypeMember,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTypeMember"/> as </summary>
 <param name="TypeMember">A <see cref="T:System.CodeDom.CodeTypeMember"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="TypeMember"/>. Null when <paramref name="TypeMember"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeParameter(System.CodeDom.CodeTypeParameter,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTypeParameter"/> as </summary>
 <param name="TypeParameter">A <see cref="T:System.CodeDom.CodeTypeParameter"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="TypeParameter"/>. Null when <paramref name="TypeParameter"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeMemberEvent(System.CodeDom.CodeMemberEvent,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeMemberEvent"/> as </summary>
 <param name="MemberEvent">A <see cref="T:System.CodeDom.CodeMemberEvent"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="MemberEvent"/>. Null when <paramref name="MemberEvent"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeMemberField(System.CodeDom.CodeMemberField,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeMemberField"/> as </summary>
 <param name="MemberField">A <see cref="T:System.CodeDom.CodeMemberField"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="MemberField"/>. Null when <paramref name="MemberField"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeMemberMethod(System.CodeDom.CodeMemberMethod,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeMemberMethod"/> as </summary>
 <param name="MemberMethod">A <see cref="T:System.CodeDom.CodeMemberMethod"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="MemberMethod"/>. Null when <paramref name="MemberMethod"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"/> as </summary>
 <param name="ParameterDeclarationExpression">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ParameterDeclarationExpression"/>. Null when <paramref name="ParameterDeclarationExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeExpressionCommon(System.CodeDom.CodeExpression)">
 <summary>Serializes comon properties fo <see cref="T:System.CodeDom.CodeExpression"/> to <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Expression"><see cref="T:System.CodeDom.CodeExpression"/> to serialize properties of</param>
 <returns>Serialized <paramref name="Expression"/>.<see cref="P:System.CodeDom.CodeObject.UserData">UserData</see></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeStatement(System.CodeDom.CodeStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeStatement"/> as </summary>
 <param name="Statement">A <see cref="T:System.CodeDom.CodeStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="Statement"/>. Null when <paramref name="Statement"/> is null.</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="Statement"/> is none of supported statement types.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeMemberProperty(System.CodeDom.CodeMemberProperty,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeMemberProperty"/> as </summary>
 <param name="MemberProperty">A <see cref="T:System.CodeDom.CodeMemberProperty"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="MemberProperty"/>. Null when <paramref name="MemberProperty"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeExpression(System.CodeDom.CodeExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeExpression"/> as </summary>
 <param name="Expression">A <see cref="T:System.CodeDom.CodeExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="Expression"/>. Null when <paramref name="Expression"/> is null.</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="Expression"/> is none of supported expression types</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeSnippetTypeMember(System.CodeDom.CodeSnippetTypeMember,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeSnippetTypeMember"/> as </summary>
 <param name="SnippetTypeMember">A <see cref="T:System.CodeDom.CodeSnippetTypeMember"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="SnippetTypeMember"/>. Null when <paramref name="SnippetTypeMember"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeConstructor(System.CodeDom.CodeConstructor,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeConstructor"/> as </summary>
 <param name="Constructor">A <see cref="T:System.CodeDom.CodeConstructor"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="Constructor"/>. Null when <paramref name="Constructor"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeEntryPointMethod"/> as </summary>
 <param name="EntryPointMethod">A <see cref="T:System.CodeDom.CodeEntryPointMethod"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="EntryPointMethod"/>. Null when <paramref name="EntryPointMethod"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeConstructor(System.CodeDom.CodeTypeConstructor,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTypeConstructor"/> as </summary>
 <param name="TypeConstructor">A <see cref="T:System.CodeDom.CodeTypeConstructor"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="TypeConstructor"/>. Null when <paramref name="TypeConstructor"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeLinePragma(System.CodeDom.CodeLinePragma,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeLinePragma"/> as </summary>
 <param name="LinePragma">A <see cref="T:System.CodeDom.CodeLinePragma"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="LinePragma"/>. Null when <paramref name="LinePragma"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeComment(System.CodeDom.CodeComment,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeComment"/> as </summary>
 <param name="Comment">A <see cref="T:System.CodeDom.CodeComment"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="Comment"/>. Null when <paramref name="Comment"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeSnippetCompileUnit"/> as </summary>
 <param name="SnippetCompileUnit">A <see cref="T:System.CodeDom.CodeSnippetCompileUnit"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="SnippetCompileUnit"/></returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeAssignStatement(System.CodeDom.CodeAssignStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeAssignStatement"/> as </summary>
 <param name="AssignStatement">A <see cref="T:System.CodeDom.CodeAssignStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="AssignStatement"/>. Null when <paramref name="AssignStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeAttachEventStatement(System.CodeDom.CodeAttachEventStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeAttachEventStatement"/> as </summary>
 <param name="AttachEventStatement">A <see cref="T:System.CodeDom.CodeAttachEventStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="AttachEventStatement"/>. Null when <paramref name="AttachEventStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeConditionStatement(System.CodeDom.CodeConditionStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeConditionStatement"/> as </summary>
 <param name="ConditionStatement">A <see cref="T:System.CodeDom.CodeConditionStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ConditionStatement"/>. Null when <paramref name="ConditionStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeExpressionStatement(System.CodeDom.CodeExpressionStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeExpressionStatement"/> as </summary>
 <param name="ExpressionStatement">A <see cref="T:System.CodeDom.CodeExpressionStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ExpressionStatement"/>. Null when <paramref name="ExpressionStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeGotoStatement(System.CodeDom.CodeGotoStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeGotoStatement"/> as </summary>
 <param name="GotoStatement">A <see cref="T:System.CodeDom.CodeGotoStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="GotoStatement"/>. Null when <paramref name="GotoStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeIterationStatement(System.CodeDom.CodeIterationStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeIterationStatement"/> as </summary>
 <param name="IterationStatement">A <see cref="T:System.CodeDom.CodeIterationStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="IterationStatement"/>. Null when <paramref name="IterationStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeLabeledStatement(System.CodeDom.CodeLabeledStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeLabeledStatement"/> as </summary>
 <param name="LabeledStatement">A <see cref="T:System.CodeDom.CodeLabeledStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="LabeledStatement"/>. Null when <paramref name="LabeledStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeMethodReturnStatement"/> as </summary>
 <param name="MethodReturnStatement">A <see cref="T:System.CodeDom.CodeMethodReturnStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="MethodReturnStatement"/>. Null when <paramref name="MethodReturnStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeRemoveEventStatement"/> as </summary>
 <param name="RemoveEventStatement">A <see cref="T:System.CodeDom.CodeRemoveEventStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="RemoveEventStatement"/>. Null when <paramref name="RemoveEventStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeSnippetStatement(System.CodeDom.CodeSnippetStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeSnippetStatement"/> as </summary>
 <param name="SnippetStatement">A <see cref="T:System.CodeDom.CodeSnippetStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="SnippetStatement"/>. Null when <paramref name="SnippetStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeThrowExceptionStatement"/> as </summary>
 <param name="ThrowExceptionStatement">A <see cref="T:System.CodeDom.CodeThrowExceptionStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ThrowExceptionStatement"/>. Null when <paramref name="ThrowExceptionStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement"/> as </summary>
 <param name="TryCatchFinallyStatement">A <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="TryCatchFinallyStatement"/>. Null when <paramref name="TryCatchFinallyStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"/> as </summary>
 <param name="VariableDeclarationStatement">A <see cref="T:System.CodeDom.CodeVariableDeclarationStatement"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="VariableDeclarationStatement"/>. Null when <paramref name="VariableDeclarationStatement"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeArgumentReferenceExpression"/> as </summary>
 <param name="ArgumentReferenceExpression">A <see cref="T:System.CodeDom.CodeArgumentReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ArgumentReferenceExpression"/>. Null when <paramref name="ArgumentReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeArrayCreateExpression"/> as </summary>
 <param name="ArrayCreateExpression">A <see cref="T:System.CodeDom.CodeArrayCreateExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ArrayCreateExpression"/>. Null when <paramref name="ArrayCreateExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeArrayIndexerExpression"/> as </summary>
 <param name="ArrayIndexerExpression">A <see cref="T:System.CodeDom.CodeArrayIndexerExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ArrayIndexerExpression"/>. Null when <paramref name="ArrayIndexerExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeBaseReferenceExpression"/> as </summary>
 <param name="BaseReferenceExpression">A <see cref="T:System.CodeDom.CodeBaseReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="BaseReferenceExpression"/>. Null when <paramref name="BaseReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeBinaryOperatorExpression"/> as </summary>
 <param name="BinaryOperatorExpression">A <see cref="T:System.CodeDom.CodeBinaryOperatorExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="BinaryOperatorExpression"/>. Null when <paramref name="BinaryOperatorExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeCastExpression(System.CodeDom.CodeCastExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeCastExpression"/> as </summary>
 <param name="CastExpression">A <see cref="T:System.CodeDom.CodeCastExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="CastExpression"/>. Null when <paramref name="CastExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeDefaultValueExpression"/> as </summary>
 <param name="DefaultValueExpression">A <see cref="T:System.CodeDom.CodeDefaultValueExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="DefaultValueExpression"/>. Null when <paramref name="DefaultValueExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeDelegateCreateExpression"/> as </summary>
 <param name="DelegateCreateExpression">A <see cref="T:System.CodeDom.CodeDelegateCreateExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="DelegateCreateExpression"/>. Null when <paramref name="DelegateCreateExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeDelegateInvokeExpression"/> as </summary>
 <param name="DelegateInvokeExpression">A <see cref="T:System.CodeDom.CodeDelegateInvokeExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="DelegateInvokeExpression"/>. Null when <paramref name="DelegateInvokeExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeDirectionExpression(System.CodeDom.CodeDirectionExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeDirectionExpression"/> as </summary>
 <param name="DirectionExpression">A <see cref="T:System.CodeDom.CodeDirectionExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="DirectionExpression"/>. Null when <paramref name="DirectionExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeEventReferenceExpression"/> as </summary>
 <param name="EventReferenceExpression">A <see cref="T:System.CodeDom.CodeEventReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="EventReferenceExpression"/>. Null when <paramref name="EventReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeFieldReferenceExpression"/> as </summary>
 <param name="FieldReferenceExpression">A <see cref="T:System.CodeDom.CodeFieldReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="FieldReferenceExpression"/>. Null when <paramref name="FieldReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeIndexerExpression(System.CodeDom.CodeIndexerExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeIndexerExpression"/> as </summary>
 <param name="IndexerExpression">A <see cref="T:System.CodeDom.CodeIndexerExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="IndexerExpression"/>. Null when <paramref name="IndexerExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeMethodInvokeExpression"/> as </summary>
 <param name="MethodInvokeExpression">A <see cref="T:System.CodeDom.CodeMethodInvokeExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="MethodInvokeExpression"/>. Null when <paramref name="MethodInvokeExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeMethodReferenceExpression"/> as </summary>
 <param name="MethodReferenceExpression">A <see cref="T:System.CodeDom.CodeMethodReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="MethodReferenceExpression"/>. Null when <paramref name="MethodReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeObjectCreateExpression"/> as </summary>
 <param name="ObjectCreateExpression">A <see cref="T:System.CodeDom.CodeObjectCreateExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ObjectCreateExpression"/>. Null when <paramref name="ObjectCreateExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializePrimitiveExpression(System.CodeDom.CodePrimitiveExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodePrimitiveExpression"/> as </summary>
 <param name="PrimitiveExpression">A <see cref="T:System.CodeDom.CodePrimitiveExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="PrimitiveExpression"/>. Null when <paramref name="PrimitiveExpression"/> is null.</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="PrimitiveExpression"/>.<see cref="P:System.CodeDom.CodePrimitiveExpression.Value">Value</see> is neither of supported primitive type nor <see cref="T:System.Enum"/>.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializePrimitiveObject(System.Object)">
 <summary>Serializes primitive object into <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Obj">Object to serialize. Can be null.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="Obj"/></returns>
 <exception cref="T:System.NotSupportedException"><paramref name="Obj"/> is neither of supported primitive type nor <see cref="T:System.Enum"/></exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodePropertyReferenceExpression"/> as </summary>
 <param name="PropertyReferenceExpression">A <see cref="T:System.CodeDom.CodePropertyReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="PropertyReferenceExpression"/>. Null when <paramref name="PropertyReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression"/> as </summary>
 <param name="PropertySetValueReferenceExpression">A <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="PropertySetValueReferenceExpression"/>. Null when <paramref name="PropertySetValueReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeSnippetExpression(System.CodeDom.CodeSnippetExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeSnippetExpression"/> as </summary>
 <param name="SnippetExpression">A <see cref="T:System.CodeDom.CodeSnippetExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="SnippetExpression"/>. Null when <paramref name="SnippetExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeThisReferenceExpression"/> as </summary>
 <param name="ThisReferenceExpression">A <see cref="T:System.CodeDom.CodeThisReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="ThisReferenceExpression"/>. Null when <paramref name="ThisReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeOfExpression(System.CodeDom.CodeTypeOfExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTypeOfExpression"/> as </summary>
 <param name="TypeOfExpression">A <see cref="T:System.CodeDom.CodeTypeOfExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="TypeOfExpression"/>. Null when <paramref name="TypeOfExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTypeReferenceExpression"/> as </summary>
 <param name="TypeReferenceExpression">A <see cref="T:System.CodeDom.CodeTypeReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="TypeReferenceExpression"/>. Null when <paramref name="TypeReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeVariableReferenceExpression"/> as </summary>
 <param name="VariableReferenceExpression">A <see cref="T:System.CodeDom.CodeVariableReferenceExpression"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="VariableReferenceExpression"/>. Null when <paramref name="VariableReferenceExpression"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeCatchClause(System.CodeDom.CodeCatchClause,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeCatchClause"/> as </summary>
 <param name="CatchClause">A <see cref="T:System.CodeDom.CodeCatchClause"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="CatchClause"/>. Null when <paramref name="CatchClause"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.SerializeTypeDelegate(System.CodeDom.CodeTypeDelegate,System.Xml.Linq.XName)">
 <summary>Serializes given <see cref="T:System.CodeDom.CodeTypeDelegate"/> as </summary>
 <param name="TypeDelegate">A <see cref="T:System.CodeDom.CodeTypeDelegate"/> to serialize</param>
 <param name="ElementName">Name of element to be generated. If null, default name is used.</param>
 <returns><see cref="T:System.Xml.Linq.XElement"/> representing serialized <paramref name="TypeDelegate"/>. Null when <paramref name="TypeDelegate"/> is null.</returns>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.CreateEscapedIdentifier(System.String)">
 <summary>Creates an escaped identifier for the specified value.</summary>
 <returns><paramref name="value"/></returns>
 <param name="value">The string to create an escaped identifier for.</param>
 <remarks>As this class is language independent it has no knowledge about target language and so it allows all identifiers.</remarks>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.CreateValidIdentifier(System.String)">
 <summary>Creates a valid identifier for the specified value.</summary>
 <returns><paramref name="value"/></returns>
 <param name="value">The string to generate a valid identifier for.</param>
 <remarks>As this class is language independent it has no knowledge about target language and so it allows all identifiers.</remarks>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
 <summary>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.</summary>
 <param name="e">A <see cref="T:System.CodeDom.CodeCompileUnit" /> to generate code for.</param>
 <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.</param>
 <param name="o">Ignored</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="e"/> or <paramref name="w"/> is null</exception>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
 <summary>Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.</summary>
 <param name="e">A <see cref="T:System.CodeDom.CodeExpression" /> that indicates the expression to generate code for.</param>
 <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.</param>
 <param name="o">Ignored</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="e"/> or <paramref name="w"/> is null</exception>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
 <summary>Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.</summary>
 <param name="e">A <see cref="T:System.CodeDom.CodeNamespace" /> that indicates the namespace to generate code for.                 </param>
 <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.</param>
 <param name="o">Ignored</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="e"/> or <paramref name="w"/> is null</exception>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
 <summary>Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.</summary>
 <param name="e">A <see cref="T:System.CodeDom.CodeStatement" /> containing the CodeDOM elements to translate.                 </param>
 <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.</param>
 <param name="o">Ignored</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="e"/> or <paramref name="w"/> is null</exception>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
 <summary>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.</summary>
 <param name="e">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that indicates the type to generate code for.                 </param>
 <param name="w">The <see cref="T:System.IO.TextWriter" /> to output code to.                 </param>
 <param name="o">Ignored</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="e"/> or <paramref name="w"/> is null</exception>
 <exception cref="T:System.NotSupportedException">Unsupported CodeDOM object or primitive type found.</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.GetTypeOutput(System.CodeDom.CodeTypeReference)">
 <summary>Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
 <returns>A text representation of the specified type. This returns XML representation of type in form of the &lt;TypeReference> element</returns>
 <param name="type">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type to return.</param>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.IsValidIdentifier(System.String)">
 <summary>Gets a value that indicates whether the specified value is a valid identifier for the current language.</summary>
 <returns>true</returns>
 <param name="value">The value to test for being a valid identifier.</param>
 <remarks>As this class is language-independent and XML allows any sttrings as values of attributes and elements, this function always returns true.</remarks>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Supports(System.CodeDom.Compiler.GeneratorSupport)">
 <summary>Gets a value indicating whether the generator provides support for the language features represented by the specified <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> object.</summary>
 <returns>true</returns>
 <param name="capability">The capabilities to test the generator for.</param>
 <remarks>As this class is specifically designed to support all the features of CodeDOM, this methods always returns true. However there is no specific support for <see cref="!:Compiler.GeneratorSupport.Resources"/> and <see cref="!:Compiler.GeneratorSupport.Win32Resources"/></remarks>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.ValidateIdentifier(System.String)">
 <summary>Throws an exception if the specified value is not a valid identifier.</summary>
 <param name="value">The identifier to validate.</param>
 <exception cref="T:System.ArgumentException">Never thrown</exception>
</member>
<member name="M:Tools.CodeDomT.Xml2CodeDom.Parse(System.IO.TextReader)">
 <summary>Compiles the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
 <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains a representation of the parsed code.</returns>
 <param name="codeStream">A <see cref="T:System.IO.TextReader" /> that can be used to read the code to be compiled.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="codeStream"/> is null</exception>
 <exception cref="T:System.Xml.XmlException"><paramref name="codeStream"/> contains invalid XML -or- An error ocured while validating XML document obtained from <paramref name="codeStream"/> against XML-Schema</exception>
 <exception cref="T:System.NotSupportedException">Root element of <paramref name="Xml"/> cannot be deserialized because it is unknown or its object representation does not derive from <see cref="T:System.CodeDom.CodeObject"/></exception>
</member>
<member name="T:Tools.CodeDomT.CompilerT.CompilerErrorException">
 <summary>An exception thrown when compilation error occurs</summary>
</member>
<member name="M:Tools.CodeDomT.CompilerT.CompilerErrorException.GenerateMessage(System.CodeDom.Compiler.CompilerError)">
 <summary>Generates message for single error</summary>
 <param name="error">An error to generate message for</param>
 <returns>Error message including line generated for <paramref name="error"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="error"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.CompilerT.CompilerErrorException.GenerateMessage(System.Collections.Generic.IEnumerable{System.CodeDom.Compiler.CompilerError})">
 <summary>Generates message for multiple errors</summary>
 <param name="errors">Errors to generate message for</param>
 <returns>Exception message containing error messages for all errors</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="errors"/> is null</exception>
</member>
<member name="M:Tools.CodeDomT.CompilerT.CompilerErrorException.#ctor(System.CodeDom.Compiler.CompilerError,System.Exception)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.CodeDomT.CompilerT.CompilerErrorException"/> from single error</summary>
 <param name="error">Compilation error</param>
 <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> if no inner exception is specified.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="error"/> isnull</exception>
</member>
<member name="M:Tools.CodeDomT.CompilerT.CompilerErrorException.#ctor(System.Collections.Generic.IEnumerable{System.CodeDom.Compiler.CompilerError},System.Exception)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.CodeDomT.CompilerT.CompilerErrorException"/> from multiple errors</summary>
 <param name="errors">Compilation errors</param>
 <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> if no inner exception is specified.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="errors"/> isnull</exception>
</member>
<member name="M:Tools.CodeDomT.CompilerT.CompilerErrorException.#ctor(System.CodeDom.Compiler.CompilerErrorCollection,System.Exception)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.CodeDomT.CompilerT.CompilerErrorException"/> from <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/></summary>
 <param name="errors">Compilation errors</param>
 <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> if no inner exception is specified.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="errors"/> isnull</exception>
</member>
<member name="M:Tools.CodeDomT.CompilerT.CompilerErrorException.#ctor(System.CodeDom.Compiler.CompilerError,System.String,System.Exception)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.CodeDomT.CompilerT.CompilerErrorException"/> from single error with custom message</summary>
 <param name="error">Compilation error</param>
 <param name="message">The error message that explains the reason for the exception.</param>
 <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> if no inner exception is specified.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="error"/> isnull</exception>
</member>
<member name="M:Tools.CodeDomT.CompilerT.CompilerErrorException.#ctor(System.CodeDom.Compiler.CompilerErrorCollection,System.String,System.Exception)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.CodeDomT.CompilerT.CompilerErrorException"/> from <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/> with custom message</summary>
 <param name="errors">Compilation errors</param>
 <param name="message">The error message that explains the reason for the exception.</param>
 <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> if no inner exception is specified.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="errors"/> isnull</exception>
</member>
<member name="M:Tools.CodeDomT.CompilerT.CompilerErrorException.#ctor(System.Collections.Generic.IEnumerable{System.CodeDom.Compiler.CompilerError},System.String,System.Exception)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.CodeDomT.CompilerT.CompilerErrorException"/> from multiple errors with custom message</summary>
 <param name="errors">Compilation errors</param>
 <param name="message">The error message that explains the reason for the exception.</param>
 <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> if no inner exception is specified.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="errors"/> isnull</exception>
</member>
<member name="P:Tools.CodeDomT.CompilerT.CompilerErrorException.Errors">
 <summary>Gets compilation erros that caused this exception to be thrown</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.CollectionTools">
 <summary>Extension methods for working with generic collections</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionTools.GetTypedEnumerator``1(``0[])">
 <summary>Gets type-safe bidirectional enumerator of an array</summary>
 <param name="Array">Array to get enumerator for</param>
 <typeparam name="T">Type of elements in array</typeparam>
 <returns>New <see cref="T:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1"/></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionTools.GetTypedEnumerator``1(``0[],System.Boolean)">
 <summary>Gets type-safe bidirectional enumerator of an array</summary>
 <param name="Array">Array to get enumerator for</param>
 <typeparam name="T">Type of elements in array</typeparam>
 <param name="Inverse">Makes enumerator to nemumerated from last to first item using <see cref="M:System.Collections.IEnumerator.MoveNext"/>.</param>
 <returns>New <see cref="T:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1"/></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionTools.Last``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Gets last item in collection</summary>
 <param name="Collection">Collection to obtain item from</param>
 <typeparam name="T">Type of items in collection</typeparam>
 <returns>Last item in <paramref name="Collection"/>, or null if <paramref name="Collection"/> is empty</returns>
 <remarks>This function have to iterate through whole <paramref name="Collection"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>                                 
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionTools.Last``1(System.Collections.Generic.IList{``0})">
 <summary>Gets last item in collection</summary>
 <param name="Collection">Collection to obtain item from</param>
 <typeparam name="T">Type of items in collection</typeparam>
 <returns>Last item in <paramref name="Collection"/> (item at highest index), or null if <paramref name="Collection"/> is empty</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionTools.Last``1(``0[])">
 <summary>Gets last item in collection</summary>
 <param name="Collection">Collection to obtain item from</param>
 <typeparam name="T">Type of items in collection</typeparam>
 <returns>Last item in <paramref name="Collection"/> (item at highest index), or null if <paramref name="Collection"/> is empty</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionTools.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Inserts all items from one collection to another</summary>
 <param name="Collection">Collection to insert items to</param>
 <param name="Items">Items to be inserted</param>
 <typeparam name="T">Type of item</typeparam>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionTools.AddRange``1(Tools.CollectionsT.GenericT.IAddable{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Inserts all items from one collection to another</summary>
 <param name="Collection">Collection to insert items to</param>
 <param name="Items">Items to be inserted</param>
 <typeparam name="T">Type of item</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2">
 <summary>List that provides events when changed</summary>
 <typeparam name="TValue">Type of items to be stored in the list</typeparam>
 <typeparam name="TKey">Type of key of dictionary</typeparam>
 <remarks><para>
 If item of type tha implements the <see cref="T:Tools.IReportsChange"/> interface is passed to this list, than it's events <see cref="E:Tools.IReportsChange.Changed"/> are reported through <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> event.
 </para><para>
 Implementation of interface <see cref="T:System.Collections.IList"/> is provided only in orer this class to be compatible with <see cref="T:System.ComponentModel.Design.CollectionEditor"/>.
 </para>
 </remarks>
 <seealso cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2"><see cref="T:System.Collections.Generic.IEnumerable`1"/>[<typeparamref name="TValue"/>] implemented</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.#ctor(System.Boolean,System.Boolean)">
 <summary>CTor</summary>
 <param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> events</param>
 <param name="CancelError">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> that determines if and <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean,System.Boolean)">
 <summary>CTor - initializes from another <see cref="T:System.Collections.Generic.IDictionary`2"/></summary>
 <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</param>
 <param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> events</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.#ctor(System.Int32,System.Boolean,System.Boolean)">
 <summary>Initializes a new instance of the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/> class that is empty and has the specified initial capacity.</summary>
 <param name="capacity">The number of elements that the new dictionary can initially store.</param>
 <param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> events</param>
 <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0</exception>
 <param name="CancelError">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> that determines if and <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Boolean)">
 <summary>Initializes a new instance of the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/> class that is empty and has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</summary>
 <param name="capacity">The number of elements that the new dictionary can initially store.</param>
 <param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> events</param>
 <param name="Comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0</exception>
 <param name="CancelError">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> that determines if and <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Boolean)">
 <summary>Initializes a new instance of the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/> class that is empty, uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</summary>
 <param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> events</param>
 <param name="Comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0</exception>
 <param name="CancelError">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> that determines if and <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0},System.Boolean,System.Boolean)">
 <summary>Initializes a new instance of the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/> class with given instance of <see cref="T:System.Collections.Generic.IDictionary`2"/>, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</summary>
 <param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> events</param>
 <param name="Comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null</exception>
 <param name="CancelError">Value of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> that determines if and <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</param>
 <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</param>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Dict">
 <summary>Internal list that is used for soring values</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2._AddingReadOnly">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly">
 <summary>Determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> events</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2._CancelError">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError">
 <summary>Gets value indicating if an <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2._AllowAddCancelableEventsHandlers">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers">
 <summary>Determines if it is allowed to add handlers for events that supports cancellation</summary>
 <exception cref="T:System.InvalidOperationException">Trying to set value to True when it if False</exception>
 <remarks>
 Value can be changed only from True (default) to False
 <list>
 <listheader>Those are events:</listheader>
 <item><see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/></item>
 <item><see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing"/></item>
 <item><see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clearing"/></item>
 <item><see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/></item>
 </list>
 </remarks>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2._Locked">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Locked"/></summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Locked">
 <summary>Determines if the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/> isn locked (being locked prevents if from being edited)</summary>
 <remarks><para>
 <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/> is usually locked while some events' handlers are being invoked.
 </para><list>
 <listheader><see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Locked"/> set to True blocks following methods and causes <see cref="T:System.InvalidOperationException"/> exception to be thrown there:</listheader>
 <item><see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Remove(System.Object)"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clear"/></item>
 <item><see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Item(`0)"/> (only setter)</item>
 </list></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Lock">
 <summary>Sets the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Locked"/> to True</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Unlock">
 <summary>Sets the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Locked"/> to False</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingEventHandlerList">
 <summary>List of <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemCancelEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> event is raised</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemCancelEventHandler">
 <summary>Delegate of handler of <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> events</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding">
 <summary>Raised before an item is added to the list. Raised by the <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})"/> methods</summary>
 <remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/>.
 This means that <see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 Value of parameter <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> can be changed if <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly"/> is False.
 </para></remarks>
 <exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/> is false</exception>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added">
 <summary>Raised after an item is added to the list. Raised by the <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})"/> method</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Add(`0,`1)">
 <summary>Adds an item to the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</summary>
 <param name="value">The object to add to the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</param>
 <param name="key">Key of object being added</param>
 <remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnAdding(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.CancelableKeyValueEventArgs)"/> before adding an item to the list and <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnAdded(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.KeyValueEventArgs)"/> after adding item to the list, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> event</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null</exception>
 <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnAdding(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.CancelableKeyValueEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnAdding(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.CancelableKeyValueEventArgs)"/> in order the event to be raised</remarks>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> event</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnAdded(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.KeyValueEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnAdded(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.KeyValueEventArgs)"/> in order the event to be raised</remarks>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ClearingEventHandlerList">
 <summary>List of <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ClearingEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clearing"/> event is raised</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ClearingEventHandler">
 <summary>Delegate of handler of <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clearing"/> event</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clearing">
 <summary>Raised before the list is cleared. Raised by <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clear"/> method.</summary>
 <remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/>.
 This means that<see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing"/> Event is not raised when clearing list.
 </para></remarks>
 <exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/> is false</exception>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Cleared">
 <summary>Raised after the list is cleared. Raised by <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clear"/> method.</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
 <remarks><see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed"/> event is not raised when clearing list.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clear">
 <summary>Removes all items from the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> is true</exception>
 <remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnClearing(Tools.ComponentModelT.CancelMessageEventArgs)"/> before clearing of the list and <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnCleared(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.DictionaryItemsEventArgs)"/> after clearing of the list,, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clearing"/> event</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnClearing(Tools.ComponentModelT.CancelMessageEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clearing"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnClearing(Tools.ComponentModelT.CancelMessageEventArgs)"/> in order the event to be raised</remarks>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Clearing"/> event</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnCleared(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.DictionaryItemsEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Cleared"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnCleared(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.DictionaryItemsEventArgs)"/> in order the event to be raised</remarks>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.RemovingEventHandlerList">
 <summary>List of <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemCancelEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing"/> event is raised</summary>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing">
 <summary>Raised before item is removed from the list. Raised by <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Remove(System.Object)"/> method.</summary>
 <remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/>.
 This means that<see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 Do not change content of list in handler! List is locked.
 </para><para>
 <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing"/> event is not raised when list is being cleared.
 </para><para>
 Value of parameter <paramref name="e"/>'s <see cref="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelableKeyValueEventArgs.Newkey"/> cannot be changed.
 </para>
 </remarks>
 <exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/> is false</exception>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed">
 <summary>Raised after the list is cleared. Raised by <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Remove(System.Object)"/> method.</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
 <remarks><see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed"/> event is not raised when the list.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnRemoving(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.CancelableKeyValueEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks><para>
 Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnRemoving(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.CancelableKeyValueEventArgs)"/> in order the event to be raised
 </para><para>
 Do not change content of list in this method!
 </para><para>
 </para></remarks>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing"/> event</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnRemoved(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.KeyValueEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnRemoved(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.KeyValueEventArgs)"/> in order the event to be raised</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Remove(`0)">
 <summary>Removes item with given key from the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</summary>
 <param name="key">The object to remove from the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</param>
 <returns>true if item was successfully removed from the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removing"/> event</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null</exception>
 <remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnRemoving(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.CancelableKeyValueEventArgs)"/> before removing item and <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnRemoved(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.KeyValueEventArgs)"/> after removing item, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChangingEventHandlerList">
 <summary>List of <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemCancelEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> event is raised</summary>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging">
 <summary>Raised before an item is changed. Raised by setter of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Item(`0)"/> property.</summary>
 <remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/>.
 This means that <see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 Value of parameter <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> can be changed if <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddingReadOnly"/> is False.
 </para><para>
 Do not change content of list in handler! List is locked.
 </para><para>
 <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> contains new value. Use <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Item(`0)"/> to determine old value.
 </para></remarks>
 <exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AllowAddCancelableEventsHandlers"/> is false</exception>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged">
 <summary>Raised after item in the list is changed. Raised by setter of <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Item(`0)"/> property.</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters (<see cref="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemEventArgs.Item"/> contains old value, use <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Item(`0)"/> to determine new value.)</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnItemChanging(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.CancelableKeyValueEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> event</summary>
 <param name="e">Event argument</param>
 <remarks><para>
 Note for inheritors: Alway call base class method <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnItemChanging(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.CancelableKeyValueEventArgs)"/> in order the event to be raised.
 </para><para>
 Do not change the content of the list in this method!
 </para></remarks>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> event</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnItemChanged(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.OldNewValueEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnItemChanged(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.OldNewValueEventArgs)"/> in order the event to be raised.</remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Item(`0)">
 <summary>Gets or sets the element with the specified key.</summary>
 <param name="key">The key of the element to get or set.</param>
 <returns>The element with the specified key.</returns>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key is not found.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Locked"/> is True (in setter)</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanging"/> event</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.InternalDict">
 <summary>Gives access to underlying <see cref="T:System.Collections.Generic.Dictionary`2"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddItemHandler(`0)">
 <summary>Adds handler to item at specified index if the item is <see cref="T:Tools.IReportsChange"/></summary>
 <param name="key">Key of item tem to try add handler</param>
 <remarks>Call after item is added</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.RemoveItemHandler(`0)">
 <summary>Removes handler from item at specified index if the item is <see cref="T:Tools.IReportsChange"/></summary>
 <param name="key">Key of item to try remove handler</param>
 <remarks>Call before item is removed</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.RemoveAllItemHandlers">
 <summary>Removes handlers from all item that are of type <see cref="T:Tools.IReportsChange"/></summary>
 <remarks>Call before clering list</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.AddAllItemHandlers">
 <summary>Adds ahndlers to all items that as of type <see cref="T:Tools.IReportsChange"/></summary>
 <remarks>Call only from CTor when no handlers have been added</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnItemValueChanged(Tools.IReportsChange,System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemValueChanged"/> event and handles the <see cref="E:Tools.IReportsChange.Changed"/> event for items</summary>
 <param name="sender">Original source of the event</param>
 <param name="e">Original event parameters</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnItemValueChanged(Tools.IReportsChange,System.EventArgs)"/> in order the event to be raised</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.KeyOf(`1)">
 <summary>Gets key of firts occurence of given item</summary>
 <param name="value">Item to find key of</param>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="value"/> was not found in dictionary and <typeparamref name="TKey"/> is <see cref="T:System.ValueType"/>.</exception>
 <returns>Key of first occurence of <paramref name="value"/> in dictionary. If <paramref name="value"/> is not found returns null (if <typeparamref name="TKey"/> is reference type) or throws an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> (if <typeparamref name="TKey"/> is <see cref="T:System.ValueType"/>)</returns>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemValueChanged">
 <summary>Raised when any of items that is of type <see cref="T:Tools.IReportsChange"/> raises <see cref="E:Tools.IReportsChange.Changed"/> event</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event params (contains original source (item) and original arguments</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.#ctor(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction)">
 <summary>CTor</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <param name="Action">Action which occured on collection</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.#ctor(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,`0)">
 <summary>CTor with index</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <param name="Action">Action which occured on collection</param>
 <param name="key">Key at which the change has occured</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.#ctor(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,`0,`1,`1)">
 <summary>CTor with index and old and new value</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <param name="Action">Action which occured on collection</param>
 <param name="key">Key at which the change has occured</param>
 <param name="OldValue">Old value at index <paramref name="index"/></param>
 <param name="NewValue">New value at index <paramref name="index"/></param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.Collection">
 <summary>Collection which was changed</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs._Key">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.Key"/> property</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs._OldValue">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.OldValue"/> property</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs._NewValue">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.NewValue"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.Key">
 <summary>Gets key at which change occured (if applicable)</summary>
 <returns>Original key where the change has ocured. If not applicable returns null (fo refrence types) or type default value (for <see cref="T:System.ValueType">value types</see>)</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.OldValue">
 <summary>Gets value on index <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.Key"/> before change (if applicable)</summary>
 <returns>Original value at index <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.Key"/>. If not applicable returns null (for reference types) or type default value (for <see cref="T:System.ValueType">value types</see>)</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.NewValue">
 <summary>Gets value with key <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.Key"/> after change (if applicable)</summary>
 <returns>Valu at index <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.Key"/> after changed. If not applicable returns null (for reference types) or type default value (for <see cref="T:System.ValueType">value types</see>)</returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryItemsEventArgs">
 <summary>Parameter of event that report items</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryItemsEventArgs.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
 <summary>CTor</summary>
 <param name="Items">Items to be reported</param>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryItemsEventArgs._Items">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryItemsEventArgs.Items"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryItemsEventArgs.Items">
 <summary>Items reported by this event</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelableKeyValueEventArgs">
 <summary>Argument of <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> event</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelableKeyValueEventArgs.#ctor(`0,`1,System.Boolean)">
 <summary>CTor</summary>
 <param name="value">Value associated with current event</param>
 <param name="ReadOnly">True to disallow changing of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> property</param>
 <param name="key">Key of newly added item</param>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CancelableKeyValueEventArgs.Newkey">
 <summary>Key of newly added item</summary>
 <remarks>The key may be invalid when collecion-manipulation is done between raising <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Adding"/> event and using this instance.</remarks>
</member>
<member name="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.KeyValueEventArgs">
 <summary>Parameter of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added"/> event</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.KeyValueEventArgs.Key">
 <summary>Key of newly added or changed item</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.KeyValueEventArgs.#ctor(`0,`1)">
 <summary>CTor</summary>
 <param name="value">Newly added item</param>
 <param name="key">Key of newly added item</param>
</member>
<member name="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OldNewValueEventArgs">
 <summary>Parameter of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged"/> event</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OldNewValueEventArgs.OldValue">
 <summary>Old value previosly on <see cref="F:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.KeyValueEventArgs.Key"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OldNewValueEventArgs.#ctor(`0,`1,`1)">
 <summary>CTor</summary>
 <param name="OldValue">Old value present at key</param>
 <param name="NewValue">New value present at key</param>
 <param name="key">Identification key</param>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Changed">
 <summary>Raised when value of member changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event information.
 As of this implementation type of <paramref name="e"/> is always one of following types: <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.KeyValueEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added"/>), <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryItemsEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Cleared"/>), <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.KeyValueEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed"/>), <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OldNewValueEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemValueChanged"/>).</param>
 <remarks>Raised after <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Cleared"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemValueChanged"/> events with the same argument <paramref name="e"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Changed"/> event</summary>
 <param name="e">Event parameters</param>
 <remarks>Called after <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Cleared"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemValueChanged"/> events with the same argument <paramref name="e"/>.
 You should call one of overloaded <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnCollectionChanged(System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,`0,`1,`1)"/> methods after calling this.</remarks>
</member>
<member name="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CollectionChanged">
 <summary>Raised when this <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/> collection changes.</summary>
 <param name="sender">Source ot the event</param>
 <param name="e">Event arguments. The <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">ChangedEventArgs</see> contains event argument of the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Changed"/> event raised immediatelly prior this event.
 As of this implementation type of <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">ChangedEventArgs</see> is always one of following types: <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.KeyValueEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added"/>), <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryItemsEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Cleared"/>), <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.KeyValueEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed"/>), <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OldNewValueEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemValueChanged"/>).
 Value of <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs.Collection"/> is always this instance.</param>
 <remarks>This event is raised immediatelly after each <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Changed"/> event.<para>
 The reason for having two duplicit events is that <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Changed"/> implements <see cref="E:Tools.IReportsChange.Changed"/> and you cannot determine action (what happend) through it. The aim of this event is to concentrate <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Added"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Removed"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Cleared"/>, <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemChanged"/> and <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ItemValueChanged"/> events to one single event which allows handler to easily dinstinguish which action happedned on collection.</para></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnCollectionChanged(Tools.CollectionsT.GenericT.DictionaryWithEvents{`0,`1}.DictionaryChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CollectionChanged"/> event.</summary>
 <param name="e">Event argument. The <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">ChangedEventArgs</see> should always contain event argument of preceding call of <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnChanged(System.EventArgs)"/></param>
 <remarks>You should call one of overloaded <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnChanged(System.EventArgs)"/> methods after all calls of <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnChanged(System.EventArgs)"/>.
 This overridable overload is always called by the other overloads.</remarks>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnCollectionChanged(System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,`0,`1,`1)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CollectionChanged"/> event via calling <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`1.OnChanged(Tools.CollectionsT.GenericT.ListChangedEventArgs)"/></summary>
 <param name="e">Argument of preceding call of <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnChanged(System.EventArgs)"/></param>
 <param name="Action">Action taken on collection</param>
 <param name="OldValue">Old value at index <paramref name="index"/> prior to change. Pass null (default value for value types) if not applicable.</param>
 <param name="NewValue">New value at index <paramref name="index"/> after change. pass null (default value for value types) if not applicable</param>
 <param name="Key">Index at which change has occured. Pass -1 if not applicable</param>
 <remarks>You should call one of overloaded <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnChanged(System.EventArgs)"/> methods after all calls of <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.OnChanged(System.EventArgs)"/>.</remarks>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
 <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <returns>true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException">array is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
 <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CollectionDic">
 <summary>Gets <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.InternalDict"/> as <see cref="T:System.Collections.Generic.ICollection`1"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.ContainsKey(`0)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
 <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
 <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="key" /> is null.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Keys">
 <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
 <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.TryGetValue(`0,`1@)">
 <summary>Gets the value associated with the specified key.</summary>
 <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
 <param name="key">The key whose value to get.</param>
 <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the 
 <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="key" /> is null.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Values">
 <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
 <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.GetEnumerator">
 <summary>Returns an enumerator that iterates through the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>.</summary>
 <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator"/> structure for the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2" />.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Count">
 <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Add(System.Object,System.Object)">
 <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.</summary>
 <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add. </param>
 <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add. </param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="key" /> is null. </exception>
 <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" /> object. </exception>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="key"/> is not of type <typeparamref name="TKey"/> -or- <paramref name="value"/> value is not of type <typeparamref name="TValue"/></exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Contains(System.Object)">
 <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.</summary>
 <returns>true if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.</returns>
 <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="key" /> is null. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.IDictionary_GetEnumerator">
 <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</summary>
 <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.IsFixedSize">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
 <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.IsReadOnly">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.</summary>
 <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.IDictionary_Item(System.Object)">
 <summary>Gets or sets the element with the specified key.</summary>
 <returns>The element with the specified key.</returns>
 <param name="key">The key of the element to get or set. </param>
 <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null. </exception>
 <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException">Value is being get and <paramref name="key"/> is not of type <typeparamref name="TKey"/></exception>
 <exception cref="T:Tools.TypeMismatchException">Value is being set and <paramref name="key"/> is not of type <typeparamref name="TKey"/> -or- Value is being set and value being set is not of type <typeparamref name="TValue"/>.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.IDIctionary_Keys">
 <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</summary>
 <returns>An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Remove(System.Object)">
 <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.</summary>
 <param name="key">The key of the element to remove. </param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="key" /> is null. </exception>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary" /> object is read-only.-or- The <see cref="T:System.Collections.IDictionary" /> has a fixed size. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.IDictionary_Values">
 <summary>Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</summary>
 <returns>An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.UnsafeInternalDictionary">
 <summary>Gets <see cref="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.InternalDict"/> as <see cref="T:System.Collections.IDictionary"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.Remove_ICollection(System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <returns>true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.CopyTo(System.Array,System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
 <param name="index">The zero-based index in 
 <paramref name="array" /> at which copying begins. </param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="array" /> is null. </exception>
 <exception cref="T:System.ArgumentOutOfRangeException">
 <paramref name="index" /> is less than zero. </exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="array" /> is multidimensional.-or- 
 <paramref name="index" /> is equal to or greater than the length of 
 <paramref name="array" />.-or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from 
 <paramref name="index" /> to the end of the destination 
 <paramref name="array" />. </exception>
 <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination 
 <paramref name="array" />. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.IsSynchronized">
 <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
 <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.SyncRoot">
 <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
 <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
 <remarks>Use type-safe <see cref="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.GetEnumerator"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.GetValuesEnumerator">
 <summary>Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> to enumerate values in dictionary</summary>
 <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object for the <see cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2" /> object.</returns>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="T:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2">
 <summary>Implements read-only <see cref="T:System.Collections.Generic.IDictionary`2"/></summary>
 <typeparam name="TKey">Type of dictionary keys</typeparam>
 <typeparam name="TValue">Type of dictionary items</typeparam>
 <remarks>This class can either wrap any <see cref="T:System.Collections.Generic.IDictionary`2"/> or copy any <see cref="T:System.Collections.Generic.IDictionary`2"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
 <summary>CTor from <see cref="T:System.Collections.Generic.IDictionary`2"/> with choice to wrap or copy it</summary>
 <param name="Dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/> to be wrapped or copyed</param>
 <param name="Wrap">True to wrap  <paramref name="Dictionary"/>, false to create copy of <paramref name="Dictionary"/>. Default is false.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Dictionary"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
 <summary>CTror from <see cref="T:System.Collections.Generic.IDictionary`2"/> with comparer.</summary>
 <remarks>This ctor always creates copy of <paramref name="Dictionary"/> values</remarks>
 <param name="Dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/> to be copied</param>
 <param name="Comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Dictionary"/> is null</exception>
</member>
<member name="F:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Dictionary">
 <summary>Internal dictionary</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.DictionaryCollection">
 <summary>Gets <see cref="F:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Dictionary"/> as <see cref="T:System.Collections.Generic.ICollection`1"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <exception cref="T:System.NotSupportedException">Because this collection is read-only</exception>
 <param name="item">Ignored</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Clear">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <exception cref="T:System.NotSupportedException">Because this collection is read-only</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <exception cref="T:System.NotSupportedException">Because this collection is read-only</exception>
 <param name="item">Ignored</param>
 <returns>This function never returns and also throws <see cref="T:System.NotSupportedException"/></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Add(`0,`1)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <exception cref="T:System.NotSupportedException">Because this collection is read-only</exception>
 <param name="key">Ignored</param><param name="value">Ignored</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.IDIctionary_Item(`0)">
 <summary>Gets or sets the element with the specified key.</summary>
 <returns>The element with the specified key.</returns>
 <param name="key">The key of the element to get or set.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="key" /> is null.</exception>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and 
 <paramref name="key" /> is not found.</exception>
 <exception cref="T:System.NotSupportedException">The property being is set.</exception>
 <value>Do not set this property as this collection is read-only and setter thus always throws <see cref="T:System.NotSupportedException"/>.</value>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Remove(`0)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <exception cref="T:System.NotSupportedException">Because this collection is read-only</exception>
 <param name="key">Ignored</param>
 <returns>This function never returns and also throws <see cref="T:System.NotSupportedException"/></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in 
 <paramref name="array" /> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="array" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">
 <paramref name="arrayIndex" /> is less than 0.</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="array" /> is multidimensional.-or-
 <paramref name="arrayIndex" /> is equal to or greater than the length of 
 <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from 
 <paramref name="arrayIndex" /> to the end of the destination 
 <paramref name="array" />.-or-Type 
 <paramref name="T" /> cannot be cast automatically to the type of the destination 
 <paramref name="array" />.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.IsReadOnly">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
 <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
 <remarks>Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.GetEnumerator"/> instead</remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Count">
 <summary>Gets the number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2"/>.</summary>
 <returns>The number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2" />.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.ContainsKey(`0)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
 <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
 <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="key" /> is null.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Item(`0)">
 <summary>Gets or sets the element with the specified key.</summary>
 <returns>The element with the specified key.</returns>
 <param name="key">The key of the element to get or set.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="key" /> is null.</exception>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and 
 <paramref name="key" /> is not found.</exception>
 <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Keys">
 <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
 <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
 <summary>Gets the value associated with the specified key.</summary>
 <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
 <param name="key">The key whose value to get.</param>
 <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the 
 <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="key" /> is null.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.Values">
 <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
 <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.GetValuesEnumerator">
 <summary>Returns an enumerator that iterates through the collection over values only.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2.CopyTo(`1[],System.Int32)">
 <summary>Copies the values of the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyDictionary`2" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.                </summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.                </param>
 <param name="index">The zero-based index in 
 <paramref name="array" /> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional. -or-
 <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />. -or- The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from<paramref name="arrayIndex" /> to the end of the destination  <paramref name="array" />. -or-
 Type  <paramref name="T" /> cannot be cast automatically to the type of the destination  <paramref name="array" />. </exception>
</member>
<member name="T:Tools.CollectionsT.GenericT.IndexableEnumerator`2">
 <summary>Implements <see cref="T:System.Collections.Generic.IEnumerator`1"/> for any <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/> where possible indexes are supplied from ouside</summary>
 <typeparam name="TIndex">Type of index</typeparam>
 <typeparam name="TValue">Type of value</typeparam>
</member>
<member name="F:Tools.CollectionsT.GenericT.IndexableEnumerator`2.keys">
 <summary>Outside-supplied indexes</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.IndexableEnumerator`2.instance">
 <summary>Instance to be indexed</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0},Tools.CollectionsT.GenericT.IReadOnlyIndexable{`1,`0})">
 <summary>CTor</summary>
 <param name="KeysEnumerator"><see cref="T:System.Collections.IEnumerator"/> which supplies indexes to enumerate over</param>
 <param name="Instance"><see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/> to enumerate over</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Instance"/> or <paramref name="KeysEnumerator"/> is null</exception>
 <version version="1.5.4">Parameters renamed: <c>KeysEnumerator</c> to <c>keysEnumrator</c>, <c>Instance</c> to <c>instance</c></version>
 <version version="1.5.4">Fix: <see cref="T:System.InvalidCastException"/> when <paramref name="instance"/> is not <see cref="T:Tools.CollectionsT.GenericT.IIndexable`2"/>, now <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/> is enough.</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.IndexableEnumerator`2.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.IndexableEnumerator`2.Current1">
 <summary>Gets the element in the collection at the current position of the enumerator.                </summary>
 <returns>The element in the collection at the current position of the enumerator.                </returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumerator`2.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.                </returns>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.                 </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumerator`2.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.                </summary>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.                 </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumerator`2.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.                </summary>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.CollectionsT.GenericT.DuplicateDictionary`2">
 <summary>Ordered dictionary which allws duplicate entries</summary>
 <remarks>This dictionary allows duplicate keys and is kept ordered.</remarks>
 <typeparam name="TKey">Type of dictionary key</typeparam>
 <typeparam name="TValue">Type of dictionary value</typeparam>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.DuplicateDictionary`2.list">
 <summary>Internal list to store dictionary data in</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Comparison">
 <summary>Comparison used for comparing keys in dictionary</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.PairComparison(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Compares two <see cref="T:System.Collections.Generic.KeyValuePair`2"/> values by their <see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Keys</see></summary>
 <param name="x">A <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
 <param name="y">A <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
 <returns>Value Condition Less than 0 <paramref name="x"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see> is less than <paramref name="y"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see>.  0 <paramref name="x"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see> equals <paramref name="y"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see>. Greater than 0 <paramref name="x"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see> is greater than <paramref name="y"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see>.</returns>
 <seealso cref="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Comparison"/>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Comparison{`0})">
 <summary>CTor - creates a new instance of <see cref="T:Tools.CollectionsT.GenericT.DuplicateDictionary`2"/> class</summary>
 <param name="dictionary">Contains data to populate dictionary with</param>
 <param name="comparison">Comparison used for comparing keys</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> or <paramref name="comparison"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`0})">
 <summary>CTor - creates a new instance of <see cref="T:Tools.CollectionsT.GenericT.DuplicateDictionary`2"/> class</summary>
 <param name="dictionary">Contains data to populate dictionary with</param>
 <param name="comparer">Comparer used for comparing keys</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> or <paramref name="comparer"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.#ctor(Tools.CollectionsT.GenericT.DuplicateDictionary{`0,`1})">
 <summary>Copy CTor - creates a copy of given instance of <see cref="T:Tools.CollectionsT.GenericT.DuplicateDictionary`2"/></summary>
 <param name="dictionary">A dictionary to create clone of</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.FirstIndexOf(`0)">
 <summary>Finds first index of key in dictionary</summary>
 <param name="key">A key to find index of</param>
 <returns>Index of first occurence of <paramref name="key"/> in the dictionary. -1 if <paramref name="key"/> is not present in the dictionary.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.LastIndexOf(`0)">
 <summary>Finds last index of key in dictionary</summary>
 <param name="key">A key to find index of</param>
 <returns>Index of last occurence of <paramref name="key"/> in the dictionary. -1 if <paramref name="key"/> is not present in the dictionary.</returns>        
 <remarks><see cref="T:Tools.CollectionsT.GenericT.DuplicateDictionary`2"/> guarantees that there are only items with key <paramref name="key"/> between indexes <see cref="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.FirstIndexOf(`0)"/> and <see cref="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.LastIndexOf(`0)"/>.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.LastIndexOf(`0,System.Int32)">
 <summary>Finds last index of key in dictionary (after given first index of it)</summary>
 <param name="key">A key to find index of</param>
 <param name="firstIndex">Index where the <paramref name="key"/> occurs for the first time</param>
 <returns>Index of last occurence of <paramref name="key"/> after <paramref name="firstIndex"/>. <paramref name="firstIndex"/> when <paramref name="firstIndex"/> less then zero or there are no more occurences of <paramref name="key"/> after <paramref name="firstIndex"/>.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.GetFirst(`0)">
 <summary>Gets value of first occurence of given key</summary>
 <param name="key">A key to get value of</param>
 <returns>Value associated with first occurence of <paramref name="key"/></returns>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> is not present in this dictionary</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.GetAll(`0)">
 <summary>Gets all the values associated with all occurences of given key</summary>
 <param name="key">A key to get values of</param>
 <returns>Array containing all the value associated with <paramref name="key"/>. An empty array if <paramref name="key"/> is not contained in the dictionary.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Item(System.Int32)">
 <summary>Gets value from this dictionary at given index</summary>
 <param name="index">Index to get value at</param>
 <returns>Key and value present at given <paramref name="index"/> of this dictionary</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.  -or- <paramref name="index"/> is equal to or greater than <see cref="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Count"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.IDictionary_Add(`0,`1)">
 <summary>Add an item to dictionary</summary>
 <param name="key">Key of item to be added</param>
 <param name="value">Value of item to be added</param>
 <remarks>This method is inefficient when called repeatedly as it requires re-sorting the dictionary</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.ContainsKey(`0)">
 <summary>Gets value indicating if given key is present in the dictionary</summary>
 <param name="key">A key to be found in dictionary</param>
 <returns>True if <paramref name="key"/> is present in dictionary, false if it is not</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Keys">
 <summary>Gets a collection containing all the keys of this dictionary (duplicate keys are contained repeatedly)</summary>
 <returns>A read-only collection of keys</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Remove(`0)">
 <summary>Removes first occurence of given key from dictionary</summary>
 <param name="key">Key of item to remove</param>
 <returns>True when item with given <paramref name="key"/> was originally present in the dictionary and was removed. False when <paramref name="key"/> was not in the dictionary and thus no change has occured.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.TryGetValue(`0,`1@)">
 <summary>Attempts to get value identified by key from the dictionary</summary>
 <param name="key">A key to get value of</param>
 <param name="value">When this methods returns true is assigned value of item with key <paramref name="key"/></param>
 <returns>True when <paramref name="key"/> was found in the dictionary and asssociated value was assigned to <paramref name="value"/>; false otherwise.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Values">
 <summary>Gets a collection containing all the values of this dictionary</summary>
 <returns>A read-only collection of values</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Item(`0)">
 <summary>Gets or sets value of of item in the dictionary identified by a key</summary>
 <param name="key">Key ot get or set value of</param>
 <returns>Value of first occurence of <paramref name="Key"/> in the dictionary.</returns>
 <value>A new value to be assigned to first occurence of <paramref name="Key"/> in the dictionary.</value>
 <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> is not present in the dictionary.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.ICollection_Add(System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Adds an item to this dictionary</summary>
 <param name="item">An item - key and value - to be added</param>
 <remarks>This method is inneficient when called repeatedly because it needs the dictionary to be resorted.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.ICollection_Clear">
 <summary>Clears the dictionary</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.ICollection_Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Determines whether the dictionary contains a specific value.</summary>
 <param name="item">The object to locate in the dictionary.</param>
 <returns>true if item is found in the dictionary; otherwise, false.</returns>
 <remarks><paramref name="item"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see> part is compared using <see cref="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Comparison"/>, <paramref name="item"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Value">Value</see> part is comparet using <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
 <summary>Copies the elements of the dictionary to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from the dictionary. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.  -or-
 <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.  -or-
 The number of elements in the source dictionary is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.  -or-
 Type <typeparamref name="KeyValuePair{TKey, TValue}"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Count">
 <summary>Gets number of items in the dictionary</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.ICollection_IsReadOnly">
 <summary>Gets value indicating if this dictionary is read-only</summary>
 <returns>Always returns false</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.ICollection_Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
 <summary>Removes first occurence of given item from the dictionary</summary>
 <param name="item">An item to be removed</param>
 <returns>True when <paramref name="item"/> was found in dictionary and removed, false otherwise</returns>
 <remarks><paramref name="item"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Key">Key</see> part is compared using <see cref="P:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Comparison"/>, <paramref name="item"/>.<see cref="P:System.Collections.Generic.KeyValuePair`2.Value">Value</see> part is comparet using <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.GetEnumerator">
 <summary>Gets type-safe generic enumerator for this dictionary</summary>
 <returns>Type-safe generic enumerator for this dictionary</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.IEnumerable_GetEnumerator">
 <summary>Gets type-unsafe generic enumerator for this dictionary</summary>
 <returns>Type-unsafe generic enumerator for this dictionary</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.CloneInternal">
 <summary>Internally implements the <see cref="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.Clone"/> method.</summary>
 <returns>Cloned instance of current instance. Derived class must always override this method and return instance of derived class.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.DuplicateDictionary`2.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.FilteredEnumerator`1">
 <summary>Filterg given <see cref="T:System.Collections.Generic.IEnumerator`1"/> with given <see cref="T:System.Predicate`1"/></summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.FilteredEnumerator`1.internal">
 <summary>Filtered <see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Filter">
 <summary>Predicate filter. Include only items for which predicate is true</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Predicate{`0})">
 <summary>CTor</summary>
 <param name="Other">The <see cref="T:System.Collections.Generic.IEnumerator`1"/> to be filtered</param>
 <param name="Filter">Filter predicate. Only items for which predicate is True are included in filtered enumeration</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.FilteredEnumerator`1._Current">
 <summary>Gets the current element in the collection.</summary>
 <returns>The current element in the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.MoveNext">
 <summary>Advances the enumerator to the next element of the collection while exluding elements for which predicate given in CTor is false.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member>
<member name="F:Tools.CollectionsT.GenericT.FilteredEnumerator`1.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Dispose(System.Boolean)">
 <summary>This code added by Visual Basic to correctly implement the disposable pattern.</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <remarks>Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.</remarks>
</member>
<member name="T:Tools.CollectionsT.GenericT.IBiDirEnumerator`1">
 <summary>Provides interface of bidirectional type-safe enumerator</summary>
 <typeparam name="T">Type of items to enumerate</typeparam>
</member>
<member name="M:Tools.CollectionsT.GenericT.IBiDirEnumerator`1.MovePrevious">
 <summary>Moves internal pointer of enumerator to previos member of collection</summary>
 <returns>True when pointer was succesfully mowed to item inside the collection. False if it was moved before start of collection or if it already was before start of collection. If pointer was after end of collection, it is moved to last item of collection and return value is true.</returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.IBiDirEnumerable`1">
 <summary>Provides interface for collections that has bidirectional enumerator</summary>
 <typeparam name="T">Type of element in collection</typeparam>
</member>
<member name="M:Tools.CollectionsT.GenericT.IBiDirEnumerable`1.GetEnumerator">
 <summary>Gets <see cref="T:Tools.CollectionsT.GenericT.IBiDirEnumerator`1"/> for the collection</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.IIndexable`2">
 <summary>Rapresent anything that can be indexed by anything</summary>
 <typeparam name="TIndex">Data type of indexes</typeparam>
 <typeparam name="TItem">Datatype of items</typeparam>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.IIndexable`2.Item(`1)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2">
 <summary>Rapresent anything that can be indexed by anything for readonly access</summary>
 <typeparam name="TIndex">Data type of indexes</typeparam>
 <typeparam name="TItem">Datatype of items</typeparam>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2.Item(`1)">
 <summary>Gets value on specified index</summary>
 <param name="index">Index to obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="T:Tools.CollectionsT.GenericT.IIndexableWithRange`2">
 <summary>Represents anythign that can be indexed by <see cref="T:System.Int64"/></summary>
 <typeparam name="TItem">Data type of items</typeparam>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2">
 <summary>Represents anythign that can be indexed by <see cref="T:System.Int32"/> for readonly acces</summary>
 <typeparam name="TItem">Data type of items</typeparam>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2.Minimum">
 <summary>Minimal valid value for index</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2.Maximum">
 <summary>Maximal valid value for index</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2">
 <summary>Common base for indexable enumerators</summary>
 <typeparam name="TItem">Type of items in collection</typeparam>
 <typeparam name="TIndex">Type of index</typeparam>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.IsSmaller(`1,`1)">
 <summary>Gets value indicating if one index is smaller than other</summary>
 <param name="a">Index which should be smaller</param>
 <param name="b">Index which should be greater</param>
 <returns>true if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.IsGreater(`1,`1)">
 <summary>Gets value indicating if one index is greater than other</summary>
 <param name="a">Index which should be smaller</param>
 <param name="b">Index which should be greater</param>
 <returns>true if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Increment(`1)">
 <summary>Gets index by 1 greater than given</summary>
 <param name="a">An index to increment</param>
 <returns><paramref name="a"/> + 1</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Decrement(`1)">
 <summary>Gets index by 1 smaller than given</summary>
 <param name="a">An index to decrement</param>
 <returns><paramref name="a"/> - 1</returns>
 <remarks>Function must be able to decrement to value <see cref="F:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Collection"/>.<see cref="P:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2.Minimum">Minimum</see> - 1</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Equals(`1,`1)">
 <summary>Gets value indicating if one index is equals to other</summary>
 <param name="a">An index</param>
 <param name="b">An index</param>
 <returns>true if <paramref name="a"/> == <paramref name="b"/></returns>
</member>
<member name="F:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Collection">
 <summary><see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2"/> being enumerated</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Position">
 <summary>Curent position</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.#ctor(Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange{`0,`1})">
 <summary>CTor</summary>
 <param name="Collection"><see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2"/> to enumerate through</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Current1">
 <summary>Gets the current element in the collection.</summary>
 <returns>The current element in the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Dispose(System.Boolean)">
 <summary>IDisposable</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.IndexableEnumeratorBase`2.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member>
<member name="T:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1">
 <summary>Implements enumerator of <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.#ctor(Tools.CollectionsT.GenericT.IReadOnlyIndexable{`0,System.Int64})">
 <summary>CTor</summary>
 <param name="Collection"><see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithRange`2"/> to enumerate through</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.Decrement(System.Int64)">
 <summary>Gets index by 1 smaller than given</summary>
 <param name="a">An index to decrement</param>
 <returns><paramref name="a"/> - 1</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.Equals(System.Int64,System.Int64)">
 <summary>Gets value indicating if one index is equals to other</summary>
 <param name="a">An index</param>
 <param name="b">An index</param>
 <returns>true if <paramref name="a"/> == <paramref name="b"/></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.Increment(System.Int64)">
 <summary>Gets index by 1 greater than given</summary>
 <param name="a">An index to increment</param>
 <returns><paramref name="a"/> + 1</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.IsGreater(System.Int64,System.Int64)">
 <summary>Gets value indicating if one index is greater than other</summary>
 <param name="a">Index which should be smaller</param>
 <param name="b">Index which should be greater</param>
 <returns>true if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.LongIndexableEnumerator`1.IsSmaller(System.Int64,System.Int64)">
 <summary>Gets value indicating if one index is smaller than other</summary>
 <param name="a">Index which should be smaller</param>
 <param name="b">Index which should be greater</param>
 <returns>true if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1">
 <summary>Represents simple type-safe interface for read-only collection</summary>
 <typeparam name="T">Type of items in collections</typeparam>
</member>
<member name="P:Tools.CollectionsT.GenericT.IReadOnlyCollection`1.Count">
 <summary>Gets the number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see>.</summary>
 <returns>The number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see>.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
 <param name="index">The zero-based index in array at which copying begins. </param>
 <exception cref="T:System.ArgumentNullException">array is null. </exception>
 <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
 <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
 <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> cannot be cast automatically to the type of the destination array. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2">
 <summary>Represets read-only indexable collection</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IIndexableCollection`2">
 <summary>Represents collection that can be indexed</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IIndexableWithCount`2">
 <summary>Represents <see cref="T:Tools.CollectionsT.GenericT.IIndexable`2"/> that provides count of items within it</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableWithCount`2">
 <summary>Represents <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/> that provides count of items within it</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IAddable`1">
 <summary>Represents collection which allows adding items</summary>
 <typeparam name="T">Type of items in clollection</typeparam>
</member>
<member name="M:Tools.CollectionsT.GenericT.IAddable`1.Add(`0)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="T:Tools.CollectionsT.GenericT.IAddableIndexable`2">
 <summary>Represents indexable collection which allows adding items</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableEnumerable`2">
 <summary>Represents something read-only that can be indexed and enumerated</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IIndexableEnumerable`2">
 <summary>Represents somethign that can be indexed and enumerated</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IRemovable`1">
 <summary>Interface of something from which can be removed somethign at specified position (with specified key)</summary>
 <typeparam name="TIndex">Type of index</typeparam>
</member>
<member name="M:Tools.CollectionsT.GenericT.IRemovable`1.RemoveAt(`0)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="T:Tools.CollectionsT.GenericT.IIndexableRemovable`2">
 <summary><see cref="T:Tools.CollectionsT.GenericT.IIndexable`2"/> where items can be removed</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IAddableRemovable`2">
 <summary>Collection where items can be added and removed at specified index</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IReadOnlySearchable`2">
 <summary><see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/> that has <see cref="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.Contains"/> and <see cref="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.IndexOf"/> functions</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.Contains(`0)">
 <summary>Gets value indicating if the collection contains given object</summary>
 <param name="item">Object to search for</param>
 <returns>True if collection contains <paramref name="item"/>; false otherwise</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.IndexOf(`0)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns collection-specific value. Number-indexed collections usually returns -1.</returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.ISearchable`2">
 <summary><see cref="T:Tools.CollectionsT.GenericT.IIndexable`2"/> that has <see cref="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.Contains"/> and <see cref="M:Tools.CollectionsT.GenericT.IReadOnlySearchable`2.IndexOf"/> functions</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="T:Tools.CollectionsT.GenericT.IInsertable`2">
 <summary>Represents indexable collection where items can be inserted at specified index</summary>
 <typeparam name="TIndex">Type of items in collection</typeparam>
 <typeparam name="TItem">Type of index</typeparam>
</member>
<member name="M:Tools.CollectionsT.GenericT.IInsertable`2.Insert(`1,`0)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="T:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1">
 <summary>Implements type-safe <see cref="T:System.Collections.Generic.IEnumerator`1"/> for 1-dimensional array of any type</summary>
 <typeparam name="T">Type of array element</typeparam>
 <remarks>Supports arrays with non-zero lower bound.</remarks>
</member>
<member name="F:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Array">
 <summary>Array to enumerate through</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Index">
 <summary>Current index into array</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Inverse">
 <summary>True if enumeration goes from end to start of an array</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.#ctor(`0[],System.Boolean)">
 <summary>CTor</summary>
 <param name="Array">Array to enumerate through</param>
 <param name="Inverse">True if enumeration should be done from end to beginning of an array</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Array"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
 <exception cref="T:System.InvalidOperationException">Enumeration has not started yet or it has already finished.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1._Current">
 <summary>Gets the current element in the collection.</summary>
 <returns>The current element in the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
 <remarks>Use type-safe <see cref="P:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Current"/> instead</remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.CurrentIndex">
 <summary>Gets current index into array the enumerator points to</summary>
 <remarks>Index may be in range <see cref="M:System.Array.GetLowerBound(System.Int32)"/> - 1 to <see cref="M:System.Array.GetUpperBound(System.Int32)"/> + 1</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.MovePrevious">
 <summary>Moves internal pointer of enumerator to previos member of collection</summary>
 <returns>True when pointer was succesfully mowed to item inside the collection. False if it was moved before start of collection or if it already was before start of collection. If pointer was after end of collection, it is moved to last item of collection and return value is true.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Reset">
 <summary>Resets enumerator to start position (depends on direction of enumeration)</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Dispose(System.Boolean)">
 <summary>This code added by Visual Basic to correctly implement the disposable pattern.</summary>
 <param name="disposing">Set to True by <see cref="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Dispose"/></param>
</member>
<member name="M:Tools.CollectionsT.GenericT.TypedArrayEnumerator`1.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.UnionEnumerable`1">
 <summary>Performs union operations for <see cref="T:System.Collections.Generic.IEnumerable`1"/>s</summary>
 <typeparam name="T">Type of item</typeparam>
</member>
<member name="F:Tools.CollectionsT.GenericT.UnionEnumerable`1.Enumerables">
 <summary><see cref="T:System.Collections.Generic.IEnumerable`1"/>s this instance seems to be <see cref="T:System.Collections.Generic.IEnumerable`1"/> of item of</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
 <summary>CTor</summary>
 <param name="Enumerables"><see cref="T:System.Collections.Generic.IEnumerable`1"/>s to be unionized</param>
 <version version="1.5.2">Now it is sfe to pass null to <paramref name="Enumerables"/>.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
 <summary>CTor</summary>
 <param name="Enumerables"><see cref="T:System.Collections.Generic.IEnumerable`1"/>s to be unionized</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerable`1.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerable`1._GetEnumerator">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
 <remarks>Use type-safe GetEnumerator instead</remarks>
</member>
<member name="T:Tools.CollectionsT.GenericT.UnionEnumerator`1">
 <summary>Implements <see cref="T:System.Collections.Generic.IEnumerator`1"/> tha unifies more <see cref="T:System.Collections.Generic.IEnumerator`1"/>s</summary>
 <typeparam name="T">Type of item</typeparam>
 <version version="1.5.3">Added support for united enumerators to be null. Such enumerators are skipped. Previously caused <see cref="T:System.NullReferenceException"/> in <see cref="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.MoveNext"/></version>
 <version version="1.5.3">Fix: <see cref="T:System.NullReferenceException"/> can occur at the end of enumeration in <see cref="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.MoveNext"/>.</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.UnionEnumerator`1.Enumerators">
 <summary>Enumerators to unionize are enumerated through this enumerator</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0}[])">
 <summary>CTor from array of <see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
 <param name="Enumerators">Array of enumerators to union</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerator{`0}})">
 <summary>CTor from any <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <param name="Enumerators">Enumerators to union</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{`0}[])">
 <summary>CTor from array of <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <param name="Enumerables">Array of enumerables to get enumerators from and union them</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{`0}})">
 <summary>CTor from any <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <param name="Enumerables">Enumerables to get enumerators from and union them</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.UnionEnumerator`1.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.UnionEnumerator`1._Current">
 <summary>Gets the current element in the collection.</summary>
 <returns>The current element in the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
 <version version="1.5.3">Addes support for united enumerators to be null. Such enumerators are skipped</version>
 <version version="1.5.3">Fix: <see cref="T:System.NullReferenceException"/> can occur at the end of enumeration.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member>
<member name="F:Tools.CollectionsT.GenericT.UnionEnumerator`1.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.Dispose(System.Boolean)">
 <summary>This code added by Visual Basic to correctly implement the disposable pattern.</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnionEnumerator`1.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.Wrapper`1">
 <summary>Wpars type-unsafe <see cref="T:System.Collections.IEnumerable"/> as type-safe <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <typeparam name="T">Type that each item of wrapped collection must be of or convertible to</typeparam>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.Wrapper`1._Wrapped">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.Wrapper`1.Wrapped"/> property</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.Wrapper`1.#ctor(System.Collections.IEnumerable)">
 <summary>CTor</summary>
 <param name="WrapThis">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="WrapThis"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.Wrapper`1.Wrapped">
 <summary>Wrapped value</summary>
 <exception cref="T:System.ArgumentNullException">Setting value to null</exception>
 <remarks>Changing this value doesn't invalidate enumerators, so enumerations continues although the content of wrapper has changed</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.Wrapper`1.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.Wrapper`1.GetEnumerator1">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator">
 <summary>Wraps type-unsafe <see cref="T:System.Collections.IEnumerator"/> as type-safe <see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Wrap">
 <summary>type-unsafe <see cref="T:System.Collections.IEnumerator"/> to be wrapped</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.#ctor(System.Collections.IEnumerator)">
 <summary>CTor</summary>
 <param name="Wrap">type-unsafe <see cref="T:System.Collections.IEnumerator"/> to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Wrap"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
 <exception cref="T:System.InvalidCastException">Current value from collection cannot be converted to <typeparamref name="T"/>. Also another exception can be throw if thrown by cast operator.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Current1">
 <summary>Gets the current element in the collection.</summary>
 <returns>The current element in the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created</exception>
</member>
<member name="F:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Dispose(System.Boolean)">
 <summary><see cref="T:System.IDisposable"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.Wrapper`1.Enumerator.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWrapper`1">
 <summary>Wraps type-unsafe <see cref="T:System.Collections.IList"/> as type-safe <see cref="T:System.Collections.Generic.IList`1"/></summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.#ctor(System.Collections.IList)">
 <summary>CTor</summary>
 <param name="List">Item to be wrapped</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.List">
 <summary>Wrapped list</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.Wrapped">
 <summary>Wrapped value</summary>
 <exception cref="T:System.ArgumentNullException">Setting value to null</exception>
 <remarks>Changing this value doesn't invalidate enumerators, so enumerations continues although the content of wrapper has changed</remarks>
 <exception cref="T:System.ArgumentException">Value being set does not implement <see cref="T:System.Collections.IList"/></exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Add(`0)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Clear">
 <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Contains(`0)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.</summary>
 <returns>true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.CopyTo(`0[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-arrayIndex is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
 <exception cref="T:System.InvalidCastException"><see cref="P:Tools.CollectionsT.GenericT.ListWrapper`1.List"/> contains item that cannot be automatically cast to <typeparamref name="T"/></exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.Count">
 <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.IsReadOnly">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</summary>
 <returns><see cref="P:Tools.CollectionsT.GenericT.ListWrapper`1.List">List</see>.<see cref="P:System.Collections.IList.IsReadOnly">IsReadOnly</see></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Remove(`0)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</summary>
 <returns>true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.IndexOf(`0)">
 <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.</summary>
 <returns>The index of item if found in the list; otherwise, -1.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Insert(System.Int32,`0)">
 <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.</summary>
 <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
 <param name="index">The zero-based index at which item should be inserted.</param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.Item(System.Int32)">
 <summary>Gets or sets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
 <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.RemoveAt(System.Int32)">
 <summary>Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.</summary>
 <param name="index">The zero-based index of the item to remove.</param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.CopyTo(System.Array,System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
 <param name="index">The zero-based index in array at which copying begins. </param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. </exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. </exception>
 <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
 <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
 <remarks>This method is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.CopyTo(System.Array,System.Int32)"/> instead</remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.IsSynchronized">
 <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).</summary>
 <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.SyncRoot">
 <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</summary>
 <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Add(System.Object)">
 <summary>Adds an item to the <see cref="T:System.Collections.IList"></see>.</summary>
 <returns>The position into which the new element was inserted.</returns>
 <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>. </param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
 <remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.Add(System.Object)"/> instead</remarks>
 <version version="1.5.3">Fix: Always returns 0.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Contains(System.Object)">
 <summary>Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.</summary>
 <returns>true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.</returns>
 <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
 <remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.Contains(System.Object)"/> instead</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.IndexOf(System.Object)">
 <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.</summary>
 <returns>The index of value if found in the list; otherwise, -1.</returns>
 <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>. </param>
 <remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.IndexOf(System.Object)"/> instead</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Insert(System.Int32,System.Object)">
 <summary>Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.</summary>
 <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>. </param>
 <param name="index">The zero-based index at which value should be inserted. </param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
 <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
 <remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWrapper`1.Insert(System.Int32,System.Object)"/> instead. This method allows you to insert item of othert type than <typeparamref name="T"/></remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.IsFixedSize">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.</summary>
 <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWrapper`1.UnsafeItem(System.Int32)">
 <summary>Gets or sets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set. </param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
 <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"></see> is read-only. </exception>
 <remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="P:Tools.CollectionsT.GenericT.ListWrapper`1.Item(System.Int32)"/> instead. This property allows you to set item that is not of type <typeparamref name="T"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWrapper`1.Remove(System.Object)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.</summary>
 <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>. </param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
 <remarks>This function is provided only for compatibility with <see cref="T:System.Collections.IList"/>. Use type-safe <see cref="P:Tools.CollectionsT.GenericT.ListWrapper`1.Item(System.Int32)"/> instead.</remarks>
</member>
<member name="T:Tools.CollectionsT.GenericT.HashTable`1">
 <summary>Provides HashTable designed for storing only keys and quickly testing if key is in collection or not</summary>
 <remarks>Internally uses <see cref="T:System.Collections.Generic.Dictionary`2"/>. Can be used as List of unique items.</remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.HashTable`1.Internal">
 <summary><see cref="T:System.Collections.Generic.Dictionary`2"/> internally used by this instance</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
 <summary>CTor (optionally with comparer)</summary>
 <param name="EqualityComparer"><see cref="T:System.Collections.Generic.EqualityComparer`1"/> used to compare values (or null to use default)</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
 <summary>CTor (with capacity and optionally with comparer)</summary>
 <param name="Capacity">Initial capacity of internal <see cref="T:System.Collections.Hashtable"/></param>
 <param name="EqualityComparer"><see cref="T:System.Collections.Generic.EqualityComparer`1"/> used to compare values (or null to use default)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than zero</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.Add(`0)">
 <summary>Adds an element into collection.</summary>
 <param name="item">The value of the element to add. The value cannot be null.</param>
 <exception cref="T:System.ArgumentException">An element already exists in internall <see cref="T:System.Collections.Hashtable"/>.</exception>
 <exception cref="T:System.ArgumentNullException">An element is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.Clear">
 <summary>Clears internal <see cref="T:System.Collections.Hashtable"/> in order to contain no elements</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.Contains(`0)">
 <summary>Determines whether the collection contains a specific value.</summary>
 <param name="item">The object to locate in the collection.</param>
 <returns>true if item is found in the internal <see cref="T:System.Collections.Hashtable"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.CopyTo(`0[],System.Int32)">
 <summary>Copies the elements of the System.Collections.Generic.ICollection(Of T) to an System.Array, starting at a particular System.Array index.</summary>
 <param name="array">The one-dimensional System.Array that is the destination of the elements copied from System.Collections.Generic.ICollection(Of T). The System.Array must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
 <exception cref="T:System.ArgumentNullException">array is null.</exception>
 <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.HashTable`1.Count">
 <summary>Gets the number of elements contained in the internal <see cref="T:System.Collections.Hashtable"/>.</summary>
 <returns>The number of elements contained in the internal <see cref="T:System.Collections.Hashtable"/>.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.HashTable`1.IsReadOnly">
 <summary>Determines if this collection is read-only or not (always retruns False)</summary>
 <returns>Always False</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.Remove(`0)">
 <summary>Removes the first occurrence of a specific object from the internal <see cref="T:System.Collections.Hashtable"/>.</summary>
 <param name="item">The object to remove from the internal <see cref="T:System.Collections.Hashtable"/>.</param>
 <returns>true if item was successfully removed from the internal <see cref="T:System.Collections.Hashtable"/>; otherwise, false. This method also returns false if item is not found in the original internal <see cref="T:System.Collections.Hashtable"/>.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.GetEnumerator1">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection</returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1">
 <summary>Adapts <see cref="T:System.Collections.Generic.IEnumerator`1"/> into <see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
 <typeparam name="TVlaue">Type of values stored in <see cref="T:System.Collections.Generic.KeyValuePair`2"/>. Ignored, but must be specified in order the adapter to work in type-safe way</typeparam>
</member>
<member name="F:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.AdaptThis">
 <summary><see cref="T:System.Collections.IEnumerator"/> to be adapted</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.#ctor(System.Collections.IEnumerator)">
 <summary>CTor</summary>
 <param name="AdaptThis"><see cref="T:System.Collections.IEnumerator"/> to be adapted</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Current1">
 <summary>Gets the current element in the collection.</summary>
 <returns>The current element in the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member>
<member name="F:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Dispose(System.Boolean)">
 <summary><see cref="T:System.IDisposable"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.HashTable`1.KeyValuePairToKeyEnumeratorAdapter`1.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources</summary>
 <remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks> 
</member>
<member name="T:Tools.CollectionsT.GenericT.IReadOnlyList`1">
 <summary>Strongly typed read-only list that provides all applicable methods available in <see cref="T:System.Collections.Generic.List`1"/></summary>
 <typeparam name="T">Type of items in list</typeparam>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
 <summary>Copies a range of elements from the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <param name="count">The number of elements to copy.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
 <param name="index">The zero-based index in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. or <paramref name="arrayIndex"/> is less than 0 or <paramref name="count"/> is less than 0.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the <see cref="P:Tools.CollectionsT.GenericT.IReadOnlyList`1.Count"/> of the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> or <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/> or The number of elements from <paramref name="index"/> to the end of the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <see cref="T:System.Array"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.CopyTo(`0[])">
 <summary>Copies the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to a compatible one-dimensional array, starting at the beginning of the target array.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> is greater than the number of elements that the destination array can contain.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.CopyTo(`0[],System.Int32)">
 <summary>Copies the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
 <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of array or The number of elements in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.ForEach(System.Action{`0})">
 <summary>Performs the specified action on each element of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</param>
 <exception cref="T:System.ArgumentNullException">action is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.Contains(`0)">
 <summary>Determines whether an element is in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <returns>true if item is found in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.ConvertAll``1(System.Converter{`0,``0})">
 <summary>Converts the elements in the current <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to another type, and returns a list containing the converted elements.</summary>
 <returns>A <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> of the target type containing the converted elements from the current <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
 <param name="converter">A <see cref="T:System.Converter`2"/> delegate that converts each element from one type to another type.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.Exists(System.Predicate{`0})">
 <summary>Determines whether the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> contains elements that match the conditions defined by the specified predicate.</summary>
 <returns>true if the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.Find(System.Predicate{`0})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindAll(System.Predicate{`0})">
 <summary>Retrieves the all the elements that match the conditions defined by the specified predicate.</summary>
 <returns>A <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that starts at the specified index and contains the specified number of elements.</summary>
 <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
 <param name="count">The number of elements in the section to search.</param>
 <param name="startIndex">The zero-based starting index of the search.</param>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindIndex(System.Int32,System.Predicate{`0})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the specified index to the last element.</summary>
 <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
 <param name="startIndex">The zero-based starting index of the search.</param>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindIndex(System.Predicate{`0})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindLast(System.Predicate{`0})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <typeparamref name="T"/>.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that contains the specified number of elements and ends at the specified index.</summary>
 <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
 <param name="count">The number of elements in the section to search.</param>
 <param name="startIndex">The zero-based starting index of the backward search.</param>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the first element to the specified index.</summary>
 <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
 <param name="startIndex">The zero-based starting index of the backward search.</param>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.FindLastIndex(System.Predicate{`0})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.GetRange(System.Int32,System.Int32)">
 <summary>Creates a shallow copy of a range of elements in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <returns>A shallow copy of a range of elements in the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
 <param name="count">The number of elements in the range.</param>
 <param name="index">The zero-based <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> index at which the range starts.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.IndexOf(`0)">
 <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>, if found; otherwise, –1.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.IndexOf(`0,System.Int32)">
 <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the specified index to the last element.</summary>
 <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from <paramref name="index"/> to the last element, if found; otherwise, –1.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
 <param name="index">The zero-based starting index of the search.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.IndexOf(`0,System.Int32,System.Int32)">
 <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that starts at the specified index and contains the specified number of elements.</summary>
 <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
 <param name="count">The number of elements in the section to search.</param>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
 <param name="index">The zero-based starting index of the search.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.LastIndexOf(`0)">
 <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <returns>The zero-based index of the last occurrence of item within the entire the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>, if found; otherwise, –1.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.LastIndexOf(`0,System.Int32)">
 <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the first element to the specified index.</summary>
 <returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that extends from the first element to index, if found; otherwise, –1.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
 <param name="index">The zero-based starting index of the backward search.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.LastIndexOf(`0,System.Int32,System.Int32)">
 <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that contains the specified number of elements and ends at the specified index.</summary>
 <returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
 <param name="count">The number of elements in the section to search.</param>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. The value can be null for reference types.</param>
 <param name="index">The zero-based starting index of the backward search.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>. </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.ToArray">
 <summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> to a new array.</summary>
 <returns>An array containing copies of the elements of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.IReadOnlyList`1.TrueForAll(System.Predicate{`0})">
 <summary>Determines whether every element in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> matches the conditions defined by the specified predicate.</summary>
 <returns>true if every element in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions to check against the elements.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.IReadOnlyList`1.Count">
 <summary>Gets the number of elements actually contained in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</summary>
 <returns>The number of elements actually contained in the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/>.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.IReadOnlyList`1.Item(System.Int32)">
 <summary>Gets or sets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than <see cref="P:Tools.CollectionsT.GenericT.IReadOnlyList`1.Count"/>. </exception>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEventsBase">
 <summary>Common non-generic base class for all instance of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></summary>
 <remarks>This class is not intended to be inherited by anything else than <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.
 <para>Althought members f this abstract class are provided with documentation, it may be misleading. ALways study cocumentation of derived class <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</para></remarks>
 <version version="1.5.2">Class introduced</version>
 <version version="1.5.3">Added implementation for the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.#ctor">
 <summary>CTor</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Owner">
 <summary>When overriden in derived class represents custom property wher owner of the list can be stored to provide bi-directional reference</summary>
 <remarks>Change of this property is reported through <see cref="E:Tools.IReportsChange.Changed"/>.
 <para>This property is here for convenience, <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> does not utilize it.</para>
 <para>Change of this property is reported via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> and <see cref="E:Tools.IReportsChange.Changed"/>.</para></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.ICollection_CopyTo(System.Array,System.Int32)">
 <summary>When overriden in derived class copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <param name="index">The zero-based index in array at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException">array is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
 <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from index to the end of the destination array.</exception>
 <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination array.</exception>
 <remarks>Do not use, use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CopyTo(`0[],System.Int32)"/> instead. Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Count">
 <summary>When overriden in derived class gets the number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
 <returns>The number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</returns>
 <remarks>Change of this property is reported via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.</remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IsSynchronized">
 <summary>When overriden in derived class gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).</summary>
 <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.SyncRoot">
 <summary>When overriden in derived class gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</summary>
 <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/></returns>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.IEnumerable_GetEnumerator">
 <summary>When overriden in derived class returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.IList_Add(System.Object)">
 <summary>When overriden in derived class adds an item to the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
 <param name="value">The object to add to the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowItemCancel"/> is true.</exception>
 <version version="1.5.3">Method renamed from <c>Add</c> to <c>IList_Add</c> to avoid compiler from selecting this method and complaining thet it is obsolete (on <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>) when <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>[<see cref="T:System.Object"/>] is used.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.Clear">
 <summary>When overriden in derived class removes all items from the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event -or- Any exception can be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnClearing(System.Collections.ICollection)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowItemCancel"/> is true.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.Contains(System.Object)">
 <summary>When overriden in derived class determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.</summary>
 <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
 <returns>true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.</returns>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.IndexOf(System.Object)">
 <summary>When overriden in derived class determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
 <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
 <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />. </param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.Insert(System.Int32,System.Object)">
 <summary>When overriden in derived class inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
 <param name="index">The zero-based index at which <paramref name="value" /> should be inserted. </param>
 <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />. </param>
 <exception cref="T:System.ArgumentOutOfRangeException"> <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />. </exception>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size. </exception>
 <exception cref="T:System.NullReferenceException"><paramref name="value" /> is null reference in the <see cref="T:System.Collections.IList" />.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IsFixedSize">
 <summary>When overriden in derived class gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.</summary>
 <returns>Always False</returns>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IsReadOnly">
 <summary>When overriden in derived class gets a value indicating whether the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> is read-only (always false).</summary>
 <returns>Always false because <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> is not read-only</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IList_Item(System.Int32)">
 <summary>When overriden in derived class gets or sets the element at the specified index.</summary>
 <param name="index">The zero-based index of the element to get or set.</param>
 <returns>The element at the specified index.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"/>.</exception>
 <exception cref="T:Tools.TypeMismatchException">When setting value that cannot be converted to <typeparamref name="T"/></exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/> is True (in setter)</exception>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.Remove(System.Object)">
 <summary>When overriden in derived class removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.</summary>
 <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/></param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/> is True</exception>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.RemoveAt(System.Int32)">
 <summary>When overriden in derived class removes the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> item at the specified index.</summary>
 <param name="index">The zero-based index of the item to remove.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnRemoving(System.Collections.ICollection,System.Nullable{System.Int32})"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowItemCancel"/> is true.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.AddIndex(System.ComponentModel.PropertyDescriptor)">
 <summary>When overriden in derived class adds the <see cref="T:System.ComponentModel.PropertyDescriptor" /> to the indexes used for searching.</summary>
 <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to add to the indexes used for searching. </param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.IBindingList_AddNew">
 <summary>When overriden in derived class adds a new item to the list.</summary>
 <returns>The item added to the list.</returns>
 <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.AllowNew" /> is false. </exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowEdit">
 <summary>When overriden in derived class gets whether you can update items in the list.</summary>
 <returns>true if you can update the items in the list; otherwise, false.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.CanAddNew">
 <summary>When overriden in derived class gets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
 <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew" />; otherwise, false.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowRemove">
 <summary>When overriden in derived class gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)" /> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
 <returns>true if you can remove items from the list; otherwise, false.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
 <summary>When overriden in derived class sorts the list based on a <see cref="T:System.ComponentModel.PropertyDescriptor" /> and a <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
 <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to sort by. </param>
 <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection" /> values. </param>
 <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> is false. </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
 <summary>When overriden in derived class returns the index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
 <returns>The index of the row that has the given <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
 <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to search on. </param>
 <param name="key">The value of the 
 <paramref name="property" /> parameter to search for. </param>
 <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> is false. </exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IsSorted">
 <summary>When overriden in derived class gets whether the items in the list are sorted.</summary>
 <returns>true if <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> has been called and <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> has not been called; otherwise, false.</returns>
 <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> is false. </exception>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEventsBase.ListChanged">
 <summary>Occurs when the list changes or an item in the list changes.</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.ListChanged"/> event</summary>
 <param name="e">event arguments</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
 <summary>When overriden in derived class removes the <see cref="T:System.ComponentModel.PropertyDescriptor" /> from the indexes used for searching.</summary>
 <param name="property">The <see cref="T:System.ComponentModel.PropertyDescriptor" /> to remove from the indexes used for searching. </param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.RemoveSort">
 <summary>When overriden in derived class removes any sort applied using <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
 <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> is false. </exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.SortDirection">
 <summary>When overriden in derived class gets the direction of the sort.</summary>
 <returns>One of the <see cref="T:System.ComponentModel.ListSortDirection" /> values.</returns>
 <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> is false. </exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.SortProperty">
 <summary>When overriden in derived class gets the <see cref="T:System.ComponentModel.PropertyDescriptor" /> that is being used for sorting.</summary>
 <returns>The <see cref="T:System.ComponentModel.PropertyDescriptor" /> that is being used for sorting.</returns>
 <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> is false. </exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.SupportsChangeNotification">
 <summary>When overriden in derived class gets whether a <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> event is raised when the list changes or an item in the list changes.</summary>
 <returns>true if a <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> event is raised when the list changes or when an item changes; otherwise, false.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.SupportsSearching">
 <summary>When overriden in derived class gets whether the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> method.</summary>
 <returns>true if the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> method; otherwise, false.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.SupportsSorting">
 <summary>When overriden in derived class gets whether the list supports sorting.</summary>
 <returns>true if the list supports sorting; otherwise, false.</returns>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEventsBase.Changed">
 <summary>Raised when value of member changes</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event information.
 As of this implementation type of <paramref name="e"/> is always one of following types: <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/>).</param>
 <remarks>Raised after <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> events with the same argument <paramref name="e"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnChanged(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.Changed"/> event</summary>
 <param name="e">Event parameters</param>
 <remarks>Called after <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> events with the same argument <paramref name="e"/>.
 You should call one of overloaded <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCollectionChanged(System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,`0,`0,System.Int32)"/> methods after calling this.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnPropertyCnaged(System.ComponentModel.PropertyChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.PropertyChanged"/> event</summary>
 <param name="e">Event argumens</param>
 <remarks>This is for implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface, but only few properties are reported via this interface.
 Namely <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Count"/>, <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Owner"/> and <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/>.</remarks>
 <version version="1.5.2">Method added</version>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEventsBase.PropertyChanged">
 <summary>Occurs when a property value changes.</summary>
 <remarks>This is for implement the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface, but only few properties are reported via this interface.
 Namely <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Count"/>, <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Owner"/> and <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/>.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.ToArray1">
 <summary>When overiden in derived class copies all elements of this collection to new <see cref="T:System.Array"/></summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AddingReadOnly">
 <summary>When overiden in derived class determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.CancelError">
 <summary>When overiden in derived class gets value indicating if an <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowAddCancelableEventsHandlers">
 <summary>When overiden in derived class determines if it is allowed to add handlers for events that supports cancellation</summary>
 <exception cref="T:System.InvalidOperationException">Trying to set value to True when it if False</exception>
 <remarks>
 Value can be changed only from True (default) to False
 <list>
 <listheader>Those are events:</listheader>
 <item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/></item>
 <item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/></item>
 <item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/></item>
 <item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/></item>
 </list>
 </remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowItemCancel">
 <summary>When overiden in derived class gets or sets value indicating if items implementing <see cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/> are allowed to cancel itselves being added/removed to/from the list.</summary>
 <returns>True if item are allowed to cancel itselves being added/removed; false when they are not</returns>
 <value>False to prevent items from cancel itselves being added/removed; true to allow it. Default value is true.</value>
 <exception cref="T:System.InvalidOperationException">Value is being changed and <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IsAllowItemCancelLocked"/> is true</exception>
 <remarks>When setting this property to false, consider calling <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.LockAllowItemCancel"/>, otherwise item can change value of this property and perform cancellation.</remarks>
 <seelaso cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IsAllowItemCancelLocked"/><seelaso cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.LockAllowItemCancel"/><seelaso cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IsAllowItemCancelLocked">
 <summary>When overiden in derived class gets value indicationg if value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowItemCancel"/> can be changed</summary>
 <returns>True when value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowItemCancel"/> cannot be changed; false if it can.</returns>
 <remarks>Value of this property can be set to true by calling <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.LockAllowItemCancel"/></remarks>
 <seelaso cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.LockAllowItemCancel"/><seelaso cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowItemCancel"/><seelaso cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.LockAllowItemCancel">
 <summary>When overiden in derived class sets <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IsAllowItemCancelLocked"/>, so <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowItemCancel"/> can no longer be changed.</summary>
 <seelaso cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.IsAllowItemCancelLocked"/><seelaso cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.AllowItemCancel"/><seelaso cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked">
 <summary>When overiden in derived class determines if the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> isn locked (being locked prevents if from being edited)</summary>
 <remarks><para>
 <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> is usually locked while some events' handlers are being invoked.
 </para><list>
 <listheader><see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/> set to True blocks following methods and causes <see cref="T:System.InvalidOperationException"/> exception to be thrown there:</listheader>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,System.Object)"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(System.Object)"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.RemoveAt(System.Int32)"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.Clear"/></item>
 <item><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> (only setter)</item>
 </list></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.Lock">
 <summary>When overiden in derived class sets the <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/> to True</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.Unlock">
 <summary>When overiden in derived class sets the <see cref="P:Tools.CollectionsT.GenericT.ListWithEventsBase.Locked"/> to False</summary>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEventsBase.INotifyCollectionChanged_CollectionChanged">
 <summary>Occurs when the collection changes. Implements the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> event. This event is provided for compatibility with <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface. <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> provides <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> event which provides detailed information about what has with the collection.</summary>
 <version version="1.5.3">Event introduced</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnINotifyCollectionChanged_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.INotifyCollectionChanged_CollectionChanged"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>This method shall be called whenever <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCollectionChanged(System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,`0,`0,System.Int32)"/> is called.</remarks>
 <version version="1.5.3">Method introduced</version>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1">
 <summary>List that provides events when changed</summary>
 <typeparam name="T">Type of items to be stored in the list</typeparam>
 <remarks><para>
 If item of type tha implements the <see cref="T:Tools.IReportsChange"/> interface is passed to this list, than it's events <see cref="E:Tools.IReportsChange.Changed"/> are reported through <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> event.
 </para><para>
 Implementation of interface <see cref="T:System.Collections.IList"/> is provided only in orer this class to be compatible with <see cref="T:System.ComponentModel.Design.CollectionEditor"/>.
 </para>
 <para>Implementation fo <see cref="T:System.ComponentModel.IBindingList"/> is only basic. It supports neither sorting or searching. <see cref="M:System.ComponentModel.IBindingList.AddNew"/> is supported when <typeparamref name="T"/> has default constructor and does not block creating of new instances in other way.</para>
 <para>This class utilizes when item implements <see cref="T:Tools.CollectionsT.GenericT.ICollectionNotifyItem"/> or <see cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/>.</para>
 </remarks>
 <seelaso cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2"/>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2">Added support for <see cref="T:Tools.CollectionsT.GenericT.ICollectionNotifyItem"/> and <see cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/></version>
 <version version="1.5.2">Base class <see cref="T:Tools.CollectionsT.GenericT.ListWithEventsBase"/> introduced</version>
 <version version="1.5.2">Added implementation of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface</version>
 <version version="1.5.3">Added implementation for the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.#ctor(System.Boolean,System.Boolean)">
 <summary>CTor</summary>
 <param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</param>
 <param name="CancelError">Value of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> that determines if and <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ToArray">
 <summary>Copies all elements of this collection to new <see cref="T:System.Array"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ToArray1">
 <summary>Copies all elements of this collection to new <see cref="T:System.Array"/> (type-unsafe)</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean)">
 <summary>CTor - initializes from another <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <param name="collection"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to initialize new instance of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> with</param>
 <param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</param>
 <exception cref="T:System.ArgumentNullException">collection is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.#ctor(System.Int32,System.Boolean,System.Boolean)">
 <summary>Initializes a new instance of the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> class that is empty and has the specified initial capacity.</summary>
 <param name="capacity">The number of elements that the new list can initially store.</param>
 <param name="AddingReadOnly">Value of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> property that determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</param>
 <exception cref="T:System.ArgumentOutOfRangeException">capacity is less than 0</exception>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.List">
 <summary>Internal list that is used for soring values</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._Owner">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Owner"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Owner">
 <summary>Custom property wher owner of the list can be stored to provide bi-directional reference</summary>
 <remarks>Change of this property is reported through <see cref="E:Tools.IReportsChange.Changed"/>.
 <para>This property is here for convenience, <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> does not utilize it.</para>
 <para>Change of this property is reported via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> and <see cref="E:Tools.IReportsChange.Changed"/>.</para></remarks>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._AddingReadOnly">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly">
 <summary>Determines <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property value for the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._CancelError">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError">
 <summary>Gets value indicating if an <see cref="T:System.OperationCanceledException"/> is thrown when item operation is canceled in event handler.</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._AllowAddCancelableEventsHandlers">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers">
 <summary>Determines if it is allowed to add handlers for events that supports cancellation</summary>
 <exception cref="T:System.InvalidOperationException">Trying to set value to True when it if False</exception>
 <remarks>
 Value can be changed only from True (default) to False
 <list>
 <listheader>Those are events:</listheader>
 <item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/></item>
 <item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/></item>
 <item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/></item>
 <item><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/></item>
 </list>
 </remarks>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._AllowItemCancel">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel">
 <summary>Gets or sets value indicating if items implementing <see cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/> are allowed to cancel itselves being added/removed to/from the list.</summary>
 <returns>True if item are allowed to cancel itselves being added/removed; false when they are not</returns>
 <value>False to prevent items from cancel itselves being added/removed; true to allow it. Default value is true.</value>
 <exception cref="T:System.InvalidOperationException">Value is being changed and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsAllowItemCancelLocked"/> is true</exception>
 <remarks>When setting this property to false, consider calling <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.LockAllowItemCancel"/>, otherwise item can change value of this property and perform cancellation.</remarks>
 <seelaso cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsAllowItemCancelLocked"/><seelaso cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.LockAllowItemCancel"/><seelaso cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._LockAllowItemCancel">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsAllowItemCancelLocked"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsAllowItemCancelLocked">
 <summary>Gets value indicationg if value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> can be changed</summary>
 <returns>True when value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> cannot be changed; false if it can.</returns>
 <remarks>Value of this property can be set to true by calling <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.LockAllowItemCancel"/></remarks>
 <seelaso cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.LockAllowItemCancel"/><seelaso cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/><seelaso cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.LockAllowItemCancel">
 <summary>Sets <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsAllowItemCancelLocked"/>, so <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> can no longer be changed.</summary>
 <seelaso cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsAllowItemCancelLocked"/><seelaso cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/><seelaso cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/>
 <version version="1.5.2">Method introduced</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1._Locked">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/></summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked">
 <summary>Determines if the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> isn locked (being locked prevents if from being edited)</summary>
 <remarks><para>
 <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> is usually locked while some events' handlers are being invoked.
 </para><list>
 <listheader><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> set to True blocks following methods and causes <see cref="T:System.InvalidOperationException"/> exception to be thrown there:</listheader>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,System.Object)"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(System.Object)"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/></item>
 <item><see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear"/></item>
 <item><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> (only setter)</item>
 </list>
 <para>Change of this property is reported via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.</para></remarks>
 <version version="1.5.2">Added <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> notification</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Lock">
 <summary>Sets the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> to True</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Unlock">
 <summary>Sets the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> to False</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingEventHandlerList">
 <summary>List of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemCancelEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event is raised</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemCancelEventHandler">
 <summary>Delegate of handler of <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> events</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding">
 <summary>Raised before an item is added to the list. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,System.Object)"/> methods.</summary>
 <remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/>.
 This means that <see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 Value of parameter <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> can be changed if <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> is False.
 </para></remarks>
 <exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is false</exception>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added">
 <summary>Raised after an item is added to the list. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,System.Object)"/> methods</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)">
 <summary>Adds an item to the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
 <param name="item">The object to add to the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
 <remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> before adding an item to the list and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> after adding item to the list, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
 <summary>Adds range of items into list</summary>
 <param name="Items">Collection of items to be added</param>
 <remarks>
 Internally calls <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> for each item.
 If an exception occures in <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> or event handler than no item is added.
 <paramref name="Items"/> can safelly be null.
 </remarks>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,`0)">
 <summary>Inserts an item to the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> at the specified index.</summary>
 <param name="item">The object to insert into the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
 <param name="index">The zero-based index at which item should be inserted.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true.</exception>
 <remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> before adding an item to the list and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> after adding item to the list, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> in order the event to be raised</remarks>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event -or- Any <see cref="T:System.Exception"/> can be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true</exception>
 <version version="1.5.2">Added support for <see cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/></version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> in order the event to be raised</remarks>
 <exception cref="T:Tools.ComponentModelT.MultipleException">Multiple exceptions were thrown by event handlers being called. All handler are always invoked, even when exception occurs.</exception>
 <version version="1.5.2">Added support for <see cref="T:Tools.CollectionsT.GenericT.ICollectionNotifyItem"/> and <see cref="T:Tools.ComponentModelT.MultipleException"/>.</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ClearingEventHandlerList">
 <summary>List of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ClearingEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event is raised</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ClearingEventHandler">
 <summary>Delegate of handler of <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing">
 <summary>Raised before the list is cleared. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear"/> method.</summary>
 <remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/>.
 This means that<see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> Event is not raised when clearing list.
 </para></remarks>
 <exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is false</exception>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared">
 <summary>Raised after the list is cleared. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear"/> method.</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
 <remarks><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/> event is not raised when clearing list.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Clear">
 <summary>Removes all items from the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnClearing(Tools.ComponentModelT.CancelMessageEventArgs)"/> before clearing of the list and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemsEventArgs)"/> after clearing of the list,, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event -or- Any exception can be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnClearing(System.Collections.ICollection)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnClearing(Tools.ComponentModelT.CancelMessageEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnClearing(Tools.ComponentModelT.CancelMessageEventArgs)"/> in order the event to be raised</remarks>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Clearing"/> event -or- Any exception may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnClearing(System.Collections.ICollection)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemsEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemsEventArgs)"/> in order the event to be raised</remarks>
 <exception cref="T:Tools.ComponentModelT.MultipleException">Multiple exceptions were thrown by event handlers being invoked. All handlers are always invoked, even hen excption occurs.</exception>
 <version version="1.5.2">Added support for <see cref="T:Tools.CollectionsT.GenericT.ICollectionNotifyItem"/> and <see cref="T:Tools.ComponentModelT.MultipleException"/>.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Contains(`0)">
 <summary>Determines whether the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> contains a specific value.</summary>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
 <returns>true if item is found in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CopyTo(`0[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
 <exception cref="T:System.ArgumentNullException">array is null.</exception>
 <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source System.Collections.Generic.ICollection(Of T) is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Count">
 <summary>Gets the number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
 <returns>The number of elements contained in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</returns>
 <remarks>Change of this property is reported via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>.</remarks>
 <version version="1.5.2">Added <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> notification</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsReadOnly">
 <summary>Gets a value indicating whether the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> is read-only (always false).</summary>
 <returns>Always false because <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> is not read-only</returns>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.RemovingEventHandlerList">
 <summary>List of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemCancelEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event is raised</summary>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing">
 <summary>Raised before item is removed from the list. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(System.Object)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/> methods.</summary>
 <remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/>.
 This means that<see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 Do not change content of list in handler! List is locked.
 </para><para>
 <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event is not raised when list is being cleared.
 </para><para>
 Value of parameter <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> cannot be changed.
 </para>
 </remarks>
 <exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is false</exception>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed">
 <summary>Raised after the list is cleared. Raised by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(System.Object)"/> and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/> methods.</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters</param>
 <remarks><see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/> event is not raised when the list.</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks><para>
 Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> in order the event to be raised
 </para><para>
 Do not change content of list in this method!
 </para><para>
 </para>
 <para><paramref name="e"/><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly">ReadOnly</see> hould be always true; otherwise unpredictable results may occur.</para></remarks>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event -or- Any <see cref="T:System.Exception"/> can be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnRemoving(System.Collections.ICollection,System.Nullable{System.Int32})"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true</exception>
 <version version="1.5.2">Added support for <see cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/></version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> in order the event to be raised</remarks>
 <version version="1.5.2">Added support for <see cref="T:Tools.CollectionsT.GenericT.ICollectionNotifyItem"/> and <see cref="T:Tools.ComponentModelT.MultipleException"/>.</version>
 <exception cref="T:Tools.ComponentModelT.MultipleException">Multiple exceprions were thrown by ebent handlers being called. All event handlers are called wven when exception is thrown.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(`0)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
 <param name="item">The object to remove from the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
 <returns>true if item was successfully removed from the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnRemoving(System.Collections.ICollection,System.Nullable{System.Int32})"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true.</exception>
 <remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> before removing item and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> after removing item, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)">
 <summary>Removes the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> item at the specified index.</summary>
 <param name="index">The zero-based index of the item to remove.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnRemoving(System.Collections.ICollection,System.Nullable{System.Int32})"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true.</exception>
 <remarks>Note for inheritors: Call <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> before removing item and <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ItemIndexEventArgs)"/> after removing item, do not forgot to check <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAll(System.Predicate{`0})">
 <summary>Removes all items that matches given predicate</summary>
 <param name="Match">Predicate to match. If this predicate returns true, item is removed</param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true.</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removing"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnRemoving(System.Collections.ICollection,System.Nullable{System.Int32})"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Match"/> is null</exception>
 <remarks>If any exception is thrown in <seealso cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAt(System.Int32)"/> or event handler no item is removed (collection stays unchanged)</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.FindAll(System.Predicate{`0})">
 <summary>Retrieves the all the elements that match the conditions defined by the specified predicate.</summary>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
 <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Match"/> is null.</exception>
 <remarks><seealso cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
 <version version="1.5.2">Renamed from <c>GetEnumerator1</c> to <c>IEnumerable_GetEnumerator</c></version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.IndexOf(`0)">
 <summary>Determines the index of a specific item in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</summary>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</param>
 <returns>The index of item if found in the list; otherwise, -1.</returns>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChangingEventHandlerList">
 <summary>List of <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemCancelEventHandler"/> delegates to be invoked when the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> event is raised</summary>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging">
 <summary>Raised before an item is changed. Raised by setter of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> property.</summary>
 <remarks><para>
 This event can be disabled (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/>.
 This means that <see cref="T:System.InvalidOperationException"/> is thrown when adding handler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is False.
 </para><para>
 Value of parameter <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> can be changed if <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AddingReadOnly"/> is False.
 </para><para>
 Do not change content of list in handler! List is locked.
 </para><para>
 <paramref name="e"/>'s <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> contains new value. Use <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> to determine old value.
 </para></remarks>
 <exception cref="T:System.InvalidOperationException">Adding handler when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowAddCancelableEventsHandlers"/> is false</exception>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged">
 <summary>Raised after item in the list is changed. Raised by setter of <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> property.</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event parameters (<see cref="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemEventArgs.Item"/> contains old value, use <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/> to determine new value.)</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> event</summary>
 <param name="e">Event argument</param>
 <remarks><para>
 Note for inheritors: Alway call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{`0}.CancelableItemIndexEventArgs)"/> in order the event to be raised.
 </para><para>
 Do not change the content of the list in this method!
 </para></remarks>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> event -or-  Any exception may be throw by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnRemoving(System.Collections.ICollection,System.Nullable{System.Int32})"/> or <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true</exception>
 <version version="1.5.2">Added support for <see cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/>.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemChanged(Tools.CollectionsT.GenericT.ListWithEvents{`0}.OldNewItemEventArgs)">
 <summary>Raises <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> event</summary>
 <param name="e">Event arguments</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemChanged(Tools.CollectionsT.GenericT.ListWithEvents{`0}.OldNewItemEventArgs)"/> in order the event to be raised.</remarks>
 <version version="1.5.2">Added support for <see cref="T:Tools.CollectionsT.GenericT.ICollectionNotifyItem"/> and <see cref="T:Tools.ComponentModelT.MultipleException"/></version>
 <exception cref="T:Tools.ComponentModelT.MultipleException">Multiple exceprions were thrown by delegate being called. All delegates are called even when exception is thrown.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)">
 <summary>Gets or sets the element at the specified index.</summary>
 <param name="index">The zero-based index of the element to get or set.</param>
 <returns>The element at the specified index.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/>.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True (in setter)</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanging"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)"/> or <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnRemoving(System.Collections.ICollection,System.Nullable{System.Int32})"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true.</exception>
 <version version="1.5.2">When <typeparamref name="T"> is not value type and value being set is (in rerms of reference) same as current value at <paramref name="index"/>, no change is done, no events are raised.</typeparamref></version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.InternalList">
 <summary>Gives access to underlying <see cref="!:List(Of T)"/></summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AsReadOnly">
 <summary>Gives read-only access to underlying <see cref="!:List(Of T)"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddItemHandler(System.Int32)">
 <summary>Adds handler to item at specified index if the item is <see cref="T:Tools.IReportsChange"/></summary>
 <param name="Index">Index of item to try add handler</param>
 <remarks>Call after item is added</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveItemHandler(System.Int32)">
 <summary>Removes handler from item at specified index if the item is <see cref="T:Tools.IReportsChange"/></summary>
 <param name="Index">Index of item to try remove handler</param>
 <remarks>Call before item is removed</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveAllItemHandlers">
 <summary>Removes handlers from all item that are of type <see cref="T:Tools.IReportsChange"/></summary>
 <remarks>Call before clering list</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddAllItemHandlers">
 <summary>Adds ahndlers to all items that as of type <see cref="T:Tools.IReportsChange"/></summary>
 <remarks>Call only from CTor when no handlers have been added</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemValueChanged(Tools.IReportsChange,System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> event and handles the <see cref="E:Tools.IReportsChange.Changed"/> event for items</summary>
 <param name="sender">Original source of the event</param>
 <param name="e">Original event parameters</param>
 <remarks>Note for inheritors: Always call base class method <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnItemValueChanged(Tools.IReportsChange,System.EventArgs)"/> in order the event to be raised</remarks>
 <exception cref="T:Tools.ComponentModelT.MultipleException">Multiple exceptions were thrown by handler being invoked. All handler are invoked even when exception is thrown.</exception>
 <version version="1.5.2">Added support for <see cref="T:Tools.ComponentModelT.MultipleException"/></version>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged">
 <summary>Raised when any of items that is of type <see cref="T:Tools.IReportsChange"/> raises <see cref="E:Tools.IReportsChange.Changed"/> event</summary>
 <param name="sender">Source of the event</param>
 <param name="e">Event params (contains original source (item) and original arguments</param>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs">
 <summary>Parameter of cancelable item events</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs._Item">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> property</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs._ReadOnly">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> property</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.#ctor(`0,System.Boolean)">
 <summary>CTor</summary>
 <param name="Item">Item associated with current event</param>
 <param name="ReadOnly">True to disallow changing of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> property</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item">
 <summary>Item associated with current event</summary>
 <exception cref="T:System.Data.ReadOnlyException">Using setter when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> is True</exception>
 <version version="1.5.2">When <typeparamref name="T"/> is not value type and value being set is same (in rerm of references) as current value, no change is done, no exception is thrown (even if <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly"/> is true).</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs._Changed">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Changed"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Changed">
 <summary>Gets value indicationg if <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> was changed (set to another value)</summary>
 <returns>True whan <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> was changed (set to another value)</returns>
 <version version="1.5.2">Property added</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.ReadOnly">
 <summary>Indicates if this instance's property <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> is read-only or not</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemIndexEventArgs">
 <summary>Argument of <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemIndexEventArgs.#ctor(`0,System.Int32,System.Boolean)">
 <summary>CTor</summary>
 <param name="Item">Item associated with current event</param>
 <param name="ReadOnly">True to disallow changing of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemEventArgs.Item"/> property</param>
 <param name="Index">Index of newly added item</param>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelableItemIndexEventArgs.NewIndex">
 <summary>Index of newly added item</summary>
 <remarks>The index may be invalid when collecion-manipulation is done between raising <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event and performing <see cref="M:System.Collections.Generic.List`1.Add(`0)"/> operation on underlying <see cref="!:List(Of T)"/>. (it's always valid when performing <see cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)"/> - event raised through <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,System.Object)"/>.)</remarks>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemEventArgs">
 <summary>Parameter od non-cancelable item events</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemEventArgs.#ctor(`0)">
 <summary>CTor</summary>
 <param name="Item">Item associated with current event</param>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemEventArgs.Item">
 <summary>Item associated with current event</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs">
 <summary>Parameter of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/> event</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs.Index">
 <summary>Index ow newly added or changed item</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs.#ctor(`0,System.Int32)">
 <summary>CTor</summary>
 <param name="Item">Newly added item</param>
 <param name="index">Index of newly added item</param>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEventArgs">
 <summary>Parameter of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> event</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEventArgs.OldItem">
 <summary>Old item previosly on <see cref="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs.Index"/></summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEventArgs.#ctor(`0,`0,System.Int32)">
 <summary>CTor</summary>
 <param name="OldItem">Old item present at position</param>
 <param name="NewItem">New item present at postion</param>
 <param name="index">Position index</param>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.CountEventArgs">
 <summary>Parameter of events that reports count</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CountEventArgs.#ctor(System.Int32)">
 <summary>CTor</summary>
 <param name="Count">Count to be reported</param>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.CountEventArgs.Count">
 <summary>Reported count</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs">
 <summary>Parameter of event that report items</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs.#ctor(`0[])">
 <summary>CTor</summary>
 <param name="Items">Items to be reported</param>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs.Items">
 <summary>Items reported by this event</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs">
 <summary>Parameter of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> event</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs.OriginalEventArgs">
 <summary>Original argument of item's <see cref="E:Tools.IReportsChange.Changed"/> event</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs.#ctor(`0,System.EventArgs)">
 <summary>CTor</summary>
 <param name="Item">Item that caused the event</param>
 <param name="OriginalEventArgs">Original argument of item's <see cref="E:Tools.IReportsChange.Changed"/> event</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ICollection_CopyTo(System.Array,System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <param name="index">The zero-based index in array at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException">array is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
 <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from index to the end of the destination array.</exception>
 <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination array.</exception>
 <remarks>Do not use, use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.CopyTo(`0[],System.Int32)"/> instead. Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
 <version version="1.5.2">Renamed from <c>CopyTo1</c> to <c>ICollection_CopyTo</c>.</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsSynchronized">
 <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).</summary>
 <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.SyncRoot">
 <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</summary>
 <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/></returns>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.IList_Add(System.Object)">
 <summary>Adds an item to the <see cref="T:System.Collections.IList"/>.</summary>
 <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
 <returns>The position into which the new element was inserted.</returns>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> cannot be converted into type <typeparamref name="T"/></exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
 <version version="1.5.2"><see cref="T:System.InvalidCastException"/> thrown replaced with <see cref="T:Tools.TypeMismatchException"/></version>
 <version version="1.5.3">Renamed from <c>Add</c> to <c>IList_Add</c>. See comment on <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.IList_Add(System.Object)"/>.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Contains(System.Object)">
 <summary>Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.</summary>
 <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
 <returns>true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.</returns>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.IndexOf(System.Object)">
 <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
 <returns>The index of value if found in the list; otherwise, -1.</returns>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,System.Object)">
 <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
 <param name="index">The zero-based index at which value should be inserted.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"/>.</exception>
 <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> cannot be converted to the type <typeparamref name="T"/></exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
 <version version="1.5.2"><see cref="T:System.InvalidCastException"/> thrown replaced with <see cref="T:Tools.TypeMismatchException"/>.</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsFixedSize">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.</summary>
 <returns>Always False</returns>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Remove(System.Object)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.</summary>
 <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/></param>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IList_Item(System.Int32)">
 <summary>Gets or sets the element at the specified index.</summary>
 <param name="index">The zero-based index of the element to get or set.</param>
 <returns>The element at the specified index.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"/>.</exception>
 <exception cref="T:Tools.TypeMismatchException">When setting value that cannot be converted to <typeparamref name="T"/></exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True (in setter)</exception>
 <remarks>Provided for compatibility with <see cref="T:System.ComponentModel.Design.CollectionEditor"/></remarks>
 <version version="1.5.2"><see cref="T:System.InvalidCastException"/> thrown replaced with <see cref="T:Tools.TypeMismatchException"/></version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.</summary>
 <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
 <remarks>
 Only items (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/>) are serialized.
 Note for inheritors: Call this base class method in order items to be serialized.
 </remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 <summary>CTor - deserializes <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></summary>
 <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains serialized object</param>
 <param name="context">The source (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) of this deserialization.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="info"/> is null</exception>
 <exception cref="T:System.InvalidCastException">Serialized value was found but cannot be converted to type of corresponding property</exception>
 <exception cref="T:System.Runtime.Serialization.SerializationException">An exception occured during deserialization</exception>
 <remarks>
 Only items (see <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/>) are deserialized.
 Note for inheritors: Call this base class CTor in order to deserialize items. Another way is to deserialize them into local variable and then use <see cref="M:System.Collections.Generic.List`1.Add(`0)"/> or <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>.
 </remarks>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsName">
 <summary>Name used for serialization of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.InternalList"/> property</summary>
</member>
<member name="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged">
 <summary>Raised when this <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> collection changes.</summary>
 <param name="sender">Source ot the event</param>
 <param name="e">Event arguments. The <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">ChangedEventArgs</see> contains event argument of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.Changed"/> event raised immediatelly prior this event.
 As of this implementation type of <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">ChangedEventArgs</see> is always one of following types: <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemsEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemIndexEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.OldNewItemEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/>), <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChangedEventArgs"/> (<see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/>).
 Value of <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Collection"/> is always this instance.</param>
 <remarks>This event is raised immediatelly after each <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.Changed"/> event.<para>
 The reason for having two duplicit events is that <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.Changed"/> implements <see cref="E:Tools.IReportsChange.Changed"/> and you cannot determine action (what happend) through it. The aim of this event is to concentrate <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>, <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/> and <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/> events to one single event which allows handler to easily dinstinguish which action happedned on collection.</para></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCollectionChanged(Tools.CollectionsT.GenericT.ListWithEvents{`0}.ListChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> event.</summary>
 <param name="e">Event argument. The <paramref name="e"/>.<see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">ChangedEventArgs</see> should always contain event argument of preceding call of <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnChanged(System.EventArgs)"/></param>
 <remarks>You should call one of overloaded <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnChanged(System.EventArgs)"/> methods after all calls of <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnChanged(System.EventArgs)"/>.
 This overridable overload is always called by the other overloads.
 <para>This method calls <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnINotifyCollectionChanged_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/> and thus raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEventsBase.INotifyCollectionChanged_CollectionChanged"/> event.</para></remarks>
 <version version="1.5.3">Added call to <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnINotifyCollectionChanged_CollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/> to support the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface</version>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnCollectionChanged(System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,`0,`0,System.Int32)">
 <summary>Raises the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.CollectionChanged"/> event via calling <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.OnChanged(Tools.CollectionsT.GenericT.ListChangedEventArgs)"/></summary>
 <param name="e">Argument of preceding call of <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnChanged(System.EventArgs)"/></param>
 <param name="Action">Action taken on collection</param>
 <param name="OldValue">Old value at index <paramref name="index"/> prior to change. Pass null (default value for value types) if not applicable.</param>
 <param name="NewValue">New value at index <paramref name="index"/> after change. pass null (default value for value types) if not applicable</param>
 <param name="index">Index at which change has occured. Pass -1 if not applicable</param>
 <remarks>You should call one of overloaded <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnChanged(System.EventArgs)"/> methods after all calls of <see cref="M:Tools.CollectionsT.GenericT.ListWithEventsBase.OnChanged(System.EventArgs)"/>.</remarks>
 <filterpriority>1</filterpriority>
</member>
<member name="T:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs">
 <summary>Specialized <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1"/> for <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/></summary>
 <seelaso cref="T:Tools.CollectionsT.GenericT.DictionaryWithEvents`2.DictionaryChangedEventArgs"/>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.#ctor(Tools.CollectionsT.GenericT.ListWithEvents{`0},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction)">
 <summary>CTor</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <param name="Action">Action which occured on collection</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.#ctor(Tools.CollectionsT.GenericT.ListWithEvents{`0},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,System.Int32)">
 <summary>CTor with index</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <param name="Action">Action which occured on collection</param>
 <param name="index">Index at which the change has occured</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.#ctor(Tools.CollectionsT.GenericT.ListWithEvents{`0},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction,System.Int32,`0,`0)">
 <summary>CTor with index and old and new value</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <param name="Action">Action which occured on collection</param>
 <param name="index">Index at which the change has occured</param>
 <param name="OldValue">Old value at index <paramref name="index"/></param>
 <param name="NewValue">New value at index <paramref name="index"/></param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Collection">
 <summary>Collection which was changed</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs._Index">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/> property</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs._OldValue">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.OldValue"/> property</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs._NewValue">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.NewValue"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index">
 <summary>Gets index at which change occured (if applicable)</summary>
 <returns>Original index where the change has ocured. If not applicable returns -1</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.OldValue">
 <summary>Gets value on index <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/> before change (if applicable)</summary>
 <returns>Original value at index <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/>. If not applicable returns null (for reference types) or type default value (for <see cref="T:System.ValueType">value types</see>)</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.NewValue">
 <summary>Gets value on index <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/> after change (if applicable)</summary>
 <returns>Valu at index <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.ListChangedEventArgs.Index"/> after changed. If not applicable returns null (for reference types) or type default value (for <see cref="T:System.ValueType">value types</see>)</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddIndex(System.ComponentModel.PropertyDescriptor)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="property">ignored</param>
 <exception cref="T:System.NotSupportedException">always</exception>
 <version version="1.5.2">Access changed to protected, <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.IBindingList_AddNew">
 <summary>Adds a new item to the list.</summary>
 <returns>The item added to the list.</returns>
 <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.AllowNew" /> is false. </exception>
 <remarks>Use type-safe <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddNew"/> instead
 <para>Note for inheritors: In order ot override this member override <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddNew"/>.</para></remarks>
 <seelaso cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddNew"/>
 <version version="1.5.2">Access changed to protected</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.AddNew">
 <summary>Adds a new item to the list.</summary>
 <returns>The item added to the list.</returns>
 <exception cref="T:System.NotSupportedException"><see cref="P:System.ComponentModel.IBindingList.AllowNew" /> is false. </exception>
 <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not a RuntimeType. -or- <typeparamref name="T"/> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true).</exception>
 <exception cref="T:System.NotSupportedException"><typeparamref name="T"/> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  -or- Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">The constructor of <typeparamref name="T"/> being called throws an exception.</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to call defualt constructor of <typeparamref name="T"/>.</exception>
 <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
 <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through Overload:<see cref="M:System.Type.GetTypeFromProgID(System.String)" /> or Overload:<see cref="M:System.Type.GetTypeFromCLSID(System.Guid)" />.</exception>
 <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
 <exception cref="T:System.Runtime.InteropServices.COMException"><typeparamref name="T"/> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Locked"/> is True</exception>
 <exception cref="T:System.OperationCanceledException">Operation is canceled in eventhandler and <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CancelError"/> is true</exception>
 <exception cref="T:System.Exception">Any <see cref="T:System.Exception"/> can be thrown by event handler of the <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Adding"/> event -or- Any excption may be thrown by <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)"/> when <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowItemCancel"/> is true.</exception>
 <seelaso cref="M:Tools.TypeTools.CreateInstance(System.Type)"/>
 <remarks>This member implements <see cref="M:System.ComponentModel.IBindingList.AddNew"/></remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowEdit">
 <summary>Gets whether you can update items in the list.</summary>
 <returns>true</returns>
 <version version="1.5.2">Access changed form private to protected, <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.CanAddNew">
 <summary>Gets whether you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
 <returns>true if you can add items to the list using <see cref="M:System.ComponentModel.IBindingList.AddNew" />; otherwise, false.
 This impúlementation returns ture when type <typeparamref name="T"/> has default constructor that can be used for automatic instance creation</returns>
 <seelaso cref="M:Tools.TypeTools.CanAutomaticallyCreateInstance(System.Type)"/>
 <remarks>This member implements <see cref="P:System.ComponentModel.IBindingList.AllowNew"/></remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.AllowRemove">
 <summary>Gets whether you can remove items from the list, using <see cref="M:System.Collections.IList.Remove(System.Object)" /> or <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
 <returns>true</returns>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <exception cref="T:System.NotSupportedException">always</exception>
 <param name="direction">Ignored</param><param name="property">Ignored</param>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <returns>This function never returns value</returns>
 <exception cref="T:System.NotSupportedException">always</exception>
 <param name="key">Ignored</param><param name="property">Ignored</param>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.IsSorted">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <returns>This property never returns value</returns>
 <exception cref="T:System.NotSupportedException">always</exception>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="property">ignored</param>
 <exception cref="T:System.NotSupportedException">always</exception>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ListWithEvents`1.RemoveSort">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <exception cref="T:System.NotSupportedException">always</exception>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.SortDirection">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <returns>This property never returns value</returns>
 <exception cref="T:System.NotSupportedException">always</exception>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.SortProperty">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <returns>This property never returns value</returns>
 <exception cref="T:System.NotSupportedException">always</exception>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.SupportsChangeNotification">
 <summary>Gets whether a <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> event is raised when the list changes or an item in the list changes.</summary>
 <returns>true</returns>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.SupportsSearching">
 <summary>Gets whether the list supports searching using the <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> method.</summary>
 <returns>false</returns>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="P:Tools.CollectionsT.GenericT.ListWithEvents`1.SupportsSorting">
 <summary>Gets whether the list supports sorting.</summary>
 <returns>false</returns>
 <version version="1.5.2">Access changed from private to protected. <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> added.</version>
</member>
<member name="T:Tools.CollectionsT.GenericT.CollectionChangeAction">
 <summary>Describes acction on collection</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Add">
 <summary>An item was added. Equals to <see cref="F:System.ComponentModel.CollectionChangeAction.Add"/>. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Added"/>.</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Remove">
 <summary>An item was removed. Equals to <see cref="F:System.ComponentModel.CollectionChangeAction.Remove"/>. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Removed"/></summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Clear">
 <summary>The collection was cleared. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.Cleared"/>.</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Replace">
 <summary>Item of collection was replaced. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemChanged"/>.</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.ItemChange">
 <summary>Property of item of collection changed. Represents <see cref="E:Tools.CollectionsT.GenericT.ListWithEvents`1.ItemValueChanged"/>.</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other">
 <summary>Unspecified action. Equals to <see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/>.</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase">
 <summary>Represents common base for generic classes <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1"/></summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase._ChangeEventArgs">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs"/> property</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase._Action">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action"/> property</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.#ctor(System.Collections.IEnumerable,System.EventArgs)">
 <summary>CTor</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <remarks><see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action"/> is set to <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.#ctor(System.Collections.IEnumerable,System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction)">
 <summary>CTor</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <param name="Action">Action which occured on collection</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ConvertAction(Tools.CollectionsT.GenericT.CollectionChangeAction)">
 <summary>Converts <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/> to <see cref="T:System.ComponentModel.CollectionChangeAction"/></summary>
 <param name="Action">A <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/> to be converted</param>
 <returns><see cref="T:System.ComponentModel.CollectionChangeAction"/> corresponding to <paramref name="Action"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
 <remarks>Conversion table follows:
 <list type="table">
 <listheader><term><see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/> (<paramref name="Action"/>)</term><description><see cref="T:System.ComponentModel.CollectionChangeAction"/></description></listheader>
 <item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Add"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Add"/></description></item>
 <item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Remove"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Remove"/></description></item>
 <item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/></description></item>
 <item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Clear"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Remove"/></description></item>
 <item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Replace"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/></description></item>
 <item><term><see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.ItemChange"/></term><description><see cref="F:System.ComponentModel.CollectionChangeAction.Refresh"/></description></item>
 <item><term>Otherwise</term><description><see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> thrown</description></item>
 </list>
 </remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.ChangeEventArgs">
 <summary>Arguments of event that caused collection to be changed or that was raised by the colection on change</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action">
 <summary>Action taken on collection</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1">
 <summary>Arguments of event raised when collection owned by event source has changed</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1.#ctor(System.Collections.Generic.ICollection{`0},System.EventArgs)">
 <summary>CTor</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <remarks><see cref="P:Tools.CollectionsT.GenericT.CollectionChangedEventArgsBase.Action"/> is set to <see cref="F:Tools.CollectionsT.GenericT.CollectionChangeAction.Other"/></remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1.#ctor(System.Collections.Generic.ICollection{`0},System.EventArgs,Tools.CollectionsT.GenericT.CollectionChangeAction)">
 <summary>CTor</summary>
 <param name="ChangeEventArgs">Argumens of event that caused the collection to change</param>
 <param name="Collection">Collection that was changed</param>
 <param name="Action">Action which occured on collection</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Action"/> is not member of <see cref="T:Tools.CollectionsT.GenericT.CollectionChangeAction"/></exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.CollectionChangeEventArgs`1.Collection">
 <summary>Collection which was changed</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.ICollectionNotifyItem">
 <summary>Interface of collection item notified when added to collection</summary>
 <remarks>Only few collections, such as <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> supports this interface</remarks>
 <seelaso cref="T:Tools.CollectionsT.GenericT.ICollectionCancelItem"/>
 <version version="1.5.2" stage="Release">Interface introduced</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ICollectionNotifyItem.OnAdded(System.Collections.ICollection,System.Nullable{System.Int32})">
 <summary>Called after item is added to collection</summary>
 <param name="Collection">Collection item was added into</param>
 <param name="index">Index at which the item was added. Note: Index may change later without notice (i.e. when collection gets sorted). Ic collection does not support indexing value is null.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ICollectionNotifyItem.OnRemoved(System.Collections.ICollection)">
 <summary>Called after item is removed from collection (or after collection was cleared)</summary>
 <param name="Collection">Collection item was removed from</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.ICollectionNotifyItem.Collections">
 <summary>If supported by collection item gets all the collections item is in</summary>
 <returns>All the collections item is placed in; null when not supported by item class.</returns>
 <remarks>You should not suport this property whan your item is value type (structure).
 <para>If item is placed multiple times in the same collection, this property should contain this collection multiple times.</para></remarks>
</member>
<member name="T:Tools.CollectionsT.GenericT.ICollectionCancelItem">
 <summary>Interface of collection item notified before and after added to collection</summary>
 <remarks>Only few collections, such as <see cref="T:Tools.CollectionsT.GenericT.ListWithEvents`1"/> supports this interface</remarks>
 <version version="1.5.2" stage="Release">Interface introduced</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)">
 <summary>Called before item is placed into collection</summary>
 <param name="Collection">Collection item is aboutto be placed into</param>
 <param name="index">Index item is being to be placed onto; null when collection does not support indexing.</param>
 <remarks>To cancel adding, throw exception. Collection does not call this method when it does not allow cancellation of adding.
 <para>Call to <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnAdding(System.Collections.ICollection,System.Nullable{System.Int32},System.Boolean)"/> does not necesarilly mena that <see cref="M:Tools.CollectionsT.GenericT.ICollectionNotifyItem.OnAdded(System.Collections.ICollection,System.Nullable{System.Int32})"/> will be called, because event can be canceled.</para></remarks>
 <param name="Replace">True when item at index <paramref name="index"/> will be replaced by this instance; false if this instance will be inserted at <paramref name="index"/> and all subsequent items will be moved to nex index.</param>
 <exception cref="T:System.Exception">Any axception may be thrown to cancel the operation. Exception is passed by collection to caller.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnRemoving(System.Collections.ICollection,System.Nullable{System.Int32})">
 <summary>Called before item is removed from collection</summary>
 <param name="Collection">Collection item is about to be removed from</param>
 <param name="index">Index item is currently placed on; null when collection does not support indexing.</param>
 <remarks>To cancel removing, throw exception. Collection does not call this method when it does not allow cancellation of removing.
 <para>Call to <see cref="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnRemoving(System.Collections.ICollection,System.Nullable{System.Int32})"/> does not necesarilly mena that <see cref="M:Tools.CollectionsT.GenericT.ICollectionNotifyItem.OnRemoved(System.Collections.ICollection)"/> will be called, because event can be canceled.</para></remarks>
 <exception cref="T:System.Exception">Any axception may be thrown to cancel the operation. Exception is passed by collection to caller.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ICollectionCancelItem.OnClearing(System.Collections.ICollection)">
 <summary>Called before all items are removed from collection by clearing it</summary>
 <param name="Collection">Collection item is about to be removed from</param>
 <remarks>To cancel clearing, throw exception. Collection does not call this method when it does not allow cancellation of clearing.</remarks>
 <exception cref="T:System.Exception">Any axception may be thrown to cancel the operation. Exception is passed by collection to caller.</exception>
</member>
<member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2">
 <summary>Adapter that adapts <see cref="T:System.Collections.Generic.List`1"/> into <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> where TFrom is cublass of TTo</summary>
 <typeparam name="TFrom">Type of items stored in <see cref="T:System.Collections.Generic.List`1"/> being adapted</typeparam>
 <typeparam name="TTo">
 Type of items this <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> should appear to be <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> of.
 TFrom must inherit from or implement TTo
 </typeparam>
 <remarks>If you doesn't need type conversion than you can use <seealso cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`1"/></remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.#ctor(System.Collections.Generic.List{`0})">
 <summary>CTor</summary>
 <param name="AdaptThis">The <see cref="T:System.Collections.Generic.List`1"/> to be adapted.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="AdaptThis"/> is null</exception>
</member>
<member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2._InnerList">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList">
 <summary>The <see cref="T:System.Collections.Generic.List`1"/> being adapted</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.GetEnumerator1">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Contains(`1)">
 <summary>Determines whether an element is in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <returns>true if item is found in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConvertAll``1(System.Converter{`1,``0})">
 <summary>Converts the elements in the current <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to another type, and returns a list containing the converted elements.</summary>
 <returns>A <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> of the target type containing the converted elements from the current <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
 <param name="converter">A <see cref="T:System.Converter`2"/> delegate that converts each element from one type to another type.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.CopyTo(System.Int32,`1[],System.Int32,System.Int32)">
 <summary>Copies a range of elements from the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <param name="count">The number of elements to copy.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
 <param name="index">The zero-based index in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0. or <paramref name="arrayIndex"/> is less than 0 or <paramref name="count"/> is less than 0.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="index"/> is equal to or greater than the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Count"/> of the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> or <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/> or The number of elements from <paramref name="index"/> to the end of the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <see cref="T:System.Array"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.CopyTo(`1[])">
 <summary>Copies the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to a compatible one-dimensional array, starting at the beginning of the target array.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> is greater than the number of elements that the destination array can contain.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.CopyTo(`1[],System.Int32)">
 <summary>Copies the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
 <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of array or The number of elements in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ToList">
 <summary>Creates new instance of <see cref="T:System.Collections.Generic.List`1"/> tha contains all members present in current instance</summary>
 <returns>New <see cref="T:System.Collections.Generic.List`1"/> initialized with members of <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList"/></returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Count">
 <summary>Gets the number of elements actually contained in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <returns>The number of elements actually contained in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Exists(System.Predicate{`1})">
 <summary>Determines whether the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> contains elements that match the conditions defined by the specified predicate.</summary>
 <returns>true if the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Find(System.Predicate{`1})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindAll(System.Predicate{`1})">
 <summary>Retrieves the all the elements that match the conditions defined by the specified predicate.</summary>
 <returns>A <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindIndex(System.Int32,System.Int32,System.Predicate{`1})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that starts at the specified index and contains the specified number of elements.</summary>
 <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
 <param name="count">The number of elements in the section to search.</param>
 <param name="startIndex">The zero-based starting index of the search.</param>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="startIndex"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindIndex(System.Int32,System.Predicate{`1})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the specified index to the last element.</summary>
 <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
 <param name="startIndex">The zero-based starting index of the search.</param>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindIndex(System.Predicate{`1})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindLast(System.Predicate{`1})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <see cref="!:TTo"/>.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindLastIndex(System.Int32,System.Int32,System.Predicate{`1})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that contains the specified number of elements and ends at the specified index.</summary>
 <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match"/>, if found; otherwise, –1.</returns>
 <param name="count">The number of elements in the section to search.</param>
 <param name="startIndex">The zero-based starting index of the backward search.</param>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.-or-count is less than 0.-or-startIndex and count do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindLastIndex(System.Int32,System.Predicate{`1})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the first element to the specified index.</summary>
 <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
 <param name="startIndex">The zero-based starting index of the backward search.</param>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.FindLastIndex(System.Predicate{`1})">
 <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the element to search for.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ForEach(System.Action{`1})">
 <summary>Performs the specified action on each element of the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</param>
 <exception cref="T:System.ArgumentNullException">action is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.GetRange(System.Int32,System.Int32)">
 <summary>Creates a shallow copy of a range of elements in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <returns>A shallow copy of a range of elements in the source <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
 <param name="count">The number of elements in the range.</param>
 <param name="index">The zero-based <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> index at which the range starts.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.-or-count is less than 0.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="index"/> and <paramref name="count"/> do not denote a valid range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.IndexOf(`1)">
 <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <returns>The zero-based index of the first occurrence of item within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>, if found; otherwise, –1.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.IndexOf(`1,System.Int32)">
 <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the specified index to the last element.</summary>
 <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from <paramref name="index"/> to the last element, if found; otherwise, –1.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
 <param name="index">The zero-based starting index of the search.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.IndexOf(`1,System.Int32,System.Int32)">
 <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that starts at the specified index and contains the specified number of elements.</summary>
 <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
 <param name="count">The number of elements in the section to search.</param>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
 <param name="index">The zero-based starting index of the search.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Item(System.Int32)">
 <summary>Gets or sets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.-or-<paramref name="index"/> is equal to or greater than <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.Count"/>. </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.LastIndexOf(`1)">
 <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</summary>
 <returns>The zero-based index of the last occurrence of item within the entire the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>, if found; otherwise, –1.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.LastIndexOf(`1,System.Int32)">
 <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the first element to the specified index.</summary>
 <returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that extends from the first element to index, if found; otherwise, –1.</returns>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
 <param name="index">The zero-based starting index of the backward search.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.LastIndexOf(`1,System.Int32,System.Int32)">
 <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that contains the specified number of elements and ends at the specified index.</summary>
 <returns>The zero-based index of the last occurrence of item within the range of elements in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
 <param name="count">The number of elements in the section to search.</param>
 <param name="item">The object to locate in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. The value can be null for reference types.</param>
 <param name="index">The zero-based starting index of the backward search.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.-or-<paramref name="count"/> is less than 0.-or-<paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>. </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ToArray">
 <summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> to a new array.</summary>
 <returns>An array containing copies of the elements of the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/>.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.TrueForAll(System.Predicate{`1})">
 <summary>Determines whether every element in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> matches the conditions defined by the specified predicate.</summary>
 <returns>true if every element in the <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
 <param name="match">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions to check against the elements.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="match"/> is null.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.op_Implicit(System.Collections.Generic.List{`0})~Tools.CollectionsT.GenericT.ReadOnlyListAdapter{`0,`1}">
 <summary>Wraps instance of <see cref="T:System.Collections.Generic.List`1"/> with instance of <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/></summary>
 <param name="a">Instance to be wrapped</param>
 <returns>New instance of <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/> initialized with <paramref name="a"/></returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ToString">
 <summary>String representation of current instance</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator">
 <summary>Supports simple enumeration over <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/></summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator._InnerEnumerator">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.InnerEnumerator"/> property</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.#ctor(System.Collections.Generic.IEnumerator{`0})">
 <summary>CTor</summary>
 <param name="innerEnumerator">The enumerator that enumerates through <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList"/></param>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.InnerEnumerator">
 <summary>The enumerator that enumerates through <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.InnerList"/></summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Current1">
 <summary>Gets the current element in the collection.</summary>
 <returns>The current element in the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
</member>
<member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Dispose(System.Boolean)">
 <summary>IDisposable</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ReadOnlyListAdapterEnumerator.Dispose">
 <summary>This code added by Visual Basic to correctly implement the disposable pattern.</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1">
 <summary>Wraps converter from <see cref="!:TTo"/> to TOut to work as converter from <see cref="!:TFrom"/> to TOut</summary>
 <typeparam name="TOut">Type of output value of this <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1"/></typeparam>
</member>
<member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1._InnerConverter">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.InnerConverter"/> property</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.#ctor(System.Converter{`1,`2})">
 <summary>CTor</summary>
 <param name="InnerConverter">The <see cref="T:System.Converter`2"/> to wrap</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.InnerConverter">
 <summary>The <see cref="T:System.Converter`2"/> to wrap</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.Convert(`0)">
 <summary>Invokes <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ConverterAdaptor`1.InnerConverter"/></summary>
 <param name="input">Value to be converted</param>
 <returns>The <see cref="!:TOut"/> that represents the converted <see cref="!:TFrom"/>.</returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor">
 <summary>Wraps <see cref="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.Predicate(`0)"/> of <see cref="!:TTo"/> so it looks like <see cref="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.Predicate(`0)"/> of <see cref="!:TFrom"/></summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor._InnerPredicate">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.InnerPredicate"/> property</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.#ctor(System.Predicate{`1})">
 <summary>CTor</summary>
 <param name="InnerPredicate"><see cref="!:Predicate(Of TTo)"/> to wrap</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.InnerPredicate">
 <summary><see cref="!:Predicate(Of TTo)"/> being wrapped</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.Predicate(`0)">
 <summary>Invokes <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.InnerPredicate"/></summary>
 <param name="obj">Object to be tested</param>
 <returns>true if obj meets the criteria defined within the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.PredicateAdaptor.InnerPredicate"/>; otherwise, false.</returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor">
 <summary>Wraps <see cref="T:System.Action`1"/> of <see cref="!:TTo"/> so it looks like <see cref="T:System.Action`1"/> of <see cref="!:TFrom"/></summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor._InnerAction">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.InnerAction"/> property</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.#ctor(System.Action{`1})">
 <summary>CTor</summary>
 <param name="InnerPredicate"><see cref="T:System.Action`1"/> to wrap</param>
</member>
<member name="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.InnerAction">
 <summary><see cref="T:System.Predicate`1"/> being wrapped</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.Do(`0)">
 <summary>Invokes <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.InnerAction"/></summary>
 <param name="obj">Object to <see cref="P:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2.ActionAdaptor.InnerAction"/> be performed on</param>
</member>
<member name="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`1">
 <summary>Adapter that adapts <see cref="T:System.Collections.Generic.List`1"/> into <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyList`1"/> in order to prevent changes of adapted list</summary>
 <typeparam name="T">Type of items of list</typeparam>
 <remarks>If you need convert list of values of inherited type to list of values of parent type use <see cref="T:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`2"/></remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.ReadOnlyListAdapter`1.#ctor(System.Collections.Generic.List{`0})">
 <summary>CTor</summary>
 <param name="AdaptThis"><see cref="T:System.Collections.Generic.List`1"/> to be adapted</param>
</member>
<member name="T:Tools.CollectionsT.GenericT.GenericComparer`1">
 <summary>Delegate-backed comparer</summary>
 <typeparam name="T">Tpe to campare</typeparam>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.GenericComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
 <summary>CTor</summary>
 <param name="Comparer">Comparing delegte</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Comparer"/> is null</exception>
</member>
<member name="F:Tools.CollectionsT.GenericT.GenericComparer`1.Comparer">
 <summary>Comparing delegate</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.GenericComparer`1.Compare(`0,`0)">
 <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
 <param name="x">The first object to compare.</param>
 <param name="y">The second object to compare.</param>
 <returns>Value Condition Less than zero x is less than y.  Zero x equals y.  Greater than zero x is greater than y.</returns>
</member>
<member name="T:Tools.CollectionsT.GenericT.UnwrapEnumerator`2">
 <summary>Enumerator that unwraps its current value form furrent value of another enumerator</summary>
 <typeparam name="TEnvelope">Type of item in base enumerator</typeparam>
 <typeparam name="TItem">Type of item of this enumerator</typeparam>
 <remarks>This enumerator utilizes unwrapping function</remarks>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.Base">
 <summary>Base enumerator</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.Unwrap">
 <summary>Unwrapping function</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.#ctor(System.Collections.Generic.IEnumerator{`0},System.Func{`0,`1})">
 <summary>CTor</summary>
 <param name="Base">Base enumerator - the enumerator to unwrap value from items of</param>
 <param name="Unwrap">Unwrapping function</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Base"/> or <paramref name="Unwrap"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.CurrentEnvelope">
 <summary>Gets current element in base enumerator</summary>
 <returns>Current element in base enumerator</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.IEnumerator_Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="F:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.Dispose(System.Boolean)">
 <summary>Implements <see cref="T:System.IDisposable"/></summary>
 <param name="disposing">Disposing value</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.UnwrapEnumerator`2.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.                </summary>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.CollectionsT.GenericT.PriorityTarget">
 <summary>Indicates, which priority is poped first from the front</summary>
 <version version="1.5.2" stage="Nightly">Enumeration introduced</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.PriorityTarget.MaximumFirst">
 <summary>Items with greater priority are poped first from priority front</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.PriorityTarget.MinimumFirst">
 <summary>  Items with lower priority are poped first from priority front</summary>
</member>
<member name="T:Tools.CollectionsT.GenericT.PriorityQueue`1">
 <summary>Priority queue based on comparer</summary>
 <remarks>Can be also used as sorted list.
 <para>Note: When sorting value property used by comparer changes, list is not re-sorted manually.</para></remarks>
 <typeparam name="T">Type of item in queue</typeparam>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.PriorityQueue`1.List">
 <summary>Internal list</summary>
</member>
<member name="F:Tools.CollectionsT.GenericT.PriorityQueue`1._PriorityTarget">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.PriorityTarget"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.PriorityQueue`1.PriorityTarget">
 <summary>Defines which items are poped firts</summary>
 <remarks>This property does not affect sort order of internal list</remarks>
 <seelaso cref="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Pop"/><seelaso cref="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Peek"/>
</member>
<member name="F:Tools.CollectionsT.GenericT.PriorityQueue`1._Comparer">
 <summary>Contains value of the <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Comparer"/> property</summary>
</member>
<member name="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Comparer">
 <summary>Comparer used to compare items</summary>
 <remarks>This comparer is used for sorting purposes only. It is not used as equality comparer when equality must be tested (such as <see cref="M:Tools.CollectionsT.GenericT.PriorityQueue`1.IndexOf(`0)"/>).</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
 <summary>CTor from camparer</summary>
 <param name="Comparer">Comperer for comparing items</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Comaprer"/> is null</exception>
 <seelaso cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Comparer"/>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.#ctor">
 <summary>CTor using default comparer</summary>
 <remarks>Uses <see cref="P:System.Collections.Generic.Comparer`1.Default"/>. Use this constuctor only when default comparer is meaningful.</remarks>
 <seelaso cref="P:System.Collections.Generic.Comparer`1.Default"/>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0},Tools.CollectionsT.GenericT.PriorityTarget)">
 <summary>CTor from camparer and <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.PriorityTarget"/></summary>
 <param name="Comparer">Comperer for comparing items</param>
 <param name="PriorityTarget">Defines which items are poped first</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Comaprer"/> is null</exception>
 <seelaso cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Comparer"/>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
 <summary>CTor from existing collection</summary>
 <param name="Collection">Items to be in this sorted list</param>
 <param name="Comparer">Comaprer for comparing items</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Comaprer"/> is null</exception>
 <seelaso cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Comparer"/>
</member>
<member name="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Count">
 <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
</member>
<member name="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Item(System.Int32)">
 <summary>Gets value on specified index</summary>
 <param name="index">Index to obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.  -or- <paramref name="index"/> is equal to or greater than <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Count"/>.</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Push(`0)">
 <summary>Adds item to collection</summary>
 <param name="Value">Item to be added</param>
 <remarks>Item is immediatelly sorted at correct index</remarks>
 <returns>Index at which the item was pushed</returns>
 <version version="1.5.3">Fix: Always returns 0</version>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.GetInsertIndex(`0)">
 <summary>Gets index where item item is expected to be</summary>
 <param name="Value">Item to find</param>
 <returns>Either last index where item equal (in terms of <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Comparer"/>) is or index where it should be inserted.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.GetItemsWithSamePriority(`0)">
 <summary>Gets items that have same priority as given item</summary>
 <param name="item">Item to get items with same priority as</param>
 <returns>Items with same priority as <paramref name="item"/> or an empty enumeration if there are no such items</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Remove(`0)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.                </summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if 
 <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.                </returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.                </param>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.RemoveAt(System.Int32)">
 <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
 <param name="index">The zero-based index of the item to remove.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.                </exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Clear">
 <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.                </summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Contains(`0)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.                </summary>
 <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.                </returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.                </param>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.CopyTo(`0[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.                </summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.                </param>
 <param name="arrayIndex">The zero-based index in 
 <paramref name="array" /> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.
 -or- <paramref name="arrayIndex" /> is equal to or greater than the length of  <paramref name="array" />.
 -or- The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from  <paramref name="arrayIndex" /> to the end of the destination  <paramref name="array" />.
 -or- Type  <paramref name="T" /> cannot be cast automatically to the type of the destination  <paramref name="array" />.</exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.PriorityQueue`1.IsReadOnly">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
 <returns>false</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.IndexOf(`0)">
 <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
 <returns>The index of first occurence <paramref name="item" /> if found in the list; otherwise, -1.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Insert(System.Int32,`0)">
 <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
 <param name="index">Ignored</param>
 <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.ICollection_Add(`0)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.                </exception>
</member>
<member name="P:Tools.CollectionsT.GenericT.PriorityQueue`1.ILits_Item(System.Int32)">
 <summary>Gets or sets the element at the specified index.</summary>
 <returns>The element at the specified index.</returns>
 <param name="index">The zero-based index of the element to get or set.</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
 <remarks>Whan value is set the item is removed at old <paramref name="index"/> and new value is placed at index determined by correct position of item in sorted list</remarks>
</member>
<member name="P:Tools.CollectionsT.GenericT.PriorityQueue`1.PeekIndex">
 <summary>Gets index of first item in queue</summary>
 <returns>Zero or <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Count"/> - 1 dpending on <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.PriorityTarget"/>; -1 when collection is empty</returns>
 <remarks>When <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.PriorityTarget"/> is <see cref="F:Tools.CollectionsT.GenericT.PriorityTarget.MaximumFirst"/> returns <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Count"/> - 1; 0 otherwise (unless <see cref="P:Tools.CollectionsT.GenericT.PriorityQueue`1.Count"/> is 0).</remarks>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Peek">
 <summary>Gets first item in priority queue</summary>
 <exception cref="T:System.InvalidOperationException">Queue is empty</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Pop">
 <summary>Gets first item from priority queue and removes it from list</summary>
 <exception cref="T:System.InvalidOperationException">Queue is empty</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Sort">
 <summary>Forces queue to re-sort</summary>
 <remarks>Call this method only when properties comparer sorts by changed for many items.
 When sort proprty changes fo single item its better to <see cref="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Remove(`0)"/> it and <see cref="M:Tools.CollectionsT.GenericT.PriorityQueue`1.Push(`0)"/> it back.</remarks>
</member>
<member name="T:Tools.CollectionsT.GenericT.PriorityQueue`2">
 <summary>Priority queue with separeted item and priority</summary>
 <typeparam name="TValue">Type of item in queue</typeparam>
 <typeparam name="TPriority">Type of priority</typeparam>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="F:Tools.CollectionsT.GenericT.PriorityQueue`2.MyComparer">
 <summary>Comaprer of priority</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`0})">
 <summary>CTor</summary>
 <param name="Comparer">Comparer of priority</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Comparer"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.#ctor">
 <summary>CTor using default comarer</summary>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.Push(`0,`1)">
 <summary>Adds item to priority queue using its priority</summary>
 <param name="Priority">Item priority</param>
 <param name="Value">Item itself</param>
 <returns>Index at which the item was pushed</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.Peek">
 <summary>Gets item on top of priority queue</summary>
 <returns>Item on top of priority queue</returns>
 <exception cref="T:System.InvalidOperationException">Queue is empty</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.Pop">
 <summary>Gets item on top of priority queue and removes it from list</summary>
 <returns>Item previously on top of riority queue</returns>
 <exception cref="T:System.InvalidOperationException">Queue is empty</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.PeekPriority">
 <summary>Gets priority of item on top of queue</summary>
 <returns>Priority value of item on top of priority queue</returns>
 <exception cref="T:System.InvalidOperationException">Queue is empty</exception>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.IndexOf(`1)">
 <summary>Returns index of item in priority queues</summary>
 <param name="item">Item to get inde of</param>
 <returns>Index of item in queue; -1 whe item was not found</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.Remove(`1)">
 <summary>Removes item from queue</summary>
 <param name="item">Item to be removed</param>
 <returns>True if item was removed; false if it was not (because it was not in the queue)</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.GetItemsWithSamePriority(`0)">
 <summary>Gets all the items with given priority</summary>
 <param name="priority">Priority to get items with</param>
 <returns>All items with same priority as <paramref name="priority"/>. Empty enumeration if there are no such items.</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.Contains(`1)">
 <summary>Gets value indicating if collection contains given item</summary>
 <param name="item">Item to find</param>
 <returns>Ture if equal item is present; false if not</returns>
</member>
<member name="M:Tools.CollectionsT.GenericT.PriorityQueue`2.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.TransliterationDictionary">
 <summary>String-string dictionary for transliteration</summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
 <summary>CTor - creates a new instance of <see cref="T:Tools.CollectionsT.SpecializedT.TransliterationDictionary"/> class</summary>
 <param name="dictionary">Contains data to populate dictionary with</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> or <paramref name="comparison"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.#ctor(Tools.CollectionsT.SpecializedT.TransliterationDictionary)">
 <summary>Copy CTor - creates a copy of given instance of <see cref="T:Tools.CollectionsT.GenericT.DuplicateDictionary`2"/></summary>
 <param name="dictionary">A dictionary to create clone of</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State">
 <summary>States of Finite State Automaton</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.Normal">
 <summary>Normal text</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.Lt">
 <summary>&lt;</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.LtEnd">
 <summary>&lt;/</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.TagEnd">
 <summary>&lt;/text</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.TagEndWhite">
 <summary>&lt;/text□</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.XmlName">
 <summary>&lt;text</summary>            
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.SelfEnd">
 <summary>&lt;text/</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.TagInside">
 <summary>&lt;text□</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.AttrStart">
 <summary>&lt;text□text</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.AfterAttrName">
 <summary>&lt;text□text□</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.AfterEq">
 <summary>&lt;text□text=</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.Attr1">
 <summary>&lt;text□text='</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.Attr2">
 <summary>&lt;text□text="</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.AfterAttr">
 <summary>&lt;text□text="" or &lt;text□text=''</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.PIStart">
 <summary>&lt;?</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.PIName">
 <summary>&lt;?text</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.PIForceEnd">
 <summary>&lt;?text?</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.PIValue">
 <summary>&lt;?text□</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.PIEnd">
 <summary>&lt;?text□?</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.LtExcl">
 <summary>&lt;!</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.LtExcl1">
 <summary>&lt;?!-</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.Comment">
 <summary>&lt;?!--</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.C1">
 <summary>&lt;?!--text-</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.C2">
 <summary>&lt;?!--text--</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.LtExclOpen">
 <summary>&lt;![</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.LtExclOpenC">
 <summary>&lt;![C</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.LtExclOpenCD">
 <summary>&lt;![CD</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.LtExclOpenCDA">
 <summary>&lt;![CDA</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.LtExclOpenCDAT">
 <summary>&lt;![CDAT</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.LtExclOpenCDATA">
 <summary>&lt;![CDATA</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.CDATA">
 <summary>&lt;![CDATA[</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.CClose">
 <summary>&lt;![CDATA[text]</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.CClose2">
 <summary>&lt;![CDATA[text]]</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.Amp">
 <summary>&amp;</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.EntityName">
 <summary>&amp;text</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.AmpHash">
 <summary>&amp;#</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.AmpHashX">
 <summary>&amp;#x or &amp;#X</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.HexEntity">
 <summary>&amp;#x0</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.DecimalEntity">
 <summary>&amp;#0</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.Error">
 <summary>Special value used to indicate error in XML parsing which requires rolback to last saved point</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.State.NoChange">
 <summary>Special state used to indicate recovery from unparsed (XML) text</summary>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.ReplaceAndAdd(System.Text.StringBuilder,System.String,System.Boolean)">
 <summary>Transliterates given text and adds it to output or continues lookup</summary>
 <param name="target">A <see cref="T:System.Text.StringBuilder"/> to append output to</param>
 <param name="textInBlock">Current text block</param>
 <param name="force">True if we are at end of text block and text must be appended - prefix lookup cannot continue</param>
 <returns>
 Number of characters to advance start of text block by. Always between 0 and <paramref name="textInBlock"/>.<see cref="T:System.String">Length</see>.
 When <paramref name="force"/> is true always returns <paramref name="textInBlock"/>.<see cref="T:System.String">Length</see>.
 </returns>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.NameStartCharacters">
 <summary>Regular expression fragment to detect characters that can appear at start of XML name</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.NameCharacters">
 <summary>Regular expression fragment to detect characters that can appear inside XML name</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.NameStartRegEx">
 <summary>Regular expression used to verify if character can appear at start of XML name</summary>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.TransliterationDictionary.NameRegEx">
 <summary>Reguler expression used to verify if character ca appear inside XML name</summary>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.IsNameStartCharacter(System.Char)">
 <summary>Verifies if character can appear at start of XML name</summary>
 <param name="character">A character to verify</param>
 <returns>True when character can appear as first character of XML name; false otherwise</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.IsNameCharacter(System.Char)">
 <summary>Verifies if character can appear inside XML name</summary>
 <param name="character">A character to verify</param>
 <returns>True when character can appear as part of XML name; false otherwise</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.CloneInternal">
 <summary>Internally implements the <see cref="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.Clone"/> method.</summary>
 <returns>Cloned instance of current instance. Derived class must always override this method and return instance of derived class.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.GetAllStartingWith(System.String)">
 <summary>Gets all items from dictionary which's key starts with given prefix</summary>
 <param name="prefix">Prefix to get jkeys starting with</param>
 <returns>Array of keys and values whose keys start with <paramref name="prefix"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="prefix"/> is null;</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.FirstIndexOfPrefix(System.String)">
 <summary>Gets first index of item whose key starts with given prefix</summary>
 <param name="prefix">Prefix of item key</param>
 <returns>First (the lowest) index of item with key starting with <paramref name="prefix"/>. -1 where ther is no such item.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="prefix"/> is null;</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.LastIndexOfPrefix(System.String,System.Int32)">
 <summary>Gets last index of item whose key starts with given prefix</summary>
 <param name="prefix">Prefix of item key</param>
 <param name="firstIndex">Index of first occurence of item with key starting with <paramref name="prefix"/></param>
 <returns>Index of last occurence of key starting with <paramref name="prefix"/> after <paramref name="firstIndex"/>. <paramref name="firstIndex"/> where there are no more occurences of keys with prefix <paramref name="prefix"/> after index <paramref name="firstIndex"/> or <paramref name="firstImdex"/> is less than zero.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="prefix"/> is null;</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.TransliterationDictionary.LastIndexOfPrefix(System.String)">
 <summary>Gets last index of item whose key starts with given prefix</summary>
 <param name="prefix">Prefix of item key</param>
 <returns>Last (the highets) index of item with key starting with <paramref name="prefix"/>. -1 where there is no such item.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="prefix"/> is null;</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper">
 <summary>Provides abstract base class and static methods for wrapping type-unsafe <see cref="T:System.Collections.ICollection"/> as type-safe <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/></summary>
 <remarks>Derived classes should derive from <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1"/> or <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1"/> instead</remarks>
</member>
<member name="F:Tools.CollectionsT.SpecializedT.SpecializedWrapper.Collection">
 <summary>Collection being wrapped</summary>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.#ctor(System.Collections.ICollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UnsafeReadOnlyItem(System.Int32)">
 <summary>Gets value on specified index</summary>
 <param name="index">Index to obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CopyTo(System.Array,System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
 <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null. </exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than zero. </exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="array" /> is multidimensional.-or- 
 <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.-or-
 The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination  <paramref name="array" />. </exception>
 <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.Copy(System.Object[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing. </param>
 <param name="index">The zero-based index in array at which copying begins. </param>
 <exception cref="T:System.ArgumentNullException">array is null. </exception>
 <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
 <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
 <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyCollection`1"></see> cannot be cast automatically to the type of the destination array. </exception>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.Count">
 <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IsSynchronized">
 <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
 <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SyncRoot">
 <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
 <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetEnumerator1">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2">
 <summary>Provides common base class for wrappers of type-unsafe <see cref="T:System.Collections.IList"/> to type-safe <see cref="T:System.Collections.Generic.IList`1"/></summary>
 <typeparam name="TCollection">Type of collection being wrapped</typeparam>
 <typeparam name=" TItem">Type of item in collection being wrapped</typeparam>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.#ctor(`0)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
 <remarks>Derived class is responsible for allowing only such collections which contains only items of type <typeparamref name="TItem"/></remarks>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.IndexOf(`1)">
 <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
 <returns>The index of item if found in the list; otherwise, -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Insert(System.Int32,`1)">
 <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
 <param name="index">The zero-based index at which item should be inserted.</param>
 <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Item(System.Int32)">
 <summary>Gets or sets the element at the specified index.</summary>
 <param name="index">The zero-based index of the element to get or set.</param>
 <returns>The element at the specified index.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
 <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.RemoveAt(System.Int32)">
 <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
 <param name="index">The zero-based index of the item to remove.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Clear">
 <summary>Removes all items from the <see cref="T:System.Collections.IList" />.</summary>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.IsFixedSize">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
 <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.IsReadOnly">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</summary>
 <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Contains(`1)">
 <summary>Gets value indicating if the collection contains given object</summary>
 <param name="item">Object to search for</param>
 <returns>True if collection contains <paramref name="item"/>; false otherwise</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Add(`1)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Remove(`1)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if 
 <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if 
 <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Item_Unsafe(System.Int32)">
 <summary>Gets or sets the element at the specified index.</summary>
 <param name="index">The zero-based index of the element to get or set.</param>
 <returns>The element at the specified index.</returns>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
 <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</exception>
 <exception cref="T:Tools.TypeMismatchException">value being set is not of type <typeparemref name="TItem"/></exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Remove_Unsafe(System.Object)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
 <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Contains_Unsafe(System.Object)">
 <summary>Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</summary>
 <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
 <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.IndexOf_Unsafe(System.Object)">
 <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</summary>
 <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</param>
 <returns>The index of value if found in the list; otherwise, -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Insert_Unsafe(System.Int32,System.Object)">
 <summary>Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</summary>
 <param name="index">The zero-based index at which value should be inserted.</param>
 <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Collections.IList" />.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
 <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList" />.</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is not of type <typeparemref name="TItem"/></exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.ThrowType(System.Object)">
 <summary>Checks if given object can be stored in this collection</summary>
 <param name="obj">Object to be stested</param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="obj"/> is not of type <typeparemref name="TItem"/></exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IListTypeSafeWrapper`2.Add_Unsafe(System.Object)">
 <summary>Adds an item to the <see cref="T:System.Collections.IList" />.</summary>
 <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</param>
 <returns>The position into which the new element was inserted.</returns>
 <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only.-or- The <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is not of type <typeparemref name="TItem"/></exception>
 <version version="1.5.3">Fix: Always returns 0</version>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2">
 <summary>Provides common base for specialized wrappers implementations</summary>
 <typeparam name="TCollection">Type of collection being wrapped</typeparam>
 <typeparam name="TItem">Type of item in collection</typeparam>
 <remarks>This class is not intended for direct use. Use <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1"/> instead.</remarks>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2.#ctor(`0)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped. It is responsibility of derived class to pass only such collections whichs items are of type <typeparamref name="T"/> in CTor. No check is done.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2.Collection">
 <summary>Collection being wrapped</summary>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2.op_Implicit(Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper{`0,`1})~`0">
 <summary>Converts <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2"/> to <typeparamref name="TCollection"/></summary>
 <param name="a">A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2"/></param>
 <returns><paramref name="a"/>.<see cref="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2.Collection">Collection</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2">
 <summary>Provides common base for specialized read-only wrappers implementations</summary>
 <typeparam name="TCollection">Type of collection being wrapped</typeparam>
 <typeparam name=" TItem">Type of item in collection</typeparam>
 <remarks>This class is not intended for direct use. Use <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1"/> instead.</remarks>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2.#ctor(`0)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped. It is responsibility of derived class to pass only such collections whichs items are of type <typeparamref name="T"/> in CTor. No check is done.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2.Collection">
 <summary>Collection being wrapped</summary>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2.op_Implicit(Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper{`0,`1})~`0">
 <summary>Converts <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2"/> to <typeparamref name="TCollection"/></summary>
 <param name="a">A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedReadOnlyWrapper`2"/></param>
 <returns><paramref name="a"/>.<see cref="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SpecializedWrapper`2.Collection">Collection</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Collections.BitArray)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Collections.BitArray"/></summary>
 <param name="Collection">A <see cref="T:System.Boolean"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Collections.BitArray"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.#ctor(System.Collections.BitArray)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.op_Implicit(System.Collections.BitArray)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Collections.BitArray"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Collections.BitArray"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.Add(System.Boolean)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BitArrayTypeSafeWrapper.Remove(System.Boolean)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.AttributeCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.AttributeCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Attribute"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.ComponentModel.AttributeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper.#ctor(System.ComponentModel.AttributeCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.AttributeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.ComponentModel.AttributeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.ComponentModel.AttributeCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AttributeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.Design.DesignerCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.Design.DesignerCollection"/></summary>
 <param name="Collection">A <see cref="T:System.ComponentModel.Design.IDesignerHost"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.ComponentModel.Design.DesignerCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper.#ctor(System.ComponentModel.Design.DesignerCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.Design.DesignerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.ComponentModel.Design.DesignerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.ComponentModel.Design.DesignerCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataViewSettingCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataViewSettingCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.DataViewSetting"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.DataViewSettingCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper.#ctor(System.Data.DataViewSettingCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper.op_Implicit(System.Data.DataViewSettingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.DataViewSettingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.DataViewSettingCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataViewSettingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Odbc.OdbcErrorCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Odbc.OdbcErrorCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.Odbc.OdbcError"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.Odbc.OdbcErrorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper.#ctor(System.Data.Odbc.OdbcErrorCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper.op_Implicit(System.Data.Odbc.OdbcErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.Odbc.OdbcErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.Odbc.OdbcErrorCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.OleDb.OleDbErrorCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.OleDb.OleDbErrorCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.OleDb.OleDbError"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.OleDb.OleDbErrorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper.#ctor(System.Data.OleDb.OleDbErrorCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper.op_Implicit(System.Data.OleDb.OleDbErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.OleDb.OleDbErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.OleDb.OleDbErrorCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.SqlClient.SqlErrorCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.SqlClient.SqlErrorCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.SqlClient.SqlError"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.SqlClient.SqlErrorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper.#ctor(System.Data.SqlClient.SqlErrorCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper.op_Implicit(System.Data.SqlClient.SqlErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.SqlClient.SqlErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.SqlClient.SqlErrorCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.EventLogEntryCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.EventLogEntryCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Diagnostics.EventLogEntry"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Diagnostics.EventLogEntryCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper.#ctor(System.Diagnostics.EventLogEntryCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.EventLogEntryCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Diagnostics.EventLogEntryCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Diagnostics.EventLogEntryCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogEntryCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Printing.PrinterSettings.PaperSourceCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Drawing.Printing.PaperSource"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper.#ctor(System.Drawing.Printing.PrinterSettings.PaperSourceCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Printing.PrinterSettings.PaperSourceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSourceCollectionTypeSafeWrapper.Add(System.Drawing.Printing.PaperSource)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Printing.PrinterSettings.PaperSizeCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Drawing.Printing.PaperSize"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper.#ctor(System.Drawing.Printing.PrinterSettings.PaperSizeCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Printing.PrinterSettings.PaperSizeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PaperSizeCollectionTypeSafeWrapper.Add(System.Drawing.Printing.PaperSize)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Drawing.Printing.PrinterResolution"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper.#ctor(System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PrinterResolutionCollectionTypeSafeWrapper.Add(System.Drawing.Printing.PrinterResolution)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.CookieCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Net.CookieCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Net.Cookie"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Net.CookieCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper.#ctor(System.Net.CookieCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper.op_Implicit(System.Net.CookieCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Net.CookieCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Net.CookieCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CookieCollectionTypeSafeWrapper.Add(System.Net.Cookie)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.AsnEncodedDataCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Security.Cryptography.AsnEncodedData"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.AsnEncodedDataCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.AsnEncodedDataCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AsnEncodedDataCollectionTypeSafeWrapper.Add(System.Security.Cryptography.AsnEncodedData)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.OidCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.OidCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Security.Cryptography.Oid"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.Cryptography.OidCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.OidCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.OidCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.Cryptography.OidCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.Cryptography.OidCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OidCollectionTypeSafeWrapper.Add(System.Security.Cryptography.Oid)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.X509Certificates.X509ExtensionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.X509Certificates.X509ExtensionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.X509Certificates.X509ExtensionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ExtensionCollectionTypeSafeWrapper.Add(System.Security.Cryptography.X509Certificates.X509Extension)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.X509Certificates.X509ChainElementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.X509Certificates.X509ChainElementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.X509Certificates.X509ChainElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509ChainElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Permissions.KeyContainerPermissionAccessEntryCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper.#ctor(System.Security.Permissions.KeyContainerPermissionAccessEntryCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper.op_Implicit(System.Security.Permissions.KeyContainerPermissionAccessEntryCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.KeyContainerPermissionAccessEntryCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Policy.ApplicationTrustCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Policy.ApplicationTrustCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Security.Policy.ApplicationTrust"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.Policy.ApplicationTrustCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.#ctor(System.Security.Policy.ApplicationTrustCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.op_Implicit(System.Security.Policy.ApplicationTrustCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.Policy.ApplicationTrustCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.Policy.ApplicationTrustCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.Add(System.Security.Policy.ApplicationTrust)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ApplicationTrustCollectionTypeSafeWrapper.Remove(System.Security.Policy.ApplicationTrust)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Text.RegularExpressions.CaptureCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Text.RegularExpressions.CaptureCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Text.RegularExpressions.Capture"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Text.RegularExpressions.CaptureCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper.#ctor(System.Text.RegularExpressions.CaptureCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper.op_Implicit(System.Text.RegularExpressions.CaptureCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Text.RegularExpressions.CaptureCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Text.RegularExpressions.CaptureCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CaptureCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Text.RegularExpressions.GroupCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Text.RegularExpressions.GroupCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Text.RegularExpressions.Group"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Text.RegularExpressions.GroupCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper.#ctor(System.Text.RegularExpressions.GroupCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper.op_Implicit(System.Text.RegularExpressions.GroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Text.RegularExpressions.GroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Text.RegularExpressions.GroupCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Text.RegularExpressions.MatchCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Text.RegularExpressions.MatchCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Text.RegularExpressions.Match"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Text.RegularExpressions.MatchCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper.#ctor(System.Text.RegularExpressions.MatchCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper.op_Implicit(System.Text.RegularExpressions.MatchCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Text.RegularExpressions.MatchCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Text.RegularExpressions.MatchCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MatchCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.ControlCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.ControlCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.Control"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.ControlCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.#ctor(System.Web.UI.ControlCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.ControlCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.ControlCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.ControlCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Add(System.Web.UI.Control)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Remove(System.Web.UI.Control)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Contains(System.Web.UI.Control)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.IndexOf(System.Web.UI.Control)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebControlCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.Control)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.HtmlControls.HtmlTableCellCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.HtmlControls.HtmlTableCell"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.#ctor(System.Web.UI.HtmlControls.HtmlTableCellCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.HtmlControls.HtmlTableCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.Add(System.Web.UI.HtmlControls.HtmlTableCell)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.Remove(System.Web.UI.HtmlControls.HtmlTableCell)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableCellCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.HtmlControls.HtmlTableCell)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.HtmlControls.HtmlTableRowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.HtmlControls.HtmlTableRow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.#ctor(System.Web.UI.HtmlControls.HtmlTableRowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.HtmlControls.HtmlTableRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.Add(System.Web.UI.HtmlControls.HtmlTableRow)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.Remove(System.Web.UI.HtmlControls.HtmlTableRow)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlTableRowCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.HtmlControls.HtmlTableRow)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.ValidatorCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.ValidatorCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.IValidator"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.ValidatorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.#ctor(System.Web.UI.ValidatorCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.ValidatorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.ValidatorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.ValidatorCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.Add(System.Web.UI.IValidator)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.Remove(System.Web.UI.IValidator)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ValidatorCollectionTypeSafeWrapper.Contains(System.Web.UI.IValidator)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataGridColumnCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataGridColumn"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataGridColumnCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataGridColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.DataGridColumn)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.DataGridColumn)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.DataGridColumn)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.DataGridColumn)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridColumnCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.WebControls.DataGridColumn)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataGridItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataGridItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataGridItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataGridItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataKeyArray)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataKeyArray"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataKey"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.DataKeyArray"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataKeyArray)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataKeyArray)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.DataKeyArray"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.DataKeyArray"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataKeyArrayTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataListItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataListItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataListItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataListItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataListItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DetailsViewRowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.DetailsViewRow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DetailsViewRowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DetailsViewRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DetailsViewRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.GridViewRowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.GridViewRow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.GridViewRowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.GridViewRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridViewRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.MenuItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.MenuItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.MenuItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.MenuItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.MenuItem)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.MenuItem)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.MenuItem)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebMenuItemCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.MenuItem)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.RepeaterItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.RepeaterItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.RepeaterItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.RepeaterItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RepeaterItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.SelectedDatesCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/></summary>
 <param name="Collection">A <see cref="T:System.DateTime"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.SelectedDatesCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.SelectedDatesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.Add(System.DateTime)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.Remove(System.DateTime)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedDatesCollectionTypeSafeWrapper.Contains(System.DateTime)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TreeNodeCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.TreeNode"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TreeNodeCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TreeNodeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.TreeNode)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.TreeNode)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.TreeNode)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.TreeNode)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTreeNodeCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.WebControls.TreeNode)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfo"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationStateInfoCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.WebParts.PersonalizationStateInfo)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.GridItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.GridItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.GridItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.GridItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.GridItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.GridItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.GridItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.GridItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.HtmlElementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.HtmlElementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.HtmlElement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.HtmlElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.HtmlElementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.HtmlElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.HtmlElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.HtmlElementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.HtmlWindowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.HtmlWindowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.HtmlWindow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.HtmlWindowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.HtmlWindowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.HtmlWindowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.HtmlWindowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.HtmlWindowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HtmlWindowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.PropertyGrid.PropertyTabCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.Design.PropertyTab"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.PropertyGrid.PropertyTabCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.PropertyGrid.PropertyTabCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyTabCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.WindowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.WindowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Window"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.WindowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper.#ctor(System.Windows.WindowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper.op_Implicit(System.Windows.WindowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.WindowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.WindowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WindowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.XmlAttributeCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.XmlAttributeCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Xml.XmlAttribute"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Xml.XmlAttributeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.#ctor(System.Xml.XmlAttributeCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.op_Implicit(System.Xml.XmlAttributeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Xml.XmlAttributeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Xml.XmlAttributeCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.Add(System.Xml.XmlAttribute)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.Remove(System.Xml.XmlAttribute)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAttributeCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.ComponentCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.ComponentCollection"/></summary>
 <param name="Collection">A <see cref="T:System.ComponentModel.IComponent"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.ComponentModel.ComponentCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper.#ctor(System.ComponentModel.ComponentCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.ComponentCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.ComponentModel.ComponentCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.ComponentModel.ComponentCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ComponentCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ConfigurationLocationCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ConfigurationLocationCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Configuration.ConfigurationLocation"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Configuration.ConfigurationLocationCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper.#ctor(System.Configuration.ConfigurationLocationCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ConfigurationLocationCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Configuration.ConfigurationLocationCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Configuration.ConfigurationLocationCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationLocationCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.ProcessModuleCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.ProcessModuleCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Diagnostics.ProcessModule"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Diagnostics.ProcessModuleCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.#ctor(System.Diagnostics.ProcessModuleCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.ProcessModuleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Diagnostics.ProcessModuleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Diagnostics.ProcessModuleCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.Contains(System.Diagnostics.ProcessModule)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessModuleCollectionTypeSafeWrapper.IndexOf(System.Diagnostics.ProcessModule)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.ProcessThreadCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.ProcessThreadCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Diagnostics.ProcessThread"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Diagnostics.ProcessThreadCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.#ctor(System.Diagnostics.ProcessThreadCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.ProcessThreadCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Diagnostics.ProcessThreadCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Diagnostics.ProcessThreadCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Add(System.Diagnostics.ProcessThread)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Remove(System.Diagnostics.ProcessThread)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Contains(System.Diagnostics.ProcessThread)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.IndexOf(System.Diagnostics.ProcessThread)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProcessThreadCollectionTypeSafeWrapper.Insert(System.Int32,System.Diagnostics.ProcessThread)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Design.CategoryNameCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Design.CategoryNameCollection"/></summary>
 <param name="Collection">A <see cref="T:System.String"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Drawing.Design.CategoryNameCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.#ctor(System.Drawing.Design.CategoryNameCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Design.CategoryNameCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Drawing.Design.CategoryNameCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Drawing.Design.CategoryNameCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.Contains(System.String)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CategoryNameCollectionTypeSafeWrapper.IndexOf(System.String)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Drawing.Design.ToolboxItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Drawing.Design.ToolboxItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Drawing.Design.ToolboxItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Drawing.Design.ToolboxItemCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.#ctor(System.Drawing.Design.ToolboxItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.op_Implicit(System.Drawing.Design.ToolboxItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Drawing.Design.ToolboxItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Drawing.Design.ToolboxItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.Contains(System.Drawing.Design.ToolboxItem)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolboxItemCollectionTypeSafeWrapper.IndexOf(System.Drawing.Design.ToolboxItem)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.AccessControl.AuthorizationRuleCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Security.AccessControl.AuthorizationRule"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper.#ctor(System.Security.AccessControl.AuthorizationRuleCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper.op_Implicit(System.Security.AccessControl.AuthorizationRuleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthorizationRuleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Management.WebBaseEventCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Management.WebBaseEventCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Management.WebBaseEvent"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Management.WebBaseEventCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.#ctor(System.Web.Management.WebBaseEventCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.op_Implicit(System.Web.Management.WebBaseEventCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Management.WebBaseEventCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Management.WebBaseEventCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.Contains(System.Web.Management.WebBaseEvent)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebBaseEventCollectionTypeSafeWrapper.IndexOf(System.Web.Management.WebBaseEvent)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.CatalogPartCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPart"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.CatalogPartCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.CatalogPartCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.CatalogPart)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CatalogPartCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.CatalogPart)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Type"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.Contains(System.Type)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionInterfaceCollectionTypeSafeWrapper.IndexOf(System.Type)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConsumerConnectionPointCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.EditorPartCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.EditorPartCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.EditorPartCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.EditorPart)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EditorPartCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.EditorPart)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.ProviderConnectionPoint)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderConnectionPointCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.ProviderConnectionPoint)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.TransformerTypeCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Type"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.TransformerTypeCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.TransformerTypeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.Contains(System.Type)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerTypeCollectionTypeSafeWrapper.IndexOf(System.Type)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPart"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.WebPart)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.WebPart)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescription"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.WebPartDescription)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDescriptionCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.WebPartDescription)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartVerbCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartVerbCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartVerbCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.WebPartVerb)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartVerbCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.WebPartVerb)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartZoneCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneBase"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartZoneCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartZoneCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.WebParts.WebPartZoneBase)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartZoneCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.WebParts.WebPartZoneBase)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.FormCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.FormCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.Form"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.FormCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.FormCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.FormCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.FormCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.FormCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.InputLanguageCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.InputLanguageCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.InputLanguage"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.InputLanguageCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.InputLanguageCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.InputLanguageCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.InputLanguageCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.InputLanguageCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.Contains(System.Windows.Forms.InputLanguage)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.InputLanguageCollectionTypeSafeWrapper.IndexOf(System.Windows.Forms.InputLanguage)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ConfigurationSectionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ConfigurationSectionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Configuration.ConfigurationSection"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Configuration.ConfigurationSectionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper.#ctor(System.Configuration.ConfigurationSectionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ConfigurationSectionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Configuration.ConfigurationSectionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Configuration.ConfigurationSectionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ConfigurationSectionGroupCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Configuration.ConfigurationSectionGroup"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper.#ctor(System.Configuration.ConfigurationSectionGroupCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ConfigurationSectionGroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConfigurationSectionGroupCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.VirtualDirectoryMappingCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.VirtualDirectoryMapping"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.VirtualDirectoryMappingCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.VirtualDirectoryMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.VirtualDirectoryMappingCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.HttpCookieCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.HttpCookieCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.HttpCookie"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.HttpCookieCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.#ctor(System.Web.HttpCookieCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.op_Implicit(System.Web.HttpCookieCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.HttpCookieCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.HttpCookieCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.Add(System.Web.HttpCookie)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpCookieCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.HttpFileCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.HttpFileCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.HttpPostedFile"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.HttpFileCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper.#ctor(System.Web.HttpFileCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper.op_Implicit(System.Web.HttpFileCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.HttpFileCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.HttpFileCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpFileCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.HttpModuleCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.HttpModuleCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.IHttpModule"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.HttpModuleCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper.#ctor(System.Web.HttpModuleCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper.op_Implicit(System.Web.HttpModuleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.HttpModuleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.HttpModuleCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ConnectionStringSettingsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Configuration.ConnectionStringSettings"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.#ctor(System.Configuration.ConnectionStringSettingsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ConnectionStringSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.Add(System.Configuration.ConnectionStringSettings)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.Remove(System.Configuration.ConnectionStringSettings)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.Contains(System.Configuration.ConnectionStringSettings)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionStringSettingsCollectionTypeSafeWrapper.IndexOf(System.Configuration.ConnectionStringSettings)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ProviderSettingsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ProviderSettingsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Configuration.ProviderSettings"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Configuration.ProviderSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper.#ctor(System.Configuration.ProviderSettingsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ProviderSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Configuration.ProviderSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Configuration.ProviderSettingsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProviderSettingsCollectionTypeSafeWrapper.Add(System.Configuration.ProviderSettings)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.Configuration.AuthenticationModuleElementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Net.Configuration.AuthenticationModuleElement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.#ctor(System.Net.Configuration.AuthenticationModuleElementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.op_Implicit(System.Net.Configuration.AuthenticationModuleElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.Add(System.Net.Configuration.AuthenticationModuleElement)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.Remove(System.Net.Configuration.AuthenticationModuleElement)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.Contains(System.Net.Configuration.AuthenticationModuleElement)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AuthenticationModuleElementCollectionTypeSafeWrapper.IndexOf(System.Net.Configuration.AuthenticationModuleElement)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.Configuration.BypassElementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Net.Configuration.BypassElementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Net.Configuration.BypassElement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Net.Configuration.BypassElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.#ctor(System.Net.Configuration.BypassElementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.op_Implicit(System.Net.Configuration.BypassElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Net.Configuration.BypassElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Net.Configuration.BypassElementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.Add(System.Net.Configuration.BypassElement)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.Remove(System.Net.Configuration.BypassElement)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.Contains(System.Net.Configuration.BypassElement)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BypassElementCollectionTypeSafeWrapper.IndexOf(System.Net.Configuration.BypassElement)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.Configuration.ConnectionManagementElementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Net.Configuration.ConnectionManagementElement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.#ctor(System.Net.Configuration.ConnectionManagementElementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.op_Implicit(System.Net.Configuration.ConnectionManagementElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.Add(System.Net.Configuration.ConnectionManagementElement)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.Remove(System.Net.Configuration.ConnectionManagementElement)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.Contains(System.Net.Configuration.ConnectionManagementElement)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConnectionManagementElementCollectionTypeSafeWrapper.IndexOf(System.Net.Configuration.ConnectionManagementElement)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Net.Configuration.WebRequestModuleElementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Net.Configuration.WebRequestModuleElement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.#ctor(System.Net.Configuration.WebRequestModuleElementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.op_Implicit(System.Net.Configuration.WebRequestModuleElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.Add(System.Net.Configuration.WebRequestModuleElement)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.Remove(System.Net.Configuration.WebRequestModuleElement)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.Contains(System.Net.Configuration.WebRequestModuleElement)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebrequestModuleElementCollectionTypeSafeWrapper.IndexOf(System.Net.Configuration.WebRequestModuleElement)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.AssemblyCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.AssemblyCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.AssemblyInfo"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.AssemblyCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.AssemblyCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.AssemblyCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.AssemblyCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.AssemblyCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.Add(System.Web.Configuration.AssemblyInfo)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAssemblyCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.AuthorizationRuleCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.AuthorizationRule"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.AuthorizationRuleCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.AuthorizationRuleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.Add(System.Web.Configuration.AuthorizationRule)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.Remove(System.Web.Configuration.AuthorizationRule)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.Contains(System.Web.Configuration.AuthorizationRule)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebAuthorizationRuleCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.AuthorizationRule)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.BufferModesCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.BufferModesCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.BufferModeSettings"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.BufferModesCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.BufferModesCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.BufferModesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.BufferModesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.BufferModesCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BufferModesCollectionTypeSafeWrapper.Add(System.Web.Configuration.BufferModeSettings)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.BuildProviderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.BuildProviderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.BuildProvider"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.BuildProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.BuildProviderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.BuildProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.BuildProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.BuildProviderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.Add(System.Web.Configuration.BuildProvider)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BuildProviderCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ClientTargetCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ClientTargetCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.ClientTarget"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.ClientTargetCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ClientTargetCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ClientTargetCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.ClientTargetCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.ClientTargetCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.Add(System.Web.Configuration.ClientTarget)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ClientTarget)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ClientTargetCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.CodeSubDirectoriesCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.CodeSubDirectory"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.CodeSubDirectoriesCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.CodeSubDirectoriesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.Add(System.Web.Configuration.CodeSubDirectory)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeSubDirectoriesCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.CompilerCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.CompilerCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.Compiler"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.CompilerCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.CompilerCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.CompilerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.CompilerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.CompilerCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebCompilerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.CustomErrorCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.CustomErrorCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.CustomError"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.CustomErrorCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.CustomErrorCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.CustomErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.CustomErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.CustomErrorCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.Add(System.Web.Configuration.CustomError)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.Remove(System.Web.Configuration.CustomError)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CustomErrorCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.EventMappingSettingsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.EventMappingSettings"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.EventMappingSettingsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.EventMappingSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.EventMappingSettings)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.EventMappingSettings)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.Contains(System.Web.Configuration.EventMappingSettings)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventMappingSettingsCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.EventMappingSettings)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ExpressionBuilderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.ExpressionBuilder"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ExpressionBuilderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ExpressionBuilderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.Add(System.Web.Configuration.ExpressionBuilder)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ExpressionBuilderCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.FormsAuthenticationUserCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.FormsAuthenticationUser"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.FormsAuthenticationUserCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.FormsAuthenticationUserCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.Add(System.Web.Configuration.FormsAuthenticationUser)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.FormsAuthenticationUserCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.HttpHandlerActionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.HttpHandlerAction"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.HttpHandlerActionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.HttpHandlerActionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.Add(System.Web.Configuration.HttpHandlerAction)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.Remove(System.Web.Configuration.HttpHandlerAction)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.Contains(System.Web.Configuration.HttpHandlerAction)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpHandlerActionCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.HttpHandlerAction)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.HttpModuleActionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.HttpModuleAction"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.HttpModuleActionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.HttpModuleActionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.Add(System.Web.Configuration.HttpModuleAction)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.Remove(System.Web.Configuration.HttpModuleAction)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.Contains(System.Web.Configuration.HttpModuleAction)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HttpModuleActionCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.HttpModuleAction)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.NamespaceCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.NamespaceCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.NamespaceInfo"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.NamespaceCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.NamespaceCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.NamespaceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.NamespaceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.NamespaceCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.Add(System.Web.Configuration.NamespaceInfo)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.Remove(System.Web.Configuration.NamespaceInfo)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebNamespaceCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.OutputCacheProfileCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.OutputCacheProfile"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.OutputCacheProfileCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.OutputCacheProfileCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.Add(System.Web.Configuration.OutputCacheProfile)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.Remove(System.Web.Configuration.OutputCacheProfile)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OutputCacheProfileCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ProfileGroupSettingsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.ProfileGroupSettings"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ProfileGroupSettingsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ProfileGroupSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.ProfileGroupSettings)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ProfileGroupSettings)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileGroupSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ProfilePropertySettingsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.ProfilePropertySettings"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ProfilePropertySettingsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ProfilePropertySettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.ProfilePropertySettings)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ProfilePropertySettings)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfilePropertySettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ProfileSettingsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.ProfileSettings"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ProfileSettingsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ProfileSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.ProfileSettings)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ProfileSettings)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Contains(System.Web.Configuration.ProfileSettings)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.ProfileSettings)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileSettingsCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.Configuration.ProfileSettings)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.ProtocolCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.ProtocolCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.ProtocolElement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.ProtocolCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.ProtocolCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.ProtocolCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.ProtocolCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.ProtocolCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.Add(System.Web.Configuration.ProtocolElement)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.Remove(System.Web.Configuration.ProtocolElement)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtocolCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.RuleSettingsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.RuleSettingsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.RuleSettings"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.RuleSettingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.RuleSettingsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.RuleSettingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.RuleSettingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.RuleSettingsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Add(System.Web.Configuration.RuleSettings)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Remove(System.Web.Configuration.RuleSettings)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Contains(System.Web.Configuration.RuleSettings)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.IndexOf(System.Web.Configuration.RuleSettings)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RuleSettingsCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.Configuration.RuleSettings)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.SqlCacheDependencyDatabaseCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabase"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.SqlCacheDependencyDatabaseCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.SqlCacheDependencyDatabaseCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.Add(System.Web.Configuration.SqlCacheDependencyDatabase)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.Remove(System.Web.Configuration.SqlCacheDependencyDatabase)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlCacheDependencyDatabaseCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.TagMapCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.TagMapCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.TagMapInfo"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.TagMapCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.TagMapCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.TagMapCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.TagMapCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.TagMapCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.Add(System.Web.Configuration.TagMapInfo)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagMapCollectionTypeSafeWrapper.Remove(System.Web.Configuration.TagMapInfo)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.TagPrefixCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.TagPrefixCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.TagPrefixInfo"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.TagPrefixCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.TagPrefixCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.TagPrefixCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.TagPrefixCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.TagPrefixCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TagPrefixCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.TransformerInfoCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.TransformerInfoCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.TransformerInfo"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.TransformerInfoCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.TransformerInfoCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.TransformerInfoCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.TransformerInfoCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.TransformerInfoCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TransformerInfoCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.TrustLevelCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.TrustLevelCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.TrustLevel"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.TrustLevelCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.TrustLevelCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.TrustLevelCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.TrustLevelCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.TrustLevelCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TrustLevelCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.UrlMappingCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.UrlMappingCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Configuration.UrlMapping"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.UrlMappingCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.#ctor(System.Web.Configuration.UrlMappingCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.op_Implicit(System.Web.Configuration.UrlMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.UrlMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.UrlMappingCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.Add(System.Web.Configuration.UrlMapping)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.Remove(System.Web.Configuration.UrlMapping)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UrlmappingCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.#ctor(System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.op_Implicit(System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.Add(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.Remove(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.Contains(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionElementCollectionTypeSafeWrapper.IndexOf(System.Xml.Serialization.Configuration.SchemaImporterExtensionElement)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.ProtectedConfigurationProviderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Configuration.ProtectedConfigurationProvider"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper.#ctor(System.Configuration.ProtectedConfigurationProviderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper.op_Implicit(System.Configuration.ProtectedConfigurationProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProtectedConfigurationProviderCollectionTypeSafeWrapper.Add(System.Configuration.ProtectedConfigurationProvider)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Configuration.SettingsProviderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Configuration.SettingsProviderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Configuration.SettingsProvider"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Configuration.SettingsProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper.#ctor(System.Configuration.SettingsProviderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper.op_Implicit(System.Configuration.SettingsProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Configuration.SettingsProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Configuration.SettingsProviderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SettingsProviderCollectionTypeSafeWrapper.Add(System.Configuration.SettingsProvider)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Profile.ProfileProviderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Profile.ProfileProviderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Profile.ProfileProvider"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Profile.ProfileProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper.#ctor(System.Web.Profile.ProfileProviderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.Profile.ProfileProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Profile.ProfileProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Profile.ProfileProviderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProfileProviderCollectionTypeSafeWrapper.Add(System.Web.Profile.ProfileProvider)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Security.MembershipProviderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Security.MembershipProviderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Security.MembershipProvider"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Security.MembershipProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper.#ctor(System.Web.Security.MembershipProviderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.Security.MembershipProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Security.MembershipProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Security.MembershipProviderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MembershipProviderCollectionTypeSafeWrapper.Add(System.Web.Security.MembershipProvider)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Security.RoleProviderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Security.RoleProviderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.Security.RoleProvider"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Security.RoleProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper.#ctor(System.Web.Security.RoleProviderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.Security.RoleProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Security.RoleProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Security.RoleProviderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleProviderCollectionTypeSafeWrapper.Add(System.Web.Security.RoleProvider)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.SiteMapProviderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.SiteMapProviderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.SiteMapProvider"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.SiteMapProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper.#ctor(System.Web.SiteMapProviderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.SiteMapProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.SiteMapProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.SiteMapProviderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapProviderCollectionTypeSafeWrapper.Add(System.Web.SiteMapProvider)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProvider"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PersonalizationProviderCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.WebParts.PersonalizationProvider)">
 <summary>Adds item to collection</summary>
 <param name="item">Item to be added</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.ConstraintCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.ConstraintCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.Constraint"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.ConstraintCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.#ctor(System.Data.ConstraintCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.op_Implicit(System.Data.ConstraintCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.ConstraintCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.ConstraintCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.Add(System.Data.Constraint)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.Remove(System.Data.Constraint)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.Contains(System.Data.Constraint)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ConstraintCollectionTypeSafeWrapper.IndexOf(System.Data.Constraint)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataColumnCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataColumnCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.DataColumn"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.DataColumnCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.#ctor(System.Data.DataColumnCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.op_Implicit(System.Data.DataColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.DataColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.DataColumnCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.Add(System.Data.DataColumn)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.Remove(System.Data.DataColumn)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.Contains(System.Data.DataColumn)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnCollectionTypeSafeWrapper.IndexOf(System.Data.DataColumn)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataRelationCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataRelationCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.DataRelation"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.DataRelationCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.#ctor(System.Data.DataRelationCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.op_Implicit(System.Data.DataRelationCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.DataRelationCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.DataRelationCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.Add(System.Data.DataRelation)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.Remove(System.Data.DataRelation)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.Contains(System.Data.DataRelation)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRelationCollectionTypeSafeWrapper.IndexOf(System.Data.DataRelation)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataRowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataRowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.DataRow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.DataRowCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.#ctor(System.Data.DataRowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.op_Implicit(System.Data.DataRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.DataRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.DataRowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.Add(System.Data.DataRow)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.Remove(System.Data.DataRow)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.Contains(System.Data.DataRow)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataRowCollectionTypeSafeWrapper.IndexOf(System.Data.DataRow)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.DataTableCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.DataTableCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.DataTable"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.DataTableCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.#ctor(System.Data.DataTableCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.op_Implicit(System.Data.DataTableCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.DataTableCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.DataTableCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.Add(System.Data.DataTable)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.Remove(System.Data.DataTable)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.Contains(System.Data.DataTable)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableCollectionTypeSafeWrapper.IndexOf(System.Data.DataTable)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.AccessControl.GenericAcl)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.AccessControl.GenericAcl"/></summary>
 <param name="Collection">A <see cref="T:System.Security.AccessControl.GenericAce"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.AccessControl.GenericAcl"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper.#ctor(System.Security.AccessControl.GenericAcl)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper.op_Implicit(System.Security.AccessControl.GenericAcl)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.AccessControl.GenericAcl"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.AccessControl.GenericAcl"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GenericAclTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.AccessControl.RawAcl)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.AccessControl.RawAcl"/></summary>
 <param name="Collection">A <see cref="T:System.Security.AccessControl.GenericAce"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.AccessControl.RawAcl"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper.#ctor(System.Security.AccessControl.RawAcl)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper.op_Implicit(System.Security.AccessControl.RawAcl)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.AccessControl.RawAcl"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.AccessControl.RawAcl"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RawAclTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.ViewCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.ViewCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.View"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.ViewCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.ViewCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.ViewCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.ViewCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.ViewCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Add(System.Web.UI.WebControls.View)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Remove(System.Web.UI.WebControls.View)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Contains(System.Web.UI.WebControls.View)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.IndexOf(System.Web.UI.WebControls.View)">
 <summary>Gets index at which lies given object</summary>
 <param name="item">Object to search for</param>
 <returns>Index of first occurence of <paramref name="item"/> in collection. If <paramref name="item"/> is not present in collection returns -1.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebViewCollectionTypeSafeWrapper.Insert(System.Int32,System.Web.UI.WebControls.View)">
 <summary>Inserts item into collection at specified index</summary>
 <param name="index">Index to insert item onto</param>
 <param name="item">Item to be inserted</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.BindingsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.BindingsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.Binding"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.BindingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.BindingsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.BindingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.BindingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.BindingsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.BindingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ControlBindingsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ControlBindingsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.Binding"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> as <see cref="T:Tools.CollectionsT.GenericT.IIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ControlBindingsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.Item(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ControlBindingsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ControlBindingsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.Add(System.Windows.Forms.Binding)">
 <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.Remove(System.Windows.Forms.Binding)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlBindingsCollectionTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.Configuration.AdapterDictionary)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.Configuration.AdapterDictionary"/></summary>
 <param name="Collection">A <see cref="T:System.String"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.Configuration.AdapterDictionary"/> as <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexableCollection`2"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper.#ctor(System.Web.Configuration.AdapterDictionary)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper.ItemRO(System.Int32)">
 <summary>Gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>Value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper.op_Implicit(System.Web.Configuration.AdapterDictionary)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.Configuration.AdapterDictionary"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.Configuration.AdapterDictionary"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AdapterDictionaryTypeSafeWrapper.RemoveAt(System.Int32)">
 <summary>Removes item at specified index</summary>
 <param name="Index">Index to remove item at</param>
 <exception cref="T:System.ArgumentException">Index is not valid</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeNamespaceImportCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeNamespaceImport"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeNamespaceImportCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeNamespaceImportCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceImportCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeAttributeArgumentCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeAttributeArgument"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeAttributeArgumentCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeArgumentCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeAttributeDeclarationCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeAttributeDeclaration"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeAttributeDeclarationCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeAttributeDeclarationCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeCatchClauseCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeCatchClauseCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeCatchClause"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeCatchClauseCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeCatchClauseCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeCatchClauseCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeCatchClauseCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeCatchClauseCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCatchClauseCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeCommentStatementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeCommentStatementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeCommentStatement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeCommentStatementCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeCommentStatementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeCommentStatementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeCommentStatementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeCommentStatementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeCommentStatementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeDirectiveCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeDirectiveCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeDirective"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeDirectiveCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeDirectiveCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeDirectiveCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeDirectiveCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeDirectiveCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeDirectiveCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeExpressionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeExpressionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeExpression"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeExpressionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeExpressionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeExpressionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeExpressionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeExpressionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeExpressionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeNamespaceCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeNamespaceCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeNamespace"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeNamespaceCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeNamespaceCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeNamespaceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeNamespaceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeNamespaceCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeNamespaceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeParameterDeclarationExpressionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeParameterDeclarationExpressionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeStatementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeStatementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeStatement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeStatementCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeStatementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeStatementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeStatementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeStatementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeStatementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeTypeDeclarationCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeTypeDeclaration"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeTypeDeclarationCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeDeclarationCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeTypeMemberCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeTypeMemberCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeTypeMember"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeTypeMemberCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeTypeMemberCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeTypeMemberCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeTypeMemberCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeTypeMemberCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeMemberCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeTypeParameterCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeTypeParameterCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeTypeParameter"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeTypeParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeTypeParameterCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeTypeParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeTypeParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeTypeParameterCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.CodeTypeReferenceCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.CodeTypeReference"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.CodeTypeReferenceCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CodeTypeReferenceCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.CodeDom.Compiler.CompilerErrorCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/></summary>
 <param name="Collection">A <see cref="T:System.CodeDom.Compiler.CompilerError"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper.op_Implicit(System.CodeDom.Compiler.CompilerErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CompilerErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.Design.DesignerVerbCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/></summary>
 <param name="Collection">A <see cref="T:System.ComponentModel.Design.DesignerVerb"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper.#ctor(System.ComponentModel.Design.DesignerVerbCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.Design.DesignerVerbCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerVerbCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMapping"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper.#ctor(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper.op_Implicit(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlBulkCopyColumnMappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.CounterCreationDataCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.CounterCreationDataCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Diagnostics.CounterCreationData"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Diagnostics.CounterCreationDataCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper.#ctor(System.Diagnostics.CounterCreationDataCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.CounterCreationDataCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Diagnostics.CounterCreationDataCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Diagnostics.CounterCreationDataCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CounterCreationDataCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.EventLogPermissionEntryCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Diagnostics.EventLogPermissionEntry"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper.#ctor(System.Diagnostics.EventLogPermissionEntryCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.EventLogPermissionEntryCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventLogPermissionEntryCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper.#ctor(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.PerformanceCounterPermissionEntryCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PerformanceCounterPermissionEntryCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.X509Certificates.X509CertificateCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509CertificateCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/></summary>
 <param name="Collection">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper.op_Implicit(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.X509Certificate2CollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.ParserErrorCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.ParserErrorCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.ParserError"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.ParserErrorCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper.#ctor(System.Web.ParserErrorCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper.op_Implicit(System.Web.ParserErrorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.ParserErrorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.ParserErrorCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ParserErrorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.EmbeddedMailObjectsCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.EmbeddedMailObject"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.EmbeddedMailObjectsCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.EmbeddedMailObjectsCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EmbeddedMailObjectsCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.RoleGroupCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.RoleGroup"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.RoleGroupCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.RoleGroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RoleGroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ProxyWebPartConnectionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartConnectionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartConnectionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartConnectionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartConnectionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayMode"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartDisplayModeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WebParts.WebPartTransformerCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformer"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WebParts.WebPartTransformerCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WebParts.WebPartTransformerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebPartTransformerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.LinkTargetCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.LinkTargetCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Documents.LinkTarget"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Documents.LinkTargetCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.LinkTargetCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.LinkTargetCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Documents.LinkTargetCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Documents.LinkTargetCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkTargetCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper.#ctor(System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper.op_Implicit(System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SchemaImporterExtensionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.XmlAnyElementAttributes)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/></summary>
 <param name="Collection">A <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper.#ctor(System.Xml.Serialization.XmlAnyElementAttributes)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper.op_Implicit(System.Xml.Serialization.XmlAnyElementAttributes)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlAnyElementAttributesTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.XmlArrayItemAttributes)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/></summary>
 <param name="Collection">A <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper.#ctor(System.Xml.Serialization.XmlArrayItemAttributes)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper.op_Implicit(System.Xml.Serialization.XmlArrayItemAttributes)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlArrayItemAttributesTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.XmlElementAttributes)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.XmlElementAttributes"/></summary>
 <param name="Collection">A <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Xml.Serialization.XmlElementAttributes"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper.#ctor(System.Xml.Serialization.XmlElementAttributes)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper.op_Implicit(System.Xml.Serialization.XmlElementAttributes)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Xml.Serialization.XmlElementAttributes"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Xml.Serialization.XmlElementAttributes"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlElementAttributesTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Serialization.XmlSchemas)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Serialization.XmlSchemas"/></summary>
 <param name="Collection">A <see cref="T:System.Xml.Schema.XmlSchema"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Xml.Serialization.XmlSchemas"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper.#ctor(System.Xml.Serialization.XmlSchemas)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper.op_Implicit(System.Xml.Serialization.XmlSchemas)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Xml.Serialization.XmlSchemas"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Xml.Serialization.XmlSchemas"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemasTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Xml.Schema.XmlSchemaObjectCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Xml.Schema.XmlSchemaObject"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper.#ctor(System.Xml.Schema.XmlSchemaObjectCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper.op_Implicit(System.Xml.Schema.XmlSchemaObjectCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.XmlSchemaObjectCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Collections.Specialized.StringCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Collections.Specialized.StringCollection"/></summary>
 <param name="Collection">A <see cref="T:System.String"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Collections.Specialized.StringCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper.#ctor(System.Collections.Specialized.StringCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper.op_Implicit(System.Collections.Specialized.StringCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Collections.Specialized.StringCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Collections.Specialized.StringCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StringCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper.#ctor(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DesignerOptionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.EventDescriptorCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.EventDescriptorCollection"/></summary>
 <param name="Collection">A <see cref="T:System.ComponentModel.EventDescriptor"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.ComponentModel.EventDescriptorCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper.#ctor(System.ComponentModel.EventDescriptorCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.EventDescriptorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.ComponentModel.EventDescriptorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.ComponentModel.EventDescriptorCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.EventDescriptorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.ListSortDescriptionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.ComponentModel.ListSortDescription"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper.#ctor(System.ComponentModel.ListSortDescriptionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.ListSortDescriptionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListSortDescriptionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.ComponentModel.PropertyDescriptorCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/></summary>
 <param name="Collection">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper.#ctor(System.ComponentModel.PropertyDescriptorCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper.op_Implicit(System.ComponentModel.PropertyDescriptorCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.PropertyDescriptorCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Common.DataColumnMappingCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Common.DataColumnMappingCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.Common.DataColumnMapping"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.Common.DataColumnMappingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper.#ctor(System.Data.Common.DataColumnMappingCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper.op_Implicit(System.Data.Common.DataColumnMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.Common.DataColumnMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.Common.DataColumnMappingCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataColumnMappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Common.DbParameterCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Common.DbParameterCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.Common.DbParameter"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.Common.DbParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper.#ctor(System.Data.Common.DbParameterCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper.op_Implicit(System.Data.Common.DbParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.Common.DbParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.Common.DbParameterCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DbParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Odbc.OdbcParameterCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Odbc.OdbcParameterCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.Odbc.OdbcParameter"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.Odbc.OdbcParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper.#ctor(System.Data.Odbc.OdbcParameterCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper.op_Implicit(System.Data.Odbc.OdbcParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.Odbc.OdbcParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.Odbc.OdbcParameterCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OdbcParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.OleDb.OleDbParameterCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.OleDb.OleDbParameterCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.OleDb.OleDbParameter"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.OleDb.OleDbParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper.#ctor(System.Data.OleDb.OleDbParameterCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper.op_Implicit(System.Data.OleDb.OleDbParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.OleDb.OleDbParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.OleDb.OleDbParameterCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.OleDbParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.SqlClient.SqlParameterCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.SqlClient.SqlParameterCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.SqlClient.SqlParameter"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.SqlClient.SqlParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper.#ctor(System.Data.SqlClient.SqlParameterCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper.op_Implicit(System.Data.SqlClient.SqlParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.SqlClient.SqlParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.SqlClient.SqlParameterCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SqlParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Data.Common.DataTableMappingCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Data.Common.DataTableMappingCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Data.Common.DataTableMapping"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Data.Common.DataTableMappingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper.#ctor(System.Data.Common.DataTableMappingCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper.op_Implicit(System.Data.Common.DataTableMappingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Data.Common.DataTableMappingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Data.Common.DataTableMappingCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataTableMappingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Diagnostics.TraceListenerCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Diagnostics.TraceListenerCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Diagnostics.TraceListener"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Diagnostics.TraceListenerCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper.#ctor(System.Diagnostics.TraceListenerCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper.op_Implicit(System.Diagnostics.TraceListenerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Diagnostics.TraceListenerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Diagnostics.TraceListenerCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TraceListenerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.SiteMapNodeCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.SiteMapNodeCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.SiteMapNode"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.SiteMapNodeCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper.#ctor(System.Web.SiteMapNodeCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper.op_Implicit(System.Web.SiteMapNodeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.SiteMapNodeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.SiteMapNodeCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SiteMapNodeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.DataControlFieldCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.DataControlField"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.DataControlFieldCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.DataControlFieldCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataControlFieldCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.HotSpotCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.HotSpot"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.HotSpotCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.HotSpotCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.HotSpotCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.MenuItemBindingCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.MenuItemBinding"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.MenuItemBindingCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.MenuItemBindingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemBindingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.MenuItemStyleCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.MenuItemStyle"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.MenuItemStyleCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.MenuItemStyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.ParameterCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.ParameterCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.Parameter"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.ParameterCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.ParameterCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.ParameterCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.ParameterCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.ParameterCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebParameterCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.StyleCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.StyleCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.Style"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.StyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.StyleCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.StyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.StyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.StyleCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.SubMenuStyleCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.SubMenuStyle"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.SubMenuStyleCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.SubMenuStyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SubMenuStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TreeNodeBindingCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.TreeNodeBinding"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TreeNodeBindingCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TreeNodeBindingCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeBindingCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TreeNodeStyleCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.TreeNodeStyle"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TreeNodeStyleCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TreeNodeStyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.ListItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.ListItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.ListItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.ListItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.ListItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.ListItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.ListItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.ListItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebListItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TableCellCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TableCellCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.TableCell"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.TableCellCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TableCellCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TableCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.TableCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.TableCellCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.TableRowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.TableRowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.TableRow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.TableRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.TableRowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.TableRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.TableRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.TableRowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebTableRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Web.UI.WebControls.WizardStepCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Web.UI.WebControls.WizardStep"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper.#ctor(System.Web.UI.WebControls.WizardStepCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper.op_Implicit(System.Web.UI.WebControls.WizardStepCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WizardStepCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Controls.ColumnDefinitionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Controls.ColumnDefinition"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper.#ctor(System.Windows.Controls.ColumnDefinitionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper.op_Implicit(System.Windows.Controls.ColumnDefinitionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.WebColumnDefinitionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Controls.RowDefinitionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Controls.RowDefinitionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Controls.RowDefinition"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Controls.RowDefinitionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper.#ctor(System.Windows.Controls.RowDefinitionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper.op_Implicit(System.Windows.Controls.RowDefinitionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Controls.RowDefinitionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Controls.RowDefinitionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.RowDefinitionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Controls.UIElementCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Controls.UIElementCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.UIElement"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Controls.UIElementCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper.#ctor(System.Windows.Controls.UIElementCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper.op_Implicit(System.Windows.Controls.UIElementCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Controls.UIElementCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Controls.UIElementCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.UIElementCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.TableCellCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.TableCellCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Documents.TableCell"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Documents.TableCellCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.TableCellCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.TableCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Documents.TableCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Documents.TableCellCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.TableColumnCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.TableColumnCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Documents.TableColumn"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Documents.TableColumnCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.TableColumnCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.TableColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Documents.TableColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Documents.TableColumnCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.TableRowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.TableRowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Documents.TableRow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Documents.TableRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.TableRowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.TableRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Documents.TableRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Documents.TableRowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Documents.TableRowGroupCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Documents.TableRowGroupCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Documents.TableRowGroup"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Documents.TableRowGroupCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper.#ctor(System.Windows.Documents.TableRowGroupCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper.op_Implicit(System.Windows.Documents.TableRowGroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Documents.TableRowGroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Documents.TableRowGroupCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableRowGroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.AutoCompleteStringCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/></summary>
 <param name="Collection">A <see cref="T:System.String"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.AutoCompleteStringCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.AutoCompleteStringCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.AutoCompleteStringCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewCellCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewCell"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewCellCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewColumnCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewColumnCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewRowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewRow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewRowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewSelectedCellCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewCell"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewSelectedCellCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewSelectedCellCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedCellCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewSelectedColumnCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewColumn"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewSelectedColumnCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewSelectedColumnCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedColumnCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.DataGridViewSelectedRowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.DataGridViewRow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.DataGridViewSelectedRowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.DataGridViewSelectedRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.DataGridViewSelectedRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.GridColumnStylesCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.DataGridColumnStyle"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.GridColumnStylesCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.GridColumnStylesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridColumnStylesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.GridTableStylesCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.GridTableStylesCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.DataGridTableStyle"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.GridTableStylesCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.GridTableStylesCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.GridTableStylesCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.GridTableStylesCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.GridTableStylesCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GridTableStylesCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.CheckedListBox.CheckedIndexCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.CheckedListBox.CheckedIndexCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.CheckedListBox.CheckedIndexCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxCheckedIndexCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ImageList.ImageCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Drawing.Image"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ImageList.ImageCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ImageList.ImageCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ImageCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.Control.ControlCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.Control.ControlCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.Control"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.Control.ControlCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.Control.ControlCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.Control.ControlCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.Control.ControlCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.Control.ControlCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ControlCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ToolStripItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ToolStripItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.ToolStripItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ToolStripItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ToolStripItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ToolStripItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.ToolStripPanelRow"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolStripPanelRowCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.LinkLabel.LinkCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.LinkLabel.Link"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.LinkLabel.LinkCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.LinkLabel.LinkCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.LinkCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListBox.IntegerCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListBox.IntegerCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListBox.IntegerCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.IntegerCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListBox.SelectedIndexCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListBox.SelectedIndexCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListBox.SelectedIndexCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListBoxSelectedIndexCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.ColumnHeaderCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.ColumnHeader"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.ColumnHeaderCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.ColumnHeaderCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ColumnHeaderCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.CheckedIndexCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.CheckedIndexCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.CheckedIndexCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewCheckedIndexCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.CheckedListViewItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.ListViewItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.CheckedListViewItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.CheckedListViewItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.CheckedListViewItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.ListViewItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.ListViewItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.ListViewItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.ListViewItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.SelectedIndexCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Int32"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.SelectedIndexCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.SelectedIndexCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedIndexCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListView.SelectedListViewItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.ListViewItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListView.SelectedListViewItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListView.SelectedListViewItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.SelectedListViewItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListViewGroupCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListViewGroupCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.ListViewGroup"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListViewGroupCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListViewGroupCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListViewGroupCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListViewGroupCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListViewGroupCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewGroupCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ListViewItem.ListViewSubItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ListViewItem.ListViewSubItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ListViewItem.ListViewSubItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ListViewSubItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.Menu.MenuItemCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.MenuItem"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.Menu.MenuItemCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.Menu.MenuItemCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.MenuItemCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.StatusBar.StatusBarPanelCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.StatusBarPanel"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.StatusBar.StatusBarPanelCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.StatusBar.StatusBarPanelCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.StatusBarPanelCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.TabControl.TabPageCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.TabPage"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.TabControl.TabPageCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.TabControl.TabPageCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TabPageCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.TableLayoutStyleCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.TableLayoutStyle"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.TableLayoutStyleCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.TableLayoutStyleCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TableLayoutStyleCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.ToolBar.ToolBarButtonCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.ToolBarButton"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.ToolBar.ToolBarButtonCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.ToolBar.ToolBarButtonCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ToolBarButtonCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Forms.TreeNodeCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Forms.TreeNodeCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Forms.TreeNode"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Forms.TreeNodeCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper.#ctor(System.Windows.Forms.TreeNodeCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper.op_Implicit(System.Windows.Forms.TreeNodeCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Forms.TreeNodeCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Forms.TreeNodeCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TreeNodeCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.Media.Animation.ThicknessKeyFrameCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrame"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper.#ctor(System.Windows.Media.Animation.ThicknessKeyFrameCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper.op_Implicit(System.Windows.Media.Animation.ThicknessKeyFrameCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.ThicknessKeyFrameCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.GetWrapper(System.Windows.TriggerActionCollection)">
 <summary>Gets type-sfafe wrapper for <see cref="T:System.Windows.TriggerActionCollection"/></summary>
 <param name="Collection">A <see cref="T:System.Windows.TriggerAction"/> to be wrapped</param>
 <returns><see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper"/> that wraps <paramref name="Collection"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper">
 <summary>Wraps <see cref="T:System.Windows.TriggerActionCollection"/> as <see cref="T:System.Collections.Generic.IList`1"/>)"/></summary> 
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper.#ctor(System.Windows.TriggerActionCollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to wrapp</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper.op_Implicit(System.Windows.TriggerActionCollection)~Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper">
 <summary>Converts <see cref="T:System.Windows.TriggerActionCollection"/> to <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper"/></summary>
 <param name="a">A <see cref="T:System.Windows.TriggerActionCollection"/> to be converted</param>
 <returns>A <see cref="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper.TriggerActionCollectionTypeSafeWrapper"/> which wraps <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1">
 <summary>Provides abstract base for implementation of type-unsafe <see cref="T:System.Collections.ICollection"/> to type-safe <see cref="T:System.Collections.Generic.ICollection`1"/> wrappers</summary>
 <typeparam name="T">Type of item of collection</typeparam>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.#ctor(System.Collections.ICollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped. It is responsibility of derived class to pass only such collections whichs items are of type <typeparamref name="T"/> in CTor. No check is done.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Add(`0)">
 <summary>When overriden in derived class adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Clear">
 <summary>When overriden in derived class removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Contains(`0)">
 <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
 <returns>true if 
 <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
 <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
 <remarks>If <see cref="F:Tools.CollectionsT.SpecializedT.SpecializedWrapper.Collection"/> provides way how to determine if it contains specific item it is efficiend to override this method and call use that way.</remarks>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.CopyTo(`0[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="array" /> is multidimensional.-or-
 <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-
 The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-
 Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Count">
 <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.IsReadOnly">
 <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
 <returns>This implementation returns always true.</returns>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Remove(`0)">
 <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
 <returns>true if 
 <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if 
 <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
 <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.Item(System.Int32)">
 <summary>When overridne in derived class gets or sets value on specified index</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
 <exception cref="T:System.NotSupportedException">In setter: The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedWrapper`1.ItemRO(System.Int32)">
 <summary>Gets value on specified index</summary>
 <param name="index">Index to obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1">
 <summary>Provides abstract base for implementation of type-unsafe <see cref="T:System.Collections.ICollection"/> to type-safe <see cref="T:Tools.CollectionsT.GenericT.IReadOnlyIndexable`2"/> wrappers</summary>
 <typeparam name="T">Type of item of collection</typeparam>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.#ctor(System.Collections.ICollection)">
 <summary>CTor</summary>
 <param name="Collection">Collection to be wrapped. It is responsibility of derived class to pass only such collections whichs items are of type <typeparamref name="T"/> in CTor. No check is done.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.UnsafeReadOnlyItem(System.Int32)">
 <summary>Gets or sets value on specified index (type-unsafe)</summary>
 <param name="index">Index to set or obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <value>New value to be stored at specified index</value>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
 <remarks>Uses the <see cref="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.Item(System.Int32)"/> property</remarks>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.ItemRO(System.Int32)">
 <summary>Gets value on specified index</summary>
 <param name="index">Index to obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.Item(System.Int32)">
 <summary>Gets value on specified index</summary>
 <param name="index">Index to obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
 <remarks>This property cannot be overriden, override <see cref="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.ItemRO(System.Int32)"/> instead</remarks>
</member>
<member name="P:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.Count">
 <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
 <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.SpecializedReadOnlyWrapper`1.CopyTo(`0[],System.Int32)">
 <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
 <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
 <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="array" /> is multidimensional.-or-
 <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-
 The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-
 Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.CollectionTools">
 <summary>Extension methods for working with specialized collections</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><list type="bullet">
 <item><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</item>
 <item>Methods Lats(System.Windows.Forms.Control.ControlCollection), Insert(System.Windows.Forms.Control.ControlCollection, System.Int32, System.Windows.Forms.Control) and Replace(System.Windows.Forms.Control.ControlCollection, System.Int32, System.Windows.Forms.Control) moved to <see cref="T:Tools.CollectionsT.SpecializedT.FormsCollectionsExtensions"/> in assembly Tools.Windows.</item>
 </list></version>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Last(System.Collections.BitArray)">
 <summary>Gets last item in <see cref="T:System.Collections.BitArray"/></summary>
 <param name="Collection">Collection to get last item from</param>
 <returns>Last item in <paramref name="Collection"/>, false if <paramref name="Collection"/> is empty.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Last(System.Collections.Specialized.StringCollection)">
 <summary>Gets last <see cref="T:System.String"/> in <see cref="T:System.Collections.Specialized.StringCollection"/></summary>
 <param name="Collection">Collection to get last item from</param>
 <returns>Last item in <paramref name="Collection"/>, null if <paramref name="Collection"/> is empty.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Last(System.ComponentModel.AttributeCollection)">
 <summary>Gets last <see cref="T:System.Attribute"/> in <see cref="T:System.ComponentModel.AttributeCollection"/></summary>
 <param name="Collection">Collection to get last item from</param>
 <returns>Last item in <paramref name="Collection"/>, null if <paramref name="Collection"/> is empty.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.CollectionTools.Import(System.Windows.Forms.ImageList.ImageCollection,System.Windows.Forms.ImageList.ImageCollection)">
 <summary>Imports items from one <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/> to another</summary>
 <param name="Collection">Target collection</param>
 <param name="Other">Source collection; can be null</param>
 <remarks>When key exists in both, <paramref name="Collection"/> and <paramref name="Other"/>, it is skipped</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.SpecializedT.AsTypeSafe">
 <summary>Contains extension methods for getting specialized collections as type-safe generic collections</summary>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Collections.BitArray)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Collections.BitArray"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.AttributeCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.AttributeCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.Design.DesignerCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.Design.DesignerCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataViewSettingCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.DataViewSettingCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Odbc.OdbcErrorCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.Odbc.OdbcErrorCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.OleDb.OleDbErrorCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.OleDb.OleDbErrorCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.SqlClient.SqlErrorCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.SqlClient.SqlErrorCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.EventLogEntryCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.EventLogEntryCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Printing.PrinterSettings.PaperSourceCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSourceCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Printing.PrinterSettings.PaperSizeCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Printing.PrinterSettings.PaperSizeCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Printing.PrinterSettings.PrinterResolutionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.CookieCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Net.CookieCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.AsnEncodedDataCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.OidCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.OidCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.X509Certificates.X509ExtensionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.X509Certificates.X509ChainElementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Permissions.KeyContainerPermissionAccessEntryCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Policy.ApplicationTrustCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.Policy.ApplicationTrustCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Text.RegularExpressions.CaptureCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Text.RegularExpressions.CaptureCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Text.RegularExpressions.GroupCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Text.RegularExpressions.GroupCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Text.RegularExpressions.MatchCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Text.RegularExpressions.MatchCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.ControlCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.ControlCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.HtmlControls.HtmlTableCellCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.HtmlControls.HtmlTableCellCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.HtmlControls.HtmlTableRowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.HtmlControls.HtmlTableRowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.ValidatorCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.ValidatorCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataGridColumnCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataGridColumnCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataGridItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataGridItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataKeyArray)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataKeyArray"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataListItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataListItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DetailsViewRowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DetailsViewRowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.GridViewRowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.GridViewRowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.MenuItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.MenuItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.RepeaterItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.RepeaterItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.SelectedDatesCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.SelectedDatesCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TreeNodeCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TreeNodeCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.GridItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.GridItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.HtmlElementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.HtmlElementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.HtmlWindowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.HtmlWindowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.PropertyGrid.PropertyTabCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.PropertyGrid.PropertyTabCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.WindowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.WindowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.XmlAttributeCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Xml.XmlAttributeCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.ComponentCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.ComponentCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ConfigurationLocationCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ConfigurationLocationCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.ProcessModuleCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.ProcessModuleCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.ProcessThreadCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.ProcessThreadCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Design.CategoryNameCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Design.CategoryNameCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Drawing.Design.ToolboxItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Drawing.Design.ToolboxItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.AccessControl.AuthorizationRuleCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.AccessControl.AuthorizationRuleCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Management.WebBaseEventCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Management.WebBaseEventCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.CatalogPartCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.CatalogPartCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.EditorPartCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.TransformerTypeCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.TransformerTypeCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartVerbCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerbCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartZoneCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartZoneCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.FormCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.FormCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.InputLanguageCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.InputLanguageCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ConfigurationSectionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ConfigurationSectionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ConfigurationSectionGroupCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ConfigurationSectionGroupCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.VirtualDirectoryMappingCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.VirtualDirectoryMappingCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.HttpCookieCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.HttpCookieCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.HttpFileCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.HttpFileCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.HttpModuleCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.HttpModuleCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ConnectionStringSettingsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ConnectionStringSettingsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ProviderSettingsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ProviderSettingsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.Configuration.AuthenticationModuleElementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.Configuration.BypassElementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Net.Configuration.BypassElementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.Configuration.ConnectionManagementElementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Net.Configuration.WebRequestModuleElementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.AssemblyCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.AssemblyCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.AuthorizationRuleCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.AuthorizationRuleCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.BufferModesCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.BufferModesCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.BuildProviderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.BuildProviderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ClientTargetCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ClientTargetCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.CodeSubDirectoriesCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.CodeSubDirectoriesCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.CompilerCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.CompilerCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.CustomErrorCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.CustomErrorCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.EventMappingSettingsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.EventMappingSettingsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ExpressionBuilderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ExpressionBuilderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.FormsAuthenticationUserCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.FormsAuthenticationUserCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.HttpHandlerActionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.HttpHandlerActionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.HttpModuleActionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.HttpModuleActionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.NamespaceCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.NamespaceCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.OutputCacheProfileCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.OutputCacheProfileCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ProfileGroupSettingsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ProfileGroupSettingsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ProfilePropertySettingsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ProfilePropertySettingsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ProfileSettingsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ProfileSettingsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.ProtocolCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.ProtocolCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.RuleSettingsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.RuleSettingsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.SqlCacheDependencyDatabaseCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.SqlCacheDependencyDatabaseCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.TagMapCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.TagMapCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.TagPrefixCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.TagPrefixCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.TransformerInfoCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.TransformerInfoCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.TrustLevelCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.TrustLevelCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.UrlMappingCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.UrlMappingCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.ProtectedConfigurationProviderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Configuration.ProtectedConfigurationProviderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Configuration.SettingsProviderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Configuration.SettingsProviderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Profile.ProfileProviderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Profile.ProfileProviderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Security.MembershipProviderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Security.MembershipProviderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Security.RoleProviderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Security.RoleProviderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.SiteMapProviderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.SiteMapProviderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.ConstraintCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.ConstraintCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataColumnCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.DataColumnCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataRelationCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.DataRelationCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataRowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.DataRowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.DataTableCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.DataTableCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.AccessControl.GenericAcl)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.AccessControl.GenericAcl"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.AccessControl.RawAcl)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.AccessControl.RawAcl"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.ViewCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.ViewCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.BindingsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.BindingsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ControlBindingsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ControlBindingsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.Configuration.AdapterDictionary)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.Configuration.AdapterDictionary"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeNamespaceImportCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeNamespaceImportCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeAttributeArgumentCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeAttributeArgumentCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeAttributeDeclarationCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeCatchClauseCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeCatchClauseCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeCommentStatementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeCommentStatementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeDirectiveCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeDirectiveCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeExpressionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeExpressionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeNamespaceCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeNamespaceCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeStatementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeStatementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeTypeDeclarationCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeTypeDeclarationCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeTypeMemberCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeTypeMemberCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeTypeParameterCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeTypeParameterCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.CodeTypeReferenceCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.CodeTypeReferenceCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.CodeDom.Compiler.CompilerErrorCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.Design.DesignerVerbCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.Design.DesignerVerbCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.SqlClient.SqlBulkCopyColumnMappingCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.CounterCreationDataCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.CounterCreationDataCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.EventLogPermissionEntryCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.ParserErrorCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.ParserErrorCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.EmbeddedMailObjectsCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.EmbeddedMailObjectsCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.RoleGroupCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.RoleGroupCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartConnectionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartConnectionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WebParts.WebPartTransformerCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WebParts.WebPartTransformerCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.LinkTargetCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.LinkTargetCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.XmlAnyElementAttributes)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.XmlArrayItemAttributes)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.XmlElementAttributes)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.XmlElementAttributes"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Serialization.XmlSchemas)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Xml.Serialization.XmlSchemas"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Xml.Schema.XmlSchemaObjectCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Collections.Specialized.StringCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Collections.Specialized.StringCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.EventDescriptorCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.EventDescriptorCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.ListSortDescriptionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.ListSortDescriptionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.ComponentModel.PropertyDescriptorCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Common.DataColumnMappingCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.Common.DataColumnMappingCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Common.DbParameterCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.Common.DbParameterCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Odbc.OdbcParameterCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.Odbc.OdbcParameterCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.OleDb.OleDbParameterCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.OleDb.OleDbParameterCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.SqlClient.SqlParameterCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.SqlClient.SqlParameterCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Data.Common.DataTableMappingCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Data.Common.DataTableMappingCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Diagnostics.TraceListenerCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Diagnostics.TraceListenerCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.SiteMapNodeCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.SiteMapNodeCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.DataControlFieldCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.DataControlFieldCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.HotSpotCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.HotSpotCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.MenuItemBindingCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.MenuItemBindingCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.MenuItemStyleCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.MenuItemStyleCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.ParameterCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.ParameterCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.StyleCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.StyleCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.SubMenuStyleCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.SubMenuStyleCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TreeNodeBindingCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TreeNodeBindingCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TreeNodeStyleCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TreeNodeStyleCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.ListItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.ListItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TableCellCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TableCellCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.TableRowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.TableRowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Web.UI.WebControls.WizardStepCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Web.UI.WebControls.WizardStepCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Controls.ColumnDefinitionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Controls.ColumnDefinitionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Controls.RowDefinitionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Controls.RowDefinitionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Controls.UIElementCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Controls.UIElementCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.TableCellCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.TableCellCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.TableColumnCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.TableColumnCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.TableRowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.TableRowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Documents.TableRowGroupCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Documents.TableRowGroupCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.AutoCompleteStringCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.AutoCompleteStringCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewCellCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewCellCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewColumnCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewColumnCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewRowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewRowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewSelectedCellCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewSelectedCellCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewSelectedColumnCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewSelectedColumnCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.DataGridViewSelectedRowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.DataGridViewSelectedRowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.GridColumnStylesCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.GridColumnStylesCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.GridTableStylesCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.GridTableStylesCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.CheckedListBox.CheckedIndexCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.CheckedListBox.CheckedIndexCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ImageList.ImageCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ImageList.ImageCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.Control.ControlCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.Control.ControlCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ToolStripItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ToolStripItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ToolStripPanel.ToolStripPanelRowCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.LinkLabel.LinkCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.LinkLabel.LinkCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListBox.IntegerCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListBox.IntegerCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListBox.SelectedIndexCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.ColumnHeaderCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.CheckedIndexCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.CheckedListViewItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.ListViewItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.SelectedIndexCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListView.SelectedListViewItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListViewGroupCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListViewGroupCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ListViewItem.ListViewSubItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.Menu.MenuItemCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.Menu.MenuItemCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.StatusBar.StatusBarPanelCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.StatusBar.StatusBarPanelCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.TabControl.TabPageCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.TabControl.TabPageCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.TableLayoutStyleCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.TableLayoutStyleCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.ToolBar.ToolBarButtonCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Forms.TreeNodeCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Forms.TreeNodeCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.Media.Animation.ThicknessKeyFrameCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.Media.Animation.ThicknessKeyFrameCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.SpecializedT.AsTypeSafe.AsTypeSafe(System.Windows.TriggerActionCollection)">
 <summary>Gets type-safe wrapper of <see cref="T:System.Windows.TriggerActionCollection"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="T:Tools.CollectionsT.CollectionTools">
 <summary>Extension methods for working with type-unsafe collections</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.CollectionsT.CollectionTools.Last(System.Collections.IEnumerable)">
 <summary>Gets last item in collection</summary>
 <param name="Collection">Collection to obtain item from</param>
 <returns>Last item in <paramref name="Collection"/>, or null if <paramref name="Collection"/> is empty</returns>
 <remarks>This function have to iterate through whole <paramref name="Collection"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>                                 
</member>
<member name="M:Tools.CollectionsT.CollectionTools.Last(System.Collections.IList)">
 <summary>Gets last item in collection</summary>
 <param name="Collection">Collection to obtain item from</param>
 <returns>Last item in <paramref name="Collection"/> (item at highest index), or null if <paramref name="Collection"/> is empty</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> is null</exception>
</member>
<member name="M:Tools.CollectionsT.CollectionTools.IsEmpty(System.Collections.IEnumerable)">
 <summary>Gets value indicationg if given colection is empty</summary>
 <param name="collection">Collection to examine</param>
 <returns>True if <paramref name="collection"/>.<see cref="M:System.Collections.IEnumerable.GetEnumerator">GetEnumerator</see>.<see cref="M:System.Collections.IEnumerator.MoveNext">MoveNext</see> returns false.</returns>
</member>
<member name="T:Tools.ComponentModelT.CancelMessageEventArgs">
 <summary><see cref="T:System.ComponentModel.CancelEventArgs"/> with message witn reason for cancellation</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Beta"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.ComponentModelT.CancelMessageEventArgs._CancelMessage">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.CancelMessageEventArgs.CancelMessage"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.CancelMessageEventArgs.CancelMessage">
 <summary>Human readabele cancel reason reported to source of the event"</summary>
</member>
<member name="T:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase">
 <summary>Provides abstract base class for custom type descriptors</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
 <summary>CTor with parent custom type descriptor</summary>
 <param name="parent">The parent custom type descriptor.</param>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetAttributes">
 <summary>Returns a collection of custom attributes for the type represented by this type descriptor.</summary>
 <returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for the type.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetClassName">
 <summary>Returns the fully qualified name of the class represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.String" /> containing the fully qualified class name of the type this type descriptor is describing. The default is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetComponentName">
 <summary>Returns the name of the class represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.String" /> containing the name of the component instance this type descriptor is describing. The default is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetConverter">
 <summary>Returns a type converter for the type represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> for the type represented by this type descriptor. The default is a newly created <see cref="T:System.ComponentModel.TypeConverter" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetDefaultEvent">
 <summary>Returns the event descriptor for the default event of the object represented by this type descriptor.</summary>
 <returns>The <see cref="T:System.ComponentModel.EventDescriptor" /> for the default event on the object represented by this type descriptor. The default is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetDefaultProperty">
 <summary>Returns the property descriptor for the default property of the object represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the default property on the object represented by this type descriptor. The default is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetEditor(System.Type)">
 <summary>Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.</summary>
 <returns>An editor of the given type that is to be associated with the class represented by this type descriptor. The default is null.</returns>
 <param name="editorBaseType">The base type of the editor to retrieve.</param>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetEvents">
 <summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
 <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetEvents(System.Attribute[])">
 <summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
 <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetProperties">
 <summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetProperties(System.Attribute[])">
 <summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorAbstractBase.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
 <summary>Returns an object that contains the property described by the specified property descriptor.</summary>
 <returns>An <see cref="T:System.Object" /> that owns the given property specified by the type descriptor. The default is null.</returns>
 <param name="pd">The property descriptor for which to retrieve the owning object.</param>
</member>
<member name="T:Tools.ComponentModelT.CustomTypeDescriptorBase`1">
 <summary>Provides base class for "top-level" custom type descriptors</summary>
 <remarks>All method in this class, if not overriden in derived class, uses <see cref="T:System.ComponentModel.TypeDescriptor"/> to obtain information about instance.</remarks>
 <typeparam name="T">Type the descriptor is implemented for. Use <see cref="T:System.Object"/> to create univarsal one.</typeparam>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.ComponentModelT.CustomTypeDescriptorBase`1._instance">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.CustomTypeDescriptorBase`1.Instance"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.CustomTypeDescriptorBase`1.Instance">
 <summary>Instance of type <typeparamref name="T"/> described by this instance of <see cref="T:Tools.ComponentModelT.CustomTypeDescriptorBase`1"/></summary>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.#ctor(`0)">
 <summary>CTor</summary>
 <param name="instance">Instance to be described</param>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetAttributes">
 <summary>Returns a collection of custom attributes for the type represented by this type descriptor.</summary>
 <returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for the type.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetClassName">
 <summary>Returns the fully qualified name of the class represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.String" /> containing the fully qualified class name of the type this type descriptor is describing. The default is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetComponentName">
 <summary>Returns the name of the class represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.String" /> containing the name of the component instance this type descriptor is describing. The default is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetConverter">
 <summary>Returns a type converter for the type represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> for the type represented by this type descriptor. The default is a newly created <see cref="T:System.ComponentModel.TypeConverter" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetDefaultEvent">
 <summary>Returns the event descriptor for the default event of the object represented by this type descriptor.</summary>
 <returns>The <see cref="T:System.ComponentModel.EventDescriptor" /> for the default event on the object represented by this type descriptor. The default is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetDefaultProperty">
 <summary>Returns the property descriptor for the default property of the object represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> for the default property on the object represented by this type descriptor. The default is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetEditor(System.Type)">
 <summary>Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.</summary>
 <returns>An editor of the given type that is to be associated with the class represented by this type descriptor. The default is null.</returns>
 <param name="editorBaseType">The base type of the editor to retrieve.</param>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetEvents">
 <summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
 <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetEvents(System.Attribute[])">
 <summary>Returns a collection of event descriptors for the object represented by this type descriptor.</summary>
 <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> containing the event descriptors for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetProperties">
 <summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetProperties(System.Attribute[])">
 <summary>Returns a collection of property descriptors for the object represented by this type descriptor.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
</member>
<member name="M:Tools.ComponentModelT.CustomTypeDescriptorBase`1.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
 <summary>Returns an object that contains the property described by the specified property descriptor.</summary>
 <returns>An <see cref="T:System.Object" /> that owns the given property specified by the type descriptor. The default is null.</returns>
 <param name="pd">The property descriptor for which to retrieve the owning object.</param>
</member>
<member name="T:Tools.ComponentModelT.FieldDisplayNameAttribute">
 <summary><see cref="T:System.ComponentModel.DisplayNameAttribute"/> that can be applied on fields</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.FieldDisplayNameAttribute.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.ComponentModelT.FieldDisplayNameAttribute.#ctor(System.String)">
 <summary>CTor</summary>
 <param name="displayName">The display name.</param>
</member>
<member name="T:Tools.ComponentModelT.ExceptionEventArgs">
 <summary>Event arguments carrying <see cref="P:Tools.ComponentModelT.ExceptionEventArgs.Exception"/></summary>
</member>
<member name="F:Tools.ComponentModelT.ExceptionEventArgs._Exception">
 <summary>Contains value of the <see cref="T:System.Exception"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.ExceptionEventArgs.Exception">
 <summary>Gtes the <see cref="T:System.Exception"/> carried by this instance</summary>
</member>
<member name="M:Tools.ComponentModelT.ExceptionEventArgs.#ctor(System.Exception)">
 <summary>CTor from <see cref="T:System.Exception"/></summary>
 <param name="Exception"><see cref="T:System.Exception"/> to carry</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.ExceptionEventArgs.#ctor(System.Exception,System.Xml.Schema.XmlSeverityType)">
 <summary>CTor from <see cref="T:System.Exception"/> and <see cref="T:System.Xml.Schema.XmlSeverityType"/></summary>
 <param name="Exception"><see cref="T:System.Exception"/> to carry</param>
 <param name="Severity">Severity (level) of the exception</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
</member>
<member name="F:Tools.ComponentModelT.ExceptionEventArgs._Severity">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.ExceptionEventArgs.Severity"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.ExceptionEventArgs.Severity">
 <summary>gets severity (level) of the exception</summary>
 <remarks>Default value is <see cref="F:System.Xml.Schema.XmlSeverityType.Error"/></remarks>
</member>
<member name="T:Tools.ComponentModelT.ExceptionEventArgs`1">
 <summary>Type-safe implementation of <see cref="T:Tools.ComponentModelT.ExceptionEventArgs"/></summary>
 <typeparam name="T">Type of <see cref="P:Tools.ComponentModelT.ExceptionEventArgs`1.Exception"/> carried</typeparam>
</member>
<member name="M:Tools.ComponentModelT.ExceptionEventArgs`1.#ctor(`0)">
 <summary>CTor from <typeparamref name="T"/></summary>
 <param name="Exception"><typeparamref name="T"/> to carry</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.ExceptionEventArgs`1.#ctor(`0,System.Xml.Schema.XmlSeverityType)">
 <summary>CTor from <typeparamref name="T"/> and <see cref="T:System.Xml.Schema.XmlSeverityType"/></summary>
 <param name="Exception"><typeparamref name="T"/> to carry</param>
 <param name="Severity">Severity (level) of the exception</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
</member>
<member name="P:Tools.ComponentModelT.ExceptionEventArgs`1.Exception">
 <summary>Gtes the <typeparamref name="T"/> carried by this instance</summary>
</member>
<member name="T:Tools.ComponentModelT.RecoveryExceptionEventArgs">
 <summary>Event arguments to carry exception with possibility to let the consumer to decide to ignore the exception</summary>
</member>
<member name="F:Tools.ComponentModelT.RecoveryExceptionEventArgs._Recover">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover">
 <summary>Gets or sets value indicating if callee (sender) of the event should recover the exception</summary>
 <remarks>Default value is false, but this can be changed by the callee.</remarks>
</member>
<member name="M:Tools.ComponentModelT.RecoveryExceptionEventArgs.#ctor(System.Exception)">
 <summary>CTor from <see cref="T:System.Exception"/></summary>
 <param name="Exception"><see cref="T:System.Exception"/> to carry</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.RecoveryExceptionEventArgs.#ctor(System.Exception,System.Xml.Schema.XmlSeverityType)">
 <summary>CTor from <see cref="T:System.Exception"/> and <see cref="T:System.Xml.Schema.XmlSeverityType"/></summary>
 <param name="Exception"><see cref="T:System.Exception"/> to carry</param>
 <param name="Severity">Severity (level) of the exception</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
 <remarks>Using this constructor the value of the <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property is set to trie when <paramref name="Severity"/> is <see cref="F:System.Xml.Schema.XmlSeverityType.Warning"/> or any value greater than or equal to 100</remarks>
</member>
<member name="M:Tools.ComponentModelT.RecoveryExceptionEventArgs.#ctor(System.Exception,System.Boolean)">
 <summary>CTor from <see cref="T:System.Exception"/> and <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property value</summary>
 <param name="Exception"><see cref="T:System.Exception"/> to carry</param>
 <param name="Recover">Indicates initial value of the <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property (true to recover the error, false to throw <see cref="T:System.Exception"/>)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.RecoveryExceptionEventArgs.#ctor(System.Exception,System.Xml.Schema.XmlSeverityType,System.Boolean)">
 <summary>Ctor from <see cref="T:System.Exception"/>, <see cref="T:System.Xml.Schema.XmlSeverityType"/> and <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property</summary>
 <param name="Exception"><see cref="T:System.Exception"/> to carry</param>
 <param name="Recover">Indicates initial value of the <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property (true to recover the error, false to throw <see cref="T:System.Exception"/>)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
 <param name="Severity">Severity (level) of the exception</param>
</member>
<member name="T:Tools.ComponentModelT.RecoveryExceptionEventArgs`1">
 <summary>Type-safe implementation of <see cref="T:Tools.ComponentModelT.RecoveryExceptionEventArgs"/></summary>
</member>
<member name="P:Tools.ComponentModelT.RecoveryExceptionEventArgs`1.Exception">
 <summary>Gtes the <typeparamref name="T"/> carried by this instance</summary>
</member>
<member name="M:Tools.ComponentModelT.RecoveryExceptionEventArgs`1.#ctor(`0)">
 <summary>CTor from <typeparamref name="T"/></summary>
 <param name="Exception"><typeparamref name="T"/> to carry</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.RecoveryExceptionEventArgs`1.#ctor(`0,System.Xml.Schema.XmlSeverityType)">
 <summary>CTor from <typeparamref name="T"/> and <see cref="P:Tools.ComponentModelT.ExceptionEventArgs.Severity"/></summary>
 <param name="Exception"><typeparamref name="T"/> to carry</param>
 <param name="Severity">Severity (level) of the exception</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
 <remarks>Using this constructor the value of the <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property is set to trie when <paramref name="Severity"/> is <see cref="F:System.Xml.Schema.XmlSeverityType.Warning"/> or any value greater than or equal to 100</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.RecoveryExceptionEventArgs`1.#ctor(`0,System.Boolean)">
 <summary>CTor from <typeparamref name="T"/> and <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property value</summary>
 <param name="Exception"><typeparamref name="T"/> to carry</param>
 <param name="Recover">Indicates initial value of the <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property (true to recover the error, false to throw <see cref="T:System.Exception"/>)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.RecoveryExceptionEventArgs`1.#ctor(`0,System.Xml.Schema.XmlSeverityType,System.Boolean)">
 <summary>Ctor from <typeparamref name="T"/>, <see cref="T:System.Xml.Schema.XmlSeverityType"/> and <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property</summary>
 <param name="Exception"><typeparamref name="T"/> to carry</param>
 <param name="Recover">Indicates initial value of the <see cref="P:Tools.ComponentModelT.RecoveryExceptionEventArgs.Recover"/> property (true to recover the error, false to throw <see cref="T:System.Exception"/>)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> is null</exception>
 <param name="Severity">Severity (level) of the exception</param>
</member>
<member name="T:Tools.ComponentModelT.IXmlNodeWrapper">
 <summary>Provides an interface for objects that are wrappers around XML nodes (based on <see cref="N:System.Xml"/>)</summary>
 <version version="1.5.4">This interface is new in version 1.5.4</version>
</member>
<member name="P:Tools.ComponentModelT.IXmlNodeWrapper.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="T:Tools.ComponentModelT.IXNodeWrapper">
 <summary>Provides an interface for objects that are wrappers around XML nodes (based on <see cref="N:System.Xml.Linq"/>)</summary>
 <version version="1.5.4">This interface is new in version 1.5.4</version>
</member>
<member name="P:Tools.ComponentModelT.IXNodeWrapper.Node">
 <summary>Gets node this instance wraps</summary>
</member>
<member name="T:Tools.ComponentModelT.IXmlElementWrapper">
 <summary>Provides an interface for objects that are wrappers around XML element (based on <see cref="N:System.Xml"/>)</summary>
 <version version="1.5.4">This interface is new in version 1.5.4</version>
</member>
<member name="P:Tools.ComponentModelT.IXmlElementWrapper.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="T:Tools.ComponentModelT.IXElementWrapper">
 <summary>Provides an interface for objects that are wrappers around XML element (based on <see cref="N:System.Xml.Linq"/>)</summary>
 <version version="1.5.4">This interface is new in version 1.5.4</version>
</member>
<member name="P:Tools.ComponentModelT.IXElementWrapper.Element">
 <summary>Gets XML element this instance wraps</summary>
</member>
<member name="T:Tools.ComponentModelT.IXmlDocumentWrapper">
 <summary>Provides an interface for objects that are wrappers around XML document (based on <see cref="N:System.Xml"/>)</summary>
 <version version="1.5.4">This interface is new in version 1.5.4</version>
</member>
<member name="P:Tools.ComponentModelT.IXmlDocumentWrapper.Document">
 <summary>Gets XML document this instance wraps</summary>
</member>
<member name="T:Tools.ComponentModelT.IXDocumentWrapper">
 <summary>Provides an interface for objects that are wrappers around XML document (based on <see cref="N:System.Xml.Linq"/>)</summary>
 <version version="1.5.4">This interface is new in version 1.5.4</version>
</member>
<member name="P:Tools.ComponentModelT.IXDocumentWrapper.Document">
 <summary>Gets XML document this instance wraps</summary>
</member>
<member name="T:Tools.ComponentModelT.XmlNodeWrapper">
 <summary>Simple implementation of <see cref="T:Tools.ComponentModelT.IXmlNodeWrapper"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ComponentModelT.XmlNodeWrapper.#ctor(System.Xml.XmlNode)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.ComponentModelT.XmlNodeWrapper"/> class</summary>
 <param name="node">The <see cref="T:System.Xml.XmlNode"/> to wrap</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is null</exception>
</member>
<member name="P:Tools.ComponentModelT.XmlNodeWrapper.Node">
 <summary>Gets the <see cref="T:System.Xml.XmlNode"/> wrapped by this instance</summary>
</member>
<member name="T:Tools.ComponentModelT.XNodeWrapper">
 <summary>Simple implementation of <see cref="T:Tools.ComponentModelT.IXNodeWrapper"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ComponentModelT.XNodeWrapper.#ctor(System.Xml.Linq.XNode)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.ComponentModelT.XNodeWrapper"/> class</summary>
 <param name="node">The <see cref="T:System.Xml.Linq.XNode"/> to wrap</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is null</exception>
</member>
<member name="P:Tools.ComponentModelT.XNodeWrapper.Node">
 <summary>Gets the <see cref="T:System.Xml.Linq.XNode"/> wrapped by this instance</summary>
</member>
<member name="T:Tools.ComponentModelT.XmlElementWrapper">
 <summary>Simple implementation of <see cref="T:Tools.ComponentModelT.IXmlElementWrapper"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ComponentModelT.XmlElementWrapper.#ctor(System.Xml.XmlElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.ComponentModelT.XmlElementWrapper"/> class</summary>
 <param name="element">The <see cref="T:System.Xml.XmlElement"/> to wrap</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
</member>
<member name="P:Tools.ComponentModelT.XmlElementWrapper.Element">
 <summary>Gets the <see cref="T:System.Xml.XmlElement"/> wrapped by this instance</summary>
</member>
<member name="T:Tools.ComponentModelT.XElementWrapper">
 <summary>Simple implementation of <see cref="T:Tools.ComponentModelT.IXElementWrapper"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ComponentModelT.XElementWrapper.#ctor(System.Xml.Linq.XElement)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.ComponentModelT.XElementWrapper"/> class</summary>
 <param name="element">The <see cref="T:System.Xml.Linq.XElement"/> to wrap</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="element"/> is null</exception>
</member>
<member name="P:Tools.ComponentModelT.XElementWrapper.Element">
 <summary>Gets the <see cref="T:System.Xml.Linq.XElement"/> wrapped by this instance</summary>
</member>
<member name="T:Tools.ComponentModelT.XmlDocumentWrapper">
 <summary>Simple implementation of <see cref="T:Tools.ComponentModelT.IXmlDocumentWrapper"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ComponentModelT.XmlDocumentWrapper.#ctor(System.Xml.XmlDocument)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.ComponentModelT.XmlDocumentWrapper"/> class</summary>
 <param name="document">The <see cref="T:System.Xml.XmlDocument"/> to wrap</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="document"/> is null</exception>
</member>
<member name="P:Tools.ComponentModelT.XmlDocumentWrapper.Document">
 <summary>Gets the <see cref="T:System.Xml.XmlDocument"/> wrapped by this instance</summary>
</member>
<member name="T:Tools.ComponentModelT.XDocumentWrapper">
 <summary>Simple implementation of <see cref="T:Tools.ComponentModelT.IXDocumentWrapper"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ComponentModelT.XDocumentWrapper.#ctor(System.Xml.Linq.XDocument)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.ComponentModelT.XDocumentWrapper"/> class</summary>
 <param name="document">The <see cref="T:System.Xml.Linq.XDocument"/> to wrap</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="document"/> is null</exception>
</member>
<member name="P:Tools.ComponentModelT.XDocumentWrapper.Document">
 <summary>Gets the <see cref="T:System.Xml.Linq.XDocument"/> wrapped by this instance</summary>
</member>
<member name="T:Tools.ComponentModelT.PropertyChangingEventArgsEx">
 <summary>Extends <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> by adding the <see cref="P:Tools.ComponentModelT.PropertyChangingEventArgsEx.ProposedNewValue"/> property</summary>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.ComponentModelT.PropertyChangingEventArgsEx.#ctor(System.String,System.Object)">
 <summary>Initializes a new instance of the <see cref="T:Tools.ComponentModelT.PropertyChangingEventArgsEx" /> class.</summary>
 <param name="propertyName">The name of the property whose value is changing.</param>
 <param name="proposedNewValue">Proposed new value of the property</param>
</member>
<member name="P:Tools.ComponentModelT.PropertyChangingEventArgsEx.ProposedNewValue">
 <summary>Gets proposed new value of the property</summary>
</member>
<member name="T:Tools.ComponentModelT.PropertyChangingEventArgsEx`1">
 <summary>Type-safe version of the <see cref="T:Tools.ComponentModelT.PropertyChangingEventArgsEx"/> class</summary>
 <version version="1.5.3" stage="Nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.ComponentModelT.PropertyChangingEventArgsEx`1.#ctor(System.String,`0)">
 <summary>Initializes a new instance of the <see cref="T:Tools.ComponentModelT.PropertyChangingEventArgsEx`1" /> class.</summary>
 <param name="propertyName">The name of the property whose value is changing.</param>
 <param name="proposedNewValue">Proposed new value of the property</param>
</member>
<member name="P:Tools.ComponentModelT.PropertyChangingEventArgsEx`1.ProposedNewValue">
 <summary>Gets proposed new value of the property</summary>
</member>
<member name="T:Tools.ComponentModelT.ValueContainer`1">
 <summary>Implements changeable singleto with <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> support</summary>
 <typeparam name="T">Type of value stored in singleton container</typeparam>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.#ctor">
 <summary>CTor - initalized a new instance of the <see cref="T:Tools.ComponentModelT.ValueContainer`1"/> class with default value of type <typeparamref name="T"/>.</summary>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.#ctor(`0)">
 <summary>CTor - initializes a new instance of the <see cref="T:Tools.ComponentModelT.ValueContainer`1"/> class with given value</summary>
 <param name="value">Value to be stored within new singleton container</param>
</member>
<member name="P:Tools.ComponentModelT.ValueContainer`1.Value">
 <summary>gets or sest value stored in this singleton container</summary>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
 <summary>Raises the <see cref="E:Tools.ComponentModelT.ValueContainer`1.PropertyChanged"/> event</summary>
</member>
<member name="E:Tools.ComponentModelT.ValueContainer`1.PropertyChanged">
 <summary>Occurs when a property value changes.</summary>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.IStructuralComparable_CompareTo(System.Object,System.Collections.IComparer)">
 <summary>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</summary>
 <returns>An integer that indicates the relationship of the current collection object to <paramref name="other" />, as shown in the following table.
 <list type="table"><listheader><term>Return value</term><description>Description</description></listheader>
 <item><term>-1</term><description>The current instance precedes <paramref name="other" />.</description></item>
 <item><term>0</term><description>The current instance and <paramref name="other" /> are equal.</description></item>
 <item><term>1</term><description>The current instance follows <paramref name="other" />.</description></item></list></returns>
 <param name="other">The object to compare with the current instance.</param>
 <param name="comparer">An object that compares members of the current collection object with the corresponding members of <paramref name="other" />.</param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="other"/> is neither of type <typeparamref name="T"/> nor <see cref="T:System.Tuple`1"/> nor <see cref="T:Tools.ComponentModelT.ValueContainer`1"/>.</exception>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.IStructuralEquatable_Equals(System.Object,System.Collections.IEqualityComparer)">
 <summary>Determines whether an object is structurally equal to the current instance.</summary>
 <returns>true if the two objects are equal; otherwise, false.</returns>
 <param name="other">The object to compare with the current instance.</param>
 <param name="comparer">An object that determines whether the current instance and <paramref name="other" /> are equal. </param>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.IStructuralEquatable_GetHashCode(System.Collections.IEqualityComparer)">
 <summary>Returns a hash code for the current instance.</summary>
 <returns>The hash code for the current instance.</returns>
 <param name="comparer">An object that computes the hash code of the current object.</param>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.IComparable_CompareTo(System.Object)">
 <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
 <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
 Value Meaning Less than zero This instance is less than <paramref name="obj" />.
 Zero This instance is equal to <paramref name="obj" />.
 Greater than zero This instance is greater than <paramref name="obj" />. </returns>
 <param name="obj">An object to compare with this instance. </param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="other"/> is neither of type <typeparamref name="T"/> nor <see cref="T:System.Tuple`1"/> nor <see cref="T:Tools.ComponentModelT.ValueContainer`1"/>.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.GetHashCode">
 <summary>Serves as a hash function for a particular type. </summary>
 <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.op_Implicit(Tools.ComponentModelT.ValueContainer{`0})~`0">
 <summary>Converts value of type <see cref="T:Tools.ComponentModelT.ValueContainer`1"/> to <typeparamref name="T"/></summary>
 <param name="a">A value to be converted</param>
 <returns><paramref name="a"/>.<see cref="P:Tools.ComponentModelT.ValueContainer`1.Value">Value</see>. Default value of type <typeparamref name="T"/> when <paramref name="a"/> is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.op_Implicit(Tools.ComponentModelT.ValueContainer{`0})~System.Tuple{`0}">
 <summary>Converts value of type <see cref="T:Tools.ComponentModelT.ValueContainer`1"/> to type <see cref="T:System.Tuple`1"/></summary>
 <param name="a">A value to be converted</param>
 <returns>A new instance of <see cref="T:System.Tuple`1"/> initialized with <paramref name="a"/>.<see cref="P:Tools.ComponentModelT.ValueContainer`1.Value">Value</see>. Null when <paramref name="a"/> is null.</returns>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.op_Implicit(`0)~Tools.ComponentModelT.ValueContainer{`0}">
 <summary>Converts value of type <typeparamref name="T"/> to <see cref="T:Tools.ComponentModelT.ValueContainer`1"/></summary>
 <param name="a">A value to be converted</param>
 <returns>A new instance of <see cref="T:Tools.ComponentModelT.ValueContainer`1"/> initialized with <paramref name="a"/></returns>
</member>
<member name="M:Tools.ComponentModelT.ValueContainer`1.op_Implicit(System.Tuple{`0})~Tools.ComponentModelT.ValueContainer{`0}">
 <summary>Converts value of type <see cref="T:System.Tuple`1"/> to <see cref="T:Tools.ComponentModelT.ValueContainer`1"/></summary>
 <param name="a">A value to be converted</param>
 <returns>A new instance of <see cref="T:Tools.ComponentModelT.ValueContainer`1"/> initialized with <paramref name="a"/>.<see cref="P:System.Tuple`1.Item1">Item1</see></returns>
</member>
<member name="T:Tools.ComponentModelT.Wrapper`1">
 <summary>Implements generic wrapper class</summary>
 <typeparam name="T">Type of object to wrap</typeparam>
 <version version="1.5.4">This clkass is new in version 1.5.4</version>
</member>
<member name="P:Tools.ComponentModelT.Wrapper`1.Object">
 <summary>gets the object being wrapped</summary>
</member>
<member name="M:Tools.ComponentModelT.Wrapper`1.#ctor(`0)">
 <summary>CTor - creates a new instance of the class <see cref="T:Tools.ComponentModelT.Wrapper`1"/></summary>
</member>
<member name="T:Tools.ComponentModelT.KnownCategoryAttribute">
 <summary><see cref="T:System.ComponentModel.CategoryAttribute"/> which's value is one of known values</summary>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories">
 <summary>Represents shared (static) properties of <see cref="T:System.ComponentModel.CategoryAttribute"/></summary>
 <remarks>This enumeration represents categories predefined by the .NET framework. <para>Values of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> and <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> are distinct. With exception of <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Misc"/> = <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Default"/>.</para></remarks>
 <seelaso cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Action">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Action"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Appearance">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Appearance"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Asynchronous">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Asynchronous"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Behavior">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Behavior"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Data">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Data"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Default">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Default"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Design">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Design"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.DragDrop">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.DragDrop"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Focus">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Focus"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Format">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Format"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Key">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Key"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Layout">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Layout"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Mouse">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.Mouse"/></summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.WindowStyle">
 <summary><see cref="P:System.ComponentModel.CategoryAttribute.WindowStyle"/></summary>
</member>
<member name="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories">
 <summary>Defines more categories commonly used by <see cref="T:System.ComponentModel.CategoryAttribute"/>, but not predefined by the .NET framework as shared properties of the <see cref="T:System.ComponentModel.CategoryAttribute"/></summary>
 <seelaso cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/>
 <remarks>Values of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> and <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> are distinct. With exception of <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Misc"/> = <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories.Default"/>.</remarks>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Accessibility">
 <summary>The Accessibility category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Configurations">
 <summary>The Configurations category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.DDE">
 <summary>The DDE category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Misc">
 <summary>The Misc category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Font">
 <summary>The Focus category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.List">
 <summary>The List category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Position">
 <summary>The Mouse category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Scale">
 <summary>The Scale category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Text">
 <summary>The Text category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Colors">
 <summary>The Colors category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Display">
 <summary>The Display category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.FolderBrowsing">
 <summary>The Folder Browsing category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Items">
 <summary>The Items category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Private">
 <summary>The Private category</summary>
</member>
<member name="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.PropertyChanged">
 <summary>The Property Changed category</summary>
</member>
<member name="M:Tools.ComponentModelT.KnownCategoryAttribute.#ctor(Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories)">
 <summary>CTor from value preconfigured in .NET framework as shared (static) property of <see cref="T:System.ComponentModel.CategoryAttribute"/></summary>
 <param name="KnownCategory">Known value for <see cref="T:System.ComponentModel.CategoryAttribute"/>. This parameter does <strong>not</strong> accept <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> values.</param>
 <remarks>Names of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> categories are localized by .NET framework itself</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="KnownCategory"/> is not member of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/></exception>
</member>
<member name="M:Tools.ComponentModelT.KnownCategoryAttribute.#ctor(Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value)">
 <summary>CTor from value represented as instance of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value"/></summary>
 <param name="KnownCategory">Instance of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value"/></param>
 <remarks>Thsi CTor is hint for intellisense only. However it is fully functional you will probably never use it.</remarks>
</member>
<member name="M:Tools.ComponentModelT.KnownCategoryAttribute.#ctor(System.String)">
 <summary>CTor from any <see cref="T:System.String"/></summary>
 <param name="AnyCategory">Category to be passed to CTor of <see cref="T:System.ComponentModel.CategoryAttribute"/></param>
 <remarks>
 This CTor allows you to pass any <see cref="T:System.String"/> to this class. This is CTor that is used instead of that one that takes <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value"/>. This is done becose of it is the way how you can tell intellisense to list values for you.
 This ctor should be used with constants that are members of <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues"/> (but there is no chceck).
 </remarks>
</member>
<member name="M:Tools.ComponentModelT.KnownCategoryAttribute.#ctor(Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories)">
 <summary>CTor form one of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> values.</summary>
 <param name="KnownCategory">One of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> values which determines string name of category. <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> values are also valid.</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="KnownCategory"/> is neither one of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> nor <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> values</exception>
 <remarks><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> are localized by .NET framework itself, <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> are localized by ÐTools. Availability of localized string depends on availability of such string in localizaion source.</remarks>
</member>
<member name="M:Tools.ComponentModelT.KnownCategoryAttribute.CategoryText(Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories)">
 <summary>Gets localized text - name of given known category</summary>
 <param name="KnownCategory">One of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> or <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> values</param>
 <returns>String representing localized name of given category</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="KnownCategory"/> is neither one of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> nor <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> values</exception>
 <remarks><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> are localized by .NET framework itself, <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> are localized by ÐTools. Availability of localized string depends on availability of such string in localizaion source.</remarks>
 <version version="1.5.2">Fixed: Categories <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Configurations"/>, <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Position"/>, <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Private"/>, <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.PropertyChanged"/>, <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Scale"/> and <see cref="F:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories.Text"/> are not recognized and leads to <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/>.</version>
</member>
<member name="M:Tools.ComponentModelT.KnownCategoryAttribute.CategoryText(Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories)">
 <summary>Gets localized text - name of given known category</summary>
 <param name="KnownCategory">One of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> or <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> values</param>
 <returns>String representing localized name of given category</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="KnownCategory"/> is neither one of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> nor <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> values</exception>
 <remarks><see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/> are localized by .NET framework itself, <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.AnotherCategories"/> are localized by ÐTools. Availability of localized string depends on availability of such string in localizaion source.</remarks>
</member>
<member name="M:Tools.ComponentModelT.KnownCategoryAttribute.KnownAttribute(Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories)">
 <summary></summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="KnownCategory"/> is not member of <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute.KnownCategories"/></exception>
</member>
<member name="T:Tools.ComponentModelT.LDescriptionAttribute">
 <summary>Localizable version of <see cref="T:System.ComponentModel.DescriptionAttribute"/>. Defines description shown in <see cref="T:System.Windows.Forms.PropertyGrid"/>.</summary>
 <remarks>Localizable means that value can be loaded from resources or any Public Static (Shared in Visual Basic) property.
 <para>Description can be localized by resource or by static property depending on value of the <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.ResourceName"/> property.</para>
 </remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.ComponentModelT.LDescriptionAttribute._Resource">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.Resource"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LDescriptionAttribute._PropertyName">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LDescriptionAttribute._ResourceName">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.ResourceName"/> property</summary>
</member>
<member name="M:Tools.ComponentModelT.LDescriptionAttribute.#ctor(System.Type,System.String,System.String)">
 <summary>CTor - attribute bound to any static property</summary>
 <param name="Resource"><see cref="T:System.Type"/> of type that contains property with name specified in the <paramref name="PropertyName"/> parameter. Though it is assumed that type is resource, it is not necessary.</param>
 <param name="PropertyName">Name of Static (Shared in Visual Basic) property of type specified in <paramref name="Resource"/>. It is not necessary for the property to be public. Return type must be <see cref="T:System.String"/>.</param>
 <param name="AlternativeValue">Alternative value used when property cannot be invoked</param>
</member>
<member name="M:Tools.ComponentModelT.LDescriptionAttribute.#ctor(System.String,System.String,System.Type,System.String)">
 <summary>CTor - attribute bound to any resouce</summary>
 <param name="ResourceName">Base name of resource (used by CTor of <see cref="T:System.Resources.ResourceManager"/>)</param>
 <param name="PropertyName">Name of item in resource <paramref name="ResourceName"/></param>
 <param name="TypeFromAssembly">Any type from assembly where resource named <paramref name="ResourceName"/> is defined. Item can be any object, the <see cref="M:System.Object.ToString"/> function is used.</param>
 <param name="Alternative">Alternative value when resource cannot be obtained</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ResourceName"/>, <paramref name="PropertyName"/> or <paramref name="TypeFromAssembly"/> is null</exception>
</member>
<member name="P:Tools.ComponentModelT.LDescriptionAttribute.Description">
 <summary>Gets the description stored in this attribute.</summary>
 <returns>The description stored in property with name stored in <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName"/> of type stored in <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.Resource"/>. If this failt returns alternative value if specified.</returns>
</member>
<member name="P:Tools.ComponentModelT.LDescriptionAttribute.Resource">
 <summary>Any type from assembly where resource resides (when <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.ResourceName"/> is not null) or data type that contains property with name specified in the <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName"/> property.</summary>
 <remarks>Theere is no need for the data type to be public.</remarks>
</member>
<member name="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName">
 <summary>Name of Static (Shared in Visual Basic) property of type specified in <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.Resource"/> (if <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.ResourceName"/> is null) or name of item or resource with name <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.ResourceName"/></summary>
 <remarks>
 The property doesn't need to pe public.
 Return type of the property must be <see cref="T:System.String"/>
 </remarks>
</member>
<member name="P:Tools.ComponentModelT.LDescriptionAttribute.ResourceName">
 <summary>Base name of resource (used by CTor of <see cref="T:System.Resources.ResourceManager"/></summary>
 <remarks>
 If this property IS NOT null description is obtained from resorce with name <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.ResourceName"/> from item <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName"/> from assembly where type <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.Resource"/> is defined.
 If this property IS null description is obtained from static (shared in VB) property with name <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.PropertyName"/> or type <see cref="P:Tools.ComponentModelT.LDescriptionAttribute.Resource"/>.
 <para><see cref="F:System.String.Empty"/> is not null!</para>
 </remarks>
</member>
<member name="T:Tools.ComponentModelT.LDisplayNameAttribute">
 <summary>Localizable version of <see cref="T:System.ComponentModel.DisplayNameAttribute"/>. Defines name shown in <see cref="T:System.Windows.Forms.PropertyGrid"/>.</summary>
 <remarks>
 <para>Localizable means that value can be loaded from resources or static (shared in VB) properties. Which method of localization is uded depends on <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.ResourceName"/> property.</para>
 <para>This attribute can be also used with fields in place of <see cref="T:Tools.ComponentModelT.FieldDisplayNameAttribute"/></para>
 </remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.ComponentModelT.LDisplayNameAttribute._Resource">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LDisplayNameAttribute._PropertyName">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LDisplayNameAttribute._ResourceName">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.ResourceName"/> property</summary>
</member>
<member name="M:Tools.ComponentModelT.LDisplayNameAttribute.#ctor(System.Type,System.String,System.String)">
 <summary>CTor - attribute bound to static (shared in VB) property</summary>
 <param name="Resource"><see cref="T:System.Type"/> of type that contains property with name specified in the <paramref name="PropertyName"/> parameter. Though it is assumed that type is resource, it is not necessary.</param>
 <param name="PropertyName">Name of Static (Shared in Visual Basic) property of type specified in <paramref name="Resource"/>. It is not necessary for the property to be public. Return type must be <see cref="T:System.String"/>.</param>
 <param name="AlternativeValue">Alternative value used when property cannot be invoked</param>
</member>
<member name="M:Tools.ComponentModelT.LDisplayNameAttribute.#ctor(System.String,System.String,System.Type,System.String)">
 <summary>CTor - attribute bound to any resouce</summary>
 <param name="ResourceName">Base name of resource (used by CTor of <see cref="T:System.Resources.ResourceManager"/>)</param>
 <param name="PropertyName">Name of item in resource <paramref name="ResourceName"/></param>
 <param name="TypeFromAssembly">Any type from assembly where resource named <paramref name="ResourceName"/> is defined. Item can be any object, the <see cref="M:System.Object.ToString"/> function is used.</param>
 <param name="Alternative">Alternative value when resource cannot be obtained</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ResourceName"/>, <paramref name="PropertyName"/> or <paramref name="TypeFromAssembly"/> is null</exception>
</member>
<member name="P:Tools.ComponentModelT.LDisplayNameAttribute.DisplayName">
 <summary>Gets the display name for a property, event, or public void method that takes no arguments stored in this attribute.</summary>
 <returns>The display name  stored in property with name stored in <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName"/> of type stored in <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource"/>. If this failt returns alternative value if specified.</returns>
</member>
<member name="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource">
 <summary>Data type that contains property with name specified in the <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName"/> property (if <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.ResourceName"/> is null); any type form assembly where resource named <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.ResourceName"/> is defined (if <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.ResourceName"/> is not null).</summary>
 <remarks>Theere is no need for the data type to be public.</remarks>
</member>
<member name="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName">
 <summary>Name of Static (Shared in Visual Basic) property of type specified in <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource"/> (if <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.ResourceName"/> is null); name of item in resource if <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.ResourceName"/> is not null</summary>
 <remarks>
 The property doesn't need to pe public.
 Return type of the property must be <see cref="T:System.String"/>
 </remarks>
</member>
<member name="P:Tools.ComponentModelT.LDisplayNameAttribute.ResourceName">
 <summary>Base name of resource (used by CTor of <see cref="T:System.Resources.ResourceManager"/></summary>
 <remarks>
 If this property IS NOT null name is obtained from resorce with name <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.ResourceName"/> from item <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName"/> from assembly where type <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource"/> is defined.
 If this property IS null name is obtained from static (shared in VB) property with name <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.PropertyName"/> or type <see cref="P:Tools.ComponentModelT.LDisplayNameAttribute.Resource"/>.
 <para><see cref="F:System.String.Empty"/> is not null!</para>
 </remarks>
</member>
<member name="T:Tools.ComponentModelT.LCategoryAttribute">
 <summary>Localizable version of <see cref="T:System.ComponentModel.CategoryAttribute"/>. Defines category shown in <see cref="T:System.Windows.Forms.PropertyGrid"/>.</summary>
 <remarks>
 Localizable means that value can be loaded from resources (any Public Static (Shared in Visual Basic) Property).
 Note that some categories can be localized by .NET Framework itself.
 </remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.ComponentModelT.LCategoryAttribute._ResourceName">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.ResourceName"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LCategoryAttribute._Resource">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LCategoryAttribute._PropertyName">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LCategoryAttribute._LookUpOrder">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LCategoryAttribute._AlternativeValue">
 <summary>Stores alternative value to be returned when getting value from <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> fails.</summary>
</member>
<member name="M:Tools.ComponentModelT.LCategoryAttribute.#ctor(System.Type,System.String,System.String,Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder)">
 <summary>CTor - attribute bound to shared property</summary>
 <param name="Resource"><see cref="T:System.Type"/> of type that contains property with name specified in the <paramref name="PropertyName"/> parameter. Though it is assumed that type is resource, it is not necessary.</param>
 <param name="PropertyName">Name of Static (Shared in Visual Basic) property of type specified in <paramref name="Resource"/>. It is not necessary for the property to be public. Return type must be <see cref="T:System.String"/>. The property shouldn't return an empty string.</param>
 <param name="AlternativeValue">
 Alternative value used when property cannot be invoked.
 This value is also used when lookup order <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.NETFirst"/> (or <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceFirst"/> and no resource is found) as value to be localized by the .NET Framework.
 </param>
 <param name="LookupOrder">Defines order of sources of localized string</param>
</member>
<member name="M:Tools.ComponentModelT.LCategoryAttribute.#ctor(System.String,System.String,System.Type,System.String,Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder)">
 <summary>CTor - attribute bound to any resouce</summary>
 <param name="ResourceName">Base name of resource (used by CTor of <see cref="T:System.Resources.ResourceManager"/>)</param>
 <param name="PropertyName">Name of item in resource <paramref name="ResourceName"/></param>
 <param name="TypeFromAssembly">Any type from assembly where resource named <paramref name="ResourceName"/> is defined. Item can be any object, the <see cref="M:System.Object.ToString"/> function is used.</param>
 <param name="Alternative">Alternative value when resource cannot be obtained</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ResourceName"/>, <paramref name="PropertyName"/> or <paramref name="TypeFromAssembly"/> is null</exception>
 <param name="LookupOrder">Defines order of sources of localized string</param>
</member>
<member name="P:Tools.ComponentModelT.LCategoryAttribute.ResourceName">
 <summary>Base name of resource (used by CTor of <see cref="T:System.Resources.ResourceManager"/></summary>
 <remarks>
 If this property IS NOT null category is obtained from resorce with name <see cref="P:Tools.ComponentModelT.LCategoryAttribute.ResourceName"/> from item <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> from assembly where type <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> is defined.
 If this property IS null category is obtained from static (shared in VB) property with name <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> or type <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/>.
 <para><see cref="F:System.String.Empty"/> is not null!</para>
 </remarks>
</member>
<member name="M:Tools.ComponentModelT.LCategoryAttribute.GetFromResource">
 <summary>Gets value from underlying resource (either shared property or managed resource)</summary>
 <remarks>Resource value</remarks>
 <exception cref="T:System.Exception">Any exception thrown by called functions</exception>
</member>
<member name="T:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder">
 <summary>Possible orders of source of localized string</summary>
 <remarks>Determines the behavior of the <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function.</remarks>
</member>
<member name="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceFirst">
 <summary>
 The <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function looks in resource specified in the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> first.
 If Static (Shared in Visual Basic) <see cref="T:System.String"/> property with name <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> is not found then return result of <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/>.
 </summary>
</member>
<member name="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.NETFirst">
 <summary>
 The <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function first calls <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/>.
 If the result is an empty string then looks for Static (Shared in Visual Basic) <see cref="T:System.String"/> property with name spacifiedn in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> and returns its value of found or an empty string if not.
 </summary>
</member>
<member name="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceOnly">
 <summary>The <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function looks only for Static (Shared in Visual Basic) <see cref="T:System.String"/> property with name specified in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/>. If the property is found then returns its value otherwise returns an empty string.</summary>
</member>
<member name="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)">
 <summary>Looks up the localized name of the specified category.</summary>
 <param name="value">The identifer for the category to look up.</param>
 <returns>The localized name of the category, or null if a localized name does not exist.</returns>
 <remarks>
 The behavior of this function is affected by value of the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> property.
 The <paramref name="value"/> must have the same value as alternative value passed to the CTor otherwise <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/> is returned.
 <list>
 <item>
 If <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> is <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.NETFirst"/> then
 Function returns value of <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/> if it is not an empty string. Othervise returns value of property specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/>. If obtaining this value fails returns an empty string.
 </item>
 <item>
 If <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> is <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceOnly"/> then
 Function returns value of property specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/>. If obtaining this value failf an empty string is returned.
 </item>
 <item>
 If <see cref="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder"/> is <see cref="F:Tools.ComponentModelT.LCategoryAttribute.enmLookUpOrder.ResourceFirst"/> (or other value not mentioned here) then
 Function returns value of property specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> of type specified by <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/>. If obraining this value fails the resilt of <see cref="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)"/> is returned.
 </item>
 </list>
 If this function is going to return an empty string (eg. because of resource lookup failure) it returns alternative value specified in CTor instead.
 </remarks>
</member>
<member name="P:Tools.ComponentModelT.LCategoryAttribute.Resource">
 <summary>Data type that contains property with name specified in the <see cref="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName"/> property (if <see cref="P:Tools.ComponentModelT.LCategoryAttribute.ResourceName"/> is null); any type from assembyl where resource <see cref="P:Tools.ComponentModelT.LCategoryAttribute.ResourceName"/> is defined (if <see cref="P:Tools.ComponentModelT.LCategoryAttribute.ResourceName"/> is not null).</summary>
 <remarks>Theere is no need for the data type to be public.</remarks>
</member>
<member name="P:Tools.ComponentModelT.LCategoryAttribute.LookUpOrder">
 <summary>Defines the order of sources for looking for value of this property</summary>
</member>
<member name="P:Tools.ComponentModelT.LCategoryAttribute.PropertyName">
 <summary>Name of Static (Shared in Visual Basic) property of type specified in <see cref="P:Tools.ComponentModelT.LCategoryAttribute.Resource"/> (if <see cref="P:Tools.ComponentModelT.LCategoryAttribute.ResourceName"/> is null); name of item of resource when <see cref="P:Tools.ComponentModelT.LCategoryAttribute.ResourceName"/> is not null.</summary>
 <remarks>
 The property doesn't need to pe public.
 Return type of the property (type of resource) must be <see cref="T:System.String"/>.
 The property (resource) should not return an empty string becose empty string is treated as failure of the property by the <see cref="M:Tools.ComponentModelT.LCategoryAttribute.GetLocalizedString(System.String)"/> function.
 </remarks>
</member>
<member name="T:Tools.ComponentModelT.LDefaultValueAttribute">
 <summary>Localizable version of <see cref="T:System.ComponentModel.DefaultValueAttribute"/>. Defines default value of property. Used by <see cref="T:System.Windows.Forms.PropertyGrid"/> to visually indicate user that value was changed and by Windows Forms Designer to determine if property should be serialized or not.</summary>
 <remarks>
 Localizable means that value can be loaded from resources (any Public Static (Shared in Visual Basic) Property).
 This attribute can be used in simple cases. In more complicated cases use ShouldSerialize... and Reset... methods. <seealso>http://msdn2.microsoft.com/en-us/library/53b8022e.aspx</seealso>
 </remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.ComponentModelT.LDefaultValueAttribute._Resource">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Resource"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LDefaultValueAttribute._Property">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Property"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.LDefaultValueAttribute.Type">
 <summary>Type of default value</summary>
</member>
<member name="M:Tools.ComponentModelT.LDefaultValueAttribute.#ctor(System.Type,System.String,System.String)">
 <summary>CTor - only for default values of <see cref="T:System.String"/> type (bound to static property)</summary>
 <param name="Resource">Type that contains property with name spacified in <paramref name="Property"/></param>
 <param name="Property">Name of Static (Shared in Visual Basic) Public property of type specified in <paramref name="Resource"/>. This property cannot be indexed.</param>
 <param name="Alternative">Alternative value used when obrainin from <paramref name="Resource"/> fails</param>
</member>
<member name="M:Tools.ComponentModelT.LDefaultValueAttribute.#ctor(System.Type,System.String,System.Type,System.String)">
 <summary>CTor - for default values of any type (bound to static property)</summary>
 <param name="Resource">Type that contains property with name spacified in <paramref name="Property"/></param>
 <param name="Property">Name of Static (Shared in Visual Basic) Public property of type specified in <paramref name="Resource"/>. This property cannot be indexed.</param>
 <param name="Type">Type of default value</param>
 <param name="Alternative">Alternative value used when obrainin from <paramref name="Resource"/> fails</param>
</member>
<member name="M:Tools.ComponentModelT.LDefaultValueAttribute.#ctor(System.String,System.String,System.Type,System.String)">
 <summary>CTor - only for default values of <see cref="T:System.String"/> type (bound to resource)</summary>
 <param name="TypeFromAssembly">Any type form assembly where resource with name <paramref name="ResourceName"/> is defined</param>
 <param name="Property">Name item in resource <paramref name="ResourceName"/></param>
 <param name="ResourceName">Name of resource in asseblby where type <paramref name="TypeFromAssembly"/> comes from</param>
 <param name="Alternative">Alternative value used when obrainin from <paramref name="Resource"/> fails</param>
</member>
<member name="M:Tools.ComponentModelT.LDefaultValueAttribute.#ctor(System.String,System.String,System.Type,System.Type,System.String)">
 <summary>CTor - only for default values of any type (bound to resource)</summary>
 <param name="TypeFromAssembly">Any type form assembly where resource with name <paramref name="ResourceName"/> is defined</param>
 <param name="Property">Name item in resource <paramref name="ResourceName"/></param>
 <param name="Type">Type of default value</param>
 <param name="ResourceName">Name of resource in asseblby where type <paramref name="TypeFromAssembly"/> comes from</param>
 <param name="Alternative">Alternative value used when obrainin from <paramref name="Resource"/> fails</param>
</member>
<member name="P:Tools.ComponentModelT.LDefaultValueAttribute.Resource">
 <summary>Gets or sets type tah contains property named with name specified in the <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Property"/> property (when <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.ResourceName"/> is null); type form assebly where resource name <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.ResourceName"/> is defined (when <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.ResourceName"/> is not null)</summary>
</member>
<member name="P:Tools.ComponentModelT.LDefaultValueAttribute.Property">
 <summary>Specifies name of Static (Shared in Visual Basic) Public property of type specified in the <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Resource"/> property. This property returns the default value returned (if <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.ResourceName"/> is null); name of item in resource if <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.ResourceName"/> is not null.</summary>
 <remarks>Property cannot be indexed (event with optional index)</remarks>
</member>
<member name="P:Tools.ComponentModelT.LDefaultValueAttribute.Value">
 <summary>Gets the default value of the property this attribute is bound to.</summary>
 <returns>An <see cref="T:System.Object"/> that represents the default value of the property this attribute is bound to.</returns>
</member>
<member name="P:Tools.ComponentModelT.LDefaultValueAttribute.ResourceName">
 <summary>Base name of resource (used by CTor of <see cref="T:System.Resources.ResourceManager"/></summary>
 <remarks>
 If this property IS NOT null value is obtained from resorce with name <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.ResourceName"/> from item <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Property"/> from assembly where type <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Resource"/> is defined.
 If this property IS null value is obtained from static (shared in VB) property with name <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Property"/> or type <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.Resource"/>.
 <para><see cref="F:System.String.Empty"/> is not null!</para>
 </remarks>
</member>
<member name="F:Tools.ComponentModelT.LDefaultValueAttribute._ResourceName">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.LDefaultValueAttribute.ResourceName"/> property</summary>
</member>
<member name="T:Tools.ComponentModelT.ReadOnlyObject">
 <summary>Encapsulates any object and makes it read-only</summary>
 <remarks>Supports both - <see cref="T:System.ComponentModel.TypeDescriptor"/> and <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/></remarks>
</member>
<member name="F:Tools.ComponentModelT.ReadOnlyObject.Obj">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.ReadOnlyObject.Object"/> property</summary>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.#ctor(System.Object)">
 <summary>CTor</summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Obj"/> is null</exception>
 <param name="Obj">Object to encapsulate</param>
</member>
<member name="P:Tools.ComponentModelT.ReadOnlyObject.Object">
 <summary>Gets currently encapsulated object</summary>
 <returns>Currently encapsulated object</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetAttributes">
 <summary>Returns a collection of custom attributes for this instance of a component.</summary>
 <returns>An <see cref="T:System.ComponentModel.AttributeCollection" /> containing the attributes for this object.</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetClassName">
 <summary>Returns the class name of this instance of a component.</summary>
 <returns>The class name of the object, or null if the class does not have a name.</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetComponentName">
 <summary>Returns the name of this instance of a component.</summary>
 <returns>The name of the object, or null if the object does not have a name.</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetConverter">
 <summary>Returns a type converter for this instance of a component.</summary>
 <returns>A <see cref="T:System.ComponentModel.TypeConverter" /> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter" /> for this object.
 This implementation always returns null</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetDefaultEvent">
 <summary>Returns the default event for this instance of a component.</summary>
 <returns>An <see cref="T:System.ComponentModel.EventDescriptor" /> that represents the default event for this object, or null if this object does not have events.</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetDefaultProperty">
 <summary>Returns the default property for this instance of a component.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the default property for this object, or null if this object does not have properties.
 Returned property (if any) is always read-only.</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetEditor(System.Type)">
 <summary>Returns an editor of the specified type for this instance of a component.</summary>
 <returns>An <see cref="T:System.Object" /> of the specified type that is the editor for this object, or null if the editor cannot be found.</returns>
 <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the editor for this object. </param>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetEvents">
 <summary>Returns the events for this instance of a component.</summary>
 <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the events for this component instance.</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetEvents(System.Attribute[])">
 <summary>Returns the events for this instance of a component using the specified attribute array as a filter.</summary>
 <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> that represents the filtered events for this component instance.</returns>
 <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter. </param>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetProperties">
 <summary>Returns the properties for this instance of a component.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the properties for this component instance.
 Properties returned are read-only.</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetProperties(System.Attribute[])">
 <summary>Returns the properties for this instance of a component using the attribute array as a filter.</summary>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that represents the filtered properties for this component instance.
 Properties returned are read-only.</returns>
 <param name="attributes">An array of type <see cref="T:System.Attribute" /> that is used as a filter. </param>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
 <summary>Returns an object that contains the property described by the specified property descriptor.</summary>
 <returns>An <see cref="T:System.Object" /> that represents the owner of the specified property.</returns>
 <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor" /> that represents the property whose owner is to be found. </param>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.ModifyPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
 <summary>If necessary encapsulates <see cref="T:System.ComponentModel.PropertyDescriptor"/> to be read-only</summary>
 <param name="pd"><see cref="T:System.ComponentModel.PropertyDescriptor"/> to encapsulate</param>
 <returns>Read only <see cref="T:System.ComponentModel.PropertyDescriptor"/></returns>
</member>
<member name="T:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor">
 <summary>Read-only <see cref="T:System.ComponentModel.PropertyDescriptor"/></summary>
 <remarks>Encapsulates existing <see cref="T:System.ComponentModel.PropertyDescriptor"/> to be read-only</remarks>
</member>
<member name="F:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.Original">
 <summary>Encapsulated <see cref="T:System.ComponentModel.PropertyDescriptor"/></summary>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
 <summary>CTor</summary>
 <param name="Original"><see cref="T:System.ComponentModel.PropertyDescriptor"/> to encapsulate</param>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.CanResetValue(System.Object)">
 <summary>Returns whether resetting an object changes its value.</summary>
 <returns>true if resetting the component changes its value; otherwise, false. This implementation always returns false.</returns>
 <param name="component">The component to test for reset capability. </param>
</member>
<member name="P:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.ComponentType">
 <summary>Gets the type of the component this property is bound to.</summary>
 <returns>A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.GetValue(System.Object)">
 <summary>Gets the current value of the property on a component.</summary>
 <returns>The value of a property for a given component.</returns>
 <param name="component">The component with the property for which to retrieve the value. </param>
</member>
<member name="P:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.IsReadOnly">
 <summary>Gets a value indicating whether this property is read-only.</summary>
 <returns>This implementation always return true.</returns>
</member>
<member name="P:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.PropertyType">
 <summary>Gets the type of the property.</summary>
 <returns>A <see cref="T:System.Type" /> that represents the type of the property.</returns>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.ResetValue(System.Object)">
 <summary>Resets the value for this property of the component to the default value.</summary>
 <param name="component">The component with the property value that is to be reset to the default value. </param>
 <remarks>This implementation does nothing.</remarks>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.SetValue(System.Object,System.Object)">
 <summary>When overridden in a derived class, sets the value of the component to a different value.</summary>
 <param name="component">The component with the property value that is to be set. </param>
 <param name="value">The new value. </param>
 <remarks>This implementation does nothing.</remarks>
</member>
<member name="M:Tools.ComponentModelT.ReadOnlyObject.ReadOnlyPropertyDescriptor.ShouldSerializeValue(System.Object)">
 <summary>When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.</summary>
 <returns>true if the property should be persisted; otherwise, false.</returns>
 <param name="component">The component with the property to be examined for persistence. </param>
</member>
<member name="T:Tools.ComponentModelT.RestrictAttribute">
 <summary>Indicates if enum may allow values that are not member of it or not</summary>
 <remarks>Tools that use this attribute should treat enums with no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> as restricted (<see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> is True)</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.ComponentModelT.RestrictAttribute._Restrict">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> property</summary>
</member>
<member name="M:Tools.ComponentModelT.RestrictAttribute.#ctor(System.Boolean)">
 <summary>CTor</summary>
 <param name="Restrict">State of restriction</param>
</member>
<member name="P:Tools.ComponentModelT.RestrictAttribute.Restrict">
 <summary>Inidicates if values should be restricted to enum members</summary>
</member>
<member name="T:Tools.ComponentModelT.SettingsInheritDescriptionAttribute">
 <summary><see cref="T:System.ComponentModel.DescriptionAttribute"/> that takes its value from <see cref="T:System.Configuration.SettingsDescriptionAttribute"/></summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.#ctor(System.Type,System.String,System.String)">
 <summary>CTor</summary>
 <param name="Settings">The data type that contains property with name specified in <paramref name="Property"/></param>
 <param name="Property">Name of the property which's <see cref="T:System.Configuration.SettingsDescriptionAttribute"/> initializes this attribute</param>
 <param name="AlternateDescription">Alternative description used in case of failure of getting description form specified property</param>
</member>
<member name="F:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.Settings">
 <summary>The data type that contains property with name spacified in <see cref="F:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.Property"/></summary>
</member>
<member name="F:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.Property">
 <summary>Name of the property which's <see cref="T:System.Configuration.SettingsDescriptionAttribute"/> initializes this attribute</summary>
</member>
<member name="P:Tools.ComponentModelT.SettingsInheritDescriptionAttribute.Description">
 <summary>Gets or sets the string stored as the description.</summary>
 <returns>The string stored as the description. The default value is an empty string ("").</returns>
</member>
<member name="T:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute">
 <summary><see cref="T:System.ComponentModel.DefaultValueAttribute"/> that takes its value from <see cref="T:System.Configuration.DefaultSettingValueAttribute"/></summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.#ctor(System.Type,System.String,System.Type,System.String)">
 <summary>CTor</summary>
 <param name="Settings">The data type that contains property with name defined in <paramref name="Property"/></param>
 <param name="Property">Name of property from which's <see cref="T:System.Configuration.DefaultSettingValueAttribute"/> this attribute is initialized</param>
 <param name="Type">The data type of the value</param>
 <param name="AlternateDefaultValue">Alternative default value used when fetching fails</param>
</member>
<member name="M:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.#ctor(System.Type,System.String)">
 <summary>CTor for default values of <see cref="T:System.String"/> type</summary>
 <param name="Settings">The data type that contains property with name defined in <paramref name="Property"/></param>
 <param name="Property">Name of property from which's <see cref="T:System.Configuration.DefaultSettingValueAttribute"/> this attribute is initialized</param>
</member>
<member name="F:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute._Settings">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Settings"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute._Property">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Property"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute._ValueType">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.ValueType"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Value">
 <summary>Gets the default value of the property this attribute is bound to.</summary>
 <returns>An <see cref="T:System.Object"/> that represents the default value of the property this attribute is bound to.</returns>
 <remarks>Default values can be obtained if stored in form that can be directly returned or if stored as XML-serialized values.</remarks>
</member>
<member name="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Settings">
 <summary>The data type that contains property with name defined in <see cref="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Property"/></summary>
</member>
<member name="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.Property">
 <summary>Name of property from which's <see cref="T:System.Configuration.DefaultSettingValueAttribute"/> this attribute is initialized</summary>
</member>
<member name="P:Tools.ComponentModelT.SettingsInheritDefaultValueAttribute.ValueType">
 <summary>The data type of the value</summary>
</member>
<member name="T:Tools.ComponentModelT.SuppresHandledEventArgs">
 <summary>Provides event arguments for events that supports marking as handled and suppressing of action event may result to.</summary>
</member>
<member name="F:Tools.ComponentModelT.SuppresHandledEventArgs._Handled">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.SuppresHandledEventArgs.Handled"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.SuppresHandledEventArgs.Handled">
 <summary>Gets or sets value indicating if calle handles the message</summary>
</member>
<member name="F:Tools.ComponentModelT.SuppresHandledEventArgs._Suppress">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.SuppresHandledEventArgs.Suppress"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.SuppresHandledEventArgs.Suppress">
 <summary>Gets or sets value indicating if hooks following this one and windows message may be suppressed</summary>
 <value>True to suppress calling of next hooks and ocurence of windows message</value>
 <remarks>In most scenarios this property is ignored when <see cref="P:Tools.ComponentModelT.SuppresHandledEventArgs.Handled"/> is false</remarks>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1">
 <summary>Represents base class for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>'s</summary>
 <typeparam name="T">Type that is converted from and to other types</typeparam>
 <remarks>It's not enough to derive from this class to get working type-safe <see cref="T:System.ComponentModel.TypeConverter"/>. After deriving from this class you must implement one or more type converter interfaces (protected nested interfaces in this class). Those interfaces tells this class which conversions are available and provides conversion methods.</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1">
 <summary>Interface for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>s (read-only conversion)</summary>
 <typeparam name="TOther">Other type (e.g. <see cref="T:System.String"/> - most common). Value of <paramref name="T"/> are mostly converted to this type in order to be show to user and are converted from this type in mostly in order to get user input</typeparam>
 <remarks>By implementing this interface you tells to your base class (<see cref="T:Tools.ComponentModelT.TypeConverter`1"/>) that you are able to convert from type <paramref name="TOther"/></remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)">
 <summary>Performs conversion from type <typeparamref name="TOther"/> to type <typeparamref name="T"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <typeparamref name="T"/></param>
 <returns>Value of type <typeparamref name="T"/> initialized by <paramref name="value"/></returns>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom">
 <summary>Delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)"/> function</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <typeparamref name="T"/></param>
 <returns>Value of type <typeparamref name="T"/> initialized by <paramref name="value"/></returns>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1">
 <summary>Interface for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>s (write-only conversion)</summary>
 <typeparam name="TOther">Other type (e.g. <see cref="T:System.String"/> - most common). Value of <paramref name="T"/> are mostly converted to this type in order to be show to user and are converted from this type in mostly in order to get user input</typeparam>
 <remarks>By implementing this interface you tells to your base class (<see cref="T:Tools.ComponentModelT.TypeConverter`1"/>) that you are able to convert to type <paramref name="TOther"/></remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)">
 <summary>Performs conversion from type <typeparamref name="T"/> to type <typeparamref name="TOther"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <typeparamref name="TOther"/></returns>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo">
 <summary>delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> function</summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <typeparamref name="TOther"/></returns>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverter`1">
 <summary>Interface for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>s (read-write conversion)</summary>
 <typeparam name="TOther">Other type (e.g. <see cref="T:System.String"/> - most common). Value of <paramref name="T"/> are mostly converted to this type in order to be show to user and are converted from this type in mostly in order to get user input</typeparam>
 <remarks>By implementing this interface you tells to your base class (<see cref="T:Tools.ComponentModelT.TypeConverter`1"/>) that you are able to convert to and from type <paramref name="TOther"/></remarks>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1">
 <summary>Interface for type-safe <see cref="T:System.ComponentModel.TypeConverter"/>s (read-write conversion with validation)</summary>
 <typeparam name="TOther">Other type (e.g. <see cref="T:System.String"/> - most common). Value of <paramref name="T"/> are mostly converted to this type in order to be show to user and are converted from this type in mostly in order to get user input</typeparam>
 <remarks>By implementing this interface you tells to your base class (<see cref="T:Tools.ComponentModelT.TypeConverter`1"/>) that you are able to convert to and from type <paramref name="TOther"/></remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)">
 <summary>Returns whether the given instance of <typeparamref name="TOther"/> is valid for type <typeparamref name="T"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">Value to test validity</param>
 <returns>true if the specified value is valid for this type <typeparamref name="T"/>; otherwise, false.</returns>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid">
 <summary>Delegate to the <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/> function</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">Value to test validity</param>
 <returns>true if the specified value is valid for this type <typeparamref name="T"/>; otherwise, false.</returns>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom">
 <summary>Semi type-safe delegate of the <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)"/> function</summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>Converted value</returns>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.dConvertTo">
 <summary>Semi type-safe delegate of the <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)"/> function</summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.dIsValid">
 <summary>Semi type-safe delegate of the <see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)"/> function</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
 <returns>true if the specified value is valid for this object; otherwise, false.</returns>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1">
 <summary>Adapts type-safe delegates from <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> to semi type-safe delegates from <see cref="T:Tools.ComponentModelT.TypeConverter`1"/></summary>
 <typeparam name="TOther">TOther type of delegates</typeparam>
</member>
<member name="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom">
 <summary><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> delegate of <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> to be adapted</summary>
</member>
<member name="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo">
 <summary><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> delegate of <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> to be adapted</summary>
</member>
<member name="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid">
 <summary><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> delegate of <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/> to be adapted</summary>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
 <summary>Function with sighature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom"/> that invokes <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom"/> delegate</summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>Converted value</returns>
 <exception cref="T:System.NullReferenceException"><see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)">
 <summary>Function with sighature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertTo"/> that invokes <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo"/> delegate</summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
 <exception cref="T:System.NullReferenceException"><see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
 <summary>Function with sighature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dIsValid"/> that invokes <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid"/> delegate</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
 <returns>true if the specified value is valid for this object; otherwise, false.</returns>
 <exception cref="T:System.NullReferenceException"><see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid"/> is null</exception>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor(Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterFrom{`1}.dConvertFrom)">
 <summary>CTor with <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> delegate</summary>
 <param name="d">Delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom"/>)</param>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor(Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterTo{`1}.dConvertTo)">
 <summary>CTor with <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> delegate</summary>
 <param name="d">Delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo"/>)</param>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor(Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterWithValidation{`1}.dIsValid)">
 <summary>CTor with <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> delegate</summary>
 <param name="d">Delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid"/>)</param>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor(Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterFrom{`1}.dConvertFrom,Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterTo{`1}.dConvertTo,Tools.ComponentModelT.TypeConverter{`0}.ITypeConverterWithValidation{`1}.dIsValid)">
 <summary>CTor with all delegates</summary>
 <param name="dcfrom"><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertFrom"/>). Can be null.</param>
 <param name="dcto"><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dConvertTo"/>). Can be null.</param>
 <param name="dvalid"><see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> delegate to be adapted (value for <see cref="F:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.dIsValid"/>). Can be null or ommited.</param>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.#ctor">
 <summary>CTor with no delegate</summary>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
 <returns>true if this converter can perform the conversion; otherwise, false.</returns>
 <remarks>This function searches for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> interface where TOther is <paramref name="sourceType"/> or type it implements/derives from using <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)"/></remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
 <returns>true if this converter can perform the conversion; otherwise, false.</returns>
 <remarks>This function searches for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> interface where TOther is <paramref name="destinationType"/> or type it implements/derives from using <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterTo(System.Type)"/></remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
 <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
 <remarks>This function searches for <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> implementation and calls its <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> method if found. Otherwise it calls <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/></remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.ConvertFromNull(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
 <summary>If overriden in derived class performs conversion form null to type <typeparamref name="T"/></summary>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>Null value converted to type <typeparamref name="T"/></returns>
 <remarks>
 <para>This method is called by base class when <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)"/> method (type-unsafe) is called with value null. Sou type to convert from cannot be distinguished.</para>
 <para>This implementation simply returns null (which means default value for value types). You can override it to (for example) throw an exception. You can also call <see cref="M:Tools.ComponentModelT.TypeConverter`1.BaseConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> with null value, which efectivelly throws <see cref="T:System.NotSupportedException"/>.</para>
 <exception cref="T:System.NotSupportedException">Given conversion is not supported (not thrown by this implementation, but can be thorown when implemented in derived class).</exception>
 </remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.BaseConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
 <summary>Calls <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> method (of very base class of this)</summary>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
 <remarks>This function is provided in order to allow access to method of most base class from derived classes if you want access to very default behavior in your derived class.</remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
 <summary>Converts the given value object to the specified type, using the specified context and culture information.</summary>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
 <exception cref="T:System.ArgumentNullException">The destinationType parameter is null</exception>
 <remarks>This function searches for <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> implementation and calls its <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> method if found. Otherwise it calls <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/></remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
 <summary>Re-creates an <see cref="T:System.Object"/> given a set of property values for the object.</summary>
 <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> that represents a dictionary of new property values.</param>
 <returns>An <see cref="T:System.Object"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method always returns null.</returns>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.CreateInstance(System.Collections.IDictionary,System.ComponentModel.ITypeDescriptorContext)">
 <summary>Re-creates instance of <typeparamref name="T"/> given a set of property values for it.</summary>
 <param name="propertyValues">An <see cref="T:System.Collections.IDictionary"/> that represents a dictionary of new property values.</param>
 <returns>Instance of <typeparamref name="T"/> representing the given <see cref="T:System.Collections.IDictionary"/>, or null if the object cannot be created. This method calls <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)"/> unless it is overriden in derived class.</returns>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
 <summary>Returns whether the given value object is valid for this type and for the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
 <returns>true if the specified value is valid for this object; otherwise, false.</returns>
 <remarks>This function searches for <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> implementation and calls its <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/> method if found. Otherwise it calls <see cref="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)"/></remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)">
 <summary>Searches derived class implementation for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> where TOther is <paramref name="sourceType"/> or type it implements/derives from</summary>
 <param name="sourceType">Type of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> to search for</param>
 <returns><see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom"/> delegate that invokes appropriate <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> delegate function that performs conversion</returns>
 <remarks>
 <para>This function first searchse for <paramref name="sourceType"/> implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> interface. If it is not found it searches for implementation of any interface implemented by <paramref name="sourceType"/> and then for any base class of <paramref name="sourceType"/></para>
 <para>Note for inheritors: This function uses reflection, so it is not very efficient. You can improve an efficiency by overriding this function and returning required delegate. If you want to keep semantics of this function (delegates are automatically found) for classses derived from yours one call base class function <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)"/> if you are asked for delegate for type that you don't provide converter of.
 Because your implementation has signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.dConvertFrom"/> and you need signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom"/> you should youse <see cref="T:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1"/> to adapt your delegate and return delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/>.</para>
 </remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.ConverterTo(System.Type)">
 <summary>Searches derived class implementation for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> where TOther is <paramref name="destinationType"/> or type derived from it/implementing it</summary>
 <param name="destinationType">Type of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> to search for</param>
 <returns><see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertTo"/> delegate that invokes appropriate <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> delegate function that performs conversion.</returns>
 <remarks>
 <para>This function first searchse for <paramref name="destinationType"/> implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1"/> interface. If it is not found it searches for implementation of any class derived from <paramref name="sourceType"/> and if <paramref name="sourceType"/> is interface for any of its implementations</para>
 <para>Note for inheritors: This function uses reflection, so it is not very efficient. You can improve an efficiency by overriding this function and returning required delegate. If you want to keep semantics of this function (delegates are automatically found) for classses derived from yours one call base class function <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterTo(System.Type)"/> if you are asked for delegate for type that you don't provide converter of.
 Because your implementation has signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterTo`1.dConvertTo"/> and you need signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertTo"/> you should youse <see cref="T:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1"/> to adapt your delegate and return delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/>.</para>
 </remarks>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.IsValidSimple(System.ComponentModel.ITypeDescriptorContext,System.Object)">
 <summary>Provides simple implementation of <see cref="M:System.ComponentModel.TypeConverter.IsValid(System.Object)"/> method derived class implements <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1"/> but does not implement <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> for the same type</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
 <returns>True if <see cref="M:Tools.ComponentModelT.TypeConverter`1.ITypeConverterFrom`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> does not thow an exception, otherwise false</returns>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`1.Validator(System.Type)">
 <summary>Searches derived class implementation for implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> where TOther is <paramref name="validateType"/> or type it implements/derives from</summary>
 <param name="validateType">Type of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> to search for</param>
 <returns><see cref="T:Tools.ComponentModelT.TypeConverter`1.dIsValid"/> delegate that invokes appropriate <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> delegate function that performs validation. If no method is found but <see cref="M:Tools.ComponentModelT.TypeConverter`1.ConverterFrom(System.Type)"/> returns non-null this function returns delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.IsValidSimple(System.ComponentModel.ITypeDescriptorContext,System.Object)"/></returns>
 <remarks>
 <para>This function first searchse for <paramref name="validateType"/> implementation of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/> interface. If it is not found it searches for implementation of any interface implemented by <paramref name="validateType"/> and then for any base class of <paramref name="validateType"/></para>
 <para>Note for inheritors: This function uses reflection, so it is not very efficient. You can improve an efficiency by overriding this function and returning required delegate. If you want to keep semantics of this function (delegates are automatically found) for classses derived from yours one call base class function <see cref="M:Tools.ComponentModelT.TypeConverter`1.Validator(System.Type)"/> if you are asked for delegate for type that you don't provide converter of.
 Because your implementation has signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1.dIsValid"/> and you need signature of <see cref="T:Tools.ComponentModelT.TypeConverter`1.dConvertFrom"/> you should youse <see cref="T:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1"/> to adapt your delegate and return delegate to <see cref="M:Tools.ComponentModelT.TypeConverter`1.DAdaptor`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)"/>.</para>
 </remarks>
</member>
<member name="T:Tools.ComponentModelT.TypeConverter`2">
 <summary>Fully type-safe <see cref="T:System.ComponentModel.TypeConverter"/></summary>
 <typeparam name="T">Main type that will be conberted to <paramref name="TOther"/> and from <paramref name="TOther"/></typeparam>
 <typeparam name="TOther">Type the <paramref name="T"/> will be converted from and to</typeparam>
 <remarks>This class provides type-safe base of <see cref="T:System.ComponentModel.TypeConverter"/> for two types. You can extend its support for another types by implementing another <see cref="T:Tools.ComponentModelT.TypeConverter`1"/> nested interfaces.</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)">
 <summary>Performs conversion from type <typeparamref name="TOther"/> to type <typeparamref name="T"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <typeparamref name="T"/></param>
 <returns>Value of type <typeparamref name="T"/> initialized by <paramref name="value"/></returns>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)">
 <summary>Performs conversion from type <typeparamref name="T"/> to type <typeparamref name="TOther"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <typeparamref name="TOther"/></returns>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`2.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)">
 <summary>Returns whether the given instance of <typeparamref name="TOther"/> is valid for type <typeparamref name="T"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">Value to test validity</param>
 <returns>true if the specified value is valid for this type <typeparamref name="T"/>; otherwise, false.</returns>
 <remarks>If not overriden in derived class thi method calls <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> and checks if it throws an exception or not.</remarks>
</member>
<member name="F:Tools.ComponentModelT.TypeConverter`2.Adaptor">
 <summary>Adapts methods <see cref="M:Tools.ComponentModelT.TypeConverter`2.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/>, <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> and <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> from <see cref="T:Tools.ComponentModelT.TypeConverter`1.ITypeConverterWithValidation`1"/>'s delegates into <see cref="T:Tools.ComponentModelT.TypeConverter`1"/>'s delegates</summary>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`2.ConverterFrom(System.Type)">
 <summary>Increases efficiency of base class method by returning delegate directly</summary>
 <param name="sourceType">Type to return delegate for</param>
 <returns>If <paramref name="sourceType"/> is <typeparamref name="TOther"/> then returns <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`1)"/> otherwise calls base class's method</returns>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`2.ConverterTo(System.Type)">
 <summary>Increases efficiency of base class method by returning delegate directly</summary>
 <param name="destinationType">Type to return delegate for</param>
 <returns>If <paramref name="destinationType"/> is <typeparamref name="TOther"/> then returns <see cref="M:Tools.ComponentModelT.TypeConverter`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)"/> otherwise calls base class's method</returns>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`2.Validator(System.Type)">
 <summary>Increases efficiency of base class method by returning delegate directly</summary>
 <param name="validateType">Type to return delegate for</param>
 <returns>If <paramref name="validateType"/> is <typeparamref name="TOther"/> then returns <see cref="M:Tools.ComponentModelT.TypeConverter`2.IsValid(System.ComponentModel.ITypeDescriptorContext,`1)"/> otherwise calls base class's method</returns>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`2.ConvertFrom(`1)">
 <summary>Converts value of type <typeparamref name="TOther"/> to <typeparamref name="T"/></summary>
 <param name="value">value to be converted</param>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`2.ConvertTo(`0)">
 <summary>Converts value of type <typeparamref name="T"/> to <typeparamref name="TOther"/></summary>
 <param name="value">value to be converted</param>
</member>
<member name="M:Tools.ComponentModelT.TypeConverter`2.IsValid(`1)">
 <summary>Checks if value of type <typeparamref name="TOther"/> can be converted to <typeparamref name="T"/></summary>
 <param name="value">value to be converted</param>
</member>
<member name="T:Tools.ComponentModelT.FileByteConverter">
 <summary>Simple <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:System.Byte"/></summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.FileByteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Byte[])">
 <summary>Performs conversion from <see cref="T:System.Byte"/> to <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>An empty <see cref="T:System.String"/> if <paramref name="value"/> is null; otherwise <see cref="P:System.Array.Length"/> followed by the 'B' letter</returns>
</member>
<member name="T:Tools.ComponentModelT.ExpandableObjectConverter`1">
 <summary>Provides base class for type-safe <see cref="T:System.ComponentModel.ExpandableObjectConverter"/> with support for interface based conversion as <see cref="T:Tools.ComponentModelT.TypeConverter`1"/></summary>
 <typeparam name="T">Main type conversion is provided from and to</typeparam>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.ExpandableObjectConverter`1.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether this object supports properties, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True</returns>
</member>
<member name="M:Tools.ComponentModelT.ExpandableObjectConverter`1.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
 <summary>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
 <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.</returns>
</member>
<member name="T:Tools.ComponentModelT.ExpandableObjectConverter`2">
 <summary>Provides base class for type-safe <see cref="T:System.ComponentModel.ExpandableObjectConverter"/> with direct support for conversion to/from one type as <see cref="T:Tools.ComponentModelT.TypeConverter`2"/> and interface-based type-safe converters implementation as <see cref="T:Tools.ComponentModelT.TypeConverter`1"/></summary>
 <typeparam name="T">Main type conversion is providfed from and to</typeparam>
 <typeparam name="TOther">The other type to which and from which main type <paramref name="T"/> is converted</typeparam>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.ExpandableObjectConverter`2.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether this object supports properties, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <returns>True</returns>
</member>
<member name="M:Tools.ComponentModelT.ExpandableObjectConverter`2.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
 <summary>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
 <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
 <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.</returns>
</member>
<member name="T:Tools.ComponentModelT.HexaConverter">
 <summary><see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:System.Byte"/> as hexasring</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.HexaConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from <see cref="T:System.String"/> to <see cref="T:System.Byte"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to <see cref="T:System.Byte"/></param>
 <returns><see cref="T:System.Byte"/> initialized by <paramref name="value"/></returns>
 <exception cref="T:System.ArgumentException">Length of <paramref name="value"/> is odd -or- <paramref name="value"/> contaions non-hexa character</exception>
</member>
<member name="M:Tools.ComponentModelT.HexaConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Byte[])">
 <summary>Performs conversion from <see cref="T:System.Byte"/> to type <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in <see cref="T:System.String"/></returns>
</member>
<member name="T:Tools.ComponentModelT.EnumConverterWithAttributes`1">
 <summary>Implements <see cref="T:System.ComponentModel.TypeConverter"/> for enums that uses <see cref="T:System.ComponentModel.DisplayNameAttribute"/> applyed on enum items and <see cref="T:Tools.ComponentModelT.RestrictAttribute"/></summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list.</summary>
 <returns>True when <typeparamref name="T"/> has no <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> or if its <see cref="T:Tools.ComponentModelT.RestrictAttribute"/> has <see cref="P:Tools.ComponentModelT.RestrictAttribute.Restrict"/> true</returns>
</member>
<member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns whether this object supports a standard set of values that can be picked from a list.</summary>
 <returns>true</returns>
</member>
<member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.IsValid(System.ComponentModel.ITypeDescriptorContext,System.String)">
 <summary>Returns whether the given value object is valid for this type.</summary>
 <returns>true if the specified value is valid for type <typeparamref name="T"/>; otherwise, false.</returns>
 <param name="value">The object to test for validity. </param>
</member>
<member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Returns a collection of standard values from the default context for the data type this type converter is designed for.</summary>
 <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> containing a standard set of valid values.</returns>
</member>
<member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from <see cref="T:System.String"/> to type <typeparamref name="T"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <typeparamref name="T"/></param>
 <returns>Value of type <typeparamref name="T"/> initialized by <paramref name="value"/></returns>
 <version version="1.5.4">Added fallback support - <paramref name="value"/> can be now also any value that <see cref="M:System.Enum.Parse(System.Type,System.String)"/> works with.</version>
</member>
<member name="M:Tools.ComponentModelT.EnumConverterWithAttributes`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0)">
 <summary>Performs conversion from type <typeparamref name="T"/> to <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> as <see cref="T:System.String"/></returns>
</member>
<member name="T:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute">
 <summary>For enumeration this attribute is applied onto indicates which additional values that are not member of enumeration are valid enumeration values</summary>
 <remarks>This attribute can be applied multiple times
 <para>Note: This attribute can be nohow enforced. It depends on target where enumeration is passed if it utilizes it.</para>
 <para>This attribute canot be used for big values of type <see cref="T:System.UInt64"/>.</para></remarks>
</member>
<member name="M:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute.#ctor(System.Int64,System.Int64)">
 <summary>CTor - defines range of possible values</summary>
 <param name="Min">Minimum range value</param>
 <param name="Max">Maximum range value</param>
 <exception cref="T:System.ArgumentException"><paramref name="Max"/> is smaller than <see cref="P:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute.Min"/></exception>
</member>
<member name="F:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute._Min">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute.Min"/> property</summary>
</member>
<member name="F:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute._Max">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute.Max"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute.Min">
 <summary>Gets minimum value of range of additional values</summary>
</member>
<member name="P:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute.Max">
 <summary>Gets maximum value of range of additional values</summary>
</member>
<member name="M:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute.GetAllValues(System.Type)">
 <summary>Gets all possible values for enumeration with <see cref="T:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute"/> possibly aplied</summary>
 <param name="Enumeration">Enumeration to get values for</param>
 <returns>Array containing all the values possible for <paramref name="Enumeration"/> with respect to all applied <see cref="T:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute"/> attributes.</returns>
 <remarks>For overlapping attributes and values specified via attribute as well as in enumeration, such values are present only once</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Enumeration"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Enumeration"/> does not represent enumeration</exception>
</member>
<member name="M:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute.IsValidValue(System.Enum)">
 <summary>Gets value indicating if given value is valid value of its enumeration type according to all possibly applied <see cref="T:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute"/>s</summary>
 <param name="Value">Value to observe</param>
 <returns>True if value is defined for its enumeration type or it is in range of any of applied <see cref="T:Tools.ComponentModelT.ValuesFromRangeAreValidAttribute"/>s; otherwise false</returns>
 <remarks>If <paramref name="Value"/> is greater than <see cref="F:System.Int64.MaxValue"/> attribute testing is skipped.</remarks>
</member>
<member name="T:Tools.ComponentModelT.HandledException">
 <summary>Spacial kind of exception intended to be thown by application when exception occured during some process and it was reported to user by the process itself, so the place exception is caught should not report it to user again.</summary>
 <remarks>Intended use of this exception is as follows: Some processs is going on. Something bad happens in the process (an exception occurs). The exception is reported to user (mesage box, console, log etc.) and it needs to be rethrown but upper catch should be notified that it should not report the error to user again.</remarks>
 <version version="1.5.3" stage="Beta">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.ComponentModelT.HandledException.#ctor(System.Exception)">
 <summary>CTor - Creates a new instance of the <see cref="T:Tools.ComponentModelT.HandledException"/> class</summary>
 <param name="innerException"> The exception that is the cause of the current exception.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="innerException"/> is null</exception>
</member>
<member name="T:Tools.ComponentModelT.ObjectStringConverter">
 <summary>Allows editing <see cref="T:System.Object"/> as <see cref="T:System.String"/> in <see cref="T:System.Windows.Forms.PropertyGrid"/></summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ComponentModelT.ObjectStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
 <summary>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
 <returns>true if this converter can perform the conversion; otherwise, false.</returns>
</member>
<member name="M:Tools.ComponentModelT.ObjectStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
 <summary>Converts the given object to the type of this converter, using the specified context and culture information.</summary>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="value">The <see cref="T:System.Object"/> to convert.</param>
 <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
 <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
</member>
<member name="T:Tools.ComponentModelT.CancelItemEventArgs`1">
 <summary>Cancelable event argumens carrying item</summary>
 <typeparam name="T">Item being carried</typeparam>
 <version stage="Nightly" version="1.5.2">Class introduced</version>
</member>
<member name="F:Tools.ComponentModelT.CancelItemEventArgs`1._Item">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.CancelItemEventArgs`1.Item"/> property</summary>
</member>
<member name="M:Tools.ComponentModelT.CancelItemEventArgs`1.#ctor(`0)">
 <summary>CTor from item</summary>
 <param name="Item">Item to carry</param>
</member>
<member name="M:Tools.ComponentModelT.CancelItemEventArgs`1.#ctor(`0,System.Boolean)">
 <summary>CTtor ftom item and <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> value</summary>
 <param name="Item">Item to carry</param>
 <param name="Cancel"><see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> default value</param>
</member>
<member name="P:Tools.ComponentModelT.CancelItemEventArgs`1.Item">
 <summary>Gets item connected with event</summary>
 <returns>Item connected with event</returns>
 <remarks>The connection between item and event depends on event source. It may be item being added to collection or object that caused the event etc.</remarks>
</member>
<member name="T:Tools.ComponentModelT.EnumDefaultValueAttribute">
 <summary>Stores default value of property of enumeration type</summary>
 <version stage="Nightly" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.ComponentModelT.EnumDefaultValueAttribute.#ctor(System.SByte,System.Type)">
 <summary>CTor for <see cref="T:System.SByte"/> enumeration</summary>
 <param name="EnumValue">Default value in enumeration underlying type</param>
 <param name="EnumType">Type of enumeration</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="EnumType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration type -or- <paramref name="EnumValue"/> cannot be represented in enumeration underlying type</exception>
 <remarks>You shoudl use appropriate constructor depending on underlying type of enumeration</remarks>
</member>
<member name="M:Tools.ComponentModelT.EnumDefaultValueAttribute.#ctor(System.Byte,System.Type)">
 <summary>CTor for <see cref="T:System.Byte"/> enumeration</summary>
 <param name="EnumValue">Default value in enumeration underlying type</param>
 <param name="EnumType">Type of enumeration</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="EnumType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration type -or- <paramref name="EnumValue"/> cannot be represented in enumeration underlying type</exception>
 <remarks>You shoudl use appropriate constructor depending on underlying type of enumeration</remarks>
</member>
<member name="M:Tools.ComponentModelT.EnumDefaultValueAttribute.#ctor(System.Int16,System.Type)">
 <summary>CTor for <see cref="T:System.Int16"/> enumeration</summary>
 <param name="EnumValue">Default value in enumeration underlying type</param>
 <param name="EnumType">Type of enumeration</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="EnumType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration type -or- <paramref name="EnumValue"/> cannot be represented in enumeration underlying type</exception>
 <remarks>You shoudl use appropriate constructor depending on underlying type of enumeration</remarks>
</member>
<member name="M:Tools.ComponentModelT.EnumDefaultValueAttribute.#ctor(System.UInt16,System.Type)">
 <summary>CTor for <see cref="T:System.UInt16"/> enumeration</summary>
 <param name="EnumValue">Default value in enumeration underlying type</param>
 <param name="EnumType">Type of enumeration</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="EnumType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration type -or- <paramref name="EnumValue"/> cannot be represented in enumeration underlying type</exception>
 <remarks>You shoudl use appropriate constructor depending on underlying type of enumeration</remarks>
</member>
<member name="M:Tools.ComponentModelT.EnumDefaultValueAttribute.#ctor(System.Int32,System.Type)">
 <summary>CTor for <see cref="T:System.Int32"/> enumeration</summary>
 <param name="EnumValue">Default value in enumeration underlying type</param>
 <param name="EnumType">Type of enumeration</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="EnumType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration type -or- <paramref name="EnumValue"/> cannot be represented in enumeration underlying type</exception>
 <remarks>You shoudl use appropriate constructor depending on underlying type of enumeration</remarks>
</member>
<member name="M:Tools.ComponentModelT.EnumDefaultValueAttribute.#ctor(System.UInt32,System.Type)">
 <summary>CTor for <see cref="T:System.UInt32"/> enumeration</summary>
 <param name="EnumValue">Default value in enumeration underlying type</param>
 <param name="EnumType">Type of enumeration</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="EnumType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration type -or- <paramref name="EnumValue"/> cannot be represented in enumeration underlying type</exception>
 <remarks>You shoudl use appropriate constructor depending on underlying type of enumeration</remarks>
</member>
<member name="M:Tools.ComponentModelT.EnumDefaultValueAttribute.#ctor(System.Int64,System.Type)">
 <summary>CTor for <see cref="T:System.Int64"/> enumeration</summary>
 <param name="EnumValue">Default value in enumeration underlying type</param>
 <param name="EnumType">Type of enumeration</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="EnumType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration type -or- <paramref name="EnumValue"/> cannot be represented in enumeration underlying type</exception>
 <remarks>You shoudl use appropriate constructor depending on underlying type of enumeration</remarks>
</member>
<member name="M:Tools.ComponentModelT.EnumDefaultValueAttribute.#ctor(System.UInt64,System.Type)">
 <summary>CTor for <see cref="T:System.UInt64"/> enumeration</summary>
 <param name="EnumValue">Default value in enumeration underlying type</param>
 <param name="EnumType">Type of enumeration</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="EnumType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration type -or- <paramref name="EnumValue"/> cannot be represented in enumeration underlying type</exception>
 <remarks>You shoudl use appropriate constructor depending on underlying type of enumeration</remarks>
</member>
<member name="M:Tools.ComponentModelT.EnumDefaultValueAttribute.#ctor(System.Enum)">
 <summary>CTro from enumerated value</summary>
 <param name="EnumValue">Enumerated value</param>
</member>
<member name="T:Tools.ComponentModelT.MultipleException">
 <summary>Exception throw when multiple exceptions occured</summary>
 <version stage="Nightly" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.ComponentModelT.MultipleException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
 <summary>CTor</summary>
 <param name="Exceptions">Exceptions that have occured</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exceptions"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Exceptions"/> is empty or contains only one item.</exception>
</member>
<member name="M:Tools.ComponentModelT.MultipleException.#ctor(System.Collections.Generic.IEnumerable{System.Exception},System.Exception)">
 <summary>CTor</summary>
 <param name="Exceptions">Exceptions that have occured</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exceptions"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Exceptions"/> is empty or contains only one item.</exception>
 <param name="InnerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
</member>
<member name="M:Tools.ComponentModelT.MultipleException.#ctor(System.Collections.Generic.IEnumerable{System.Exception},System.String)">
 <summary>CTor</summary>
 <param name="Exceptions">Exceptions that have occured</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exceptions"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Exceptions"/> is empty or contains only one item.</exception>
 <param name="Message">The message that describes the error.</param>
</member>
<member name="M:Tools.ComponentModelT.MultipleException.#ctor(System.Collections.Generic.IEnumerable{System.Exception},System.String,System.Exception)">
 <summary>CTor</summary>
 <param name="Exceptions">Exceptions that have occured</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exceptions"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Exceptions"/> is empty or contains only one item.</exception>
 <param name="Message">The message that describes the error.</param>
 <param name="InnerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
</member>
<member name="F:Tools.ComponentModelT.MultipleException._Exceptions">
 <summary>Contains value of the <see cref="P:Tools.ComponentModelT.MultipleException.Exceptions"/> property</summary>
</member>
<member name="P:Tools.ComponentModelT.MultipleException.Exceptions">
 <summary>Gets exceptions that occured</summary>
</member>
<member name="M:Tools.ComponentModelT.MultipleException.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.ComponentModelT.MultipleException.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.ComponentModelT.MultipleException.GetException(System.Collections.Generic.IEnumerable{System.Exception})">
 <summary>Gets exception or null based items in given collction</summary>
 <param name="Exceptions">Exception that have occured</param>
 <returns>Null when <paramref name="Exceptions"/> is null or empty; first item from <paramref name="Exceptions"/> when it has only one item; <see cref="T:Tools.ComponentModelT.MultipleException"/> whan <paramref name="Exceptions"/> contains more than one item.</returns>
</member>
<member name="T:Tools.DataT.DataExtensions">
 <summary>Contains extension methods for working with ADO.NET</summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.DataT.DataExtensions.CreateCommand(System.Data.IDbConnection,System.String)">
 <summary>Creates and returns a Command object associated with the connection. Allows to set command text.</summary>
 <param name="connection">Connection to create command on</param>
 <param name="commandText">Text of SQL command. Ignored when null.</param>
 <returns>A Command object associated with the connection.
 The <see cref="P:System.Data.IDbCommand.CommandText"/> is initialized to <paramref name="commandText"/> (unless it's null).
 The <see cref="P:System.Data.IDbCommand.CommandType"/> property is set to <see cref="F:System.Data.CommandType.Text"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> is null</exception>
</member>
<member name="M:Tools.DataT.DataExtensions.CreateCommand(System.Data.IDbConnection,System.String,System.Data.CommandType)">
 <summary>Creates and returns a Command object associated with the connection. Allows to set command text and command type.</summary>
 <param name="connection">Connection to create command on</param>
 <param name="commandText">Text of SQL command. Ignored when null.</param>
 <returns>A Command object associated with the connection.
 The <see cref="P:System.Data.IDbCommand.CommandText"/> is initialized to <paramref name="commandText"/> (unless it's null).
 The <see cref="P:System.Data.IDbCommand.CommandType"/> property is set to <paramref name="commandType"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="connection"/> is null</exception>
</member>
<member name="T:Tools.DataT.LinqToSql.LinqToSqlExtensions">
 <summary>Contains extension methods related to LINQ-to-SQL technology</summary>
 <version version="1.5.3" stage="Nightly">This module is new in version 1.5.3</version>
</member>
<member name="M:Tools.DataT.LinqToSql.LinqToSqlExtensions.DeleteAllNew``1(System.Data.Linq.Table{``0})">
 <summary>Undos all INSERTs performed with <see cref="T:System.Data.Linq.Table`1"/></summary>
 <param name="Table">Table to delete all inserted not commited items of coresponding type from</param>
 <typeparam name="TEntity">Type of items in table</typeparam>
 <remarks>This methods delets all items in <paramref name="Table"/>.<see cref="P:System.Data.Linq.Table`1.Context">Context</see>.<see cref="M:System.Data.Linq.DataContext.GetChangeSet">GetChangeSet</see>.<see cref="P:System.Data.Linq.ChangeSet.Inserts">Inserts</see> which are of type <typeparamref name="TEntity"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Table"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Table"/>.<see cref="P:System.Data.Linq.Table`1.Context">Context</see> is null</exception>
</member>
<member name="M:Tools.DataT.LinqToSql.LinqToSqlExtensions.RecoverAllDeleted``1(System.Data.Linq.Table{``0})">
 <summary>Undos all DELETEs performed with <see cref="T:System.Data.Linq.Table`1"/></summary>
 <param name="Table">Table to insert (undelete) all deleted not commited items of coresponding type to</param>
 <typeparam name="TEntity">Type of items in table</typeparam>
 <remarks>This methods re-inserts all items in <paramref name="Table"/>.<see cref="P:System.Data.Linq.Table`1.Context">Context</see>.<see cref="M:System.Data.Linq.DataContext.GetChangeSet">GetChangeSet</see>.<see cref="P:System.Data.Linq.ChangeSet.Deletes">Deletes</see> which are of type <typeparamref name="TEntity"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Table"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Table"/>.<see cref="P:System.Data.Linq.Table`1.Context">Context</see> is null</exception>
</member>
<member name="T:Tools.DataT.ObjectsT.EntityFrameworkExtensions">
 <summary>Contains extension methods related to Entity Framework</summary>
 <version stage="Nightly" version="1.5.3">This module is new in version 1.5.3</version>
</member>
<member name="M:Tools.DataT.ObjectsT.EntityFrameworkExtensions.DeleteObjects``1(System.Data.Objects.IObjectSet{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Marks all given entities for deletion from <see cref="T:System.Data.Objects.IObjectSet`1"/></summary>
 <param name="objectSet">An <see cref="T:System.Data.Objects.IObjectSet`1"/> to delete entities from</param>
 <param name="objects">Entities to be deleted</param>
 <typeparam name="TEntity">Type of entities</typeparam>
 <exception cref="T:System.ArgumentNullException"><paramref name="objectSet"/> is null</exception>
 <exception cref="T:System.InvalidOperationException">Removing member object of <paramref name="objects"/> from <paramref name="objectSet"/> reszlted in change in the <paramref name="objects"/> collection. Especially it's invalid to make call like <c>context.Orders.DeleteObjects(customer.Orders)</c> - use somethink like <c>context.Orders.DeleteObjects(customer.Orders.<see cref="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">ToArray</see>)</c> (<see cref="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">AsEnumerable</see> may not be enough).</exception>
</member>
<member name="M:Tools.DataT.ObjectsT.EntityFrameworkExtensions.AddObjects``1(System.Data.Objects.IObjectSet{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Notifies set than objects representing new entities must be added to the set</summary>
 <param name="objectSet">>An <see cref="T:System.Data.Objects.IObjectSet`1"/> to notify</param>
 <param name="objects">Objects to be added to the set</param>
 <typeparam name="TEntity">Type of entities</typeparam>
 <exception cref="T:System.ArgumentNullException"><paramref name="objectSet"/> is null</exception>
</member>
<member name="M:Tools.DataT.ObjectsT.EntityFrameworkExtensions.RemoveAll``1(System.Data.Objects.DataClasses.EntityCollection{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Removes all objects from collection and marks appropriate relations for deletion</summary>
 <param name="collection">Collection to remove objects from</param>
 <param name="objects">Objects to be removed</param>
 <typeparam name="TEntity">Type of entities</typeparam>
 <returns>True if all objects were removed; false if no object was removed; null if some objects were removed and some not. False is also returned in case <paramref name="objects"/> is null or empty.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
</member>
<member name="M:Tools.DataT.ObjectsT.EntityFrameworkExtensions.AddRange``1(System.Data.Objects.DataClasses.EntityCollection{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Adds all given objects to the collection</summary>
 <param name="collection">Collection to add objects to</param>
 <param name="objects">Objects to be added</param>
 <typeparam name="TEntity">Type of entities</typeparam>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
</member>
<member name="M:Tools.DataT.ObjectsT.EntityFrameworkExtensions.AddObject(System.Data.Objects.ObjectContext,System.Data.Objects.DataClasses.EntityObject)">
 <summary>Adds given entity to given object context</summary>
 <param name="context">Context to add entity to</param>
 <param name="entity">Entity to be added. Method does nothing if this paraparameter is null.</param>
 <remarks>This method uses reflection to find property of type <see cref="T:System.Data.Objects.IObjectSet`1"/> of gtype of <paramref name="entity"/>. If such property is found, <paramref name="entity"/> is added to the <see cref="T:System.Data.Objects.IObjectSet`1"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one <see cref="T:System.Data.Objects.IObjectSet`1"/> properties are found and none is most specific.</exception>
 <exception cref="T:System.MissingMemberException">No suitable <see cref="T:System.Data.Objects.IObjectSet`1"/> property is found</exception>
</member>
<member name="T:Tools.ExtensionsT.DateTimeExtensions">
 <summary>Provides extension methods for working with date and time values</summary>
 <version version="1.5.3">This module is new in version 1.5.3</version>
</member>
<member name="F:Tools.ExtensionsT.DateTimeExtensions.unixEpoch">
 <summary>Date and time of Unix Epoch (date and time of Unix timestamp 0) - it's Jan 1 1970 0:00:00.0 UTC</summary>
</member>
<member name="M:Tools.ExtensionsT.DateTimeExtensions.ToUnixTimestamp(System.DateTime)">
 <summary>Converts <see cref="T:System.DateTime"/> value to Unix timestamp (number of seconds elapsed from Jan 1st 1970 0:00:00 UTC)</summary>
 <param name="value">A <see cref="T:System.DateTime"/> value. It's converted to UTC time using <see cref="M:System.DateTime.ToUniversalTime"/>.</param>
 <returns>A long number representing Unix timestamp (number of whole seconds elapsed since Jan 1st 1970 0:00:00 UTC)</returns>
</member>
<member name="M:Tools.ExtensionsT.DateTimeExtensions.ToUnixTimestamp(System.DateTimeOffset)">
 <summary>Converts <see cref="T:System.DateTimeOffset"/> value to Unix timestamp (number of seconds elapsed from Jan 1 1970 0:00:00 UTC)</summary>
 <param name="value">A <see cref="T:System.DateTimeOffset"/> value. It's converted to UTC time using <see cref="M:System.DateTimeOffset.ToUniversalTime"/>.</param>
 <returns>A long number representing Unix timestamp (number of whole seconds elapsed since Jan 1 1970 0:00:00 UTC)</returns>
</member>
<member name="M:Tools.ExtensionsT.DateTimeExtensions.ToUnixTimestampShort(System.DateTime)">
 <summary>Converts <see cref="T:System.DateTime"/> value to short Unix timestamp (number of seconds elapsed from Jan 1 1970 0:00:00 UTC).</summary>
 <param name="value">A <see cref="T:System.DateTime"/> value. It's converted to UTC time using <see cref="M:System.DateTime.ToUniversalTime"/>.</param>
 <returns>A 32-bit integer number representing Unix timestamp (number of whole seconds elapsed since Jan 1 1970 0:00:00 UTC)</returns>
 <remarks>
 For dates less than Dec 13 1901 20:45:52 UTC or greater than Jan 19 2038 3:14:07 the resulting value overflows (underflows) <see cref="F:System.Int32.MaxValue"/> (<see cref="F:System.Int32.MinValue"/>).
 <see cref="T:System.OverflowException"/> is not throws, instead the value really overflows/underflows.
 </remarks>
</member>
<member name="M:Tools.ExtensionsT.DateTimeExtensions.ToUnixTimestampShort(System.DateTimeOffset)">
 <summary>Converts <see cref="T:System.DateTimeOffset"/> value to short Unix timestamp (number of seconds elapsed from Jan 1 1970 0:00:00 UTC).</summary>
 <param name="value">A <see cref="T:System.DateTimeOffset"/> value. It's converted to UTC time using <see cref="M:System.DateTimeOffset.ToUniversalTime"/>.</param>
 <returns>A 32-bit integer number representing Unix timestamp (number of whole seconds elapsed since Jan 1 1970 0:00:00 UTC)</returns>
 <remarks>
 For dates less than Dec 13 1901 20:45:52 UTC or greater than Jan 19 2038 3:14:07 the resulting value overflows (underflows) <see cref="F:System.Int32.MaxValue"/> (<see cref="F:System.Int32.MinValue"/>).
 <see cref="T:System.OverflowException"/> is not throws, instead the value really overflows/underflows.
 </remarks>
</member>
<member name="M:Tools.ExtensionsT.DateTimeExtensions.ToUnixTimestampPrecise(System.DateTime)">
 <summary>Converts <see cref="T:System.DateTime"/> value to Unix timestamp (number of seconds elapsed from Jan 1 1970 0:00:00 UTC) including second fractions.</summary>
 <param name="value">A <see cref="T:System.DateTime"/> value. It's converted to UTC time using <see cref="M:System.DateTime.ToUniversalTime"/>.</param>
 <returns>A <see cref="T:System.Double"/> number representing Unix timestamp (number of seconds elapsed since Jan 1 1970 0:00:00 UTC)</returns>
</member>
<member name="M:Tools.ExtensionsT.DateTimeExtensions.ToUnixTimestampPrecise(System.DateTimeOffset)">
 <summary>Converts <see cref="T:System.DateTimeOffset"/> value to Unix timestamp (number of seconds elapsed from Jan 1 1970 0:00:00.0 UTC) including second fractions.</summary>
 <param name="value">A <see cref="T:System.DateTimeOffset"/> value. It's converted to UTC time using <see cref="M:System.DateTimeOffset.ToUniversalTime"/>.</param>
 <returns>A <see cref="T:System.Double"/> number representing Unix timestamp (number of seconds elapsed since Jan 1 1970 0:00:00.0 UTC)</returns>
</member>
<member name="M:Tools.ExtensionsT.DateTimeExtensions.FromUnixTimestamp(System.Int32)">
 <summary>Converts an integer number representing Unix timestamp to <see cref="T:System.DateTime"/> value</summary>
 <param name="timestamp">A Unix timestamp (number of seconds elapsed since Jan 1 1970 0:00:00 UTC)</param>
 <returns>A date and time (in UTC coordinates) representing time <paramref name="timestamp"/> seconds after <see cref="F:Tools.ExtensionsT.DateTimeExtensions.unixEpoch"/>.</returns>
</member>
<member name="M:Tools.ExtensionsT.DateTimeExtensions.FromUnixTimestamp(System.Int64)">
 <summary>Converts a long number representing Unix timestamp to <see cref="T:System.DateTime"/> value</summary>
 <param name="timestamp">A Unix timestamp (number of seconds elapsed since Jan 1 1970 0:00:00 UTC)</param>
 <returns>A date and time (in UTC coordinates) representing time <paramref name="timestamp"/> seconds after <see cref="F:Tools.ExtensionsT.DateTimeExtensions.unixEpoch"/>.</returns>
</member>
<member name="M:Tools.ExtensionsT.DateTimeExtensions.FromUnixTimestamp(System.Double)">
 <summary>Converts a double number representing Unix timestamp inclusing second fractions to <see cref="T:System.DateTime"/> value</summary>
 <param name="timestamp">A Unix timestamp (number of seconds elapsed since Jan 1 1970 0:00:00.0 UTC)</param>
 <returns>A date and time (in UTC coordinates) representing time <paramref name="timestamp"/> seconds after <see cref="F:Tools.ExtensionsT.DateTimeExtensions.unixEpoch"/>.</returns>
</member>
<member name="T:Tools.ExtensionsT.IFormattableExtensions">
 <summary>Contains extension methods for <see cref="T:System.IFormattable"/></summary>
 <version version="1.5.4">This module is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.ToStringInvariant(System.IFormattable)">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.IFormattable"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see>.</summary>
 <param name="obj">An object to get string representation of</param>
 <returns>String representation of <paramref name="obj"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see>; null if <paramref name="obj"/> is null.</returns>
 <remarks>Uses <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> with <c>format</c> = null</remarks>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.ToStringInvariant(System.IFormattable,System.String)">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.IFormattable"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see> using given format.</summary>
 <param name="obj">An object to get string representation of</param>
 <param name="format">The format to use.-or-. NUll to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
 <returns>String representation of <paramref name="obj"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see>; null if <paramref name="obj"/> is null.</returns>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.ToString(System.IFormattable,System.String)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <param name="format"> The format to use.-or- Null to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
 <returns>The value of the current instance in the specified format; null if <paramref name="format"/> is null.</returns>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.ToString(System.IFormattable,System.IFormatProvider)">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.IFormattable"/> in given culture.</summary>
 <param name="obj">An object to get string representation of</param>
 <param name="formatProvider">The provider to use to format the value.-or- Null to obtain the numeric format information from the current locale setting of the operating system.</param>
 <returns>String representation of <paramref name="obj"/> formatted using <paramref name="formatProvider"/>; null if <paramref name="obj"/> is null.</returns>
 <remarks>Uses <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> with <c>format</c> = null</remarks>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.ToString``1(System.Nullable{``0},System.String)">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.IFormattable"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see> using given format.</summary>
 <typeparam name="T">Type of nullable type</typeparam>
 <param name="obj">An object to get string representation of</param>
 <param name="format">The format to use.-or-. NUll to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
 <returns>String representation of <paramref name="obj"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see>; null if <paramref name="obj"/> is null.</returns>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.ToString``1(System.Nullable{``0},System.IFormatProvider)">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.IFormattable"/> in given culture.</summary>
 <typeparam name="T">Type of nullable type</typeparam>
 <param name="obj">An object to get string representation of</param>
 <param name="formatProvider">The provider to use to format the value.-or- Null to obtain the numeric format information from the current locale setting of the operating system.</param>
 <returns>String representation of <paramref name="obj"/> formatted using <paramref name="formatProvider"/>; null if <paramref name="obj"/> is null.</returns>
 <remarks>Uses <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> with <c>format</c> = null</remarks>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.ToString``1(System.Nullable{``0},System.String,System.IFormatProvider)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <typeparam name="T">Type of nullable type</typeparam>
 <param name="obj">An object to get string representation of</param>
 <param name="format">The format to use.-or- Null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
 <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
 <returns>The value of the current instance in the specified format; null if <paramref name="obj"/> is null.</returns>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.ToStringInvariant``1(System.Nullable{``0})">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.IFormattable"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see>.</summary>
 <typeparam name="T">Type of nullable type</typeparam>
 <param name="obj">An object to get string representation of</param>
 <returns>String representation of <paramref name="obj"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see>; null if <paramref name="obj"/> is null.</returns>
 <remarks>Uses <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> with <c>format</c> = null</remarks>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.ToStringInvariant``1(System.Nullable{``0},System.String)">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.IFormattable"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see> using given format.</summary>
 <typeparam name="T">Type of nullable type</typeparam>
 <param name="obj">An object to get string representation of</param>
 <param name="format">The format to use.-or-. NUll to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
 <returns>String representation of <paramref name="obj"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture">invariant culture</see>; null if <paramref name="obj"/> is null.</returns>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.GetNumberFormatInfo(System.IFormatProvider,System.Globalization.NumberFormatInfo)">
 <summary>Gets instance of <see cref="T:System.Globalization.NumberFormatInfo"/> form <see cref="T:System.IFormatProvider"/></summary>
 <param name="provider">An <see cref="T:System.IFormatProvider"/> (e.g. <see cref="T:System.Globalization.CultureInfo"/>)to get <see cref="T:System.Globalization.NumberFormatInfo"/> from.</param>
 <param name="default">AN instance to be returned when <paramref name="provider"/> does not provide <see cref="T:System.Globalization.NumberFormatInfo"/>.</param>
 <returns>Three ways of getting<see cref="T:System.Globalization.NumberFormatInfo"/> are tried:
 <list type="bullet">
 <item><paramref name="provider"/>.<see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see></item>
 <item>If <paramref name="provider"/> is <see cref="T:System.Globalization.CultureInfo"/>: <see cref="P:System.Globalization.CultureInfo.NumberFormat"/></item>
 <item><see cref="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)"/></item>
 </list>
 Whichever first succeds it's result is used. If none succeeds <paramref name="default"/> is returned.
 </returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null</exception>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.GetDateTimeFormatInfo(System.IFormatProvider,System.Globalization.DateTimeFormatInfo)">
 <summary>Gets instance of <see cref="T:System.Globalization.DateTimeFormatInfo"/> form <see cref="T:System.IFormatProvider"/></summary>
 <param name="provider">An <see cref="T:System.IFormatProvider"/> (e.g. <see cref="T:System.Globalization.CultureInfo"/>)to get <see cref="T:System.Globalization.DateTimeFormatInfo"/> from.</param>
 <param name="default">AN instance to be returned when <paramref name="provider"/> does not provide <see cref="T:System.Globalization.DateTimeFormatInfo"/>.</param>
 <returns>Three ways of getting<see cref="T:System.Globalization.DateTimeFormatInfo"/> are tried:
 <list type="bullet">
 <item><paramref name="provider"/>.<see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see></item>
 <item>If <paramref name="provider"/> is <see cref="T:System.Globalization.CultureInfo"/>: <see cref="P:System.Globalization.CultureInfo.DateTimeFormat"/></item>
 <item><see cref="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)"/></item>
 </list>
 Whichever first succeds it's result is used. If none succeeds <paramref name="default"/> is returned.
 </returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null</exception>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.GetTextInfo(System.IFormatProvider,System.Globalization.TextInfo)">
 <summary>Gets instance of <see cref="P:System.Globalization.CultureInfo.TextInfo"/> form <see cref="T:System.IFormatProvider"/></summary>
 <param name="provider">An <see cref="T:System.IFormatProvider"/> (e.g. <see cref="T:System.Globalization.CultureInfo"/>)to get <see cref="P:System.Globalization.CultureInfo.TextInfo"/> from.</param>
 <param name="default">AN instance to be returned when <paramref name="provider"/> does not provide <see cref="P:System.Globalization.CultureInfo.TextInfo"/>.</param>
 <returns>Two ways of getting<see cref="P:System.Globalization.CultureInfo.TextInfo"/> are tried:
 <list type="bullet">
 <item><paramref name="provider"/>.<see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see></item>
 <item>If <paramref name="provider"/> is <see cref="T:System.Globalization.CultureInfo"/>: <see cref="P:System.Globalization.CultureInfo.TextInfo"/></item>
 </list>
 Whichever first succeds it's result is used. If none succeeds <paramref name="default"/> is returned.
 </returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null</exception>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.GetCompareInfo(System.IFormatProvider,System.Globalization.CompareInfo)">
 <summary>Gets instance of <see cref="P:System.Globalization.CultureInfo.CompareInfo"/> form <see cref="T:System.IFormatProvider"/></summary>
 <param name="provider">An <see cref="T:System.IFormatProvider"/> (e.g. <see cref="T:System.Globalization.CultureInfo"/>)to get <see cref="P:System.Globalization.CultureInfo.CompareInfo"/> from.</param>
 <param name="default">AN instance to be returned when <paramref name="provider"/> does not provide <see cref="P:System.Globalization.CultureInfo.CompareInfo"/>.</param>
 <returns>Two ways of getting<see cref="P:System.Globalization.CultureInfo.CompareInfo"/> are tried:
 <list type="bullet">
 <item><paramref name="provider"/>.<see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see></item>
 <item>If <paramref name="provider"/> is <see cref="T:System.Globalization.CultureInfo"/>: <see cref="P:System.Globalization.CultureInfo.CompareInfo"/></item>
 </list>
 Whichever first succeds it's result is used. If none succeeds <paramref name="default"/> is returned.
 </returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null</exception>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.IFormattableExtensions.GetAngleFormatInfo(System.IFormatProvider,Tools.GlobalizationT.AngleFormatInfo)">
 <summary>Gets instance of <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> form <see cref="T:System.IFormatProvider"/></summary>
 <param name="provider">An <see cref="T:System.IFormatProvider"/> (e.g. <see cref="T:System.Globalization.CultureInfo"/>)to get <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> from.</param>
 <param name="default">AN instance to be returned when <paramref name="provider"/> does not provide <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/>.</param>
 <returns>Two ways of getting<see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> are tried:
 <list type="bullet">
 <item><paramref name="provider"/>.<see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see></item>
 <item>If <paramref name="provider"/> is <see cref="T:System.Globalization.CultureInfo"/>: <see cref="M:Tools.GlobalizationT.AngleFormatInfo.Get"/>(<paramref name="provider"/>)</item>
 </list>
 Whichever first succeds it's result is used. If none succeeds <paramref name="default"/> is returned.
 </returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null</exception>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="T:Tools.ExtensionsT.StringParsing">
 <summary>Contains extension methods usefull for string parsing</summary>
 <remarks>This module does not define <c>TryParse</c> method for <see cref="T:System.Enum"/>. This method is defined in <see cref="T:Tools.EnumCore"/>.</remarks>
 <version version="1.5.4">This module is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.SByte@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.SByte"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.SByte"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.SByte@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.SByte"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.SByte@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.SByte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.SByte"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Byte@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Byte"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Byte"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.Byte@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Byte"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.Byte@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.Byte" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Byte"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Int16@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.Int16" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Int16"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Int16" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Int16"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.Int16@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.Int16" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Int16"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.Int16@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.Int16" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Int16"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.UInt16@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.UInt16" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.UInt16"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.UInt16" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.UInt16"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.UInt16@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.UInt16" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.UInt16"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.UInt16@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.UInt16" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.UInt16"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Int32@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.Int32" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Int32"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Int32" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Int32"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.Int32@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.Int32" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Int32"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.Int32@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.Int32" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Int32"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.UInt32@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.UInt32" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.UInt32"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.UInt32" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.UInt32"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.UInt32@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.UInt32" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.UInt32"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.UInt32@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.UInt32" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.UInt32"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Int64@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.Int64" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Int64"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Int64" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Int64"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.Int64@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.Int64" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Int64"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.Int64@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.Int64" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Int64"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.UInt64@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.UInt64" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.UInt64"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.UInt64" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.UInt64"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.UInt64@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.UInt64" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.UInt64"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.UInt64@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.UInt64" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.UInt64"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Single@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.Single" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Single"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Single" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Single"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.Single@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.Single" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Single"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.Single@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.Single" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Single"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Double@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.Double" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Double"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Double" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Double"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.Double@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.Double" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Double"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.Double@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.Double" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Double"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Decimal@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.Decimal" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Decimal"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Decimal" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Decimal"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.Decimal@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.Decimal" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Decimal"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.Decimal@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.Decimal" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="T:System.Decimal"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Numerics.BigInteger@)">
 <summary>Tries to convert the string representation of a number to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
 <summary>Tries to convert the string representation of a number in a specified style and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.Numerics.BigInteger@)">
 <summary>Tries to convert the string representation of a number and culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.NumberStyles,System.Numerics.BigInteger@)">
 <summary>Tries to convert the string representation of a number in a specified style and current culture-specific format to its <see cref="T:System.Numerics.BigInteger" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a number to convert.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the number contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">style is not a <see cref="T:System.Globalization.NumberStyles" /> value. -or-style is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> and <see cref="F:System.Globalization.NumberStyles.HexNumber" /> values.</exception>
 <seelaso cref="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.DateTime@)">
 <summary>Tries to convert the string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a date and time to convert.</param>
 <param name="result">When this method returns, value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.DateTime"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider,System.DateTime@)">
 <summary>Tries to convert the string representation of a date and time in a specified style and culture-specific format to its <see cref="T:System.DateTime" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a date and time to convert.</param>
 <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">styles is not a valid <see cref="T:System.Globalization.DateTimeStyles"/> value.-or-<paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles"/> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>).</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="provider"/> is a neutral culture and cannot be used in a parsing operation.</exception>
 <seelaso cref="T:System.DateTime"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.DateTime@)">
 <summary>Tries to convert the string representation of a date and time and culture-specific format to its <see cref="T:System.DateTime" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a date and time to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="provider"/> is a neutral culture and cannot be used in a parsing operation.</exception>
 <seelaso cref="T:System.DateTime"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.DateTimeStyles,System.DateTime@)">
 <summary>Tries to convert the string representation of a date and time in a specified style and current culture-specific format to its <see cref="T:System.DateTime" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a date and time to convert.</param>
 <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">styles is not a valid <see cref="T:System.Globalization.DateTimeStyles"/> value.-or-<paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles"/> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>).</exception>
 <seelaso cref="T:System.DateTime"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TyParseExact(System.String,System.String,System.DateTime@,System.IFormatProvider,System.Globalization.DateTimeStyles)">
 <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string containing a date and time to convert.</param>
 <param name="format">The required format of <paramref name="s"/>.</param>
 <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s"/>. <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used if null.</param>
 <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s"/> or <paramref name="format"/> parameter is null, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format"/>. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="styles"/> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TyParseExact(System.String,System.String[],System.DateTime@,System.IFormatProvider,System.Globalization.DateTimeStyles)">
 <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTime" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string containing one or more dates and times to convert.</param>
 <param name="formats">An array of allowable formats of s<paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific format information about <paramref name="s"/>. <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used if null.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
 <param name="result">When this method returns, contains the <see cref="T:System.DateTime" /> value equivalent to the date and time contained in s, if the conversion succeeded, or <see cref="F:System.DateTime.MinValue" /> if the conversion failed. The conversion fails if <paramref name="s"/> or <paramref name="formats"/> is null, <paramref name="s"/> or an element of <paramref name="formats"/> is an empty string, or the format of <paramref name="s"/> is not exactly as specified by at least one of the format patterns in <paramref name="formats"/>. This parameter is passed uninitialized.</param>
 <returns>true if the s parameter was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="styles"/> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.DateTimeOffset@)">
 <summary>Tries to convert the string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a date and time to convert.</param>
 <param name="result">When this method returns, value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <seelaso cref="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.DateTimeStyles,System.IFormatProvider,System.DateTimeOffset@)">
 <summary>Tries to convert the string representation of a date and time in a specified style and culture-specific format to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a date and time to convert.</param>
 <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">styles is not a valid <see cref="T:System.Globalization.DateTimeStyles"/> value.-or-<paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles"/> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>).</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="provider"/> is a neutral culture and cannot be used in a parsing operation.</exception>
 <seelaso cref="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.DateTimeOffset@)">
 <summary>Tries to convert the string representation of a date and time and culture-specific format to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a date and time to convert.</param>
 <param name="provider">An object that supplies culture-specific formatting information about <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="provider"/> is a neutral culture and cannot be used in a parsing operation.</exception>
 <seelaso cref="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
 <summary>Tries to convert the string representation of a date and time in a specified style and current culture-specific format to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string representing a date and time to convert.</param>
 <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">styles is not a valid <see cref="T:System.Globalization.DateTimeStyles"/> value.-or-<paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles"/> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal"/> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal"/>).</exception>
 <seelaso cref="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TyParseExact(System.String,System.String,System.DateTimeOffset@,System.IFormatProvider,System.Globalization.DateTimeStyles)">
 <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string containing a date and time to convert.</param>
 <param name="format">The required format of <paramref name="s"/>.</param>
 <param name="provider">An <see cref="T:System.IFormatProvider" /> object that supplies culture-specific formatting information about <paramref name="s"/>. <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used if null.</param>
 <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of <paramref name="s"/>.</param>
 <param name="result">When this method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time contained in <paramref name="s"/>, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" /> if the conversion failed. The conversion fails if either the <paramref name="s"/> or <paramref name="format"/> parameter is null, is an empty string, or does not contain a date and time that correspond to the pattern specified in <paramref name="format"/>. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="styles"/> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TyParseExact(System.String,System.String[],System.DateTimeOffset@,System.IFormatProvider,System.Globalization.DateTimeStyles)">
 <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string containing one or more dates and times to convert.</param>
 <param name="formats">An array of allowable formats of s<paramref name="s"/>.</param>
 <param name="provider">An object that supplies culture-specific format information about <paramref name="s"/>. <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used if null.</param>
 <param name="style">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s"/>. A typical value to specify is <see cref="F:System.Globalization.DateTimeStyles.None" />.</param>
 <param name="result">When this method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time contained in s, if the conversion succeeded, or <see cref="F:System.DateTimeOffset.MinValue" /> if the conversion failed. The conversion fails if <paramref name="s"/> or <paramref name="formats"/> is null, <paramref name="s"/> or an element of <paramref name="formats"/> is an empty string, or the format of <paramref name="s"/> is not exactly as specified by at least one of the format patterns in <paramref name="formats"/>. This parameter is passed uninitialized.</param>
 <returns>true if the s parameter was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="styles"/> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.-or-<paramref name="styles"/> contains an invalid combination of <see cref="T:System.Globalization.DateTimeStyles" /> values (for example, both <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> and <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />).</exception>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.TimeSpan@)">
 <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string that specifies the time interval to convert.</param>
 <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="s"/>, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if <paramref name="s"/> was converted successfully; otherwise, false. This operation returns false if the <paramref name="s"/> parameter is null or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
 <seelaso cref="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
 <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string that specifies the time interval to convert.</param>
 <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
 <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="s"/>, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if <paramref name="s"/> was converted successfully; otherwise, false. This operation returns false if the <paramref name="s"/> parameter is null or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
 <seelaso cref="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParseExact(System.String,System.String,System.TimeSpan@,System.IFormatProvider)">
 <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</summary>
 <param name="s">A string that specifies the time interval to convert.</param>
 <param name="format">A standard or custom format string that defines the required format of <paramref name="input"/>.</param>
 <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
 <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input"/>, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParseExact(System.String,System.String[],System.TimeSpan@,System.IFormatProvider)">
 <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</summary>
 <param name="s">A string that specifies the time interval to convert.</param>
 <param name="formats">A array of standard or custom format strings that define the acceptable formats of <paramref name="input"/>.</param>
 <param name="formatProvider">An object that provides culture-specific formatting information.</param>
 <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input"/>, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParseExact(System.String,System.String,System.Globalization.TimeSpanStyles,System.TimeSpan@,System.IFormatProvider)">
 <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</summary>
 <param name="s">A string that specifies the time interval to convert.</param>
 <param name="format">A standard or custom format string that defines the required format of <paramref name="input"/>.</param>
 <param name="formatProvider">An object that provides culture-specific formatting information.</param>
 <param name="styles">One or more enumeration values that indicate the style of <paramref name="input"/>.</param>
 <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input"/>, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>     
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParseExact(System.String,System.String[],System.Globalization.TimeSpanStyles,System.TimeSpan@,System.IFormatProvider)">
 <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</summary>
 <param name="s">A string that specifies the time interval to convert.</param>
 <param name="formats">A array of standard or custom format strings that define the acceptable formats of <paramref name="input"/>.</param>
 <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
 <param name="styles">One or more enumeration values that indicate the style of <paramref name="input"/>.</param>
 <param name="result">When this method returns, contains an object that represents the time interval specified by <paramref name="input"/>, or <see cref="F:System.TimeSpan.Zero" /> if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if <paramref name="input"/> was converted successfully; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Boolean@)">
 <summary>Converts the specified string representation of a logical value to its <see cref="T:System.Boolean" /> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="s">A string containing the value to convert.</param>
 <param name="result">When this method returns, if the conversion succeeded, contains true if <paramref name="s"/> is equivalent to <see cref="F:System.Boolean.TrueString" /> or false if <paramref name="s"/> is equivalent to <see cref="F:System.Boolean.FalseString" />. If the conversion failed, contains false. The conversion fails if <paramref name="s"/> is null or is not equivalent to either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />. This parameter is passed uninitialized.</param>
 <returns>true if value was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Boolean"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Guid@)">
 <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
 <param name="s">The GUID to convert.</param>
 <param name="result">The structure that will contain the parsed value.</param>
 <returns>true if the parse operation was successful; otherwise, false.</returns>
 <seelaso cref="M:System.Guid.TryParse(System.String,System.Guid@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParseExact(System.String,System.String,System.Guid@)">
 <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
 <param name="s">The GUID to convert.</param>
 <param name="format">One of the following specifiers that indicates the exact format to use when interpreting input: "N", "D", "B", "P", or "X".</param>
 <param name="result">The structure that will contain the parsed value.</param>
 <returns>true if the parse operation was successful; otherwise, false.</returns>
 <seelaso cref="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Char@)">
 <summary>Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.</summary>
 <param name="s">A string that contains a single character, or null.</param>
 <param name="result">When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s"/>, if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the <paramref name="s"/> parameter is null or the length of <paramref name="s"/> is not 1. This parameter is passed uninitialized.</param>
 <returns>true if the <paramref name="s"/> parameter was converted successfully; otherwise, false.</returns>
 <seelaso cref="T:System.Char"/>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Net.IPAddress@)">
 <summary>Determines whether a string is a valid IP address.</summary>
 <param name="s">The string to validate.</param>
 <param name="result">The <see cref="T:System.Net.IPAddress" /> version of the string.</param>
 <returns>true if <paramref name="s"/> is a valid IP address; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.StringParsing.TryParse(System.String,System.Version@)">
 <summary>Tries to convert the string representation of a version number to an equivalent <see cref="T:System.Version" /> object, and returns a value that indicates whether the conversion succeeded.</summary>
 <param name="s">A string that contains a version number to convert.</param>
 <param name="result">When this method returns, contains the <see cref="T:System.Version" /> equivalent of the number that is contained in <paramref name="s"/>, if the conversion succeeded, or a <see cref="T:System.Version" /> object whose major and minor version numbers are 0 if the conversion failed.</param>
 <returns>true if the input parameter was converted successfully; otherwise, false.</returns>
 <seelaso cref="M:System.Version.TryParse(System.String,System.Version@)"/>
</member>
<member name="T:Tools.ExtensionsT.DelegateExtensions">
 <summary>Contains <see cref="T:System.Delegate"/>-related extension functions</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed. Accessibility changed to public.</version>
 <seealso cref="N:Tools.SpecialT.DelegateTools"/>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AsFunction(System.Action)">
 <summary>Wraps given procedure delegate as delegate of function returning always null</summary>
 <param name="d">Delegate to be wrapped</param>
 <returns>Function that invokes delegate <paramref name="d"/> and returns null</returns>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AsFunction``1(System.Action{``0})">
 <summary>Wraps given procedure delegate as delegate of function returning always null</summary>
 <param name="d">Delegate to be wrapped</param>
 <returns>Function that invokes delegate <paramref name="d"/> and returns null</returns>
 <typeparam name="T1">Type of first argument of procedure</typeparam>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.Function``2(System.Action{``0,``1})">
 <summary>Wraps given procedure delegate as delegate of function returning always null</summary>
 <param name="d">Delegate to be wrapped</param>
 <returns>Function that invokes delegate <paramref name="d"/> and returns null</returns>
 <typeparam name="T1">Type of first argument of procedure</typeparam>
 <typeparam name="T2">Type of 2nd argument of procedure</typeparam>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AsFunction``3(System.Action{``0,``1,``2})">
 <summary>Wraps given procedure delegate as delegate of function returning always null</summary>
 <param name="d">Delegate to be wrapped</param>
 <returns>Function that invokes delegate <paramref name="d"/> and returns null</returns>
 <typeparam name="T1">Type of first argument of procedure</typeparam>
 <typeparam name="T2">Type of 2nd argument of procedure</typeparam>
 <typeparam name="T3">Type of third argument of procedure</typeparam>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AsFunction``4(System.Action{``0,``1,``2,``3})">
 <summary>Wraps given procedure delegate as delegate of function returning always null</summary>
 <param name="d">Delegate to be wrapped</param>
 <returns>Function that invokes delegate <paramref name="d"/> and returns null</returns>
 <typeparam name="T1">Type of first argument of procedure</typeparam>
 <typeparam name="T2">Type of 2nd argument of procedure</typeparam>
 <typeparam name="T3">Type of third argument of procedure</typeparam>
 <typeparam name="T4">Type of 4th argument of procedure</typeparam>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AddArgument``1(System.Action)">
 <summary>Wraps given procedure delegate as procedure with one more argument (which is ignored)</summary>
 <param name="d">Delegate to wrap</param>
 <typeparam name="TIgnored">Type of ignored argument</typeparam>
 <returns>Delegate of procedure with one more argument then <paramref name="d"/></returns>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AddArgument``2(System.Action{``0})">
 <summary>Wraps given procedure delegate as procedure with one more argument (which is ignored)</summary>
 <param name="d">Delegate to wrap</param>
 <typeparam name="TIgnored">Type of ignored argument</typeparam>
 <returns>Delegate of procedure with one more argument then <paramref name="d"/></returns>
 <typeparam name="T1">Type of first argument of procedure <paramref name="d"/></typeparam>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AddArgument``3(System.Action{``0,``1})">
 <summary>Wraps given procedure delegate as procedure with one more argument (which is ignored)</summary>
 <param name="d">Delegate to wrap</param>
 <typeparam name="TIgnored">Type of ignored argument</typeparam>
 <returns>Delegate of procedure with one more argument then <paramref name="d"/></returns>
 <typeparam name="T1">Type of first argument of procedure <paramref name="d"/></typeparam>
 <typeparam name="T2">Type of second argument of procedure <paramref name="d"/></typeparam>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AddArgument``4(System.Action{``0,``1,``2})">
 <summary>Wraps given procedure delegate as procedure with one more argument (which is ignored)</summary>
 <param name="d">Delegate to wrap</param>
 <typeparam name="TIgnored">Type of ignored argument</typeparam>
 <returns>Delegate of procedure with one more argument then <paramref name="d"/></returns>
 <typeparam name="T1">Type of first argument of procedure <paramref name="d"/></typeparam>
 <typeparam name="T2">Type of second argument of procedure <paramref name="d"/></typeparam>
 <typeparam name="T3">Type of third argument of procedure <paramref name="d"/></typeparam>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AddArgument``2(System.Func{``1})">
 <summary>Wraps given function delegate as function with one more argument (which is ignored)</summary>
 <param name="d">Delegate to wrap</param>
 <typeparam name="TIgnored">Type of ignored argument</typeparam>
 <typeparam name=" TRet">Return type of function</typeparam>
 <returns>Delegate of function with one more argument than <paramref name="d"/></returns>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AddArgument``3(System.Func{``0,``2})">
 <summary>Wraps given function delegate as function with one more argument (which is ignored)</summary>
 <param name="d">Delegate to wrap</param>
 <typeparam name="TIgnored">Type of ignored argument</typeparam>
 <typeparam name=" TRet">Return type of function</typeparam>
 <returns>Delegate of function with one more argument than <paramref name="d"/></returns>
 <typeparam name="T1">Type of first argument of procedure <paramref name="d"/></typeparam>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AddArgument``4(System.Func{``0,``1,``3})">
 <summary>Wraps given function delegate as function with one more argument (which is ignored)</summary>
 <param name="d">Delegate to wrap</param>
 <typeparam name="TIgnored">Type of ignored argument</typeparam>
 <typeparam name=" TRet">Return type of function</typeparam>
 <returns>Delegate of function with one more argument than <paramref name="d"/></returns>
 <typeparam name="T1">Type of first argument of procedure <paramref name="d"/></typeparam>
 <typeparam name="T2">Type of second argument of procedure <paramref name="d"/></typeparam>
</member>
<member name="M:Tools.ExtensionsT.DelegateExtensions.AddArgument``5(System.Func{``0,``1,``2,``4})">
 <summary>Wraps given function delegate as function with one more argument (which is ignored)</summary>
 <param name="d">Delegate to wrap</param>
 <typeparam name="TIgnored">Type of ignored argument</typeparam>
 <typeparam name=" TRet">Return type of function</typeparam>
 <returns>Delegate of function with one more argument than <paramref name="d"/></returns>
 <typeparam name="T1">Type of first argument of procedure <paramref name="d"/></typeparam>
 <typeparam name="T2">Type of second argument of procedure <paramref name="d"/></typeparam>
 <typeparam name="T3">Type of third argument of procedure <paramref name="d"/></typeparam>
</member>
<member name="T:Tools.ExtensionsT.CharExtensions">
 <summary>Contains extension methods for working with <see cref="T:System.Char"/></summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.NumericValue(System.Char)">
 <summary>Converts the specified numeric Unicode character to a double-precision floating point number.</summary>
 <param name="c">A Unicode character.</param>
 <returns>The numeric value of c if that character represents a number; otherwise, -1.0.</returns>
 <seealso cref="M:System.Char.GetNumericValue(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.UnicodeCategory(System.Char)">
 <summary>Categorizes a specified Unicode character into a group identified by one of the <see cref="!:System.UnicodeCategory" /> values.</summary>
 <param name="c">A Unicode character.</param>
 <returns>A <see cref="!:System.UnicodeCategory" /> value that identifies the group that contains c.</returns>
 <seealso cref="M:System.Char.GetUnicodeCategory(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsControl(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as a control character.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is a control character; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsControl(System.Char)"/>
 <seealso cref="M:System.Char.IsControl(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsDigit(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as a decimal digit.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is a decimal digit; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsDigit(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsHighSurrogate(System.Char)">
 <summary>Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</summary>
 <param name="c">A character.</param>
 <returns>true if the numeric value of the c parameter ranges from U+D800 through U+DBFF; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsHighSurrogate(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsLetter(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as an alphabetic letter.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is an alphabetic letter; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsLetter(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsLetterOrDigit(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as an alphabetic letter or a decimal digit.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is an alphabetic letter or a decimal digit; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsLetterOrDigit(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsLower(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as a lowercase letter.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is a lowercase letter; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsLower(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsLowSurrogate(System.Char)">
 <summary>Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</summary>
 <param name="c">A character.</param>
 <returns>true if the numeric value of the c parameter ranges from U+DC00 through U+DFFF; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsLowSurrogate(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsNumber(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as a number.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is a number; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsNumber(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsPunctuation(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as a punctuation mark.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is a punctuation mark; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsPunctuation(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsSeparator(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as a separator character.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is a separator character; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsSeparator(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsSurrogate(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as a surrogate character.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is a surrogate character; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsSurrogate(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsUpper(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as an uppercase letter.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is an uppercase letter; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsUpper(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.IsWhiteSpace(System.Char)">
 <summary>Indicates whether the specified Unicode character is categorized as white space.</summary>
 <param name="c">A Unicode character.</param>
 <returns>true if c is white space; otherwise, false.</returns>
 <seealso cref="M:System.Char.IsWhiteSpace(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.ToLower(System.Char)">
 <summary>Converts the value of a Unicode character to its lowercase equivalent.</summary>
 <param name="c">A Unicode character.</param>
 <returns>The lowercase equivalent of c, or the unchanged value of c, if c is already lowercase or not alphabetic.</returns>
 <seealso cref="M:System.Char.ToLower(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.ToLower(System.Char,System.Globalization.CultureInfo)">
 <summary>Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</summary>
 <param name="c">A Unicode character.</param>
 <param name="culture">A <see cref="!:System.CultureInfo" /> object that supplies culture-specific casing rules, or null.</param>
 <returns>The lowercase equivalent of c, modified according to culture, or the unchanged value of c, if c is already lowercase or not alphabetic.</returns>
 <exception cref="T:System.ArgumentNullException">culture is null.</exception>
 <seealso cref="M:System.Char.ToLower(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.ToLowerInvariant(System.Char)">
 <summary>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</summary>
 <param name="c">A Unicode character.</param>
 <returns>The lowercase equivalent of the c parameter, or the unchanged value of c, if c is already lowercase or not alphabetic.</returns>
 <seealso cref="M:System.Char.ToLowerInvariant(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.ToUpper(System.Char)">
 <summary>Converts the value of a Unicode character to its uppercase equivalent.</summary>
 <param name="c">A Unicode character.</param>
 <returns>The uppercase equivalent of c, or the unchanged value of c, if c is already uppercase or not alphabetic.</returns>
 <seealso cref="M:System.Char.ToUpper(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.ToUpper(System.Char,System.Globalization.CultureInfo)">
 <summary>Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</summary>
 <param name="c">A Unicode character.</param>
 <param name="culture">A <see cref="!:System.CultureInfo" /> object that supplies culture-specific casing rules, or null.</param>
 <returns>The uppercase equivalent of c, modified according to culture, or the unchanged value of c, if c is already uppercase or not alphabetic.</returns>
 <exception cref="T:System.ArgumentNullException">culture is null.</exception>
 <seealso cref="M:System.Char.ToUpper(System.Char)"/>
</member>
<member name="M:Tools.ExtensionsT.CharExtensions.ToUpperInvariant(System.Char)">
 <summary>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</summary>
 <param name="c">A Unicode character.</param>
 <returns>The uppercase equivalent of the c parameter, or the unchanged value of c, if c is already uppercase or not alphabetic.</returns>
 <seealso cref="M:System.Char.ToUpperInvariant(System.Char)"/>
</member>
<member name="T:Tools.ExtensionsT.General">
 <summary>General extension funcions</summary>
</member>
<member name="M:Tools.ExtensionsT.General.NewIfNull``1(``0)">
 <summary>If given object is null creates new instance of it</summary>
 <param name="obj">Object to test</param>
 <typeparam name="T">Type of object</typeparam>
 <returns>If <paramref name="obj"/> is not null returns <paramref name="obj"/> otherwise creates new instance of <typeparamref name="T"/> using default constructor.</returns>
</member>
<member name="M:Tools.ExtensionsT.General.NewIfNull``1(``0[])">
 <summary>If given object is null creates new instance of it</summary>
 <param name="obj">Object to test</param>
 <typeparam name="T">Type of object</typeparam>
 <returns>If <paramref name="obj"/> is not null returns <paramref name="obj"/> otherwise creates new instance of array of <typeparamref name="T"/>.</returns>
</member>
<member name="M:Tools.ExtensionsT.General.NewIfNull``1(System.Nullable{``0})">
 <summary>If given object is null creates new instance of it</summary>
 <param name="obj">Object to test</param>
 <typeparam name="T">Type of object</typeparam>
 <returns>If <paramref name="obj"/> is not null returns <paramref name="obj"/> otherwise default instance of type <typeparamref name="T"/>.</returns>
</member>
<member name="M:Tools.ExtensionsT.General.DoThrow``1(``0)">
 <summary>Throws given exception</summary>
 <param name="ex">Exception to be thrown</param>
 <typeparam name="T">Type of exception to be thrown</typeparam>
 <returns>This function never returns.</returns>
 <exception cref="T:System.Exception">Exception of type <typeparamref name="T"/> <paramref name="ex"/> is always thrown</exception>
 <remarks>You can use this function to thown an exception in place where <c>Throw</c> cannot be used because an expression is expected.</remarks>
</member>
<member name="M:Tools.ExtensionsT.General.ThrowIfNull``1(``0,System.String)">
 <summary>Throws an <see cref="T:System.ArgumentNullException"/> if given object is null</summary>
 <param name="arg">Object to be tested</param>
 <param name="argumentName">Optional. Name of argument for exception. If null "arg" is supplied.</param>
 <typeparam name="T">Type of object. Must be reference type.</typeparam>
 <exception cref="T:System.ArgumentNullException"><paramref name="arg"/> is null</exception>
 <remarks>You should throw your exception yourself whenever possible because place where it was thrown from appears on call stack, however there ara some situations where it is not possible due to programming language limitations (chanied/base CTor call, field initializers, LINQ.</remarks>
 <version version="1.5.3">Parameter <c>ArgumentName</c> renamed to <c>argumentName</c></version>
 <version version="1.5.3">Documentation fix: Throws <see cref="T:System.ArgumentNullException"/> when <paramref name="arg"/> is null. Originally documentation stated tha <see cref="T:System.ArgumentException"/> is thrown, which was not accurate.</version>
</member>
<member name="M:Tools.ExtensionsT.General.ThrowIfNull``2(``0,``1,System.String)">
 <summary>Throws an <see cref="T:System.ArgumentNullException"/> if given objects is null, if it is not null returns another given object</summary>
 <typeparam name="TTest">Type of value to be tested</typeparam>
 <typeparam name="TReturn">Type of value to be returned when test succeds</typeparam>
 <param name="valueToTest">Object to be tested</param>
 <param name="valueToReturn">Value to be returned in case <paramref name="valueToTest"/> is not null</param>
 <param name="argumentName">Optional. Name of argument for exception. If null "valueToTest" is supplied.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="valueToTest"/> is nulll</exception>
 <remarks>You should throw your exception yourself whenever possible because place where it was thrown from appears on call stack, however there ara some situations where it is not possible due to programming language limitations (chanied/base CTor call, field initializers, LINQ.</remarks>
 <version version="1.5.3">This overload is new in version 1.5.3</version>
</member>
<member name="T:Tools.ExtensionsT.StringExtensions">
 <summary>Contains extension methods for working with <see cref="T:System.String"/></summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.IsNullOrEmpty(System.String)">
 <summary>Indicates whether the specified <see cref="T:System.String" /> object is null or an <see cref="F:System.String.Empty" /> string.</summary>
 <param name="s">A <see cref="T:System.String" /> reference.</param>
 <returns>true if the value parameter is null or an empty string (""); otherwise, false.</returns>
 <seealso cref="M:System.String.IsNullOrEmpty(System.String)"/>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.IsNullOrWhiteSpace(System.String)">
 <summary>Indicates whether a specified string is null, empty, or consists only of white-space characters.</summary>
 <param name="s">The string to test.</param>
 <returns>true if the <paramref name="s"/> parameter is null or <see cref="F:System.String.Empty" />, or if <paramref name="s"/> consists exclusively of white-space characters.</returns>
 <seelaso cref="M:System.String.IsNullOrWhiteSpace(System.String)"/>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.Format(System.String,System.Object[])">
 <summary>Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array. A specified parameter supplies culture-specific formatting information.</summary>
 <param name="s">A composite format string.</param>
 <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
 <returns>A copy of format in which the format items have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding instances of <see cref="T:System.Object" /> in args.</returns>
 <exception cref="T:System.ArgumentNullException">format or args is null.</exception>
 <exception cref="T:System.FormatException"><paramref name="s"/> is invalid composite format string.-or- The number indicating an argument to format is less than zero, or greater than or equal to the length of the args array.</exception>
 <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/><seealso cref="M:Tools.ExtensionsT.StringExtensions.f(System.String,System.IFormatProvider,System.Object[])"/>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.Format(System.String,System.IFormatProvider,System.Object[])">
 <summary>Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array. A specified parameter supplies culture-specific formatting information.</summary>
 <param name="s">A composite format string.</param>
 <param name="provider"> An object that supplies culture-specific formatting information.</param>
 <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
 <returns>A copy of format in which the format items have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding instances of <see cref="T:System.Object" /> in args.</returns>
 <exception cref="T:System.ArgumentNullException">format or args is null.</exception>
 <exception cref="T:System.FormatException"><paramref name="s"/> is invalid composite format string.-or- The number indicating an argument to format is less than zero, or greater than or equal to the length of the args array.</exception>
 <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/><seealso cref="M:Tools.ExtensionsT.StringExtensions.f(System.String,System.IFormatProvider,System.Object[])"/>
 <version version="1.5.3">This overload is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.f(System.String,System.Object[])">
 <summary>Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array. A specified parameter supplies culture-specific formatting information.</summary>
 <param name="s">A composite format string.</param>
 <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
 <returns>A copy of format in which the format items have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding instances of <see cref="T:System.Object" /> in args.</returns>
 <exception cref="T:System.ArgumentNullException">format or args is null.</exception>
 <exception cref="T:System.FormatException"><paramref name="s"/> is invalid composite format string.-or- The number indicating an argument to format is less than zero, or greater than or equal to the length of the args array.</exception>
 <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/><seealso cref="M:Tools.ExtensionsT.StringExtensions.Format(System.String,System.IFormatProvider,System.Object[])"/>
 <remarks>This function is shortcut alias of <see cref="M:Tools.ExtensionsT.StringExtensions.Format(System.String,System.IFormatProvider,System.Object[])"/></remarks>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.f(System.String,System.IFormatProvider,System.Object[])">
 <summary>Replaces the format item in a specified <see cref="T:System.String" /> with the text equivalent of the value of a corresponding <see cref="T:System.Object" /> instance in a specified array. A specified parameter supplies culture-specific formatting information.</summary>
 <param name="s">A composite format string.</param>
 <param name="provider"> An object that supplies culture-specific formatting information.</param>
 <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
 <returns>A copy of format in which the format items have been replaced by the <see cref="T:System.String" /> equivalent of the corresponding instances of <see cref="T:System.Object" /> in args.</returns>
 <exception cref="T:System.ArgumentNullException">format or args is null.</exception>
 <exception cref="T:System.FormatException"><paramref name="s"/> is invalid composite format string.-or- The number indicating an argument to format is less than zero, or greater than or equal to the length of the args array.</exception>
 <seealso cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/><seealso cref="M:Tools.ExtensionsT.StringExtensions.Format(System.String,System.IFormatProvider,System.Object[])"/>
 <remarks>This function is shortcut alias of <see cref="M:Tools.ExtensionsT.StringExtensions.Format(System.String,System.IFormatProvider,System.Object[])"/></remarks>
 <version version="1.5.3">This overload is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.Join(System.String[],System.String)">
 <summary>Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified <see cref="T:System.String" /> array, yielding a single concatenated string.</summary>
 <param name="separator">A <see cref="T:System.String" /> to separate items with.</param>
 <param name="strarr">An array of <see cref="T:System.String" />.</param>
 <returns>A <see cref="T:System.String" /> consisting of the elements of value interspersed with the separator string.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="strarr"/> is null.</exception>
 <seealso cref="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})"/>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
 <summary>Concatenates a specified separator <see cref="T:System.String" /> between each element of a specified <see cref="T:System.String" /> array, yielding a single concatenated string.</summary>
 <param name="separator">A <see cref="T:System.String" /> to separate items with.</param>
 <param name="strs">A collection of <see cref="T:System.String" />.</param>
 <returns>A <see cref="T:System.String" /> consisting of the elements of value interspersed with the separator string.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="strs"/> is null.</exception>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.Split(System.String,System.String,System.Int32)">
 <summary>Returns a zero-based, one-dimensional array containing a specified number of substrings.</summary>
 <param name="Expression">Required. String expression containing substrings and delimiters.</param>
 <param name="Delimiter">Optional. Any single character used to identify substring limits. If Delimiter is omitted, the space character (" ") is assumed to be the delimiter.</param>
 <param name="Limit">Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the Delimiter string.</param>
 <returns>String array. If Expression is a zero-length string (""), Split returns a single-element array containing a zero-length string. If Delimiter is a zero-length string, or if it does not appear anywhere in Expression, Split returns a single-element array containing the entire Expression string.</returns>
 <seelaso cref="T:System.String"/><seelaso cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)"/>
 <remarks>This function internally calls <see cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)"/></remarks>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.WhiteSpaceSplit(System.String)">
 <summary>Splits given string by whitespaces</summary>
 <param name="str">String to split</param>
 <returns>Array of non-whitespace blocks in <paramref name="str"/>. In case <paramref name="str"/> is null, returns null.</returns>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.Reverse(System.String)">
 <summary>Reverses a string</summary>
 <param name="value">String to reverse</param>
 <returns><paramref name="value"/> with reversed order of characters. Null when <paramref name="value"/> is null.</returns>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.SubstringAfter(System.String,System.String)">
 <summary>Returns the substring of the value of <paramref name="value"/> that follows in the value of <paramref name="delimiter"/> the first occurrence</summary>
 <param name="value">String to return substring of</param>
 <param name="delimiter">Substring to search for</param>
 <returns>
 Rest of <paramref name="value"/> following first occurence of <paramref name="delimiter"/>.
 If <paramref name="delimiter"/> is null or an empty string returns <paramref name="value"/>.
 If <paramref name="value"/> does not contain <paramref name="delimiter"/> (or <paramref name="value"/> is null) returns an empty string.
 </returns>
 <remarks>This function implements XPath function <a href="http://www.w3.org/TR/xpath-functions/#func-substring-after">substring-after</a>.</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.StringExtensions.SubstringBefore(System.String,System.String)">
 <summary>Returns the substring of the value of <paramref name="value"/> that precedes in the value of <paramref name="delimiter"/> the first occurrence</summary>
 <param name="value">String to return substring of</param>
 <param name="delimiter">Substring to search for</param>
 <returns>
 Part of <paramref name="value"/> from start to start of first occurence of <paramref name="delimiter"/> (exluding it).
 If <paramref name="delimiter"/> is null or an empty string or <paramref name="value"/> does not contain <paramref name="delimiter"/> (or <paramref name="value"/> is null) returns an empty string.
 </returns>
 <remarks>This function implements XPath function <a href="http://www.w3.org/TR/xpath-functions/#func-substring-before">substring-before</a>.</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="T:Tools.ExtensionsT.TypeCodeExtensions">
 <summary>Extension functions for <see cref="T:System.TypeCode"/></summary>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.IsNumber(System.TypeCode)">
 <summary>Gets value idicating if given <see cref="T:System.TypeCode"/> represents numeric type</summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to check</param>
 <returns>True if <paramref name="tc"/> is one of <see cref="F:System.TypeCode.SByte"/>, <see cref="F:System.TypeCode.Byte"/>, <see cref="F:System.TypeCode.Int16"/>, <see cref="F:System.TypeCode.Int32"/>, <see cref="F:System.TypeCode.Int64"/>, <see cref="F:System.TypeCode.UInt16"/>, <see cref="F:System.TypeCode.UInt32"/>, <see cref="F:System.TypeCode.UInt64"/>, <see cref="F:System.TypeCode.Decimal"/>, <see cref="F:System.TypeCode.Single"/>, <see cref="F:System.TypeCode.Double"/></returns>
 <remarks><see cref="F:System.TypeCode.Boolean"/> amd <see cref="F:System.TypeCode.Char"/> are not considered numbers by this function</remarks>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.IsFloating(System.TypeCode)">
 <summary>Gets value idicating if given <see cref="T:System.TypeCode"/> is floating point number</summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to check</param>
 <returns>True if <paramref name="tc"/> is one of <see cref="F:System.TypeCode.Single"/>, <see cref="F:System.TypeCode.Double"/>, <see cref="F:System.TypeCode.Decimal"/></returns>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.IsUnsigned(System.TypeCode)">
 <summary>Gets value idicating if given <see cref="T:System.TypeCode"/> is unsigned type</summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to check</param>
 <returns>True if <paramref name="tc"/> is one of <see cref="F:System.TypeCode.UInt16"/>, <see cref="F:System.TypeCode.UInt32"/>, <see cref="F:System.TypeCode.UInt64"/>, <see cref="F:System.TypeCode.Byte"/>, <see cref="F:System.TypeCode.Char"/></returns>
 <remarks>Although <see cref="F:System.TypeCode.Char"/> is not considered number (by <see cref="M:Tools.ExtensionsT.TypeCodeExtensions.IsNumber(System.TypeCode)"/>), it is considered unsigned by this function</remarks>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.IsBasic(System.TypeCode)">
 <summary>Gets value idicating if <see cref="T:System.TypeCode"/> represents basic type (represented by underlying CIL type)</summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to check</param>
 <returns>True if <paramref name="tc"/> is one of <see cref="F:System.TypeCode.Boolean"/>, <see cref="F:System.TypeCode.Byte"/>, <see cref="F:System.TypeCode.Double"/>, <see cref="F:System.TypeCode.Empty"/>, <see cref="F:System.TypeCode.Char"/>, <see cref="F:System.TypeCode.Int16"/>, <see cref="F:System.TypeCode.Int32"/>, <see cref="F:System.TypeCode.Int64"/>, <see cref="F:System.TypeCode.Object"/>, <see cref="F:System.TypeCode.SByte"/>, <see cref="F:System.TypeCode.Single"/>, <see cref="F:System.TypeCode.String"/>, <see cref="F:System.TypeCode.UInt16"/>, <see cref="F:System.TypeCode.UInt32"/>, <see cref="F:System.TypeCode.UInt64"/></returns>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.IsCLSIncompliant(System.TypeCode)">
 <summary>Gets value idicating if <see cref="T:System.TypeCode"/> represents type which is not CLS compliant</summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to check</param>
 <returns>True if <paramref name="tc"/> is one of <see cref="F:System.TypeCode.SByte"/>, <see cref="F:System.TypeCode.UInt16"/>, <see cref="F:System.TypeCode.UInt32"/>, <see cref="F:System.TypeCode.UInt64"/></returns>
 <seealso cref="T:System.CLSCompliantAttribute"/>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.IsInteger(System.TypeCode)">
 <summary>Gets value indicating if given <see cref="T:System.TypeCode"/> represents integral data type</summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to check</param>
 <returns>True if <paramref name="tc"/> is one of <see cref="F:System.TypeCode.Int16"/>, <see cref="F:System.TypeCode.UInt16"/>, <see cref="F:System.TypeCode.Int32"/>, <see cref="F:System.TypeCode.UInt32"/>, <see cref="F:System.TypeCode.Int64"/>, <see cref="F:System.TypeCode.UInt64"/>, <see cref="F:System.TypeCode.Byte"/>, <see cref="F:System.TypeCode.SByte"/>, <see cref="F:System.TypeCode.Char"/></returns>
 <remarks>Although <see cref="F:System.TypeCode.Char"/> is not considered number (by <see cref="M:Tools.ExtensionsT.TypeCodeExtensions.IsNumber(System.TypeCode)"/>) it is considered integer by this function</remarks>
 <version version="1.5.3">Fix: Always returns false</version>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.GetUnsigned(System.TypeCode)">
 <summary>Gets <see cref="T:System.TypeCode"/> of unsigned type for given <see cref="T:System.TypeCode"/></summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to get unsigned <see cref="T:System.TypeCode"/> for</param>
 <returns>
 <list type="table"><listheader><term><paramref name="tc"/></term><description>return value</description></listheader>
 <item><term><see cref="F:System.TypeCode.Byte"/>, <see cref="F:System.TypeCode.SByte"/></term><description><see cref="F:System.TypeCode.Byte"/></description></item>
 <item><term><see cref="F:System.TypeCode.Int16"/>, <see cref="F:System.TypeCode.UInt16"/></term><see cref="F:System.TypeCode.UInt16"/></item>
 <item><term><see cref="F:System.TypeCode.Int32"/>, <see cref="F:System.TypeCode.UInt32"/></term><see cref="F:System.TypeCode.UInt32"/></item>
 <item><term><see cref="F:System.TypeCode.Int64"/>, <see cref="F:System.TypeCode.UInt64"/></term><see cref="F:System.TypeCode.UInt64"/></item>
 <item><term><see cref="F:System.TypeCode.DateTime"/></term><description><see cref="F:System.TypeCode.DateTime"/></description></item>
 <item><term><see cref="F:System.TypeCode.Boolean"/></term><description><see cref="F:System.TypeCode.Boolean"/></description></item>
 <item><term><see cref="F:System.TypeCode.Char"/></term><description><see cref="F:System.TypeCode.Char"/></description></item>
 <item><term>Any other</term><description>Throws <see cref="T:System.ArgumentException"/></description></item>
 </list></returns>
 <exception cref="T:System.ArgumentException">Unsigned <see cref="T:System.TypeCode"/> for <paramref name="tc"/> cannot be found</exception>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.GetSigned(System.TypeCode)">
 <summary>Gets <see cref="T:System.TypeCode"/> of signed type for given <see cref="T:System.TypeCode"/></summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to get signed <see cref="T:System.TypeCode"/> for</param>
 <returns>
 <list type="table"><listheader><term><paramref name="tc"/></term><description>return value</description></listheader>
 <item><term><see cref="F:System.TypeCode.Byte"/>, <see cref="F:System.TypeCode.SByte"/></term><description><see cref="F:System.TypeCode.SByte"/></description></item>
 <item><term><see cref="F:System.TypeCode.Int16"/>, <see cref="F:System.TypeCode.UInt16"/>, <see cref="F:System.TypeCode.Char"/></term><see cref="F:System.TypeCode.Int16"/></item>
 <item><term><see cref="F:System.TypeCode.Int32"/>, <see cref="F:System.TypeCode.UInt32"/></term><see cref="F:System.TypeCode.Int32"/></item>
 <item><term><see cref="F:System.TypeCode.Int64"/>, <see cref="F:System.TypeCode.UInt64"/></term><see cref="F:System.TypeCode.Int64"/></item>
 <item><term><see cref="F:System.TypeCode.Boolean"/></term><description><see cref="F:System.TypeCode.Boolean"/></description></item>
 <item><term><see cref="F:System.TypeCode.Single"/></term><description><see cref="F:System.TypeCode.Single"/></description></item>
 <item><term><see cref="F:System.TypeCode.Double"/></term><description><see cref="F:System.TypeCode.Double"/></description></item>
 <item><term><see cref="F:System.TypeCode.Decimal"/></term><description><see cref="F:System.TypeCode.Decimal"/></description></item>
 <item><term>Any other</term><description>Throws <see cref="T:System.ArgumentException"/></description></item>
 </list></returns>
 <exception cref="T:System.ArgumentException">Signed <see cref="T:System.TypeCode"/> for <paramref name="tc"/> cannot be found</exception>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.GetBigger(System.TypeCode)">
 <summary>Gets <see cref="T:System.TypeCode"/> of numeric type that is bigger than given <see cref="T:System.TypeCode"/></summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to get bigger type for</param>
 <returns><list type="table">
 <listheader><term><paramref name="tc"/></term><description>Return value</description></listheader>
 <item><term><see cref="F:System.TypeCode.SByte"/></term><description><see cref="F:System.TypeCode.Int16"/></description></item>
 <item><term><see cref="F:System.TypeCode.Int16"/></term><description><see cref="F:System.TypeCode.Int32"/></description></item>
 <item><term><see cref="F:System.TypeCode.Int32"/></term><description><see cref="F:System.TypeCode.Int64"/></description></item>
 <item><term><see cref="F:System.TypeCode.Byte"/></term><description><see cref="F:System.TypeCode.UInt16"/></description></item>
 <item><term><see cref="F:System.TypeCode.UInt16"/>, <see cref="F:System.TypeCode.Char"/></term><description><see cref="F:System.TypeCode.UInt32"/></description></item>
 <item><term><see cref="F:System.TypeCode.UInt32"/></term><description><see cref="F:System.TypeCode.UInt64"/></description></item>
 <item><term><see cref="F:System.TypeCode.Int64"/>, <see cref="F:System.TypeCode.UInt64"/></term><description><see cref="F:System.TypeCode.Single"/></description></item>
 <item><term><see cref="F:System.TypeCode.Single"/>, <see cref="F:System.TypeCode.Decimal"/></term><description><see cref="F:System.TypeCode.Double"/></description></item>
 <item><term><see cref="F:System.TypeCode.Boolean"/></term><description><see cref="F:System.TypeCode.Byte"/></description></item>
 <item><term>Any other</term><description>Throws <see cref="T:System.ArgumentException"/></description></item>
 </list></returns>
 <exception cref="T:System.ArgumentException"><paramref name="tc"/> is not numeric type or it is <see cref="F:System.TypeCode.Double"/></exception>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.Compare(System.TypeCode,System.TypeCode)">
 <summary>Compares size of 2 types represented by <see cref="T:System.TypeCode">TypeCodes</see> (in manner of <see cref="M:Tools.ExtensionsT.TypeCodeExtensions.GetBigger(System.TypeCode)"/>)</summary>
 <param name="tc">A <see cref="T:System.TypeCode"/></param>
 <param name="other">A <see cref="T:System.TypeCode"/></param>
 <returns>
 1 if type represented by <paramref name="tc"/> is bigger than type represented by <paramref name="other"/>;
 0 if <paramref name="tc"/> equals to <paramref name="other"/> or <paramref name="tc"/> and <paramref name="other"/> represent type of same size (<see cref="F:System.TypeCode.Char"/> and <see cref="F:System.TypeCode.UInt16"/>);
 1 if type represented by <paramref name="tc"/> is smaller than type represented by <paramref name="other"/>;
 if if types represented by <paramref name="tc"/> and <paramref name="other"/> cannot be compared.
 </returns>
 <remarks>Following rules apply
 <list type="bullet">
 <item><see cref="F:System.TypeCode.Boolean"/> is the smallest</item>
 <item><see cref="F:System.TypeCode.Double"/> is the biggest</item>
 <item>Signed and unsigned type of same size cannot be compared</item>
 <item>Integral type of bigger size is always considered bigger than integral type of smaller size not depending if signed or unsigned</item>
 <item>Floating point types (<see cref="F:System.TypeCode.Single"/>, <see cref="F:System.TypeCode.Double"/>, <see cref="F:System.TypeCode.Decimal"/>) are bigger than integral types</item>
 <item><see cref="F:System.TypeCode.Decimal"/> cannot be compared to <see cref="F:System.TypeCode.Single"/></item>
 <item><see cref="F:System.TypeCode.Char"/> is treated as <see cref="F:System.TypeCode.UInt16"/></item>
 <item>Non-numeric and unknown types can be compared only to itself</item>
 </list>
 This is comparizon logic: <c>{<see cref="F:System.TypeCode.Boolean">bool</see>}-{<see cref="F:System.TypeCode.SByte">sbyte</see>;<see cref="F:System.TypeCode.Byte">byte</see>}-{<see cref="F:System.TypeCode.Int16">i16</see>;<see cref="F:System.TypeCode.UInt16">ui16</see>=<see cref="F:System.TypeCode.Char">char</see>}-{<see cref="F:System.TypeCode.Int32">i32</see>,<see cref="F:System.TypeCode.UInt32">ui32</see>}-{<see cref="F:System.TypeCode.Int64">i64</see>,<see cref="F:System.TypeCode.UInt64">ui64</see>}-{<see cref="F:System.TypeCode.Single">single</see>,<see cref="F:System.TypeCode.Decimal">decimal</see>}-{<see cref="F:System.TypeCode.Double">double</see>}</c>
 </remarks>
</member>
<member name="M:Tools.ExtensionsT.TypeCodeExtensions.ByteSize(System.TypeCode)">
 <summary>Gets size in bytes of type represented by <see cref="T:System.TypeCode"/></summary>
 <param name="tc"><see cref="T:System.TypeCode"/> to get size of type represented by</param>
 <returns>Size in bytes of given type.</returns>
 <remarks>
 Values for standard numeric types (integral, <see cref="F:System.TypeCode.Single"/>, <see cref="F:System.TypeCode.Double"/> and <see cref="F:System.TypeCode.Char"/>) are canonical.
 For <see cref="F:System.TypeCode.Decimal"/> returns 16 and for <see cref="F:System.TypeCode.DateTime"/> 8.
 For <see cref="F:System.TypeCode.Boolean"/> returns <see cref="P:System.IntPtr.Size"/> however this does not necesarily represents actual size of <see cref="T:System.Boolean"/> on implementation.
 For <see cref="F:System.TypeCode.Empty"/>, <see cref="F:System.TypeCode.Object"/> and <see cref="F:System.TypeCode.DBNull"/> returns <see cref="P:System.IntPtr.Size"/> which depends on platform (32 or 64).
 </remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="tc"/> is not member of <see cref="T:System.TypeCode"/></exception>
</member>
<member name="T:Tools.ExtensionsT.Numbers">
 <summary>Contains extension methods for working with numbers of basic data types</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.IsNaN(System.Single)">
 <summary>Returns a value indicating whether the specified number evaluates to not a number (<see cref="F:System.Single.NaN" />).</summary>
 <param name="n">A single-precision floating-point number.</param>
 <returns>true if f evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.IsNaN(System.Double)">
 <summary>Returns a value indicating whether the specified number evaluates to a value that is not a number (<see cref="F:System.Double.NaN" />).</summary>
 <param name="n">A double-precision floating-point number.</param>
 <returns>true if d evaluates to <see cref="F:System.Double.NaN" />; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.IsInfinity(System.Single)">
 <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</summary>
 <param name="n">A single-precision floating-point number.</param>
 <returns>true if f evaluates to <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.IsInfinity(System.Double)">
 <summary>Returns a value indicating whether the specified number evaluates to negative or positive infinity</summary>
 <param name="n">A double-precision floating-point number.</param>
 <returns>true if d evaluates to <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.IsNegativeInfinity(System.Single)">
 <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
 <param name="n">A single-precision floating-point number.</param>
 <returns>true if f evaluates to <see cref="F:System.Single.NegativeInfinity" />; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.IsPositiveInfinity(System.Single)">
 <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
 <param name="n">A single-precision floating-point number.</param>
 <returns>true if f evaluates to <see cref="F:System.Single.PositiveInfinity" />; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.IsNegativeInfinity(System.Double)">
 <summary>Returns a value indicating whether the specified number evaluates to negative infinity.</summary>
 <param name="n">A double-precision floating-point number.</param>
 <returns>true if d evaluates to <see cref="F:System.Double.NegativeInfinity" />; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.IsPositiveInfinity(System.Double)">
 <summary>Returns a value indicating whether the specified number evaluates to positive infinity.</summary>
 <param name="n">A double-precision floating-point number.</param>
 <returns>true if d evaluates to <see cref="F:System.Double.PositiveInfinity" />; otherwise, false.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBits(System.Decimal)">
 <summary>Converts the value of a specified instance of <see cref="T:System.Decimal" /> to its equivalent binary representation.</summary>
 <param name="n">A <see cref="T:System.Decimal" /> value.</param>
 <returns>A 32-bit signed integer array with four elements that contain the binary representation of d.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.Low(System.UInt16)">
 <summary>Gets low (least significant) byte from <see cref="T:System.UInt16"/> value</summary>
 <param name="n">Value to get byte from</param>
 <returns>Least significant byte of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.High(System.UInt16)">
 <summary>Gets high (most significant) byte from <see cref="T:System.UInt16"/> value</summary>
 <param name="n">Value to get byte from</param>
 <returns>Most significant of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.High(System.UInt32)">
 <summary>Gets high (most significant) word (2 bytes) from <see cref="T:System.UInt32"/> value</summary>
 <param name="n">Value to get word from</param>
 <returns>Most significant word of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.Low(System.UInt32)">
 <summary>Gets low (leastLeast significant) word (2 bytes) from <see cref="T:System.UInt32"/> value</summary>
 <param name="n">Value to get word from</param>
 <returns>Least significant word of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.High(System.UInt64)">
 <summary>Gets high (most significant) dword (4 bytes) from <see cref="T:System.UInt64"/> value</summary>
 <param name="n">Value to get dword from</param>
 <returns>Most significant dword of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.Low(System.UInt64)">
 <summary>Gets low (least significant) dword (4 bytes) from <see cref="T:System.UInt64"/> value</summary>
 <param name="n">Value to get dword from</param>
 <returns>Least significant dword of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.Low(System.Int16)">
 <summary>Gets low (least significant) byte from <see cref="T:System.Int16"/> value</summary>
 <param name="n">Value to get byte from</param>
 <returns>Least significant byte of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.High(System.Int16)">
 <summary>Gets high (most significant) byte from <see cref="T:System.Int16"/> value</summary>
 <param name="n">Value to get byte from</param>
 <returns>Most significant byte of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.Low(System.Int32)">
 <summary>Gets low (least significant) word (2 bytes) from <see cref="T:System.Int32"/> value</summary>
 <param name="n">Value to get word from</param>
 <returns>Least significant word of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.High(System.Int32)">
 <summary>Gets high (most significant) word (2 bytes) from <see cref="T:System.Int32"/> value</summary>
 <param name="n">Value to get word from</param>
 <returns>Most significant word of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.Low(System.Int64)">
 <summary>Gets low (least significant) dword (4 bytes) from <see cref="T:System.Int64"/> value</summary>
 <param name="n">Value to get dword from</param>
 <returns>Least significant dword of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.High(System.Int64)">
 <summary>Gets high (most significant) dword (4 bytes) from <see cref="T:System.Int64"/> value</summary>
 <param name="n">Value to get dword from</param>
 <returns>Most significant dword of <paramref name="n"/></returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBits(System.Byte)">
 <summary>Gets bits form given <see cref="T:System.Byte"/></summary>
 <param name="n">Number to get bits of</param>
 <returns>Bits from given byte. Index 0 is LSB, index 7 is MSB.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBits(System.UInt16)">
 <summary>Gets bits form given <see cref="T:System.UInt16"/></summary>
 <param name="n">Number to get bits of</param>
 <returns>Bits from given byte. Index 0 is LSB, index 15 is MSB.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBits(System.UInt32)">
 <summary>Gets bits form given <see cref="T:System.UInt32"/></summary>
 <param name="n">Number to get bits of</param>
 <returns>Bits from given byte. Index 0 is LSB, index 31 is MSB.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBits(System.UInt64)">
 <summary>Gets bits form given <see cref="T:System.UInt64"/></summary>
 <param name="n">Number to get bits of</param>
 <returns>Bits from given byte. Index 0 is LSB, index 63 is MSB.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBits(System.SByte)">
 <summary>Gets bits form given <see cref="T:System.SByte"/></summary>
 <param name="n">Number to get bits of</param>
 <returns>Bits from given byte. Index 0 is LSB, index 7 is MSB.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBits(System.Int16)">
 <summary>Gets bits form given <see cref="T:System.Int16"/></summary>
 <param name="n">Number to get bits of</param>
 <returns>Bits from given byte. Index 0 is LSB, index 15 is MSB.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBits(System.Int32)">
 <summary>Gets bits form given <see cref="T:System.Int32"/></summary>
 <param name="n">Number to get bits of</param>
 <returns>Bits from given byte. Index 0 is LSB, index 31 is MSB.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBits(System.Int64)">
 <summary>Gets bits form given <see cref="T:System.Int64"/></summary>
 <param name="n">Number to get bits of</param>
 <returns>Bits from given byte. Index 0 is LSB, index 63 is MSB.</returns>
</member>
<member name="M:Tools.ExtensionsT.Numbers.MSB(System.Byte)">
 <summary>Gets most significant bit (MSB) from given number</summary>
 <param name="n">Number to get MSB from</param>
 <remarks>True if MSb of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.MSB(System.SByte)">
 <summary>Gets most significant bit (MSB) from given number</summary>
 <param name="n">Number to get MSB from</param>
 <remarks>True if MSb of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.MSB(System.Int16)">
 <summary>Gets most significant bit (MSB) from given number</summary>
 <param name="n">Number to get MSB from</param>
 <remarks>True if MSb of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.MSB(System.UInt16)">
 <summary>Gets most significant bit (MSB) from given number</summary>
 <param name="n">Number to get MSB from</param>
 <remarks>True if MSb of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.MSB(System.Int32)">
 <summary>Gets most significant bit (MSB) from given number</summary>
 <param name="n">Number to get MSB from</param>
 <remarks>True if MSb of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.MSB(System.UInt32)">
 <summary>Gets most significant bit (MSB) from given number</summary>
 <param name="n">Number to get MSB from</param>
 <remarks>True if MSb of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.MSB(System.Int64)">
 <summary>Gets most significant bit (MSB) from given number</summary>
 <param name="n">Number to get MSB from</param>
 <remarks>True if MSb of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.MSB(System.UInt64)">
 <summary>Gets most significant bit (MSB) from given number</summary>
 <param name="n">Number to get MSB from</param>
 <remarks>True if MSb of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.LSB(System.Byte)">
 <summary>Gets least significant bit (LSB) from given number</summary>
 <param name="n">Number to get LSB from</param>
 <remarks>True if LSB of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.LSB(System.SByte)">
 <summary>Gets least significant bit (LSB) from given number</summary>
 <param name="n">Number to get LSB from</param>
 <remarks>True if LSB of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.LSB(System.Int16)">
 <summary>Gets least significant bit (LSB) from given number</summary>
 <param name="n">Number to get LSB from</param>
 <remarks>True if LSB of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.LSB(System.UInt16)">
 <summary>Gets least significant bit (LSB) from given number</summary>
 <param name="n">Number to get LSB from</param>
 <remarks>True if LSB of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.LSB(System.Int32)">
 <summary>Gets least significant bit (LSB) from given number</summary>
 <param name="n">Number to get LSB from</param>
 <remarks>True if LSB of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.LSB(System.UInt32)">
 <summary>Gets least significant bit (LSB) from given number</summary>
 <param name="n">Number to get LSB from</param>
 <remarks>True if LSB of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.LSB(System.Int64)">
 <summary>Gets least significant bit (LSB) from given number</summary>
 <param name="n">Number to get LSB from</param>
 <remarks>True if LSB of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.LSB(System.UInt64)">
 <summary>Gets least significant bit (LSB) from given number</summary>
 <param name="n">Number to get LSB from</param>
 <remarks>True if LSB of <paramref name="n"/> is set, false otherwise</remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.BitwiseSame(System.Byte)">
 <summary>Gets signed number with same hexadecimal value as given unsigned number</summary>
 <param name="n">Number to convert</param>
 <remarks>Number that has binary same value if <paramref name="n"/> but is signed</remarks>
 <seelaso cref="M:Tools.NumericsT.ByteUnion.BitwiseSame(System.Byte)"/>
 <version version="1.5.3">Implementation changed form arithmetic operation to use <see cref="T:Tools.NumericsT.ByteUnion"/>.</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.BitwiseSame(System.UInt16)">
 <summary>Gets signed number with same hexadecimal value as given unsigned number</summary>
 <param name="n">Number to convert</param>
 <remarks>Number that has binary same value if <paramref name="n"/> but is signed</remarks>
 <seelaso cref="M:Tools.NumericsT.ShortUnion.BitwiseSame(System.Int16)"/>
 <version version="1.5.3">Implementation changed form arithmetic operation to use <see cref="T:Tools.NumericsT.ShortUnion"/>.</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.BitwiseSame(System.UInt32)">
 <summary>Gets signed number with same hexadecimal value as given unsigned number</summary>
 <param name="n">Number to convert</param>
 <remarks>Number that has binary same value if <paramref name="n"/> but is signed</remarks>
 <seelaso cref="M:Tools.NumericsT.IntegerUnion.BitwiseSame(System.Int32)"/>
 <version version="1.5.3">Implementation changed form arithmetic operation to use <see cref="T:Tools.NumericsT.IntegerUnion"/>.</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.BitwiseSame(System.UInt64)">
 <summary>Gets signed number with same hexadecimal value as given unsigned number</summary>
 <param name="n">Number to convert</param>
 <remarks>Number that has binary same value if <paramref name="n"/> but is signed</remarks>
 <seelaso cref="M:Tools.NumericsT.LongUnion.BitwiseSame(System.Int64)"/>
 <version version="1.5.3">Implementation changed form arithmetic operation to use <see cref="T:Tools.NumericsT.LongUnion"/>.</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.BitwiseSame(System.SByte)">
 <summary>Gets unsigned number with same hexadecimal value as given signed number</summary>
 <param name="n">Number to convert</param>
 <remarks>Number that has binary same value if <paramref name="n"/> but is unsigned</remarks>
 <seelaso cref="M:Tools.NumericsT.ByteUnion.BitwiseSame(System.Byte)"/>
 <version version="1.5.3">Implementation changed form arithmetic operation to use <see cref="T:Tools.NumericsT.ByteUnion"/>.</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.BitwiseSame(System.Int16)">
 <summary>Gets unsigned number with same hexadecimal value as given signed number</summary>
 <param name="n">Number to convert</param>
 <remarks>Number that has binary same value if <paramref name="n"/> but is unsigned</remarks>
 <seelaso cref="M:Tools.NumericsT.ShortUnion.BitwiseSame(System.Int16)"/>
 <version version="1.5.3">Implementation changed form arithmetic operation to use <see cref="T:Tools.NumericsT.ShortUnion"/>.</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.BitwiseSame(System.Int32)">
 <summary>Gets unsigned number with same hexadecimal value as given signed number</summary>
 <param name="n">Number to convert</param>
 <remarks>Number that has binary same value if <paramref name="n"/> but is unsigned</remarks>
 <seelaso cref="M:Tools.NumericsT.IntegerUnion.BitwiseSame(System.Int32)"/>
 <version version="1.5.3">Implementation changed form arithmetic operation to use <see cref="T:Tools.NumericsT.IntegerUnion"/>.</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.BitwiseSame(System.Int64)">
 <summary>Gets unsigned number with same hexadecimal value as given signed number</summary>
 <param name="n">Number to convert</param>
 <remarks>Number that has binary same value if <paramref name="n"/> but is unsigned</remarks>
 <seelaso cref="M:Tools.NumericsT.LongUnion.BitwiseSame(System.Int64)"/>
 <version version="1.5.3">Implementation changed form arithmetic operation to use <see cref="T:Tools.NumericsT.LongUnion"/>.</version>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBit(System.Byte,System.Byte)">
 <summary>Gets value of given bit of <see cref="T:System.Byte"/></summary>
 <param name="n">Number to get bit of</param>
 <param name="bit">Number of bit to get (0 for LSB, 7 for MSB)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is greater than 7</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBit(System.UInt16,System.Byte)">
 <summary>Gets value of given bit of <see cref="T:System.UInt16"/></summary>
 <param name="n">Number to get bit of</param>
 <param name="bit">Number of bit to get (0 for LSB, 15 for MSB)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is greater than 15</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBit(System.UInt32,System.Byte)">
 <summary>Gets value of given bit of <see cref="T:System.UInt32"/></summary>
 <param name="n">Number to get bit of</param>
 <param name="bit">Number of bit to get (0 for LSB, 31 for MSB)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is greater than 31</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBit(System.UInt64,System.Byte)">
 <summary>Gets value of given bit of <see cref="T:System.UInt64"/></summary>
 <param name="n">Number to get bit of</param>
 <param name="bit">Number of bit to get (0 for LSB, 63 for MSB)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is greater than 63</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBit(System.SByte,System.Byte)">
 <summary>Gets value of given bit of <see cref="T:System.SByte"/></summary>
 <param name="n">Number to get bit of</param>
 <param name="bit">Number of bit to get (0 for LSB, 7 for MSB)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is greater than 7</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBit(System.Int16,System.Byte)">
 <summary>Gets value of given bit of <see cref="T:System.Int16"/></summary>
 <param name="n">Number to get bit of</param>
 <param name="bit">Number of bit to get (0 for LSB, 15 for MSB)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is greater than 15</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBit(System.Int32,System.Byte)">
 <summary>Gets value of given bit of <see cref="T:System.Int32"/></summary>
 <param name="n">Number to get bit of</param>
 <param name="bit">Number of bit to get (0 for LSB, 31 for MSB)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is greater than 31</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.GetBit(System.Int64,System.Byte)">
 <summary>Gets value of given bit of <see cref="T:System.UInt64"/></summary>
 <param name="n">Number to get bit of</param>
 <param name="bit">Number of bit to get (0 for LSB, 63 for MSB)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bit"/> is greater than 63</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.SetBit(System.Byte@,System.Byte,System.Boolean)">
 <summary>Sets value of given bit in number</summary>
 <param name="n">Passed by reference. Number to change bit in</param>
 <param name="bit">Number of bit to be set. 0 for LSB, 7 for MSB</param>
 <param name="value">New value of bit number <paramref name="bit"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="bit"/> is greater than 7</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.SetBit(System.SByte@,System.Byte,System.Boolean)">
 <summary>Sets value of given bit in number</summary>
 <param name="n">Passed by reference. Number to change bit in</param>
 <param name="bit">Number of bit to be set. 0 for LSB, 7 for MSB</param>
 <param name="value">New value of bit number <paramref name="bit"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="bit"/> is greater than 7</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.SetBit(System.UInt16@,System.Byte,System.Boolean)">
 <summary>Sets value of given bit in number</summary>
 <param name="n">Passed by reference. Number to change bit in</param>
 <param name="bit">Number of bit to be set. 0 for LSB, 15 for MSB</param>
 <param name="value">New value of bit number <paramref name="bit"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="bit"/> is greater than 15</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.SetBit(System.Int16@,System.Byte,System.Boolean)">
 <summary>Sets value of given bit in number</summary>
 <param name="n">Passed by reference. Number to change bit in</param>
 <param name="bit">Number of bit to be set. 0 for LSB, 15 for MSB</param>
 <param name="value">New value of bit number <paramref name="bit"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="bit"/> is greater than 15</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.SetBit(System.Int32@,System.Byte,System.Boolean)">
 <summary>Sets value of given bit in number</summary>
 <param name="n">Passed by reference. Number to change bit in</param>
 <param name="bit">Number of bit to be set. 0 for LSB, 31 for MSB</param>
 <param name="value">New value of bit number <paramref name="bit"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="bit"/> is greater than 31</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.SetBit(System.Int64@,System.Byte,System.Boolean)">
 <summary>Sets value of given bit in number</summary>
 <param name="n">Passed by reference. Number to change bit in</param>
 <param name="bit">Number of bit to be set. 0 for LSB, 63 for MSB</param>
 <param name="value">New value of bit number <paramref name="bit"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="bit"/> is greater than 63</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.SetBit(System.UInt32@,System.Byte,System.Boolean)">
 <summary>Sets value of given bit in number</summary>
 <param name="n">Passed by reference. Number to change bit in</param>
 <param name="bit">Number of bit to be set. 0 for LSB, 31 for MSB</param>
 <param name="value">New value of bit number <paramref name="bit"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="bit"/> is greater than 31</exception>
</member>
<member name="M:Tools.ExtensionsT.Numbers.SetBit(System.UInt64@,System.Byte,System.Boolean)">
 <summary>Sets value of given bit in number</summary>
 <param name="n">Passed by reference. Number to change bit in</param>
 <param name="bit">Number of bit to be set. 0 for LSB, 63 for MSB</param>
 <param name="value">New value of bit number <paramref name="bit"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="bit"/> is greater than 63</exception>
</member>
<member name="T:Tools.ExtensionsT.StringFormatting">
 <summary>Provides string formatting</summary>
 <remarks>Formatting rules:
 <para>If C#-like backslash (\) escape sequences are allowed formating combines C#-like string escaping and formatting used by <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/>.</para>
 <para>Escaping rules:</para>
 <list type="table"><listheader><term>Escape sequence</term><description>Meaning</description></listheader>
 <item><term>\a</term><description>Alert 0x7 (only when C#-style escape sequences are allowed)</description></item>
 <item><term>\b</term><description>Backspace 0x8 (only when C#-style escape sequences are allowed)</description></item>
 <item><term>\f</term><description>Form feed 0xC (only when C#-style escape sequences are allowed)</description></item>
 <item><term>\n</term><description>New line 0xA (only when C#-style escape sequences are allowed)</description></item>
 <item><term>\r</term><description>Carriage return 0xD (only when C#-style escape sequences are allowed)</description></item>
 <item><term>\t</term><description>Horizontal tab 0x9 (only when C#-style escape sequences are allowed)</description></item>
 <item><term>\v</term><description>Vertical tab 0xB (only when C#-style escape sequences are allowed)</description></item>
 <item><term>\.</term><description>Empty string (ignored; only when C#-style escape sequences are allowed)</description></item>
 <item><term>\U[0-9A-Za-z]+, \u[0-9A-Za-z]+, \X[0-9A-Za-z]+, \x[0-9A-Za-z]+</term><description>Hexadecimal Unicode escape sequence. Given hexadecimal number of any length is passed to <see cref="M:System.Char.ConvertFromUtf32(System.Int32)"/>.  (Only when C#-style escape sequences are allowed)</description></item>
 <item><term>\[0-9]+</term><description>Decimal Unicode escape sequence. Given decimal number of any length is passed to <see cref="M:System.Char.ConvertFromUtf32(System.Int32)"/>  (only when C#-style escape sequences are allowed).</description></item>
 <item><term>\&lt;any other character></term><description>The character, not the backslash.</description></item>
 <item><term>{{</term><description>{ (only when formatting is allowed; {{ otherwise)</description></item>
 <item><term>}}</term><description>} (only when formatting is allowed; }} otherwise)<note>Unlike when using <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/> it is not error to have } alone in string.</note></description></item>
 </list>
 <para>
 For various <see cref="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)"/> and <see cref="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)"/> overloads escapes also work in name and format part.
 They does not work in align part. ({name,align:format|transform})
 </para>
 <para>For various <see cref="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)"/> and <see cref="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)"/> overloads additional rules apply:</para>
 <list type="table">
 <listheader><term>Escape sequence</term><description>Description</description></listheader>
 <item><term>::</term><description>Only in placeholder name part: :</description></item>
 <item><term>,,</term><description>Only in placeholder name part: ,</description></item>
 <item><term>||</term><description>Only in placeholder name, format or transformation part: |</description></item>
 <item><term>{}</term><description>An empty string (only immediately before or after placeholder). This rule was added for conflict resolution, see below.</description></item>
 </list>
 <note>You can also use \: and \, to escape : and , (only when C#-style escaping is allowed).</note>
 <para>Conflict resolution (only in <see cref="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)"/> and <see cref="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)"/>):</para>
 <para>
 {{{Name}}} is translated as "{" + value of "Name}". It would be impossible to specify value of "{Name" or value of something + "}". Thus additional rules was apply:
 {} is treated as an empty string only when:
 </para>
 <list type="bullet">
 <item>It immediately follows closing } of placeholder</item>
 <item>It immediately precedes opening { of placeholder. Exception: {{} is not treated this way. Special behavior: {}{{ - {{ does not mean escape of {, it's treated as first chanacter of placeholder name</item>
 </list>
 <para>In particular following escape sequences are available:</para>
 <list type="table"><listheader><term>Escape sequence</term><description>Meaning</description></listheader>
 <item><term>\0</term><description>Nullchar</description></item>
 <item><term>\\</term><description>\</description></item>
 <item><term>\"</term><description>"</description></item>
 <item><term>\'</term><description>'</description></item>
 </list>
 <para>Be careful when typing such string in languages that processes it like C#, C++ or PHP. Get output \ from escaping \\\\ must be typed.</para>
 <para>Following rules apply to formatting (only when formating is being done):</para>
 <list type="bullet">
 <item>String may contain placeholders of arguments being formatted (passed in array). Each placeholder refers to index within the array.</item>
 <item>Placeholder is in format  {index[,alignment][:formatString][|transformation]*}</item>
 <item>Index is any non-negative decimal integral number [0-9]+</item>
 <item>
 Alignment is optional, preceded with comma and it is -?[0-9]+ decimal integral number declaring minimal width of string replacing the placeholder.
 Negative for left-align, positive for right align. If padding is necessary space is used. Trimming never occurs.
 </item>
 <item>
 FormatString is optional formatting string passed to formating method of argument.
 Ignored when argument does implement neither <see cref="T:System.ICustomFormatter"/> nor <see cref="T:System.IFormattable"/>.
 </item>
 <item>
 Transformation is optional transformation identifier (case-insensitive), multiple identifiers can specifies be separated by |.
 Transformation identifiers must be registered in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/>. There are several predefined transformations.
 A transformation task a string coming from formatting result and transform it. It can be used e.g. for HTML encoding.
 </item>
 </list>
 <para>In format string escaping is done in same way as described above.</para>
 </remarks>
 <version version="1.5.2">Module introduced</version>
 <version version="1.5.3">In 1.5.2 the module was not made public by mistake - so, accessibility changed from Friend (internal) to Public.</version>
 <version version="1.5.4">Fixes in documentation (wrong formatting and clarification)</version>
 <version version="1.5.4">Added various <see cref="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)"/> and <see cref="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)"/> overloads</version>
 <version version="1.5.4">Added documentation for transformations</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CFormat(System.String,System.IFormatProvider,System.Object[])">
 <summary>Formats and escape string according to rules described for <see cref="T:Tools.ExtensionsT.StringFormatting"/></summary>
 <param name="str">Formatting string</param>
 <param name="Args">Objects to format</param>
 <returns>String formatted</returns>
 <param name="provider">Formatting provider. If it implements <see cref="T:Tools.ExtensionsT.IFormattingContextProvider"/> contextual replacements are possible.</param>
 <exception cref="T:System.FormatException"><paramref name="str"/> is invalid format string</exception>
 <version version="1.5.4">Transformations (|) are now supported. This can cause breaking changes.</version>
 <version version="1.5.4">Parameter <c>Args</c> renamed to <c>args</c>.</version>
 <version version="1.5.4">Parameter <paramref name="provider"/> has now specific support for <see cref="T:Tools.ExtensionsT.IFormattingContextProvider"/>.</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CEscape(System.String)">
 <summary>Escapes string according to rules described for <see cref="T:Tools.ExtensionsT.StringFormatting"/> without formatting it</summary>
 <param name="str">String to un-escape</param>
 <returns>String unescaped</returns>
 <exception cref="T:System.FormatException"><paramref name="str"/> contains invalid escape sequence</exception>
 <remarks>This method does not allow formatting, so "{{" gets to output as "{{" and "}}" as "}}".</remarks>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CFormat(System.String,System.Object[])">
 <summary>Formats and escape string according to rules described for <see cref="T:Tools.ExtensionsT.StringFormatting"/></summary>
 <param name="str">Formatting string</param>
 <param name="Args">Objects to format</param>
 <returns>String formatted</returns>
 <exception cref="T:System.FormatException"><paramref name="str"/> is invalid format string</exception>
 <remarks>This method uses <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/></remarks>
 <version version="1.5.4">Transformations (|) are now supported. This can cause breaking changes.</version>
 <version version="1.5.4">Parameter <c>Args</c> renamed to <c>args</c>.</version>
</member>
<member name="T:Tools.ExtensionsT.StringFormatting.CFormatFSA">
 <summary>Fine State Automaton states for string formatting and escaping</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.String">
 <summary>Normal state</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.Open1">
 <summary>{ in normal</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.Close1">
 <summary>} in normal</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.Back">
 <summary>\ in normal</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.X">
 <summary>\x, \X, \u, \U in normal</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.Xnext">
 <summary>\x, \X, \u, \U and hexanumber in normal</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.NumEscape">
 <summary>\ and number in normal</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.ArgNum">
 <summary>{0</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.Comma">
 <summary>{0,</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.Width">
 <summary>{0,0, {0,-0</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.CustomFormat">
 <summary>Custom format</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.cOpen1">
 <summary>{ in format</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.cClose1">
 <summary>} in format</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.MinusWidth">
 <summary>{0,-</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.CustomFormatPipe">
 <summary>{0:aa|</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.TransformName">
 <summary>{0| or {0:x|a etc.</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.TransformNamePipe">
 <summary>{0|a| or {0:x|a| etc.</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.CFormatFSA.TransformNameBack">
 <summary>{0|a\ or {0:x|a\ etc.</summary>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CFormat(System.IFormatProvider,System.String,System.Object[],System.Boolean)">
 <summary>Internally performs the formatting process</summary>
 <param name="provider">Provider providing formatting. If it implements <see cref="T:Tools.ExtensionsT.IFormattingContextProvider"/> contextual replacements are possible.</param>
 <param name="str">Formatting string</param>
 <param name="args">Arguments to format</param>
 <param name="format">True to do formatting and escaping, false to do escaping only</param>
 <returns>String formatted</returns>
 <exception cref="T:System.FormatException"><paramref name="str"/> contains invalid format string</exception>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.FormatInternal(System.Int32,System.Int32,System.String,System.Object[],System.IFormatProvider,System.Collections.Generic.IEnumerable{System.Text.StringBuilder})">
 <summary>Formats object using format string, width and format provider</summary>
 <param name="argNum">Number of argument - index to <paramref name="Args"/></param>
 <param name="width">Specifies minimal width of returned string. Negative for left align, positive for right align.</param>
 <param name="format">Format string of value</param>
 <param name="args">Arguments. Item with index <paramref name="ArgNum"/> from this array will be formatted</param>
 <param name="provider">Formatting provider. If it implements <see cref="T:Tools.ExtensionsT.IFormattingContextProvider"/> contextual replacements are possible.</param>
 <param name="trans">Identifiers of transformations to apply in given order</param>
 <returns>Formatted <paramref name="args"/>[<paramref name="argNum"/>]. If argument is null an empty string is used; if it is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used; if it is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used; otherwise <see cref="M:System.Object.ToString"/>. After formatting, value if widhtened to <paramref name="Width"/>.</returns>
 <exception cref="T:System.FormatException"><paramref name="ArgNum"/> is greater than or equal to <paramref name="args"/>.<see cref="P:System.Array.Length">Length</see> -or- <paramref name="format"/> is invalid according to object being formatted.</exception>
</member>
<member name="T:Tools.ExtensionsT.StringFormatting.ReplaceFSA">
 <summary>States of FSA used by <see cref="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)"/> methods</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.String">
 <summary>Normal state</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.Open">
 <summary>{ in string</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.CloseOpen">
 <summary>{ after closing } of placeholder</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.OpenClose">
 <summary>{} in string</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.StringBackSlash">
 <summary>\ in string</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.Name">
 <summary>Name of placeholder</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.NameBackSlash">
 <summary>\ in name of placeholder</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.NameColon">
 <summary>: in name of placeholder</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.NameComma">
 <summary>, in name of placceholder</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.NameClose">
 <summary>} in name of placeholder</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.NameOpen">
 <summary>{ in name</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.FormatOpen">
 <summary>{ in format</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.AlignPlus">
 <summary>+ at the beginnign of align</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.AlignMinus">
 <summary>- at the beginning of align</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.Align">
 <summary>Alignment number</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.AlignMinusZero">
 <summary>-0 at the beginnging of align</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.Format">
 <summary>Formatting sring (after :)</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.FormatClose">
 <summary>} in formatting string</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.FormatBackSlash">
 <summary>\ in formatting string</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.BackSlash">
 <summary>General processing of char after \ anywhere</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.BackSlashHex1">
 <summary>\x, \X, \U, \u</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.BackSlashDec">
 <summary>\[0-9]</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.BackSlashHex">
 <summary>\[xXuU][0-9a-fA-F]</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.Close">
 <summary>} in string</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.NamePipe">
 <summary>{name|</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.Transformation">
 <summary>{name|a</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.FormatPipe">
 <summary>{name:0|</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.TransformationClose">
 <summary>{name|a}</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.TransformationBackSlash">
 <summary>{name|a\</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.TransformationOpen">
 <summary>{name|a{</summary>
</member>
<member name="F:Tools.ExtensionsT.StringFormatting.ReplaceFSA.TransformationPipe">
 <summary>{name|a|</summary>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.ReplaceInternal(System.String,System.Func{System.String,System.Object},System.Boolean,System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="getValue">A function that provides values of placeholders. Names of placeholders are passed here and values are expected to be returned.</param>
 <param name="cEscapes">True to allow C#-style backslash (\) escaping. False not to allow it.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="getValue"/> is null</exception>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.FormatInternal(System.String,System.String,System.Int32,System.Func{System.String,System.Object},System.IFormatProvider,System.Collections.Generic.IEnumerable{System.Text.StringBuilder})">
 <summary>Formats object using format string, width and format provider</summary>
 <param name="name">name of object to be format. Parameter for <paramref name="getValue"/>.</param>
 <param name="align">Specifies minimal width of returned string. Negative for left align, positive for right align.</param>
 <param name="format">Format string for value</param>
 <param name="getValue">Function that can get object to be formatted by name. <paramref name="name"/> is passed here.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <param name="trans">Identifiers of transformations to apply in given order</param>
 <returns>
 Formatted <paramref name="getValue"/>(<paramref name="name"/>).
 If argument is null or <paramref name="getValue"/> throws an exception an empty string is used; if it is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used; if it is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used; otherwise <see cref="M:System.Object.ToString"/>.
 After formatting, value if widhtened to <paramref name="align"/>.
 </returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="getValue"/> is null.</exception>
 <exception cref="T:System.FormatException"><paramref name="format"/> is invalid according to object being formatted.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format][|transformation]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 If <paramref name="getValue"/> throws an exception for particular name null is used as value for that placeholder.
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Func{System.String,System.Object},System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="getValue">A function that provides values of placeholders. Names of placeholders are passed here and values are expected to be returned.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="getValue"/> is null</exception>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 If <paramref name="getValue"/> throws an exception for particular name null is used as value for that placeholder.
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.Func{System.String,System.Object},System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string and also replaces C#-style backslash (\) espace sequences</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="getValue">A function that provides values of placeholders. Names of placeholders are passed here and values are expected to be returned.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="getValue"/> is null</exception>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 If <paramref name="getValue"/> throws an exception for particular name null is used as value for that placeholder.
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.ReplaceInternal(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using values dictionary</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">Dictionary of values to be replaced. Key are names of placeholders specified in <paramref name="pattern"/>. If null all values are treated as null.</param>
 <param name="cEscapes">True to allow C#-style backslash (\) escaping. False not to allow it.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Null is supplied as value for nonexistent keys.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using values dictionary</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">Dictionary of values to be replaced. Key are names of placeholders specified in <paramref name="pattern"/>. If null all values are treated as null.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Null is supplied as value for nonexistent keys.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using values dictionary and also replaces C#-style backslash (\) character espace sequences</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">Dictionary of values to be replaced. Key are names of placeholders specified in <paramref name="pattern"/>. If null all values are treated as null.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Null is supplied as value for nonexistent keys.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.ReplaceInternal(System.String,Tools.CollectionsT.GenericT.IIndexable{System.String,System.Object},System.Boolean,System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using values collection</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">Collection of values to be replaced. Indices are names of placeholders specified in <paramref name="pattern"/>. If null all values are treated as null.</param>
 <param name="cEscapes">True to allow C#-style backslash (\) escaping. False not to allow it.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>If indexer of <paramref name="values"/> throws an exception null value is supplied for that placeholder.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,Tools.CollectionsT.GenericT.IIndexable{System.String,System.Object},System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using values collection</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">Collection of values to be replaced. Indices are names of placeholders specified in <paramref name="pattern"/>. If null all values are treated as null.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>If indexer of <paramref name="values"/> throws an exception null value is supplied for that placeholder.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,Tools.CollectionsT.GenericT.IIndexable{System.String,System.Object},System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using values collection and also replaces C#-style backslash (\) character escape sequences</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">Collection of values to be replaced. Indices are names of placeholders specified in <paramref name="pattern"/>. If null all values are treated as null.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>If indexer of <paramref name="values"/> throws an exception null value is supplied for that placeholder.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.ReplaceInternal(System.String,System.Object[],System.Boolean,System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using combined keys-values array.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at even indices (0, 2, 4, etc.). Values are at odd indices (1, 3, 5, etc.). If length of array is odd last value for last item is assumed to be null.
 <para>Items at odd indices (names) are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <param name="cEscapes">True to allow C#-style backslash (\) escaping. False not to allow it.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.IFormatProvider,System.Object[])">
 <summary>Replaces placeholders with formatting in given string using vcombined keys-values array.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at even indices (0, 2, 4, etc.). Values are at odd indices (1, 3, 5, etc.). If length of array is odd last value for last item is assumed to be null.
 <para>Items at odd indices (names) are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.IFormatProvider,System.Object[])">
 <summary>Replaces placeholders with formatting in given string using combined keys-values array and also replaces C#-style backslash (\) character escape sequences.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at even indices (0, 2, 4, etc.). Values are at odd indices (1, 3, 5, etc.). If length of array is odd last value for last item is assumed to be null.
 <para>Items at odd indices (names) are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Object[])">
 <summary>Replaces placeholders with formatting in given string using combined keys-values array. Uses current culture.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at even indices (0, 2, 4, etc.). Values are at odd indices (1, 3, 5, etc.). If length of array is odd last value for last item is assumed to be null.
 <para>Items at odd indices (names) are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and current culture as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and current culture as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.Object[])">
 <summary>Replaces placeholders with formatting in given string using combined keys-values array and also replaces C#-style backslash (\) character escape sequences. Uses current culture.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at even indices (0, 2, 4, etc.). Values are at odd indices (1, 3, 5, etc.). If length of array is odd last value for last item is assumed to be null.
 <para>Items at odd indices (names) are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and current culture as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and current culture as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.ReplaceInternal(System.String,System.Object[0:,0:],System.Boolean,System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using two dimensional array.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at index (i, 0). Values are are at index (i, 1). (Other indices are ignored. So, the array normally has rank 2 in 2nd dimension. If it does not have rank at least 2 in 2nd dimmension all values are treated as null.)
 <para>Items in 1st dimension (names) are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <param name="cEscapes">True to allow C#-style backslash (\) escaping. False not to allow it.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Object[0:,0:],System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using two dimensional array.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at index (i, 0). Values are are at index (i, 1). (Other indices are ignored. So, the array normally has rank 2 in 2nd dimension. If it does not have rank at least 2 in 2nd dimmension all values are treated as null.)
 <para>Items in 1st dimension (names) are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.Object[0:,0:],System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using two dimensional array. Also replaces C#-style backslash (\) character escape sequences.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at index (i, 0). Values are are at index (i, 1). (Other indices are ignored. So, the array normally has rank 2 in 2nd dimension. If it does not have rank at least 2 in 2nd dimmension all values are treated as null.)
 <para>Items in 1st dimension (names) are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.ReplaceInternal(System.String,System.Object[][],System.Boolean,System.IFormatProvider)">
 <summary>Replaces placeholders with formatting in given string using array or arrays.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at index (i)(0). Values are are at index (i)(1). (Other indices at 2nd level are ignored. So, the nested array normaly has length 2. If it does not have lenght at least 2 all values are treated as null.)
 <para>Items at index 0 of nested array are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <param name="cEscapes">True to allow C#-style backslash (\) escaping. False not to allow it.</param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.IFormatProvider,System.Object[][])">
 <summary>Replaces placeholders with formatting in given string using array or arrays.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at index (i)(0). Values are are at index (i)(1). (Other indices at 2nd level are ignored. So, the nested array normaly has length 2. If it does not have lenght at least 2 all values are treated as null.)
 <para>Items at index 0 of nested array are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.IFormatProvider,System.Object[][])">
 <summary>Replaces placeholders with formatting in given string using array or arrays. Also replaces C#-style backslash (\) character escape sequences.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at index (i)(0). Values are are at index (i)(1). (Other indices at 2nd level are ignored. So, the nested array normaly has length 2. If it does not have lenght at least 2 all values are treated as null.)
 <para>Items at index 0 of nested array are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <param name="provider">Formatting provider. When null current culture is used.</param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.Replace(System.String,System.Object[][])">
 <summary>Replaces placeholders with formatting in given string using array or arrays. Uses current culture.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at index (i)(0). Values are are at index (i)(1). (Other indices at 2nd level are ignored. So, the nested array normaly has length 2. If it does not have lenght at least 2 all values are treated as null.)
 <para>Items at index 0 of nested array are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.CReplace(System.String,System.Object[][])">
 <summary>Replaces placeholders with formatting in given string using array or arrays. Also replaces C#-style backslash (\) character escape sequences. Uses current culture.</summary>
 <param name="pattern">A string that contains placeholders to be replaced</param>
 <param name="values">
 Array that contains names and values of items for replacement.
 Names are at index (i)(0). Values are are at index (i)(1). (Other indices at 2nd level are ignored. So, the nested array normaly has length 2. If it does not have lenght at least 2 all values are treated as null.)
 <para>Items at index 0 of nested array are expected to be strings. If they are not they are converted to string:</para>
 <list type="number">
 <item>Null names are skipped.</item>
 <item>If name is <see cref="T:System.ICustomFormatter"/> <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)"/> is used (null as format string, actual name as value and <paramref name="provider"/> as format provider)</item>
 <item>If name is <see cref="T:System.IFormattable"/> <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used (passing null as format and <paramref name="provider"/> as format provider)</item>
 <item>Otherwise <see cref="M:System.Object.ToString"/> is used.</item>
 </list>
 <para>If <paramref name="values"/> is null all values are treated as null.</para>
 </param>
 <returns><paramref name="pattern"/> with placeholders replaced with their values.</returns>
 <exception cref="T:System.FormatException">Composite format string is invalid -or- Individual format specified for placeholder is invalid.</exception>
 <remarks>
 Specify placeholders in format {name[,align][:format]}. See <see cref="T:Tools.ExtensionsT.StringFormatting"/> for details.
 <para>Values of nonexistend names are treated as null. In case of duplicate names in <paramref name="values"/> 1st wins.</para>
 </remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="P:Tools.ExtensionsT.StringFormatting.Transformations">
 <summary>Gets transformations registered for string formatting</summary>
 <remarks>
 A transformations is a function that accepts a string and returns a string. It should never fail. It should accept nulls and empty strings as well.
 <para>Key of the dictionary are case-insensitive</para>
 <para>Predefined transformations are</para>
 <list type="table">
 <listheader><term>key</term><description>Implementation</description></listheader>
 <item><term>Html</term><description><see cref="M:System.Web.HttpUtility.HtmlEncode(System.Object)"/></description></item>
 <item><term>HtmlAttribute</term><description><see cref="M:System.Web.HttpUtility.HtmlAttributeEncode(System.String)"/></description></item>
 <item><term>Url</term><description><see cref="M:System.Web.HttpUtility.UrlEncode(System.Byte[])"/></description></item>
 <item><term>UrlPath</term><description><see cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)"/></description></item>
 <item><term>SQL</term><description><see cref="M:Tools.TextT.Escaping.EscapeSql(System.String)"/></description></item>
 <item><term>Xml</term><description><see cref="M:Tools.TextT.Escaping.EscapeXml(System.String,Tools.TextT.Escaping.Mode)"/></description></item>
 <item><term>XmlAttribute</term><description><see cref="M:Tools.TextT.Escaping.EscapeXmlAttribute(System.String,Tools.TextT.Escaping.Mode,Tools.TextT.Escaping.Quotes)"/></description></item>
 <item><term>JS</term><description><see cref="M:Tools.TextT.Escaping.EscapeJavaScript(System.String,Tools.TextT.Escaping.Mode,Tools.TextT.Escaping.Quotes)"/></description></item>
 <item><term>String.Format</term><description><see cref="M:Tools.TextT.Escaping.EscapeStringFormat(System.String)"/></description></item>
 <item><term>MySql</term><description><see cref="M:Tools.TextT.Escaping.EscapeMySql(System.String,Tools.TextT.Escaping.Quotes)"/></description></item>
 <item><term>PostrgreSql</term><description><see cref="M:Tools.TextT.Escaping.EscapePostgreSql(System.String,Tools.TextT.Escaping.Mode)"/> (uses <see cref="F:Tools.TextT.Escaping.Mode.Native"/> mode)</description></item>
 <item><term>SqlLike</term><description><see cref="M:Tools.TextT.Escaping.EscapeSqlLike(System.String)"/></description></item>
 <item><term>C#</term><description><see cref="M:Tools.TextT.Escaping.EscapeCSharp(System.String,Tools.TextT.Escaping.Mode)"/></description></item>
 <item><term>C</term><description><see cref="M:Tools.TextT.Escaping.EscapeC(System.String,Tools.TextT.Escaping.Mode,Tools.TextT.Escaping.Quotes)"/></description></item>
 <item><term>PHPSingle</term><description><see cref="M:Tools.TextT.Escaping.EscapePhpSingle(System.String)"/></description></item>
 <item><term>PHPDouble</term><description><see cref="M:Tools.TextT.Escaping.EscapePhpDouble(System.String,Tools.TextT.Escaping.Mode)"/></description></item>
 <item><term>VBLike</term><description><see cref="M:Tools.TextT.Escaping.EscapeVBLike(System.String)"/></description></item>
 <item><term>CSS</term><description><see cref="M:Tools.TextT.Escaping.EscapeCss(System.String,Tools.TextT.Escaping.Mode,Tools.TextT.Escaping.Quotes)"/></description></item>
 <item><term>RegEx</term><description><see cref="M:Tools.TextT.Escaping.EscapeRegEx(System.String,Tools.TextT.Escaping.Mode)"/></description></item>
 </list>
 All functions use default parameters unless specified otherwise. All default transformations are of type <see cref="T:Tools.ExtensionsT.StringFormatting.SimpleTransformation"/>.
 <para>Custom transformations may be registered via <see cref="M:Tools.ExtensionsT.StringFormatting.RegisterTransformation(System.String,System.Delegate)"/>.</para>
 <para>Items in the dictionary are either of type <see cref="T:Tools.ExtensionsT.StringFormatting.SimpleTransformation"/> or <see cref="T:Tools.ExtensionsT.StringFormatting.ContextAwareTransformation"/>.</para>
 </remarks>
</member>
<member name="T:Tools.ExtensionsT.StringFormatting.SimpleTransformation">
 <summary>Delegate for simple string transformations. Takes a string and returns it transformed.</summary>
 <param name="string">A string to be transformed</param>
 <returns><paramref name="string"/> transformed</returns>
 <version version="1.5.4">This delegate is new in 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.RegisterTransformation(System.String,Tools.ExtensionsT.StringFormatting.SimpleTransformation)">
 <summary>Registers a simple transformation</summary>
 <param name="name">Name of transformation. Must be unique - i.e. not yet present in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/>.</param>
 <param name="transformation">Simple transformation delegate that performs the transformation</param>
 <exception cref="T:System.InvalidOperationException">The transformation with given <paramref name="name"/> is already registered in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="transformation"/> is null</exception>
 <remarks>Beware that transformations are registered globally.</remarks>
 <version version="1.5.4">This method is new in 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.RegisterTransformation(System.String,System.Delegate)">
 <summary>Registers a simple or context-aware transformation</summary>
 <param name="name">Name of transformation. Must be unique - i.e. not yet present in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/>.</param>
 <param name="transformation">Simple transformation delegate that performs the transformation</param>
 <exception cref="T:System.InvalidOperationException">The transformation with given <paramref name="name"/> is already registered in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="transformation"/> is null</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="transformation"/> is neither <see cref="T:Tools.ExtensionsT.StringFormatting.SimpleTransformation"/> nor <see cref="T:Tools.ExtensionsT.StringFormatting.ContextAwareTransformation"/></exception>
 <remarks>Beware that transformations are registered globally.</remarks>
 <version version="1.5.4">This method is new in 1.5.4</version>
</member>
<member name="T:Tools.ExtensionsT.StringFormatting.ContextAwareTransformation">
 <summary>Delegate for context-aware string transformations. Takes a string and returns it transformed, possibly using values provided in context.</summary>
 <param name="string">A string to be transformed</param>
 <param name="context">Context to take values from</param>
 <returns><paramref name="string"/> transformed</returns>
 <version version="1.5.4">This delegate is new in 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.RegisterTransformation(System.String,Tools.ExtensionsT.StringFormatting.ContextAwareTransformation)">
 <summary>Registers a context-aware transformation</summary>
 <param name="name">Name of transformation. Must be unique - i.e. not yet present in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/>.</param>
 <param name="transformation">Context-aware transformation delegate that performs the transformation</param>
 <exception cref="T:System.InvalidOperationException">The transformation with given <paramref name="name"/> is already registered in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="transformation"/> is null</exception>
 <remarks>Beware that transformations are registered globally.</remarks>
 <version version="1.5.4">This method is new in 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.UnregisterTransformation(System.String)">
 <summary>Removes transformation registration</summary>
 <param name="name">Name of transformation to unregister</param>
 <remarks>True if the transformation was previously registered and was successfully unregistered, false if it was not registered.</remarks>
 <version version="1.5.4">This method is new in 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.ReplaceTransformation(System.String,Tools.ExtensionsT.StringFormatting.SimpleTransformation)">
 <summary>Registers a context-aware transformation or replaces existing registration</summary>
 <param name="name">Name of transformation. Must be unique - i.e. not yet present in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/>.</param>
 <param name="transformation">Simple transformation delegate that performs the transformation</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="transformation"/> is null</exception>
 <remarks>Beware that transformations are registered globally.</remarks>
 <version version="1.5.4">This method is new in 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.ReplaceTransformation(System.String,Tools.ExtensionsT.StringFormatting.ContextAwareTransformation)">
 <summary>Registers a context-aware transformation or replaces existing registration</summary>
 <param name="name">Name of transformation. Must be unique - i.e. not yet present in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/>.</param>
 <param name="transformation">Context-aware transformation delegate that performs the transformation</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="transformation"/> is null</exception>
 <remarks>Beware that transformations are registered globally.</remarks>
 <version version="1.5.4">This method is new in 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.StringFormatting.ReplaceTransformation(System.String,System.Delegate)">
 <summary>Registers a simple or context-aware transformation or replaces existing registration</summary>
 <param name="name">Name of transformation. Must be unique - i.e. not yet present in <see cref="P:Tools.ExtensionsT.StringFormatting.Transformations"/>.</param>
 <param name="transformation">Simple transformation delegate that performs the transformation</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="name"/> or <paramref name="transformation"/> is null</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="transformation"/> is neither <see cref="T:Tools.ExtensionsT.StringFormatting.SimpleTransformation"/> nor <see cref="T:Tools.ExtensionsT.StringFormatting.ContextAwareTransformation"/></exception>
 <remarks>Beware that transformations are registered globally.</remarks>
 <version version="1.5.4">This method is new in 1.5.4</version>
</member>
<member name="T:Tools.ExtensionsT.IFormattingContextProvider">
 <summary>An interface of object that provides context and <see cref="T:System.IFormatProvider"/></summary>
 <version version="1.5.4">This interface is new in 1.5.4</version>
</member>
<member name="P:Tools.ExtensionsT.IFormattingContextProvider.Context">
 <summary>Gets the context. May be null.</summary>
</member>
<member name="P:Tools.ExtensionsT.IFormattingContextProvider.Provider">
 <summary>Gets <see cref="T:System.IFormatProvider"/></summary>
 <returns>
 If a class implementing this interface implements <see cref="T:System.IFormatProvider"/> by wrapping another instance of <see cref="T:System.IFormatProvider"/>
 this property should return that wrapped instance,
 and consumers of this interface should rather use value of this property when <see cref="T:System.IFormatProvider"/> is required,
 rather than using object implementing this interface as <see cref="T:System.IFormatProvider"/> directly.
 Otherwise this property should just return current instance.
 </returns>
</member>
<member name="T:Tools.ExtensionsT.FormatContextProvider">
 <summary>Default implementation of <see cref="T:Tools.ExtensionsT.IFormattingContextProvider"/> that also implements <see cref="T:System.IFormatProvider"/></summary>
 <version version="1.5.4">This class is new in 1.5.4</version>
</member>
<member name="M:Tools.ExtensionsT.FormatContextProvider.#ctor(System.IFormatProvider,System.Object)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.ExtensionsT.FormatContextProvider"/> class</summary>
 <param name="provider">Wrapped <see cref="T:System.IFormatProvider"/></param>
 <param name="context">Context provided by this instance</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="provider"/> is null.</exception>
</member>
<member name="M:Tools.ExtensionsT.FormatContextProvider.GetFormat(System.Type)">
 <summary>Returns an object that provides formatting services for the specified type.</summary>
 <returns>An instance of the object specified by 
 <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, null.</returns>
 <param name="formatType">An object that specifies the type of format object to return. </param>
 <filterpriority>1</filterpriority>
</member>
<member name="P:Tools.ExtensionsT.FormatContextProvider.Provider">
 <summary>Gets <see cref="T:System.IFormatProvider"/> wrapped by this instance</summary>
</member>
<member name="P:Tools.ExtensionsT.FormatContextProvider.Context">
 <summary>Gets the context. May be null.</summary>
</member>
<member name="T:Tools.GlobalizationT.ArabicLetters">
 <summary>Provides functions related to Arabic letters - especially for conversion between various Arabic presentation forms and default letters</summary>
 <remarks>
 This module especially provides functions for detecting and conversion between various forms of Arabic letters.
 5 forms are recognized - default (context-unaware form) which should be used in normal text and four contextual forms - isolated, final, medial and initial.
 Not all Arabic letters have all these forms - especially many letters have only isolated and final (and of course default) form.
 Character (usually non-letters) which don't have any contextual form are not supported for contextual form conversion (<see cref="M:Tools.GlobalizationT.ArabicLetters.ToDefault(System.Char)"/> returns null and <see cref="M:Tools.GlobalizationT.ArabicLetters.IsDefaultForm(System.Char)"/> returns false).
 Form conversion and detection supports all characters from Arabic Presentation Forms-B Unicode block are supported.
 From Arabic Presentation Forms-A Unicode block only single letters are supported (no ligatures).
 Support for ligatures form Arabic Presentation Forms-A Unicode block may be added in next version.
 </remarks>
 <version version="1.5.3" stage="Nightly">This module is new in version 1.5.3</version>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.ArabicBlockStart">
 <summary>First character in Arabic Unicode block (0x0600 - ARABIC NUMBER SIGN - ؀)</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.ArabicBlockEnd">
 <summary>Last character in Arabic Unicode block (0x6FF - ARABIC LETTER HEH WITH INVERTED V - ۿ)</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.ArabicSupplementBlockStart">
 <summary>First character in Arabic Supplement Unicode block (0x750 - ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW - ݐ)</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.ArabicSupplementBlockEnd">
 <summary>Last character in Arabic Supplement Unicode Block (0x77F - ARABIC LETTER KAF WITH TWO DOTS ABOVE - ݿ)</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.ArabicPresentationFormsABlockStart">
 <summary>First letter in Arabic Presentation Forms-A Unicode block (0xFB50 - ARABIC LETTER ALEF WASLA ISOLATED FORM - ﭐ)</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.ArabicPresentationFormsABlockEnd">
 <summary>Last letter in Arabic Presentation Forms-A Unicode block (0xFDFF - this is reserved code point)</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.ArabicPresentationFormsBBlockStart">
 <summary>First letter in Arabic Presentation Forms-B Unicode block (0xFE70 - ARABIC SUKUN MEDIAL FORM - ﹿ)</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.ArabicPresentationFormsBBlockEnd">
 <summary>Last letter in Arabic Presentation Forms-B Unicode block (0xFEFF - ZERO WIDTH NO-BREAK SPACE (ZWNBSP) - this is special character)</summary>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.IsArabic(System.Char)">
 <summary>Gets value indicating wheather given character falls into range of one of 4 Unicode Arabic blocks</summary>
 <param name="ch">Character to test</param>
 <returns>True if <paramref name="ch"/> falls to one of Unicode Arabic blocks; false otherwise.</returns>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.defaults">
 <summary>Dictionary of Arabic letters keyed by default form</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.initials">
 <summary>Dictionary of Arabic letters keyed by initial form</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.medials">
 <summary>Dictionary of Arabic letters keyed by medial form</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.finals">
 <summary>Dictionary of Arabic letters keyed by final form</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.isolateds">
 <summary>Dictionary of Arabic letters keyed by isolated form</summary>
</member>
<member name="F:Tools.GlobalizationT.ArabicLetters.all">
 <summary>Dictionary of all arabic letters</summary>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.#cctor">
 <summary>Type initializer - initializes the <see cref="T:Tools.GlobalizationT.ArabicLetters"/> module</summary>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.IsIsolatedForm(System.Char)">
 <summary>Gets value indicating if given character represents isoalted form of Arabic letter</summary>
 <param name="ch">A character</param>
 <returns>True if <paramref name="ch"/> represents isolated form of Arabic letter</returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.IsFinalForm(System.Char)">
 <summary>Gets value indicating if given character represents final form of Arabic letter</summary>
 <param name="ch">A character</param>
 <returns>True if <paramref name="ch"/> represents final form of Arabic letter</returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.IsMedialForm(System.Char)">
 <summary>Gets value indicating if given character represents medial form of Arabic letter</summary>
 <param name="ch">A character</param>
 <returns>True if <paramref name="ch"/> represents medial form of Arabic letter</returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.IsInitialForm(System.Char)">
 <summary>Gets value indicating if given character represents initial form of Arabic letter</summary>
 <param name="ch">A character</param>
 <returns>True if <paramref name="ch"/> represents initial form of Arabic letter</returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.IsDefaultForm(System.Char)">
 <summary>Gets value indicating if given character represents default form of Arabic letter</summary>
 <param name="ch">A character</param>
 <returns>True if <paramref name="ch"/> represents default form of Arabic letter</returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.ToDefault(System.Char)">
 <summary>Converts given character to default form of Arabic letter</summary>
 <param name="ch">Character to get default form of</param>
 <returns>Character representing default form of <paramref name="ch"/>. Null when given character does not have default form or it is not known Arabic charactrer.
 <note>For ligatures return string can be longer than one character.</note></returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.ToFinal(System.String)">
 <summary>Converts given character (or ligature) to final form of Arabic letter</summary>
 <param name="value">Character to get final form of</param>
 <returns>Character representing final form of <paramref name="value"/>. Null when given character does not have final form or it is not known Arabic charactrer.</returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.ToIsolated(System.String)">
 <summary>Converts given character (or ligature) to isolated form of Arabic letter</summary>
 <param name="value">Character to get isolated form of</param>
 <returns>Character representing isolated form of <paramref name="value"/>. Null when given character does not have isolated form or it is not known Arabic charactrer.</returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.ToMedial(System.String)">
 <summary>Converts given character (or ligature) to medial form of Arabic letter</summary>
 <param name="value">Character to get medial form of</param>
 <returns>Character representing medial form of <paramref name="value"/>. Null when given character does not have medial form or it is not known Arabic charactrer.</returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetters.ToInitial(System.String)">
 <summary>Converts given character (or ligature) to initial form of Arabic letter</summary>
 <param name="value">Character to get initial form of</param>
 <returns>Character representing initial form of <paramref name="value"/>. Null when given character does not have initial form or it is not known Arabic charactrer.</returns>
 <remarks>See <see cref="T:Tools.GlobalizationT.ArabicLetters"/> for more informations and limitations.</remarks>
</member>
<member name="T:Tools.GlobalizationT.ArabicLetter">
 <summary>Represents arabic letter and it's four different forms</summary>
 <version version="1.5.3" stage="Nightly">This structure is new in version 1.5.3</version>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.#ctor(System.String,System.Char,System.Char,System.Nullable{System.Char},System.Nullable{System.Char})">
 <summary>CTor - for letters with all four forms</summary>
 <param name="default">Universal from of the letter</param>
 <param name="isolated">Isolated from of the letter</param>
 <param name="final">Final form of the letter</param>
 <param name="initial">Initial form of the letter</param>
 <param name="medial">Medial form of the letter</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="default"/> is nulll</exception>
 <exception cref="T:System.ArgumentException"><paramref name="default"/> is an empty string</exception>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.#ctor(System.String,System.Char,System.Char)">
 <summary>CTor - for letters with only isolated and final form</summary>
 <param name="default">Universal from of the letter</param>
 <param name="isolated">Isolated from of the letter</param>
 <param name="final">Final form of the letter</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="default"/> is nulll</exception>
 <exception cref="T:System.ArgumentException"><paramref name="default"/> is an empty string</exception>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>CTor - for letters with all four forms specified as character code</summary>
 <param name="default">Universal from of the letter (code)</param>
 <param name="isolated">Isolated from of the letter (code)</param>
 <param name="final">Final form of the letter (code)</param>
 <param name="initial">Initial form of the letter (code)</param>
 <param name="medial">Medial form of the letter (code)</param>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.#ctor(System.Int32,System.Int32,System.Int32)">
 <summary>CTor - for letters with only isolated and final form specified as character code</summary>
 <param name="default">Universal from of the letter (code)</param>
 <param name="isolated">Isolated from of the letter (code)</param>
 <param name="final">Final form of the letter (code)</param>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.#ctor(System.String,System.Int32,System.Int32)">
 <summary>CTor - for letters with only isolated and final form specified as string for default form and character codes for the others</summary>
 <param name="default">Universal from of the letter</param>
 <param name="isolated">Isolated from of the letter (code)</param>
 <param name="final">Final form of the letter (code)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="default"/> is nulll</exception>
 <exception cref="T:System.ArgumentException"><paramref name="default"/> is an empty string</exception>
</member>
<member name="P:Tools.GlobalizationT.ArabicLetter.Default">
 <summary>Gets character representing default (context-unaware) form of the letter</summary>
 <remarks>For ligatures string longer than one character can be returned</remarks>
</member>
<member name="P:Tools.GlobalizationT.ArabicLetter.Isolated">
 <summary>Gets character representing isolated form of the letter (used when letter is written alone i.e. not in word)</summary>
</member>
<member name="P:Tools.GlobalizationT.ArabicLetter.Initial">
 <summary>Gets character representing initial form of the letter (used when letter is at the beginning of a word)</summary>
</member>
<member name="P:Tools.GlobalizationT.ArabicLetter.Medial">
 <summary>Gets character representing medial form of the letter (used when lettter is in the middle of a word)</summary>
</member>
<member name="P:Tools.GlobalizationT.ArabicLetter.Final">
 <summary>Gets character representing final form of the letter (used when lettter is at the and of a word)</summary>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.op_Implicit(Tools.GlobalizationT.ArabicLetter)~System.String">
 <summary>Converts a <see cref="T:Tools.GlobalizationT.ArabicLetter"/> to <see cref="T:System.String"/></summary>
 <param name="a">A <see cref="T:Tools.GlobalizationT.ArabicLetter"/></param>
 <returns><paramref name="a"/>.<see cref="P:Tools.GlobalizationT.ArabicLetter.Default">Default</see></returns>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.op_Explicit(Tools.GlobalizationT.ArabicLetter)~System.Char">
 <summary>Converts a <see cref="T:Tools.GlobalizationT.ArabicLetter"/> to <see cref="T:System.Char"/></summary>
 <param name="a">A <see cref="T:Tools.GlobalizationT.ArabicLetter"/></param>
 <returns><paramref name="a"/>.<see cref="P:Tools.GlobalizationT.ArabicLetter.Default">Default</see></returns>
 <exception cref="T:System.InvalidCastException"><paramref name="a"/>.<see cref="P:Tools.GlobalizationT.ArabicLetter.Default">Default</see> is longer than one character</exception>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.ToString">
 <summary>Gets string representation of current object</summary>
 <returns><see cref="P:Tools.GlobalizationT.ArabicLetter.Default"/></returns>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.GetHashCode">
 <summary>Gets hascode of current object</summary>
 <returns>Has code of this object whic is effectively hash code of <see cref="P:Tools.GlobalizationT.ArabicLetter.Default"/>; 0 when <see cref="P:Tools.GlobalizationT.ArabicLetter.Default"/> is null</returns>
</member>
<member name="M:Tools.GlobalizationT.ArabicLetter.Equals(System.Object)">
 <summary>Indicates whether this instance and a specified object are equal.</summary>
 <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
 <param name="obj">Another object to compare to. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.GlobalizationT.AngleFormatInfo">
 <summary>Provides information how to format <see cref="T:Tools.NumericsT.Angle"/> instances</summary>
 <remarks>
 Unlike e.g. <see cref="T:System.Globalization.NumberFormatInfo"/> instance of this class cannot usually be obtained via <see cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)"/>. Use <see cref="M:Tools.GlobalizationT.AngleFormatInfo.Get"/> instead.
 <para>To localize <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> either provide your own instance by cloning and customizing existing instance such as <see cref="P:Tools.GlobalizationT.AngleFormatInfo.DefaultInvariant"/> or localize <c>Tools.GlobalizationT.AngleFormatInfo.resources</c> embeded resource.</para>
 <note type="inheritinfo">This class is not sealed, but derived classes cannot be created because there are no accessible constructors. This class is not intended to be inherited from externally.</note>
 </remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.GlobalizationT.AngleFormatInfo.Get">
 <summary>Gets instance of <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> for current culture</summary>
 <returns>A new instance of <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> that provides formating informations for <see  cref="T:Tools.NumericsT.Angle"/> in current culture</returns>
</member>
<member name="M:Tools.GlobalizationT.AngleFormatInfo.Get(System.Globalization.CultureInfo)">
 <summary>Gets instance of <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> for given culture</summary>
 <param name="culture">Culture to load <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> for. Current culture is used if null.</param>
 <returns>A new instance of <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> that provides formating informations for <see  cref="T:Tools.NumericsT.Angle"/> in <paramref name="culture"/>.</returns>
 <remarks>
 If formatting info would be by chance available through <paramref name="culture"/>.<see cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)">GetFormat</see> it is used.
 Otherwise resource-based <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> is loaded. If information is not provided for <paramref name="culture"/> parent culture or invariant culture is used.
 </remarks>
</member>
<member name="F:Tools.GlobalizationT.AngleFormatInfo.DefaultCompatibilityDegreeSign">
 <summary>Default symbol used for degree in compatibility rendering. It's a degree sign (U+B0, °).</summary>
 <remarks>Default compatibility degree sign is same as default typographic degree sign.</remarks>
</member>
<member name="F:Tools.GlobalizationT.AngleFormatInfo.DefaultCompatibilityMinuteSign">
 <summary>Default symbol used for minutes in compatibility rendering. It's apostrophe (U+27, ').</summary>
</member>
<member name="F:Tools.GlobalizationT.AngleFormatInfo.DefaultCompatibilitySecondSign">
 <summary>Default symbol used for seconds in compatibility rendering. It's double quotation mark (U+22, ").</summary>
</member>
<member name="F:Tools.GlobalizationT.AngleFormatInfo.DefaultTypographicDegreeSign">
 <summary>Default symbol used for degrees. It's a degree sign (U+B0, °).</summary>
</member>
<member name="F:Tools.GlobalizationT.AngleFormatInfo.DefaultTypographicMinuteSign">
 <summary>Defalt symbol used for minutes. It's prime (U+2032, ′).</summary>
</member>
<member name="F:Tools.GlobalizationT.AngleFormatInfo.DefaultTypographicSecondSign">
 <summary>Default symbol used for seconds. It's double prime (U+2033, ″)</summary>
</member>
<member name="M:Tools.GlobalizationT.AngleFormatInfo.#ctor(Tools.GlobalizationT.AngleFormatInfo)">
 <summary>Copy CTor - creates a new instance of the <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> class by copying values form another instance.</summary>
 <param name="other">An instance ot copy</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null</exception>
</member>
<member name="M:Tools.GlobalizationT.AngleFormatInfo.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.GlobalizationT.AngleFormatInfo.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.GlobalizationT.AngleFormatInfo.GetFormat(System.Type)">
 <summary>Returns an object that provides formatting services for the specified type.</summary>
 <returns>An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, null.</returns>
 <param name="formatType">An object that specifies the type of format object to return. </param>
 <filterpriority>1</filterpriority>
 <remarks>This implementation returns non-null value only if <paramref name="formatType"/> is <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/>.</remarks>
</member>
<member name="M:Tools.GlobalizationT.AngleFormatInfo.MakeReadOnly">
 <summary>Sets the <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> property to true and thus makes this instance read-only (immutable)</summary>
 <remarks>After calling this method no properties of this instance can be changed and thsi read-only state cannot be reverted.</remarks>
</member>
<member name="M:Tools.GlobalizationT.AngleFormatInfo.#ctor">
 <summary>Default CTor - ctreates a new empty instance of the <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> class.</summary>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly">
 <summary>Gets value indicating wheather values of properties of this instance can be changed or not</summary>
 <returns>True if values of properties of this instance can be changed, false if values of properties of this instance cannot be changed (it's read-only (immutable))</returns>
 <remarks>To set this property to true call <see cref="M:Tools.GlobalizationT.AngleFormatInfo.MakeReadOnly"/>.</remarks>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.DegreeSign">
 <summary>Gets or sets a symbol for degree - typically degree sign (U+B0, °)</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultTypographicDegreeSign"/>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.MinuteSign">
 <summary>Gets or sets a symbol for minute - typically prime (U+2032, ′)</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultTypographicMinuteSign"/>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.SecondSign">
 <summary>Gets or sets a symbol for second - typically souble prime (U+2033, ″)</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultTypographicSecondSign"/>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.LatitudeNorthShortSymbol">
 <summary>Gets or sets short symbol used for positive (north) latitude (e.g. "N" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.LatitudeNorthLongSymbol">
 <summary>Gets or sets long name used for positive (north) latitude (e.g. " North" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.LatitudeSouthShortSymbol">
 <summary>Gets or sets short symbol used for negative (south) latitude (e.g. "S" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.LatitudeSouthLongSymbol">
 <summary>Gets or long name symbol used for negative (south) latitude (e.g. " South" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.LongitudeEastShortSymbol">
 <summary>Gets or sets short symbol used for negative (east) longitude (e.g. "E" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.LongitudeEastLongSymbol">
 <summary>Gets or sets long name used for negative (east) longitude (e.g. " East" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.LongitudeWestShortSymbol">
 <summary>Gets or sets short symbol used for positive (west) longitude (e.g. "W" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.LongitudeWestLongSymbol">
 <summary>Gets or sets llong name used for positive (west) longitude (e.g. " West" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.CompatibilityDegreeSign">
 <summary>Gets or sets symbol used for degrees in compatibility rendering - typically degree sign (U+B0, °)</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultCompatibilityDegreeSign"/>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.CompatibilityMinuteSign">
 <summary>Gets or sets symbol used for minutes in compatibility rendering - typically apostrophe (U+27, ')</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultCompatibilityDegreeSign"/>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.CompatibilitySecondSign">
 <summary>Gets or sets symbol used for seconds in compatibility rendering - typically double quote (U+22, ")</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is true.</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultCompatibilityDegreeSign"/>
</member>
<member name="P:Tools.GlobalizationT.AngleFormatInfo.DefaultInvariant">
 <summary>Default instance of <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> suitable for invariant and English cultures</summary>
 <remarks>This instance is read-only</remarks>
</member>
<member name="T:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo">
 <summary>Implements an <see cref="T:Tools.GlobalizationT.AngleFormatInfo"/> that loads it's data from resources</summary>
 <remarks>Instances of this class are always read-only</remarks>
</member>
<member name="F:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.resourceMan">
 <summary>Contains value of the <see cref="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.ResourceManager"/> property</summary>
</member>
<member name="F:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.resourceCulture">
 <summary>Culture to provide data for</summary>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.ResourceManager">
<summary>Returns the cached <see cref="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.ResourceManager"/> instance used by this class.</summary>
</member>
<member name="M:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.#ctor(System.Globalization.CultureInfo)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo"/> for given culture</summary>
 <param name="culture">Culture to use</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="culture"/> is null</exception>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.CompatibilityDegreeSign">
 <summary>Gets symbol used for degrees in compatibility rendering - typically degree sign (U+B0, °)</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultCompatibilityDegreeSign"/>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.CompatibilityMinuteSign">
 <summary>Gets symbol used for minutes in compatibility rendering - typically apostrophe (U+27, ')</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultCompatibilityDegreeSign"/>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.CompatibilitySecondSign">
 <summary>Gets symbol used for seconds in compatibility rendering - typically double quote (U+22, ")</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultCompatibilityDegreeSign"/>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.DegreeSign">
 <summary>Gets a symbol for degree - typically degree sign (U+B0, °)</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultTypographicDegreeSign"/>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.LatitudeNorthLongSymbol">
 <summary>Gets long name used for positive (north) latitude (e.g. " North" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.LatitudeNorthShortSymbol">
 <summary>Gets short symbol used for positive (north) latitude (e.g. "N" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.LatitudeSouthLongSymbol">
 <summary>Gets or long name symbol used for negative (south) latitude (e.g. " South" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.LongitudeEastLongSymbol">
 <summary>Gets long name used for negative (east) longitude (e.g. " East" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.LatitudeSouthShortSymbol">
 <summary>Gets short symbol used for negative (south) latitude (e.g. "S" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.LongitudeEastShortSymbol">
 <summary>Gets short symbol used for negative (east) longitude (e.g. "E" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.LongitudeWestLongSymbol">
 <summary>Gets llong name used for positive (west) longitude (e.g. " West" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.LongitudeWestShortSymbol">
 <summary>Gets short symbol used for positive (west) longitude (e.g. "W" in English)</summary>
 <remarks>If value of this property starts with space formatting alghoritm ensures space before a symbol in all cases.</remarks>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.MinuteSign">
 <summary>Gets a symbol for minute - typically prime (U+2032, ′)</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultTypographicMinuteSign"/>
</member>
<member name="P:Tools.GlobalizationT.ResourcesBasedAngleFormatInfo.SecondSign">
 <summary>Gets a symbol for second - typically souble prime (U+2033, ″)</summary>
 <exception cref="T:System.InvalidOperationException">Property is being set to a different value (<see cref="P:Tools.GlobalizationT.AngleFormatInfo.IsReadOnly"/> is always true).</exception>
 <seelaso cref="F:Tools.GlobalizationT.AngleFormatInfo.DefaultTypographicSecondSign"/>
</member>
<member name="T:Tools.GlobalizationT.ISOLanguage">
 <summary>Represents language represented by ISO 639 language code and provides list of all defined ISO 639-1 and ISO 639-2 language codes</summary>
 <completionlist cref="T:Tools.GlobalizationT.ISOLanguage"/>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Beta"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="T:Tools.GlobalizationT.ISOLanguage.CodeTypes">
 <summary>Possible "kinds" of languages</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Spoken">
 <summary>Marks language as spoken (currently in use, not extinct)</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Extinct">
 <summary>Marks language as formerly spoken, but now dead (extinct)</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Historic">
 <summary>Marks language as historic variant of current language</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Artificial">
 <summary>Marks language as artificial</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Group">
 <summary>Marks item as group of languages - not one distinct langauge that can be spoken</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Special">
 <summary>Marks item as special language code with no language meaning</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Reserved">
 <summary>Marks language code as reserved for local use (applies to codes qaa-qtz, those codes are not listed)</summary>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.#ctor(System.String,System.String,System.String,System.String,System.UInt32,Tools.GlobalizationT.ISOLanguage.CodeTypes,System.String)">
 <summary>CTor</summary>
 <param name="ISO1">ISO 639-1 (2 characters) code (can be null or an empty <see cref="T:System.String"/>)</param>
 <param name="ISO2">ISO 639-2/B (3 characters, primary) code (can be null or an empty <see cref="T:System.String"/>)</param>
 <param name="English">English name of language. Cannot be null or an enmpty <see cref="T:System.String"/></param>
 <param name="Native">Native name of language. Cannot be null or an empty <see cref="T:System.String"/>. If no native name is available use same as <paramref name="English"/></param>
 <param name="Scale">Scale of language - very very approximate number of speakers (but you can put here actual acurate number of course, too)</param>
 <param name="Type">Type of code - whearher it reffers living or exting language or group of languages etc.</param>
 <param name="Duplicate">Duplicate code ISO 639-2/T for <paramref name="ISO2"/></param>
 <remarks>This CTor is used internally by the <see cref="T:Tools.GlobalizationT.ISOLanguage"/> class. However it is public you'd better consited using another more developper-friendly overloaded CTor</remarks>
 <exception cref="T:System.ArgumentException">The code specified in <paramref name="ISO1"/>, <paramref name="ISO2"/> or <paramref name="Duplicate"/> is invalid</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="English"/> or <paramref name="Native"/> is either null or an empty <see cref="T:System.String"/></exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Type"/> is not valid <see cref="T:Tools.GlobalizationT.ISOLanguage.CodeTypes"/> value</exception>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.#ctor(System.String,System.String,System.String,System.String,Tools.GlobalizationT.ISOLanguage.CodeTypes,System.UInt32,System.String)">
 <summary>CTor</summary>
 <param name="ISO1">ISO 639-1 (2 characters) code (can be null or an empty <see cref="T:System.String"/>)</param>
 <param name="ISO2">ISO 639-2/B (3 characters, primary) code (can be null or an empty <see cref="T:System.String"/>)</param>
 <param name="English">English name of language. Cannot be null or an enmpty <see cref="T:System.String"/></param>
 <param name="Native">Native name of language. Cannot be an empty <see cref="T:System.String"/>. If no native name is available use same as <paramref name="English"/>. If ommited (or null passed) that <paramref name="English"/> is used for <see cref="P:Tools.GlobalizationT.ISOLanguage.Native"/> automatically.</param>
 <param name="Scale">Scale of language - very very approximate number of speakers (but you can put here actual acurate number of course, too)</param>
 <param name="Type">Type of code - whearher it reffers living or exting language or group of languages etc.</param>
 <param name="Duplicate">Duplicate code ISO 639-2/T for <paramref name="ISO2"/></param>
 <exception cref="T:System.ArgumentException">The code specified in <paramref name="ISO1"/>, <paramref name="ISO2"/> or <paramref name="Duplicate"/> is invalid</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="English"/> is is either null or an empty <see cref="T:System.String"/> -or- <paramref name="Native"/> is an empty <see cref="T:System.String"/> ("")</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Type"/> is not valid <see cref="T:Tools.GlobalizationT.ISOLanguage.CodeTypes"/> value</exception>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage._ISO1">
 <summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> property</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ISO1">
 <summary>Gets or sets ISO 639-1 language code</summary>
 <value>New code. It must be 2 characters long <see cref="T:System.String"/> containin only lowerase Latin letters or it can be an empty <see cref="T:System.String"/> or null. An empty string is converted to null</value>
 <returns>ISO 639-1 language code or null of code is not specified</returns>
 <exception cref="T:System.ArgumentException">Setting code to invalid code. Invalid means that it is not null, it is not an empty <see cref="T:System.String"/> and it is not 2 characters long <see cref="T:System.String"/> of lowercase Latin letters.</exception>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.ValidateCode(System.String,System.Byte)">
 <summary>Validates ISO language code</summary>
 <param name="Code">Code to be validated</param>
 <param name="Len">Langth of code that only satisfies validation</param>
 <returns>True if <paramref name="Code"/> is an empty <see cref="T:System.String"/>, nothing or contains exactly <paramref name="Len"/> lowercase Latin letters, otherwise false</returns>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage._ISO2">
 <summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> property</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ISO2">
 <summary>Gets or sets ISO 639-2 language code</summary>
 <value>New code. It must be 3 characters long <see cref="T:System.String"/> containin only lowerase Latin letters or it can be an empty <see cref="T:System.String"/> or null. An empty string is converted to null</value>
 <returns>ISO 639-2 language code or null of code is not specified</returns>
 <remarks><see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> contains ISO 639-2/B code while <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> contains ISO 639-2/T code</remarks>
 <exception cref="T:System.ArgumentException">Setting code to invalid code. Invalid means that it is not null, it is not an empty <see cref="T:System.String"/> and it is not 3 characters long <see cref="T:System.String"/> of lowercase Latin letters.</exception>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage._English">
 <summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.English"/> property</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.English">
 <summary>Gets or sets English name of laguage</summary>
 <exception cref="T:System.ArgumentNullException">Setting value to null or an empty <see cref="T:System.String"/></exception>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage._Native">
 <summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.Native"/> property</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.Native">
 <summary>Gets or sets native name of laguage</summary>
 <exception cref="T:System.ArgumentNullException">Setting value to null or an empty <see cref="T:System.String"/></exception>
 <remarks>Native name of language if native name is available. Othervise returns English name (see <seealso cref="P:Tools.GlobalizationT.ISOLanguage.English"/>)</remarks>
 <value>New value for native name. If native name is not available use English name. Value cannot be nothing or an empty <see cref="T:System.String"/></value>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage._Scale">
 <summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.Scale"/> property</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.Scale">
 <summary>Scale of the language</summary>
 <returns>
 <para>For built-it languages returns very very very approximate number of speakers of this language. Returns 0 for <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Group"/> and <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Special"/>. For <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Historic"/> and <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Extinct"/> can return non-zero if there is some comunity of speakers of such language. For <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Artificial"/> returns zero or non-zero depending on wheather there is any community of speakers. For <see cref="F:Tools.GlobalizationT.ISOLanguage.CodeTypes.Spoken"/> returns always non-zero. If non-zero is returned it describes the 'size' of the languages rather than actual number of speakers. The number has only first three digits meaningfull, other are zeros. This number should be used only to distinguish between small and big languages (etc.) not tu measure exact number of speakers. Those numbers comes mainly from Wikipedia. If Wikipedia reffers range the average is returned. If Wikipedia reports two numbers for native and non-native speakers, average of native and sum of native and non-native is returned. (Note: There is no on-line binding to wikipedia. Those numbers were got on May 2007.)</para>
 If property was filled from another source (not by property of <see cref="T:Tools.GlobalizationT.ISOLanguage"/> than exactness and meaning depends on source.
 </returns>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage._Type">
 <summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.Type"/> property</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.Type">
 <summary>Gets or sets type of language (code)</summary>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Setting value to unknown type</exception>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage._Duplicate">
 <summary>Contains value of the <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> property</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.Duplicate">
 <summary>Gets or sets duplicate of ISO 639-2 language code</summary>
 <value>New code. It must be 3 characters long <see cref="T:System.String"/> containin only lowerase Latin letters or it can be an empty <see cref="T:System.String"/> or null. An empty string is converted to null</value>
 <returns>Another ISO 639-2 language code or null of code is not specified for same language</returns>
 <remarks><see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> contains ISO 639-2/B code while <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> contains ISO 639-2/T code</remarks>
 <exception cref="T:System.ArgumentException">Setting code to invalid code. Invalid means that it is not null, it is not an empty <see cref="T:System.String"/> and it is not 3 characters long <see cref="T:System.String"/> of lowercase Latin letters.</exception>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.qaa">
 <summary>The qaa ISO 639-2 code that represents beginning of range of reserved codes</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.qtz">
 <summary>The qtz ISO 639-2 code that represents end of range of reserved codes</summary>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.GetByCode(System.String)">
 <summary>Gets instance of <see cref="T:Tools.GlobalizationT.ISOLanguage"/> by the ISO 639-1 or ISO 639-2 language code</summary>
 <param name="code">Code of language to get</param>
 <returns>Instance of <see cref="T:Tools.GlobalizationT.ISOLanguage"/> that contains description of language represented by code specified or null of such cude is not known</returns>
 <remarks>Works also for codes from reserved range qaa-qtz</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="code"/> is valid neither for ISO 639-1 nor for ISO 639-2 code (contains invalid characters or is too long or too short)</exception>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.op_Explicit(System.String)~Tools.GlobalizationT.ISOLanguage">
 <summary>Converts <see cref="T:System.String"/> into <see cref="T:Tools.GlobalizationT.ISOLanguage"/></summary>
 <param name="a"><see cref="T:System.String"/> to be converted</param>
 <returns><see cref="T:Tools.GlobalizationT.ISOLanguage"/> with specified code (same as result of <see cref="M:Tools.GlobalizationT.ISOLanguage.GetByCode(System.String)"/> whan it returns non-null)</returns>
 <exception cref="T:System.InvalidCastException"><paramref name="a"/> is unknown code -or- <paramref name="a"/> is invalid code</exception>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.ToString">
 <summary>String representation (code(s) and english name)</summary>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.op_Equality(Tools.GlobalizationT.ISOLanguage,Tools.GlobalizationT.ISOLanguage)">
 <summary>Compares two instances of <see cref="T:Tools.GlobalizationT.ISOLanguage"/></summary>
 <param name="a">A <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to be compared</param>
 <param name="b">A <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to be compared</param>
 <returns>True if both instances have same both codes (<see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> and <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/>). If one of codes of one operand if null then it is ignored. For <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> also <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> is compared. Result is Ture when at least one pair of cross comparison of both <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/>s and <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/>s retuns true. Result is ignored if both <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> and <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> of one operand are null. If comparison of <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> leads to true and comparison of <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> leads to false (or vice versa) an <see cref="T:System.InvalidOperationException"/> is thrown.</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> of both operands are considered equal while <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> not.</exception>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.Compare(System.String,System.String,Tools.GlobalizationT.ISOLanguage.CompState)">
 <summary>Compares two <see cref="T:System.String"/>s while ignoring nulls</summary>
 <param name="a">A <see cref="T:System.String"/> to compare</param>
 <param name="b">A <see cref="T:System.String"/> to compare</param>
 <param name="State">State of previous comparison</param>
 <returns>New state of comparison</returns>
 <exception cref="T:System.InvalidOperationException">State of comparison is abou to be changed when it is <see cref="F:Tools.GlobalizationT.ISOLanguage.CompState.Equal"/> or <see cref="F:Tools.GlobalizationT.ISOLanguage.CompState.NotEqual"/></exception>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.Compare(System.String,System.String,System.String,System.String,Tools.GlobalizationT.ISOLanguage.CompState)">
 <summary>Compares two pairs of <see cref="T:System.String"/> while ignoring nulls</summary>
 <param name="a1">A <see cref="T:System.String"/> from first pair to compare</param>
 <param name="a2">A <see cref="T:System.String"/> from first pair to compare</param>
 <param name="b1">A <see cref="T:System.String"/> from second pair to compare</param>
 <param name="b2">A <see cref="T:System.String"/> from second pair to compare</param>
 <param name="State">State of previous comparison</param>
 <returns>New state of comparison</returns>
 <exception cref="T:System.InvalidOperationException">State of comparison is abou to be changed when it is <see cref="F:Tools.GlobalizationT.ISOLanguage.CompState.Equal"/> or <see cref="F:Tools.GlobalizationT.ISOLanguage.CompState.NotEqual"/></exception>
</member>
<member name="T:Tools.GlobalizationT.ISOLanguage.CompState">
 <summary>States of comparison</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CompState.Equal">
 <summary>Operand equal</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CompState.Null">
 <summary>Unknown state</summary>
</member>
<member name="F:Tools.GlobalizationT.ISOLanguage.CompState.NotEqual">
 <summary>Operands did not equal</summary>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.op_Inequality(Tools.GlobalizationT.ISOLanguage,Tools.GlobalizationT.ISOLanguage)">
 <summary>Compares two instances of <see cref="T:Tools.GlobalizationT.ISOLanguage"/></summary>
 <param name="a">A <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to be compared</param>
 <param name="b">A <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to be compared</param>
 <returns>False if both instances have same both codes (<see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> and <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/>). If one of codes of one operand if null then it is ignored. For <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> also <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> is compared. Result is Ture when at least one pair of cross comparison of both <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/>s and <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/>s retuns true. Result is ignored if both <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> and <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> of one operand are null. If comparison of <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> leads to true and comparison of <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> leads to false (or vice versa) an <see cref="T:System.InvalidOperationException"/> is thrown.</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.GlobalizationT.ISOLanguage.ISO1"/> of both operands are considered equal while <see cref="P:Tools.GlobalizationT.ISOLanguage.ISO2"/> not.</exception>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.</summary>
 <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
 <returns>true if the specified System.Object is equal to the current <see cref="T:System.Object"/>; otherwise, false.</returns>
 <remarks>Use type safe overload <see cref="M:System.Object.Equals(System.Object,System.Object)"/> instead. This function uses it internally</remarks>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.Equals(Tools.GlobalizationT.ISOLanguage)">
 <summary>Compares this instance of <see cref="T:Tools.GlobalizationT.ISOLanguage"/> to another. Unlike the = operator does not throw an exception but rather returns false</summary>
 <param name="other">Another instance to compare this instance with</param>
 <returns>True if instances are considered equal. See the = operator for details</returns>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.aar">
 <summary>Code for Afar (Qafár af)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.abk">
 <summary>Code for Abkhaz (Аҧсуа)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ace">
 <summary>Code for Acehnese, Achinese (Aceh)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ada">
 <summary>Code for Adangme (Adangme)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ady">
 <summary>Code for Adyghe (адыгэбзэ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.afa">
 <summary>Code for Afro-Asiatic (Other) (Afro-Asiatic (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.afh">
 <summary>Code for Afrihili (Afrihili)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.afr">
 <summary>Code for Afrikaans (Afrikaans)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ach">
 <summary>Code for Acoli (Acoli)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ain">
 <summary>Code for Ainu (アイヌ イタク)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.aka">
 <summary>Code for Akan (Akan)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.akk">
 <summary>Code for Akkadian (akkadû)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.alb">
 <summary>Code for Albanian (Shqip)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ale">
 <summary>Code for Aleut (Unangam Tunuu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.alg">
 <summary>Code for Algonquian languages (Algonquian languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.alt">
 <summary>Code for Southern Altai (алтай тили)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.amh">
 <summary>Code for Amharic (አማርኛ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ang">
 <summary>Code for English, Old (ca. 450–1100) (Englisc)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.anp">
 <summary>Code for Angika (अङ्गिका)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.apa">
 <summary>Code for Apache languages (Apache languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ara">
 <summary>Code for Arabic (العربية)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.arc">
 <summary>Code for Aramaic (ܐܪܡܝܐ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.arg">
 <summary>Code for Aragonese (Aragonés)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.arm">
 <summary>Code for Armenian (Հայերեն լեզու)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.arn">
 <summary>Code for Araucanian (mapudungun)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.arp">
 <summary>Code for Arapaho (Hinono'eitiit)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.art">
 <summary>Code for Artificial (Other) (Artificial (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.arw">
 <summary>Code for Arawak (Arawak)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.asm">
 <summary>Code for Assamese (অসমীয়া)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ast">
 <summary>Code for Asturian (asturianu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ath">
 <summary>Code for Athapascan languages (aðapaskāw)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.aus">
 <summary>Code for Australian languages (Australian languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ava">
 <summary>Code for Avaric (авар мацӀ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ave">
 <summary>Code for Avestan (avesta)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.awa">
 <summary>Code for Awadhi (अवधी)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.aym">
 <summary>Code for Aymara (aymar aru)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.aze">
 <summary>Code for Azerbaijani (Azərbaycanca)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bad">
 <summary>Code for Banda (Banda)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bai">
 <summary>Code for Bamileke languages (Bamiléké)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bak">
 <summary>Code for Bashkir (башҡорт теле)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bal">
 <summary>Code for Baluchi (بلوچی)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bam">
 <summary>Code for Bambara (bamanankan)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ban">
 <summary>Code for Balinese (Basa Bali)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.baq">
 <summary>Code for Basque (euskara)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bas">
 <summary>Code for Basa (ɓasaá)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bat">
 <summary>Code for Baltic (Other) (Baltic (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bej">
 <summary>Code for Beja (بداوية)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bel">
 <summary>Code for Belarusian (Беларуская мова)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bem">
 <summary>Code for Bemba (Chiwemba)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ben">
 <summary>Code for Bengali (বাংলা)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ber">
 <summary>Code for Berber (Other) (Tamazight)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bho">
 <summary>Code for Bhojpuri (भोजपुरी)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bih">
 <summary>Code for Bihari (Bihari)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bik">
 <summary>Code for Bikol languages (Bikol)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bin">
 <summary>Code for Bini (Edo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bis">
 <summary>Code for Bislama (Bislama)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bla">
 <summary>Code for Siksika (siksiká)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bnt">
 <summary>Code for Bantu (Other) (Bantu (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bos">
 <summary>Code for Bosnian (bosanski jezik)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bra">
 <summary>Code for Braj (ब्रज भाषा)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bre">
 <summary>Code for Breton (brezhoneg)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.btk">
 <summary>Code for Batak (Indonesia) (Batak)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bua">
 <summary>Code for Buriat (буряад хэлэн)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bug">
 <summary>Code for Buginese (ᨅᨔ ᨕᨘᨁᨗ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bul">
 <summary>Code for Bulgarian (български език)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.bur">
 <summary>Code for Burmese (မန္မာစာ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.byn">
 <summary>Code for Blin (ብሊና)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cad">
 <summary>Code for Caddo (Hasí:nay)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cai">
 <summary>Code for Central American Indian (Other) (Central American Indian (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.car">
 <summary>Code for Carib (Cariban)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cat">
 <summary>Code for Catalan (català)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cau">
 <summary>Code for Caucasian (Other) (Caucasian (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ceb">
 <summary>Code for Cebuano (Sinugboanon)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cel">
 <summary>Code for Celtic (Other) (Celtic (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cmc">
 <summary>Code for Chamic languages (Chamic languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cop">
 <summary>Code for Coptic (ⲙⲉⲧⲛ̀ⲣⲉⲙⲛ̀ⲭⲏⲙⲓ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cor">
 <summary>Code for Cornish (Kernewek)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cos">
 <summary>Code for Corsican (corsu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cpe">
 <summary>Code for Creoles and Pidgins, English-based (Other) (Creoles and Pidgins, English-based (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cpf">
 <summary>Code for Creoles and Pidgins, French-based (Other) (Creoles and Pidgins, French-based (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cpp">
 <summary>Code for Creoles and Pidgins, Portuguese-based (Other) (Creoles and Pidgins, Portuguese-based (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cre">
 <summary>Code for Cree (ᓀᐦᐃᔭᐍᐏᐣ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.crh">
 <summary>Code for Crimean Tatar (къырымтатар тили)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.crp">
 <summary>Code for Creoles and Pidgins (Other) (Creoles and Pidgins (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.csb">
 <summary>Code for Kashubian (kaszëbsczi jãzëk)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cus">
 <summary>Code for Cushitic (Other) (Cushitic (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cze">
 <summary>Code for Czech (čeština)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dak">
 <summary>Code for Dakota (Lakhota)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dan">
 <summary>Code for Danish (dansk)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dar">
 <summary>Code for Dargwa (дарган мез)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.day">
 <summary>Code for Dayak (Dayak)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.del">
 <summary>Code for Delaware (Lënape)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.den">
 <summary>Code for Slave (Athapascan) (Slave)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dgr">
 <summary>Code for Dogrib (Tłįchǫ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.din">
 <summary>Code for Dinka (Thuɔŋjäŋ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.div">
 <summary>Code for Divehi (ދިވެހިބަސ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.doi">
 <summary>Code for Dogri (डोगरी)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dra">
 <summary>Code for Dravidian (Other) (Dravidian (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dsb">
 <summary>Code for Sorbian, Lower (dolnoserbski)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dua">
 <summary>Code for Duala (Douala)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dum">
 <summary>Code for Dutch, Middle (ca. 1050–1350) (Middelnederlands)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dut">
 <summary>Code for Dutch (Nederlands)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dyu">
 <summary>Code for Dyula (Julakan)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.dzo">
 <summary>Code for Dzongkha (རྫོང་ཁ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.efi">
 <summary>Code for Efik (Ibibio)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.egy">
 <summary>Code for Egyptian (Ancient) (r n km.t)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.eka">
 <summary>Code for Ekajuk (Akajo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.elx">
 <summary>Code for Elamite (Elamite)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.eng">
 <summary>Code for English (English)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.enm">
 <summary>Code for English, Middle (ca. 1100–1500) (English, Middle (ca. 1100–1500))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.epo">
 <summary>Code for Esperanto (Esperanto)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.est">
 <summary>Code for Estonian (Eesti keel)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.eus">
 <summary>Code for Basque (euskara)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ewe">
 <summary>Code for Ewe (Ɛʋɛgbɛ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ewo">
 <summary>Code for Ewondo (Ewondo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fan">
 <summary>Code for Fang (Fang)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fao">
 <summary>Code for Faroese (føroyskt)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fat">
 <summary>Code for Fanti (Fanti)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fij">
 <summary>Code for Fijian (vosa Vakaviti)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fil">
 <summary>Code for Filipino (Filipino)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fin">
 <summary>Code for Finnish (suomi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fiu">
 <summary>Code for Finno-Ugrian (Other) (Finno-Ugrian (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fon">
 <summary>Code for Fon (Fɔngbe)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fre">
 <summary>Code for French (français)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.frm">
 <summary>Code for French, Middle (ca. 1400—1600) (le moyen français)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fro">
 <summary>Code for French, Old (842—ca. 1400) (langue d'oïl)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.frr">
 <summary>Code for Frisian, Northern (Frasch)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.frs">
 <summary>Code for Frisian, Eastern (Seeltersk Fräisk)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fry">
 <summary>Code for Frisian, Western (frysk)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ful">
 <summary>Code for Fulah (Fulfulde)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.fur">
 <summary>Code for Friulian (furlan)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gaa">
 <summary>Code for Ga (Gã)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gay">
 <summary>Code for Gayo (Bahasa Gayo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gba">
 <summary>Code for Gbaya (Gbaya)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gem">
 <summary>Code for Germanic (Other) (Germanic (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.geo">
 <summary>Code for Georgian (ქართული ენა )</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ger">
 <summary>Code for German (Deutsch)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gez">
 <summary>Code for Geez (ግዕዝ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gil">
 <summary>Code for Gilbertese (taetae ni Kiribati)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gla">
 <summary>Code for Scottish Gaelic (Gàidhlig)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gle">
 <summary>Code for Irish (Gaeilge)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.glg">
 <summary>Code for Galician (Galego)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.glv">
 <summary>Code for Manx (Gaelg)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gmh">
 <summary>Code for German, Middle High (ca. 1050–1500) (diutisk)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.goh">
 <summary>Code for German, Old High (ca. 750–1050) (diutisc)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gon">
 <summary>Code for Gondi (Gondi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gor">
 <summary>Code for Gorontalo (Grontalo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.got">
 <summary>Code for Gothic (𐌷𐌰𐌿𐌱𐌹𐌳𐌰𐍃𐌴𐌹𐌳𐍉)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.grb">
 <summary>Code for Grebo (Grebo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.grc">
 <summary>Code for Greek, Ancient (to 1453) (Ἑλληνικά)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gre">
 <summary>Code for Greek, Modern (1453–) (Ελληνικά)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.grn">
 <summary>Code for Guarani (Avañe'ẽ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gsw">
 <summary>Code for German, Alemannic (Alemannisch, Schwyzerdütsch)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.guj">
 <summary>Code for Gujarati (ગુજરાતી)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.gwi">
 <summary>Code for Gwichʼin (Gwich’in)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hai">
 <summary>Code for Haida (X̲aat Kíl)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hat">
 <summary>Code for Haitian Creole (Kreyòl ayisyen)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hau">
 <summary>Code for Hausa (هَوُسَ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.haw">
 <summary>Code for Hawaiian (‘Ōlelo Hawai‘i)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.heb">
 <summary>Code for Hebrew (עִבְרִית; עברית)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.her">
 <summary>Code for Herero (Otjiherero)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hil">
 <summary>Code for Hiligaynon (Ilonggo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.him">
 <summary>Code for Himachali (हिमाचल प्रदेश)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hin">
 <summary>Code for Hindi (हिन्दी)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hit">
 <summary>Code for Hittite (𒉈𒅆𒇷)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hmn">
 <summary>Code for Hmong (Hmoob)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hmo">
 <summary>Code for Hiri Motu (Hiri Motu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hrv">
 <summary>Code for Croatian (hrvatski jezik)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hsb">
 <summary>Code for Sorbian, Upper (hornjoserbsce)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hun">
 <summary>Code for Hungarian (Magyar)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.hup">
 <summary>Code for Hupa (?)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cha">
 <summary>Code for Chamorro (Chamoru)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chb">
 <summary>Code for Chibcha (muysca kubun)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.che">
 <summary>Code for Chechen (нохчийн мотт)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chg">
 <summary>Code for Chagatai (جغتای )</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chi">
 <summary>Code for Chinese (中文)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chk">
 <summary>Code for Chuukese (Trukese)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chm">
 <summary>Code for Mari (марий йылме)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chn">
 <summary>Code for Chinook jargon (Lelang)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.cho">
 <summary>Code for Choctaw (Chahta Anumpa)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chp">
 <summary>Code for Dene Suline (ᑌᓀᓲᒢᕄᓀ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chr">
 <summary>Code for Cherokee (ᏣᎳᎩ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chu">
 <summary>Code for Church Slavonic (Ѩзыкъ словѣньскъ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chv">
 <summary>Code for Chuvash (чӑваш чӗлхи)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.chy">
 <summary>Code for Cheyenne (Tsêhést)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.iba">
 <summary>Code for Iban (Iban)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ibo">
 <summary>Code for Igbo (Igbo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ice">
 <summary>Code for Icelandic (íslenska)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ido">
 <summary>Code for Ido (Ido)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.iii">
 <summary>Code for Sichuan Yi (ꆇꉙ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ijo">
 <summary>Code for Ijo (Ijo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.iku">
 <summary>Code for Inuktitut (ᐃᓄᒃᑎᑐᑦ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ile">
 <summary>Code for Interlingue (Interlingue)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ilo">
 <summary>Code for Iloko (Ilokano)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ina">
 <summary>Code for Interlingua (interlingua)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.inc">
 <summary>Code for Indic (Other) (Indic (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ind">
 <summary>Code for Indonesian (Bahasa Indonesia)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ine">
 <summary>Code for Indo-European (Other) (Indo-European (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.inh">
 <summary>Code for Ingush (гӀалгӀай мотт)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ipk">
 <summary>Code for Inupiaq (Iñupiaq)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ira">
 <summary>Code for Iranian (Other) (Iranian (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.iro">
 <summary>Code for Iroquoian languages (Iroquoian languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ita">
 <summary>Code for Italian (italiano)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.jav">
 <summary>Code for Javanese (basa Jawa)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.jbo">
 <summary>Code for Lojban (la lojban.)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.jpn">
 <summary>Code for Japanese (日本語)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.jpr">
 <summary>Code for Judeo-Persian (Jidi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.jrb">
 <summary>Code for Judeo-Arabic (Judeo-Arabic)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kaa">
 <summary>Code for Kara-Kalpak (қарақалпақ тили)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kab">
 <summary>Code for Kabyle (Taqbaylit)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kac">
 <summary>Code for Kachin (Jinghpaw)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kal">
 <summary>Code for Greenlandic (kalaallisut)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kam">
 <summary>Code for Kamba (Kikamba)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kan">
 <summary>Code for Kannada (ಕನ್ನಡ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kar">
 <summary>Code for Karen (Karen languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kas">
 <summary>Code for Kashmiri (कॉशुर; کٲشُر)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kau">
 <summary>Code for Kanuri (Kanuri)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kaw">
 <summary>Code for Kawi (Bhāṣa Kawi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kaz">
 <summary>Code for Kazakh (Қазақ тілі)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kbd">
 <summary>Code for Kabardian (къэбэрдеибзэ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kha">
 <summary>Code for Khasi (Khasi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.khi">
 <summary>Code for Khoisan (Other) (Khoisan)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.khm">
 <summary>Code for Khmer (ភាសាខ្មែរ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kho">
 <summary>Code for Khotanese (Khotanese)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kik">
 <summary>Code for Kikuyu (Gĩkũyũ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kin">
 <summary>Code for Kinyarwanda (kinyaRwanda)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kir">
 <summary>Code for Kirghiz (кыргыз тили)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kmb">
 <summary>Code for Kimbundu (Kimbundu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kok">
 <summary>Code for Konkani (कोंकणी)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kom">
 <summary>Code for Komi (коми кыв)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kon">
 <summary>Code for Kongo (Kikongo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kor">
 <summary>Code for Korean (한국어)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kos">
 <summary>Code for Kosraean (Kosrae)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kpe">
 <summary>Code for Kpelle (kpele)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.krc">
 <summary>Code for Karachay-Balkar (къарачай-малкъар тил)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.krl">
 <summary>Code for Karelian (karjalan kieli)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kro">
 <summary>Code for Kru (Kru)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kru">
 <summary>Code for Kurukh (Kurux)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kua">
 <summary>Code for Kuanyama (Oshikwanyama)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kum">
 <summary>Code for Kumyk (къумукъ тил)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kur">
 <summary>Code for Kurdish (Kurdî)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.kut">
 <summary>Code for Kutenai (Kootenai)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lad">
 <summary>Code for Ladino (ג'ודיאו-איספאנייול)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lah">
 <summary>Code for Lahnda (ਪੰਜਾਬੀ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lam">
 <summary>Code for Lamba (Lamba)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lao">
 <summary>Code for Lao (ພາສາລາວ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lat">
 <summary>Code for Latin (latine)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lav">
 <summary>Code for Latvian (latviešu valoda)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lez">
 <summary>Code for Lezghian (лезги чӀал)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lim">
 <summary>Code for Limburgish (Limburgs)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lin">
 <summary>Code for Lingala (lingala)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lit">
 <summary>Code for Lithuanian (lietuvių kalba)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lol">
 <summary>Code for Mongo (Mongo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.loz">
 <summary>Code for Lozi (Silozi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ltz">
 <summary>Code for Luxembourgish (Lëtzebuergesch)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lua">
 <summary>Code for Luba-Lulua (lwaà:)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lub">
 <summary>Code for Luba-Katanga (Luba-Katanga)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lug">
 <summary>Code for Ganda (Luganda)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lui">
 <summary>Code for Luiseno (Luiseño)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lun">
 <summary>Code for Lunda (Chilunda)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.luo">
 <summary>Code for Luo (Dholuo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.lus">
 <summary>Code for Lushai (Lushai)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mac">
 <summary>Code for Macedonian (македонски јазик)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mad">
 <summary>Code for Madurese (Basa Mathura)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mag">
 <summary>Code for Magahi (मगही)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mah">
 <summary>Code for Marshallese (Kajin M̧ajeļ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mai">
 <summary>Code for Maithili (मैथिली)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mak">
 <summary>Code for Makasar (Makasar)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mal">
 <summary>Code for Malayalam (മലയാളം)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.man">
 <summary>Code for Mandingo (Mandinka)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mao">
 <summary>Code for Māori (te reo Māori)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.map">
 <summary>Code for Austronesian (Other) (Austronesian (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mar">
 <summary>Code for Marathi (मराठी)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mas">
 <summary>Code for Masai (ɔl Maa)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.may">
 <summary>Code for Malay (بهاس ملايو)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mdf">
 <summary>Code for Moksha (мокшень кяль)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mdr">
 <summary>Code for Mandar (Mandar)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.men">
 <summary>Code for Mende (Mɛnde yia)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mga">
 <summary>Code for Irish, Middle (900–1200) (Gaoidhealg)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mic">
 <summary>Code for Mi'kmaq (Mi'gmaq)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.min">
 <summary>Code for Minangkabau (Baso Minangkabau)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mis">
 <summary>Code for miscellaneous languages (miscellaneous languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mkh">
 <summary>Code for Mon-Khmer (Other) (Mon-Khmer (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mlg">
 <summary>Code for Malagasy (Malagasy fiteny)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mlt">
 <summary>Code for Maltese (Malti)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mnc">
 <summary>Code for Manchu (ᠮᠠᠨᠵᡠ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mni">
 <summary>Code for Manipuri (মৈইতৈইলোন)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mno">
 <summary>Code for Manobo languages (Manobo languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.moh">
 <summary>Code for Mohawk (Kanien’keha)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mol">
 <summary>Code for Moldavian (лимба молдовеняскэ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mon">
 <summary>Code for Mongolian (монгол хэл)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mos">
 <summary>Code for Mossi (Mòoré)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mul">
 <summary>Code for multiple languages (multiple languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mun">
 <summary>Code for Munda languages (Munda languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mus">
 <summary>Code for Creek (Maskoki)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mwl">
 <summary>Code for Mirandese (Lhéngua Mirandesa)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mwr">
 <summary>Code for Marwari (मारवाड़ी)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.mya">
 <summary>Code for Burmese (မန္မာစာ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.myn">
 <summary>Code for Mayan languages (Mayan languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.myv">
 <summary>Code for Erzya (эрзянь кель)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nah">
 <summary>Code for Nahuatl (nāhuatl)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nai">
 <summary>Code for North American Indian (Other) (North American Indian (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nap">
 <summary>Code for Neapolitan (napulitano)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nau">
 <summary>Code for Nauruan (Ekakairũ Naoero)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nav">
 <summary>Code for Navajo (Diné bizaad)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nbl">
 <summary>Code for Ndebele, South (Ndébélé)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nde">
 <summary>Code for Ndebele, North (isiNdebele)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ndo">
 <summary>Code for Ndonga (Owambo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nds">
 <summary>Code for German, Low (Nederdüütsch)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nep">
 <summary>Code for Nepali (नेपाली)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.new">
 <summary>Code for Nepal Bhasa (नेपाल भाषा)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nia">
 <summary>Code for Nias (Nias)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nic">
 <summary>Code for Niger-Kordofanian (Other) (Niger-Kordofanian (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.niu">
 <summary>Code for Niuean (ko e vagahau Niuē)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nno">
 <summary>Code for Norwegian Nynorsk (Norsk nynorsk)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nob">
 <summary>Code for Norwegian Bokmål (Norsk bokmål)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nog">
 <summary>Code for Nogai (ногай тили)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.non">
 <summary>Code for Norse, Old (norskr)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nor">
 <summary>Code for Norwegian (Norsk)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nqo">
 <summary>Code for N'Ko (N'Ko)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nso">
 <summary>Code for Sotho, Northern; Pedi; Sepedi (sePêdi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nub">
 <summary>Code for Nubian languages (Nubian languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nwc">
 <summary>Code for Nepal Bhasa (नेपाल भाषा)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nya">
 <summary>Code for Chichewa (chiCheŵa)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nym">
 <summary>Code for Nyamwezi (Kinyamwezi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nyn">
 <summary>Code for Nyankole (Nyankole)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nyo">
 <summary>Code for Nyoro (Runyoro)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.nzi">
 <summary>Code for Nzima (Nzima)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.oci">
 <summary>Code for Occitan (lenga d'òc)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.oji">
 <summary>Code for Ojibwa (ᐊᓂᔑᓇᐯᒧᐏᐣ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ori">
 <summary>Code for Oriya (ଓଡ଼ିଆ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.orm">
 <summary>Code for Oromo (Afaan Oromoo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.osa">
 <summary>Code for Osage (Osage)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.oss">
 <summary>Code for Ossetian (ирон ӕвзаг)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ota">
 <summary>Code for Turkish, Ottoman (1500–1928) (لسان عثمان)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.oto">
 <summary>Code for Otomian languages (Otomian languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.paa">
 <summary>Code for Papuan (Other) (Papuan (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pag">
 <summary>Code for Pangasinan (salitan Pangasinan)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pal">
 <summary>Code for Pahlavi (Pahlavi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pam">
 <summary>Code for Pampanga (Kapampangan)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pan">
 <summary>Code for Punjabi (ਪੰਜਾਬੀ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pap">
 <summary>Code for Papiamento (Papiamentu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pau">
 <summary>Code for Palauan (tekoi ra Belau)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.peo">
 <summary>Code for Persian, Old (ca. 600–400 BC) (Persian, Old (ca. 600–400 BC))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.per">
 <summary>Code for Persian (فارسی)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.phi">
 <summary>Code for Philippine (Other) (Philippine (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.phn">
 <summary>Code for Phoenician (𐤃𐤁𐤓𐤉𐤌𐤟𐤊𐤍𐤏𐤍𐤉𐤌)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pli">
 <summary>Code for Pali (पालि)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pol">
 <summary>Code for Polish (polski)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pon">
 <summary>Code for Pohnpeian (Pohnpeian)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.por">
 <summary>Code for Portuguese (Português)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pra">
 <summary>Code for Prakrit languages (प्राकृत)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pro">
 <summary>Code for Provençal, Old (to 1500) (Provençal, Old (to 1500))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.pus">
 <summary>Code for Pushto (پښت)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.que">
 <summary>Code for Quechua (Runa Simi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.raj">
 <summary>Code for Rajasthani (राजस्थानी)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.rap">
 <summary>Code for Rapanui (rapanui)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.rar">
 <summary>Code for Rarotongan (Māori Kūki 'Āirani)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.roa">
 <summary>Code for Romance (Other) (Romance (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.roh">
 <summary>Code for Raeto-Romance (rumantsch grischun)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.rom">
 <summary>Code for Romany (Romani šib)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.rum">
 <summary>Code for Romanian (română)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.run">
 <summary>Code for Rundi (kiRundi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.rup">
 <summary>Code for Aromanian (limba armãneascã)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.rus">
 <summary>Code for Russian (русский язык)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sad">
 <summary>Code for Sandawe (Sandawe)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sag">
 <summary>Code for Sango (yângâ tî sängö)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sah">
 <summary>Code for Yakut (Саха тыла)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sai">
 <summary>Code for South American Indian (Other) (South American Indian (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sal">
 <summary>Code for Salishan languages (Salishan languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sam">
 <summary>Code for Samaritan Aramaic (ܐܪܡܝܐ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.san">
 <summary>Code for Sanskrit (संस्कृतम्)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sas">
 <summary>Code for Sasak (Sasak)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sat">
 <summary>Code for Santali (संथाली)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.scc">
 <summary>Code for Serbian (српски језик)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.scn">
 <summary>Code for Sicilian (Sicilianu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sco">
 <summary>Code for Scots (Scoats leid)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sel">
 <summary>Code for Selkup (шӧльӄумыт әты)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sem">
 <summary>Code for Semitic (Other) (Semitic (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sga">
 <summary>Code for Irish, Old (to 900) (Goídelc)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sgn">
 <summary>Code for Sign languages (Sign languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.shn">
 <summary>Code for Shan (Shan)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sid">
 <summary>Code for Sidamo (Sidámo 'Afó)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sin">
 <summary>Code for Sinhalese (සිංහල)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sio">
 <summary>Code for Siouan languages (Siouan languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sit">
 <summary>Code for Sino-Tibetan (Other) (Sino-Tibetan (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sla">
 <summary>Code for Slavic (Other) (Slavic (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.slo">
 <summary>Code for Slovak (slovenčina)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.slv">
 <summary>Code for Slovenian (slovenščina)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sma">
 <summary>Code for Southern Sami (saemien giele)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sme">
 <summary>Code for Northern Sami (davvisámegiella)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.smi">
 <summary>Code for Sami languages (Other) (Sami languages (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.smj">
 <summary>Code for Lule Sami (sámegiella)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.smn">
 <summary>Code for Inari Sami (säämegiella)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.smo">
 <summary>Code for Samoan (gagana fa'a Samoa)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sms">
 <summary>Code for Skolt Sami (sääʼmǩiõll)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sna">
 <summary>Code for Shona (chiShona)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.snd">
 <summary>Code for Sindhi (سنڌي، سندھی)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.snk">
 <summary>Code for Soninke (Soninkanxaane)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sog">
 <summary>Code for Sogdian (Sogdian)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.som">
 <summary>Code for Somali (Soomaaliga)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.son">
 <summary>Code for Songhai (Songhay languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sot">
 <summary>Code for Sotho, Southern (seSotho)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.spa">
 <summary>Code for Spanish (español)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.srd">
 <summary>Code for Sardinian (sardu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.srn">
 <summary>Code for Sranan Tongo (Sranan Tongo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.srr">
 <summary>Code for Serer (Sérère)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ssa">
 <summary>Code for Nilo-Saharan (Other) (Nilo-Saharan (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ssw">
 <summary>Code for Swati (siSwati)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.suk">
 <summary>Code for Sukuma (Sukuma)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sun">
 <summary>Code for Sundanese (basa Sunda)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sus">
 <summary>Code for Susu (Sosokui)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.sux">
 <summary>Code for Sumerian (eme-ĝir)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.swa">
 <summary>Code for Swahili (kiswahili)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.swe">
 <summary>Code for Swedish (Svenska)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.syc">
 <summary>Code for Classical Syriac (ܣܘܪܝܝܐ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.syr">
 <summary>Code for Syriac (ܣܘܪܝܝܐ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tah">
 <summary>Code for Tahitian (te reo Tahiti; te reo Māʼohi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tai">
 <summary>Code for Tai (Other) (´Tai (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tam">
 <summary>Code for Tamil (தமிழ்)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tat">
 <summary>Code for Tatar (татарча)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tel">
 <summary>Code for Telugu (తెలుగు)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tem">
 <summary>Code for Timne (Timne)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ter">
 <summary>Code for Tereno (Tereno)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tet">
 <summary>Code for Tetum (Tetun)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tgk">
 <summary>Code for Tajik (тоҷикӣ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tgl">
 <summary>Code for Tagalog (Tagalog)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tha">
 <summary>Code for Thai (ภาษาไทย)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tib">
 <summary>Code for Tibetan (བོད་ཡིག)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tig">
 <summary>Code for Tigre (Tigré)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tir">
 <summary>Code for Tigrinya (ትግርኛ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tiv">
 <summary>Code for Tiv (Tiv)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tkl">
 <summary>Code for Tokelau (Tokelauan)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tlh">
 <summary>Code for Klingon (tlhIngan Hol)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tli">
 <summary>Code for Tlingit (Lingít)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tmh">
 <summary>Code for Tamashek (Tamajeq)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tog">
 <summary>Code for Tonga (Malawi) (chiTonga)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ton">
 <summary>Code for Tongan (faka-Tonga)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tpi">
 <summary>Code for Tok Pisin (Tok Pisin)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tsi">
 <summary>Code for Tsimshian (Tsimshianic languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tsn">
 <summary>Code for Tswana (seTswana)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tso">
 <summary>Code for Tsonga (xiTsonga)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tuk">
 <summary>Code for Turkmen (Түркмен)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tum">
 <summary>Code for Tumbuka (chiTumbuka)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tup">
 <summary>Code for Tupi languages (Nheengatu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tur">
 <summary>Code for Turkish (Türkçe)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tut">
 <summary>Code for Altaic (Other) (Altaic (Other))</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tvl">
 <summary>Code for Tuvalu ('gana Tuvalu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.twi">
 <summary>Code for Twi (Twi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.tyv">
 <summary>Code for Tuvinian (тыва дыл)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.udm">
 <summary>Code for Udmurt (удмурт кыл)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.uga">
 <summary>Code for Ugaritic (Ugaritic)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.uig">
 <summary>Code for Uighur (Uyƣurqə)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ukr">
 <summary>Code for Ukrainian (українська мова)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.umb">
 <summary>Code for Umbundu (úmbúndú)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.und">
 <summary>Code for undetermined language (undetermined language)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.urd">
 <summary>Code for Urdu (اردو)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.uzb">
 <summary>Code for Uzbek (Ўзбек)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.vai">
 <summary>Code for Vai (Vai)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ven">
 <summary>Code for Venda (tshiVenḓa)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.vie">
 <summary>Code for Vietnamese (Tiếng Việt)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.vol">
 <summary>Code for Volapük (Volapük)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.vot">
 <summary>Code for Votic (vaďďa tšeeli)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.wak">
 <summary>Code for Wakashan languages (Wakashan languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.wal">
 <summary>Code for Walamo (Walamo)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.war">
 <summary>Code for Waray (Winaray)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.was">
 <summary>Code for Washo (Washoe)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.wel">
 <summary>Code for Welsh (Cymraeg)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.wen">
 <summary>Code for Sorbian languages (Sorbian languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.wln">
 <summary>Code for Walloon (walon)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.wol">
 <summary>Code for Wolof (Wolof)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.xal">
 <summary>Code for Kalmyk (хальмг келн)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.xho">
 <summary>Code for Xhosa (isiXhosa)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.yao">
 <summary>Code for Yao (Chiyao)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.yap">
 <summary>Code for Yapese (Yapese)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.yid">
 <summary>Code for Yiddish (ייִדיש)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.yor">
 <summary>Code for Yoruba (Yorùbá)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.ypk">
 <summary>Code for Yupik languages (Yupik languages)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.zap">
 <summary>Code for Zapotec (Zapotec)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.zen">
 <summary>Code for Zenaga (Tuḍḍungiyya)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.zha">
 <summary>Code for Zhuang (Saɯ cueŋƅ)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.znd">
 <summary>Code for Zande (Zande)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.zul">
 <summary>Code for Zulu (isiZulu)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.zun">
 <summary>Code for Zuni (Shiwi)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.zxx">
 <summary>Code for no linguistic content (no linguistic content)</summary>
</member>
<member name="P:Tools.GlobalizationT.ISOLanguage.zza">
 <summary>Code for Zaza (So-Bé)</summary>
</member>
<member name="M:Tools.GlobalizationT.ISOLanguage.GetAllCodes">
 <summary>Returns list of all predefined ISO 639-2 and ISO 639-1 language codes</summary>
 <remarks>Reserved code from range qaa÷qtz are not returned. Duplicate codes are returnet only in <see cref="P:Tools.GlobalizationT.ISOLanguage.Duplicate"/> property of other codes.</remarks>
</member>
<member name="T:Tools.GlobalizationT.NumberingSystem">
 <summary>Bsae class for numbering systems</summary>
 <version version="1.5.2">Class introduced</version>
 <completionlist cref="T:Tools.GlobalizationT.NumberingSystem"/>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystem.GetValue(System.Int32)">
 <summary>When overiden in derived class gets representation of given number in curent numbering system</summary>
 <param name="value">Number to get representation of</param>
 <returns>String representation of given integral number in current numbering system</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than <see cref="P:Tools.GlobalizationT.NumberingSystem.Minimum"/> or greater than <see cref="P:Tools.GlobalizationT.NumberingSystem.Maximum"/></exception>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.Maximum">
 <summary>Gets maximal supported number in current numbering system</summary>
 <returns>Maximal number supported by current numbering system</returns>
 <remarks>Default value is <see cref="T:System.Int32"/></remarks>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.Minimum">
 <summary>Gets minimal supported number in current numbering system</summary>
 <returns>Minimal number supported by current numbering system</returns>
 <remarks>Default value is <see cref="T:System.Int32"/></remarks>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.SupportsParse">
 <summary>Gets value indicating if parsing of string representation to integer is suported by current numbering system</summary>
 <returns>True if parsing is supported; false if not. This implementation return false</returns>
 <remarks>Note for inheritors: It is enough to return false from this property in class derived from numbering fromat that supports parsing to indicate that derived class does not support parsing. <see cref="M:Tools.GlobalizationT.NumberingSystem.Parse(System.String)"/> and <see cref="M:Tools.GlobalizationT.NumberingSystem.TryParse(System.String,System.Int32@)"/> will throw <see cref="T:System.NotSupportedException"/> automatically.</remarks>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystem.TryParseInternal(System.String,System.Int32@)">
 <summary>When overriden in derived class attempts to parse string representation of number in current numbering system to integer</summary>
 <param name="value">String representation of number to parse</param>
 <param name="result">When function exists with success contains parsed value representing <paramref name="value"/> as number</param>
 <returns>When parsing is successfull returns null; otherwise returns exception (<see cref="T:System.FormatException"/> is preffered) describing the error.
 <see cref="T:System.OverflowException"/> should be used when number higher than <see cref="P:Tools.GlobalizationT.NumberingSystem.Maximum"/> or lower than <see cref="P:Tools.GlobalizationT.NumberingSystem.Minimum"/> is parsed out.
 <see cref="T:System.ArgumentNullException"/> may be used when <paramref name="value"/> is null or an empty string and curent format cannot iterpret it.</returns>
 <remarks>This method should never throw an exception (unless <see cref="P:Tools.GlobalizationT.NumberingSystem.SupportsParse"/> is false and it throws <see cref="T:System.NotSupportedException"/>)</remarks>
 <exception cref="T:System.NotSupportedException"><see cref="P:Tools.GlobalizationT.NumberingSystem.SupportsParse"/> is false. This implementation throws it always.</exception>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystem.Parse(System.String)">
 <summary>When parsing is implemented by derived class parses a string representation of number in current numbering system to integer</summary>
 <param name="value">String representation in number in current numbering format to be parsed</param>
 <returns>Integral repreentation of number parsed fron <paramref name="value"/></returns>
 <exception cref="T:System.NotSupportedException"><see cref="P:Tools.GlobalizationT.NumberingSystem.SupportsParse"/> is false</exception>
 <exception cref="T:System.FormatException"><paramref name="value"/> is in invalid format according to current numbering system or is not recognized by current numbering system</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> represents number lower than <see cref="P:Tools.GlobalizationT.NumberingSystem.Minimum"/> or greater than <see cref="P:Tools.GlobalizationT.NumberingSystem.Maximum"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null or an empty string and current numeral format cannot interpret it</exception>
 <exception cref="T:System.Exception">Any other exception may be thrown if numbering format defines so.</exception>
 <remarks>For details see documantation of actual numbering format's <see cref="M:Tools.GlobalizationT.NumberingSystem.TryParseInternal(System.String,System.Int32@)"/>.</remarks>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystem.TryParse(System.String,System.Int32@)">
 <summary>When parsing is implemented by derived class attempts to parse a string representation of number in current numbering system to inter</summary>
 <param name="value">String representation in number in current numbering format to be parsed</param>
 <param name="result">When function exists successfully contains parsed value represeting <paramref name="value"/> as number</param>
 <returns>True if parseing is successful; false otherwise</returns>
 <exception cref="T:System.NotSupportedException"><see cref="P:Tools.GlobalizationT.NumberingSystem.SupportsParse"/> is false</exception>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystem.Convert(System.String,Tools.GlobalizationT.NumberingSystem,Tools.GlobalizationT.NumberingSystem)">
 <summary>Converts value in one numbering system to another</summary>
 <param name="Value">Value to convert</param>
 <param name="Source">Source numbering system (that one <paramref name="Value"/> is in)</param>
 <param name="Target">Target numbering system (that one return value will be in)</param>
 <returns><paramref name="Value"/> converted from <paramref name="Source"/> numbering system to <paramref name="Target"/> numbering system</returns>
 <exception cref="T:System.NotSupportedException"><paramref name="Source"/>.<see cref="P:Tools.GlobalizationT.NumberingSystem.SupportsParse"/> is false</exception>
 <exception cref="T:System.FormatException"><paramref name="Value"/> has invalid format accoring to <paramref name="Source"/></exception>
 <exception cref="T:System.OverflowException"><paramref name="Value"/> represents number lower than <paramref name="Source"/>.<see cref="P:Tools.GlobalizationT.NumberingSystem.Minimum">Minimum</see> or greater than <paramref name="Source"/>.<see cref="P:Tools.GlobalizationT.NumberingSystem.Maximum">Maximum</see>.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Value"/> is null or an empty string an <paramref name="Source"/> cannot interpret such value.
 -or- <paramref name="Source"/> or <paramref name="Target"/> is null</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">Integral representation of <paramref name="Value"/> provided by <paramref name="Source"/> is lower than <paramref name="Target"/>.<see cref="P:Tools.GlobalizationT.NumberingSystem.Minimum">Minimum</see> or greater than <paramref name="Target"/>.<see cref="P:Tools.GlobalizationT.NumberingSystem.Maximum">Maximum.</see></exception>
 <exception cref="T:System.Exception"><paramref name="Source"/>.<see cref="M:Tools.GlobalizationT.NumberingSystem.Parse(System.String)">Parse</see> may throw any exception.</exception>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.RomanUpperCase">
 <summary>Gets default instance of numbering system based on upper case Roman numerals</summary>
 <seelaso cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.UpperCase"/>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.RomanLowerCase">
 <summary>Gets default instance of numbering system based on lower case Roman numerals</summary>
 <seelaso cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.LowerCase"/>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.RomanUnicodeUpperCase">
 <summary>Gets default instance of numbering system based on upper case Unicode Roman numerals</summary>
 <seelaso cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.UpperCase"/>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.RomanUnicodeLowerCase">
 <summary>Gets default instance of numbering system based on lower case Unicode Roman numerals</summary>
 <seelaso cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.LowerCase"/>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.RomanUnicodeBigUpperCase">
 <summary>Gets default instance of numbering system based on upper case Unicode Roman numerals with support fro numerals over 1000</summary>
 <seelaso cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.UpperCase"/>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.RomanUnicodeBigLowerCase">
 <summary>Gets default instance of numbering system based on lower case Unicode Roman numerals with support fro numerals over 1000</summary>
 <seelaso cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.LowerCase"/>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.Octal">
 <summary>Gets default instance of numbering system based on octal system</summary>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.Decimal">
 <summary>Gets default instance of numbering system based on decimal system</summary>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.HexadecimalLowerCase">
 <summary>Gets default instance of numbering system based on hexadecimal system (lower case)</summary>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.HexadecimalUpperCase">
 <summary>Gets default instance of numbering system based on hexadecimal system (upper case)</summary>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.Binary">
 <summary>Gets default instance of numbering system based on binary system</summary>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystem.Excel">
 <summary>Gets default instance of numbering system for Excel (and other spreadsheets) columns names</summary>
</member>
<member name="T:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem">
 <summary>Implements numbering system used for column numbering in spreadsheet editors like Microsft Excel</summary>
 <remarks>This class has no public constructor. Use <see cref="F:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.Default"/> instead; or you can use static methods.
 <para>This class supports up to <see cref="T:System.Int32"/> (FXSHRXW) columns, but Microsft Excel supports only 256 (IV) columns in versions prior to 2007 and only 16384 (XFD) columns in version 2007.</para></remarks>
 <version version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.#ctor">
 <summary>CTor</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.Default">
 <summary>Default instance of <see cref="T:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem"/> class</summary>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.GetValue(System.Int32)">
 <summary>Gets representation of given number in Excel columns numbering system</summary>
 <param name="value">Number to get representation of</param>
 <returns>String representation of given integral number in Excel columns numbering system</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.Minimum"/> or greater than <see cref="P:Tools.GlobalizationT.NumberingSystem.Maximum"/></exception>
 <remarks>This function provides same functionality as <see cref="M:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.GetColumnName(System.Int32)"/>.</remarks>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.GetColumnName(System.Int32)">
 <summary>Gets Excel column name from its number</summary>
 <param name="number">Number of column to get name of</param>
 <returns>Name of column with number <paramref name="number"/></returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="number"/> is less than 1 or greater than <see cref="T:System.Int32"/></exception>
 <remarks>This function provides same functionality as <see cref="M:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.GetValue(System.Int32)"/>.</remarks>
 <seelaso cref="M:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.GetValue(System.Int32)"/>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.Minimum">
 <summary>Gets minimal supported number in Excel columns numbering system</summary>
 <returns>1</returns>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.SupportsParse">
 <summary>Gets value indicating if parsing of string representation to integer is suported by current numbering system</summary>
 <returns>True</returns>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.TryParseInternal(System.String,System.Int32@)">
 <summary>Attempts to parse string representation of number in Excel column numbering system to integer</summary>
 <param name="value">String representation of number to parse</param>
 <param name="result">When function exists with success contains parsed value representing <paramref name="value"/> as number</param>
 <returns>When parsing is successfull returns null; otherwise returns exception:
 <list type="table">
 <item><term><see cref="T:System.FormatException"/></term><description>Uexpected character (non A-Z) reached</description></item>
 <item><term><see cref="T:System.ArgumentNullException"/></term><description><paramref name="value"/> is null or an empty string.</description></item>
 <item><term><see cref="T:System.OverflowException"/></term><description><paramref name="value"/> represents number greater than <see cref="P:Tools.GlobalizationT.NumberingSystem.Maximum"/></description></item>
 </list>
 </returns>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.GetColumnNumber(System.String)">
 <summary>Gets number of column from its name</summary>
 <param name="Name">Column name (uppercase)</param>
 <returns>Column number of column named <paramref name="Name"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Name"/> null or an empty string</exception>
 <exception cref="T:System.FormatException"><paramref name="Name"/> contains unexpected (non A-Z) character.</exception>   
 <exception cref="T:System.OverflowException"><paramref name="Name"/> represents column number higher than <see cref="T:System.Int32"/></exception>
 <remarks>This function provides same functionality as <see cref="M:Tools.GlobalizationT.NumberingSystem.Parse(System.String)"/> for <see cref="T:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem"/>.</remarks>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem.TryGetColumnNumber(System.String,System.Int32@)">
 <summary>Attempts to get number of column fom its name</summary>
 <param name="Name">Column name (upper case)</param>
 <param name="Number">When function returns successfully contains column number</param>
 <returns>True when <paramref name="Name"/> was successfully parsed to <paramref name="Number"/>; false when <paramref name="Name"/> is invalid column name.</returns>
 <remarks>This function provides same functionality as <see cref="M:Tools.GlobalizationT.NumberingSystem.TryParse(System.String,System.Int32@)"/> for <see cref="T:Tools.GlobalizationT.NumberingSystemsT.ExcelColumnNumberingSystem"/>.</remarks>
</member>
<member name="T:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem">
 <summary>Implements positional numbering system such as binary, octal, decimal or hexadecimal</summary>
 <remarks>This class can implement any positional numbering system including unary numbering system as long as characters are given to constructor.
 <para>There are 5 predefined numbering systems: <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Binary"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Octal"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Decimal"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.HexadecimalLowerCase"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.HexadecimalUperCase"/>.</para></remarks>
 <version version="1.5.2">Class introduced</version>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Minus">
 <summary>Negative sign character</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Characters">
 <summary>Characters representing numerals</summary>
 <remarks>Firts character is for 0, 2nd is for 2, etc.</remarks>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.#ctor(System.Char[])">
 <summary>CTor from numerals characters - creates new instance of the <see cref="T:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem"/> class</summary>
 <param name="Characters">Characters representing the numerals. Number of characters defines radix of numbering system. 1st character is zero, 2nd is one etc.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Characters"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Characters"/> is enmpty</exception>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.#ctor(System.String)">
 <summary>CTor from numerals characters in string</summary>
 <param name="Characters">Characters representing the numerals. Number of characters defines radix of numbering system. 1st character is zero, 2nd is one etc.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Characters"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Characters"/> is enmpty -or- </exception>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.CheckCharacters">
 <summary>Checks if all numerals character s are different and if none of them is same as <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Minus"/></summary>
 <exception cref="T:System.ArgumentException">Any of <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Characters"/> is same asn another of <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Characters"/> -or- Any or <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Characters"/> is same as <see cref="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Minus"/>.</exception>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.#ctor(System.Char,System.Char[])">
 <summary>CTor from numrals characters and minust sign</summary>
 <param name="Minus">Character to represent minus sign</param>
 <param name="Characters">Characters representing the numerals. Number of characters defines radix of numbering system. 1st character is zero, 2nd is one etc.</param>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.#ctor(System.Int32,Tools.TextT.Casing)">
 <summary>CTor from radix - creates new instance of <see cref="T:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem"/> class representing positional numbering system constructed in standard way</summary>
 <param name="Radix">Radix - the base of numbering system (i.e. 10 for decimal or 16 for hexadecimal)</param>
 <param name="Casing">Casing of letter-based numerals</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Radix"/> id lower than 1 or greater than 60</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Casing"/> is not member of <see cref="T:Tools.TextT.Casing"/></exception>
 <remarks>Numbering system is constructed using decimal numerals 0-9 first, than letters A-Z (or a-z respectivelly) and then Greek letters Α-Ω (excluding code point 0x03A2) (or α-ω respectivelly - excluding ς). </remarks>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.#ctor(System.Int32)">
 <summary>CTor from radix - creates new instance of <see cref="T:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem"/> class representing positional numbering system constructed in standard way</summary>
 <param name="Radix">Radix - the base of numbering system (i.e. 10 for decimal or 16 for hexadecimal)</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Radix"/> id lower than 1 or greater than 61</exception>
 <remarks>Numbering system is constructed using decimal numerals 0-9 first, than letters a-z and then Greek letters α-ω.</remarks>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Radix">
 <summary>Gets radix of curent numbering system</summary>
 <returns>Base number of current numbering system. I.e. 10 for decimal or 16 for hexadecimal.</returns>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Binary">
 <summary>Binary numbering system</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Octal">
 <summary>Octal numbering system</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Decimal">
 <summary>Decimal numbering system</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.HexadecimalUperCase">
 <summary>Hexadecimal numbering system with upper case letters</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.HexadecimalLowerCase">
 <summary>Hexadecimal numbering system with lower case letters</summary>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.GetValue(System.Int32)">
 <summary>Gets representation of given number in curent numbering system</summary>
 <param name="value">Number to get representation of</param>
 <returns>String representation of given integral number in current numbering system</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than <see cref="P:Tools.GlobalizationT.NumberingSystem.Minimum"/> or greater than <see cref="P:Tools.GlobalizationT.NumberingSystem.Maximum"/></exception>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.SupportsParse">
 <summary>Gets value indicating if parsing of string representation to integer is suported by current numbering system</summary>
 <returns>True</returns>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.TryParseInternal(System.String,System.Int32@)">
 <summary>Attempts to parse string representation of number in current numbering system to integer</summary>
 <param name="value">String representation of number to parse</param>
 <param name="result">When function exists with success contains parsed value representing <paramref name="value"/> as number</param>
 <returns>When parsing is successfull returns null; otherwise returns exception describing the error.
 <see cref="T:System.OverflowException"/> when number represented by <paramref name="value"/> cannot be represented as <see cref="T:System.Int32"/>.
 <see cref="T:System.ArgumentNullException"/> when <paramref name="value"/> is null or it is an empty string and <see cref="P:Tools.GlobalizationT.NumberingSystemsT.PositionalNumberingSystem.Radix"/> is not 1.
 <see cref="T:System.FormatException"/> when unsupported character is reached.</returns>
</member>
<member name="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem">
 <summary>Roman numbering system defines uppercase and lowercase roman numerals like I, X, L, C, D, M or i, x, l, c, d, m</summary>
 <remarks>This roman numeral system follows rules stated at <a href="http://en.wikipedia.org/wiki/Roman_numerals#XCIX_vs._IC">Wikipedia</a> stating that shortcut numbers like IC (instead of XCIX) etc. are not allowed. This implementation neither produce such numbers nor can parse them.</remarks>
 <version version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.#ctor(System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)">
 <summary>Creates instance of roman numeral numbering system with given letter for each basic numeral</summary>
 <param name="I">Letter for 1</param>
 <param name="V">Letter for 5</param>
 <param name="X">Letter for 10</param>
 <param name="L">Letter for 50</param>
 <param name="C">Letter for 100</param>
 <param name="D">Letter for 500</param>
 <param name="M">Letter for 1000</param>
 <exception cref="T:System.ArgumentException">Any two of numerals are same</exception>
 <exception cref="T:System.ArgumentNullException">Any numeral is null-char</exception>
 <remarks>Usually it is possible to use <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.UpperCase"/> or <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.LowerCase"/> instead of creating instance of this class.</remarks>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.I">
 <summary>Letter for 1</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.V">
 <summary>Letter for 5</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.X">
 <summary>Letter for 10</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.L">
 <summary>Letter for 50</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.C">
 <summary>Letter for 100</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.D">
 <summary>Letter for 500</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.M">
 <summary>Letter for 1000</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.UpperCase">
 <summary>Delault instance for uppercase Roman numeral numbering system (based on I, V, X, L, C, D, M)</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.LowerCase">
 <summary>Default instance for lowercase Roman numeral numbering system (based on i, v, x, l, c, d, m)</summary>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.GetValue(System.Int32)">
 <summary>Gets representation of given number in Roman numerals numbering system</summary>
 <param name="value">Number to get representation of</param>
 <returns>String representation of given integral number in Roman numerals  numbering system</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.Minimum"/> or greater than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.Maximum"/></exception>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.Minimum">
 <summary>Gets minimal supported number in Roman numerals numbering system</summary>
 <returns>1</returns>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.Maximum">
 <summary>Gets maximal supported number in Roman numerals numbering system</summary>
 <returns>4999</returns>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.SupportsParse">
 <summary>Gets value indicating if parsing of string representation to integer is suported by current numbering system</summary>
 <returns>True</returns>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.TryParseInternal(System.String,System.Int32@)">
 <summary>Attempts to parse string representation of number in Roman numeral numbering system to integer</summary>
 <param name="value">String representation of number to parse</param>
 <param name="result">When function exists with success contains parsed value representing <paramref name="value"/> as number</param>
 <returns>When parsing is successfull returns null; otherwise returns exception describing the error.
 This implementation uses <see cref="T:System.OverflowException"/> when number higher than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.Maximum"/> is parsed -and-
 <see cref="T:System.FormatException"/> when unexpected character is reached or unexpected sequence is reached. Note that only alloved subtractings are IV, IX, XL, XC, CD and CM. -and-
 <see cref="T:System.ArgumentNullException"/> whan <paramref name="value"/> is null or an empty string</returns>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.ToUnicode(System.String,System.Boolean)">
 <summary>Converts string representing Roman number in current Roman Numbering system to Unicode Roman number</summary>
 <param name="Value">Value to be converted</param>
 <param name="LowerCase">Target system. True for <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.UpperCase"/>, false for <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.UpperCase"/>.</param>
 <returns><paramref name="Value"/> converted from current Roman numerals numbering system to target one identified by <paramref name="LowerCase"/>.</returns>
 <remarks>All unknown characters are returned unchanged. Resulting number is collapsed.
 <para>This function is string-based and works even on numbers that are otherwise invalid.</para></remarks>
 <seelaso cref="M:Tools.GlobalizationT.NumberingSystem.Convert(System.String,Tools.GlobalizationT.NumberingSystem,Tools.GlobalizationT.NumberingSystem)"/><seelaso cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.Collapse(System.String)"/>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.CharacterwiseConvert(System.String,Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem)">
 <summary>Converts value represented in current Roman numbering system to another Roman numbering system</summary>
 <param name="value">Value to be converted. Represents number in curent Roman numbering system.</param>
 <param name="Target">Target Roman numbering system to convert <paramref name="value"/> to. When target is Roman numbering system that defines additional numerals (like <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/>), those additional numerals are ignored during conversion. Use <see cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.ToUnicode(System.String,System.Boolean)"/> fro converting to standard Unicode Roman number.</param>
 <returns><paramref name="value"/> with Roman numerals characters for current Roman numbering system replaced by Roman numerals from <paramref name="Target"/>; null when <paramref name="value"/> is null.</returns>
 <remarks>Roman numerals are defined by <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.I"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.V"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.X"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.L"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.C"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.D"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.M"/>. Unknown characters are returned unchanged.
 <note type="inheritinfo">When class derived from <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem"/> defines additional numerals (i.e. as <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> it should override this method to provide correct replacing.</note>
 <para>This function is string-based and works even on numbers that are otherwise invalid.</para></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Target"/> is null</exception>
 <seelaso cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.ToUnicode(System.String,System.Boolean)"/>
</member>
<member name="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode">
 <summary>Roman numbering system based on Unicode character instead of latin letters</summary>
 <remarks>Unicode characters differs in such way that they have single code-points for II, III, IV, VI, VII, VII IX, XI, and XII.
 <para>Special numerals for 11 (Ⅺ or ⅺ) and 12 (Ⅻ or ⅻ) are used only in numbers like 11, 12, 111, 12, 211, 212, 511, 512, 1011, 1012 etc. not in numbers like 21, 22, 61, 62, 121, 122 etc.  - only when the "spoken" meaning is eleven or twelve.</para></remarks>
 <version version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.#ctor(System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)">
 <summary>Creates instance of roman numeral numbering system with given letter for each basic numeral</summary>
 <param name="I">Letter for 1</param>
 <param name="II">Letter for 2</param>
 <param name="III">Letter for 3</param>
 <param name="IV">Letter for 4</param>
 <param name="V">Letter for 5</param>
 <param name="VI">Letter for 6</param>
 <param name="VII">Letter for 7</param>
 <param name="VIII">Letter for 8</param>
 <param name="IX">Letter for 9</param>
 <param name="X">Letter for 10</param>
 <param name="XI">Leter for 11</param>
 <param name="XII">Letter for 12</param>
 <param name="L">Letter for 50</param>
 <param name="C">Letter for 100</param>
 <param name="D">Letter for 500</param>
 <param name="M">Letter for 1000</param>
 <exception cref="T:System.ArgumentException">Any two of numerals are same</exception>
 <exception cref="T:System.ArgumentNullException">Any numeral is null-char</exception>
 <remarks>Usually it is possible to use <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.UpperCase"/> or <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.LowerCase"/> instead of creating instance of this class.</remarks>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.II">
 <summary>Leter for 2</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.III">
 <summary>Leter for 3</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IV">
 <summary>Letter for 4</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VI">
 <summary>Letter for 6</summary>      
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VII">
 <summary>Leter for 7</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VIII">
 <summary>Leter for 8</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IX">
 <summary>Leter for 9</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XI">
 <summary>Leter for 11</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XII">
 <summary>Leter for 12</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.UpperCase">
 <summary>Delault instance for uppercase Roman numeral numbering system (based on Ⅰ, Ⅱ, Ⅲ, Ⅳ, Ⅴ, Ⅵ, Ⅶ, Ⅷ, Ⅸ, Ⅹ, Ⅺ, Ⅻ, Ⅼ, Ⅽ, Ⅾ, Ⅿ)</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.LowerCase">
 <summary>Default instance for lowercase Roman numeral numbering system (based on ⅰ, ⅱ, ⅲ, ⅳ, ⅴ, ⅵ, ⅶ, ⅷ, ⅸ, ⅹ, ⅺ, ⅻ, ⅼ, ⅽ,ⅾ, ⅿ)</summary>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.GetValue(System.Int32)">
 <summary>Gets representation of given number in Unicode Roman numerals numbering system</summary>
 <param name="value">Number to get representation of</param>
 <returns>String representation of given integral number in Roman numerals  numbering system</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.Minimum"/> or greater than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.Maximum"/></exception>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.SupportsParse">
 <summary>Gets value indicating if parsing of string representation to integer is suported by current numbering system</summary>
 <returns>True</returns>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.TryParseInternal(System.String,System.Int32@)">
 <summary>Attempts to parse string representation of number in Roman numeral numbering system to integer</summary>
 <param name="value">String representation of number to parse</param>
 <param name="result">When function exists with success contains parsed value representing <paramref name="value"/> as number</param>
 <returns>When parsing is successfull returns null; otherwise returns exception describing the error.
 This implementation uses <see cref="T:System.OverflowException"/> when number higher than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.Maximum"/> is parsed -and-
 <see cref="T:System.FormatException"/> when unexpected character is reached or unexpected sequence is reached. Note that only alloved subtractings are IV, IX, XL, XC, CD and CM. -and-
 <see cref="T:System.ArgumentNullException"/> whan <paramref name="value"/> is null or an empty string</returns>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.Expand(System.String)">
 <summary>Expands all roman numerals ligatures to singe-glyph characters</summary>
 <param name="Ligatured">String representing roman number containing ligature</param>
 <returns>String with al roman numerals ligatures from <paramref name="Ligatured"/> expanded; null wne <paramref name="Ligatured"/> is null.</returns>
 <remarks>Recognized ligatures are values of <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.II"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.III"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.III"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IV"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VI"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VII"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VIII"/> <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IX"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XI"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XII"/>. All other characters remain unchanged.
 <para>Note for inheritors: This function is caled by <see cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.TryParseInternal(System.String,System.Int32@)"/> before it calls <see cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.TryParseInternal(System.String,System.Int32@)"/>.</para></remarks>
</member>
<member name="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState">
 <summary>States of FSA implementing the <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState"/> function</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.S">
 <summary>Default state</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.I">
 <summary>I found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.II">
 <summary>II found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.III">
 <summary>III found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.IIII">
 <summary>more Is found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.X">
 <summary>X found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.XI">
 <summary>XI found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.XII">
 <summary>XII found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.L">
 <summary>L found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.V">
 <summary>V found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.VI">
 <summary>VI found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.VII">
 <summary>VII found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.VIII">
 <summary>VIII found</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.VV">
 <summary>Do not convert VI, VII, VIII</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CollapseState.XX">
 <summary>Do not convert XI, XII</summary>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.Collapse(System.String)">
 <summary>Collapses expanded roman sring - replaces group of characters with appropriate ligatures when suitable</summary>
 <param name="Expanded">String containing some expanded numbers (II, III, IV, VI, VII, VIII, IX, XI, XII)</param>
 <returns><paramref name="Expanded"/> with expanded numbers represented by multiple characters collapsed to approriate ligatures; null when <paramref name="Expanded"/> is null.</returns>
 <remarks>Ligatures are difined by <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.II"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.III"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.III"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IV"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VI"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VII"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VIII"/> <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IX"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XI"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XII"/>
 <para>Numbers in certain positions are not collapsed - like XXII, LXII etc. Numbers like XIX and XIV are collapsed to ⅩⅨ and ⅩⅣ respectivelly.</para>
 <para>All unrecognized characters are left unchanged.</para>
 <para>In rare cases <see cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.Collapse(System.String)"/> may result to expansion. E.g. ⅩⅪ is "collapsed" as ⅩⅩⅠ.</para>
 <para>Note for inheritors: This function is not called by internal number-to-string or string-to-number logic of <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> class.</para></remarks>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.CharacterwiseConvert(System.String,Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem)">
 <summary>Converts value represented in current Roman numbering system to another Roman numbering system</summary>
 <param name="value">Value to be converted. Represents number in curent Roman numbering system.</param>
 <param name="Target">Target Roman numbering system to convert <paramref name="value"/> to. When target is Roman numbering system that defines additional numerals (those not present in <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> if <paramref name="Target"/> derives from <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> or those not present in <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem"/> if <paramref name="Target"/> does  not derive from <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/>), those additional numerals are ignored during conversion. When tagret is not or does not derive from <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> <paramref name="value"/> is <see cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.Expand(System.String)">expanded</see> before conversion.</param>
 <returns><paramref name="value"/> with Roman numerals characters for current Roman numbering system replaced by Roman numerals from <paramref name="Target"/>; null when <paramref name="value"/> is null.</returns>
 <remarks>Roman numerals are defined by <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.I"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.V"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.X"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.L"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.C"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.D"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.M"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.II"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.III"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IV"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VI"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VII"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VIII"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IX"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XI"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XII"/>. Unknown characters are returned unchanged.
 <note type="inheritinfo">When class derived from <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> defines additional numerals (not present in <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/>) it should override this method to provide correct replacing.</note>
 <para>This function is string-based and works even on numbers that are otherwise invalid.</para></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Target"/> is null</exception>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.ToUnicode(System.String,System.Boolean)">
 <summary>Converts string representing Roman number in current Roman Numbering system to Unicode Roman number</summary>
 <param name="Value">Value to be converted</param>
 <param name="LowerCase">Target system. True for <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.UpperCase"/>, false for <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.UpperCase"/>.</param>
 <returns><paramref name="Value"/> converted from current Roman numerals numbering system to target one identified by <paramref name="LowerCase"/>.</returns>
 <remarks>All unknown characters are returned unchanged. Resulting number is collapsed.
 <para>This function is string-based and works even on numbers that are otherwise invalid.</para></remarks>
 <seelaso cref="M:Tools.GlobalizationT.NumberingSystem.Convert(System.String,Tools.GlobalizationT.NumberingSystem,Tools.GlobalizationT.NumberingSystem)"/><seelaso cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.Collapse(System.String)"/>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.ToLatin(System.String,System.Boolean)">
 <summary>Converts value represented in curent Unicode Roman numbering system to number in Latin-aplphabet-based Roman numbering system</summary>
 <param name="value">Value in current Roman numbering system to be converted</param>
 <param name="LowerCase">Target system. True for <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.LowerCase"/>, false for <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.UpperCase"/>.</param>
 <returns><paramref name="value"/> represented in target Latin-alphabet-based Roman numbering system</returns>
 <remarks>Characters that have not meaning in current Roman nnumbering system are pased to reaturn value without any change.
 <para>This function is string-based and works even on numbers that are otherwise invalid.</para></remarks>
</member>
<member name="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig">
 <summary>Roman umbering system based on Unicode characters with support for numbers up to 4999999</summary>
 <remarks>This class is almost the same as <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/>, but it supports numerals up to 1000000. Numerals bigger than 1000 are denoted using 1000-multiplication suffix (combining overline (unicode 0x305) by default).</remarks>
 <version version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.#ctor(System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char,System.Char)">
 <summary>Creates instance of roman numeral numbering system with given letter for each basic numeral</summary>
 <param name="I">Letter for 1</param>
 <param name="II">Letter for 2</param>
 <param name="III">Letter for 3</param>
 <param name="IV">Letter for 4</param>
 <param name="V">Letter for 5</param>
 <param name="VI">Letter for 6</param>
 <param name="VII">Letter for 7</param>
 <param name="VIII">Letter for 8</param>
 <param name="IX">Letter for 9</param>
 <param name="X">Letter for 10</param>
 <param name="XI">Leter for 11</param>
 <param name="XII">Letter for 12</param>
 <param name="L">Letter for 50</param>
 <param name="C">Letter for 100</param>
 <param name="D">Letter for 500</param>
 <param name="M">Letter for 1000</param>
 <exception cref="T:System.ArgumentException">Any two of numerals are same -or- <paramref name="ThousandMultiplySuffix"/> is same as any of neumerals.</exception>
 <exception cref="T:System.ArgumentNullException">Any numeral is null-char -or- <paramref name="ThousandMultiplySuffix"/> is nullchar</exception>
 <remarks>Usually it is possible to use <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.UpperCase"/> or <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.LowerCase"/> instead of creating instance of this class.</remarks>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.ThousandMultiplySuffix">
 <summary>Thousand multiplication suffix of character</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.UpperCase">
 <summary>Delault instance for uppercase Roman numeral numbering system (based on Ⅰ, Ⅱ, Ⅲ, Ⅳ, Ⅴ, Ⅵ, Ⅶ, Ⅷ, Ⅸ, Ⅹ, Ⅺ, Ⅻ, Ⅼ, Ⅽ, Ⅾ, Ⅿ)</summary>
</member>
<member name="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.LowerCase">
 <summary>Default instance for lowercase Roman numeral numbering system (based on ⅰ, ⅱ, ⅲ, ⅳ, ⅴ, ⅵ, ⅶ, ⅷ, ⅸ, ⅹ, ⅺ, ⅻ, ⅼ, ⅽ,ⅾ, ⅿ)</summary>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.GetValue(System.Int32)">
 <summary>Gets representation of given number in Unicode Roman numerals numbering system</summary>
 <param name="value">Number to get representation of</param>
 <returns>String representation of given integral number in Roman numerals  numbering system</returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.Minimum"/> or greater than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.Maximum"/></exception>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.ExpandThousands(System.String)">
 <summary>Replaces numerals bigger than 1000 with appropriate number of <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.M">Ms</see></summary>
 <param name="value">Value to perform replacemet in</param>
 <returns>Value with suffixed numbers replaced by many <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.M">Ms</see>; null when <paramref name="value"/> is null.</returns>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.CharacterwiseConvert(System.String,Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem)">
 <summary>Converts value represented in current Roman numbering system to another Roman numbering system</summary>
 <param name="value">Value to be converted. Represents number in curent Roman numbering system.</param>
 <param name="Target">Target Roman numbering system to convert <paramref name="value"/> to. When target is Roman numbering system that defines additional numerals (those not present in <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> if <paramref name="Target"/> derives from <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> or those not present in <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem"/> if <paramref name="Target"/> does  not derive from <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/>), those additional numerals are ignored during conversion. When tagret is not or does not derive from <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> <paramref name="value"/> is <see cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.Expand(System.String)">expanded</see> before conversion.</param>
 <returns><paramref name="value"/> with Roman numerals characters for current Roman numbering system replaced by Roman numerals from <paramref name="Target"/>; null when <paramref name="value"/> is null.</returns>
 <remarks>Roman numerals are defined by <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.I"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.V"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.X"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.L"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.C"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.D"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.M"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.II"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.III"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IV"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VI"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VII"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VIII"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IX"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XI"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XII"/>. Unknown characters are returned unchanged.
 <note type="inheritinfo">When class derived from <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/> defines additional numerals (not present in <see cref="T:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode"/>) it should override this method to provide correct replacing.</note>
 <para>This function is string-based and works even on numbers that are otherwise invalid.</para></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Target"/> is null</exception>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.ToLatin(System.String,System.Boolean)">
 <summary>Converts value represented in curent Unicode Roman numbering system to number in Latin-aplphabet-based Roman numbering system</summary>
 <param name="value">Value in current Roman numbering system to be converted</param>
 <param name="LowerCase">Target system. True for <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.LowerCase"/>, false for <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.UpperCase"/>.</param>
 <returns><paramref name="value"/> represented in target Latin-alphabet-based Roman numbering system</returns>
 <remarks>Characters that have not meaning in current Roman nnumbering system are pased to reaturn value without any change.
 <para>This function is string-based and works even on numbers that are otherwise invalid.</para></remarks>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.Maximum">
 <summary>Gets maximal supported number in Roman numerals numbering system</summary>
 <returns>4999999</returns>
</member>
<member name="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.SupportsParse">
 <summary>Gets value indicating if parsing of string representation to integer is suported by current numbering system</summary>
 <returns>True</returns>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.Expand(System.String)">
 <summary>Expands all roman numerals ligatures to singe-glyph characters</summary>
 <param name="Ligatured">String representing roman number containing ligature</param>
 <returns>String with al roman numerals ligatures from <paramref name="Ligatured"/> expanded; null wne <paramref name="Ligatured"/> is null.</returns>
 <remarks>Recognized ligatures are values of <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.II"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.III"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.III"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IV"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VI"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VII"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.VIII"/> <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.IX"/>, <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XI"/> and <see cref="F:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemUnicode.XII"/>. All other characters remain unchanged.
 <para>Note for inheritors: This function is caled by <see cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.TryParseInternal(System.String,System.Int32@)"/> before it calls <see cref="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystem.TryParseInternal(System.String,System.Int32@)"/>.</para></remarks>
</member>
<member name="M:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.TryParseInternal(System.String,System.Int32@)">
 <summary>Attempts to parse string representation of number in Roman numeral numbering system to integer</summary>
 <param name="value">String representation of number to parse</param>
 <param name="result">When function exists with success contains parsed value representing <paramref name="value"/> as number</param>
 <returns>When parsing is successfull returns null; otherwise returns exception describing the error.
 This implementation uses <see cref="T:System.OverflowException"/> when number higher than <see cref="P:Tools.GlobalizationT.NumberingSystemsT.RomanNumberingSystemBig.Maximum"/> is parsed -and-
 <see cref="T:System.FormatException"/> when unexpected character is reached or unexpected sequence is reached. Note that only alloved subtractings are IV, IX, XL, XC, CD and CM. -and-
 <see cref="T:System.ArgumentNullException"/> whan <paramref name="value"/> is null or an empty string</returns>
</member>
<member name="T:Tools.LinqT.LoopState">
 <summary>Identifies states of for loop iteration</summary>
 <version version="1.5.3">This enumeration is new in version 1.5.3</version>
</member>
<member name="F:Tools.LinqT.LoopState.Next">
 <summary>Process value returned from the loop and continue with next iteration</summary>
 <remarks>Resembles VB <c>Next</c></remarks>
</member>
<member name="F:Tools.LinqT.LoopState.Continue">
 <summary>Ignore value returned from the loop and continue with next iteration</summary>
 <remarks>Resembles VB <c>Continue</c> / C# <c>continue</c></remarks>
</member>
<member name="F:Tools.LinqT.LoopState.Exit">
 <summary>Ignore value returned from the loop and terminate loop execution</summary>
 <remarks>Resembles VB <c>Exit For</c> / C# <c>break</c></remarks>
</member>
<member name="F:Tools.LinqT.LoopState.Return">
 <summary>Process value returned from the loop and terminate loop execution</summary>
</member>
<member name="T:Tools.LinqT.Increment`1">
 <summary>Delegate of increment function for for loop</summary>
 <typeparam name="TI">Type of for loop counter (<c>i</c>)</typeparam>
 <param name="i">For loop variable to be incremented</param>
 <version version="1.5.3">This delegate is new in version 1.5.3</version>
</member>
<member name="T:Tools.LinqT.LoopBody`2">
 <summary>Delegate for body of for loop</summary>
 <typeparam name="TReturn">Type of values returned from loop</typeparam>
 <typeparam name="TI">Type of loop conter varieble (<c>i</c>)</typeparam>
 <param name="i">Current value of loop counter. Note: Loop body can alter the value. This value is automatically incremented (if increment function was provided) after each loop iteration.</param>
 <param name="yield">Value returned as result of this iteration</param>
 <returns>State value indicating wheather to process <paramref name="yield"/> and how continue after current iteration</returns>
 <remarks>If you don't plan to use continue or breal -like behavior in your loop, you can use <see cref="T:Tools.LinqT.NonBreakingLoopBody`2"/> isntead</remarks>
 <version version="1.5.3">This delegate is new in version 1.5.3</version>
</member>
<member name="T:Tools.LinqT.NonBreakingLoopBody`2">
 <summary>Delegate for body of for loop which does not use break and continue statements</summary>
 <typeparam name="TReturn">Type of values returned from loop</typeparam>
 <typeparam name="TI">Type of loop conter varieble (<c>i</c>)</typeparam>
 <param name="i">Current value of loop counter. Note: Loop body can alter the value. This value is automatically incremented (if increment function was provided) after each loop iteration.</param>
 <param name="yield">Value returned as result of this iteration</param>
 <remarks>When this delegate is used <see cref="F:Tools.LinqT.LoopState.Next"/> is assomed for all iterations</remarks>
 <version version="1.5.3">This delegate is new in version 1.5.3</version>
 <version version="1.5.4">Type parameter <c>ti</c> renamed to <c>TI</c></version>
</member>
<member name="T:Tools.LinqT.ForEachBody`2">
 <summary>Delegate for body of for-each loop</summary>
 <typeparam name="TReturn">Type of value returned from loop</typeparam>
 <typeparam name="TItem">Type of for-each item</typeparam>
 <param name="item">Current item of for-each processing</param>
 <param name="yield">Value returned as result of this iteration</param>
 <returns>State value indicating wheather to process <paramref name="yield"/> and how continue after current iteration</returns>
 <remarks>If you don't plan to use continue or breal -like behavior in your loop, you can use <see cref="T:Tools.LinqT.NonBreakingForEachBody`2"/> isntead</remarks>
 <version version="1.5.3">This delegate is new in version 1.5.3</version>
</member>
<member name="T:Tools.LinqT.NonBreakingForEachBody`2">
 <summary>Delegate for body of for-each loop which does not use break and continue statements</summary>
 <typeparam name="TReturn">Type of value returned from loop</typeparam>
 <typeparam name="TItem">Type of for-each item</typeparam>
 <param name="item">Current item of for-each processing</param>
 <param name="yield">Value returned as result of this iteration</param>
 <remarks>If you don't plan to use continue or breal -like behavior in your loop, you can use <see cref="T:Tools.LinqT.NonBreakingForEachBody`2"/> isntead</remarks>
 <version version="1.5.3">This delegate is new in version 1.5.3</version>
</member>
<member name="T:Tools.LinqT.ForLoopCollection`2">
 <summary>This class allows to turn any C#/C++-style for loop to <see cref="T:System.Collections.Generic.IEnumerable`1"/>/<see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
 <typeparam name="TReturn">Type of values being returned from the loop</typeparam>
 <typeparam name="TI">Type of loop counter (<c>i</c>)</typeparam>
 <remarks>Derived classes can work with VB-style for loops and for-each loops.</remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="F:Tools.LinqT.ForLoopCollection`2.initialize">
 <summary>Function used to initialize for loop</summary>
</member>
<member name="F:Tools.LinqT.ForLoopCollection`2.condition">
 <summary>Function used as condition indicating wheather to continue with next iteration or not</summary>
</member>
<member name="F:Tools.LinqT.ForLoopCollection`2.increment">
 <summary>Function used to increment current value, ignored if null</summary>
</member>
<member name="F:Tools.LinqT.ForLoopCollection`2.loop">
 <summary>Function representing loop body</summary>
</member>
<member name="F:Tools.LinqT.ForLoopCollection`2.started">
 <summary>True indicates that iteration has started (<see cref="F:Tools.LinqT.ForLoopCollection`2.initialize"/> was executed)</summary>
</member>
<member name="F:Tools.LinqT.ForLoopCollection`2.finished">
 <summary>True indicatees that iteration has finished (<see cref="F:Tools.LinqT.ForLoopCollection`2.condition"/> returned false or <see cref="F:Tools.LinqT.ForLoopCollection`2.loop"/> returned <see cref="F:Tools.LinqT.LoopState.Exit"/> or <see cref="F:Tools.LinqT.LoopState.Exit"/>).</summary>
</member>
<member name="F:Tools.LinqT.ForLoopCollection`2.currVal">
 <summary>Current value obtained from loop</summary>
</member>
<member name="F:Tools.LinqT.ForLoopCollection`2.i">
 <summary>Current value of iterator</summary>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.#ctor(System.Func{`1},System.Func{`1,System.Boolean},Tools.LinqT.Increment{`1},Tools.LinqT.LoopBody{`0,`1})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`2"/> class. Increment passed by reference, loop can use break and continue</summary>
 <param name="initialize">Function to be used to initialized iteration. It returns initial value of iterator. Called once before the iteration starts (and again if <see cref="M:Tools.LinqT.ForLoopCollection`2.Reset"/> was called).</param>
 <param name="condition">Function to test wheather to continue in iteration or not. Called before each iteration including the first one. If it returns true iteration is entered, if it returns false iteration ends and <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/> returns false.</param>
 <param name="increment">Function used to increment value. Called after each loop execution (unless termination was indicated). Value of iteration variable to this function is passed by reference and function should change it to a new value used in next loop iteration. This parameter is ignored if null. In such case incrementation logic should be in <see cref="F:Tools.LinqT.ForLoopCollection`2.condition"/> or <see cref="F:Tools.LinqT.ForLoopCollection`2.loop"/>.</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter. The function returns value indicating how to process value returned through the second parameter and wheather to continue the loop. When this function returns value that is not defined in the <see cref="T:Tools.LinqT.LoopState"/> enumeration a <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> is thrown by <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="initialize"/>, <paramref name="condition"/> or <paramref name="loop"/> is null.</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.#ctor(System.Func{`1},System.Func{`1,System.Boolean},Tools.LinqT.Increment{`1},Tools.LinqT.NonBreakingLoopBody{`0,`1})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`2"/> class. Increment passed by reference, loop cannot use break and continue</summary>
 <param name="initialize">Function to be used to initialized iteration. It returns initial value of iterator. Called once before the iteration starts (and again if <see cref="M:Tools.LinqT.ForLoopCollection`2.Reset"/> was called).</param>
 <param name="condition">Function to test wheather to continue in iteration or not. Called before each iteration including the first one. If it returns true iteration is entered, if it returns false iteration ends and <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/> returns false.</param>
 <param name="increment">Function used to increment value. Called after each loop execution (unless termination was indicated). Value of iteration variable to this function is passed by reference and function should change it to a new value used in next loop iteration. This parameter is ignored if null. In such case incrementation logic should be in <see cref="F:Tools.LinqT.ForLoopCollection`2.condition"/> or <see cref="F:Tools.LinqT.ForLoopCollection`2.loop"/>.</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="initialize"/>, <paramref name="condition"/> or <paramref name="loop"/> is null.</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.#ctor(System.Func{`1},System.Func{`1,System.Boolean},System.Func{`1,`1},Tools.LinqT.LoopBody{`0,`1})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`2"/> class. Increment passed by value, loop can use break and continue</summary>
 <param name="initialize">Function to be used to initialized iteration. It returns initial value of iterator. Called once before the iteration starts (and again if <see cref="M:Tools.LinqT.ForLoopCollection`2.Reset"/> was called).</param>
 <param name="condition">Function to test wheather to continue in iteration or not. Called before each iteration including the first one. If it returns true iteration is entered, if it returns false iteration ends and <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/> returns false.</param>
 <param name="increment">Function used to increment value. Called after each loop execution (unless termination was indicated). Old iteration variable value is passed here and the function should return new value used in next loop iteration. This parameter is ignored if null. In such case incrementation logic should be in <see cref="F:Tools.LinqT.ForLoopCollection`2.condition"/> or <see cref="F:Tools.LinqT.ForLoopCollection`2.loop"/>.</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter. The function returns value indicating how to process value returned through the second parameter and wheather to continue the loop. When this function returns value that is not defined in the <see cref="T:Tools.LinqT.LoopState"/> enumeration a <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> is thrown by <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="initialize"/>, <paramref name="condition"/> or <paramref name="loop"/> is null.</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.#ctor(System.Func{`1},System.Func{`1,System.Boolean},System.Func{`1,`1},Tools.LinqT.NonBreakingLoopBody{`0,`1})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`2"/> class. Increment passed by value, loop cannot use break and continue</summary>
 <param name="initialize">Function to be used to initialized iteration. It returns initial value of iterator. Called once before the iteration starts (and again if <see cref="M:Tools.LinqT.ForLoopCollection`2.Reset"/> was called).</param>
 <param name="condition">Function to test wheather to continue in iteration or not. Called before each iteration including the first one. If it returns true iteration is entered, if it returns false iteration ends and <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/> returns false.</param>
 <param name="increment">Function used to increment value. Called after each loop execution (unless termination was indicated). Old iteration variable value is passed here and the function should return new value used in next loop iteration. This parameter is ignored if null. In such case incrementation logic should be in <see cref="F:Tools.LinqT.ForLoopCollection`2.condition"/> or <see cref="F:Tools.LinqT.ForLoopCollection`2.loop"/>.</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="initialize"/>, <paramref name="condition"/> or <paramref name="loop"/> is null.</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.#ctor(System.Func{`1},System.Func{`1,System.Boolean},Tools.LinqT.Increment{`1},System.Func{`1,`0})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`2"/> class. Increment passed by reference, loop can neitrher break nor affect loop variable</summary>
 <param name="initialize">Function to be used to initialized iteration. It returns initial value of iterator. Called once before the iteration starts (and again if <see cref="M:Tools.LinqT.ForLoopCollection`2.Reset"/> was called).</param>
 <param name="condition">Function to test wheather to continue in iteration or not. Called before each iteration including the first one. If it returns true iteration is entered, if it returns false iteration ends and <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/> returns false.</param>
 <param name="increment">Function used to increment value. Called after each loop execution (unless termination was indicated). Value of iteration variable to this function is passed by reference and function should change it to a new value used in next loop iteration. This parameter is ignored if null. In such case incrementation logic should be in <see cref="F:Tools.LinqT.ForLoopCollection`2.condition"/> or <see cref="F:Tools.LinqT.ForLoopCollection`2.loop"/>.</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="initialize"/>, <paramref name="condition"/> or <paramref name="loop"/> is null.</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.#ctor(System.Func{`1},System.Func{`1,System.Boolean},System.Func{`1,`1},System.Func{`1,`0})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`2"/> class. Increment passed by value, loop can neitrher break nor affect loop variable</summary>
 <param name="initialize">Function to be used to initialized iteration. It returns initial value of iterator. Called once before the iteration starts (and again if <see cref="M:Tools.LinqT.ForLoopCollection`2.Reset"/> was called).</param>
 <param name="condition">Function to test wheather to continue in iteration or not. Called before each iteration including the first one. If it returns true iteration is entered, if it returns false iteration ends and <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/> returns false.</param>
 <param name="increment">Function used to increment value. Called after each loop execution (unless termination was indicated). Old iteration variable value is passed here and the function should return new value used in next loop iteration. This parameter is ignored if null. In such case incrementation logic should be in <see cref="F:Tools.LinqT.ForLoopCollection`2.condition"/> or <see cref="F:Tools.LinqT.ForLoopCollection`2.loop"/>.</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="initialize"/>, <paramref name="condition"/> or <paramref name="loop"/> is null.</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.#ctor(Tools.LinqT.ForLoopCollection{`0,`1})">
 <summary>Copy CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`2"/> which is clone of another instance.</summary>
 <param name="other">Instance to clone</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null</exception>
 <exception cref="T:System.ObjectDisposedException"><paramref name="other"/> is disposed</exception>
 <remarks>Used by <see cref="M:Tools.LinqT.ForLoopCollection`2.Clone"/>.</remarks>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.IEnumerable_GetEnumerator">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.LinqT.ForLoopCollection`2.Current">
 <summary>Gets the element in the collection at the current position of the enumerator.</summary>
 <returns>The element in the collection at the current position of the enumerator.</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
</member>
<member name="P:Tools.LinqT.ForLoopCollection`2.IEnumerator_Current">
 <summary>Gets the current element in the collection.</summary>
 <returns>The current element in the collection.</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The loop function returned value that is not defined in <see cref="T:Tools.LinqT.LoopState"/> enumeration.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="P:Tools.LinqT.ForLoopCollection`2.IsDisposed">
 <summary>Gets value indicating if this class was disposed</summary>
</member>
<member name="F:Tools.LinqT.ForLoopCollection`2.disposedValue">
 <summary> To detect redundant calls</summary>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.Dispose(System.Boolean)">
 <summary>Implements <see cref="M:System.IDisposable.Dispose"/></summary>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance.</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <remarks><note type="inheritinfo">To override this function, override <see cref="M:Tools.LinqT.ForLoopCollection`2.CloneInternal"/> instead.</note></remarks>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`2.CloneInternal">
 <summary>Internally creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <remarks><note type="inheritinfo">Override this function if you want to override <see cref="M:System.ICloneable.Clone"/> functionality (the <see cref="M:Tools.LinqT.ForLoopCollection`2.Clone"/> function)</note></remarks>
</member>
<member name="T:Tools.LinqT.ForLoopCollection`1">
 <summary>This class allows to turn any <see cref="T:System.Int32"/>-based VB-style for loop to <see cref="T:System.Collections.Generic.IEnumerable`1"/>/<see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
 <typeparam name="T">Type of values being returned from the loop</typeparam>
 <remarks><example>Shows a C# iterator code and how to simulate it in VB using <see cref="T:Tools.LinqT.ForLoopCollection`1"/>
 <code lang="C#"><![CDATA[
 public static IEnumerable<int> SplitToInts(string commaSeparated){
     if(commaSeparated == null) throw new ArgumentNullException("commaSeparated");
     var parts = commaSeparated.Split(',');
     for(var i = 0; i < parts.Length; i++){
         if(string.IsNullOrEmpty(parts[i])) continue;
         yield return int.Parse(parts[i]);
     }
 }
 ]]></code><code><![CDATA[
 Public Shared Function SplitToInts(ByVal commaSeparated As String) As IEnumerable(Of Integer)
     If commaSeparated Is Nothing Then Throw New ArgumentNullException("commaSeparated")
     Dim parts = commaSeparated.Split(","c)
     Return New ForLoopCollection(Of Integer)(0, parts.Length - 1,
                                              Function(ByRef i, ByRef yield)
                                                  If parts(i) = "" Then Return LoopState.Continue
                                                  yield = Integer.Parse(parts(i))
                                                  Return LoopState.Next
                                              End Function
                                             )
 End Function
 ]]></code><note>The VB sample behavior is actually better than of C# one:
 The <see cref="T:System.ArgumentNullException"/> is potentially thrown by C# at first call to <see cref="M:System.Collections.IEnumerator.MoveNext"/> while VB throws the error immediatelly on <c>SplitToInts</c> call.</note></example></remarks>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`1.#ctor(System.Int32,System.Int32,Tools.LinqT.LoopBody{`0,System.Int32})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class resembling loop with increment 1</summary>
 <param name="from">Start position of the loop</param>
 <param name="to">Maximum value of the loop</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter. The function returns value indicating how to process value returned through the second parameter and wheather to continue the loop. When this function returns value that is not defined in the <see cref="T:Tools.LinqT.LoopState"/> enumeration a <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> is thrown by <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/>.</param>
 <remarks>This constructor creates VB-style loop <c>For i = [from] To [to]</c> or C#-style loop <c>for(int i = from; i &lt;= to; i++)</c></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`1.#ctor(System.Int32,System.Int32,System.Int32,Tools.LinqT.LoopBody{`0,System.Int32})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class resembling loop with custom increment</summary>
 <param name="from">Start position of the loop</param>
 <param name="to">Maximum value of the loop</param>
 <param name="step">Increment size</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter. The function returns value indicating how to process value returned through the second parameter and wheather to continue the loop. When this function returns value that is not defined in the <see cref="T:Tools.LinqT.LoopState"/> enumeration a <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> is thrown by <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/>.</param>
 <remarks>This constructor creates VB-style loop <c>For i = [from] To [to] Step [step]</c> or C#-style loop <c>for(int i = from; i &lt;= to; i += step)</c></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`1.#ctor(System.Int32,System.Int32,Tools.LinqT.NonBreakingLoopBody{`0,System.Int32})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class resembling loop with increment 1, loop cannot be prematurely terminated</summary>
 <param name="from">Start position of the loop</param>
 <param name="to">Maximum value of the loop</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter.</param>
 <remarks>This constructor creates VB-style loop <c>For i = [from] To [to]</c> or C#-style loop <c>for(int i = from; i &lt;= to; i++)</c></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`1.#ctor(System.Int32,System.Int32,System.Int32,Tools.LinqT.NonBreakingLoopBody{`0,System.Int32})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class resembling loop with custom increment, loop cannot be prematurely terminated</summary>
 <param name="from">Start position of the loop</param>
 <param name="to">Maximum value of the loop</param>
 <param name="step">Increment size</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter.</param>
 <remarks>This constructor creates VB-style loop <c>For i = [from] To [to] Step [step]</c> or C#-style loop <c>for(int i = from; i &lt;= to; i += step)</c></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`1.#ctor(System.Int32,System.Int32,System.Func{System.Int32,`0})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class resembling loop with increment 1, no option to break, continue or affect loop variable</summary>
 <param name="from">Start position of the loop</param>
 <param name="to">Maximum value of the loop</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and should return current value of generated collection.</param>
 <remarks>This constructor creates VB-style loop <c>For i = [from] To [to]</c> or C#-style loop <c>for(int i = from; i &lt;= to; i++)</c></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> is null</exception>
 <version version="1.5.4">This CTor is new in version 1.5.4</version>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`1.#ctor(Tools.LinqT.ForLoopCollection{`0})">
 <summary>Copy CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class which is clone of another given instance</summary>
 <param name="other">Instance to clone</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null</exception>
 <exception cref="T:System.ObjectDisposedException"><paramref name="other"/> is disposed</exception>
 <remarks>Used by <see cref="M:Tools.LinqT.ForLoopCollection`1.Clone"/></remarks>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`1.CloneInternal">
 <summary>Internally creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <remarks><note type="inheritinfo">Override this function if you want to override <see cref="M:System.ICloneable.Clone"/> functionality (the <see cref="M:Tools.LinqT.ForLoopCollection`1.Clone"/> function)</note></remarks>
</member>
<member name="M:Tools.LinqT.ForLoopCollection`1.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <remarks><note type="inheritinfo">To override this function, override <see cref="M:Tools.LinqT.ForLoopCollection`1.CloneInternal"/> instead.</note></remarks>
</member>
<member name="T:Tools.LinqT.ForLoopCollectionLong`1">
 <summary>This class allows to turn any <see cref="T:System.Int64"/>-based VB-style for loop to <see cref="T:System.Collections.Generic.IEnumerable`1"/>/<see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
 <typeparam name="T">Type of values being returned from the loop</typeparam>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.LinqT.ForLoopCollectionLong`1.#ctor(System.Int64,System.Int64,Tools.LinqT.LoopBody{`0,System.Int64})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class resembling loop with increment 1</summary>
 <param name="from">Start position of the loop</param>
 <param name="to">Maximum value of the loop</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter. The function returns value indicating how to process value returned through the second parameter and wheather to continue the loop. When this function returns value that is not defined in the <see cref="T:Tools.LinqT.LoopState"/> enumeration a <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> is thrown by <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/>.</param>
 <remarks>This constructor creates VB-style loop <c>For i = [from] To [to]</c> or C#-style loop <c>for(int i = from; i &lt;= to; i++)</c></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollectionLong`1.#ctor(System.Int64,System.Int64,System.Int64,Tools.LinqT.LoopBody{`0,System.Int64})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class resembling loop with custom increment</summary>
 <param name="from">Start position of the loop</param>
 <param name="to">Maximum value of the loop</param>
 <param name="step">Increment size</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter. The function returns value indicating how to process value returned through the second parameter and wheather to continue the loop. When this function returns value that is not defined in the <see cref="T:Tools.LinqT.LoopState"/> enumeration a <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> is thrown by <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/>.</param>
 <remarks>This constructor creates VB-style loop <c>For i = [from] To [to] Step [step]</c> or C#-style loop <c>for(int i = from; i &lt;= to; i += step)</c></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollectionLong`1.#ctor(System.Int32,System.Int32,Tools.LinqT.NonBreakingLoopBody{`0,System.Int64})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class resembling loop with increment 1, loop cannot be prematurely terminated</summary>
 <param name="from">Start position of the loop</param>
 <param name="to">Maximum value of the loop</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter.</param>
 <remarks>This constructor creates VB-style loop <c>For i = [from] To [to]</c> or C#-style loop <c>for(int i = from; i &lt;= to; i++)</c></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollectionLong`1.#ctor(System.Int32,System.Int32,System.Int32,Tools.LinqT.NonBreakingLoopBody{`0,System.Int64})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class resembling loop with custom increment, loop cannot be prematurely terminated</summary>
 <param name="from">Start position of the loop</param>
 <param name="to">Maximum value of the loop</param>
 <param name="step">Increment size</param>
 <param name="loop">Function called as loop body. It receives current value of iterator and can change it. Loop return value should be returned through the second parameter.</param>
 <remarks>This constructor creates VB-style loop <c>For i = [from] To [to] Step [step]</c> or C#-style loop <c>for(int i = from; i &lt;= to; i += step)</c></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollectionLong`1.#ctor(Tools.LinqT.ForLoopCollectionLong{`0})">
 <summary>Copy CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForLoopCollection`1"/> class which is clone of another given instance</summary>
 <param name="other">Instance to clone</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null</exception>
 <remarks>Used by <see cref="M:Tools.LinqT.ForLoopCollectionLong`1.Clone"/></remarks>
 <exception cref="T:System.ObjectDisposedException"><paramref name="other"/> is disposed</exception>
</member>
<member name="M:Tools.LinqT.ForLoopCollectionLong`1.CloneInternal">
 <summary>Internally creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <remarks><note type="inheritinfo">Override this function if you want to override <see cref="M:System.ICloneable.Clone"/> functionality (the <see cref="M:Tools.LinqT.ForLoopCollectionLong`1.Clone"/> function)</note></remarks>
</member>
<member name="M:Tools.LinqT.ForLoopCollectionLong`1.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <remarks><note type="inheritinfo">To override this function, override <see cref="M:Tools.LinqT.ForLoopCollectionLong`1.CloneInternal"/> instead.</note></remarks>
</member>
<member name="T:Tools.LinqT.ForEachCollection`2">
 <summary>This class allows to turn any for-each loop to <see cref="T:System.Collections.Generic.IEnumerable`1"/>/<see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.LinqT.ForEachCollection`2.#ctor(System.Collections.Generic.IEnumerator{`1},Tools.LinqT.ForEachBody{`0,`1})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForEachBody`2"/> class from <see cref="T:System.Collections.Generic.IEnumerator`1"/></summary>
 <param name="enumerator">Enumerator to be wrapped by this class</param>
 <param name="loop">Function called as loop body. It receives current item form enumerator. Loop return value should be returned through the second parameter. The function returns value indicating how to process value returned through the second parameter and wheather to continue the loop. When this function returns value that is not defined in the <see cref="T:Tools.LinqT.LoopState"/> enumeration a <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> is thrown by <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/>.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> or <paramref name="enumerator"/> is null</exception>
 <remarks>Whenever possible pass <see cref="T:System.Collections.Generic.IEnumerable`1"/> rather than <see cref="T:System.Collections.Generic.IEnumerator`1"/> to <see cref="T:Tools.LinqT.ForEachCollection`2"/> class constructor. Passing <see cref="T:System.Collections.Generic.IEnumerator`1"/> here cripples <see cref="T:Tools.ICloneable`1"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> functionality of the class. It means that all oljects obtained from <see cref="M:Tools.LinqT.ForEachCollection`2.Clone"/> or <see cref="M:Tools.LinqT.ForLoopCollection`2.GetEnumerator"/> will always point to the same position (same <see cref="P:Tools.LinqT.ForLoopCollection`2.Current"/> value) inside the collection which may have unwanted side effects.</remarks>
</member>
<member name="M:Tools.LinqT.ForEachCollection`2.#ctor(System.Collections.Generic.IEnumerable{`1},Tools.LinqT.ForEachBody{`0,`1})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForEachBody`2"/> class from <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <param name="collection">Colletion to be wrapped by this class</param>
 <param name="loop">Function called as loop body. It receives current item form enumerator. Loop return value should be returned through the second parameter. The function returns value indicating how to process value returned through the second parameter and wheather to continue the loop. When this function returns value that is not defined in the <see cref="T:Tools.LinqT.LoopState"/> enumeration a <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> is thrown by <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/>.</param>     
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> or <paramref name="collection"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForEachCollection`2.#ctor(System.Collections.Generic.IEnumerator{`1},Tools.LinqT.NonBreakingForEachBody{`0,`1})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForEachBody`2"/> class from <see cref="T:System.Collections.Generic.IEnumerator`1"/>, loop iteration cannot be prematurely interrupted</summary>
 <param name="enumerator">Enumerator to be wrapped by this class</param>
 <param name="loop">Function called as loop body. It receives current item form enumerator. Loop return value should be returned through the second parameter.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> or <paramref name="enumerator"/> is null</exception>
 <remarks>Whenever possible pass <see cref="T:System.Collections.Generic.IEnumerable`1"/> rather than <see cref="T:System.Collections.Generic.IEnumerator`1"/> to <see cref="T:Tools.LinqT.ForEachCollection`2"/> class constructor. Passing <see cref="T:System.Collections.Generic.IEnumerator`1"/> here cripples <see cref="T:Tools.ICloneable`1"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/> functionality of the class. It means that all oljects obtained from <see cref="M:Tools.LinqT.ForEachCollection`2.Clone"/> or <see cref="M:Tools.LinqT.ForLoopCollection`2.GetEnumerator"/> will always point to the same position (same <see cref="P:Tools.LinqT.ForLoopCollection`2.Current"/> value) inside the collection which may have unwanted side effects.</remarks>
</member>
<member name="M:Tools.LinqT.ForEachCollection`2.#ctor(System.Collections.Generic.IEnumerable{`1},Tools.LinqT.NonBreakingForEachBody{`0,`1})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForEachBody`2"/> class from <see cref="T:System.Collections.Generic.IEnumerable`1"/>, loop iteration cannot be prematurely interrupted</summary>
 <param name="collection">Colletion to be wrapped by this class</param>
 <param name="loop">Function called as loop body. It receives current item form enumerator. Loop return value should be returned through the second parameter. The function returns value indicating how to process value returned through the second parameter and wheather to continue the loop. When this function returns value that is not defined in the <see cref="T:Tools.LinqT.LoopState"/> enumeration a <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> is thrown by <see cref="M:Tools.LinqT.ForLoopCollection`2.MoveNext"/>.</param>     
 <exception cref="T:System.ArgumentNullException"><paramref name="loop"/> or <paramref name="collection"/> is null</exception>
</member>
<member name="M:Tools.LinqT.ForEachCollection`2.#ctor(Tools.LinqT.ForEachCollection{`0,`1})">
 <summary>Copy CTor - creates a new instance of the <see cref="T:Tools.LinqT.ForEachCollection`2"/> class which is clone of another given instance</summary>
 <param name="other">Instance to clone</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="other"/> is null</exception>
 <remarks>Used by <see cref="M:Tools.LinqT.ForEachCollection`2.Clone"/></remarks>
 <exception cref="T:System.ObjectDisposedException"><paramref name="other"/> is disposed</exception>
</member>
<member name="M:Tools.LinqT.ForEachCollection`2.CloneInternal">
 <summary>Internally creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <remarks><note type="inheritinfo">Override this function if you want to override <see cref="M:System.ICloneable.Clone"/> functionality (the <see cref="M:Tools.LinqT.ForEachCollection`2.Clone"/> function)</note></remarks>
</member>
<member name="M:Tools.LinqT.ForEachCollection`2.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <exception cref="T:System.ObjectDisposedException">This instance has already been disposed</exception>
 <remarks><note type="inheritinfo">To override this function, override <see cref="M:Tools.LinqT.ForEachCollection`2.CloneInternal"/> instead.</note></remarks>
</member>
<member name="T:Tools.LinqT.EnumerableT">
 <summary>Tools for working with <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
</member>
<member name="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{``0}[])">
 <summary>Creates union of all given collections</summary>
 <param name="collections">Collections to create union of</param>
 <typeparam name="T">Type of items in collection(s)</typeparam>
 <returns>Collection that contains members of all collections in <paramref name="collections"/>. If <paramref name="collections"/> is null returns an emlty collection.</returns>
 <remarks>Unification is done immediatelly.</remarks>
 <seelaso cref="M:Tools.LinqT.EnumerableT.FlatAllDeffered``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})"/>
</member>
<member name="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
 <summary>Creates union of all given collections</summary>
 <param name="collections">Collections to create union of</param>
 <typeparam name="T">Type of items in collection(s)</typeparam>
 <returns>Collection that contains all members of all collections in <paramref name="collections"/>. If <paramref name="collections"/> is null returns an empty collection.</returns>
 <remarks>Unification is done immediatelly causing all collections to be walked through on function call.</remarks>
 <seelaso cref="M:Tools.LinqT.EnumerableT.FlatAllDeffered``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})"/>
</member>
<member name="M:Tools.LinqT.EnumerableT.FlatAll``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
 <summary>Creates union of all given collections</summary>
 <param name="collections">Collections to create union of</param>
 <typeparam name="T">Type of items in collection(s)</typeparam>
 <returns>Collection that contains all members of all collections in <paramref name="collections"/>. If <paramref name="collections"/> is null returns an emlty collection.</returns>
 <remarks>This is alias of <see cref="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})"/> which takes one parameter.
 <para>Unification is done immediatelly.</para></remarks>
 <seelaso cref="M:Tools.LinqT.EnumerableT.FlatAllDeffered``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})"/>
 <seelaso cref="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})"/>
</member>
<member name="M:Tools.LinqT.EnumerableT.FlatAllDeffered``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
 <summary>Creates union of all geiven colections</summary>
 <param name="collections">Collections to create union of</param>
 <typeparam name="T">Type of items in collections</typeparam>
 <returns><see cref="T:Tools.CollectionsT.GenericT.UnionEnumerable`1"/> over <paramref name="collections"/></returns>
 <remarks>Unioning is deffered to time when collections are iterated</remarks>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.LinqT.EnumerableT.FlatDistinct``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
 <summary>Unions all unique items in given collections to one collection</summary>
 <param name="collections">Collections to create union of</param>
 <typeparam name="T">Type of items in collection(s)</typeparam>
 <returns>Collection that contains all unique members of collections in <paramref name="collections"/></returns>
</member>
<member name="M:Tools.LinqT.EnumerableT.FlatDistinct``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
 <summary>Unions all unique items in given collections to one collection using given <see cref="T:System.Collections.Generic.IComparer`1"/></summary>
 <param name="collections">Collections to create union of</param>
 <typeparam name="T">Type of items in collection(s)</typeparam>
 <returns>Collection that contains all unique members of collections in <paramref name="collections"/></returns>
 <param name="comparer">Comparer used for distinguishing unique items</param>
</member>
<member name="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
 <summary>Creates union of given collection with other given collections</summary>
 <param name="collection">Firts collection for union</param>
 <param name="OtherCollections">Other collections for union</param>
 <typeparam name="T">Type of mmber in collection(s)</typeparam>
 <returns>Collection that contains members of <paramref name="collection"/> as well as of all items in <paramref name="OtherCollections"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
</member>
<member name="M:Tools.LinqT.EnumerableT.UnionAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
 <summary>Creates union of given collection with other given collections</summary>
 <param name="collection">Firts collection for union</param>
 <param name="OtherCollections">Other collections for union</param>
 <typeparam name="T">Type of mmber in collection(s)</typeparam>
 <returns>Collection that contains members of <paramref name="collection"/> as well as of all items in <paramref name="OtherCollections"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
</member>
<member name="M:Tools.LinqT.EnumerableT.IsEmpty(System.Collections.IEnumerable)">
 <summary>Gets value indicating if given collection is empty</summary>
 <param name="collection">Collection to check emptyness of</param>
 <returns>True if first element of collection cannot be enumerated using <paramref name="collection"/>.<see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">GetEnumerator</see>.<see cref="M:System.Collections.IEnumerator.MoveNext">MoveNext</see>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
</member>
<member name="M:Tools.LinqT.EnumerableT.Exists(System.Collections.IEnumerable)">
 <summary>Gets value indicating if given collection is non-empty</summary>
 <param name="collection">Collection to check non-emptyness of</param>
 <returns>True if first element of collection can be enumerated using <paramref name="collection"/>.<see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">GetEnumerator</see>.<see cref="M:System.Collections.IEnumerator.MoveNext">MoveNext</see>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.LinqT.EnumerableT.Single(System.Collections.IEnumerable)">
 <summary>Gets value indicating if collection contains exactly one element</summary>
 <param name="collection">Collection to check</param>
 <returns>True if collection contains exactly one element</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.LinqT.EnumerableT.IndexOf(System.Collections.IEnumerable,System.Object)">
 <summary>Gets index of first occurence of given item in given collection</summary>
 <param name="collection">Collection to find item in</param>
 <param name="item">Item to be found</param>
 <returns>Index of first occurence of <paramref name="item"/> in <paramref name="collection"/> (compared using <see cref="M:System.Object.Equals(System.Object)"/>). -1 if <paramref name="item"/> is not found in <paramref name="collection"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.LinqT.EnumerableT.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
 <summary>Gets index of first occurence of given item in given collection</summary>
 <typeparam name="T">Type of items in collection</typeparam>
 <param name="collection">Collection to find item in</param>
 <param name="item">Item to be found</param>
 <returns>Index of first occurence of <paramref name="item"/> in <paramref name="collection"/> (compared using <see cref="M:System.Object.Equals(System.Object)"/>). -1 if <paramref name="item"/> is not found in <paramref name="collection"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.LinqT.EnumerableT.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
 <summary>Gets index of first occurence of given item in given collection using <see cref="T:System.Collections.Generic.IEqualityComparer`1"/></summary>
 <typeparam name="T">Type of items in collection</typeparam>
 <param name="collection">Collection to find item in</param>
 <param name="item">Item to be found</param>
 <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare items</param>
 <returns>Index of first occurence of <paramref name="item"/> in <paramref name="collection"/> (compared using <paramref name="comparer"/>). -1 if <paramref name="item"/> is not found in <paramref name="collection"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null or <paramref name="comparer"/> is null.</exception>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="M:Tools.LinqT.EnumerableT.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``0,System.Boolean})">
 <summary>Gets index of first occurence of given item in given collection using comparison method</summary>
 <typeparam name="T">Type of items in collection</typeparam>
 <param name="collection">Collection to find item in</param>
 <param name="item">Item to be found</param>
 <returns>Index of first occurence of <paramref name="item"/> in <paramref name="collection"/> (compared using <paramref name="compare"/>). -1 if <paramref name="item"/> is not found in <paramref name="collection"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null or <paramref name="compare"/> is null.</exception>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="M:Tools.LinqT.EnumerableT.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
 <summary>Gets index of first occurence of item that matches predicate</summary>
 <typeparam name="T">Type of items in collection</typeparam>
 <param name="collection">Collection to find item in</param>
 <returns>Index of first itm in <paramref name="collection"/> for which <paramref name="compare"/> returns true. -1 if no such item was found</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null or <paramref name="compare"/> is null.</exception>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="T:Tools.LinqT.LinqExtensions">
 <summary>Contains miscaleneous LINQ extensions</summary>
 <version version="1.5.4">Fix: Module made public (it was internal before)</version>
</member>
<member name="M:Tools.LinqT.LinqExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
 <summary>Adds all items from given collection to given dictionary</summary>
 <param name="Target">Collection which is target of adding</param>
 <param name="Collection">Items to be added</param>
 <typeparam name="TKey">Type of keys in <paramref name="Target"/></typeparam>
 <typeparam name="TValue">Type of values in <paramref name="Target"/></typeparam>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> or <paramref name="Target"/> is null</exception>
</member>
<member name="M:Tools.LinqT.LinqExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{Tools.DataStructuresT.GenericT.IPair{``0,``1}})">
 <summary>Adds all items from given collection to given dictionary</summary>
 <param name="Target">Collection which is target of adding</param>
 <param name="Collection">Items to be added</param>
 <typeparam name="TKey">Type of keys in <paramref name="Target"/></typeparam>
 <typeparam name="TValue">Type of values in <paramref name="Target"/></typeparam>
 <exception cref="T:System.ArgumentNullException"><paramref name="Collection"/> or <paramref name="Target"/> is null</exception>
</member>
<member name="M:Tools.LinqT.LinqExtensions.In``1(``0,``0[])">
 <summary>Gets value indicating if given object is contained among given objects</summary>
 <param name="Obj">Object to search in <paramref name="List"/> for</param>
 <param name="List">Objects to search for <paramref name="Obj"/> among</param>
 <typeparam name="T">Type of object</typeparam>
 <returns>True if <paramref name="Obj"/> is contained in <paramref name="List"/>; false otherwise</returns>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.LinqT.LinqExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
 <summary>Gets value indicating if given object is contained among given objects</summary>
 <param name="Obj">Object to search in <paramref name="List"/> for</param>
 <param name="List">Objects to search for <paramref name="Obj"/> among</param>
 <typeparam name="T">Type of object</typeparam>
 <returns>True if <paramref name="Obj"/> is contained in <paramref name="List"/>; false otherwise</returns>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.LinqT.LinqExtensions.NotIn``1(``0,``0[])">
 <summary>Gets value indicating if given object is not contained among given objects</summary>
 <param name="Obj">Object to search in <paramref name="List"/> for</param>
 <param name="List">Objects to search for <paramref name="Obj"/> among</param>
 <typeparam name="T">Type of object</typeparam>
 <returns>False if <paramref name="Obj"/> is contained in <paramref name="List"/>; true otherwise</returns>
 <seelaso cref="M:Tools.LinqT.LinqExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})"/>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.LinqT.LinqExtensions.NotIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
 <summary>Gets value indicating if given object is not contained among given objects</summary>
 <param name="Obj">Object to search in <paramref name="List"/> for</param>
 <param name="List">Objects to search for <paramref name="Obj"/> among</param>
 <typeparam name="T">Type of object</typeparam>
 <returns>False if <paramref name="Obj"/> is contained in <paramref name="List"/>; true otherwise</returns>
 <seelaso cref="M:Tools.LinqT.LinqExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})"/>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="T:Tools.LinqT.Specialized">
 <summary>Type specific LINQ extensions</summary>
</member>
<member name="M:Tools.LinqT.Specialized.Results``1(System.Collections.Generic.IEnumerable{System.Func{``0}})">
 <summary>Invokes all given delegates and returns results of them</summary>
 <param name="Delegates">Delegates to be invoked</param>
 <typeparam name="TResult">Type of return value of delegate</typeparam>
 <returns>Collection of results of all delegates</returns>
 <remarks>Results are obtained using LINQ, sou delegates are invoked when needed</remarks>
</member>
<member name="M:Tools.LinqT.Specialized.Results``2(System.Collections.Generic.IEnumerable{System.Func{``0,``1}},``0)">
 <summary>Invokes all given delegates and returns results of them</summary>
 <param name="Delegates">Delegates to be invoked</param>
 <param name="Arg1">1st argument</param>
 <typeparam name="T1">Type of 1st argument</typeparam>
 <typeparam name="TResult">Type of return value of delegate</typeparam>
 <returns>Collection of results of all delegates</returns>
 <remarks>Results are obtained using LINQ, sou delegates are invoked when needed</remarks>
</member>
<member name="M:Tools.LinqT.Specialized.Results``3(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2}},``0,``1)">
 <summary>Invokes all given delegates and returns results of them</summary>
 <param name="Delegates">Delegates to be invoked</param>
 <param name="Arg1">1st argument</param>
 <param name="Arg2">2nd argument</param>
 <typeparam name="T1">Type of 1st argument</typeparam>
 <typeparam name="T2">Type of 2nd argument</typeparam>
 <typeparam name="TResult">Type of return value of delegate</typeparam>
 <returns>Collection of results of all delegates</returns>
 <remarks>Results are obtained using LINQ, sou delegates are invoked when needed</remarks>
</member>
<member name="M:Tools.LinqT.Specialized.Results``4(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2,``3}},``0,``1,``2)">
 <summary>Invokes all given delegates and returns results of them</summary>
 <param name="Delegates">Delegates to be invoked</param>
 <param name="Arg1">1st argument</param>
 <param name="Arg2">2nd argument</param>
 <param name="Arg3">3rd argument</param>
 <typeparam name="T1">Type of 1st argument</typeparam>
 <typeparam name="T2">Type of 2nd argument</typeparam>
 <typeparam name="T3">Type of 3rd argument</typeparam>
 <typeparam name="TResult">Type of return value of delegate</typeparam>
 <returns>Collection of results of all delegates</returns>
 <remarks>Results are obtained using LINQ, sou delegates are invoked when needed</remarks>
</member>
<member name="M:Tools.LinqT.Specialized.Results``5(System.Collections.Generic.IEnumerable{System.Func{``0,``1,``2,``3,``4}},``0,``1,``2,``3)">
 <summary>Invokes all given delegates and returns results of them</summary>
 <param name="Delegates">Delegates to be invoked</param>
 <param name="Arg1">1st argument</param>
 <param name="Arg2">2nd argument</param>
 <param name="Arg3">3rd argument</param>
 <param name="Arg4">4th argument</param>
 <typeparam name="T1">Type of 1st argument</typeparam>
 <typeparam name="T2">Type of 2nd argument</typeparam>
 <typeparam name="T3">Type of 3rd argument</typeparam>
 <typeparam name="T4">Type of 4th argument</typeparam>
 <typeparam name="TResult">Type of return value of delegate</typeparam>
 <returns>Collection of results of all delegates</returns>
 <remarks>Results are obtained using LINQ, sou delegates are invoked when needed</remarks>
</member>
<member name="M:Tools.LinqT.Specialized.And``1(System.Collections.Generic.IEnumerable{System.Func{``0,System.Boolean}},``0)">
 <summary>Performs AND on results of delegates</summary>
 <param name="Delegates">Delegates to perform AND on results of</param>
 <param name="Condition">Condition to be passed to all delegates</param>
 <typeparam name="TCondition">Type of condition</typeparam>
 <returns>Result of AND operation on delegate results</returns>
 <remarks>If <paramref name="Delegates"/> is empty returns <c>false</c></remarks>
</member>
<member name="M:Tools.LinqT.Specialized.Or``1(System.Collections.Generic.IEnumerable{System.Func{``0,System.Boolean}},``0)">
 <summary>Performs OR on results of delegates</summary>
 <param name="Delegates">Delegates to perform OR on results of</param>
 <param name="Condition">Condition to be passed to all delegates</param>
 <typeparam name="TCondition">Type of condition</typeparam>
 <returns>Result of OR operation on delegate results</returns>
 <remarks>If <paramref name="Delegates"/> is empty returns <c>false</c></remarks>
</member>
<member name="M:Tools.LinqT.Specialized.And(System.Collections.Generic.IEnumerable{System.Boolean})">
 <summary>Performs AND between given <see cref="T:System.Boolean"/> values</summary>
 <param name="bools">Values to perform AND on</param>
 <returns>Results of AND operation on <paramref name="bools"/></returns>
 <remarks>If <paramref name="bools"/> is empty resutns <c>true</c></remarks>
</member>
<member name="M:Tools.LinqT.Specialized.Or(System.Collections.Generic.IEnumerable{System.Boolean})">
 <summary>Performs OR between given <see cref="T:System.Boolean"/> values</summary>
 <param name="bools">Values to perform OR on</param>
 <returns>Results of OR operation on <paramref name="bools"/></returns>
 <remarks>If <paramref name="bools"/> is empty resutns <c>false</c></remarks>
</member>
<member name="T:Tools.CharComparer">
 <summary>Base class for comparers of type <see cref="T:System.Char"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.CharComparer.Compare(System.Char,System.Char)">
 <summary>When overriden in derived class compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
 <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero <paramref name="x" /> is less than  <paramref name="y" />.Zero <paramref name="x" /> equals  <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than  <paramref name="y" />.</returns>
 <param name="x">The first object to compare.</param>
 <param name="y">The second object to compare.</param>
</member>
<member name="M:Tools.CharComparer.Equals(System.Char,System.Char)">
 <summary>When overriden in derivced class determines whether the specified objects are equal.</summary>
 <returns>true if the specified objects are equal; otherwise, false.</returns>
 <param name="x">The first object of type <paramref name="T" /> to compare.</param>
 <param name="y">The second object of type <paramref name="T" /> to compare.</param>
</member>
<member name="M:Tools.CharComparer.GetHashCode(System.Char)">
 <summary>When overriden in derived class returns a hash code for the specified object.</summary>
 <returns>A hash code for the specified object.</returns>
 <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
 <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
</member>
<member name="F:Tools.CharComparer.cache">
 <summary>Cachees values of static properties</summary>
 <threadsafety>Synchronize write access to this property using itself. Do not clear. Do not remove.</threadsafety>
</member>
<member name="M:Tools.CharComparer.Get(System.StringComparison,System.Func{Tools.CharComparer})">
 <summary>Gets chached values of static property or chaches a new values</summary>
 <param name="key">Cache key</param>
 <param name="create">A delegate to be called to create a new value if value with <paramref name="key"/> is not cached yet.</param>
 <returns>Cahced value of result of<paramref name="create"/> call (in later case this result is cached for next call with same <paramref name="key"/>).</returns>
</member>
<member name="P:Tools.CharComparer.CurrentCulture">
 <summary>Gets a <see cref="T:Tools.CharComparer"/> object that performs a case-sensitive characterstring comparison using the word comparison rules of the current culture.</summary>
</member>
<member name="P:Tools.CharComparer.CurrentCultureIgnoreCase">
 <summary>Gets a <see cref="T:Tools.CharComparer"/> object that performs case-insensitive character comparisons using the word comparison rules of the current culture.</summary>
</member>
<member name="P:Tools.CharComparer.InvariantCulture">
 <summary>Gets a <see cref="T:Tools.CharComparer"/> object that performs a case-sensitive character comparison using the word comparison rules of the invariant culture.</summary>
</member>
<member name="P:Tools.CharComparer.InvariantCultureIgnoreCase">
 <summary>Gets a <see cref="T:Tools.CharComparer"/> object that performs a case-insensitive character comparison using the word comparison rules of the invariant culture.</summary>
</member>
<member name="P:Tools.CharComparer.Ordinal">
 <summary>Gets a <see cref="T:Tools.CharComparer"/> object that performs a case-sensitive ordinal character comparison.</summary>
</member>
<member name="P:Tools.CharComparer.OrdinalIgnoreCase">
 <summary>Gets a S<see cref="T:Tools.CharComparer"/> object that performs a case-insensitive ordinal character comparison.</summary>
</member>
<member name="P:Tools.CharComparer.CodePoint">
 <summary>Gets a <see cref="T:Tools.CharComparer"/> object that performs character comparison based only on Unicode code of the character (which is by definition case-sensitive and kinda ordinal).</summary>
</member>
<member name="T:Tools.CodePointCharComparer">
 <summary>Implements <see cref="T:Tools.CharComparer"/> thet compares character code points</summary>
 <remarks>This is singleton class</remarks>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="P:Tools.CodePointCharComparer.Instance">
 <summary>Gets instance of this singleton class</summary>
</member>
<member name="M:Tools.CodePointCharComparer.#ctor">
 <summary>Private CTor for singleton</summary>
</member>
<member name="M:Tools.CodePointCharComparer.Compare(System.Char,System.Char)">
 <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
 <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero <paramref name="x" /> is less than  <paramref name="y" />.Zero <paramref name="x" /> equals  <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than  <paramref name="y" />.</returns>
 <param name="x">The first object to compare.</param>
 <param name="y">The second object to compare.</param>
</member>
<member name="M:Tools.CodePointCharComparer.Equals(System.Char,System.Char)">
 <summary>Determines whether the specified objects are equal.</summary>
 <returns>true if the specified objects are equal; otherwise, false.</returns>
 <param name="x">The first object of type <paramref name="T" /> to compare.</param>
 <param name="y">The second object of type <paramref name="T" /> to compare.</param>
</member>
<member name="M:Tools.CodePointCharComparer.GetHashCode(System.Char)">
 <summary>Returns a hash code for the specified object.</summary>
 <returns>A hash code for the specified object.</returns>
 <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
 <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
</member>
<member name="T:Tools.StringComparerBasedCharComparer">
 <summary>Implements <see cref="T:Tools.CharComparer"/> based on <see cref="T:System.StringComparer"/></summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.StringComparerBasedCharComparer.internal">
 <summary>Internal <see cref="T:System.StringComparer"/></summary>
</member>
<member name="M:Tools.StringComparerBasedCharComparer.#ctor(System.StringComparer)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.StringComparerBasedCharComparer"/></summary>
 <param name="internal">String comparer to be used for character comparisons</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="internal"/> is null</exception>
</member>
<member name="M:Tools.StringComparerBasedCharComparer.Compare(System.Char,System.Char)">
 <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
 <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero <paramref name="x" /> is less than  <paramref name="y" />.Zero <paramref name="x" /> equals  <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than  <paramref name="y" />.</returns>
 <param name="x">The first object to compare.</param>
 <param name="y">The second object to compare.</param>
</member>
<member name="M:Tools.StringComparerBasedCharComparer.Equals(System.Char,System.Char)">
 <summary>Determines whether the specified objects are equal.</summary>
 <returns>true if the specified objects are equal; otherwise, false.</returns>
 <param name="x">The first object of type <paramref name="T" /> to compare.</param>
 <param name="y">The second object of type <paramref name="T" /> to compare.</param>
</member>
<member name="M:Tools.StringComparerBasedCharComparer.GetHashCode(System.Char)">
 <summary>Returns a hash code for the specified object.</summary>
 <returns>A hash code for the specified object.</returns>
 <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
 <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
</member>
<member name="M:Tools.StringComparerBasedCharComparer.Compare(System.String,System.String)">
 <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
 <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero <paramref name="x" /> is less than  <paramref name="y" />.Zero <paramref name="x" /> equals  <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than  <paramref name="y" />.</returns>
 <param name="x">The first object to compare.</param>
 <param name="y">The second object to compare.</param>
</member>
<member name="M:Tools.StringComparerBasedCharComparer.Equals(System.String,System.String)">
 <summary>Determines whether the specified objects are equal.</summary>
 <returns>true if the specified objects are equal; otherwise, false.</returns>
 <param name="x">The first object of type <paramref name="T" /> to compare.</param>
 <param name="y">The second object of type <paramref name="T" /> to compare.</param>
</member>
<member name="M:Tools.StringComparerBasedCharComparer.GetHashCode(System.String)">
 <summary>Returns a hash code for the specified object.</summary>
 <returns>A hash code for the specified object.</returns>
 <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
 <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
</member>
<member name="T:Tools.InterfacesBasedStringComparer">
 <summary>Implements a <see cref="T:System.StringComparer"/> that's based on suplied <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> and <see cref="T:System.Collections.Generic.IComparer`1"/> interfaces. Also provides capabilities of delegate-basing.</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="F:Tools.InterfacesBasedStringComparer.comparer">
 <summary>Internal comparer used for &lt;=> comparisons</summary>
</member>
<member name="F:Tools.InterfacesBasedStringComparer.equalityComparer">
 <summary>Internal comparer used for equality comparisons</summary>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.#ctor(System.Collections.Generic.IComparer{System.String},System.Collections.Generic.IEqualityComparer{System.String})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InterfacesBasedStringComparer"/> class from <see cref="T:System.Collections.Generic.IComparer`1"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/></summary>
 <param name="comparer">Comparer used for  &lt;=> comparisons</param>
 <param name="equalityComparer">Comparer used for equality comparisons</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> or <paramref name="equalityComparer"/> is null</exception>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.#ctor(System.Object)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InterfacesBasedStringComparer"/> class from single object that implements both - <see cref="T:System.Collections.Generic.IComparer`1"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> interfaces</summary>
 <param name="comparer">The object that implements both - <see cref="T:System.Collections.Generic.IComparer`1"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> interfaces</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="comparer"/> is not <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>[<see cref="T:System.String"/>] -or- <paramref name="comparer"/> is not <see cref="T:System.Collections.Generic.IComparer`1"/>[<see cref="T:System.String"/>]</exception>
 <remarks>This CTor is <see langword="protected"/>. For public assess use generic <see cref="M:Tools.InterfacesBasedStringComparer.Create(System.Collections.Generic.IComparer{System.String})"/> overload instead.</remarks>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.#ctor(System.Collections.Generic.IComparer{System.String})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InterfacesBasedStringComparer"/> class from <see cref="T:System.Collections.Generic.IComparer`1"/></summary>
 <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> to base this comparison on</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="equalityComparer"/> is null</exception>
 <remarks>Equality comparison is performed using <see cref="M:System.Collections.Generic.IComparer`1.Compare"/> checking for result 0</remarks>
 <seelaso cref="T:Tools.DelegateBasedComparer`1"/>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.#ctor(System.Comparison{System.String},System.Func{System.String,System.String,System.Boolean},System.Func{System.String,System.Int32})">
 <summary>Creates a new instance of the <see cref="T:Tools.InterfacesBasedStringComparer"/> class providing all three delegate</summary>
 <param name="compare">Delegate for &lt;=> comparison</param>
 <param name="equals">Delegate for equality comparison</param>
 <param name="getHashCode">Delegate for getting hash code</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="compare"/>, <paramref name="equals"/> or <paramref name="getHashCode"/> is null</exception>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.#ctor(System.Comparison{System.String},System.Func{System.String,System.Int32})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.InterfacesBasedStringComparer"/> class providing <see cref="T:System.Collections.Generic.IComparer`1"/> delegates</summary>
 <param name="compare">Delegate for &lt;=> comparison</param>
 <param name="getHashCode">Delegate for getting hash code</param>
 <remarks>Equality comparison is performed using <paramref name="compare"/> delegate (checks for result 0)</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="compare"/> or <paramref name="getHashCode"/> is null</exception>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.Create``1(``0)">
 <summary>Creates a <see cref="T:System.StringComparer"/> from an object that implements both - <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> and <see cref="T:System.Collections.Generic.IComparer`1"/></summary>
 <typeparam name="TComparer">Type of the object</typeparam>
 <param name="comparer">The comparer</param>
 <returns>A new instance of the <see cref="T:System.StringComparer"/> class; if <paramref name="comparer"/> is <see cref="T:System.StringComparer"/> returns it.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/>is null</exception>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.Create(System.Collections.Generic.IComparer{System.String},System.Collections.Generic.IEqualityComparer{System.String})">
 <summary>Creates a <see cref="T:System.StringComparer"/> from <see cref="T:System.Collections.Generic.IComparer`1"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/></summary>
 <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/></param>
 <param name="equalityComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/></param>
 <returns>A new instance of <see cref="T:System.StringComparer"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> or <paramref name="equalityComparer"/> is null</exception>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.Create(System.Collections.Generic.IComparer{System.String})">
 <summary>Creates a <see cref="T:System.StringComparer"/> from <see cref="T:System.Collections.Generic.IComparer`1"/></summary>
 <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/></param>
 <returns>A new instance of <see cref="T:System.StringComparer"/>; if <paramref name="comparer"/> is <see cref="T:System.StringComparer"/> returns it.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is null</exception>
 <remarks>Equality comparison is performed using <see cref="M:System.Collections.Generic.IComparer`1.Compare"/> checking for result 0</remarks>
 <seelaso cref="T:Tools.DelegateBasedComparer`1"/>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.Create(System.Comparison{System.String},System.Func{System.String,System.String,System.Boolean},System.Func{System.String,System.Int32})">
 <summary>Creates a <see cref="T:System.StringComparer"/> from 3 comparison delegates</summary>
 <param name="compare">A delegate used for &lt;=> comparisons</param>
 <param name="equals">A delegate used for equality comparison</param>
 <param name="getHashCode">A delegate used to get hash code</param>
 <returns>A new instance of <see cref="T:System.StringComparer"/></returns>
 <exception cref="T:System.ArgumentNullException">Any parameter is null</exception>
 <seelaso cref="T:Tools.DelegateBasedComparer`1"/>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.Create(System.Comparison{System.String},System.Func{System.String,System.Int32})">
 <summary>Creates a <see cref="T:System.StringComparer"/> ffrom <see cref="T:System.Collections.Generic.IComparer`1"/> delegates</summary>
 <param name="compare">Delegate to be used for comparisons</param>
 <param name="getHashCode">Delegate to be used to get a hash code</param>
 <returns>A new instance of <see cref="T:System.StringComparer"/></returns>
 <exception cref="T:System.ArgumentNullException">Any parameter is null</exception>
 <remarks><paramref name="compare"/> is used also for equality comparision, checking result to be 0.</remarks>
 <seelaso cref="T:Tools.DelegateBasedComparer`1"/>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.Compare(System.String,System.String)">
 <summary>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</summary>
 <param name="x">A string to compare to <paramref name="y" />.</param>
 <param name="y">A string to compare to <paramref name="x" />.</param>
 <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.ValueMeaningLess than zero <paramref name="x" /> is less than<paramref name="y" />.-or-<paramref name="x" /> is null.Zero <paramref name="x" /> is equal to  <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than  <paramref name="y" />.-or- <paramref name="y" /> is null.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.Equals(System.String,System.String)">
 <summary>When overridden in a derived class, indicates whether two strings are equal.</summary>
 <param name="x">A string to compare to <paramref name="y" />.</param>
 <param name="y">A string to compare to <paramref name="x" />.</param>
 <returns>true if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal; otherwise, false.</returns>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.InterfacesBasedStringComparer.GetHashCode(System.String)">
 <summary>When overridden in a derived class, gets the hash code for the specified object.</summary>
 <param name="obj">An object.</param>
 <returns>A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="obj" /> is null.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.DelegateBasedComparer`1">
 <summary>Implements <see cref="T:System.Collections.Generic.IComparer`1"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>. Operations are performed using user-suplied delegates.</summary>
 <typeparam name="T">Type of value to compare</typeparam>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.DelegateBasedComparer`1.#ctor(System.Comparison{`0},System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
 <summary>Creates a new instance of the <see cref="T:Tools.DelegateBasedComparer`1"/> class providing all three delegate</summary>
 <param name="compare">Delegate for &lt;=> comparison</param>
 <param name="equals">Delegate for equality comparison</param>
 <param name="getHashCode">Delegate for getting hash code</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="compare"/>, <paramref name="equals"/> or <paramref name="getHashCode"/> is null</exception>
</member>
<member name="M:Tools.DelegateBasedComparer`1.#ctor(System.Comparison{`0},System.Func{`0,System.Int32})">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.DelegateBasedComparer`1"/> class providing <see cref="T:System.Collections.Generic.IComparer`1"/> delegates</summary>
 <param name="compare">Delegate for &lt;=> comparison</param>
 <param name="getHashCode">Delegate for getting hash code</param>
 <remarks>Equality comparison is performed using <paramref name="compare"/> delegate (checks for result 0)</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="compare"/> or <paramref name="getHashCode"/> is null</exception>
</member>
<member name="M:Tools.DelegateBasedComparer`1.Compare(`0,`0)">
 <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
 <param name="x">The first object to compare.</param>
 <param name="y">The second object to compare.</param>
 <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero <paramref name="x" /> is less than  <paramref name="y" />.Zero <paramref name="x" /> equals  <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than  <paramref name="y" />.</returns>
</member>
<member name="M:Tools.DelegateBasedComparer`1.Equals(`0,`0)">
 <summary>Determines whether the specified objects are equal.</summary>
 <returns>true if the specified objects are equal; otherwise, false.</returns>
 <param name="x">The first object of type <paramref name="T" /> to compare.</param>
 <param name="y">The second object of type <paramref name="T" /> to compare.</param>
</member>
<member name="M:Tools.DelegateBasedComparer`1.GetHashCode(`0)">
 <summary>Returns a hash code for the specified object.</summary>
 <returns>A hash code for the specified object.</returns>
 <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
 <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null (depends on if underlying delegate throws it).</exception>
</member>
<member name="T:Tools.NumericsT.Angle">
 <summary>Represents angle or time (such as GPS coordinates)</summary>
 <remarks>
 This class provides common methods for working with angles and it provides angle-specific string formatting.
 <para>
 When an <see cref="T:Tools.NumericsT.Angle"/> is used as a key in <see cref="T:System.Collections.Generic.Dictionary`2"/> or <see cref="T:System.Collections.Generic.HashSet`1"/> beaware that only 360°-normalized value is provided by to a collection.
 <see cref="M:Tools.NumericsT.Angle.GetHashCode"/> works with 360°-normalized value only and <see cref="M:System.Object.Equals(System.Object,System.Object)"/> also compares only 360°-normalized values.
 To change this behavior use alternative comparer such as <see cref="P:Tools.NumericsT.AngleComparer.NonNormalizing"/>.
 </para>
 </remarks>
 <seelaso cref="M:Tools.NumericsT.Angle.Normalize"/>
 <version version="1.5.4">This structure is new in version 1.5.4</version>
</member>
<member name="F:Tools.NumericsT.Angle.π">
 <summary>π value as <see cref="T:System.Decimal"/></summary>
</member>
<member name="F:Tools.NumericsT.Angle._degrees">
 <summary>Number of degrees</summary>
</member>
<member name="F:Tools.NumericsT.Angle._minutes">
 <summary>Number of minutes 0÷59</summary>
</member>
<member name="F:Tools.NumericsT.Angle._seconds">
 <summary>Number of seconds from range &lt;0, 60)</summary>
</member>
<member name="F:Tools.NumericsT.Angle._sign">
 <summary>Sign - -1/0/+1</summary>
</member>
<member name="M:Tools.NumericsT.Angle.ToDms(System.Double,System.UInt32@,System.Byte@,System.Decimal@,System.SByte@)">
 <summary>Converts <see cref="T:System.Double"/> value to degrees, minutes and seconds</summary>
 <param name="value">Value to be converted</param>
 <param name="d">Retrurns number of whole degrees</param>
 <param name="m">Returns number of whole minutes (excludes degrees)</param>
 <param name="s">Returns number of seconds (excludes degrees and minutes)</param>
 <param name="sign">Returns sign</param>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
</member>
<member name="M:Tools.NumericsT.Angle.ToDms(System.Decimal,System.UInt32@,System.Byte@,System.Decimal@,System.SByte@)">
 <summary>Converts <see cref="T:System.Decimal"/> value to degrees, minutes and seconds</summary>
 <param name="value">Value to be converted</param>
 <param name="d">Retrurns number of whole degrees</param>
 <param name="m">Returns number of whole minutes (excludes degrees)</param>
 <param name="s">Returns number of seconds (excludes degrees and minutes)</param>
 <param name="sign">Returns sign</param>
</member>
<member name="M:Tools.NumericsT.Angle.NormalizeDms(System.Int32,System.Int32,System.Decimal,System.UInt32@,System.Byte@,System.Decimal@,System.SByte@)">
 <summary>Normalizes value given in degrees, minutes and seconds so that minutes and seconds are only in range &lt;0, 60)</summary>
 <param name="d1">Input number of degrees</param>
 <param name="m1">Input number of minutes</param>
 <param name="s1">Input number of seconds</param>
 <param name="d2">Returns number of degrees, always positive</param>
 <param name="m2">Returns number of minutes in range &lt;0, 59></param>
 <param name="s2">Returns number of seconds in range &lt;0, 60)</param>
 <param name="sign">Returns sign of resulting angle</param>
</member>
<member name="P:Tools.NumericsT.Angle.Degrees">
 <summary>Gets number of whole degrees of this angle</summary>
 <exception cref="T:System.OverflowException">Internal number of degrees is greater than <see cref="F:System.Int32.MaxValue"/>.</exception>
</member>
<member name="P:Tools.NumericsT.Angle.Minutes">
 <summary>Gets number of whole minutes of this angle. The value exludes <see cref="P:Tools.NumericsT.Angle.Degrees"/></summary>
 <remarks>Each degree has 60 minutes</remarks>
</member>
<member name="P:Tools.NumericsT.Angle.Seconds">
 <summary>Gets number of seconds of this angle. The value excludes <see cref="P:Tools.NumericsT.Angle.Degrees"/> and <see cref="P:Tools.NumericsT.Angle.Minutes"/></summary>
 <remarks>Each minute has 60 seconds</remarks>
</member>
<member name="P:Tools.NumericsT.Angle.TotalDegrees">
 <summary>Gets total number of degrees in this angle</summary>
</member>
<member name="P:Tools.NumericsT.Angle.TotalMinutes">
 <summary>Gets total number of minutes in this angle (including <see cref="P:Tools.NumericsT.Angle.Degrees"/>)</summary>
 <remarks>Each degree has 60 minutes</remarks>
</member>
<member name="P:Tools.NumericsT.Angle.TotalSeconds">
 <summary>Gets total number of seconds in this nagle (including <see cref="P:Tools.NumericsT.Angle.Degrees"/> and <see cref="P:Tools.NumericsT.Angle.Minutes"/>)</summary>
 <remarks>Each minute has 60 seconds</remarks>
</member>
<member name="P:Tools.NumericsT.Angle.Rotations">
 <summary>Gets number of rotations this angle represents</summary>
 <remarks>Each rotation is 360 degrees</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.ToDegrees">
 <summary>Gets value of this angle as degrees</summary>
 <returns><see cref="P:Tools.NumericsT.Angle.Degrees"/> as <see cref="T:System.Double"/></returns>
 <seelaso cref="P:Tools.NumericsT.Angle.TotalDegrees"/>
</member>
<member name="M:Tools.NumericsT.Angle.ToRadians">
 <summary>Gets value as this angle as radians</summary>
 <returns>Value of this angle in radisna</returns>
 <remarks>360 degrees is 2*π radians</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.FromDegrees(System.Double)">
 <summary>Creates an <see cref="T:Tools.NumericsT.Angle"/> value from degrees</summary>
 <param name="value">Number of degrees for new angle</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to <paramref name="value"/> degrees.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> exceeds size of data type <see cref="T:System.Decimal"/> (Resulting value is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/>).</exception>
</member>
<member name="M:Tools.NumericsT.Angle.FromMinutes(System.Double)">
 <summary>Creates an <see cref="T:Tools.NumericsT.Angle"/> value from minutes</summary>
 <param name="value">Number of minutes (1/60 degree) for new angle</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to <paramref name="value"/> minutes.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> (or <paramref name="value"/> * 60) exceeds size of data type <see cref="T:System.Decimal"/> (Resulting value is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/>).</exception>
</member>
<member name="M:Tools.NumericsT.Angle.FromSeconds(System.Double)">
 <summary>Creates an <see cref="T:Tools.NumericsT.Angle"/> value from seconds</summary>
 <param name="value">Number of seconds (1/3600 degree) for new angle</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to <paramref name="value"/> seconds.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> (or <paramref name="value"/> * 60 * 60) exceeds size of data type <see cref="T:System.Decimal"/> (Resulting value is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/>).</exception>
</member>
<member name="M:Tools.NumericsT.Angle.FromRadians(System.Double)">
 <summary>Creates an <see cref="T:Tools.NumericsT.Angle"/> value from radians</summary>
 <param name="value">Angle in radians</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to equivalent of <paramref name="value"/> radians</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/></exception>
 <remarks>360 degrees is 2*π radians</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.FromRadians(System.Decimal)">
 <summary>Creates an <see cref="T:Tools.NumericsT.Angle"/> value from radians</summary>
 <param name="value">Angle in radians</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to equivalent of <paramref name="value"/> radians</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/></exception>
 <remarks>360 degrees is 2*π radians</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.FromRotations(System.Double)">
 <summary>Creates an <see cref="T:Tools.NumericsT.Angle"/> value from rotations</summary>
 <param name="value">Number of raotations</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to equivalent of <paramref name="value"/> rotations</returns>
 <remarks>One rotation is 360 degrees</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/></exception>
</member>
<member name="M:Tools.NumericsT.Angle.ToGradians">
 <summary>Gets value of this angle in gradians (grads)</summary>
 <returns>Value of this angle in gradians (grads)</returns>
 <remarks>360 degrees is 400 grads</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.FromGradians(System.Double)">
 <summary>Creates an <see cref="T:Tools.NumericsT.Angle"/> value from gradians (grads)</summary>
 <param name="value">Angle in grads</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to equaivalent of <paramref name="value"/> gradians</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/></exception>
 <remarks>100 gradians is 90 degrees</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.ToRotations">
 <summary>Gets value of this angle in rotations</summary>
 <returns>Value of this angle in rotations</returns>
 <remarks>One rotation is 360 degrees</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.ToSlope">
 <summary>Gets value of this angle as slope in percent</summary>
 <returns>A slope value in percent. Raising angles has positive slope, falling angles ahs negative slope.</returns>
 <remarks>Raising angle of 45° has slope +100%</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.FromSlope(System.Double)">
 <summary>Creates ana angle value form slope in percent</summary>
 <param name="value">Slope in percent</param>
 <returns>Angle value calcutaletd from <paramref name="value"/> as slope in percent.</returns>
 <remarks>Raising angle of 45° has slope +100%</remarks>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/></exception>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is NaN</exception>
</member>
<member name="F:Tools.NumericsT.Angle.Zero">
 <summary>A zero angle (0°)</summary>
</member>
<member name="F:Tools.NumericsT.Angle.Right">
 <summary>Positive right angle (90°)</summary>
</member>
<member name="F:Tools.NumericsT.Angle.Straing">
 <summary>Straight angle (180°)</summary>
</member>
<member name="F:Tools.NumericsT.Angle.Full">
 <summary>Full angle (one rotation; 360°)</summary>
</member>
<member name="F:Tools.NumericsT.Angle.MinValue">
 <summary>Largest possible negative angle</summary>
 <remarks>Equals <see cref="F:System.Decimal.MinValue"/> degrees</remarks>
</member>
<member name="F:Tools.NumericsT.Angle.MaxValue">
 <summary>Largest possible positive angle</summary>
 <remarks>Equals <see cref="F:System.Decimal.MaxValue"/>degrees</remarks>
</member>
<member name="F:Tools.NumericsT.Angle.Degree">
 <summary>An angle of 1°</summary>
</member>
<member name="F:Tools.NumericsT.Angle.Minute">
 <summary>An angle of 1′</summary>
</member>
<member name="F:Tools.NumericsT.Angle.Second">
 <summary>An angle of 1″</summary>
</member>
<member name="F:Tools.NumericsT.Angle.Radian">
 <summary>An angle of 1 rad</summary>
</member>
<member name="F:Tools.NumericsT.Angle.Gradian">
 <summary>An angle of 1 grad</summary>
</member>
<member name="F:Tools.NumericsT.Angle.ΠRadians">
 <summary>An angle of 1π rad</summary>
</member>
<member name="M:Tools.NumericsT.Angle.#ctor(System.Single)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.NumericsT.Angle"/> structure from degrees as <see cref="T:System.Single"/></summary>
 <param name="value">Number of degrees</param>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
</member>
<member name="M:Tools.NumericsT.Angle.#ctor(System.Double)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.NumericsT.Angle"/> structure from degrees as <see cref="T:System.Double"/></summary>
 <param name="value">Number of degrees</param>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is infinity or NaN</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
</member>
<member name="M:Tools.NumericsT.Angle.#ctor(System.Decimal)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.NumericsT.Angle"/> structure from degrees as <see cref="T:System.Decimal"/></summary>
 <param name="value">Number of degrees</param>
</member>
<member name="M:Tools.NumericsT.Angle.#ctor(System.Int32)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.NumericsT.Angle"/> structure from degrees as <see cref="T:System.Int32"/></summary>
 <param name="value">Number of degrees</param>
</member>
<member name="M:Tools.NumericsT.Angle.#ctor(System.Int32,System.Int32,System.Double)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.NumericsT.Angle"/> class from degrees, minutes and second (<see cref="T:System.Double"/>)</summary>
 <param name="degrees">Number of degrees</param>
 <param name="minutes">Number of minutes. If greater than 60 velue is tranferred to degrees. If less than zero and <paramref name="degrees"/> is non-zero value if subtracted from <paramref name="degrees"/>.</param>
 <param name="seconds">Number of second. If greater than 60 value is transfered to seconds. If less than zero and either <paramref name="degrees"/> or <paramref name="minutes"/> is non-zero value is subtracted from <paramref name="minutes"/>.</param>
 <remarks>Sign of angle is determined by first non-zero argument. If an argument after first non-zero argument is negative angle absolute value is lowered. This can eventually lead to change of sign of entire angle.</remarks>
 <exception cref="T:System.OverflowException">Resulting angle would be less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/></exception>
</member>
<member name="M:Tools.NumericsT.Angle.#ctor(System.Int32,System.Int32,System.Decimal)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.NumericsT.Angle"/> class from degrees, minutes and second (<see cref="T:System.Decimal"/>)</summary>
 <param name="degrees">Number of degrees</param>
 <param name="minutes">Number of minutes. If greater than 60 velue is tranferred to degrees. If less than zero and <paramref name="degrees"/> is non-zero value if subtracted from <paramref name="degrees"/>.</param>
 <param name="seconds">Number of second. If greater than 60 value is transfered to seconds. If less than zero and either <paramref name="degrees"/> or <paramref name="minutes"/> is non-zero value is subtracted from <paramref name="minutes"/>.</param>
 <remarks>Sign of angle is determined by first non-zero argument. If an argument after first non-zero argument is negative angle absolute value is lowered. This can eventually lead to change of sign of entire angle.</remarks>
 <exception cref="T:System.OverflowException">Resulting angle would be less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/></exception>
</member>
<member name="M:Tools.NumericsT.Angle.#ctor(System.UInt32,System.Byte,System.Decimal,System.SByte)">
 <summary>Native CTor - initializes inner properties of the <see cref="T:Tools.NumericsT.Angle"/> class to given values</summary>
 <param name="degrees">Number of whole degrees</param>
 <param name="minutes">Number of minutes from ragre &lt;0, 59></param>
 <param name="seconds">Number of seconds from range &lt;0, 60)</param>
 <param name="sign">Sign of newly created instance</param>
 <exception cref="T:System.ArgumentOutOfRangeException">
 <paramref name="minutes"/> is greater than or equal to 60. -or-
 <paramref name="seconds"/> is less than zero or greater than or equal to 60.
 </exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="sign"/> is neither -1, 0 nor +1 -or- 
 <paramref name="sign"/> is non-zero and <paramref name="degrees"/>, <paramref name="minutes"/> and <paramref name="seconds"/> are zero. -or-
 <paramref name="sign"/> is zero and either <paramref name="degrees"/>, <paramref name="minutes"/> or <paramref name="seconds"/> is non-zero.
 </exception>
 <remarks>
 This CTor is primarily intended for internal use and for fast initialization of the <see cref="T:Tools.NumericsT.Angle"/> structure.
 Unlike other overloads this CTor strictly requires all parameters to be in valid ranges and requires sign to be passed as separate parameter.
 <para>This CTor overload is not CLS-compliant. There is no direct CLS-compliant equivalent. Use <see cref="M:Tools.NumericsT.Angle..ctor(System.Int32,System.Int32,System.Decimal)"/> which performs parameter normalization instead.</para>
 </remarks>
</member>
<member name="M:Tools.NumericsT.Angle.Init(System.UInt32,System.Byte,System.Decimal,System.SByte)">
 <summary>Initializes inner properties of the <see cref="T:Tools.NumericsT.Angle"/> class to given values</summary>
 <param name="degrees">Number of whole degrees</param>
 <param name="minutes">Number of minutes from ragre &lt;0, 59></param>
 <param name="seconds">Number of seconds from range &lt;0, 60)</param>
 <param name="sign">Sign</param>
 <exception cref="T:System.ArgumentOutOfRangeException">
 <paramref name="minutes"/> is greater than or equal to 60. -or-
 <paramref name="seconds"/> is less than zero or greater than or equal to 60.
 </exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="sign"/> is neither -1, 0 nor +1 -or- 
 <paramref name="sign"/> is non-zero and <paramref name="degrees"/>, <paramref name="minutes"/> and <paramref name="seconds"/> are zero. -or-
 <paramref name="sign"/> is zero and either <paramref name="degrees"/>, <paramref name="minutes"/> or <paramref name="seconds"/> is non-zero.
 </exception>
</member>
<member name="M:Tools.NumericsT.Angle.Normalize">
 <summary>Creates a new instance of <see cref="T:Tools.NumericsT.Angle"/> that has value between 0° (inclusive) and 360° (exclusive)</summary>
 <returns>An <see cref="T:Tools.NumericsT.Angle"/> that represents same azimuth and has value in range &lt;0°, 360°)</returns>
</member>
<member name="M:Tools.NumericsT.Angle.Normalize(System.Int32)">
 <summary>Creates a new instance of <see cref="T:Tools.NumericsT.Angle"/> that has value in certain range</summary>
 <param name="maxAngle">Maximum allowed (exclusive) angle value</param>
 <returns>An <see cref="T:Tools.NumericsT.Angle"/> that represents same azimuth and has value in range &lt;<paramref name="maxAngle"/>-360, <paramref name="maxAngle"/>)</returns>
</member>
<member name="M:Tools.NumericsT.Angle.Abs">
 <summary>Gets an absolute value of this angle</summary>
 <returns>Current angle without sign</returns>
 <seelaso cref="M:System.Math.Abs(System.Decimal)"/>
</member>
<member name="M:Tools.NumericsT.Angle.Sign">
 <summary>Gets sign of this angle</summary>
 <returns>-1 if current angle is negative, +1 if current angle is positive; 0 if current angle is zero</returns>
 <seelaso cref="M:System.Math.Sign(System.Decimal)"/>
</member>
<member name="M:Tools.NumericsT.Angle.Cos">
 <summary>Returns the cosine of current angle.</summary>
 <returns>Cosine of current angle</returns>
 <seelaso cref="M:System.Math.Cos(System.Double)"/>
</member>
<member name="M:Tools.NumericsT.Angle.Sin">
 <summary>Returns the sine of current angle.</summary>
 <returns>Sine of current angle</returns>
 <seelaso cref="M:System.Math.Sin(System.Double)"/>
</member>
<member name="M:Tools.NumericsT.Angle.Tan">
 <summary>Returns the tangent of current angle.</summary>
 <returns>Tangent of current angle</returns>
 <seelaso cref="M:System.Math.Tan(System.Double)"/>
</member>
<member name="M:Tools.NumericsT.Angle.Cot">
 <summary>Returns the cotangent of current angle.</summary>
 <returns>Cotangent of current angle</returns>
 <remarks>Cot(x) is defined as 1/Tan(x)</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.Csc">
 <summary>Returns the cosecant of current angle.</summary>
 <returns>Cosecant of current angle</returns>
 <remarks>Csc(x) is defined as 1/Sin(x)</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.Sec">
 <summary>Returns the secant of current angle.</summary>
 <returns>Secant of current angle</returns>
 <remarks>Sec(x) is defined as 1/Cos(x)</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.Asin(System.Double)">
 <summary>Arcussine: Returns the angle whose sine is the specified number.</summary>
 <param name="d">A number representing a sine, where <paramref name="d"/> must be greater than or equal to -1, but less than or equal to 1.</param>
 <returns>An angle, θ, measured in degrees, such that -90° ≤ θ ≤ 90°.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="d"/> &lt; -1 or <paramref name="d"/> > 1 or <paramref name="d"/> equals <see cref="F:System.Double.NaN"/></exception>
 <seelaso cref="M:System.Math.Asin(System.Double)"/>
</member>
<member name="M:Tools.NumericsT.Angle.Acos(System.Double)">
 <summary>Arcuscosine: Returns the angle whose cosine is the specified number.</summary>
 <param name="d">A number representing a cosine, where <paramref name="d"/> must be greater than or equal to -1, but less than or equal to 1.</param>
 <returns>An angle, θ, measured in degrees, such that 0° ≤ θ ≤ 180° -or-.</returns>
 <exception cref="T:System.ArgumentException">d<paramref name=" "/>&lt; -1 or <paramref name="d"/> &gt; 1 or d equals <see cref="F:System.Double.NaN" /></exception>
 <seelaso cref="M:System.Math.Acos(System.Double)"/>
</member>
<member name="M:Tools.NumericsT.Angle.Atan(System.Double)">
 <summary>Arcustangent: Returns the angle whose tangent is the specified number.</summary>
 <param name="d">A number representing a tangent.</param>
 <returns>An angle, θ, measured in degrees, such that -90° ≤ θ ≤ 90°. -90° if <paramref name="d"/> equals <see cref="F:System.Double.NegativeInfinity" />, or 90° if <paramref name="d"/> equals <see cref="F:System.Double.PositiveInfinity" />.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="d"/> equals <see cref="F:System.Double.NaN" /></exception>
 <seelaso cref="M:System.Math.Atan(System.Double)"/>
</member>
<member name="M:Tools.NumericsT.Angle.Acot(System.Double)">
 <summary>Arcuscotangent: Returns the angle whose cotangent is the specified number.</summary>
 <param name="d">A number representing a cotangent.</param>
 <returns>An angle, θ, measured in degrees, such that -90° ≤ θ ≤ 90°.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="d"/> equals <see cref="F:System.Double.NaN" /></exception>
</member>
<member name="M:Tools.NumericsT.Angle.Asec(System.Double)">
 <summary>Arcussecant: Returns the angle whose cecant is the specified number.</summary>
 <param name="d">A number representing a secant, where <paramref name="d"/> must be less than or equal to -1, but greater than or equal to 1.</param>
 <returns>An angle, θ, measured in degrees, such that 0° ≤ θ ≤ 180° -or-.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="d"/> is > -1 and <paramref name="d"/> &lt; 1 or <paramref name="d"/> equals <see cref="F:System.Double.NaN"/></exception>
</member>
<member name="M:Tools.NumericsT.Angle.Acsc(System.Double)">
 <summary>Arcuscosecant: Returns the angle whose cosecant is the specified number.</summary>
 <param name="d">A number representing a cosecant, where <paramref name="d"/> must be less than or equal to -1, but greater than or equal to 1.</param>
 <returns>An angle, θ, measured in degrees, such that -90° ≤ θ ≤ 90°.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="d"/> is > -1 and <paramref name="d"/> &lt; 1 or <paramref name="d"/> equals <see cref="F:System.Double.NaN"/></exception>
</member>
<member name="M:Tools.NumericsT.Angle.RoundToDegrees(System.MidpointRounding)">
 <summary>Rounds current angle to nearest whole degrees</summary>
 <param name="mode">Optionaly defines how to round 30′</param>
 <returns>An angle consisiting of whole degrees only</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="mode"/> is neither <see cref="F:System.MidpointRounding.AwayFromZero"/> nor <see cref="F:System.MidpointRounding.ToEven"/>.</exception>
</member>
<member name="M:Tools.NumericsT.Angle.TruncateToDegrees">
 <summary>Truncates current angle to contain only whole degrees</summary>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> that contains only <see cref="P:Tools.NumericsT.Angle.Degrees"/>.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.RoundToMinutes(System.MidpointRounding)">
 <summary>Rounds current angle to nearest whole degrees</summary>
 <param name="mode">Optionaly defines how to round 30″</param>
 <returns>An angle consisiting of whole degrees and minutes only</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="mode"/> is neither <see cref="F:System.MidpointRounding.AwayFromZero"/> nor <see cref="F:System.MidpointRounding.ToEven"/>.</exception>
</member>
<member name="M:Tools.NumericsT.Angle.TruncateToMinutes">
 <summary>Truncates current angle to contain only whole degrees and minutes</summary>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> that contains only <see cref="P:Tools.NumericsT.Angle.Degrees"/> and <see cref="P:Tools.NumericsT.Angle.Minutes"/>.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.RoundToSeconds(System.Int32,System.MidpointRounding)">
 <summary>Rounds current angle to nearest whole seconds or decimal seconds fraction</summary>
 <param name="digits">Optionally allows to round to second fraction. Defines to how much decimal places of seconds to rounbd.</param>
 <param name="mode">Optionaly defines how to round 0.5″</param>
 <returns>A rounded angle</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="mode"/> is neither <see cref="F:System.MidpointRounding.AwayFromZero"/> nor <see cref="F:System.MidpointRounding.ToEven"/>.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digits"/> is less than 0 or greater than 15.</exception>
</member>
<member name="M:Tools.NumericsT.Angle.TruncateToSeconds">
 <summary>Truncates current angle to contain only whole degrees, minutes and seconds</summary>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> that contains only <see cref="P:Tools.NumericsT.Angle.Degrees"/>, <see cref="P:Tools.NumericsT.Angle.Minutes"/> and integral part of <see cref="P:Tools.NumericsT.Angle.Seconds"/></returns>
</member>
<member name="M:Tools.NumericsT.Angle.CeilingDegrees">
 <summary>Converts an angle to nearest greater angle measured in whole degress.</summary>
 <returns>A new instance of angle that contains only whole degrees and whichs absolute value is greater than or equal to current instance. Keeps sign.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.CeilingMinutes">
 <summary>Converts an angle to nearest greater angle measured in whole degress and minutes.</summary>
 <returns>A new instance of angle that contains only whole degrees and minutes and whichs absolute value is greater than or equal to current instance. Keeps sign.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.CeilingSeconds">
 <summary>Converts an angle to nearest greater angle measured in whole degress, minutes and seconds.</summary>
 <returns>A new instance of angle that contains only whole degrees, minutes and seconds and whichs absolute value is greater than or equal to current instance. Keeps sign.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Explicit(System.Double)~Tools.NumericsT.Angle">
 <summary>Converts a <see cref="T:System.Double"/> value to <see cref="T:Tools.NumericsT.Angle"/></summary>
 <param name="a">Angle value in degrees</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to <paramref name="a"/> degrees</returns>
 <exception cref="T:System.ArgumentException"><paramref name="a"/> is NaN or infinity</exception>
 <exception cref="T:System.OverflowException"><paramref name="a"/> is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Explicit(System.Single)~Tools.NumericsT.Angle">
 <summary>Converts a <see cref="T:System.Single"/> value to <see cref="T:Tools.NumericsT.Angle"/></summary>
 <param name="a">Angle value in degrees</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to <paramref name="a"/> degrees</returns>
 <exception cref="T:System.ArgumentException"><paramref name="a"/> is NaN or infinity</exception>
 <exception cref="T:System.OverflowException"><paramref name="a"/> is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Implicit(System.Decimal)~Tools.NumericsT.Angle">
 <summary>Converts a <see cref="T:System.Double"/> value to <see cref="T:Tools.NumericsT.Angle"/></summary>
 <param name="a">Angle value in degrees</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to <paramref name="a"/> degrees</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Implicit(System.Int32)~Tools.NumericsT.Angle">
 <summary>Converts a <see cref="T:System.Double"/> value to <see cref="T:Tools.NumericsT.Angle"/></summary>
 <param name="a">Angle value in degrees</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to <paramref name="a"/> degrees</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Explicit(System.TimeSpan)~Tools.NumericsT.Angle">
 <summary>Converts a <see cref="T:System.TimeSpan"/> value to <see cref="T:Tools.NumericsT.Angle"/></summary>
 <param name="a">A <see cref="T:System.TimeSpan"/> to be converted</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to <paramref name="a"/>.<see cref="P:System.TimeSpan.TotalHours">TotalHours</see> degrees</returns>
 <exception cref="T:System.OverflowException">Resulting angle is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/>.</exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Explicit(Tools.TimeSpanFormattable)~Tools.NumericsT.Angle">
 <summary>Converts a <see cref="T:Tools.TimeSpanFormattable"/> value to <see cref="T:Tools.NumericsT.Angle"/></summary>
 <param name="a">A <see cref="T:Tools.TimeSpanFormattable"/> to be converted</param>
 <returns>A new instance of <see cref="T:Tools.NumericsT.Angle"/> initialized to <paramref name="a"/>.<see cref="P:Tools.TimeSpanFormattable.TotalHours">TotalHours</see> degrees</returns>
 <exception cref="T:System.OverflowException">Resulting angle is less than <see cref="F:Tools.NumericsT.Angle.MinValue"/> or greater than <see cref="F:Tools.NumericsT.Angle.MaxValue"/>.</exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Implicit(Tools.NumericsT.Angle)~System.Double">
 <summary>Converts an <see cref="T:Tools.NumericsT.Angle"/> value to <see cref="T:System.Double"/></summary>
 <param name="a">An angle value</param>
 <returns><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see></returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Explicit(Tools.NumericsT.Angle)~System.Single">
 <summary>Converts an <see cref="T:Tools.NumericsT.Angle"/> value to <see cref="T:System.Single"/></summary>
 <param name="a">An angle value</param>
 <returns><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see> as <see cref="T:System.Single"/></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see> is less than <see cref="F:System.Single.MinValue"/> or greater than <see cref="F:System.Single.MaxValue"/>.</exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Implicit(Tools.NumericsT.Angle)~System.Decimal">
 <summary>Converts an <see cref="T:Tools.NumericsT.Angle"/> value to <see cref="T:System.Decimal"/></summary>
 <param name="a">An angle value</param>
 <returns><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see> as <see cref="T:System.Decimal"/></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see> is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/>.</exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Explicit(Tools.NumericsT.Angle)~System.Int32">
 <summary>Converts an <see cref="T:Tools.NumericsT.Angle"/> value to <see cref="T:System.Int32"/></summary>
 <param name="a">An angle value</param>
 <returns><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see> as <see cref="T:System.Int32"/></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see> is less than <see cref="F:System.Int32.MinValue"/> or greater than <see cref="F:System.Int32.MaxValue"/> (after rounding).</exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Explicit(Tools.NumericsT.Angle)~System.TimeSpan">
 <summary>Converts an <see cref="T:Tools.NumericsT.Angle"/> value to <see cref="T:System.TimeSpan"/></summary>
 <param name="a">An angle value</param>
 <returns>A new instance of <see cref="T:System.TimeSpan"/> created <see cref="M:System.TimeSpan.FromHours(System.Double)">from hours</see> <paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Explicit(Tools.NumericsT.Angle)~Tools.TimeSpanFormattable">
 <summary>Converts an <see cref="T:Tools.NumericsT.Angle"/> value to <see cref="T:Tools.TimeSpanFormattable"/></summary>
 <param name="a">An angle value</param>
 <returns>A new instance of <see cref="T:Tools.TimeSpanFormattable"/> created <see cref="M:Tools.TimeSpanFormattable.FromHours(System.Double)">from hours</see> <paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.TotalDegrees">TotalDegrees</see> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Implicit(Tools.NumericsT.URational[])~Tools.NumericsT.Angle">
 <summary>Converts array of <see cref="T:Tools.NumericsT.URational"/>s as used in Exif to <see cref="T:Tools.NumericsT.Angle"/></summary>
 <param name="a">An array that contains items degrees, minutes, second, second/60, second/60/60 etc.</param>
 <returns>An angle whose value value is computed as <paramref name="a"/>[0] + <paramref name="a"/>[1]/60 + <paramref name="a"/>[2]/60/60 etc.; Zero angle if <paramref name="a"/> is null or an empty array.</returns>
 <remarks>This operator is here to support conversion of Exif latitude/longitude data to <see cref="T:Tools.NumericsT.Angle"/>.</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_Explicit(Tools.NumericsT.SRational[])~Tools.NumericsT.Angle">
 <summary>Converts array of <see cref="T:Tools.NumericsT.SRational"/>s to <see cref="T:Tools.NumericsT.Angle"/></summary>
 <param name="a">An array that contains items degrees, minutes, second, second/60, second/60/60 etc.</param>
 <returns>An angle whose value value is computed as <paramref name="a"/>[0] + <paramref name="a"/>[1]/60 + <paramref name="a"/>[2]/60/60 etc.; Zero angle if <paramref name="a"/> is null or an empty array.</returns>
 <remarks>This operator is CLS-compliant companion to <see cref="T:Tools.NumericsT.URational"/>[] operator.</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_LessThan(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Compares two angle values by less-then operator</summary>
 <param name="a">An angle value to be smaller than <paramref name="b"/></param>
 <param name="b">An angle value to be greater than <paramref name="a"/></param>
 <returns>True if <paramref name="a"/> is smaller than <paramref name="b"/>; false othervise.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_GreaterThan(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Compares two angle values by greater-then operator</summary>
 <param name="a">An angle value to be greater than <paramref name="b"/></param>
 <param name="b">An angle value to be smaller than <paramref name="a"/></param>
 <returns>True if normalized <paramref name="a"/> is greater than normalized <paramref name="b"/>; false othervise.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_LessThanOrEqual(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Tests if one angle is less than or equal to another angle</summary>
 <param name="a">An angle value</param>
 <param name="b">An angle value</param>
 <returns>True if normalized <paramref name="a"/> is less than or equal to normalized <paramref name="b"/>; false othervise.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_GreaterThanOrEqual(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Tests if one angle is greater than or equal to another angle</summary>
 <param name="a">An angle value</param>
 <param name="b">An angle value</param>
 <returns>True if normalized <paramref name="a"/> is greater than or equal to normalized <paramref name="b"/>; false othervise.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Equality(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Tests if two angles represents the same normalized angle</summary>
 <param name="a">An angle value</param>
 <param name="b">An angle value</param>
 <returns>True if normalized <paramref name="a"/> is equal to normalized <paramref name="b"/>; false othervise.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Inequality(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Tests if two angles represents different normalized angles</summary>
 <param name="a">An angle value</param>
 <param name="b">An angle value</param>
 <returns>True if normalized <paramref name="a"/> is differs from normalized <paramref name="b"/>; false othervise.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_LessThan(Tools.NumericsT.Angle,System.Double)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> value represents an angle that is smaller than another angle given as <see cref="T:System.Double"/>.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents an angle that is smaller than <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_GreaterThan(Tools.NumericsT.Angle,System.Double)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> value represents an angle that is greater than another angle given as <see cref="T:System.Double"/>.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents an angle that is greater than <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_LessThanOrEqual(Tools.NumericsT.Angle,System.Double)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> value represents an angle that is smaller than or equal to another angle given as <see cref="T:System.Double"/>.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents an angle that is smaller than or equal to <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_GreaterThanOrEqual(Tools.NumericsT.Angle,System.Double)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> value represents an angle that is greater than or equal to another angle given as <see cref="T:System.Double"/>.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents an angle that is greater than or equal to <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Equality(Tools.NumericsT.Angle,System.Double)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> and <see cref="T:System.Double"/> represent same normalized angle.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents the same angle as <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Inequality(Tools.NumericsT.Angle,System.Double)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> and <see cref="T:System.Double"/> represent different normalized angles.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents different angle than <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_LessThan(Tools.NumericsT.Angle,System.Int32)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> value represents an angle that is smaller than another angle given as <see cref="T:System.Int32"/>.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents an angle that is smaller than <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_GreaterThan(Tools.NumericsT.Angle,System.Int32)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> value represents an angle that is greater than another angle given as <see cref="T:System.Int32"/>.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents an angle that is greater than <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_LessThanOrEqual(Tools.NumericsT.Angle,System.Int32)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> value represents an angle that is smaller than or equal to another angle given as <see cref="T:System.Int32"/>.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents an angle that is smaller than or equal to <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_GreaterThanOrEqual(Tools.NumericsT.Angle,System.Int32)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> value represents an angle that is greater than or equal to another angle given as <see cref="T:System.Int32"/>.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents an angle that is greater than or equal to <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Equality(Tools.NumericsT.Angle,System.Int32)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> and <see cref="T:System.Int32"/> represent same normalized angle.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents the same angle as <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Inequality(Tools.NumericsT.Angle,System.Int32)">
 <summary>Test if <see cref="T:Tools.NumericsT.Angle"/> and <see cref="T:System.Int32"/> represent different normalized angles.</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">Angle in degrees</param>
 <returns>True if <paramref name="a"/> normalized represents different angle than <paramref name="b"/> in degrees normalized; false otherwise</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Multiply(Tools.NumericsT.Angle,System.Double)">
 <summary>Multiplies an <see cref="T:Tools.NumericsT.Angle"/> with given <see cref="T:System.Double"/> number</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> to be multiplied</param>
 <param name="b">Value to multiply angle with</param>
 <returns>An angle that is <paramref name="b"/>-times greater than <paramref name="a"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="b"/> is NaN or infinity</exception>
 <exception cref="T:System.Diagnostics.OverflowAction">Resulting angle is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
 <remarks>Resulting value is not normalized.</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_Multiply(Tools.NumericsT.Angle,System.Single)">
 <summary>Multiplies an <see cref="T:Tools.NumericsT.Angle"/> with given <see cref="T:System.Single"/> number</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> to be multiplied</param>
 <param name="b">Value to multiply angle with</param>
 <returns>An angle that is <paramref name="b"/>-times greater than <paramref name="a"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="b"/> is NaN or infinity</exception>
 <exception cref="T:System.Diagnostics.OverflowAction">Resulting angle is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
 <remarks>Resulting value is not normalized.</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_Multiply(Tools.NumericsT.Angle,System.Int32)">
 <summary>Multiplies an <see cref="T:Tools.NumericsT.Angle"/> with given <see cref="T:System.Int32"/> number</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> to be multiplied</param>
 <param name="b">Value to multiply angle with</param>
 <returns>An angle that is <paramref name="b"/>-times greater than <paramref name="a"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="b"/> is NaN or infinity</exception>
 <exception cref="T:System.Diagnostics.OverflowAction">Resulting angle is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
 <remarks>Resulting value is not normalized.</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_Division(Tools.NumericsT.Angle,System.Double)">
 <summary>Divides an <see cref="T:Tools.NumericsT.Angle"/> by given <see cref="T:System.Double"/> number</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> to be divided</param>
 <param name="b">A number to dividy angle by</param>
 <returns>An angle that is <paramref name="b"/>-times smaller than <paramref name="a"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="b"/> is NaN</exception>
 <exception cref="T:System.Diagnostics.OverflowAction">Resulting angle is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is 0</exception>
 <remarks>Resulting value is not normalized.</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_Division(Tools.NumericsT.Angle,System.Single)">
 <summary>Divides an <see cref="T:Tools.NumericsT.Angle"/> by given <see cref="T:System.Single"/> number</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> to be divided</param>
 <param name="b">A number to dividy angle by</param>
 <returns>An angle that is <paramref name="b"/>-times smaller than <paramref name="a"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="b"/> is NaN</exception>
 <exception cref="T:System.Diagnostics.OverflowAction">Resulting angle is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is 0</exception>
 <remarks>Resulting value is not normalized.</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_Division(Tools.NumericsT.Angle,System.Int32)">
 <summary>Divides an <see cref="T:Tools.NumericsT.Angle"/> by given <see cref="T:System.Int32"/> number</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> to be divided</param>
 <param name="b">A number to dividy angle by</param>
 <returns>An angle that is <paramref name="b"/>-times smaller than <paramref name="a"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="b"/> is NaN</exception>
 <exception cref="T:System.Diagnostics.OverflowAction">Resulting angle is less than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/></exception>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is 0</exception>
 <remarks>Resulting value is not normalized.</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_IntegerDivision(Tools.NumericsT.Angle,System.Int32)">
 <summary>Divides number of degrees in this angle with integer number</summary>
 <param name="a">An angle whichs number of degrees to divide</param>
 <param name="b">An integral number to divide number of degrees by</param>
 <returns><paramref name="a"/>.<see cref="P:Tools.NumericsT.Angle.Rotations">Degrees</see> integraly divided by <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Result of operation is greater than <see cref="F:System.Int32.MaxValue"/> or less than <see cref="F:System.Int32.MinValue"/> degreees</exception>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
</member>
<member name="M:Tools.NumericsT.Angle.op_Modulus(Tools.NumericsT.Angle,System.Int32)">
 <summary>Gets a remined of angle after substracting all whole amounts of degrees</summary>
 <param name="a">An angle to get reminder from</param>
 <param name="b">Modulo</param>
 <returns>
 Reminder after integral division of <paramref name="a"/> by <paramref name="b"/> number of degrees.
 It can be also interpreted as angle from range &lt;0°, <paramref name="b"/>°) (or (-<paramref name="b"/>°, 0°> if <paramref name="a"/> is less than zero XOR <paramref name="b"/> is less than zero) created by repeated substracting (adding in case of negative <paramref name="a"/> XOR <paramref name="b"/>) <paramref name="b"/>° to (from) <paramref name="a"/> till such range is reached.
 </returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_UnaryNegation(Tools.NumericsT.Angle)">
 <summary>Makes an angle negative</summary>
 <param name="a">An angle to be made negative</param>
 <remarks>Angle whose value is negative of <paramref name="a"/></remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_UnaryPlus(Tools.NumericsT.Angle)">
 <summary>Implements unary plus operator</summary>
 <param name="a">An angle</param>
 <returns><paramref name="a"/> unchanged</returns>
</member>
<member name="M:Tools.NumericsT.Angle.op_Addition(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Adds two angles</summary>
 <param name="a">An angle</param>
 <param name="b">An angle</param>
 <returns>An angle that is sum of sizes of two angles.</returns>
 <exception cref="T:System.OverflowException">Resulting angle is smaller than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/>.</exception>
 <remarks>No normalization is done</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.op_Subtraction(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Subtracts two angles</summary>
 <param name="a">An angle to subtract from</param>
 <param name="b">An angle be subtracted</param>
 <returns>An angle that is difference between the two angles. <paramref name="b"/> subtracted form <paramref name="a"/></returns>
 <exception cref="T:System.OverflowException">Resulting angle is smaller than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/>.</exception>
 <remarks>No normalization is done</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.OpMinusImpl(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Implements operator -</summary>
 <param name="a">An angle to subtract from</param>
 <param name="b">An angle be subtracted</param>
 <returns>An angle that is difference between the two angles. <paramref name="b"/> subtracted form <paramref name="a"/></returns>
 <exception cref="T:System.OverflowException">Resulting angle is smaller than <see cref="F:System.Decimal.MinValue"/> or greater than <see cref="F:System.Decimal.MaxValue"/>.</exception>
 <remarks>No normalization is done</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.GetHashCode">
 <summary>Returns the hash code for this instance.</summary>
 <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
 <remarks>Hash code is computed from 360-normalized value</remarks>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.NumericsT.Angle.Equals(System.Object)">
 <summary>Indicates whether this instance and a specified object are equal.</summary>
 <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
 <param name="obj">Another object to compare to. </param>
 <remarks>
 <see cref="T:Tools.NumericsT.Angle"/> and <paramref name="obj"/> are considered equal if:
 <list type="list">
 <item><paramref name="obj"/> is <see cref="T:Tools.NumericsT.Angle"/> of same 360-normalized value as sthi instance</item>
 <item><paramref name="obj"/> is numeric value (all standard .NET numeric types are supported including <see cref="T:System.Decimal"/> and <see cref="T:System.Numerics.BigInteger"/>; <see cref="T:System.Char"/> is not supported)</item>
 <item><paramref name="obj"/> is <see cref="T:System.TimeSpan"/> or <see cref="T:Tools.TimeSpanFormattable"/> with same <see cref="P:System.TimeSpan.TotalHours"/> as <see cref="P:Tools.NumericsT.Angle.TotalDegrees"/>.</item>
 </list>
 <note>All comaprisons on <see cref="T:Tools.NumericsT.Angle"/> are done after value is normalized to range &lt;0°, 360°> using <see cref="M:Tools.NumericsT.Angle.Normalize"/>. Then <see cref="P:Tools.NumericsT.Angle.TotalDegrees"/> values are compared.</note>
 </remarks>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.NumericsT.Angle.CompareTo(Tools.NumericsT.Angle)">
 <summary>Compares the current object with another object of the same type.</summary>
 <param name="other">An object to compare with this object.</param>
 <returns>A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other. Greater than zero This object is greater than other.</returns>
</member>
<member name="M:Tools.NumericsT.Angle.Compare(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Compares two <see cref="T:Tools.NumericsT.Angle"/> values</summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <returns>
 -1 if <paramref name="a"/> is less than <paramref name="b"/>.
 0 if <paramref name="a"/> equals <paramref name="b"/>.
 +1 if <paramref name="a"/> is greater than <paramref name="b"/>.
 </returns>
</member>
<member name="M:Tools.NumericsT.Angle.Compare(Tools.NumericsT.Angle,System.Int32)">
 <summary>Compares <see cref="T:Tools.NumericsT.Angle"/> and <see cref="T:System.Int32"/></summary>
 <param name="a">An <see cref="T:Tools.NumericsT.Angle"/> value</param>
 <param name="b">An <see cref="T:System.Int32"/> value</param>
 <returns>
 -1 if <paramref name="a"/> is less than <paramref name="b"/>.
 0 if <paramref name="a"/> equals <paramref name="b"/>.
 +1 if <paramref name="a"/> is greater than <paramref name="b"/>.
 </returns>
</member>
<member name="M:Tools.NumericsT.Angle.ToString">
 <summary>Returns the fully qualified type name of this instance.</summary>
 <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="F:Tools.NumericsT.Angle.shortFormatRegex">
 <summary>A regular expression to detect standard angle format</summary>
</member>
<member name="M:Tools.NumericsT.Angle.ToString(System.String,System.IFormatProvider)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <param name="format">The format to use. Null or an empty string means default format (g). This can be either standard or custom format string.</param>
 <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
 <returns>The value of the current instance in the specified format.</returns>
 <exception cref="T:System.FormatException"><paramref name="format"/> is invalid</exception>
 <remarks>
 This method supports variety of formating specifier, either standard or custom.
 <para>Standard format specifiers are:</para>
 <para>Standard format specifier consist of single letter optionally followed by one or more numerals (parameter).</para>
 <list type="table">
 <listheader><term>Standard format specifier</term><description>Meaning              </description><description>Example       </description><description>Parameter meaning                                </description><description>When no parameter is specified    </description><description>Appropriate custom format                                                                                                                                                                                                                                                                                                                                                                                                                      </description></listheader>
 <item>      <term>G, g, l, L               </term><description>General/long         </description><description>-14°00′05.33″ </description><description>Number of max decimal places for sub-second value</description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>-d°mm'(RestSeconds,N)"     </description></item><item><term>0    </term><description>-d°mm'ss"                                   </description></item><item><term>other</term><description>-d°mm'ss.ffff" (as many fs as is value of parameter)       </description></item></list></description></item>
 <item>      <term>a, φ                     </term><description>GPS latitude short   </description><description>14°00′05″ N   </description><description>Parameter is not allowed.                        </description><description>                                  </description><description>N180d°mm'ss" a                                                                                                                                                                                                                                                                                                                                                                                                                                 </description></item>
 <item>      <term>A, Φ                     </term><description>GPS latitude long    </description><description>14°00′05.33″ N</description><description>Number of max decimal places for sub-second value</description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>N180d°mm'(RestSeconds,N)" a</description></item><item><term>0    </term><description>N180d°mm'ss" a                              </description></item><item><term>other</term><description>N180-d°mm'ss.ffff" a (as many fs as is value of parameter) </description></item></list></description></item>
 <item>      <term>b                        </term><description>GPS latitude decimal </description><description>14.22 N       </description><description>Number of decimal places                         </description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>N180(TotalDegrees,N) a     </description></item><item><term>other</term><description>N180Dx a (where x is actual parameter value)</description></item>                                                                                                                     </list></description></item>
 <item>      <term>d                        </term><description>Time with days, short</description><description>1.1:03:09     </description><description>Parameter is not allowed.                        </description><description>                                  </description><description>-[y.]h:mm:ss                                                                                                                                                                                                                                                                                                                                                                                                                                   </description></item>
 <item>      <term>D                        </term><description>Time with days, long </description><description>1.1:03:09.141 </description><description>Number of max decimal places for sub-second value</description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>-[y.]h:mm:(RestSeconds,N)  </description></item><item><term>0    </term><description>-[y.]h:mm:ss                                </description></item><item><term>other</term><description>-[y.]h:mm:ss.ffff" (as many fs as is value of parameter)   </description></item></list></description></item>
 <item>      <term>e                        </term><description>F normalized         </description><description>-14.975       </description><description>Number of decimal places                         </description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>N(TotalDegrees,N)          </description></item><item><term>other</term><description>NDx (where x is actual parameter value)     </description></item>                                                                                                                     </list></description></item>
 <item>      <term>E                        </term><description>Rotations            </description><description>0.125         </description><description>Number of decimal places                         </description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>-E                         </description></item><item><term>other</term><description>-Ex (where x is actual parameter value)     </description></item>                                                                                                                     </list></description></item>
 <item>      <term>F, f                     </term><description>Decimal              </description><description>-14.975       </description><description>Number of decimal places                         </description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>-(TotalDegrees,N)          </description></item><item><term>other</term><description>-Dx (where x is actual parameter value)     </description></item>                                                                                                                     </list></description></item>
 <item>      <term>i                        </term><description>Slope in permile     </description><description>-140,10‰      </description><description>Number of decimal places                         </description><description>culture-specific                  </description><description>-lx‰ where x is number of decimal palces                                                                                                                                                                                                                                                                                                                                                                                                       </description></item>
 <item>      <term>c                        </term><description>Slope in percent     </description><description>-14,01%       </description><description>Number of decimal places                         </description><description>culture-specific                  </description><description>-Lx% where x is number of decimal palces                                                                                                                                                                                                                                                                                                                                                                                                       </description></item>
 <item>      <term>n                        </term><description>S normalized         </description><description>-14°09′05″    </description><description>Parameter is not allowed.                        </description><description>                                  </description><description>N-d°mm'ss"                                                                                                                                                                                                                                                                                                                                                                                                                                     </description></item>
 <item>      <term>N                        </term><description>G normalized         </description><description>-14°00′05.33″ </description><description>Number of max decimal places for sub-second value</description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>Nd°mm'(RestSeconds,N)"     </description></item><item><term>0    </term><description>Nd°mm'ss"                                   </description></item><item><term>other</term><description>Nd°mm'ss.ffff" (as many fs as is value of parameter)       </description></item></list></description></item>
 <item>      <term>O, Λ                     </term><description>GPS longitude long   </description><description>14°00′05.33″ E</description><description>Number of max decimal places for sub-second value</description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>N180d°mm'(RestSeconds,N)" o</description></item><item><term>0    </term><description>N180d°mm'ss" o                              </description></item><item><term>other</term><description>N180-d°mm'ss.ffff" o (as many fs as is value of parameter) </description></item></list></description></item>
 <item>      <term>o, λ                     </term><description>GPS longitude short  </description><description>14°00′05″ E   </description><description>Parameter is not allowed.                        </description><description>                                  </description><description>N180d°mm'ss" o                                                                                                                                                                                                                                                                                                                                                                                                                                 </description></item>
 <item>      <term>p                        </term><description>GPS longitude decimal</description><description>14.22 E       </description><description>Number of decimal places                         </description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>N180(TotalDegrees,N) o     </description></item><item><term>other</term><description>N180Dx o (where x is actual parameter value)</description></item>                                                                                                                     </list></description></item>
 <item>      <term>R                        </term><description>Radians              </description><description>6.21465       </description><description>Number of decimal places                         </description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>-R                         </description></item><item><term>other</term><description>-Rx (where x is actual parameter value)     </description></item>                                                                                                                     </list></description></item>
 <item>      <term>S, s                     </term><description>Short                </description><description>-14°09′05″    </description><description>Parameter is not allowed.                        </description><description>                                  </description><description>-d°mm'ss"                                                                                                                                                                                                                                                                                                                                                                                                                                      </description></item>
 <item>      <term>t                        </term><description>Time, short, no days </description><description>25:03:09      </description><description>Parameter is not allowed.                        </description><description>                                  </description><description>-d:mm:ss                                                                                                                                                                                                                                                                                                                                                                                                                                       </description></item>
 <item>      <term>T                        </term><description>Time, long, no days  </description><description>25:03:09.141  </description><description>Number of max decimal places for sub-second value</description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>-d:mm:(RestSeconds,N)      </description></item><item><term>0    </term><description>-d:mm:ss                                    </description></item><item><term>other</term><description>-d:mm:ss.ffff" (as many fs as is value of parameter)       </description></item></list></description></item>
 <item>      <term>Z                        </term><description>Grads                </description><description>122.15        </description><description>Number of decimal places                         </description><description>as much decimal places as required</description><description><list type="table"><listheader><term>Parameter value</term><description>Custom format</description></listheader><item><term>not specified</term><description>-Z                         </description></item><item><term>other</term><description>-Zx (where x is actual parameter value)     </description></item>                                                                                                                     </list></description></item>
 </list>
 <para>Notes:</para>
 <list type="table">
 <item><term>normalized</term><description>Value normalized to max value 360° using <see cref="M:Tools.NumericsT.Angle.Normalize"/> is passed to formatting.</description></item>
 </list>
 <para>Custom format specifiers are:</para>
 <para>Some of the custom format specifiers can be repeated, some accept parameters.</para>
 <para>Specifiers that produce value:</para>
 <list type="table">
 <listheader><term>Specifier</term><description>Meaning                                 </description><description>Repeatable (and what does it mean)                    </description><description>Parameter                                                                                                </description><description>Notes                                                                                                                                                                                               </description></listheader>
 <item>      <term>D, H     </term><description><see cref="P:Tools.NumericsT.Angle.TotalDegrees"/>              </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (as required if not present)                                           </description><description>If you want to exclude days use H instead.                                                                                                                                                          </description></item>
 <item>      <term>d        </term><description><see cref="P:Tools.NumericsT.Angle.Degrees"/>                   </description><description>Yes - minimum number of digits                        </description><description>no                                                                                                       </description><description>If you want to exclude days use h instead.                                                                                                                                                          </description></item>
 <item>      <term>e        </term><description><see cref="M:Tools.NumericsT.Angle.ToSlope"/> as number         </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (as required if not present)                                           </description><description>This is <see cref="M:Tools.NumericsT.Angle.ToSlope"/> * 100. If - or + immediatelly precedes or follows (whitespace allowed) the e specifier the sign is generated based on slope value instead of (normalized) angle value.</description></item>
 <item>      <term>E        </term><description><see cref="P:Tools.NumericsT.Angle.Rotations"/>                 </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (max <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits"/> if not present)</description><description>                                                                                                                                                                                                    </description></item>
 <item>      <term>f        </term><description>Fractional part of <see cref="P:Tools.NumericsT.Angle.Seconds"/></description><description>Yes - minimum number of digits                        </description><description>Number - maximum number of digits (as required if not present)                                           </description><description>Contains part of <see cref="P:Tools.NumericsT.Angle.Seconds"/> right from decimnal point (&lt;1). Does not contain decimal point or any numerals before it. Use dot (.) to include decimal point.                           </description></item>
 <item>      <term>h        </term><description>Degrees (hours) without days (whole)    </description><description>Yes - minimum number of digits                        </description><description>no                                                                                                       </description><description>Always excludes days                                                                                                                                                                                </description></item>
 <item>      <term>l        </term><description><see cref="M:Tools.NumericsT.Angle.ToSlope"/> in permile        </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (as required if not present)                                           </description><description>If - or + immediatelly precedes or follows (whitespace allowed) the l specifier the sign is generated based on slope value instead of (normalized) angle value.                                     </description></item>
 <item>      <term>L        </term><description><see cref="M:Tools.NumericsT.Angle.ToSlope"/> in percent        </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (as required if not present)                                           </description><description>If - or + immediatelly precedes or follows (whitespace allowed) the L specifier the sign is generated based on slope value instead of (normalized) angle value.                                     </description></item>
 <item>      <term>m        </term><description><see cref="P:Tools.NumericsT.Angle.Minutes"/>                   </description><description>Yes - minimum number of digits                        </description><description>no                                                                                                       </description><description>                                                                                                                                                                                                    </description></item>
 <item>      <term>M        </term><description><see cref="P:Tools.NumericsT.Angle.TotalMinutes"/>              </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (as required if not present)                                           </description><description>Excludes degrees if D, d, H or h was presenf before.                                                                                                                                                </description></item>
 <item>      <term>p, π     </term><description>π-radians (<see cref="M:Tools.NumericsT.Angle.ToRadians"/> / π )</description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (max <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits"/> if not present)</description><description>Value of <see cref="M:Tools.NumericsT.Angle.ToRadians"/> (angle in radians) divided by <see cref="F:Tools.NumericsT.Angle.π"/> - because radian values are often given as mupltiples of π (pi)                                                      </description></item>
 <item>      <term>R        </term><description><see cref="M:Tools.NumericsT.Angle.ToRadians"/>                 </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (max <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits"/> if not present)</description><description>                                                                                                                                                                                                    </description></item>
 <item>      <term>s        </term><description><see cref="P:Tools.NumericsT.Angle.Seconds"/> - integral part   </description><description>Yes - minimum number of digits                        </description><description>no                                                                                                       </description><description>                                                                                                                                                                                                    </description></item>
 <item>      <term>S        </term><description><see cref="P:Tools.NumericsT.Angle.TotalSeconds"/>              </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (as required if not present)                                           </description><description>If M or m was present before <see cref="P:Tools.NumericsT.Angle.Seconds"/> is used instead. If D, d, H or h was present before (and neither m or M was present) <see cref="P:Tools.NumericsT.Angle.TotalSeconds"/> value does not contain degrees.  </description></item>
 <item>      <term>y        </term><description>Days (whole)                            </description><description>Yes - minimum number of digits                        </description><description>no                                                                                                       </description><description>Value of <see cref="P:Tools.NumericsT.Angle.TotalDegrees"/> / 24, decimal part truncated (<see cref="T:System.Int32"/>)                                                                                                            </description></item>
 <item>      <term>Y        </term><description>Total days                              </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (as required if not present)                                           </description><description>Value of <see cref="P:Tools.NumericsT.Angle.TotalDegrees"/> / 24 (<see cref="T:System.Double"/>)                                                                                                                                     </description></item>
 <item>      <term>Z        </term><description><see cref="M:Tools.NumericsT.Angle.ToGradians"/>                </description><description>Yes - minimum number of digits left from decimal point</description><description>Number - number of decimal places (max <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits"/> if not present)</description><description>                                                                                                                                                                                                    </description></item>
 </list>
 <para>Specifiers that produces symbols:</para>
 <list type="table">
 <listheader><term>Specifier</term><description>Meaning</description></listheader>
 <item><term>a, φ</term><description>Short latitude (north/south) specifier (e.g. N; <see cref="P:Tools.GlobalizationT.AngleFormatInfo.LatitudeNorthShortSymbol"/> or <see cref="P:Tools.GlobalizationT.AngleFormatInfo.LatitudeSouthShortSymbol"/>)</description></item>
 <item><term>A, Φ</term><description>Long latitude (north/south) specifier (e.g. North; <see cref="P:Tools.GlobalizationT.AngleFormatInfo.LatitudeNorthLongSymbol"/> or <see cref="P:Tools.GlobalizationT.AngleFormatInfo.LatitudeSouthLongSymbol"/>)</description></item>
 <item><term>o, λ</term><description>Short longitude (west/east) specifier (e.g. E; <see cref="P:Tools.GlobalizationT.AngleFormatInfo.LongitudeEastShortSymbol"/> or <see cref="P:Tools.GlobalizationT.AngleFormatInfo.LongitudeWestShortSymbol"/>)</description></item>
 <item><term>O, Λ</term><description>Long longitude (west/east) specifier (e.g. East; <see cref="P:Tools.GlobalizationT.AngleFormatInfo.LongitudeEastLongSymbol"/> or <see cref="P:Tools.GlobalizationT.AngleFormatInfo.LongitudeWestLongSymbol"/>)</description></item>
 <item><term>-</term><description>Optional sign. In case of negative value emits minus sing (e.g. -; <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign"/>). In case of positive or zero value emits nothing. The sign is generated based on current (possibly normalized through the N specifier) angle value. With exception when it immediatelly precedes or follows (whitespace allowed) L or l specifier. In such case it's based on slope value.</description></item>
 <item><term>+</term><description>Compulsory sign. In case of negative value emits minus sign (e.g. -; <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign"/>), in case of positive or zero value emits plus sign (e.g. +; <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign"/>). The sign is generated based on current (possibly normalized through the N specifier) angle value. With exception when it immediatelly precedes or follows (whitespace allowed) L or l specifier. In such case it's based on slope value.</description></item>
 <item><term>.</term><description>Decimal point (e.g. .; <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator"/>)</description></item>
 <item><term>,</term><description>Thousand separator - in normal context emits thousand separator (e.g. ,; <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator"/>). If used immediatelly after specifier that supports value; between repeateed letters of specifier that produces value; or between numbers in parameters of specifier that produces value and supports parameter indicates that thousands (group) separators will be used in renderd number (if required). I.e. all following examples specifie to use thousands specifier for total degrees: D,; D,D; D,D,D; D,DD; DD,D; D,0; D,5; D5,; D0,3; D,1,0,.</description></item>
 <item><term>°</term><description>Degree sign (e.g. °; <see cref="P:Tools.GlobalizationT.AngleFormatInfo.DegreeSign"/>)</description></item>
 <item><term>', ′</term><description>Minute sign (e.g. ′; <see cref="P:Tools.GlobalizationT.AngleFormatInfo.MinuteSign"/>)</description></item>
 <item><term>", ″</term><description>Second sign (e.g. ″; <see cref="P:Tools.GlobalizationT.AngleFormatInfo.SecondSign"/>)</description></item>
 <item><term>\</term><description>Escape - any character that immediatelly follows \ is passed to output without being processed.<note>Be carefull in C#, C++/CLI and other languages that use backslash (\) as their escape charatcer. You have to include \\ in format string (or in C# use verbatim strings - i.e. @"").</note></description></item>
 <item><term>%</term><description>Produces culture-specific percent symbol (%). <note>When % is used as very first character of formatting string it is ignored. To include culture-specific percent sing as first output character use %%.</note></description></item>
 <item><term>‰</term><description>Produces culture-specific permile symbol (‰).</description></item>
 </list>
 <para>Specifiers that affect output:</para>
 <para>These specifiers do not produce any output but affect how output that follows tham is processed</para>
 <list type="table">
 <listheader><term>Specifier</term><description>Meaning</description></listheader>
 <item><term>c</term><description>Turn compatibility rendering on. Causes that all °, ' (′) and " (″) placeholders following this specifier will use compatibility rendering instead of typographicaly correct rendering. I.e. <see cref="P:Tools.GlobalizationT.AngleFormatInfo.CompatibilityDegreeSign"/>, <see cref="P:Tools.GlobalizationT.AngleFormatInfo.CompatibilityMinuteSign"/> and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.CompatibilitySecondSign"/> will be used instead of <see cref="P:Tools.GlobalizationT.AngleFormatInfo.DegreeSign"/>, <see cref="P:Tools.GlobalizationT.AngleFormatInfo.MinuteSign"/> resp. <see cref="P:Tools.GlobalizationT.AngleFormatInfo.SecondSign"/>.<note>In many cultures including invariant <see cref="P:Tools.GlobalizationT.AngleFormatInfo.DegreeSign"/> and <see cref="P:Tools.GlobalizationT.AngleFormatInfo.CompatibilityDegreeSign"/> are same).</note>Compatibility rendering cannot be turned off once turned on /in same format string). This specififer (if used) is usually placed at begining of format string.</description></item>
 <item><term>N</term><description>Causes value of angle to be normalized. Can be followed by a number - parameter for <see cref="M:Tools.NumericsT.Angle.Normalize"/>. If parameter is not specified 360 is used. Negative values for parameter are supported. If used more than once in single format string always the original angle is normalized (i.e. not the normalized one). This specifier (if used) is usually placed at the begining of format string. Examples: N; N360; N-45<note>N- alone is not valid normalization specifier and instead means: Normalize to 360, emit optional minus sign.</note></description></item>
 <item><term>%</term><description>Only at beginnign of format string. Causes format string that would otherwise be treated as standard format string to be treated as custom format string. The % charatcer itself is ignored. To render culture-specific perecent sign as first charatcer of your string use %%. To render literal percent character as first character of your sttring use \%. <note>If percent is used anywhere else but as first charatcer it is processed as a specifier that produces culture-specific percent symbol.</note></description></item>
 <item><term>|</term><description>Pattern breaker. Produces no output. Use when it is necessary to breake a pattern that would otherwise be merged. E.g. tro write <see cref="P:Tools.NumericsT.Angle.TotalDegrees"/> twice immediatellly folllowed use D|D (because DD would produce <see cref="P:Tools.NumericsT.Angle.TotalDegrees"/> value with two places left from decimal point). Also use this character to force minus sign to belong to next pattern. l-D generates minus sign depending on if slope is positive or negative (same as l-|D). l|-D generates minus sign depending on if angle is positive or negative. Use \| to produce pipe character (|).</description></item>
 </list>
 <para>Special specifiers:</para>
 <list type="table">
 <listheader><term>Specifier</term><description>Meaning</description><description>Syntax</description><description>Description</description></listheader>
 <item><term>[]</term><description>Optional part</description><description>[any valid format string]</description><description>Anything neclodes in brackets ([]) is processed as normal format string and it is evaluated if any expression in brackets is non-zero. If it is content of bracketed group is included in result. If value in brackets is zero the group is thrown away and nothing from that group is included in results.<note>If a specifier c or N is included in brackers it is not scoped to inside of brackets. I.e. it still has effect after closing ].</note></description></item>
 <item>
 <term>()</term>
 <description>Custom formatting of a property</description>
 <description>([SF]PropertyName,custom format)</description>
 <description>
 In case you want to format one of predefined properties (not necessarily only properties of the <see cref="T:Tools.NumericsT.Angle"/> class - few more values are available) you can do it in this way.
 Each custom property is included in braces (()). There are two parts in the braces - property name and custom format separated by comma (,).
 Property name can be a string consisting of ASCII letters, digits and underscores (_). It can be followed by whitespaces that are ignored.
 Property name is generally case-insensitive with exception of optional SF prefix. If the case-sensitive SF prefix is included at the begining of property name formatting string is passed to <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/> and it is expected to contain placeholder {0} to be replaced with formatted property value. Otherwise formatting string is passed to <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> (all properties return <see cref="T:System.IFormattable"/>).
 Formatting string is a raw formatting string that will be passed to <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> or <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/> for property value. It only cannot include closing brace ()). If you want to include closing brace escape it \). Any other character preceded with \ (including \ itself) is passed to formatting string and (first) backslash itself is sttripped.
 In terms of regular expressions custom property specifier can be described as <c><![CDATA[\((?<SF>SF)(?<Name>[A-Za-z0-9_]*)\s*,(?<Format>([^)]|(\\\)))*)\)]]></c>.
 <note><see cref="M:Tools.NumericsT.Angle.ToString"/> internally does not use given regular expression. It uses it's own processing based on final state automaton.</note>
 <note>Not all syntactically valid property names are valid property names. Only a few properties are supported.</note>
 <note>There is a whitespace allowed between property name and comma (,) delimiting property name and format. However there is no whitespace allowed after the comma. All character after the comma (including whitespace charatcer) become part of formatting string.</note>
 <para>Supported properties are:</para>
 <list type="table">
 <listheader><term>Property</term><description>Type</description><description>Description</description></listheader>
 <item><term>Days</term><description><see cref="T:System.Int32"/></description><description>Whole part of <see cref="P:Tools.NumericsT.Angle.TotalDegrees"/> / 24</description></item>
 <item><term>Degrees</term><description><see cref="T:System.Int32"/></description><description><see cref="P:Tools.NumericsT.Angle.Degrees"/></description></item>
 <item><term>Gradians</term><description><see cref="T:System.Double"/></description><description><see cref="M:Tools.NumericsT.Angle.ToGradians"/></description></item>
 <item><term>Hours</term><description><see cref="T:System.Int32"/></description><description><see cref="P:Tools.NumericsT.Angle.Degrees"/> excluding days</description></item>
 <item><term>Minutes</term><description><see cref="T:System.Int32"/></description><description><see cref="P:Tools.NumericsT.Angle.Minutes"/></description></item>
 <item><term>PiRadians</term><description><see cref="T:System.Double"/></description><description><see cref="M:Tools.NumericsT.Angle.ToRadians"/> / <see cref="F:Tools.NumericsT.Angle.π"/></description></item>
 <item><term>Radians</term><description><see cref="T:System.Double"/></description><description><see cref="M:Tools.NumericsT.Angle.ToRadians"/></description></item>
 <item><term>RestHours</term><description><see cref="T:System.Decimal"/></description><description><see cref="P:Tools.NumericsT.Angle.TotalDegrees"/> excluding days</description></item>
 <item><term>RestMinutes</term><description><see cref="T:System.Decimal"/></description><description><see cref="P:Tools.NumericsT.Angle.TotalMinutes"/> excluding degrees</description></item>
 <item><term>RestSeconds</term><description><see cref="T:System.Decimal"/></description><description><see cref="P:Tools.NumericsT.Angle.TotalSeconds"/> excluding minutes and degrees. Same as <c>Seconds</c>.</description></item>
 <item><term>Rotations</term><description><see cref="T:System.Double"/></description><description><see cref="P:Tools.NumericsT.Angle.Rotations"/></description></item>
 <item><term>Seconds</term><description><see cref="T:System.Decimal"/></description><description><see cref="P:Tools.NumericsT.Angle.Seconds"/></description></item>
 <item><term>Slope, Slope100</term><description><see cref="T:System.Double"/></description><see cref="M:Tools.NumericsT.Angle.ToSlope"/> (in percent)</item>
 <item><term>Slope1</term><description><see cref="T:System.Double"/></description><see cref="M:Tools.NumericsT.Angle.ToSlope"/> * 100 (as number)</item>
 <item><term>Slope1000</term><description><see cref="T:System.Double"/></description><see cref="M:Tools.NumericsT.Angle.ToSlope"/> * 10 (in permile)</item>
 <item><term>Time</term><description><see cref="T:System.TimeSpan"/></description><description>Value as <see cref="T:System.TimeSpan"/></description></item>
 <item><term>TimeFormattable</term><description><see cref="T:Tools.TimeSpanFormattable"/></description><description>Value as <see cref="T:Tools.TimeSpanFormattable"/></description></item>
 <item><term>TotalDays</term><description><see cref="T:System.Double"/></description><description><see cref="P:Tools.NumericsT.Angle.TotalDegrees"/> / 24</description></item>
 <item><term>TotalDegrees, TotalHours</term><description><see cref="T:System.Decimal"/></description><description><see cref="P:Tools.NumericsT.Angle.TotalDegrees"/></description></item>
 <item><term>TotalMinutes</term><description><see cref="T:System.Double"/></description><description><see cref="P:Tools.NumericsT.Angle.TotalMinutes"/></description></item>
 <item><term>TotalSeconds</term><description><see cref="T:System.Double"/></description><description><see cref="P:Tools.NumericsT.Angle.TotalSeconds"/></description></item>
 </list>
 <note>All properties are obtained from <see cref="T:Tools.NumericsT.Angle"/> instance that could be affected by previous normalization by the N specifier.</note>
 </description>
 </item>
 </list>
 <para>In case you require custom format specifier that is one character long, precede it with % character. % character is ignored if it is first character of custom format specifier. In other position "%" is passed to resulting string. Note: % itself alone is not valid custom format specifier, use \%.</para>
 </remarks>
</member>
<member name="M:Tools.NumericsT.Angle.AppendCustom(System.String,Tools.NumericsT.Angle.MeaningfulStringbuilder,System.String,System.IFormatProvider,Tools.NumericsT.Angle)">
 <summary>Appends custom-formatted custom value to a builder and sets builder meaningfullnes</summary>
 <param name="name">Name of property to use (case insensitive (with exception of SF prefix)). If name starts with "SF" (case-sensitive) <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/> is used (value is passed there as first and only parameter; the SF prefix is then ignored when detecting property name), otherwise <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used. See <see cref="M:Tools.NumericsT.Angle.ToString"/> for list of supported property names.</param>
 <param name="builder">A builder to use</param>
 <param name="format">Format for <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> or <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object)"/></param>
 <param name="formatProvider">Format provider to use</param>
 <param name="normalizedValue">Value to obtain property values from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="formatProvider"/> is nothing</exception>
 <exception cref="T:System.FormatException"><paramref name="name"/> is not known -or- <paramref name="format"/> is invalid</exception>
</member>
<member name="F:Tools.NumericsT.Angle.oneToNine">
 <summary>A regular expression to detect if string contains non-zero numeral</summary>
</member>
<member name="M:Tools.NumericsT.Angle.AppendValueF(System.Double,System.Int32,System.Int32,Tools.NumericsT.Angle.MeaningfulStringbuilder,System.IFormatProvider)">
 <summary>Appends formated decimal-only value to given <see cref="T:Tools.NumericsT.Angle.MeaningfulStringbuilder"/></summary>
 <param name="value">Value to append</param>
 <param name="maxDecPlaces">Maximal decimal places of formated value</param>
 <param name="minDecPlaces">Minimal decimal places of formated value</param>
 <param name="builder">Builder to append value to and set meaningfulity of</param>
 <param name="formatProvider">Format provider to use to format value</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> or <paramref name="formatProvider"/> is null.</exception>
 <remarks>Value is appended without leading decimal separator</remarks>
</member>
<member name="M:Tools.NumericsT.Angle.AppendValue(System.IFormattable,System.Nullable{System.Int32},System.Nullable{System.Int32},Tools.NumericsT.Angle.MeaningfulStringbuilder,System.Boolean,System.IFormatProvider)">
 <summary>Appends formatted value to given <see cref="T:Tools.NumericsT.Angle.MeaningfulStringbuilder"/></summary>
 <param name="value">Value to be appened. Must be either <see cref="T:System.Int32"/> or <see cref="T:System.Double"/>.</param>
 <param name="leftPlaces">Compulsory places left from decimal point. If negative made absolute. Null treated as 1.</param>
 <param name="rightPlaces">Compulsory right places from decimal point. If negative made absolute and means max decimal places. Null treated as max 128 optional places (-128).</param>
 <param name="builder">A builder to append value to and indicate if it is meaningful</param>
 <param name="useThousandSeparator">True to use throusand separator for formatted <paramref name="value"/>.</param>
 <param name="formatProvider">Format provider for formatting</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/>, <paramref name="builder"/> or <paramref name="formatProvider"/> is null</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither <see cref="T:System.Int32"/> nor <see cref="T:System.Double"/>.</exception>
</member>
<member name="T:Tools.NumericsT.Angle.FState">
 <summary>Staes of FSA used in <see cref="M:System.Enum.ToString"/> to parse custom format string</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.Start">
 <summary>First characters</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.Normal">
 <summary>In normal test after 1st character</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.SpecifierDouble">
 <summary>In specifier which produces <see cref="T:System.Double"/> value</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.SpecifierInt">
 <summary>In specifier which produces <see cref="T:System.Int32"/> value</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.SpecifierF">
 <summary>In sub-second specifier (f)</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.SpecifierFN">
 <summary>Number after sub-second specifier (f)</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.Slash">
 <summary>Backslash (\) in <see cref="F:Tools.NumericsT.Angle.FState.Normal"/> or <see cref="F:Tools.NumericsT.Angle.FState.Start"/> state</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.Normalize1">
 <summary>First charatcer of parameter of normalization specifier (N)</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.NormalizeMinus">
 <summary>Minust after normalization specifier (N-)</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.Normalize">
 <summary>In normalization specifier (N) after first char of value of parameter</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.SpecifierDoubleN">
 <summary>Number after a specifier which produces double number</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.Custom1">
 <summary>First charatcer in ()</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.Custom">
 <summary>Name of property in ()</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.CustomWH">
 <summary>Whitespace after name of property in ()</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.CustomFormat">
 <summary>Custom format in () after ,</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.CustomFormatSlash">
 <summary>Backslash in custom format (in () after ,)</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.Minus">
 <summary>- in normal state</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.Plus">
 <summary>+ in normal state</summary>
</member>
<member name="F:Tools.NumericsT.Angle.FState.SpecifierNWhite">
 <summary>Whitespace after completed specifier</summary>
</member>
<member name="T:Tools.NumericsT.Angle.MeaningfulStringbuilder">
 <summary>Wraps <see cref="T:System.Text.StringBuilder"/> and adds a <see cref="P:Tools.NumericsT.Angle.MeaningfulStringbuilder.Meaningful">Meaningful</see> property</summary>
</member>
<member name="P:Tools.NumericsT.Angle.MeaningfulStringbuilder.Builder">
 <summary>Gets internal <see cref="T:System.Text.StringBuilder"/></summary>
</member>
<member name="M:Tools.NumericsT.Angle.MeaningfulStringbuilder.Append(System.Char)">
 <summary>Appends a character to internal <see cref="T:System.Text.StringBuilder"/></summary>
 <param name="ch">A character to append</param>
</member>
<member name="M:Tools.NumericsT.Angle.MeaningfulStringbuilder.Append(System.String)">
 <summary>Appends a string to internal <see cref="T:System.Text.StringBuilder"/></summary>
 <param name="str">String to append</param>
</member>
<member name="P:Tools.NumericsT.Angle.MeaningfulStringbuilder.Length">
 <summary>Gets lenght of internal <see cref="T:System.Text.StringBuilder"/></summary>
</member>
<member name="M:Tools.NumericsT.Angle.MeaningfulStringbuilder.ToString">
 <summary>Returns a string that represents the current object.</summary>
 <returns>Characters accumulated in internal <see cref="T:System.Text.StringBuilder"/></returns>
</member>
<member name="T:Tools.NumericsT.AngleComparer">
 <summary>Implements <see cref="T:System.Collections.Generic.IComparer`1"/> and <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:Tools.NumericsT.Angle"/></summary>
 <remarks>Instances of this class cannot be created. Use the two provided comparers: <see cref="P:Tools.NumericsT.AngleComparer.Normalizing"/> and <see cref="P:Tools.NumericsT.AngleComparer.NonNormalizing"/>.</remarks>
 <seelaso cref="T:Tools.NumericsT.Angle"/>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.AngleComparer.#ctor(System.Boolean)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.NumericsT.AngleComparer"/> class indicating if it does angle normalization or not</summary>
 <param name="normalizes">True to indicate that normalization is performed, false otherwise.</param>
</member>
<member name="P:Tools.NumericsT.AngleComparer.Normalizes">
 <summary>Gets value indicating if this comparer does angle normalization before comparison or not.</summary>
</member>
<member name="M:Tools.NumericsT.AngleComparer.Equals(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Determines whether the specified objects are equal.</summary>
 <param name="x">The first <see cref="T:Tools.NumericsT.Angle"/> to compare.</param>
 <param name="y">The second <see cref="T:Tools.NumericsT.Angle"/> to compare.</param>
 <returns>true if the specified objects are equal; otherwise, false.</returns>
</member>
<member name="M:Tools.NumericsT.AngleComparer.GetHashCode(Tools.NumericsT.Angle)">
 <summary>Returns a hash code for the specified object.</summary>
 <param name="obj">The <see cref="T:Tools.NumericsT.Angle"/> for which a hash code is to be returned.</param>
 <returns>A hash code for the specified object.</returns>
</member>
<member name="M:Tools.NumericsT.AngleComparer.Compare(Tools.NumericsT.Angle,Tools.NumericsT.Angle)">
 <summary>Performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</summary>
 <param name="x">The first <see cref="T:Tools.NumericsT.Angle"/> to compare.</param>
 <param name="y">The second <see cref="T:Tools.NumericsT.Angle"/> to compare.</param>
 <returns>A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.Value Meaning Less than zero <paramref name="x" /> is less than <paramref name="y" />.Zero <paramref name="x" /> equals <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than <paramref name="y" />.</returns>
</member>
<member name="P:Tools.NumericsT.AngleComparer.Normalizing">
 <summary>Gets a normalizing <see cref="T:Tools.NumericsT.AngleComparer"/></summary>
 <returns>A comparer that does 360°-normalization of angle values before comparing them</returns>
</member>
<member name="P:Tools.NumericsT.AngleComparer.NonNormalizing">
 <summary>Gets a non-normalizing comparer</summary>
 <returns>A comparer that does not normalization and compares <see cref="P:Tools.NumericsT.Angle.TotalDegrees"/> directly.</returns>
</member>
<member name="T:Tools.NumericsT.ConversionsT">
 <summary>Provides static methods for numeric conversions</summary>
 <version version="1.5.4">This module is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.ConversionsT.Dec2Xxx(System.Numerics.BigInteger,System.Int32,System.Char[])">
 <summary>Converts numeric value to any base</summary>
 <param name="value">Value to be converted</param>
 <param name="toBase">Target base for conversion</param>
 <param name="targetAlphabet">Array of characters to be used to render number in base <paramref name="toBase"/>. When null default is used. Default alphabet is uppercase. (0th character is for 0, 1ts for 1, 2nd for 3 etc.)</param>
 <returns>A string representing number <paramref name="value"/> in base <paramref name="toBase"/></returns>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is negative -or- <paramref name="targetAlphabet"/> is null and <paramref name="toBase"/> is greater than 36.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="toBase"/> is less than or equal to zero</exception>
 <exception cref="T:System.ArgumentException"><paramref name="targetAlphabet"/> is not null and length of <paramref name="targetAlphabet"/> differs form <paramref name="toBase"/>.</exception>
 <remarks>
 This method does not enforce <paramref name="targetAlphabet"/> to contain only distinct cahacters. However in cvase there are duplicate characters in <paramref name="targetAlphabet"/> return value can is not unique per <paramref name="value"/>.
 <para>Base 1 is supported. 0 is converted to an empty string. Non-zero is converted to string containing <paramref name="value"/>-times repeated character <paramref name="targetAlphabet"/>[0] ('1' if <paramref name="targetAlphabet"/> is null).</para>
 </remarks>
</member>
<member name="M:Tools.NumericsT.ConversionsT.Xxx2Dec(System.String,System.Int32,System.Char[],System.Collections.Generic.IEqualityComparer{System.Char})">
 <summary>Converts a number represneted as string in any base to numeric value</summary>
 <param name="value">String representing number in base <paramref name="fromBase"/></param>
 <param name="fromBase">Base <paramref name="value"/> represents number in</param>
 <param name="sourceAlphabet">An array of characters that defines numerals used in <paramref name="value"/>. Default alphabet is used if this parameter is null. (0th character represents numeral for 0, 1ts for 1, 2nd for 2, 3rd for 3 etc.)</param>
 <param name="comparer">Used to compare characters from <paramref name="value"/> and <paramref name="sourceAlphabet"/>. If null <see cref="P:Tools.CharComparer.InvariantCultureIgnoreCase"/> is used. <note>Default alphabet used when <paramref name="sourceAlphabet"/> is null is uppercase.</note></param>
 <returns>A numeric value representing number <paramref name="value"/> converted form base <paramref name="fromBase"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="value"/> is an empty string and <paramref name="fromBase"/> is not 1. -or-
 <paramref name="sourceAlphabet"/> is not null and length of <paramref name="sourceAlphabet"/> differs from <paramref name="fromBase"/>. -or-
 <paramref name="sourceAlphabet"/> contains duplicate character (as indicated by <paramref name="comparer"/>).
 </exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fromBase"/> is less than or equal to zero.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="sourceAlphabet"/> is null and <paramref name="fromBase"/> is greater than 36.</exception>
 <exception cref="T:System.FormatException"><paramref name="value"/> contains character that is not present in <paramref name="sourceAlphabet"/> (or default aplahabet when <paramref name="sourceAlphabet"/> is null). Equality is tested by <paramref name="comparer"/>.</exception>
 <remarks>Base 1 is supported. Value 0 is represented as empty string. Other value s are representsed as string containing only character <paramref name="sourceAlphabet"/>[0] ('1' if <paramref name="sourceAlphabet"/> isnull) repeated. The lenght of the string is value of the number.</remarks>
</member>
<member name="F:Tools.NumericsT.ConversionsT.alphabetLo">
 <summary>Default alphabet for lowercase bases</summary>
</member>
<member name="F:Tools.NumericsT.ConversionsT.alphabetUp">
 <summary>Default alphabet for uppercase bases</summary>
</member>
<member name="M:Tools.NumericsT.ConversionsT.GetAlphabet(System.Int32,System.Boolean)">
 <summary>Gets default alphabet for bases for 0 to 36</summary>
 <param name="base">Base to get default alphabet for</param>
 <param name="lowerCase">True to get lowercase alphabet, false to get uppercase alphabet</param>
 <returns>Array of characters representing numbers for requested base</returns>
 <remarks>
 Alphabets are constructed as follows
 <list type="table">
 <listheader><term>Base</term><description>Alphabet</description></listheader>
 <item><term>1</term><description>Only one charatcer - '1'</description></item>
 <item><term>2 ÷ 10</term><description>Array contains numerals 0 ÷ <paramref name="base"/> - 1</description></item>
 <item><term>11 ÷ 36</term><description>Array contains numerals 0 ÷ 9 followed by uppercase or lowercase (depends on <paramref name="lowerCase"/>) letters for numerals 10 and higher.</description></item>
 <item><term>>= 37</term><description>Bases higher than 36 are not supported by default. You must pass your own array to <see cref="M:Tools.NumericsT.ConversionsT.Dec2Xxx(System.Numerics.BigInteger,System.Int32,System.Char[])"/> or <see cref="M:Tools.NumericsT.ConversionsT.Xxx2Dec(System.String,System.Int32,System.Char[],System.Collections.Generic.IEqualityComparer{System.Char})"/> method. This is becase base 36 uses all western numerals 0÷9 and all basic latin letters A÷Z (resp. a÷z) and I'm not aware of any standartized set of characters to use for such bases.</description></item>
 </list>
 </remarks>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="base"/> is zero or lower</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="base"/> is greater than 36</exception>
</member>
<member name="M:Tools.NumericsT.ConversionsT.Xxx2Xxx(System.String,System.Int32,System.Int32,System.Char[],System.Char[],System.Collections.Generic.IEqualityComparer{System.Char})">
 <summary>Converts a number form one base to another</summary>
 <param name="value">String that represents number in base <paramref name="fromBase"/></param>
 <param name="fromBase">Base <paramref name="value"/> represents number in. The base to convert number from.</param>
 <param name="toBase">Base to convert <paramref name="value"/> to</param>
 <param name="sourceAlphabet">Array that defines characters used for numerals in <paramref name="fromBase"/>. Default is used if null.</param>
 <param name="targetAlphabet">Array tha defines characters used for numerals in <paramref name="toBase"/>. Default is used if null.</param>
 <param name="comparer">Used to compare numerals form <paramref name="value"/> to numerals in <paramref name="sourceAlphabet"/>. If null <see cref="P:Tools.CharComparer.InvariantCultureIgnoreCase"/> is used.<note>If <paramref name="sourceAlphabet"/> is null default alphabet is used which is uppercase.</note></param>
 <returns>String that represents <paramref name="value"/> in base <paramref name="toBase"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fromBase"/> or <paramref name="toBase"/> is less than or equal to zero.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="sourceAlphabet"/> is null and <paramref name="fromBase"/> is greater than 36 -or- <paramref name="targetAlphabet"/> is null and <paramref name="toBase"/> is greater than 36</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="value"/> is an empty string and <paramref name="fromBase"/> is not 1. -or-
 <paramref name="sourceAlphabet"/> is not null and <paramref name="sourceAlphabet"/> contains duplicate character (as compared by <paramref name="comparer"/>). -or-
 <paramref name="sourceAlphabet"/> is not null and length of <paramref name="sourceAlphabet"/> differs form <paramref name="fromBase"/>. -or-
 <paramref name="targetAlphabet"/> is not null and lenght of <paramref name="targetAlphabet"/> differs from <paramref name="toBase"/>.
 </exception>
 <exception cref="T:System.FormatException"><paramref name="value"/> contain character that is not contained in <paramref name="sourceAlphabet"/> (or default alphabet if <paramref name="sourceAlphabet"/> is null) as compared by <paramref name="comparer"/>.</exception>
 <remarks>
 <para>This method is combination of <see cref="M:Tools.NumericsT.ConversionsT.Dec2Xxx(System.Numerics.BigInteger,System.Int32,System.Char[])"/> and <see cref="M:Tools.NumericsT.ConversionsT.Xxx2Dec(System.String,System.Int32,System.Char[],System.Collections.Generic.IEqualityComparer{System.Char})"/>. It calls like <c>Dec2Xxx(Xxx2Dec())</c>.</para>
 <para>Unique values in <paramref name="targetAlphabet"/> are not enforced. Hovewer in case <paramref name="targetAlphabet"/> contains duplicate character the meaning of return value can be ambigious.</para>
 <para>Base 1 is supported. Zero is represented asn ampty string. Non-zero value are represented as string that contain the same character repeated. Value is determined as length of the string. Character used for base 1 is <paramref name="sourceAlphabet"/>[0] (if <paramref name="fromBase"/> is 1) and <paramref name="targetAlphabet"/>[0] (if <paramref name="toBase"/> is 1). If either <paramref name="sourceAlphabet"/> or <paramref name="targetAlphabet"/> is null character '1' is used.</para>
 </remarks>
</member>
<member name="M:Tools.NumericsT.ConversionsT.Dec2Bin(System.Numerics.BigInteger)">
 <summary>Converts a number to its binary representation</summary>
 <param name="value">A number to be converted</param>
 <returns>Binary representation of <paramref name="value"/></returns>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is negative</exception>
</member>
<member name="M:Tools.NumericsT.ConversionsT.Bin2Dec(System.String)">
 <summary>Gets numeric value from binary representation of a number</summary>
 <param name="value">Binary representation of number</param>
 <returns>Numeric value got by parsing <paramref name="value"/> as binary number</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is an empty string</exception>
 <exception cref="T:System.FormatException"><paramref name="value"/> contains characters other than '0' and '1'</exception>
</member>
<member name="M:Tools.NumericsT.ConversionsT.Oct2Bin(System.Numerics.BigInteger)">
 <summary>Converts a number to its octal representation</summary>
 <param name="value">A number to be converted</param>
 <returns>Octal representation of <paramref name="value"/></returns>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is negative</exception>
</member>
<member name="M:Tools.NumericsT.ConversionsT.Bin2Oct(System.String)">
 <summary>Gets numeric value from octal representation of a number</summary>
 <param name="value">Octal representation of number</param>
 <returns>Numeric value got by parsing <paramref name="value"/> as octal number</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is an empty string</exception>
 <exception cref="T:System.FormatException"><paramref name="value"/> contains characters other than '0', '1', '2', '3', '4', '5', '6' and '7'</exception>
</member>
<member name="M:Tools.NumericsT.ConversionsT.Dec2Hex(System.Numerics.BigInteger,System.Boolean)">
 <summary>Converts a number to its hexadecimal representation</summary>
 <param name="value">A number to be converted</param>
 <param name="lowerCase">True to use lowercase letters a-f, false to use upperfase letters A-F</param>
 <returns>Hexadecimal representation of <paramref name="value"/></returns>
 <exception cref="T:System.NotSupportedException"><paramref name="value"/> is negative</exception>
</member>
<member name="M:Tools.NumericsT.ConversionsT.Hex2Dec(System.String)">
 <summary>Gets numeric value form hexadecimal representation of a number</summary>
 <param name="value">Hexadecimal representation of number</param>
 <returns>Numeric value got by parsing <paramref name="value"/> as hexadecimal number</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is an empty string</exception>
 <exception cref="T:System.FormatException"><paramref name="value"/> contains characters other than hexanumerals 0-9, a-f, A-F</exception>
 <remarks>This method is case-insensitive.</remarks>
</member>
<member name="T:Tools.NumericsT.SRational">
 <summary>Represents a signed rational number with numerator and denominator</summary>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2" stage="Alpha">Added <see cref="M:Tools.NumericsT.SRational.Parse(System.String)"/>, <see cref="M:Tools.NumericsT.SRational.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Tools.NumericsT.SRational@)"/> and <see cref="T:System.IFormattable"/> implementation.</version>
 <version stage="Alpha" version="1.5.2"><see cref="T:System.ComponentModel.TypeConverterAttribute"/> added.</version>
 <version version="1.5.2"><see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/> added</version>
 <version version="1.5.2">Structure updated to use <see cref="T:System.Int32"/> instead of <see cref="T:System.Int16"/></version>
 <version version="1.5.3">Structure renamed from <c>Tools.MetadataT.ExifT.SRational</c> to <see cref="T:Tools.NumericsT.SRational"/>.</version>
 <version version="1.5.3">Added <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"/> (<see cref="F:System.Runtime.InteropServices.LayoutKind.Sequential"/>)</version>
 <version version="1.5.4" stage="RC">More cast operators added</version>
</member>
<member name="M:Tools.NumericsT.SRational.#ctor(System.Int32,System.Int32)">
 <summary>CTor</summary>
 <param name="Numerator">Numerator</param>
 <param name="Denominator">Denominator</param>
 <version version="1.5.4">Parameters names changed to camelCase</version>
</member>
<member name="P:Tools.NumericsT.SRational.Numerator">
 <summary>Numerator (1 in 1/2)</summary>
</member>
<member name="P:Tools.NumericsT.SRational.Denominator">
 <summary>Denominator (2 in 1/2)</summary>
</member>
<member name="M:Tools.NumericsT.SRational.Simplify">
 <summary>Simplyfies <see cref="T:Tools.NumericsT.SRational"/> to contain smallest possible <see cref="P:Tools.NumericsT.SRational.Numerator"/> and <see cref="P:Tools.NumericsT.SRational.Denominator"/></summary>
 <version version="1.5.4">Function renamed from <c>Simplyfy</c> to <c>Simplify</c></version>
</member>
<member name="M:Tools.NumericsT.SRational.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <version version="1.5.4">Function made private and renamed from <c>Clone1</c> to <c>ICloneable_Clone</c></version>
</member>
<member name="M:Tools.NumericsT.SRational.Swap">
 <summary>Swaps values <see cref="P:Tools.NumericsT.SRational.Numerator"/> and <see cref="P:Tools.NumericsT.SRational.Denominator"/></summary>
</member>
<member name="M:Tools.NumericsT.SRational.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Addition(Tools.NumericsT.SRational,Tools.NumericsT.SRational)">
 <summary>Adds two <see cref="T:Tools.NumericsT.SRational"/>s</summary>
 <param name="a">First number to add</param>
 <param name="b">Second number to add</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_UnaryNegation(Tools.NumericsT.SRational)">
 <summary>Creates negative value of given <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Value to negativize</param>
 <returns>- <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Subtraction(Tools.NumericsT.SRational,Tools.NumericsT.SRational)">
 <summary>Substracts two <see cref="T:Tools.NumericsT.SRational"/>s</summary>
 <param name="a">Number to substract from</param>
 <param name="b">Number to be substracted</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Multiply(Tools.NumericsT.SRational,Tools.NumericsT.SRational)">
 <summary>Multiplyes two <see cref="T:Tools.NumericsT.SRational"/>s</summary>
 <param name="a">First number to multiply</param>
 <param name="b">Second number to multiply</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Multiply(Tools.NumericsT.SRational,System.UInt32)">
 <summary>Multiplies <see cref="T:Tools.NumericsT.SRational"/> with <see cref="T:System.UInt32"/></summary>
 <param name="a">An <see cref="T:Tools.NumericsT.SRational"/> value to be multiplied</param>
 <param name="b">an <see cref="T:System.UInt32"/> to multiply <paramref name="a"/> by</param>
 <returns><paramref name="a"/> with <see cref="P:Tools.NumericsT.SRational.Numerator"/> multiplied by <paramref name="b"/>. <see cref="P:Tools.NumericsT.SRational.Denominator"/> is unchanged. Result is not simplified.</returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Multiply(Tools.NumericsT.SRational,System.Int32)">
 <summary>Multiplies <see cref="T:Tools.NumericsT.SRational"/> with <see cref="T:System.Int32"/></summary>
 <param name="a">An <see cref="T:Tools.NumericsT.SRational"/> value to be multiplied</param>
 <param name="b">an <see cref="T:System.Int32"/> to multiply <paramref name="a"/> by</param>
 <returns><paramref name="a"/> with <see cref="P:Tools.NumericsT.SRational.Numerator"/> multiplied by <paramref name="b"/>. <see cref="P:Tools.NumericsT.SRational.Denominator"/> is unchanged. Result is not simplified.</returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Multiply(Tools.NumericsT.SRational,System.UInt16)">
 <summary>Multiplies <see cref="T:Tools.NumericsT.SRational"/> with <see cref="T:System.UInt16"/></summary>
 <param name="a">An <see cref="T:Tools.NumericsT.SRational"/> value to be multiplied</param>
 <param name="b">an <see cref="T:System.UInt16"/> to multiply <paramref name="a"/> by</param>
 <returns><paramref name="a"/> with <see cref="P:Tools.NumericsT.SRational.Numerator"/> multiplied by <paramref name="b"/>. <see cref="P:Tools.NumericsT.SRational.Denominator"/> is unchanged. Result is not simplified.</returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Multiply(Tools.NumericsT.SRational,System.Int16)">
 <summary>Multiplies <see cref="T:Tools.NumericsT.SRational"/> with <see cref="T:System.Int16"/></summary>
 <param name="a">An <see cref="T:Tools.NumericsT.SRational"/> value to be multiplied</param>
 <param name="b">an <see cref="T:System.Int16"/> to multiply <paramref name="a"/> by</param>
 <returns><paramref name="a"/> with <see cref="P:Tools.NumericsT.SRational.Numerator"/> multiplied by <paramref name="b"/>. <see cref="P:Tools.NumericsT.SRational.Denominator"/> is unchanged. Result is not simplified.</returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Division(Tools.NumericsT.SRational,Tools.NumericsT.SRational)">
 <summary>Divides one number by other</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide by</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Explicit(System.Double)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.Double"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">Fix: Do not throw <see cref="T:System.ArgumentOutOfRangeException"/> when <paramref name="a"/> is negative.</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Explicit(System.Single)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.Single"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Explicit(System.Decimal)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.Double"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">Fix: Do not throw <see cref="T:System.ArgumentOutOfRangeException"/> when <paramref name="a"/> is negative.</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(System.Byte)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.Byte"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(System.UInt16)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.UInt16"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(System.UInt32)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.UInt32"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Explicit(System.UInt64)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.UInt64"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(System.SByte)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.SByte"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(System.Int16)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.Int16"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(System.Int32)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.Int32"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Explicit(System.Int64)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.Int64"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(Tools.NumericsT.SRational)~System.Double">
 <summary>Converts <see cref="T:Tools.NumericsT.URational"/> to <see cref="T:System.Double"/></summary>
 <param name="a"><see cref="T:Tools.NumericsT.URational"/> to be converted</param>
 <returns><see cref="T:System.Double"/> representation of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(Tools.NumericsT.SRational)~System.Single">
 <summary>Converts <see cref="T:Tools.NumericsT.URational"/> to <see cref="T:System.Double"/></summary>
 <param name="a"><see cref="T:Tools.NumericsT.URational"/> to be converted</param>
 <returns><see cref="T:System.Double"/> representation of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(Tools.NumericsT.SRational)~System.Decimal">
 <summary>Converts <see cref="T:Tools.NumericsT.URational"/> to <see cref="T:System.Double"/></summary>
 <param name="a"><see cref="T:Tools.NumericsT.URational"/> to be converted</param>
 <returns><see cref="T:System.Double"/> representation of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Implicit(Tools.NumericsT.SRational)~System.String">
 <summary>Converts <see cref="T:Tools.NumericsT.URational"/> to <see cref="T:System.String"/></summary>
 <param name="a"><see cref="T:Tools.NumericsT.URational"/> to be converted</param>
 <returns><see cref="T:System.String"/> representation of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.SRational.op_Explicit(System.String)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:System.String"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a"><see cref="T:System.String"/> to converts</param>
 <returns><see cref="T:Tools.NumericsT.SRational"/> value represented by <paramref name="a"/></returns>
 <remarks><paramref name="a"/> must be in format of <see cref="T:System.Double"/> or <see cref="T:System.Int32"/>/<see cref="T:System.Int32"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="str"/> is not numeric value, or 2 numeric values separated by /.</exception>
 <exception cref="T:System.OverflowException"><paramref name="str"/> represents value lower than <see cref="T:System.Double"/> or greater than <see cref="T:System.Double"/> (for single-part number) -or- <paramref name="str"/> represents value lower than <see cref="T:System.Int32"/> or greater than <see cref="T:System.Int32"/> (for double-part number)</exception>
 <seelaso cref="M:Tools.NumericsT.SRational.Parse(System.String)"/>
 <version stage="Alpha" version="1.5.2">Operator behavior changed. Now it uses <see cref="M:Tools.NumericsT.SRational.Parse(System.String)"/>.</version>
</member>
<member name="M:Tools.NumericsT.SRational.TryParseInternal(System.String,Tools.NumericsT.SRational@,System.IFormatProvider,System.Globalization.NumberStyles)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.SRational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="str"/></param>
 <param name="Provider">An <see cref="T:System.IFormatProvider"/> objectthat supplies culture-specific formatting information about <paramref name="str"/>.</param>
 <param name="Value"> When this method returns, contains the <see cref="T:Tools.NumericsT.SRational"/> value equivalent to the number contained in <paramref name="str"/>, if the conversion succeeded.</param>
 <returns>Null when conversion succeds, <see cref="T:Tools.TypeMismatchException"/> when parsing of /-delimited string failed; <see cref="T:System.InvalidCastException"/> when parsing of /-less string failed; other <see cref="T:System.Exception"/> when parsing failed from other reason.</returns>
 <remarks>Returned <see cref="T:System.InvalidCastException"/> and <see cref="T:Tools.TypeMismatchException"/> should never be thrown.</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or- <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values. -or- <paramref name="style"/> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Parameter <c>Provider</c> renamed to <c>provider</c>, <c>Value</c> to <c>value</c></version>
 <version version="1.5.4">Added <see cref="T:System.Runtime.InteropServices.OutAttribute"/> for <paramref name="value"/> parameter</version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.SRational.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Tools.NumericsT.SRational@)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.SRational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="str"/></param>
 <param name="Provider">An <see cref="T:System.IFormatProvider"/> objectthat supplies culture-specific formatting information about <paramref name="str"/>.</param>
 <param name="Value"> When this method returns, contains the <see cref="T:Tools.NumericsT.SRational"/> value equivalent to the number contained in <paramref name="str"/>, if the conversion succeeded.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or- <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values. -or- <paramref name="style"/> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Parameter <c>Value</c> renamed to <c>value</c></version>
 <version version="1.5.4">Parameter <paramref name="style"/> changed from parameter passed by reference to parameter passed by value.</version>
 <version version="1.5.4">Fix: Parameter <paramref name="value"/> was not passed by reference.</version>
 <version version="1.5.4">Added <see cref="T:System.Runtime.InteropServices.OutAttribute"/> to parameter <paramref name="value"/>.</version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.SRational.TryParse(System.String,Tools.NumericsT.SRational@)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.SRational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <param name="Value"> When this method returns, contains the <see cref="T:Tools.NumericsT.SRational"/> value equivalent to the number contained in <paramref name="str"/>, if the conversion succeeded.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Parameter <c>Value</c> renamed to <c>value</c></version>
 <version version="1.5.4">Added <see cref="T:System.Runtime.InteropServices.OutAttribute"/> to parameter <paramref name="value"/>.</version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.SRational.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.SRational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="str"/></param>
 <param name="Provider">An <see cref="T:System.IFormatProvider"/> objectthat supplies culture-specific formatting information about <paramref name="str"/>.</param>
 <returns>A <see cref="T:Tools.NumericsT.SRational"/> number equivalent to the numeric value or symbol specified in <paramref name="str"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or- <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values. -or- <paramref name="style"/> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="str"/> is not numeric value, or 2 numeric values separated by /.</exception>
 <exception cref="T:System.OverflowException"><paramref name="str"/> represents value lower than <see cref="T:System.Double"/> or greater than <see cref="T:System.Double"/> (for single-part number) -or- <paramref name="str"/> represents value lower than <see cref="T:System.Int32"/> or greater than <see cref="T:System.Int32"/> (for double-part number)</exception>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Parameter <c>Provider</c> renamed to <c>provider</c></version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.SRational.Parse(System.String)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.SRational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <returns>A <see cref="T:Tools.NumericsT.SRational"/> number equivalent to the numeric value or symbol specified in <paramref name="str"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="str"/> is not numeric value, or 2 numeric values separated by /.</exception>
 <exception cref="T:System.OverflowException"><paramref name="str"/> represents value lower than <see cref="T:System.Double"/> or greater than <see cref="T:System.Double"/> (for single-part number) -or- <paramref name="str"/> represents value lower than <see cref="T:System.Int32"/> or greater than <see cref="T:System.Int32"/> (for double-part number)</exception>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.SRational.ToString">
 <summary>String representation</summary>
</member>
<member name="M:Tools.NumericsT.SRational.ToString(System.String)">
 <summary>Formats the value of the current instance using the specified format and current culture.</summary>
 <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
 <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
 <remarks>
 Use sigle format string to format value as <see cref="T:System.Double"/>. Use two /-separated format strings to format this value as two <see cref="T:System.UInt32"/> values separated by /.
 Format(s) passed to <see cref="T:System.Double"/> or <see cref="T:System.UInt32"/> can be empty, predefined (one letter) or custom.
 If two formats are specified, delimited by /, only first slash encountered is treatead as delimitter. Other slashes are passed to <see cref="T:System.UInt32"/>. In order to escape firts slahs, precede it with \.
 If <paramref name="format"/> is null or <see cref="T:System.String"/> G/G is used. 
 </remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.NumericsT.SRational.ToString(System.String,System.IFormatProvider)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
 <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
 <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
 <remarks>
 Use sigle format string to format value as <see cref="T:System.Double"/>. Use two /-separated format strings to format this value as two <see cref="T:System.Int32"/> values separated by /.
 Format(s) passed to <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> can be empty, predefined (one letter) or custom.
 If two formats are specified, delimited by / or :, only first slash or colon encountered is treatead as delimitter. Other slashes or colons are passed to <see cref="T:System.UInt32"/>. In order to escape firts slash or colon, precede it with \.
 If <paramref name="format"/> is null or <see cref="T:System.String"/> G/G is used. 
 </remarks>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Added support for colon (:) delimitter</version>
</member>
<member name="T:Tools.NumericsT.SRational.SRationalConverter">
 <summary>Implemenst <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:System.String"/> and <see cref="T:Tools.NumericsT.SRational"/></summary>
 <version stage="Alpha" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.NumericsT.SRational.SRationalConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from type <see cref="T:System.String"/> to type <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <see cref="T:Tools.NumericsT.SRational"/></param>
 <returns>Value of type <see cref="T:Tools.NumericsT.SRational"/> initialized by <paramref name="value"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="str"/> is not numeric value, or 2 numeric values separated by /.</exception>
 <exception cref="T:System.OverflowException"><paramref name="str"/> represents value lower than <see cref="T:System.Double"/> or greater than <see cref="T:System.Double"/> (for single-part number) -or- <paramref name="str"/> represents value lower than <see cref="T:System.Int32"/> or greater than <see cref="T:System.Int32"/> (for double-part number)</exception>
</member>
<member name="M:Tools.NumericsT.SRational.SRationalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.NumericsT.SRational)">
 <summary>Performs conversion from type <see cref="T:Tools.NumericsT.SRational"/> to type <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <see cref="T:System.String"/></returns>
</member>
<member name="T:Tools.NumericsT.URational">
 <summary>Represents an unsigned rational number with numerator and denominator</summary>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.2">Added <see cref="M:Tools.NumericsT.URational.Parse(System.String)"/>, <see cref="M:Tools.NumericsT.URational.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Tools.NumericsT.URational@)"/> and <see cref="T:System.IFormattable"/> implementation.</version>
 <version version="1.5.2"><see cref="T:System.ComponentModel.TypeConverterAttribute"/> added.</version>
 <version version="1.5.2"><see cref="T:System.Diagnostics.DebuggerDisplayAttribute"/> added</version>
 <version version="1.5.2">Structure updated to use <see cref="T:System.UInt32"/> instead of <see cref="T:System.UInt16"/>.</version>
 <version version="1.5.3">Structure renamed from <c>Tools.MetadataT.ExifT.URational</c> to <see cref="T:Tools.NumericsT.URational"/>.</version>
 <version version="1.5.3">Added <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute"/> (<see cref="F:System.Runtime.InteropServices.LayoutKind.Sequential"/>)</version>
 <version version="1.5.4" stage="RC">More cast operators added</version>
</member>
<member name="M:Tools.NumericsT.URational.#ctor(System.UInt32,System.UInt32)">
 <summary>CTor</summary>
 <param name="Numerator">Numerator</param>
 <param name="Denominator">Denominator</param>
 <version version="1.5.4">Parameters names changed to camelCase</version>
</member>
<member name="P:Tools.NumericsT.URational.Numerator">
 <summary>Numerator (1 in 1/2)</summary>
</member>
<member name="P:Tools.NumericsT.URational.Denominator">
 <summary>Denominator (2 in 1/2)</summary>
</member>
<member name="M:Tools.NumericsT.URational.Simplify">
 <summary>Simplyfies <see cref="T:Tools.NumericsT.URational"/> to contain smallest possible <see cref="P:Tools.NumericsT.URational.Numerator"/> and <see cref="P:Tools.NumericsT.URational.Denominator"/></summary>
 <version version="1.5.4">Function renamed from <c>Simplyfy</c> to <c>Simplify</c></version>
</member>
<member name="M:Tools.NumericsT.URational.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <version version="1.5.4">Function made private and renamed from <c>Clone1</c> to <c>ICloneable_Clone</c></version>
</member>
<member name="M:Tools.NumericsT.URational.Swap">
 <summary>Swaps values <see cref="P:Tools.NumericsT.URational.Numerator"/> and <see cref="P:Tools.NumericsT.URational.Denominator"/></summary>
</member>
<member name="M:Tools.NumericsT.URational.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Addition(Tools.NumericsT.URational,Tools.NumericsT.URational)">
 <summary>Adds two <see cref="T:Tools.NumericsT.URational"/>s</summary>
 <param name="a">First number to add</param>
 <param name="b">Second number to add</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Subtraction(Tools.NumericsT.URational,Tools.NumericsT.URational)">
 <summary>Substracts two <see cref="T:Tools.NumericsT.URational"/>s</summary>
 <param name="a">Number to substract from</param>
 <param name="b">Number to be substracted</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
</member>
<member name="M:Tools.NumericsT.URational.op_UnaryNegation(Tools.NumericsT.URational)">
 <summary>Negative value</summary>
 <param name="a"><see cref="T:Tools.NumericsT.URational"/> to get negative value of</param>
 <returns>Negative value of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Multiply(Tools.NumericsT.URational,Tools.NumericsT.URational)">
 <summary>Multiplyes two <see cref="T:Tools.NumericsT.URational"/>s</summary>
 <param name="a">First number to multiply</param>
 <param name="b">Second number to multiply</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Multiply(Tools.NumericsT.URational,System.UInt32)">
 <summary>Multiplies <see cref="T:Tools.NumericsT.URational"/> with <see cref="T:System.UInt32"/></summary>
 <param name="a">An <see cref="T:Tools.NumericsT.URational"/> value to be multiplied</param>
 <param name="b">an <see cref="T:System.UInt32"/> to multiply <paramref name="a"/> by</param>
 <returns><paramref name="a"/> with <see cref="P:Tools.NumericsT.URational.Numerator"/> multiplied by <paramref name="b"/>. <see cref="P:Tools.NumericsT.URational.Denominator"/> is unchanged. Result is not simplified.</returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Multiply(Tools.NumericsT.URational,System.Int32)">
 <summary>Multiplies <see cref="T:Tools.NumericsT.URational"/> with <see cref="T:System.Int32"/></summary>
 <param name="a">An <see cref="T:Tools.NumericsT.URational"/> value to be multiplied</param>
 <param name="b">an <see cref="T:System.Int32"/> to multiply <paramref name="a"/> by</param>
 <returns><paramref name="a"/> with <see cref="P:Tools.NumericsT.URational.Numerator"/> multiplied by <paramref name="b"/>. <see cref="P:Tools.NumericsT.URational.Denominator"/> is unchanged. Result is not simplified.</returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Multiply(Tools.NumericsT.URational,System.UInt16)">
 <summary>Multiplies <see cref="T:Tools.NumericsT.URational"/> with <see cref="T:System.UInt16"/></summary>
 <param name="a">An <see cref="T:Tools.NumericsT.URational"/> value to be multiplied</param>
 <param name="b">an <see cref="T:System.UInt16"/> to multiply <paramref name="a"/> by</param>
 <returns><paramref name="a"/> with <see cref="P:Tools.NumericsT.URational.Numerator"/> multiplied by <paramref name="b"/>. <see cref="P:Tools.NumericsT.URational.Denominator"/> is unchanged. Result is not simplified.</returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Multiply(Tools.NumericsT.URational,System.Int16)">
 <summary>Multiplies <see cref="T:Tools.NumericsT.URational"/> with <see cref="T:System.Int16"/></summary>
 <param name="a">An <see cref="T:Tools.NumericsT.URational"/> value to be multiplied</param>
 <param name="b">an <see cref="T:System.Int16"/> to multiply <paramref name="a"/> by</param>
 <returns><paramref name="a"/> with <see cref="P:Tools.NumericsT.URational.Numerator"/> multiplied by <paramref name="b"/>. <see cref="P:Tools.NumericsT.URational.Denominator"/> is unchanged. Result is not simplified.</returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Division(Tools.NumericsT.URational,Tools.NumericsT.URational)">
 <summary>Divides one number by other</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide by</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Implicit(Tools.NumericsT.URational)~Tools.NumericsT.SRational">
 <summary>Converts <see cref="T:Tools.NumericsT.URational"/> to <see cref="T:Tools.NumericsT.SRational"/></summary>
 <param name="a">Number to be converted</param>
 <returns>Signed representation of unsigned rational</returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(Tools.NumericsT.SRational)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:Tools.NumericsT.SRational"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns>Unsigned representation of signed rational</returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(System.Double)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.Double"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="a"/> is negative</exception>
 <version version="1.5.4"><see cref="T:System.ArgumentOutOfRangeException"/> added</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(System.Single)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.Single"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(System.Decimal)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.Decimal"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="a"/> is negative</exception>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Implicit(System.Byte)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.Byte"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Implicit(System.UInt16)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.UInt16"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Implicit(System.UInt32)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.UInt32"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(System.UInt64)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.UInt64"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(System.SByte)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.SByte"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(System.Int16)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.Int16"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(System.Int32)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.Int32"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(System.Int64)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.Int64"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a">Number to be converted</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Implicit(Tools.NumericsT.URational)~System.Double">
 <summary>Converts <see cref="T:Tools.NumericsT.URational"/> to <see cref="T:System.Double"/></summary>
 <param name="a"><see cref="T:Tools.NumericsT.URational"/> to be converted</param>
 <returns><see cref="T:System.Double"/> representation of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Implicit(Tools.NumericsT.URational)~System.Single">
 <summary>Converts <see cref="T:Tools.NumericsT.URational"/> to <see cref="T:System.Double"/></summary>
 <param name="a"><see cref="T:Tools.NumericsT.URational"/> to be converted</param>
 <returns><see cref="T:System.Double"/> representation of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Implicit(Tools.NumericsT.URational)~System.Decimal">
 <summary>Converts <see cref="T:Tools.NumericsT.URational"/> to <see cref="T:System.Decimal"/></summary>
 <param name="a"><see cref="T:Tools.NumericsT.URational"/> to be converted</param>
 <returns><see cref="T:System.Decimal"/> representation of <paramref name="a"/></returns>
 <version version="1.5.4">This operator is new in version 1.5.4</version>
</member>
<member name="M:Tools.NumericsT.URational.op_Implicit(Tools.NumericsT.URational)~System.String">
 <summary>Converts <see cref="T:Tools.NumericsT.URational"/> to <see cref="T:System.String"/></summary>
 <param name="a"><see cref="T:Tools.NumericsT.URational"/> to be converted</param>
 <returns><see cref="T:System.String"/> representation of <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.URational.op_Explicit(System.String)~Tools.NumericsT.URational">
 <summary>Converts <see cref="T:System.String"/> to <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="a"><see cref="T:System.String"/> to converts</param>
 <returns><see cref="T:Tools.NumericsT.URational"/> value represented by <paramref name="a"/></returns>
 <remarks><paramref name="a"/> must be in format of <see cref="T:System.Double"/> or <see cref="T:System.UInt32"/>/<see cref="T:System.UInt32"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="str"/> is not numeric value, or 2 numeric values separated by /.</exception>
 <exception cref="T:System.OverflowException"><paramref name="str"/> represents value lower than <see cref="T:System.Double"/> or greater than <see cref="T:System.Double"/> (for single-part number) -or- <paramref name="str"/> represents value lower than <see cref="T:System.UInt32"/> or greater than <see cref="T:System.UInt32"/> (for double-part number)</exception>
 <seelaso cref="M:Tools.NumericsT.URational.Parse(System.String)"/>
 <version stage="Alpha" version="1.5.2">Operator behavior changed. Now it uses <see cref="M:Tools.NumericsT.URational.Parse(System.String)"/>.</version>
</member>
<member name="M:Tools.NumericsT.URational.TryParseInternal(System.String,Tools.NumericsT.URational@,System.IFormatProvider,System.Globalization.NumberStyles)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.URational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="str"/></param>
 <param name="Provider">An <see cref="T:System.IFormatProvider"/> objectthat supplies culture-specific formatting information about <paramref name="str"/>.</param>
 <param name="Value"> When this method returns, contains the <see cref="T:Tools.NumericsT.URational"/> value equivalent to the number contained in <paramref name="str"/>, if the conversion succeeded.</param>
 <returns>Null when conversion succeds, <see cref="T:Tools.TypeMismatchException"/> when parsing of /-delimited string failed; <see cref="T:System.InvalidCastException"/> when parsing of /-less string failed; other <see cref="T:System.Exception"/> when parsing failed from other reason.</returns>
 <remarks>Returned <see cref="T:System.InvalidCastException"/> and <see cref="T:Tools.TypeMismatchException"/> should never be thrown.</remarks>
 <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or- <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values. -or- <paramref name="style"/> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Parameter <c>Provider</c> renamed to <c>provider</c>, <c>Value</c> to <c>value</c></version>
 <version version="1.5.4">Added <see cref="T:System.Runtime.InteropServices.OutAttribute"/> for <paramref name="value"/> parameter</version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.URational.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Tools.NumericsT.URational@)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.URational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="str"/></param>
 <param name="Provider">An <see cref="T:System.IFormatProvider"/> objectthat supplies culture-specific formatting information about <paramref name="str"/>.</param>
 <param name="Value"> When this method returns, contains the <see cref="T:Tools.NumericsT.URational"/> value equivalent to the number contained in <paramref name="str"/>, if the conversion succeeded.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or- <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values. -or- <paramref name="style"/> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Parameter <c>Value</c> renamed to <c>value</c></version>
 <version version="1.5.4">Parameter <paramref name="style"/> changed from parameter passed by reference to parameter passed by value.</version>
 <version version="1.5.4">Fix: Parameter <paramref name="value"/> was not passed by reference.</version>
 <version version="1.5.4">Added <see cref="T:System.Runtime.InteropServices.OutAttribute"/> to parameter <paramref name="value"/>.</version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.URational.TryParse(System.String,Tools.NumericsT.URational@)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.URational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <param name="Value"> When this method returns, contains the <see cref="T:Tools.NumericsT.URational"/> value equivalent to the number contained in <paramref name="str"/>, if the conversion succeeded.</param>
 <returns>true if s was converted successfully; otherwise, false.</returns>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Parameter <c>Value</c> renamed to <c>value</c></version>
 <version version="1.5.4">Added <see cref="T:System.Runtime.InteropServices.OutAttribute"/> to parameter <paramref name="value"/>.</version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.URational.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.URational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <param name="style">A bitwise combination of <see cref="T:System.Globalization.NumberStyles"/> values that indicates the permitted format of <paramref name="str"/></param>
 <param name="Provider">An <see cref="T:System.IFormatProvider"/> objectthat supplies culture-specific formatting information about <paramref name="str"/>.</param>
 <returns>A <see cref="T:Tools.NumericsT.URational"/> number equivalent to the numeric value or symbol specified in <paramref name="str"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="style"/> is not a <see cref="T:System.Globalization.NumberStyles"/> value. -or- <paramref name="style"/> is not a combination of <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> and <see cref="F:System.Globalization.NumberStyles.HexNumber"/> values. -or- <paramref name="style"/> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier"/> value.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="str"/> is not numeric value, or 2 numeric values separated by /.</exception>
 <exception cref="T:System.OverflowException"><paramref name="str"/> represents value lower than <see cref="T:System.Double"/> or greater than <see cref="T:System.Double"/> (for single-part number) -or- <paramref name="str"/> represents value lower than <see cref="T:System.UInt32"/> or greater than <see cref="T:System.UInt32"/> (for double-part number)</exception>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Parameter <c>Provider</c> renamed to <c>provider</c></version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.URational.Parse(System.String)">
 <summary>Converts the string representation of a number in a specified style and culture-specific format to its <see cref="T:Tools.NumericsT.URational"/> equivalent. A return value indicates whether the conversion succeeded or failed.</summary>
 <param name="str">A string containing a number to convert.</param>
 <returns>A <see cref="T:Tools.NumericsT.URational"/> number equivalent to the numeric value or symbol specified in <paramref name="str"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="str"/> is not numeric value, or 2 numeric values separated by /.</exception>
 <exception cref="T:System.OverflowException"><paramref name="str"/> represents value lower than <see cref="T:System.Double"/> or greater than <see cref="T:System.Double"/> (for single-part number) -or- <paramref name="str"/> represents value lower than <see cref="T:System.UInt32"/> or greater than <see cref="T:System.UInt32"/> (for double-part number)</exception>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Added support for colon (:) delimiter</version>
</member>
<member name="M:Tools.NumericsT.URational.ToString">
 <summary>String representation</summary>
</member>
<member name="M:Tools.NumericsT.URational.ToString(System.String)">
 <summary>Formats the value of the current instance using the specified format and current culture.</summary>
 <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
 <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
 <remarks>
 Use sigle format string to format value as <see cref="T:System.Double"/>. Use two /-separated format strings to format this value as two <see cref="T:System.UInt32"/> values separated by /.
 Format(s) passed to <see cref="T:System.Double"/> or <see cref="T:System.UInt32"/> can be empty, predefined (one letter) or custom.
 If two formats are specified, delimited by /, only first slash encountered is treatead as delimitter. Other slashes are passed to <see cref="T:System.UInt32"/>. In order to escape firts slahs, precede it with \.
 If <paramref name="format"/> is null or <see cref="T:System.String"/> G/G is used. 
 </remarks>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.NumericsT.URational.ToString(System.String,System.IFormatProvider)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
 <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
 <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
 <remarks>
 Use sigle format string to format value as <see cref="T:System.Double"/>. Use two /-separated format strings to format this value as two <see cref="T:System.UInt32"/> values separated by /.
 Format(s) passed to <see cref="T:System.Double"/> or <see cref="T:System.UInt32"/> can be empty, predefined (one letter) or custom.
 If two formats are specified, delimited by / or :, only first slash or colon encountered is treatead as delimitter. Other slashes or colons are passed to <see cref="T:System.UInt32"/>. In order to escape firts slash or colon, precede it with \.
 If <paramref name="format"/> is null or <see cref="T:System.String"/> G/G is used. 
 </remarks>
 <version stage="Alpha" version="1.5.2">Method introduced</version>
 <version version="1.5.4">Added support for colon (:) delimitter</version>
</member>
<member name="T:Tools.NumericsT.URational.URationalConverter">
 <summary>Implemenst <see cref="T:System.ComponentModel.TypeConverter"/> for <see cref="T:System.String"/> and <see cref="T:Tools.NumericsT.URational"/></summary>
 <version stage="Alpha" version="1.5.2">Class introduced</version>
</member>
<member name="M:Tools.NumericsT.URational.URationalConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from type <see cref="T:System.String"/> to type <see cref="T:Tools.NumericsT.URational"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <see cref="T:Tools.NumericsT.URational"/></param>
 <returns>Value of type <see cref="T:Tools.NumericsT.URational"/> initialized by <paramref name="value"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.FormatException"><paramref name="str"/> is not numeric value, or 2 numeric values separated by /.</exception>
 <exception cref="T:System.OverflowException"><paramref name="str"/> represents value lower than <see cref="T:System.Double"/> or greater than <see cref="T:System.Double"/> (for single-part number) -or- <paramref name="str"/> represents value lower than <see cref="T:System.UInt32"/> or greater than <see cref="T:System.UInt32"/> (for double-part number)</exception>
</member>
<member name="M:Tools.NumericsT.URational.URationalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.NumericsT.URational)">
 <summary>Performs conversion from type <see cref="T:Tools.NumericsT.URational"/> to type <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <see cref="T:System.String"/></returns>
</member>
<member name="T:Tools.NumericsT.LongUnion">
 <summary>8-byte union of integral data types</summary>
 <remarks>You can use this union for bitwise operations</remarks>
 <version stage="Nightly" version="1.5.3">This structure is new in version 1.5.3</version>
</member>
<member name="F:Tools.NumericsT.LongUnion.byte7">
 <summary>Most significant (high order) unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.byte6">
 <summary>2nd-most significant unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.byte5">
 <summary>3rd-most significant unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.byte4">
 <summary>4rd-most significant unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.byte3">
 <summary>4th-least significant unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.byte2">
 <summary>3rd-least significant unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.byte1">
 <summary>2nd-least significant unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.byte0">
 <summary>Least significant (low order) byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.sbyte7">
 <summary>Most significant (high order) signed byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.sbyte6">
 <summary>2nd-most significant signed byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.sbyte5">
 <summary>3rd-most significant signed byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.sbyte4">
 <summary>4rd-most significant signed byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.sbyte3">
 <summary>4th-least significant signed byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.sbyte2">
 <summary>3rd-least significant signed byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.sbyte1">
 <summary>2nd-least significant signed byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.sbyte0">
 <summary>Least significant (low order) byte</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.short3">
 <summary>Most significant (high order) signed word</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.short2">
 <summary>2nd-most significant signed word</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.short1">
 <summary>2nd-least significant signed word</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.short0">
 <summary>Least significatnt (low order) signed word</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.ushort3">
 <summary>Most significant (high order) unsigned word</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.ushort2">
 <summary>2nd-most significant unsigned word</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.ushort1">
 <summary>2nd-least significant unsigned word</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.ushort0">
 <summary>Least significatnt (low order) unsigned word</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.integer1">
 <summary>High order signed dword</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.integer0">
 <summary>Low order signed dword</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.uinteger0">
 <summary>Hight order unsigned dword</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.uinteger1">
 <summary>Low order unsigned dword</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.long">
 <summary>Qword signed value</summary>
</member>
<member name="F:Tools.NumericsT.LongUnion.ulong">
 <summary>Qword unsigned value</summary>
</member>
<member name="M:Tools.NumericsT.LongUnion.#ctor(System.Int64)">
 <summary>Initializes <see cref="T:Tools.NumericsT.LongUnion"/> from 64-bit signed integer</summary>
 <param name="long">A 64-bit signed integer</param>
</member>
<member name="M:Tools.NumericsT.LongUnion.#ctor(System.UInt64)">
 <summary>Initializes <see cref="T:Tools.NumericsT.LongUnion"/> from 64-bit unsigned integer</summary>
 <param name="ulong">A 64-bit unsigned integer</param>
</member>
<member name="M:Tools.NumericsT.LongUnion.#ctor(System.Int32,System.Int32)">
 <summary>Initializes <see cref="T:Tools.NumericsT.LongUnion"/> from 32-bit signed integers</summary>
 <param name="integer0">Low order value</param>
 <param name="integer1">High order value</param>
</member>
<member name="M:Tools.NumericsT.LongUnion.#ctor(System.UInt32,System.UInt32)">
 <summary>Initializes <see cref="T:Tools.NumericsT.LongUnion"/> from 32-bit unsigned integers</summary>
 <param name="uinteger0">Low order value</param>
 <param name="uinteger1">High order value</param>
</member>
<member name="M:Tools.NumericsT.LongUnion.#ctor(System.Int16,System.Int16,System.Int16,System.Int16)">
 <summary>Initializes <see cref="T:Tools.NumericsT.LongUnion"/> from 16-bit signed integers</summary>
 <param name="short0">Low order value</param>
 <param name="short1">2nd low value</param>
 <param name="short2">2nd high value</param>
 <param name="short3">High order value</param>
</member>
<member name="M:Tools.NumericsT.LongUnion.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
 <summary>Initializes <see cref="T:Tools.NumericsT.LongUnion"/> from 16-bit unsigned integers</summary>
 <param name="ushort0">Low order value</param>
 <param name="ushort1">2nd low value</param>
 <param name="ushort2">2nd high value</param>
 <param name="ushort3">Low high value</param>
</member>
<member name="M:Tools.NumericsT.LongUnion.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
 <summary>Initializes <see cref="T:Tools.NumericsT.LongUnion"/> from 8-bit unsigned integers</summary>
 <param name="byte0">Low order byte</param>
 <param name="byte1">2nd byte</param>
 <param name="byte2">3rd byte</param>
 <param name="byte3">4th byte</param>
 <param name="byte4">5th byte</param>
 <param name="byte5">6th byte</param>
 <param name="byte6">7th byte</param>
 <param name="byte7">High order byte</param>
</member>
<member name="M:Tools.NumericsT.LongUnion.#ctor(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
 <summary>Initializes <see cref="T:Tools.NumericsT.LongUnion"/> from 8-bit signed integers</summary>
 <param name="sbyte0">Low order byte</param>
 <param name="sbyte1">2nd byte</param>
 <param name="sbyte2">3rd byte</param>
 <param name="sbyte3">4th byte</param>
 <param name="sbyte4">5th byte</param>
 <param name="sbyte5">6th byte</param>
 <param name="sbyte6">7th byte</param>
 <param name="sbyte7">High order byte</param>
</member>
<member name="M:Tools.NumericsT.LongUnion.op_Implicit(System.Int64)~Tools.NumericsT.LongUnion">
 <summary>Converts <see cref="T:System.Int64"/> to <see cref="T:Tools.NumericsT.LongUnion"/></summary>
 <param name="a">A <see cref="T:System.Int64"/></param>
 <returns><see cref="T:Tools.NumericsT.LongUnion"/> initialized by <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.LongUnion.op_Implicit(System.UInt64)~Tools.NumericsT.LongUnion">
 <summary>Converts <see cref="T:System.UInt64"/> to <see cref="T:Tools.NumericsT.LongUnion"/></summary>
 <param name="a">A <see cref="T:System.UInt64"/></param>
 <returns><see cref="T:Tools.NumericsT.LongUnion"/> initialized by <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.LongUnion.op_Implicit(Tools.NumericsT.LongUnion)~System.UInt64">
 <summary>Converts <see cref="T:Tools.NumericsT.LongUnion"/> to <see cref="T:System.UInt64"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.LongUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.LongUnion.ulong">ulong</see></returns>
</member>
<member name="M:Tools.NumericsT.LongUnion.op_Implicit(Tools.NumericsT.LongUnion)~System.Int64">
 <summary>Converts <see cref="T:Tools.NumericsT.LongUnion"/> to <see cref="T:System.Int64"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.LongUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.LongUnion.long">ulong</see></returns>
</member>
<member name="M:Tools.NumericsT.LongUnion.op_Equality(Tools.NumericsT.LongUnion,Tools.NumericsT.LongUnion)">
 <summary>Compares two instances of <see cref="T:Tools.NumericsT.LongUnion"/> for equality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.LongUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.LongUnion"/></param>
 <returns>True if values represented by <paramref name="a"/> and <paramref name="b"/> are same</returns>
</member>
<member name="M:Tools.NumericsT.LongUnion.op_Inequality(Tools.NumericsT.LongUnion,Tools.NumericsT.LongUnion)">
 <summary>Compares two instances of <see cref="T:Tools.NumericsT.LongUnion"/> for inequality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.LongUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.LongUnion"/></param>
 <returns>True if values represented by <paramref name="a"/> and <paramref name="b"/> differ</returns>
</member>
<member name="M:Tools.NumericsT.LongUnion.ToString">
 <summary>Gets string representation of this instance</summary>
 <returns>String representation of this instance showing signed and unsigned value in decimal and hexadecimal representation</returns>
</member>
<member name="M:Tools.NumericsT.LongUnion.Equals(System.Object)">
 <summary>Indicates whether this instance and a specified object are equal.</summary>
 <returns>True if <paramref name="obj"/> is either <see cref="T:Tools.NumericsT.LongUnion"/>, <see cref="T:System.Int64"/> or <see cref="T:System.UInt64"/> and represents same value as current instance.</returns>
 <param name="obj">Another object to compare to. </param>
</member>
<member name="M:Tools.NumericsT.LongUnion.GetHashCode">
 <summary>Returns the hash code for this instance.</summary>
 <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
</member>
<member name="M:Tools.NumericsT.LongUnion.BitwiseSame(System.UInt64)">
 <summary>Bitwise converts value of type <see cref="T:System.UInt64"/> to <see cref="T:System.Int64"/></summary>
 <param name="unsigned">An <see cref="T:System.Int64"/></param>
 <returns>Signed value with same bitwise representation as <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.LongUnion.BitwiseSame(System.Int64)">
 <summary>Bitwise converts value of type <see cref="T:System.Int64"/> to <see cref="T:System.UInt64"/></summary>
 <param name="signed">A <see cref="T:System.UInt64"/></param>
 <returns>Unsigned value with same bitwise representation as <paramref name="a"/></returns>
</member>
<member name="T:Tools.NumericsT.IntegerUnion">
 <summary>4-byte union of integral data types</summary>
 <remarks>You can use this union for bitwise operations</remarks>
 <version stage="Nightly" version="1.5.3">This structure is new in version 1.5.3</version>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.byte3">
 <summary>Most significant (high order) unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.byte2">
 <summary>2nd-most significant unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.byte1">
 <summary>2nd-least significant unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.byte0">
 <summary>Least significant (low order) unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.sbyte3">
 <summary>Most significant (high order) signed byte</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.sbyte2">
 <summary>2nd-most significant signed byte</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.sbyte1">
 <summary>2nd-least significant signed byte</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.sbyte0">
 <summary>Least significant (low order) signed byte</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.short1">
 <summary>Most significatnt (high order) signed word</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.short0">
 <summary>Least significatnt (low order) signed word</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.ushort1">
 <summary>Most significatnt (high order) unsigned word</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.ushort0">
 <summary>Least significatnt (low order) unsigned word</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.integer">
 <summary>Signed integer value</summary>
</member>
<member name="F:Tools.NumericsT.IntegerUnion.uinteger">
 <summary>Unsigned integer value</summary>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.#ctor(System.Int32)">
 <summary>Initializes <see cref="T:Tools.NumericsT.IntegerUnion"/> from 32-bit signed integer</summary>
 <param name="integer">A 32-bit signed integer</param>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.#ctor(System.UInt64)">
 <summary>Initializes <see cref="T:Tools.NumericsT.IntegerUnion"/> from 32-bit unsigned integer</summary>
 <param name="uinteger">A 32-bit unsigned integer</param>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.#ctor(System.Int16,System.Int16)">
 <summary>Initializes <see cref="T:Tools.NumericsT.IntegerUnion"/> from 16-bit signed integers</summary>
 <param name="short0">Low order value</param>
 <param name="short1">high order value</param>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.#ctor(System.UInt16,System.UInt16)">
 <summary>Initializes <see cref="T:Tools.NumericsT.IntegerUnion"/> from 16-bit unsigned integers</summary>
 <param name="ushort0">Low order value</param>
 <param name="ushort1">high value</param>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
 <summary>Initializes <see cref="T:Tools.NumericsT.IntegerUnion"/> from 8-bit unsigned integers</summary>
 <param name="byte0">Low order byte</param>
 <param name="byte1">2nd byte</param>
 <param name="byte2">3rd byte</param>
 <param name="byte3">High order byte</param>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.#ctor(System.SByte,System.SByte,System.SByte,System.SByte)">
 <summary>Initializes <see cref="T:Tools.NumericsT.IntegerUnion"/> from 8-bit signed integers</summary>
 <param name="sbyte0">Low order byte</param>
 <param name="sbyte1">2nd byte</param>
 <param name="sbyte2">3rd byte</param>
 <param name="sbyte3">High order byte</param>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.op_Implicit(System.Int32)~Tools.NumericsT.IntegerUnion">
 <summary>Converts <see cref="T:System.Int32"/> to <see cref="T:Tools.NumericsT.LongUnion"/></summary>
 <param name="a">A <see cref="T:System.Int32"/></param>
 <returns><see cref="T:Tools.NumericsT.LongUnion"/> initialized by <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.op_Implicit(System.UInt32)~Tools.NumericsT.IntegerUnion">
 <summary>Converts <see cref="T:System.UInt32"/> to <see cref="T:Tools.NumericsT.IntegerUnion"/></summary>
 <param name="a">A <see cref="T:System.UInt32"/></param>
 <returns><see cref="T:Tools.NumericsT.LongUnion"/> initialized by <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.op_Implicit(Tools.NumericsT.IntegerUnion)~System.UInt32">
 <summary>Converts <see cref="T:Tools.NumericsT.IntegerUnion"/> to <see cref="T:System.UInt32"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.IntegerUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.IntegerUnion.uinteger">ulong</see></returns>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.op_Implicit(Tools.NumericsT.IntegerUnion)~System.Int32">
 <summary>Converts <see cref="T:Tools.NumericsT.IntegerUnion"/> to <see cref="T:System.Int32"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.IntegerUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.IntegerUnion.integer">ulong</see></returns>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.op_Equality(Tools.NumericsT.IntegerUnion,Tools.NumericsT.IntegerUnion)">
 <summary>Compares two instances of <see cref="T:Tools.NumericsT.IntegerUnion"/> for equality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.IntegerUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.IntegerUnion"/></param>
 <returns>True if values represented by <paramref name="a"/> and <paramref name="b"/> are same</returns>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.op_Inequality(Tools.NumericsT.IntegerUnion,Tools.NumericsT.IntegerUnion)">
 <summary>Compares two instances of <see cref="T:Tools.NumericsT.IntegerUnion"/> for inequality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.IntegerUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.IntegerUnion"/></param>
 <returns>True if values represented by <paramref name="a"/> and <paramref name="b"/> differ</returns>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.ToString">
 <summary>Gets string representation of this instance</summary>
 <returns>String representation of this instance showing signed and unsigned value in decimal and hexadecimal representation</returns>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.Equals(System.Object)">
 <summary>Indicates whether this instance and a specified object are equal.</summary>
 <returns>True if <paramref name="obj"/> is either <see cref="T:Tools.NumericsT.IntegerUnion"/>, <see cref="T:System.Int32"/> or <see cref="T:System.UInt32"/> and represents same value as current instance.</returns>
 <param name="obj">Another object to compare to. </param>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.GetHashCode">
 <summary>Returns the hash code for this instance.</summary>
 <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.BitwiseSame(System.UInt32)">
 <summary>Bitwise converts value of type <see cref="T:System.UInt32"/> to <see cref="T:System.Int32"/></summary>
 <param name="unsigned">An <see cref="T:System.Int32"/></param>
 <returns>Signed value with same bitwise representation as <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.IntegerUnion.BitwiseSame(System.Int32)">
 <summary>Bitwise converts value of type <see cref="T:System.Int32"/> to <see cref="T:System.UInt32"/></summary>
 <param name="signed">A <see cref="T:System.UInt32"/></param>
 <returns>Unsigned value with same bitwise representation as <paramref name="a"/></returns>
</member>
<member name="T:Tools.NumericsT.ShortUnion">
 <summary>2-byte union of integral data types</summary>
 <remarks>You can use this union for bitwise operations</remarks>
 <version stage="Nightly" version="1.5.3">This structure is new in version 1.5.3</version>
</member>
<member name="F:Tools.NumericsT.ShortUnion.byte1">
 <summary>Most significant (high order) unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.ShortUnion.byte0">
 <summary>Least significant (low order) unsigned byte</summary>
</member>
<member name="F:Tools.NumericsT.ShortUnion.sbyte1">
 <summary>Most significant (high order) signed byte</summary>
</member>
<member name="F:Tools.NumericsT.ShortUnion.sbyte0">
 <summary>Least significant (low order) signed byte</summary>
</member>
<member name="F:Tools.NumericsT.ShortUnion.short">
 <summary>Signed 16-bit value</summary>
</member>
<member name="F:Tools.NumericsT.ShortUnion.ushort">
 <summary>Unsigned 16-bit value</summary>
</member>
<member name="M:Tools.NumericsT.ShortUnion.#ctor(System.Int16)">
 <summary>Initializes <see cref="T:Tools.NumericsT.ShortUnion"/> from 16-bit signed integer</summary>
 <param name="short">A 16-bit signed integer</param>
</member>
<member name="M:Tools.NumericsT.ShortUnion.#ctor(System.UInt16)">
 <summary>Initializes <see cref="T:Tools.NumericsT.ShortUnion"/> from 16-bit unsigned integer</summary>
 <param name="ushort">A 16-bit unsigned integer</param>
</member>
<member name="M:Tools.NumericsT.ShortUnion.#ctor(System.Byte,System.Byte)">
 <summary>Initializes <see cref="T:Tools.NumericsT.ShortUnion"/> from 8-bit unsigned integers</summary>
 <param name="byte0">Low order byte</param>
 <param name="byte1">High order byte</param>
</member>
<member name="M:Tools.NumericsT.ShortUnion.#ctor(System.SByte,System.SByte)">
 <summary>Initializes <see cref="T:Tools.NumericsT.ShortUnion"/> from 8-bit signed integers</summary>
 <param name="sbyte0">Low order byte</param>
 <param name="sbyte1">High order byte</param>
</member>
<member name="M:Tools.NumericsT.ShortUnion.op_Implicit(System.Int16)~Tools.NumericsT.ShortUnion">
 <summary>Converts <see cref="T:System.Int16"/> to <see cref="T:Tools.NumericsT.LongUnion"/></summary>
 <param name="a">A <see cref="T:System.Int16"/></param>
 <returns><see cref="T:Tools.NumericsT.LongUnion"/> initialized by <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.ShortUnion.op_Implicit(System.UInt16)~Tools.NumericsT.ShortUnion">
 <summary>Converts <see cref="T:System.UInt16"/> to <see cref="T:Tools.NumericsT.ShortUnion"/></summary>
 <param name="a">A <see cref="T:System.UInt16"/></param>
 <returns><see cref="T:Tools.NumericsT.LongUnion"/> initialized by <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.ShortUnion.op_Implicit(Tools.NumericsT.ShortUnion)~System.UInt16">
 <summary>Converts <see cref="T:Tools.NumericsT.ShortUnion"/> to <see cref="T:System.UInt16"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.ShortUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.ShortUnion.ushort">ulong</see></returns>
</member>
<member name="M:Tools.NumericsT.ShortUnion.op_Implicit(Tools.NumericsT.ShortUnion)~System.Int16">
 <summary>Converts <see cref="T:Tools.NumericsT.ShortUnion"/> to <see cref="T:System.Int16"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.ShortUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.ShortUnion.short">ulong</see></returns>
</member>
<member name="M:Tools.NumericsT.ShortUnion.op_Equality(Tools.NumericsT.ShortUnion,Tools.NumericsT.ShortUnion)">
 <summary>Compares two instances of <see cref="T:Tools.NumericsT.ShortUnion"/> for equality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.ShortUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.ShortUnion"/></param>
 <returns>True if values represented by <paramref name="a"/> and <paramref name="b"/> are same</returns>
</member>
<member name="M:Tools.NumericsT.ShortUnion.op_Inequality(Tools.NumericsT.ShortUnion,Tools.NumericsT.ShortUnion)">
 <summary>Compares two instances of <see cref="T:Tools.NumericsT.ShortUnion"/> for inequality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.ShortUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.ShortUnion"/></param>
 <returns>True if values represented by <paramref name="a"/> and <paramref name="b"/> differ</returns>
</member>
<member name="M:Tools.NumericsT.ShortUnion.ToString">
 <summary>Gets string representation of this instance</summary>
 <returns>String representation of this instance showing signed and unsigned value in decimal and hexadecimal representation</returns>
</member>
<member name="M:Tools.NumericsT.ShortUnion.Equals(System.Object)">
 <summary>Indicates whether this instance and a specified object are equal.</summary>
 <returns>True if <paramref name="obj"/> is either <see cref="T:Tools.NumericsT.ShortUnion"/>, <see cref="T:System.Int16"/> or <see cref="T:System.UInt16"/> and represents same value as current instance.</returns>
 <param name="obj">Another object to compare to. </param>
</member>
<member name="M:Tools.NumericsT.ShortUnion.GetHashCode">
 <summary>Returns the hash code for this instance.</summary>
 <returns>A 32-bit signed Short that is the hash code for this instance.</returns>
</member>
<member name="M:Tools.NumericsT.ShortUnion.BitwiseSame(System.UInt16)">
 <summary>Bitwise converts value of type <see cref="T:System.UInt16"/> to <see cref="T:System.Int16"/></summary>
 <param name="unsigned">An <see cref="T:System.Int16"/></param>
 <returns>Signed value with same bitwise representation as <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.ShortUnion.BitwiseSame(System.Int16)">
 <summary>Bitwise converts value of type <see cref="T:System.Int16"/> to <see cref="T:System.UInt16"/></summary>
 <param name="signed">A <see cref="T:System.UInt16"/></param>
 <returns>Unsigned value with same bitwise representation as <paramref name="a"/></returns>
</member>
<member name="T:Tools.NumericsT.ByteUnion">
 <summary>1-byte union of integral data types</summary>
 <remarks>You can use this union for bitwise operations</remarks>
 <version stage="Nightly" version="1.5.3">This structure is new in version 1.5.3</version>
</member>
<member name="F:Tools.NumericsT.ByteUnion.byte">
 <summary>Unsigned value</summary>
</member>
<member name="F:Tools.NumericsT.ByteUnion.sbyte">
 <summary>Signed value</summary>
</member>
<member name="M:Tools.NumericsT.ByteUnion.#ctor(System.Byte)">
 <summary>Initializes <see cref="T:Tools.NumericsT.ByteUnion"/> from 8-bit unsigned integer</summary>
 <param name="byte">A 8-bit unsigned integer</param>
</member>
<member name="M:Tools.NumericsT.ByteUnion.#ctor(System.SByte)">
 <summary>Initializes <see cref="T:Tools.NumericsT.ByteUnion"/> from 8-bitsigned integer</summary>
 <param name="sbyte">A 8-bit signed integer</param>
</member>
<member name="M:Tools.NumericsT.ByteUnion.op_Implicit(System.Byte)~Tools.NumericsT.ByteUnion">
 <summary>Converts <see cref="T:System.Byte"/> to <see cref="T:Tools.NumericsT.LongUnion"/></summary>
 <param name="a">A <see cref="T:System.Byte"/></param>
 <returns><see cref="T:Tools.NumericsT.LongUnion"/> initialized by <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.ByteUnion.op_Implicit(System.SByte)~Tools.NumericsT.ByteUnion">
 <summary>Converts <see cref="T:System.SByte"/> to <see cref="T:Tools.NumericsT.ByteUnion"/></summary>
 <param name="a">A <see cref="T:System.SByte"/></param>
 <returns><see cref="T:Tools.NumericsT.LongUnion"/> initialized by <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.ByteUnion.op_Implicit(Tools.NumericsT.ByteUnion)~System.SByte">
 <summary>Converts <see cref="T:Tools.NumericsT.ByteUnion"/> to <see cref="T:System.SByte"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.ByteUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.ByteUnion.sbyte">ulong</see></returns>
</member>
<member name="M:Tools.NumericsT.ByteUnion.op_Implicit(Tools.NumericsT.ByteUnion)~System.Byte">
 <summary>Converts <see cref="T:Tools.NumericsT.ByteUnion"/> to <see cref="T:System.Byte"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.ByteUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.ByteUnion.byte">ulong</see></returns>
</member>
<member name="M:Tools.NumericsT.ByteUnion.op_Equality(Tools.NumericsT.ByteUnion,Tools.NumericsT.ByteUnion)">
 <summary>Compares two instances of <see cref="T:Tools.NumericsT.ByteUnion"/> for equality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.ByteUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.ByteUnion"/></param>
 <returns>True if values represented by <paramref name="a"/> and <paramref name="b"/> are same</returns>
</member>
<member name="M:Tools.NumericsT.ByteUnion.op_Inequality(Tools.NumericsT.ByteUnion,Tools.NumericsT.ByteUnion)">
 <summary>Compares two instances of <see cref="T:Tools.NumericsT.ByteUnion"/> for inequality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.ByteUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.ByteUnion"/></param>
 <returns>True if values represented by <paramref name="a"/> and <paramref name="b"/> differ</returns>
</member>
<member name="M:Tools.NumericsT.ByteUnion.ToString">
 <summary>Gets string representation of this instance</summary>
 <returns>String representation of this instance showing signed and unsigned value in decimal and hexadecimal representation</returns>
</member>
<member name="M:Tools.NumericsT.ByteUnion.Equals(System.Object)">
 <summary>Indicates whether this instance and a specified object are equal.</summary>
 <returns>True if <paramref name="obj"/> is either <see cref="T:Tools.NumericsT.ByteUnion"/>, <see cref="T:System.Byte"/> or <see cref="T:System.SByte"/> and represents same value as current instance.</returns>
 <param name="obj">Another object to compare to. </param>
</member>
<member name="M:Tools.NumericsT.ByteUnion.GetHashCode">
 <summary>Returns the hash code for this instance.</summary>
 <returns>A 32-bit signed Byte that is the hash code for this instance.</returns>
</member>
<member name="M:Tools.NumericsT.ByteUnion.BitwiseSame(System.Byte)">
 <summary>Bitwise converts value of type <see cref="T:System.Byte"/> to <see cref="T:System.SByte"/></summary>
 <param name="unsigned">An <see cref="T:System.SByte"/></param>
 <returns>Signed value with same bitwise representation as <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.ByteUnion.BitwiseSame(System.SByte)">
 <summary>Bitwise converts value of type <see cref="T:System.SByte"/> to <see cref="T:System.Byte"/></summary>
 <param name="signed">A <see cref="T:System.Byte"/></param>
 <returns>Unsigned value with same bitwise representation as <paramref name="a"/></returns>
</member>
<member name="T:Tools.NumericsT.NativeUnion">
 <summary>4- or 8-byte uinion of unsigned and signed native integer</summary>
 <remarks>You can use this union for bitwise operations</remarks>
 <version version="1.5.4">This structure is new in version 1.5.4</version>
</member>
<member name="F:Tools.NumericsT.NativeUnion.signed">
 <summary>Signed native integer value</summary>
</member>
<member name="F:Tools.NumericsT.NativeUnion.unsigned">
 <summary>Unsigned native integer value</summary>
</member>
<member name="M:Tools.NumericsT.NativeUnion.#ctor(System.IntPtr)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.NumericsT.NativeUnion"/> structure from <see cref="T:System.IntPtr"/> value</summary>
 <param name="value">A value to populate this structure with</param>
</member>
<member name="M:Tools.NumericsT.NativeUnion.#ctor(System.UIntPtr)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.NumericsT.NativeUnion"/> structure from <see cref="T:System.IntPtr"/> value</summary>
 <param name="value">A value to populate this structure with</param>
</member>
<member name="M:Tools.NumericsT.NativeUnion.op_Implicit(System.IntPtr)~Tools.NumericsT.NativeUnion">
 <summary>Converts <see cref="T:System.IntPtr"/> to <see  cref="T:Tools.NumericsT.NativeUnion"/></summary>
 <param name="a">A <see cref="T:System.IntPtr"/></param>
 <returns>A <see cref="T:Tools.NumericsT.NativeUnion"/> with <see cref="F:Tools.NumericsT.NativeUnion.signed"/> initialized to <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.NativeUnion.op_Implicit(System.UIntPtr)~Tools.NumericsT.NativeUnion">
 <summary>Converts <see cref="T:System.UIntPtr"/> to <see  cref="T:Tools.NumericsT.NativeUnion"/></summary>
 <param name="a">A <see cref="T:System.UIntPtr"/></param>
 <returns>A <see cref="T:Tools.NumericsT.NativeUnion"/> with <see cref="F:Tools.NumericsT.NativeUnion.unsigned"/> initialized to <paramref name="a"/></returns>
</member>
<member name="M:Tools.NumericsT.NativeUnion.op_Implicit(Tools.NumericsT.NativeUnion)~System.IntPtr">
 <summary>Converts <see cref="T:Tools.NumericsT.NativeUnion"/> to <see cref="T:System.IntPtr"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.NativeUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.NativeUnion.signed">signed</see></returns>
</member>
<member name="M:Tools.NumericsT.NativeUnion.op_Implicit(Tools.NumericsT.NativeUnion)~System.UIntPtr">
 <summary>Converts <see cref="T:Tools.NumericsT.NativeUnion"/> to <see cref="T:System.UIntPtr"/></summary>
 <param name="a">A <see cref="T:Tools.NumericsT.NativeUnion"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.NumericsT.NativeUnion.unsigned">unsigned</see></returns>
</member>
<member name="M:Tools.NumericsT.NativeUnion.op_Equality(Tools.NumericsT.NativeUnion,Tools.NumericsT.NativeUnion)">
 <summary>Compares two <see cref="T:Tools.NumericsT.NativeUnion"/> objects for equality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.NativeUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.NativeUnion"/></param>
 <returns>True if <paramref name="a"/> and <paramref name="b"/> are equal, false if they are not</returns>
</member>
<member name="M:Tools.NumericsT.NativeUnion.op_Inequality(Tools.NumericsT.NativeUnion,Tools.NumericsT.NativeUnion)">
 <summary>Compares two <see cref="T:Tools.NumericsT.NativeUnion"/> objects for inequality</summary>
 <param name="a">A <see cref="T:Tools.NumericsT.NativeUnion"/></param>
 <param name="b">A <see cref="T:Tools.NumericsT.NativeUnion"/></param>
 <returns>False if <paramref name="a"/> and <paramref name="b"/> are equal, true if they are not</returns>
</member>
<member name="M:Tools.NumericsT.NativeUnion.GetHashCode">
 <summary>Returns the hash code for this instance.</summary>
 <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.NumericsT.NativeUnion.Equals(System.Object)">
 <summary>Indicates whether this instance and a specified object are equal.</summary>
 <returns>true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.</returns>
 <param name="obj">Another object to compare to. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.NumericsT.NativeUnion.ToString">
 <summary>Returns the fully qualified type name of this instance.</summary>
 <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.ReflectionT.AttributteValueProvider">
 <summary>Provides direct access to values of certain selected attributtes</summary>
 <version version="1.5.4">This module is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.AttributteValueProvider.IsClsCompliant(System.Reflection.ICustomAttributeProvider)">
 <summary>Gets value indicating if the item is decorated as CLS-compliant</summary>
 <param name="item">Item to tellabout</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null</exception>
 <remarks>
 If the <paramref name="item"/> itself is not decorated with <see cref="T:System.CLSCompliantAttribute"/> <see cref="M:Tools.ReflectionT.ReflectionTools.Parent(System.Reflection.ICustomAttributeProvider)"/> is checked. 
 Default value (if neither the item nor any ancestor is decorated with <see cref="T:System.CLSCompliantAttribute"/> is false.
 </remarks>
 <seelaso cref="T:System.CLSCompliantAttribute"/>
</member>
<member name="M:Tools.ReflectionT.AttributteValueProvider.Trademark(System.Reflection.Assembly)">
 <summary>Gets trademark for an assembly</summary>
 <param name="assembly">An assembly to get trademark of</param>
 <returns>Assembly trademark. Null if it is not defined</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null</exception>
 <seelaso cref="T:System.Reflection.AssemblyTrademarkAttribute"/>
</member>
<member name="M:Tools.ReflectionT.AttributteValueProvider.Company(System.Reflection.Assembly)">
 <summary>Gets company name for an assembly</summary>
 <param name="assembly">An assembly to get company name of</param>
 <returns>Assembly company name. Null if it is not defined</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null</exception>
 <seelaso cref="T:System.Reflection.AssemblyCompanyAttribute"/>
</member>
<member name="M:Tools.ReflectionT.AttributteValueProvider.Copyright(System.Reflection.Assembly)">
 <summary>Gets copyright notice for an assembly</summary>
 <param name="assembly">An assembly to get company copyright of</param>
 <returns>Assembly copyright notice. Null if it is not defined</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null</exception>
 <seelaso cref="T:System.Reflection.AssemblyCopyrightAttribute"/>
</member>
<member name="M:Tools.ReflectionT.AttributteValueProvider.Description(System.Reflection.Assembly)">
 <summary>Gets assembly description</summary>
 <param name="assembly">An assembly to get description of</param>
 <returns>Assembly description. Null if it is not defined</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null</exception>
 <seelaso cref="T:System.Reflection.AssemblyDescriptionAttribute"/>
</member>
<member name="M:Tools.ReflectionT.AttributteValueProvider.InformationalVersion(System.Reflection.Assembly)">
 <summary>Gets informational version for an assembly</summary>
 <param name="assembly">An assembly to get informational version of</param>
 <returns>Assembly informational version. Null if it is not defined</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null</exception>
 <seelaso cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>
</member>
<member name="M:Tools.ReflectionT.AttributteValueProvider.Product(System.Reflection.Assembly)">
 <summary>Gets product name for an assembly</summary>
 <param name="assembly">An assembly to get product name of</param>
 <returns>Assembly product name. Null if it is not defined</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null</exception>
 <seelaso cref="T:System.Reflection.AssemblyProductAttribute"/>
</member>
<member name="M:Tools.ReflectionT.AttributteValueProvider.Title(System.Reflection.Assembly)">
 <summary>Gets title of an assembly</summary>
 <param name="assembly">An assembly to get title of</param>
 <returns>Assembly title. Null if it is not defined</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null</exception>
 <seelaso cref="T:System.Reflection.AssemblyTitleAttribute"/>
</member>
<member name="M:Tools.ReflectionT.AttributteValueProvider.NeutralResourcesLanguage(System.Reflection.Assembly)">
 <summary>Gets language of resources embeded in this neutral assembly</summary>
 <param name="assembly">An assembly to neutral resource language for</param>
 <returns>Language of neutral resources in assembly. Null if it is not defined</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null</exception>
 <seelaso cref="T:System.Resources.NeutralResourcesLanguageAttribute"/>
</member>
<member name="T:Tools.ReflectionT.NamespaceInfo">
 <summary>Represents reflection namespace</summary>
 <remarks>
 This class implements interface <see cref="T:System.Reflection.ICustomAttributeProvider"/>. Though it never returns anny custom attributes for a namespace.
 The interface is implemented because it's only common interface common for all code objects ant thus it's natural that namespace implements it, so instance of this class can be passed wherever any other code item.
 <note>CIL metadata does not support custom attributes on namespaces. In fact namespace is not official CIL instruction. However Microsft implementation allows <c>.custom</c> on <c>.namespace</c> but it is AFAIK ignored.</note>
 </remarks>
 <version version="1.5.2" stage="Nightly">Added implementation of <see cref="T:System.IEquatable`1"/></version>
 <version version="1.5.4">Added implementation of <see cref="T:System.Reflection.ICustomAttributeProvider"/></version>
</member>
<member name="F:Tools.ReflectionT.NamespaceInfo._Module">
 <summary>Contains value of the <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> property</summary>
</member>
<member name="F:Tools.ReflectionT.NamespaceInfo._Name">
 <summary>Contains value of the <see cref="P:Tools.ReflectionT.NamespaceInfo.Name"/> property</summary>
</member>
<member name="P:Tools.ReflectionT.NamespaceInfo.Module">
 <summary>Module the namespace is located in</summary>
</member>
<member name="P:Tools.ReflectionT.NamespaceInfo.Name">
 <summary>Name of namespace. Can be an empty string for global namespace</summary>
</member>
<member name="P:Tools.ReflectionT.NamespaceInfo.ShortName">
 <summary>Short name of namespace - only part after last dot (.).</summary>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.#ctor(System.Reflection.Module,System.String)">
 <summary>CTor</summary>
 <param name="Module">Module the namespace is defined in</param>
 <param name="Name">Name of namespace</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> or <paramref name="Name"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.GetTypes(System.Boolean)">
 <summary>Gets types located within current namespace</summary>
 <param name="Nested">True to get nested types (types declared inside types in current namepace)</param>
 <returns>Array of types defined in this namespace</returns>
 <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.GetMethods">
 <summary>Gets global methods located in current namespace</summary>
 <returns>Array of global methods defined in current namespace (it is in module <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> with name starting with name of this namespace)</returns>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.GetFields">
 <summary>Gets global methods located in current namespace</summary>
 <returns>Array of global methods defined in current namespace (it is in module <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> with name starting with name of this namespace)</returns>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.GetMethods(System.Reflection.BindingFlags)">
 <summary>Gets global methods located in current namespace</summary>
 <returns>Array of global methods defined in current namespace (it is in module <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> with name starting with name of this namespace)</returns>
 <param name="BindingFlags">A bitwise combination of <see cref="T:System.Reflection.BindingFlags"/> values that limit the search.</param>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.GetFields(System.Reflection.BindingFlags)">
 <summary>Gets global methods located in current namespace</summary>
 <returns>Array of global methods defined in current namespace (it is in module <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> with name starting with name of this namespace)</returns>
 <param name="BindingFlags">A bitwise combination of <see cref="T:System.Reflection.BindingFlags"/> values that limit the search.</param>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>True if <paramref name="obj"/> is <see cref="T:Tools.ReflectionT.NamespaceInfo"/> and its <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> equals to <see cref="P:Tools.ReflectionT.NamespaceInfo.Module"/> of current <see cref="T:Tools.ReflectionT.NamespaceInfo"/> and also <see cref="P:Tools.ReflectionT.NamespaceInfo.Name">Names</see> or current <see cref="T:Tools.ReflectionT.NamespaceInfo"/> and <paramref name="obj"/> equals.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <exception cref="T:System.NullReferenceException">The 
 <paramref name="obj" /> parameter is null.</exception>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.op_Equality(Tools.ReflectionT.NamespaceInfo,Tools.ReflectionT.NamespaceInfo)">
 <summary>Compares two <see cref="T:Tools.ReflectionT.NamespaceInfo">NamespaceInfos</see> for equality</summary>
 <param name="a">A <see cref="T:Tools.ReflectionT.NamespaceInfo"/></param>
 <param name="b">A <see cref="T:Tools.ReflectionT.NamespaceInfo"/></param>
 <returns>True if <paramref name="a"/> equals to <paramref name="b"/>.</returns>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.op_Inequality(Tools.ReflectionT.NamespaceInfo,Tools.ReflectionT.NamespaceInfo)">
 <summary>Compares two <see cref="T:Tools.ReflectionT.NamespaceInfo">NamespaceInfos</see> for inequality</summary>
 <param name="a">A <see cref="T:Tools.ReflectionT.NamespaceInfo"/></param>
 <param name="b">A <see cref="T:Tools.ReflectionT.NamespaceInfo"/></param>
 <returns>False if <paramref name="a"/> equals to <paramref name="b"/>.</returns>
</member>
<member name="P:Tools.ReflectionT.NamespaceInfo.Parent">
 <summary>Gets parent namespace of current namespace</summary>
 <returns>If <see cref="P:Tools.ReflectionT.NamespaceInfo.Name"/> of current namespace contains no dot an namespace with empty name is returned. If <see cref="P:Tools.ReflectionT.NamespaceInfo.Name"/> of current namespace is an empty string, null is returned.</returns>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.GetNamespaces">
 <summary>Gets all namespaces immediately contained in this namespace</summary>
 <returns>Array of namespaces in this namespace</returns>
 <remarks>Whe looking for namespaces all types in curret namespace are considered (even non-public). 
 If you want filer some types use overloaded <see cref="M:Tools.ReflectionT.NamespaceInfo.GetNamespaces(System.Predicate`1[System.Type])"/>.</remarks>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.GetNamespaces(System.Predicate{System.Type})">
 <summary>Gets namespaces immediatelly contained in this namespace when considering only selected types</summary>
 <param name="TypeFiler">This function returns only such namespaces which contain at leas one type for which delegate function <paramref name="TypeFiler"/> returns true</param>
 <returns>Array of namespaces in this namespace</returns>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.Equals(Tools.ReflectionT.NamespaceInfo)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <returns>true if the current object is equal to the 
 <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
 <version version="1.5.2">Function added</version>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.GetCustomAttributes(System.Boolean)">
 <summary>Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there are no custom attributes.</summary>
 <returns>An array of Objects representing custom attributes, or an empty array. This implementation always returns an empty array.</returns>
 <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. (ignored)</param>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.GetCustomAttributes(System.Type,System.Boolean)">
 <summary>Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom attributes of that type.</summary>
 <returns>An array of Objects representing custom attributes, or an empty array. This implementation always returns an empty array.</returns>
 <param name="attributeType">The type of the custom attributes. (ignored)</param>
 <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. (ignored)</param>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.NamespaceInfo.IsDefined(System.Type,System.Boolean)">
 <summary>Indicates whether one or more instance of <paramref name="attributeType" /> is defined on this member.</summary>
 <returns>true if the <paramref name="attributeType" /> is defined on this member; false otherwise. This implementation always returns false.</returns>
 <param name="attributeType">The type of the custom attributes. (ignored)</param>
 <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute. (ignored)</param>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="T:Tools.ReflectionT.Operators">
 <summary>Operators supported by CLI</summary>
 <remarks>High order byte (exluding its MSB) is number that uniquely identifies the operator.
 Low-order half-byte represents number of operands of the operator (1 or 2).
 If MSB of low-order byte is set then operator is non-standard.
 If LSB of high-order half-byle of low-order byte (9th LSB bit in whole number) is set then operator is assignment.
 See <seealso cref="T:Tools.ReflectionT.Operators_masks"/>.
 Names of items of the enumeration are names of operator methods without 'op_' prefix.</remarks>
 <version version="1.5.3">Added CLS names of operators to documentation</version>
</member>
<member name="F:Tools.ReflectionT.Operators.no">
 <summary>No operator</summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Decrement">
 <summary>Decrement (unary, like C++/C# --) <c>op_decrement</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Increment">
 <summary>Increment (unary, like C++/C# ++) <c>op_Increment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.UnaryNegation">
 <summary>Unary negation (unary minus operator like C++/C#/VB -) <c>op_UnaryNegation</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.UnaryPlus">
 <summary>Unary plus (like C++/C#/VB +) <c>op_UnaryPlus</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.LogicalNot">
 <summary>Logical not (unary, like C++/C# !, VB Not) <c>op_LogicalNot</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.True">
 <summary>True operator - if value should be treated as True (unary, like VB IsTrue) <c>op_True</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.False">
 <summary>False operator - if value should be treated as False (unary, like VB IsFalse) <c>op_False</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.AddressOf">
 <summary>Reference operator (unary, like C++ &amp;) <c>op_AddressOf</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.OnesComplement">
 <summary>Bitwise not operator (unary, like C++/C# ~, VB Not) <c>op_OnesComplement</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.PointerDereference">
 <summary>Pointer dereference (unary, like C++ *) <c>op_PointerDereference</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Addition">
 <summary>Addition (binary, like C++/C#/VB +) <c>op_Addition</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Subtraction">
 <summary>Subtraction (binary, like C++/C#/VB -) <c>op_Subtraction</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Multiply">
 <summary>Multiplication (binary, like C++/C#/VB *) <c>op_Multiply</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Division">
 <summary>Division (binary, like C++/C#/VB /) <c>op_Division</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Modulus">
 <summary>Modulus (division remainder, binary, like C++/C# %, VB Mod) <c>op_Modulus</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.ExclusiveOr">
 <summary>Bitwise xor (exclusive or, binary, like C++/C# ^, VB Xor) <c>op_ExclusiveOr</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.BitwiseAnd">
 <summary>Bitwise and (binary, like C++/C# &amp;, VB And) <c>op_BitwiseAnd</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.BitwiseOr">
 <summary>Bitwise or (binary, like C++/C# |, VB Or) <c>op_BitwiseOr</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.LogicalAnd">
 <summary>Logical and (binary, like C++/C# &amp;&amp;, VB AndAlso) <c>op_LogicalAnd</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.LogicalOr">
 <summary>Logical or (binary, like C++/C# ||, VB OrElse) <c>op_LogicalOr</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Assign">
 <summary>Assignment(binary, like C++/C#/VB =) <c>op_Assign</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.LeftShift">
 <summary>Left shift (binary, like C++/C#/VB &lt;&lt;) <c>op_LeftShift</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.RightShift">
 <summary>Right shift (binary, like C++/C#/VB >>) <c>op_RightShift</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.SignedRightShift">
 <summary>Signed right shift (binary) <c>op_SignedRightShift</c></summary>
 <version version="1.5.4">Fix: member renamed form <c>SignedRightShif</c> to <c>SignedRightShift</c></version>
</member>
<member name="F:Tools.ReflectionT.Operators.UnsignedRightShift">
 <summary>Unsigned right shift (binary) <c>op_UnignedRightShift</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Equality">
 <summary>Equality comparison (binary, like C++/C# ==, VB =) <c>op_Equality</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.GreaterThan">
 <summary>Greater than comparison (binary, like C++/C#/VB >) <c>op_GreaterThan</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.LessThan">
 <summary>Less than comparison (binary, like C++/C#/VB &lt;) <c>op_LessThan</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Inequality">
 <summary>Inequality comparison (binary, like C++/C# !=; VB &lt;>) <c>op_Inequality</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.GreaterThanOrEqual">
 <summary>Greater than or equal comparison (binary, like C++/C#/VB >=) <c>op_GreaterThanOrEqual</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.LessThanOrEqual">
 <summary>Less than or equal comparison (binary, like C++/C#/VB &lt;=) <c>op_LessThanOrEqual</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.UnsignedRightShiftAssignment">
 <summary>Self-assignment of unsigned right shift (binary) <c>op_UnsignedRightShiftAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.MemberSelection">
 <summary>Member selection (binary, like C++ ->) <c>op_MemberSelection</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.RightShifAssignment">
 <summary>Self-assignment of right shift (binary, like C++/C#/VB >>=) <c>op_RightShiftAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.MultiplicationAssignment">
 <summary>Self-assigment of multiplication (binary, like C++/C#/VB *=) <c>op_MultiplicationAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.PointerToMemberSelection">
 <summary>Selection of pointer to member (binary, like C++ ->*) <c>op_PointerToMemberSelection</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.SubtractionAssignment">
 <summary>Self-assignment of subtraction (binary, like C++/C#/VB -=) <c>op_SubtractionAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.ExclusiveOrAssignment">
 <summary>Bitwise exclusive or self-assigment (binary, like C++/C# ^=) <c>op_ExclusiveOrAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.LeftShiftAssignment">
 <summary>Self-assigment of left shift (binary, like C++/C#/VB &lt;&lt;=) <c>op_LeftShiftAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.ModulusAssignment">
 <summary>Modulus (division remainder) self-assignment (binary, like C++/C# %=) <c>op_ModulusAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.AditionAssignment">
 <summary>Self-assigmment of addition (binary, like C++/C#/VB +=) <c>op_AdditionAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.BitwiseAndAssignment">
 <summary>Self-assignment of witwise and (binary, like C++/C# &amp;=) <c>op_BitwiseAndAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.BitwiseOrAssignment">
 <summary>Self-assignment of bitwise or (binary, like C++/C# |=) <c>op_BitwiseOrAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Comma">
 <summary>Comma (operation grouping, binary, like C++ ,) <c>op_Comma</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.DivisionAssignment">
 <summary>Self-assignment of division (binary, like C++/C#/VB /=) <c>op_DivisionAssignment</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Concatenate">
 <summary>String contactenation (VB specific, binary, like VB &amp;) <c>op_Concatenate</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Exponent">
 <summary>Exponent (VB specific, binary, like VB ^) <c>op_Exponent</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.IntegerDivision">
 <summary>Force-integral division (VB specific, binary, like VB \, C++/C# / on integers) <c>op_IntegerDivision</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Implicit">
 <summary>Implicit conversion (unary, like C# implicit, VB Narrowing CType) <c>op_Implicit</c></summary>
</member>
<member name="F:Tools.ReflectionT.Operators.Explicit">
 <summary>Explicit conversion (unary, like C# explicit, VB Widening CType) <c>op_Explicit</c></summary>
</member>
<member name="T:Tools.ReflectionT.Operators_masks">
 <summary>Masks for the <see cref="T:Tools.ReflectionT.Operators"/> enumeration</summary>
</member>
<member name="F:Tools.ReflectionT.Operators_masks.OperatorID">
 <summary>Masks operator number. This number is unique within <see cref="T:Tools.ReflectionT.Operators"/>, but has no relation to anything in CLI.</summary>
</member>
<member name="F:Tools.ReflectionT.Operators_masks.NoOfOperands">
 <summary>Masks number of operands</summary>
</member>
<member name="F:Tools.ReflectionT.Operators_masks.NonStandard">
 <summary>Masks if operator is standard (0) or non-standard (1)</summary>
</member>
<member name="F:Tools.ReflectionT.Operators_masks.Assignment">
 <summary>Masks if operator is assignment (1) or not (0)</summary>
</member>
<member name="T:Tools.ReflectionT.VisualBasicSignatureProvider">
 <summary>Provides string representation of various reflection object using Visual Basic syntax</summary>
</member>
<member name="P:Tools.ReflectionT.VisualBasicSignatureProvider.Name">
 <summary>Gets name of current provider</summary>
 <returns>"Visual Basic 9"</returns>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(System.Reflection.AssemblyName,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of an assembly name</summary>
 <param name="Assembly">Assembly to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Assembly"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Assembly"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(System.Reflection.Assembly,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of an assembly</summary>
 <param name="Assembly">Assembly to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Assembly"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Assembly"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.AppendCustomAttributes(System.Collections.Generic.IList{System.Reflection.CustomAttributeData},System.Text.StringBuilder,Tools.ReflectionT.SignatureFlags,Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags,System.Boolean,System.Func{System.Type,System.Boolean})">
 <summary>Append information about custom attributes to <see cref="T:System.Text.StringBuilder"/></summary>
 <param name="Attributes">Attributes to append information about</param>
 <param name="ret">target <see cref="T:System.Text.StringBuilder"/></param>
 <param name="flags">Flags to control rendering</param>
 <param name="Way">True to use assembly-style attributes</param>
 <param name="Multiline">True to span attributtes on multiple lines. Note: <see cref="F:Tools.ReflectionT.SignatureFlags.NoMultiline"/> is set, multiple lines will not be produced.</param>
 <param name="filter">Attribute callback filter. Used only when <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> is set and <see cref="F:Tools.ReflectionT.SignatureFlags.AllAttributes"/> is not set. Only attributes for which it is true will be returned.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ret"/> is null ==or== <paramref name="filter"/> is null and <see cref="F:Tools.ReflectionT.SignatureFlags.AllAttributes"/> is not set and <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> is set. ==or== <paramref name="Attributes"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.RepresentValue(System.Object,Tools.ReflectionT.SignatureFlags,System.Text.StringBuilder)">
 <summary>Serializes value of attribute-allowed type to <see cref="T:System.Text.StringBuilder"/></summary>
 <param name="val">Value to serialize</param>
 <param name="Flags">Serialization flags</param>
 <param name="ret"><see cref="T:System.Text.StringBuilder"/> to serialize value to</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ret"/> is null</exception>
</member>
<member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.SupportedOperators">
 <summary>Operator suported for displaying signature by this provider</summary>
</member>
<member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.StrictOperators">
 <summary>Operator suported for displaying signature by this provider in strict mode</summary>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(System.Reflection.MemberInfo,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of a member</summary>
 <param name="Member">Member to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Member"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.OperatorName(Tools.ReflectionT.Operators)">
 <summary>Converts any operator tor its string representation</summary>
 <param name="op">Operator to convert</param>
 <returns>Operator string representation in Visual Basic.</returns>
 <remarks>Works also for operators that cannot be overloaded or even don't exist in VB.</remarks>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.AppendSignature(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo},Tools.ReflectionT.SignatureFlags,System.Text.StringBuilder)">
 <summary>Appends method signature to <see cref="T:System.Text.StringBuilder"/></summary>
 <param name="Parameters">parameters that represents signature to append</param>
 <param name="Flags">Flags that controls signature rendering</param>
 <param name="ret"><see cref="T:System.Text.StringBuilder"/> to append signature to</param>
 <remarks>Braces (()) around parameters are not rendered.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="ret"/> or <paramref name="Parameters"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.AppendGenericConstraints(System.Type,System.Text.StringBuilder,Tools.ReflectionT.SignatureFlags)">
 <summary>tes constraints of generic type to <see cref="T:System.Text.StringBuilder"/> in Visual-Basic-like way</summary>
 <param name="gPar"><see cref="T:System.Type"/> that represents generic parameter</param>
 <param name="ret"><see cref="T:System.Text.StringBuilder"/> to write constraints to</param>
 <param name="Flags">Flags that controls rendering</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="ret"/> or <paramref name="gPar"/> is null</exception>
 <remarks>If <paramref name="Flags"/> ans not set <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParametersDetails"/> bit the method exits immediatelly</remarks>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.RepresentTypeName(System.Type,System.Text.StringBuilder,Tools.ReflectionT.SignatureFlags)">
 <summary>Represents Visual-Baslic-like type name into <see cref="T:System.Text.StringBuilder"/></summary>
 <param name="Type">Type to represent name of</param>
 <param name="ret"><see cref="T:System.Text.StringBuilder"/> to write name to</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> or <paramref name="ret"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetAccessModifiers(System.Reflection.MemberInfo)">
 <summary>Gets member access modifiers</summary>
 <param name="Member">Member to get modifiers of</param>
 <returns>Visual-Basic-like member access modifiers</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
</member>
<member name="T:Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags">
 <summary>Ways of rendering custom attributes</summary>
</member>
<member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags.Other">
 <summary>Normal way</summary>
</member>
<member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags.Assembly">
 <summary>Assembly way</summary>
</member>
<member name="F:Tools.ReflectionT.VisualBasicSignatureProvider.CustomAttributeFlags.Module">
 <summary>PE module way</summary>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(System.Reflection.Module,Tools.ReflectionT.SignatureFlags)">
 <summary>gets representation of a module</summary>
 <param name="Module">Module to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Module"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetSignature(Tools.ReflectionT.NamespaceInfo,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of a namespace</summary>
 <param name="Namespace">Namespace to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Namespace"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Namespace"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetAttribute(System.Reflection.CustomAttributeData,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of attached custom attribute</summary>
 <param name="AttributeData"><see cref="T:System.Reflection.CustomAttributeData"/> to show</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of given custom attribute</returns>
</member>
<member name="M:Tools.ReflectionT.VisualBasicSignatureProvider.GetAttributes(System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData},Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of attached custom attributes</summary>
 <param name="AttributeData">Collection of <see cref="T:System.Reflection.CustomAttributeData"/> to show</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of given custom attributes</returns>
</member>
<member name="T:Tools.ReflectionT.CodeImages">
 <summary>Provides images for graphic representation of code members</summary>
</member>
<member name="T:Tools.ReflectionT.CodeImages.Objects">
 <summary>Represents supported object types for code images</summary>
 <remarks>Values of items of this enumeration are constructed acording to type of object represented by them. But this construction is not very clear and application should not rely on it. Description follows:
 <list type="table">
 <listheader><term>Bit no.</term><description>Meaning</description></listheader>
 <item><term>0</term><description>Object is either collection, produces new instance (CTor) or is managed but somewhat strange (union).</description></item>
 <item><term>1</term><description>Object either has own <see cref="T:System.Reflection.MemberInfo"/>-derived class or is treated as fallback by logic of <see cref="T:Tools.ReflectionT.CodeImages"/></description></item>
 <item><term>2</term><description>Object represent somethign representable by <see cref="T:System.Reflection.MemberInfo"/>-derived class</description></item>
 <item><term>3</term><description>Member is atomic (from that poit of view taht it does not contain another members. Properties and event are not considered atomic)</description></item>
 <item><term>4</term><description>Members represents specific class (<see cref="F:Tools.ReflectionT.CodeImages.Objects.Delegate"/>, <see cref="F:Tools.ReflectionT.CodeImages.Objects.Exception"/>, <see cref="F:Tools.ReflectionT.CodeImages.Objects.Attribute"/>)</description></item>
 <item><term>5</term><description>Member can be changed (assigned value to)</description></item>
 <item><term>6</term><description>Member has value</description></item>
 <item><term>7</term><description>Object represents error or exception</description></item>
 <item><term>8</term><description>Mmeber is callable</description></item>
 <item><term>9</term><description>Object is instantiable</description></item>
 <item><term>11, 10</term><description>
 <list type="table"><item><term>00</term><description>none of following</description></item>
 <item><term>01</term><description>Object represents value type or top-level object</description></item>
 <item><term>10</term><description>Object represents reference type, medium-level object (between class and assembly) or group of objects</description></item>
 <item><term>11</term><description>Object is not object of code</description></item></list>
 </description></item>
 <item><term>12</term><description>Object is part of managed application</description></item>
 <item><term>14, 13</term><description><list type="table">
 <item><term>00</term><description>none of following</description></item>
 <item><term>01</term><description>Object of higher level tha type</description></item>
 <item><term>10</term><description>Type-level object</description></item>
 <item><term>11</term><description>Object of lower level than type</description></item>
 </list></description></item>
 <item><term>16, 15</term><description><list type="table">
 <item><term>00</term><description>none of following</description></item>
 <item><term>01</term><description>Object is not generic</description></item>
 <item><term>10</term><description>Object is open generic</description></item>
 <item><term>11</term><description>Object is closed generic</description></item>
 </list></description></item>
 </list>
 </remarks>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.NoObject">
 <summary>No object. Represented by fully transparent image.</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Assembly">
 <summary>Assembly</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Attribute">
 <summary>Attribute. Class that derives from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Attribute"/></summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Class">
 <summary>Class (reference type)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Constant">
 <summary>Constant</summary>
 <remarks>Represents .NET constant, not C++ one that is more like read-only field</remarks>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.CTor">
 <summary>Constructor method</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Delegate">
 <summary>Delegate. Class that inherits from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Delegate"/></summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Enum">
 <summary>Enumeration. Class that inherits from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Enum"/></summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.EnumItem">
 <summary>Enumeration item. Constant inside class that derives from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Enum"/></summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Event">
 <summary>Event</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Exception">
 <summary>Exception. Class that derives from <see cref="F:Tools.ReflectionT.CodeImages.Objects.Exception"/></summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Field">
 <summary>Field (class- or global-level variable)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Getter">
 <summary>Read-only property</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Interface">
 <summary>Interface</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Library">
 <summary>Library (represents unmanaged library)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Macro">
 <summary>C/C++ macro</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Map">
 <summary>Map</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.MapItem">
 <summary>Map item</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Method">
 <summary>Method (Sub and Function in Visual Basic)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.MethodOverload">
 <summary>Group of overloaded methods</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Module">
 <summary>.NET PE module</summary>
 <remarks>This is something different tha VB standard module. See <seealso cref="F:Tools.ReflectionT.CodeImages.Objects.StandardModule"/></remarks>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Namespace">
 <summary>Namespace</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Object">
 <summary>Any object</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Operator">
 <summary>Operator</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Property">
 <summary>Property (read-write)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Resource">
 <summary>Single resource (this was image, single string, audio file etc. before compilation)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Resources">
 <summary>Group of resources (this was a resx file before compilation)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Setter">
 <summary>Write-only property</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.StandardModule">
 <summary>VB standard module</summary>
 <remarks>This is somethign different than .NET PE module. See <seealso cref="F:Tools.ReflectionT.CodeImages.Objects.Module"/></remarks>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Structure">
 <summary>Structure (value type, class that inherits <see cref="F:Tools.ReflectionT.CodeImages.Objects.ValueType"/>).</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Template">
 <summary>C++ template (not .NET generic)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Type">
 <summary>Type (unmanaged)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.TypeDef">
 <summary>C++ typedef</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Union">
 <summary>Union (union-layered structure)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.ValueType">
 <summary>Value type that is not considered to be a structure</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Error">
 <summary>Error. Used when erro ocured during aquiring reflection data.</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericClassOpen">
 <summary>Open generic class (with type parameters unspecified)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericTypeClosed">
 <summary>Closed generic type (unknown if class or structure or interface)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericClassClosed">
 <summary>Closed generic class (with type parameters specified)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericMethodClosed">
 <summary>Closed generic method (with type parameters specified)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericStructureClosed">
 <summary>Closed generic structure (with type parameters specified)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericMethodOpen">
 <summary>Open generic method (with type parameters unspecified)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericParameter">
 <summary>Generic parameter</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericStructureOpen">
 <summary>Open gneric structure (with type parameters unspecified)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericInterfaceOpen">
 <summary>Open generic interface (with type parameters unspecified)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericInterfaceClosed">
 <summary>Closed generic interface (with type parameters specified)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericTypeOpen">
 <summary>Open generic type (unknown if class or structure or interface)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericExceptionClosed">
 <summary>Generic open exception class</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericExceptionOpen">
 <summary>Generic closed exception class</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericAttributeClosed">
 <summary>Generic closed attribute class</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericAttributeOpen">
 <summary>Generic open attribute class</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericDelegateOpen">
 <summary>Generic open delegate</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.GenericDelegateClosed">
 <summary>Generic closed delegate</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.Question">
 <summary>Question. Used for unknown kind of member.</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.ForwardReference">
 <summary>Forward refernce (i.e. referenced assemblies, derived types)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Objects.BackwardReference">
 <summary>Backward reference (i.e. parent types)</summary>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)">
 <summary>Gets image that represents code object</summary>
 <param name="ObjectType">Object type</param>
 <returns>Image that represents given object type</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="ObjectType"/> is not member of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/></exception>
</member>
<member name="T:Tools.ReflectionT.CodeImages.ObjectModifiers">
 <summary>Code element modifiers that produces overlay images</summary>
 <remarks>With exception of <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Shortcut"/> and <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Extension"/> modifiers are subset of <see cref="T:System.Reflection.MethodAttributes"/>. Thos attributes can be applied on any supported membert as defined in <seealso cref="T:Tools.ReflectionT.CodeImages.Objects"/>. Modifiers can be combined, but not each with each.</remarks>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.None">
 <summary>No modifier</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Private">
 <summary>Private (See <see cref="F:System.Reflection.MethodAttributes.Private"/>)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Protected">
 <summary>Protected (family visibility) (See <see cref="F:System.Reflection.MethodAttributes.Family"/>)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Friend">
 <summary>Friend (internal, assembly visibility  (See <see cref="F:System.Reflection.MethodAttributes.Assembly"/>)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Public">
 <summary>Public (See <see cref="F:System.Reflection.MethodAttributes.Public"/>)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.ProtectedFriend">
 <summary>Protected Friend (accessible from derived class in any assembly and from whole defining) (See <see cref="F:System.Reflection.MethodAttributes.FamORAssem"/>)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.FriendProtected">
 <summary>Accessible only from derived classes in defining assembly (See <see cref="F:System.Reflection.MethodAttributes.FamANDAssem"/>)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Static">
 <summary>Static (Shared in VB) (See <see cref="F:System.Reflection.MethodAttributes.Static"/>)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Sealed">
 <summary>Final (NotInheritable class or Overrides NotOveridable or without Overridable method in VB) (See <see cref="F:System.Reflection.MethodAttributes.Final"/>)</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Shortcut">
 <summary>Shortcust or reference</summary>
</member>
<member name="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Extension">
 <summary>Extension (represents extension method)</summary>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetOverlayImage(Tools.ReflectionT.CodeImages.ObjectModifiers)">
 <summary>Gets overlay image tha repreents given modifiers</summary>
 <param name="Modifiers">Modifiers to get overlay image for</param>
 <returns>16×16 px image with transparent background that graphicaly represents <paramref name="Modifiers"/></returns>
 <remarks>
 <para>Images are dynamically generated on request and cached. If you alter the image returned if will be altered in chache as well and on next call with same <paramref name="Modifiers"/> it will be returned modified</para>.
 <paramref name="Modifiers"/> Can be or-combination of values of <paramref name="Modifiers"/> enumeration. But with some limitation. <paramref name="Modifiers"/> &amp; <see cref="F:System.Reflection.MethodAttributes.MemberAccessMask"/> should be one of <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Private"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.FriendProtected"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Friend"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Protected"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.ProtectedFriend"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Public"/> (<see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Public"/> generates no overlay) or this part will be ignored.
 Other <see cref="T:Tools.ReflectionT.CodeImages.ObjectModifiers"/> members can be or-ed with no limitation. Overlay will be combined and single images will be smartly positioned into 4 corners of it.
 Combination of either <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.ProtectedFriend"/> or <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.FriendProtected"/> with <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Static"/>, <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Sealed"/> and <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Shortcut"/> results to need to position 5 images into 4 corners. So, shortcut overly is placed as last one to bottom left corner overlaying protected overlay.
 If <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.Extension"/> takes effect it is always placed to right-bottom corner overlayin any other possible image there.
 </remarks>
</member>
<member name="P:Tools.ReflectionT.CodeImages.ProtectedFriend">
 <summary>Gets image that represents <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.ProtectedFriend"/></summary>
 <remarks>The image is dynamically generated an the cached</remarks>
</member>
<member name="P:Tools.ReflectionT.CodeImages.FriendProtected">
 <summary>Gets image that represents <see cref="F:Tools.ReflectionT.CodeImages.ObjectModifiers.FriendProtected"/></summary>
 <remarks>The image is dynamically generated an the cached</remarks>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers)">
 <summary>Returns image got from <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/> overlayed with image got from <see cref="M:Tools.ReflectionT.CodeImages.GetOverlayImage(Tools.ReflectionT.CodeImages.ObjectModifiers)"/></summary>
 <param name="ObjectType">Type of object for background image</param>
 <param name="Modifiers">Object modifiers</param>
 <returns>16×16px image that graphicaly represents <paramref name="ObjectType"/> with its modifiers.</returns>
 <remarks>Images are dynamically created on request and cached. So if you change the image returned, it will be returned changed on next call.</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="ObjectType"/> is not member of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/></exception>
</member>
<member name="F:Tools.ReflectionT.CodeImages.Cache">
 <summary>Contains cache for <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectType)"/></summary>
</member>
<member name="E:Tools.ReflectionT.CodeImages.ImageAdded">
 <summary>Raised after image is added to cache of images with overlay</summary>
 <param name="Image">Image added</param>
 <param name="ObjectType">Type of object for added image</param>
 <param name="Modifiers">Object modifiers for added image</param>
</member>
<member name="E:Tools.ReflectionT.CodeImages.ImageRequested">
 <summary>Rased after before <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectType)"/> returns image</summary>
 <param name="Image">Image to be returned</param>
 <param name="ObjectType">Type of object for image</param>
 <param name="Modifiers">Object modifiers for  image</param>
</member>
<member name="M:Tools.ReflectionT.CodeImages.WithAllImages(System.Action{System.Drawing.Image,Tools.ReflectionT.CodeImages.Objects,Tools.ReflectionT.CodeImages.ObjectModifiers})">
 <summary>For each image in cache calls given callback method</summary>
 <param name="Callback">Method to call. Parameters are same as of the <see cref="E:Tools.ReflectionT.CodeImages.ImageAdded"/> event.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Callback"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects,System.Reflection.MethodAttributes)">
 <summary>Returns image got from <see cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/> overlayed with image got from <see cref="M:Tools.ReflectionT.CodeImages.GetOverlayImage(Tools.ReflectionT.CodeImages.ObjectModifiers)"/></summary>
 <param name="ObjectType">Type of object for background image</param>
 <param name="Attributes">Object modifiers</param>
 <returns>16×16px image that graphicaly represents <paramref name="ObjectType"/> with its modifiers.</returns>
 <remarks>Images are dynamically created on request and cached. So if you change the image returned, it will be returned changed on next call.</remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="ObjectType"/> is not member of <see cref="T:Tools.ReflectionT.CodeImages.Objects"/></exception>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Type)">
 <summary>Gets image that graphically represents given type</summary>
 <param name="Type">Type to get image for</param>
 <returns>16×16 image representing type obtained using <see cref="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.EventInfo)"/></returns>
 <remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.MemberInfo)">
 <summary>Gets image that graphically represents given member</summary>
 <param name="Member">Member to represent</param>
 <returns>16×16px image that represents <paramref name="Member"/></returns>
 <remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.MethodBase)">
 <summary>Gets image that graphicaly represents give method</summary>
 <param name="Member">Method to get image for</param>
 <returns>16×16px image that graphicaly represents <paramref name="Member"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.PropertyInfo)">
 <summary>Gets image that graphically represents given property</summary>
 <param name="Member">Property to get image for</param>
 <returns>Image that graphically represents <paramref name="Member"/></returns>
 <remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and.</exception>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.EventInfo)">
 <summary>Gets image that graphicaly represents given event</summary>
 <param name="Member">Event to get image for</param>
 <returns>16×16px image that graphicaly represents <paramref name="Member"/></returns>
 <remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and.</exception>
</member>
<member name="M:Tools.ReflectionT.CodeImages.GetImage(System.Reflection.FieldInfo)">
 <summary>gets image that graphicaly represents given field</summary>
 <param name="Member">Field to get image for</param>
 <returns>16×16px image that graphiocaly represents <paramref name="Member"/></returns>
 <remarks><seealso cref="M:Tools.ReflectionT.CodeImages.GetImage(Tools.ReflectionT.CodeImages.Objects)"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
</member>
<member name="T:Tools.ReflectionT.ObjectImages">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iAssembly">
<summary>
Looks up a resource 'iAssembly'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iAttribute">
<summary>
Looks up a resource 'iAttribute'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iAttribute_GenericClosed">
<summary>
Looks up a resource 'iAttribute_GenericClosed'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iAttribute_GenericOpen">
<summary>
Looks up a resource 'iAttribute_GenericOpen'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iBackwardReference">
<summary>
Looks up a resource 'iBackwardReference'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iClass">
<summary>
Looks up a resource 'iClass'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iConstant">
<summary>
Looks up a resource 'iConstant'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iCTor">
<summary>
Looks up a resource 'iCTor'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iDelegate">
<summary>
Looks up a resource 'iDelegate'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iDelegate_GenericClosed">
<summary>
Looks up a resource 'iDelegate_GenericClosed'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iDelegate_GenericOpen">
<summary>
Looks up a resource 'iDelegate_GenericOpen'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iEmpty">
<summary>
Looks up a resource 'iEmpty'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iEnum">
<summary>
Looks up a resource 'iEnum'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iEnumItem">
<summary>
Looks up a resource 'iEnumItem'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iError">
<summary>
Looks up a resource 'iError'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iEvent">
<summary>
Looks up a resource 'iEvent'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iException">
<summary>
Looks up a resource 'iException'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iException_GenericClosed">
<summary>
Looks up a resource 'iException_GenericClosed'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iException_GenericOpen">
<summary>
Looks up a resource 'iException_GenericOpen'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iField">
<summary>
Looks up a resource 'iField'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iForwardReference">
<summary>
Looks up a resource 'iForwardReference'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGeneric">
<summary>
Looks up a resource 'iGeneric'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericClass">
<summary>
Looks up a resource 'iGenericClass'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericInstance">
<summary>
Looks up a resource 'iGenericInstance'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericInstanceClass">
<summary>
Looks up a resource 'iGenericInstanceClass'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericInstanceInterface">
<summary>
Looks up a resource 'iGenericInstanceInterface'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericInstanceMethod">
<summary>
Looks up a resource 'iGenericInstanceMethod'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericInstanceStructure">
<summary>
Looks up a resource 'iGenericInstanceStructure'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericInterface">
<summary>
Looks up a resource 'iGenericInterface'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericMethod">
<summary>
Looks up a resource 'iGenericMethod'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericParameter">
<summary>
Looks up a resource 'iGenericParameter'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGenericStructure">
<summary>
Looks up a resource 'iGenericStructure'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iGetter">
<summary>
Looks up a resource 'iGetter'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iInterface">
<summary>
Looks up a resource 'iInterface'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iLibrary">
<summary>
Looks up a resource 'iLibrary'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iMacro">
<summary>
Looks up a resource 'iMacro'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iMap">
<summary>
Looks up a resource 'iMap'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iMapItem">
<summary>
Looks up a resource 'iMapItem'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iMethod">
<summary>
Looks up a resource 'iMethod'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iMethodOverload">
<summary>
Looks up a resource 'iMethodOverload'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iModule">
<summary>
Looks up a resource 'iModule'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iNamespace">
<summary>
Looks up a resource 'iNamespace'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iObject">
<summary>
Looks up a resource 'iObject'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iOperator">
<summary>
Looks up a resource 'iOperator'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iProperty">
<summary>
Looks up a resource 'iProperty'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iQuestion">
<summary>
Looks up a resource 'iQuestion'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iResource">
<summary>
Looks up a resource 'iResource'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iResources">
<summary>
Looks up a resource 'iResources'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iSetter">
<summary>
Looks up a resource 'iSetter'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iStandardModule">
<summary>
Looks up a resource 'iStandardModule'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iStructure">
<summary>
Looks up a resource 'iStructure'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iTemplate">
<summary>
Looks up a resource 'iTemplate'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iType">
<summary>
Looks up a resource 'iType'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iTypeDef">
<summary>
Looks up a resource 'iTypeDef'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iUnion">
<summary>
Looks up a resource 'iUnion'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.iValueType">
<summary>
Looks up a resource 'iValueType'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.oAnd">
<summary>
Looks up a resource 'oAnd'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.oExtension">
<summary>
Looks up a resource 'oExtension'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.oFriend">
<summary>
Looks up a resource 'oFriend'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.oNotInheritable">
<summary>
Looks up a resource 'oNotInheritable'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.oOr">
<summary>
Looks up a resource 'oOr'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.oPrivate">
<summary>
Looks up a resource 'oPrivate'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.oProtected">
<summary>
Looks up a resource 'oProtected'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.oShortcut">
<summary>
Looks up a resource 'oShortcut'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.oStatic">
<summary>
Looks up a resource 'oStatic'.
</summary>
</member>
<member name="P:Tools.ReflectionT.ObjectImages.String1">
<summary>
Looks up a localized string similar to ''.
</summary>
</member>
<member name="M:Tools.ReflectionT.ObjectImages.String1Format">
<summary>
The stub formatting method returning the String1 property value.
</summary>
<returns>The String1 property value.</returns>
</member>
<member name="T:Tools.ReflectionT.ReflectionTools">
 <summary>Various reflection tools</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version stage="Nightly" version="1.5.2">Added overloaded functions <see cref="M:Tools.ReflectionT.ReflectionTools.GetOperators(System.Type)"/>.</version>
 <version version="1.5.2">Added <see cref="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MemberInfo,System.Object)"/> overloaded methods.</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetNamespaces(System.Reflection.Module,System.Boolean,System.Boolean)">
 <summary>Gets namespaces in given module</summary>
 <param name="Module">Module to get namespaces in</param>
 <returns>Array of namespaces in <paramref name="Module"/></returns>
 <param name="IncludeGlobal">True to include global namespace (with empty name)</param>
 <param name="Flat">True to list all namespaces even if their name contains dot (.), False to list only top-level namespaces</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
 <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetNamespaces(System.Reflection.Module,System.Predicate{System.Type},System.Boolean,System.Boolean)">
 <summary>Gets namespaces in given module</summary>
 <param name="Module">Module to get namespaces in</param>
 <returns>Array of namespaces in <paramref name="Module"/></returns>
 <param name="TypeFilter">Predicate. Onyl those types for which the predicate returns true will be observed for namespaces.</param>
 <param name="IncludeGlobal">True to include global namespace (with empty name)</param>
 <param name="Flat">True to list all namespaces even if their name contains dot (.), False to list only top-level namespaces</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> or <paramref name="TypeFilter"/> is null</exception>
 <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetTypes(System.Reflection.Module,System.Boolean)">
 <summary> defined in given module</summary>
 <param name="Module">Module to get types from</param>
 <param name="FromNamespaces">True to get only types from global namespace. False to get all types (same as <see cref="M:System.Reflection.Module.GetTypes"/>)</param>
 <returns>Array of types from module <paramref name="Module"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
 <exception cref="T:System.Reflection.ReflectionTypeLoadException">One or more classes in a module could not be loaded.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetNamespace(System.Reflection.MethodInfo)">
 <summary>Gets declaring namespace of global method</summary>
 <param name="Method">Global method to get namespace of</param>
 <returns>Namespace <paramref name="Method"/> contains in its name; or null when <paramref name="Method"/> is not global method</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetNamespace(System.Reflection.FieldInfo)">
 <summary>Gets declaring namespace of global field</summary>
 <param name="Field">Global field to get namespace of</param>
 <returns>Namespace <paramref name="Field"/> contains in its name; or null when <paramref name="Field"/> is not global field</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Field"/> is null</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetNamespace(System.Type)">
 <summary>Gets namespace of given <see cref="T:System.Type"/> as instance of <see cref="T:Tools.ReflectionT.NamespaceInfo"/></summary>
 <param name="Type">Type to get namespace of</param>
 <returns><see cref="T:Tools.ReflectionT.NamespaceInfo"/> constructed from <paramref name="Type"/>.<see cref="P:System.Reflection.MemberInfo.Module">Module</see> and <paramref name="Type"/>.<see cref="P:System.Type.Namespace">Namespace</see>.</returns>
 <remarks>Each type has namespace even when name of the namespace is an empty <see cref="T:System.String"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <version version="1.5.2">Added <see cref="T:System.ArgumentNullException"/></version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsPublic(System.Reflection.MemberInfo)">
 <summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
 <param name="Member">Member to indicate accesibility of</param>
 <returns>True if accessibility of member is public</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
 <version version="1.5.2">Fixed: When <paramref name="Member"/> is <see cref="T:System.Type"/> with <see cref="P:System.Type.IsNested"/> = True, <see cref="P:System.Type.IsNestedPublic"/> = False and <see cref="P:System.Type.IsPublic"/> = True function returns false (now it returns true - for type it simply returns <see cref="P:System.Type.IsNestedPublic"/> OR <see cref="P:System.Type.IsPublic"/>)</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsPrivate(System.Reflection.MemberInfo)">
 <summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
 <param name="Member">Member to indicate accesibility of</param>
 <returns>True if accessibility of member is private</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsAssembly(System.Reflection.MemberInfo)">
 <summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
 <param name="Member">Member to indicate accesibility of</param>
 <returns>True if accessibility of member is assembly (friend, internal)</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsFamilyAndAssembly(System.Reflection.MemberInfo)">
 <summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
 <param name="Member">Member to indicate accesibility of</param>
 <returns>True if accessibility of member is family-and-assembly</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsFamilyOrAssembly(System.Reflection.MemberInfo)">
 <summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
 <param name="Member">Member to indicate accesibility of</param>
 <returns>True if accessibility of member is family-or-assembly (protected friend)</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
 <version version="1.5.2">Fixed: For <paramref name="Member"/> being <see cref="T:System.Reflection.MethodBase"/> behaves like <see cref="M:Tools.ReflectionT.ReflectionTools.IsFamilyAndAssembly(System.Reflection.MemberInfo)"/></version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsFamily(System.Reflection.MemberInfo)">
 <summary>For <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodBase"/> (<see cref="T:System.Reflection.MethodInfo"/> or <see cref="T:System.Reflection.ConstructorInfo"/>), <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.FieldInfo"/> indicates its accessibility</summary>
 <param name="Member">Member to indicate accesibility of</param>
 <returns>True if accessibility of member is family (protected)</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetAccessibility(System.Reflection.PropertyInfo)">
 <summary>Gets maximum visibility of getter and setter of property</summary>
 <param name="prp">Property to check accessibility of</param>
 <returns>Accessibility that is union of accessibilities of getter and setter</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="prp"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetAccessibility(System.Reflection.EventInfo)">
 <summary>Gets maximum visibility of adder, remover and raiser of event</summary>
 <param name="ev">Event to check accessibility of</param>
 <returns>Accessibility that is union of accessibilities of adder, remover and raiser</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="ev"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.MaxVisibility(System.Reflection.MethodAttributes[])">
 <summary>Gets maximum visibility from visibilities of methods</summary>
 <param name="Visibility">Array of visibilities to test (it can contain any valid value of <see cref="T:System.Reflection.MethodAttributes"/>, non-visibity part will be ignored)</param>
 <returns>Maximum visibility as union of all visibilities in <paramref name="Visibility"/></returns>
 <version version="1.5.2">Fixed: <see cref="F:System.Reflection.MethodAttributes.Assembly"/>, <see cref="F:System.Reflection.MethodAttributes.Assembly"/> returns <see cref="F:System.Reflection.MethodAttributes.FamORAssem"/> (now returns correctly <see cref="F:System.Reflection.MethodAttributes.Assembly"/>)</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsStatic(System.Reflection.MemberInfo)">
 <summary>Gets value indicating if member should be considered static</summary>
 <param name="Member">Member to check</param>
 <returns>True if member should or can be considered static</returns>
 <remarks>For <see cref="T:System.Type"/> always returns true. For <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.MethodInfo"/> returns true only if all non-other accessors are static</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsFinal(System.Reflection.MemberInfo)">
 <summary>Gets value indicating if member should be considered final (it cannot be overriden or inherited)</summary>
 <param name="Member">Member to check</param>
 <returns>True if memberis final</returns>
 <remarks>For <see cref="T:System.Reflection.FieldInfo"/> always returns true. For <see cref="T:System.Reflection.EventInfo"/> and <see cref="T:System.Reflection.PropertyInfo"/> all non-other members must be final to return true.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.HowIsSeenBy(System.Reflection.MemberInfo,System.Type)">
 <summary>Indicates which access has member of given type of another member</summary>
 <param name="Member">Member to be accessed</param>
 <param name="Observer">Type at which level the call to <paramref name="Member"/> is about to be done; when null visibility is reported for any type not nedted in <paramref name="Member"/>, not derived form <paramref name="Member"/> and not in same assembly as <paramref name="Member"/>.</param>
 <remarks>Visibility of <paramref name="Member"/> form context inside <paramref name="Observer"/>. If <paramref name="Member"/> can be really called from context inside <paramref name="Observer"/> depends on relation of <paramref name="Observer"/> and <paramref name="Member"/><see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see>. Wheather one is nested to another, one is derived by another and one is in same assembly as another.</remarks>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.CanBeSeenFrom(System.Reflection.MemberInfo,System.Type)">
 <summary>Indicates if member can be accessed from context of given <see cref="T:System.Type"/></summary>
 <param name="Member">Mmeber to be accessed</param>
 <param name="Observer">Type at which level the call to <paramref name="Member"/> is about to be done; when null visibility is reported for any type not nedted in <paramref name="Member"/>, not derived form <paramref name="Member"/> and not in same assembly as <paramref name="Member"/> (so tru is returned only when <paramref name="Member"/> is publicly accessible).</param>
 <remarks>This method takes visibility of <paramref name="Member"/> by <paramref name="Observer"/> indicated by <see cref="M:Tools.ReflectionT.ReflectionTools.HowIsSeenBy(System.Reflection.MemberInfo,System.Type)"/> and applies interrelation of <paramref name="Member"/>.<see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see> and <paramref name="Observer"/>.</remarks>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsBaseClassOf(System.Type,System.Type)">
 <summary>Indicates if given type is base class of another type</summary>
 <param name="Base">Proposed base class of <paramref name="Derived"/></param>
 <param name="Derived">Type proposedly derived from <paramref name="Base"/></param>
 <returns>True if <paramref name="Derived"/> derives (inherits) from <paramref name="Base"/>; false othervise</returns>
 <remarks>Test only inheritance hierarchy. Does not test following conditions that can make  assignemnt <paramref name="Base"/> ← <paramref name="Derived"/> possible:
 <list type="bullet">
 <item><paramref name="Derived"/> implements <paramref name="Base"/></item>
 <item><paramref name="Base"/> is underlying type of <paramref name="Derived"/> and <paramref name="Derived"/> is enumeration</item>
 </list>
 In addtion to simple base class test, it also test and returns true in followig conditions:
 <list type="bullet">
 <item><paramref name="Base"/> is generic type constraint of <paramref name="Derived"/> or base of the constraint.</item>
 <item><paramref name="Base"/> is open generic type and  <paramref name="Derived"/> derived derives from <paramref name="Base"/> (in either geneir-open, generic-closed or generic-half-open-half-closed way).</item>
 </list></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Base"/> or <paramref name="Derived"/> is null</exception>
 <seelaso cref="M:Tools.ReflectionT.ReflectionTools.IsDerivedFrom(System.Type,System.Type)"/>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetMeAsBaseClassOf(System.Type,System.Type)">
 <summary>For generic type gets constructed generic type that is base class of given (non)generic type</summary>
 <param name="Base">Type representing base class of <paramref name="Derived"/></param>
 <param name="Derived">Type derived from <paramref name="Base"/></param>
 <returns>Null when <paramref name="Derived"/> does not derived from <paramref name="Base"/>;
 <paramref name="Base"/> when <paramref name="Base"/> is not generic or it is closed generic type type and <paramref name="Derived"/> derives from <paramref name="Base"/>;
 Constructed generic type constructed from <paramref name="Base"/> when <paramref name="Base"/> is open generic type or semi-constructed generic type and <paramref name="Derived"/> derives from it.</returns>
 <remarks>When <paramref name="Base"/> is semi-constructed generic type, <paramref name="Derived"/> is only considered to derive form it when no change is needed for specified type parameters of <paramref name="Base"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Base"/> or <paramref name="Derived"/> is null</exception>
 <seelaso cref="M:Tools.ReflectionT.ReflectionTools.IsBaseClassOf(System.Type,System.Type)"/><seelaso cref="M:Tools.ReflectionT.ReflectionTools.IsDerivedFrom(System.Type,System.Type)"/>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsDerivedFrom(System.Type,System.Type)">
 <summary>Idicates if given type is derived form another type</summary>
 <param name="Base">Proposed base class of <paramref name="Derived"/></param>
 <param name="Derived">Type proposedly derived from <paramref name="Base"/></param>
 <returns>True if <paramref name="Derived"/> derives (inherits) from <paramref name="Base"/>; false othervise</returns>
 <remarks>Test only inheritance hierarchy. Does not test following conditions that can make  assignemnt <paramref name="Base"/> ← <paramref name="Derived"/> possible:
 <list type="bullet"><item><paramref name="Derived"/> implements <paramref name="Base"/></item>
 <item><paramref name="Base"/> is underlying type of <paramref name="Derived"/> and <paramref name="Derived"/> is enumeration</item></list>
 In addtion to simple base class test, it also test and returns true when <paramref name="Base"/> is generic type constraint of <paramref name="Derived"/> or base of the constraint.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Base"/> or <paramref name="Derived"/> is null</exception>
 <seelaso cref="M:Tools.ReflectionT.ReflectionTools.IsBaseClassOf(System.Type,System.Type)"/>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.Visibility(System.Reflection.MemberInfo)">
 <summary>Gets member-type-independent visibility of member</summary>
 <param name="Member">Member to get visibility of</param>
 <returns>Visibility of member. In case member reports impossible combination of visibilities returns 0.</returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to reflect on non-public methods and <paramref name="Member"/> is either <see cref="T:System.Reflection.EventInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.CombineVisibility(Tools.ReflectionT.Visibility,Tools.ReflectionT.Visibility)">
 <summary>Combines visibility of parent and member as seen from outside of parent</summary>
 <param name="ParentVisibility">Visibility of parent</param>
 <param name="MemberVisibility">Visibility of member</param>
 <returns>Visibility of member how it is seen form outside of parent. Indicates who can access the member if the "who" is otside of parent.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="MemberVisibility"/> or <paramref name="ParentVisibility"/> is not member of <see cref="M:Tools.ReflectionT.ReflectionTools.Visibility(System.Reflection.MemberInfo)"/></exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetProperty(System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
 <summary>Searches for property given method belongs to</summary>
 <param name="Method">Method to search property for</param>
 <param name="GetSetOnly">Search only for getters and setters</param>
 <param name="Inherit">Search within methods of base types</param>
 <returns>First property that has <paramref name="Method"/> as one of its accessors</returns>
 <remarks>Search is done only within type where <paramref name="Method"/> is declared and optionally within it's base types</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetEvent(System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
 <summary>Searches for event given method belongs to</summary>
 <param name="Method">Method to search event for</param>
 <param name="StandardOnly">Search only for addres, removers and raisers</param>
 <param name="Inherit">Search within methods of base types</param>
 <returns>First event that has <paramref name="Method"/> as one of its accessors</returns>
 <remarks>Search is done only within type where <paramref name="Method"/> is declared and optionally within it's base types</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetAccessors(System.Reflection.EventInfo,System.Boolean)">
 <summary>Gtes all accessors of given event</summary>
 <param name="Event">Event to get accessors of</param>
 <param name="NonPublic">True to get non-public accessors as well as public</param>
 <returns>Array of all accessors of <paramref name="Event"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Event"/> is null</exception>
 <exception cref="T:System.MethodAccessException"><paramref name="NonPublic"/> is true, event accessor is non-public, and the caller does not have permission to reflect on non-public methods. </exception>
 <remarks>If <paramref name="Event"/> does not support <see cref="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)"/>, <see cref="M:System.Reflection.EventInfo.GetOtherMethods()"/> is used.</remarks>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsOperator(System.Reflection.MethodInfo,System.Boolean)">
 <summary>Gets value indicating whether and if which the function is operator</summary>
 <param name="Method">Method to investigate</param>
 <param name="NonStandard">Also include operators that are not part of CLI standard (currently VB \, ^ and &amp; operators are supported)</param>
 <returns>If function is operator returns one of <see cref="T:Tools.ReflectionT.Operators"/> constants. If function is not operator (or it seems to be a operator but does not fit to operator it pretends to be) returns <see cref="F:Tools.ReflectionT.Operators.no"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.NumberOfOperands(Tools.ReflectionT.Operators)">
 <summary>Gets number of operands of given operator</summary>
 <param name="Operator">Operator to get number of operands of</param>
 <returns>And-combination of <paramref name="Operator"/> and <see cref="F:Tools.ReflectionT.Operators_masks.NoOfOperands"/></returns>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsStandard(Tools.ReflectionT.Operators)">
 <summary>Gets value indicating if given operator is standard CLI operator</summary>
 <param name="Operator">Operator to get information for</param>
 <returns>Negation of and-combination of <paramref name="Operator"/> and <see cref="F:Tools.ReflectionT.Operators_masks.NonStandard"/></returns>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsAssignment(Tools.ReflectionT.Operators)">
 <summary>Gets value indicating if operator is sassignment operator</summary>
 <param name="Operator">Operator to get information for</param>
 <returns>And-combination of <paramref name="Operator"/> and <see cref="F:Tools.ReflectionT.Operators_masks.Assignment"/></returns>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetImplementedInterfaces(System.Type,System.Boolean)">
 <summary>Gets interfaces implemented by given type</summary>
 <param name="Type">Type to get interfaces from</param>
 <param name="Inherit">True to get all interfaces, false to get only interfaces implemented by this type directly</param>
 <returns>Interfaces inplemented by this type. Whether all or only those implemented by this type directly depends on <paramref name="Inherit"/>.</returns>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsGlobal(System.Reflection.MethodInfo)">
 <summary>Gets value indicating if method is global method</summary>
 <param name="Method">Method to test is it is global</param>
 <returns>True when <paramref name="Method"/>.<see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see> is null</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsGobal(System.Reflection.FieldInfo)">
 <summary>Gets value indicating if field is global field</summary>
 <param name="Field">Field to test is it is global</param>
 <returns>True when <paramref name="Field"/>.<see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see> is null</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Field"/> is null</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetOperators(System.Type,Tools.ReflectionT.Operators)">
 <summary>Gets operators of given kind defined by given type</summary>
 <param name="Type">Type to look for operators on</param>
 <param name="Operator">Type of operator to look for</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <returns>Array of operators of kind <paramref name="Operator"/> specified for <paramref name="Type"/>. An empty aray when no operator was found.</returns>
 <remarks>This overload looks only for public operators.</remarks>
 <version stage="Nightly" version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetOperators(System.Type,Tools.ReflectionT.Operators,System.Reflection.BindingFlags)">
 <summary>Gets operators of given kind defined by given type</summary>
 <param name="Type">Type to look for operators on</param>
 <param name="Operator">Type of operator to look for</param>
 <param name="BindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted. <see cref="F:System.Reflection.BindingFlags.Instance"/> is ignored.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <returns>Array of operators of kind <paramref name="Operator"/> specified for <paramref name="Type"/>. An empty aray when no operator was found.</returns>
 <version stage="Nightly" version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetOperators(System.Type)">
 <summary>Gets all operator defined by given type</summary>
 <param name="Type">Type to look for operators on</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <returns>Array of operators defined by <paramref name="Type"/>. An empty array when <paramref name="Type"/> defines no operaors.</returns>
 <remarks>This overload looks only for public operators.</remarks>
 <version stage="Nightly" version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetOperators(System.Type,System.Reflection.BindingFlags)">
 <summary>Gets all operator defined by given type</summary>
 <param name="Type">Type to look for operators on</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <returns>Array of operators defined by <paramref name="Type"/>. An empty array when <paramref name="Type"/> defines no operaors.</returns>
 <remarks>This overload looks only for public operators.</remarks>
 <param name="BindingAttr">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags"/> that specify how the search is conducted. <see cref="F:System.Reflection.BindingFlags.Instance"/> is ignored.</param>
 <version stage="Nightly" version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetCastOperators(System.Type,System.Type)">
 <summary>Gets all operators that can be possibly used to cast from one type to another</summary>
 <param name="TFrom">Type to cast from</param>
 <param name="TTo">Type to cast to</param>
 <returns>Array of implicit and explicit public cast operator defined on types <paramref name="TFrom"/> and <paramref name="TTo"/> accepting <paramref name="TFrom"/> (or its base type) as parameter and returning <paramref name="TTo"/> (or derived type). Base and derived type are in meanig of <see cref="M:System.Type.IsAssignableFrom(System.Type)"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="TFrom"/> or <paramref name="TTo"/> is null.</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.FindBestFitCastOperator(System.Type,System.Type)">
 <summary>FInds best-fit (most specific) cast operator from one type to another</summary>
 <param name="TFrom">Type to cast from</param>
 <param name="TTo">Type to cast to</param>
 <returns>The best operator to be used to cast type <paramref name="TFrom"/> to type <paramref name="TTo"/>, null if no operator was found</returns>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Operators were found, but no one is most specific.</exception>
 <remarks>Operators are obtained using <see cref="M:Tools.ReflectionT.ReflectionTools.GetCastOperators(System.Type,System.Type)"/> and then specificity is evaluated.
 <list type="numbered">
 <item>Only operatrs which argument is assignale from <paramref name="TFrom"/> and return type can be assigned to <paramref name="TTo"/> are considered. Required custom modifiers (modreq) of argument and return value must not be present.</item>
 <item>Operators are ordered by distance (<see cref="M:Tools.ReflectionT.ReflectionTools.ComputeDistance(System.Type,System.Type)"/>) of operand and <paramref name="TFrom"/>, then by distance of <paramref name="TTo"/> and return type and then implicit befor explicit.</item>
 <item>Firts operator in after such ordering is returned. If more operators has same order, ordering continues.</item>
 <item>Operators are ordered by declaring type. First operators declared directly on <paramref name="TFrom"/>, second operators declared directly on <paramref name="TTo"/>, third operators declard directly on immediate base of <paramref name="TFrom"/>, fourth operators declared directly on immediate base of <paramref name="TTo"/>, fifth operators declared directly on immediate base of immediate base of <paramref name="TFrom"/> etc. <see cref="M:Tools.ReflectionT.ReflectionTools.ComputeDistance(System.Type,System.Type)"/> is used.</item>
 <item>Firts operator in after such ordering is returned. If more operators has same order, ordering continues.</item>
 <item>Operators are ordered by CLS-compliance. CLS-compilant first.</item>
 <item>Firts operator in after such ordering is returned. If more operators has same order, ordering continues.</item>
 <item>Operators are ordered by sum of numbers of optional custom modifiesr (modopt) on parameter and return value.</item>
 <item>Firts operator in after such ordering is returned. If more operators has same order, <see cref="T:System.Reflection.AmbiguousMatchException"/> is thrown.</item>
 </list></remarks>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.FindBinaryOperator(Tools.ReflectionT.Operators,System.Type,System.Type,System.Reflection.BindingFlags,System.Type[])">
 <summary>Finds a method that represents operator for given operation</summary>
 <param name="operator">Indicates which operator to retrieve. This method supports only binary operators.</param>
 <param name="typeA">Type of left operand</param>
 <param name="typeB">Type of right operand</param>
 <param name="bindingFlags">Binding flags to find operor. Note: <see cref="F:System.Reflection.BindingFlags.Static"/> is always used and <see cref="F:System.Reflection.BindingFlags.Instance"/> is never used.</param>
 <param name="fallbackProviders">In case operator is found neither in type <paramref name="typeA"/> nor in <paramref name="typeB"/> this method allows search in arbitrary types for externally defined operators. Operator methods must have same name as operator methods defined in one ope operands' type. Operator methods must be static. Special name is not required.</param>
 <returns>Delegate to operator, or nulll if operator cannot be found</returns>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one operaotr with same level specifyiness found.</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.FindBinaryOperator(Tools.ReflectionT.Operators,System.Type,System.Type,System.Reflection.BindingFlags,System.Boolean)">
 <summary>Finds a method that represents operator for given operation</summary>
 <param name="operator">Indicates which operator to retrieve. This method supports only binary operators.</param>
 <param name="typeA">Type of left operand</param>
 <param name="typeB">Type of right operand</param>
 <param name="bindingFlags">Binding flags to find operor. Note: <see cref="F:System.Reflection.BindingFlags.Static"/> is always used and <see cref="F:System.Reflection.BindingFlags.Instance"/> is never used.</param>
 <param name="useFallback">In case operator is found neither in type <paramref name="typeA"/> nor in <paramref name="typeB"/> when this parameter is true type <see cref="!:NumericsT.Operators"/> is sought ofr externaly defined operators.</param>
 <returns>Delegate to operator, or nulll if operator cannot be found</returns>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one operaotr with same level specifyiness found.</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.FindBinaryOperator(Tools.ReflectionT.Operators,System.Type,System.Type,System.Boolean)">
 <summary>Finds a method that represents operator for given operation</summary>
 <param name="operator">Indicates which operator to retrieve. This method supports only binary operators.</param>
 <param name="typeA">Type of left operand</param>
 <param name="typeB">Type of right operand</param>
 <param name="useFallback">In case operator is found neither in type <paramref name="typeA"/> nor in <paramref name="typeB"/> when this parameter is true type <see cref="!:NumericsT.Operators"/> is sought ofr externaly defined operators.</param>
 <returns>Delegate to operator, or nulll if operator cannot be found</returns>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one operaotr with same level specifyiness found.</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.FindBinaryOperator(Tools.ReflectionT.Operators,System.Type,System.Type,System.Type[])">
 <summary>Finds a method that represents operator for given operation</summary>
 <param name="operator">Indicates which operator to retrieve. This method supports only binary operators.</param>
 <param name="typeA">Type of left operand</param>
 <param name="typeB">Type of right operand</param>
 <param name="fallbackProviders">In case operator is found neither in type <paramref name="typeA"/> nor in <paramref name="typeB"/> this method allows search in arbitrary types for externally defined operators. Operator methods must have same name as operator methods defined in one ope operands' type. Operator methods must be static. Special name is not required.</param>
 <returns>Delegate to operator, or nulll if operator cannot be found</returns>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one operaotr with same level specifyiness found.</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.FindBinaryOperator(Tools.ReflectionT.Operators,System.Type,System.Type)">
 <summary>Finds a method that represents operator for given operation</summary>
 <param name="operator">Indicates which operator to retrieve. This method supports only binary operators.</param>
 <param name="typeA">Type of left operand</param>
 <param name="typeB">Type of right operand</param>
 <returns>Delegate to operator, or nulll if operator cannot be found</returns>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one operaotr with same level specifyiness found.</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.FindBinaryOperator``2(Tools.ReflectionT.Operators)">
 <summary>Finds a method that represents operator for given operation</summary>
 <typeparam name="TA">Type of left operand</typeparam>
 <typeparam name="TB">Type of right operand</typeparam>
 <param name="operator">Indicates which operator to retrieve. This method supports only binary operators.</param>
 <returns>Delegate to operator, or nulll if operator cannot be found</returns>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one operaotr with same level specifyiness found.</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.FindBinaryOperator``2(Tools.ReflectionT.Operators,System.Reflection.BindingFlags,System.Type[])">
 <summary>Finds a method that represents operator for given operation</summary>
 <typeparam name="TA">Type of left operand</typeparam>
 <typeparam name="TB">Type of right operand</typeparam>
 <param name="operator">Indicates which operator to retrieve. This method supports only binary operators.</param>
 <param name="bindingFlags">Binding flags to find operor. Note: <see cref="F:System.Reflection.BindingFlags.Static"/> is always used and <see cref="F:System.Reflection.BindingFlags.Instance"/> is never used.</param>
 <param name="fallbackProviders">In case operator is found neither in type <paramref name="typeA"/> nor in <paramref name="typeB"/> this method allows search in arbitrary types for externally defined operators. Operator methods must have same name as operator methods defined in one ope operands' type. Operator methods must be static. Special name is not required.</param>
 <returns>Delegate to operator, or nulll if operator cannot be found</returns>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one operaotr with same level specifyiness found.</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.FindBinaryOperator``2(Tools.ReflectionT.Operators,System.Boolean)">
 <summary>Finds a method that represents operator for given operation</summary>
 <typeparam name="TA">Type of left operand</typeparam>
 <typeparam name="TB">Type of right operand</typeparam>
 <param name="operator">Indicates which operator to retrieve. This method supports only binary operators.</param>
 <param name="useFallback">In case operator is found neither in type <paramref name="typeA"/> nor in <paramref name="typeB"/> when this parameter is true type <see cref="!:NumericsT.Operators"/> is sought ofr externaly defined operators.</param>
 <returns>Delegate to operator, or nulll if operator cannot be found</returns>
 <exception cref="T:System.Reflection.AmbiguousMatchException">More than one operaotr with same level specifyiness found.</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.ComputeDistance(System.Type,System.Type)">
 <summary>Numerically evaluates distance between base type and derived type</summary>
 <param name="BaseType">Type to be base of <paramref name="DerivedType"/></param>
 <param name="DerivedType">Type to be derived from <paramref name="BaseType"/></param>
 <returns>Value numericaly evaluating distance in inheritance hierarchy of types <paramref name="BaseType"/> and <paramref name="DerivedType"/>.</returns>
 <remarks><paramref name="DerivedType"/> should be derived from <paramref name="BaseType"/> in way of <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> or <paramref name="BaseType"/> should be underlying type of enumeration, when <paramref name="DerivedType"/> is enumeration.
 <para>In case <paramref name="BaseType"/> and <paramref name="DerivedType"/> are swapped, negative value is returned.</para>
 <para>Following rules apply</para>
 <list type="table"><listheader><term>Rule</term><description>Return value</description></listheader>
 <item><term><paramref name="BaseType"/> equals to <paramref name="DerivedType"/></term><description>0 (zero)</description></item>
 <item><term><paramref name="BaseType"/> is not assignable from <paramref name="DerivedType"/>, but <paramref name="DerivedType"/> is assignable from <paramref name="BaseType"/></term><description>Function is called with parameters swapped and negated result is returned.</description></item>
 <item><term><paramref name="DerivedType"/> is enum and its underlying type equals to <paramref name="BaseType"/></term><description>1</description></item>
 <item><term><paramref name="BaseType"/> is enum and its underlying type equals to <paramref name="DerivedType"/></term><description>-1</description></item>
 <item><term><paramref name="BaseType"/> is <see cref="T:System.Object"/></term><description><see cref="T:System.Int32"/></description></item>
 <item><term><paramref name="BaseType"/> is <see cref="T:System.ValueType"/> and <paramref name="DerivedType"/> is value type</term><description><see cref="T:System.Int32"/> - 1</description></item>
 <item><term><paramref name="BaseType"/> is class and <paramref name="DerivedType"/> derives from <paramref name="BaseType"/></term><description>Number of inheritance levels between <paramref name="DerivedType"/> and <paramref name="BaseType"/>. 1 direct inheritance, 2 when <paramref name="DerivedType"/> directly derives from class which directly derives from <paramref name="BaseType"/> etc.</description></item>
 <item><term><paramref name="BaseType"/> is interface and <paramref name="DerivedType"/> directly implements it</term><description><see cref="T:System.Int32"/> - 4</description></item>
 <item><term><paramref name="BaseType"/> is interface and <paramref name="DerivedType"/> derives from type which implements it</term><see cref="T:System.Int32"/> - 3</item>
 <item><term><paramref name="BaseType"/> is generic parameter and <paramref name="DerivedType"/> is one of its constraints</term><description>1</description></item>
 <item><term><paramref name="BaseType"/> is generic parameter and it has constraint which is not <paramref name="DerivedType"/>, but is assignable from <paramref name="DerivedType"/></term>Function is called for the constraint and <paramref name="DerivedType"/> and its result is incremented by 1. Minimum from all these situations (in case more constraints is assignable from <paramref name="DerivedType"/>) is returned.</item>
 <item><term>None of 2 situations above are true and <paramref name="BaseType"/> is generic parameter assignable from <paramref name="DerivedType"/></term><description><see cref="T:System.Int32"/> - 4</description></item>
 <item><term>Neither <paramref name="BaseType"/> is assignable from <paramref name="DerivedType"/> nor <paramref name="DerivedType"/> is assignable from <paramref name="BaseType"/> and neither <paramref name="BaseType"/> is underlying type of enumeration <paramref name="DerivedType"/> nor <paramref name="DerivedType"/> is underlying type of enumeration <paramref name="BaseType"/></term><description><see cref="T:System.ArgumentException"/> is thrown.</description></item>
 </list></remarks>
 <exception cref="T:System.ArgumentException">Types <paramref name="BaseType"/> and <paramref name="DerivedType"/> are not related in terms of class inheritance, iterface implementation, generic constraints and enum underlying type.</exception>
 <version version="1.5.2">Function introduced</version>
 <seelaso cref="M:System.Type.IsAssignableFrom(System.Type)"/><seelaso cref="P:System.Type.IsInterface"/><seelaso cref="P:System.Type.IsValueType"/><seelaso cref="M:System.Object.Equals(System.Object,System.Object)"/><seelaso cref="M:Tools.ReflectionT.ReflectionTools.GetImplementedInterfaces(System.Type,System.Boolean)"/><seelaso cref="P:System.Type.IsGenericParameter"/><seelaso cref="M:System.Type.GetGenericParameterConstraints"/><seelaso cref="M:System.Enum.GetUnderlyingType(System.Type)"/>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Type,System.Reflection.Assembly)">
 <summary>Gets value indicating if given <see cref="T:System.Type"/> or object it is declared on is member of given <see cref="T:System.Reflection.Assembly"/></summary>
 <param name="Type"><see cref="T:System.Type"/> to observe parent of</param>
 <param name="Assembly"><see cref="T:System.Reflection.Assembly"/> to test if it is parent of <paramref name="Type"/></param>
 <returns>True if <paramref name="Assembly"/> is declared inside <paramref name="Type"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> or <paramref name="Assembly"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Type,System.Reflection.Module)">
 <summary>Gets value indicating if given <see cref="T:System.Type"/> or object it is declared on is member of given <see cref="T:System.Reflection.Module"/></summary>
 <param name="Type"><see cref="T:System.Type"/> to observe parent of</param>
 <param name="Module"><see cref="T:System.Reflection.Module"/> to test if it is parent of <paramref name="Type"/></param>
 <returns>True if <paramref name="Module"/> is declared inside <paramref name="Type"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> or <paramref name="Module"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Type,System.Type)">
 <summary>Gets value indicating if given <see cref="T:System.Type"/> or object it is declared on is member of given <see cref="T:System.Type"/></summary>
 <param name="Type"><see cref="T:System.Type"/> to observe parent of</param>
 <param name="DeclaringType"><see cref="T:System.Type"/> to test if it is parent of <paramref name="Type"/></param>
 <returns>True if <paramref name="DeclaringType"/> is declared inside <paramref name="Type"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> or <paramref name="DeclaringType"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Type,Tools.ReflectionT.NamespaceInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Type"/> or object it is declared on is member of given <see cref="T:Tools.ReflectionT.NamespaceInfo"/></summary>
 <param name="Type"><see cref="T:System.Type"/> to observe parent of</param>
 <param name="Namespace"><see cref="T:Tools.ReflectionT.NamespaceInfo"/> to test if it is parent of <paramref name="Type"/></param>
 <returns>True if <paramref name="Namespace"/> is declared inside <paramref name="Type"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> or <paramref name="Namespace"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Type,System.Reflection.MethodInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Type"/> or object it is declared on is member of given <see cref="T:System.Reflection.MethodInfo"/></summary>
 <param name="Type"><see cref="T:System.Type"/> to observe parent of</param>
 <param name="Method"><see cref="T:System.Reflection.MethodInfo"/> to test if it is parent of <paramref name="Type"/></param>
 <returns>True if <paramref name="Method"/> is declared inside <paramref name="Type"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> or <paramref name="Method"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(Tools.ReflectionT.NamespaceInfo,Tools.ReflectionT.NamespaceInfo)">
 <summary>Gets value indicating if given <see cref="T:Tools.ReflectionT.NamespaceInfo"/> or object it is declared on is member of given <see cref="T:Tools.ReflectionT.NamespaceInfo"/></summary>
 <param name="Namespace"><see cref="T:Tools.ReflectionT.NamespaceInfo"/> to observe parent of</param>
 <param name="ParentNamespace"><see cref="T:Tools.ReflectionT.NamespaceInfo"/> to test if it is parent of <paramref name="Namespace"/></param>
 <returns>True if <paramref name="ParentNamespace"/> is declared inside <paramref name="Namespace"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Namespace"/> or <paramref name="ParentNamespace"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.Module,System.Reflection.Assembly)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.Module"/> or object it is declared on is member of given <see cref="T:System.Reflection.Assembly"/></summary>
 <param name="Module"><see cref="T:System.Reflection.Module"/> to observe parent of</param>
 <param name="Assembly"><see cref="T:System.Reflection.Assembly"/> to test if it is parent of <paramref name="Module"/></param>
 <returns>True if <paramref name="Assembly"/> is declared inside <paramref name="Module"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> or <paramref name="Assembly"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MemberInfo,System.Type)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MemberInfo"/> or object it is declared on or is member of given <see cref="T:System.Type"/></summary>
 <param name="Member"><see cref="T:System.Reflection.MemberInfo"/> to observe parent of</param>
 <param name="Type"><see cref="T:System.Type"/> to test if it is parent of <paramref name="Member"/></param>
 <returns>True if <paramref name="Type"/> is declared inside <paramref name="Member"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> or <paramref name="Type"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MemberInfo,System.Reflection.Module)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MemberInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.Module"/></summary>
 <param name="Member"><see cref="T:System.Reflection.MemberInfo"/> to observe parent of</param>
 <param name="Module"><see cref="T:System.Reflection.Module"/> to test if it is parent of <paramref name="Member"/></param>
 <returns>True if <paramref name="Module"/> is declared inside <paramref name="Member"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> or <paramref name="Module"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MemberInfo,System.Reflection.Assembly)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MemberInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.Assembly"/></summary>
 <param name="Member"><see cref="T:System.Reflection.MemberInfo"/> to observe parent of</param>
 <param name="Assembly"><see cref="T:System.Reflection.Assembly"/> to test if it is parent of <paramref name="Member"/></param>
 <returns>True if <paramref name="Assembly"/> is declared inside <paramref name="Member"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> or <paramref name="Assembly"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MemberInfo,Tools.ReflectionT.NamespaceInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MemberInfo"/> or object it is declared on is member of given <see cref="T:Tools.ReflectionT.NamespaceInfo"/></summary>
 <param name="Member"><see cref="T:System.Reflection.MemberInfo"/> to observe parent of</param>
 <param name="Namespace"><see cref="T:Tools.ReflectionT.NamespaceInfo"/> to test if it is parent of <paramref name="Member"/></param>
 <returns>True if <paramref name="Namespace"/> is declared inside <paramref name="Member"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> or <paramref name="Namespace"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(Tools.ReflectionT.NamespaceInfo,System.Reflection.Module)">
 <summary>Gets value indicating if given <see cref="T:Tools.ReflectionT.NamespaceInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.Module"/></summary>
 <param name="Namespace"><see cref="T:Tools.ReflectionT.NamespaceInfo"/> to observe parent of</param>
 <param name="Module"><see cref="T:System.Reflection.Module"/> to test if it is parent of <paramref name="Namespace"/></param>
 <returns>True if <paramref name="Module"/> is declared inside <paramref name="Namespace"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Namespace"/> or <paramref name="Module"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(Tools.ReflectionT.NamespaceInfo,System.Reflection.Assembly)">
 <summary>Gets value indicating if given <see cref="T:Tools.ReflectionT.NamespaceInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.Assembly"/></summary>
 <param name="Namespace"><see cref="T:Tools.ReflectionT.NamespaceInfo"/> to observe parent of</param>
 <param name="Assembly"><see cref="T:System.Reflection.Assembly"/> to test if it is parent of <paramref name="Namespace"/></param>
 <returns>True if <paramref name="Assembly"/> is declared inside <paramref name="Namespace"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Namespace"/> or <paramref name="Assembly"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MethodInfo,System.Reflection.PropertyInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MethodInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.PropertyInfo"/></summary>
 <param name="Method"><see cref="T:System.Reflection.MethodInfo"/> to observe parent of</param>
 <param name="Property"><see cref="T:System.Reflection.PropertyInfo"/> to test if it is parent of <paramref name="Method"/></param>
 <returns>True if <paramref name="Property"/> is declared inside <paramref name="Method"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> or <paramref name="Property"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MethodInfo,System.Reflection.EventInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MethodInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.EventInfo"/></summary>
 <param name="Method"><see cref="T:System.Reflection.MethodInfo"/> to observe parent of</param>
 <param name="Event"><see cref="T:System.Reflection.EventInfo"/> to test if it is parent of <paramref name="Method"/></param>
 <returns>True if <paramref name="Event"/> is declared inside <paramref name="Method"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> or <paramref name="Event"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MemberInfo,System.Reflection.MethodInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MemberInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.MethodInfo"/></summary>
 <param name="Member"><see cref="T:System.Reflection.MemberInfo"/> to observe parent of</param>
 <param name="Method"><see cref="T:System.Reflection.MethodInfo"/> to test if it is parent of <paramref name="Member"/></param>
 <returns>True if <paramref name="Method"/> is declared inside <paramref name="Member"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> or <paramref name="Method"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MemberInfo,System.Reflection.PropertyInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MemberInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.PropertyInfo"/></summary>
 <param name="Member"><see cref="T:System.Reflection.MemberInfo"/> to observe parent of</param>
 <param name="Property"><see cref="T:System.Reflection.PropertyInfo"/> to test if it is parent of <paramref name="Member"/></param>
 <returns>True if <paramref name="Property"/> is declared inside <paramref name="Member"/></returns>
 <remarks>This function is unlikely to return true when <paramref name="Member"/> isnot <see cref="T:System.Reflection.MethodInfo"/> because it is improbable that generic property exists.</remarks>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="2"/> or <paramref name="6"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MemberInfo,System.Reflection.EventInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MemberInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.EventInfo"/></summary>
 <param name="Member"><see cref="T:System.Reflection.MemberInfo"/> to observe parent of</param>
 <param name="Event"><see cref="T:System.Reflection.EventInfo"/> to test if it is parent of <paramref name="Member"/></param>
 <returns>True if <paramref name="Event"/> is declared inside <paramref name="Member"/></returns>
 <remarks>This function is unlikely to return true when <paramref name="Member"/> isnot <see cref="T:System.Reflection.MethodInfo"/> because it is improbable that generic event exists.</remarks>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="2"/> or <paramref name="6"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.ParameterInfo,System.Reflection.MethodInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.ParameterInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.MethodInfo"/></summary>
 <param name="Param"><see cref="T:System.Reflection.ParameterInfo"/> to observe parent of</param>
 <param name="Method"><see cref="T:System.Reflection.MethodInfo"/> to test if it is parent of <paramref name="Param"/></param>
 <returns>True if <paramref name="Method"/> is declared inside <paramref name="Param"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Param"/> or <paramref name="Method"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.ParameterInfo,System.Type)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.ParameterInfo"/> or object it is declared on is member of given <see cref="T:System.Type"/></summary>
 <param name="Param"><see cref="T:System.Reflection.ParameterInfo"/> to observe parent of</param>
 <param name="Type"><see cref="T:System.Type"/> to test if it is parent of <paramref name="Param"/></param>
 <returns>True if <paramref name="Type"/> is declared inside <paramref name="Param"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Param"/> or <paramref name="Type"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.ParameterInfo,System.Reflection.MemberInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.ParameterInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.MemberInfo"/></summary>
 <param name="Param"><see cref="T:System.Reflection.ParameterInfo"/> to observe parent of</param>
 <param name="Member"><see cref="T:System.Reflection.MemberInfo"/> to test if it is parent of <paramref name="Param"/></param>
 <returns>True if <paramref name="Member"/> is declared inside <paramref name="Param"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Param"/> or <paramref name="Member"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.ParameterInfo,Tools.ReflectionT.NamespaceInfo)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.ParameterInfo"/> or object it is declared on is member of given <see cref="T:Tools.ReflectionT.NamespaceInfo"/></summary>
 <param name="Param"><see cref="T:System.Reflection.ParameterInfo"/> to observe parent of</param>
 <param name="Namespace"><see cref="T:Tools.ReflectionT.NamespaceInfo"/> to test if it is parent of <paramref name="Param"/></param>
 <returns>True if <paramref name="Namespace"/> is declared inside <paramref name="Param"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Param"/> or <paramref name="Namespace"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.ParameterInfo,System.Reflection.Module)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.ParameterInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.Module"/></summary>
 <param name="Param"><see cref="T:System.Reflection.ParameterInfo"/> to observe parent of</param>
 <param name="Module"><see cref="T:System.Reflection.Module"/> to test if it is parent of <paramref name="Param"/></param>
 <returns>True if <paramref name="Module"/> is declared inside <paramref name="Param"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Param"/> or <paramref name="Module"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.ParameterInfo,System.Reflection.Assembly)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.ParameterInfo"/> or object it is declared on is member of given <see cref="T:System.Reflection.Assembly"/></summary>
 <param name="Param"><see cref="T:System.Reflection.ParameterInfo"/> to observe parent of</param>
 <param name="Assembly"><see cref="T:System.Reflection.Assembly"/> to test if it is parent of <paramref name="Param"/></param>
 <returns>True if <paramref name="Assembly"/> is declared inside <paramref name="Param"/></returns>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Param"/> or <paramref name="Assembly"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.ParameterInfo,System.Object)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.ParameterInfo"/> or object it is declared on is member of given CLI object</summary>
 <param name="Param"><see cref="T:System.Reflection.ParameterInfo"/> to observe parent of</param>
 <param name="Parent"><see cref="T:System.Object"/> to test if it is parent of <paramref name="Param"/></param>
 <returns>True if <paramref name="Parent"/> is declared inside <paramref name="Param"/></returns>
 <remarks>Supported types of <paramref name="Parent"/> are <see cref="T:System.Reflection.Assembly"/>, <see cref="T:System.Reflection.Module"/>, <see cref="T:Tools.ReflectionT.NamespaceInfo"/>, <see cref="T:System.Reflection.MemberInfo"/>. For any other type, this function returns false.</remarks>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Param"/> or <paramref name="Parent"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.MemberInfo,System.Object)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.MemberInfo"/> or object it is declared on is member of given CLI object</summary>
 <param name="Member"><see cref="T:System.Reflection.MemberInfo"/> to observe parent of</param>
 <param name="Parent"><see cref="T:System.Object"/> to test if it is parent of <paramref name="Member"/></param>
 <returns>True if <paramref name="Parent"/> is declared inside <paramref name="Member"/></returns>
 <remarks>Supported types of <paramref name="Parent"/> are <see cref="T:System.Reflection.Assembly"/>, <see cref="T:System.Reflection.Module"/>, <see cref="T:Tools.ReflectionT.NamespaceInfo"/>, <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MethodInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/>. For any other type, this function returns false.</remarks>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> or <paramref name="Parent"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(Tools.ReflectionT.NamespaceInfo,System.Object)">
 <summary>Gets value indicating if given <see cref="T:Tools.ReflectionT.NamespaceInfo"/> or object it is declared on is member of given CLI object</summary>
 <param name="Namespace"><see cref="T:Tools.ReflectionT.NamespaceInfo"/> to observe parent of</param>
 <param name="Parent"><see cref="T:System.Object"/> to test if it is parent of <paramref name="Namespace"/></param>
 <returns>True if <paramref name="Parent"/> is declared inside <paramref name="Namespace"/></returns>
 <remarks>Supported types of <paramref name="Parent"/> are <see cref="T:System.Reflection.Assembly"/>, <see cref="T:System.Reflection.Module"/>, <see cref="T:Tools.ReflectionT.NamespaceInfo"/>. For any other type, this function returns false.</remarks>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Namespace"/> or <paramref name="Parent"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsMemberOf(System.Reflection.Module,System.Object)">
 <summary>Gets value indicating if given <see cref="T:System.Reflection.Module"/> or object it is declared on is member of given CLI object</summary>
 <param name="Module"><see cref="T:System.Reflection.Module"/> to observe parent of</param>
 <param name="Parent"><see cref="T:System.Object"/> to test if it is parent of <paramref name="Module"/></param>
 <returns>True if <paramref name="Parent"/> is declared inside <paramref name="Module"/></returns>
 <remarks>Supported types of <paramref name="Parent"/> are <see cref="T:System.Reflection.Assembly"/>. For any other type, this function returns false.</remarks>
 <version version="1.5.2">Function introduced</version>
 <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> or <paramref name="Parent"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.GetOverridingMethod(System.Reflection.MethodInfo,System.Type)">
 <summary>Gets method that overrides given method in given type</summary>
 <param name="Method">Method to get overriding method for</param>
 <param name="DerivedType">Type derived from <paramref name="Method"/>.<see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see> to get method of (or base of)</param>
 <returns><paramref name="Method"/> when <paramref name="Method"/> is not overriden in <paramref name=" DerivedType"/> or one of its base classed between <paramref name="Method"/>.<see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see> and <paramref name="DerivedType"/>;
 Overriding method of <paramref name="DerivedType"/> or one of its base types (between <paramref name="Method"/>.<see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see> and <paramref name="DerivedType"/> otherwise.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> or <paramref name="DerivedType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Method"/>.<see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see> is null (it is global method) -or-
 <paramref name="DerivedType"/> does not derive from <paramref name="Method"/>.<see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see>.</exception>
 <remarks>Note that no type really derives from open generic type. <see cref="P:System.Type.BaseType"/> for type deriving from open generict type always returns closed generic type with generic parameters passed from deriving type to base type. This means that determining overriding method for member method of open generic type is impossible - <see cref="T:System.ArgumentException"/> is thrown when <paramref name="Method"/>.<see cref="P:System.Reflection.MemberInfo.DeclaringType">DeclaringType</see> is open or semi-constructed generic type, because <paramref name="DerivedType"/>.<see cref="P:System.Type.BaseType">BaseType</see> never returns such type.</remarks>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.IsCreatedFrom(System.Type,System.Type)">
 <summary>Gets value indicationg if constructed or semi-constructed generic type is constructed from given open semi-constructed generic type</summary>
 <param name="Instance">Constructed or semi-constructed generic type</param>
 <param name="Definition">Open or semi-constructed generict type</param>
 <returns>True when <paramref name="Instance"/> represents closed or semi-constructed generic type created from <paramref name="Definition"/> by replacing all not-yet-replaced type arguments by corresponding arguments of <paramref name="Instance"/>.</returns>
 <remarks>
 Terminology note:
 <list type="table"><listheader><term>term</term><description>description</description></listheader>
 <item><term>Generic type</term><description>Type that accepts one or more generic arguments, such as <see cref="T:System.Collections.Generic.List`1"/></description></item>
 <item><term>Open generic type</term><description>Generic type without type arguments supplied. In Visual Basic you can obtain such type by <c>GetType(List(Of ))</c> or <c>GetType(Dictionary(Of ,))</c></description></item>
 <item><term>Closed generic type</term><description>Generic type with all the type arguments suplied. Note: Supplied types can be generic arguments of another (even open) generic type, such as derived class. So, base class of derived class is never open generic type, it's always closed generic type with appropriate type arguments supplied.</description></item>
 <item><term>Constructed generic type</term><description>Same meaning as closed generic type</description></item>
 <item><term>Semi-constucted generic type</term><description>Generic type with some type arguments supplied and some not supplied. E.g. declaring type of nested generic type (with own type arguments of nested type) is semi-constructed.</description></item>
 <item><term>Generic type definition</term><description>Generic type definition is open generic type</description></item>
 <item><term>Generic type instance</term><description>Generic type instance is constructed generic type</description></item>
 </list>
 This method returns true when <paramref name="Definition"/> open generic type and <paramref name="Instance"/> is any closed or semi-constructed generic type made form it.
 Or it returns tru when <paramref name="Definition"/> is semi-constructed generic type and <paramref name="Instance"/> is "more" constructed generic type which has all specified type arguments of <paramref name="Definition"/> passed (and at leas one more).
 This method returns false when <paramref name="Definition"/> and <paramref name="Instance"/> represents same types.
 </remarks>
 <version version="1.5.2">Method introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.HasSameSignature(System.Reflection.MethodInfo,System.Reflection.MethodInfo,Tools.ReflectionT.SignatureComparisonStrictness)">
 <summary>Determines if two methods have same signatures. Several levels of signature comparison are available.</summary>
 <param name="a">A <see cref="T:System.Reflection.MethodInfo"/></param>
 <param name="b">A <see cref="T:System.Reflection.MethodInfo"/></param>
 <param name="Strictness">Defines level of comparison</param>
 <returns>True if <paramref name="a"/> and <paramref name="b"/> have same signature in meaning of <paramref name="Strictness"/>; false otherwise</returns>
 <remarks>Signature comparison does not include comparison of custom attributes (with exception of <see cref="T:System.Runtime.InteropServices.InAttribute"/> and <see cref="T:System.Runtime.InteropServices.OutAttribute"/>) and does not include comparison of method attributes (such as if it is private, public or specialname). Callig convention is ignored as well.
 <para>When comparing modreqs and modopts only first-level modifiers are taken in effect. Modifiers applied onto element-type of pointer, refernce or array and onto types of generic type are ignored. This is due to limitation of <see cref="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers"/> and <see cref="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers"/>.</para></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> or <paramref name="b"/> is null.</exception>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.ReflectionT.ReflectionTools.Parent(System.Reflection.ICustomAttributeProvider)">
 <summary>Gets immediate parent code object of another code object</summary>
 <param name="item">Item to get paret of</param>
 <returns>Parent of <paramref name="item"/>, null if <paramref name="item"/> does not have a parent.</returns>
 <remarks>
 For property and event accessors returns the property/event if it's declared in the same type.
 If method serves as accessor for more properites or events (in the same type), first is taken.
 If method serves as accessor for property/ies and event(s (in the same type), 1ts property found takes precendence.
 <para>For <see cref="T:System.Reflection.Assembly"/> always returns null.</para>
 </remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="T:Tools.ReflectionT.Visibility">
 <summary>Any member visibility</summary>
 <seelaso cref="T:System.Reflection.MethodAttributes"/><seelaso cref="T:System.Reflection.TypeAttributes"/>
 <remarks>Values of members of this enumeration are same as values of corresponding members of <see cref="T:System.Reflection.MethodAttributes"/>.</remarks>
</member>
<member name="F:Tools.ReflectionT.Visibility.Private">
 <summary>Indicates that the mmeber is accessible only to the current class.</summary>
 <seelaso cref="F:System.Reflection.MethodAttributes.Private"/><seelaso cref="F:System.Reflection.TypeAttributes.NestedPrivate"/>
</member>
<member name="F:Tools.ReflectionT.Visibility.Public">
 <summary>Indicates that the member is accessible to any object for which this object is in scope.</summary>
 <seelaso cref="F:System.Reflection.MethodAttributes.Public"/><seelaso cref="F:System.Reflection.TypeAttributes.Public"/><seelaso cref="F:System.Reflection.TypeAttributes.NestedPublic"/>
 <remarks>For <see cref="T:System.Type"/> includes <see cref="F:System.Reflection.TypeAttributes.Public"/> and <see cref="F:System.Reflection.TypeAttributes.NestedPublic"/></remarks>
</member>
<member name="F:Tools.ReflectionT.Visibility.Family">
 <summary>Indicates that the member is accessible only to members of this class and its derived classes.</summary>
 <seelaso cref="F:System.Reflection.MethodAttributes.Family"/><seelaso cref="F:System.Reflection.TypeAttributes.NestedFamily"/>
</member>
<member name="F:Tools.ReflectionT.Visibility.FamORAssem">
 <summary>Indicates that the member is accessible to derived classes anywhere, as well as to any class in the assembly.</summary>
 <seelaso cref="F:System.Reflection.MethodAttributes.FamORAssem"/><seelaso cref="F:System.Reflection.TypeAttributes.NestedFamORAssem"/>
</member>
<member name="F:Tools.ReflectionT.Visibility.FamANDAssem">
 <summary>Indicates that the member is accessible to members of this type and its derived types that are in this assembly only.</summary>
 <seelaso cref="F:System.Reflection.MethodAttributes.FamANDAssem"/><seelaso cref="F:System.Reflection.TypeAttributes.NestedFamANDAssem"/>
</member>
<member name="F:Tools.ReflectionT.Visibility.Assembly">
 <summary>Indicates that the member is accessible to any class of this assembly.</summary>
 <seelaso cref="F:System.Reflection.MethodAttributes.Assembly"/><seelaso cref="F:System.Reflection.TypeAttributes.NotPublic"/><seelaso cref="F:System.Reflection.TypeAttributes.NestedAssembly"/>
 <remarks>For <see cref="T:System.Type"/> includes <see cref="F:System.Reflection.TypeAttributes.NotPublic"/> and <see cref="F:System.Reflection.TypeAttributes.NestedAssembly"/></remarks>
</member>
<member name="T:Tools.ReflectionT.SignatureComparisonStrictness">
 <summary>Defines how method signature comparison is performed</summary>
 <remarks>This enumeration is treaded as flags, each set or unset. Several predefined combinations of flags also exists.
 <para>When <see cref="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreByRef"/> and <see cref="F:Tools.ReflectionT.SignatureComparisonStrictness.TreatPointerAsReference"/> are both set:
 Both - T* and T&amp; are treated as T. T*&amp; (reference to pointer) is treated as T* and T&amp;* (pointer to reference) is treated as T.</para></remarks>
 <version version="1.5.2">Enumeration intorduced</version>
</member>
<member name="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreDirection">
 <summary>Set this flag to ignore direction of method parameter. <see cref="T:System.Runtime.InteropServices.InAttribute"/> and <see cref="T:System.Runtime.InteropServices.OutAttribute"/> are ignored. Does not affect testing if parameter is passed by reference or by value.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreModOpt">
 <summary>Ignore optional modifiers on parameters (modopts). Nested modopts are always ignored i.e. modopts on pointer/reference/array/generic internal type(s).</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreModReq">
 <summary>Ignore required modifiers on parameters (modreqs). Nested modreqs are always ignored i.e. modreqs on pointer/reference/array/generic internal type(s).</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreReturn">
 <summary>Ignore return value completelly (ignores return type and return modopts and modreqs)</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreByRef">
 <summary>Consider parameter passed by value and by reference to by of same type. Note: Physically the type of such parameters differs.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureComparisonStrictness.TreatPointerAsReference">
 <summary>Treat pointer to type (*) in same way as reference to type (&amp;, ByRef) - see <see cref="P:System.Type.IsByRef"/> and <see cref="P:System.Type.IsPointer"/>.
 When combined with <see cref="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreByRef"/>, pointer to type is treated as type itself.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureComparisonStrictness.Strict">
 <summary>Default. Comparison includes type of parameter, direction, custpm and optional modifiers and does consider parameters passed by value and by reference to be of different type.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureComparisonStrictness.CLS">
 <summary>This how method signatures are compared according to CLS-rules - direction, modopts, modreqs and retun type are ignored. Note: CLS does not ignore return type for op_Implicit and op_Explicit operator methods (use <see cref="F:Tools.ReflectionT.SignatureComparisonStrictness.CLS">CLS</see> AND NOT <see cref="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreReturn">IgnoreReturn</see> for them).</summary>
 <seelaso cref="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreDirection"/><seelaso cref="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreModOpt"/><seelaso cref="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreModReq"/> <seelaso cref="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreReturn"/>
</member>
<member name="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreModifiers">
 <summary>Ignore both - optional and required modifiers (modopts and modreqs)</summary>
 <seelaso cref="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreModOpt"/><seelaso cref="F:Tools.ReflectionT.SignatureComparisonStrictness.IgnoreModReq"/>
</member>
<member name="T:Tools.ReflectionT.ISignatureProvider">
 <summary>Provides interface of object that provides string representation of various reflection object</summary>
</member>
<member name="P:Tools.ReflectionT.ISignatureProvider.Name">
 <summary>Gets name of current provider</summary>
</member>
<member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(System.Reflection.AssemblyName,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of an assembly name</summary>
 <param name="Assembly">Assembly to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Assembly"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Assembly"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(System.Reflection.Assembly,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of an assembly</summary>
 <param name="Assembly">Assembly to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Assembly"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Assembly"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(System.Reflection.Module,Tools.ReflectionT.SignatureFlags)">
 <summary>gets representation of a module</summary>
 <param name="Module">Module to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Module"/></returns>
 ''' <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(Tools.ReflectionT.NamespaceInfo,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of a namespace</summary>
 <param name="Namespace">Namespace to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Namespace"/></returns>
 ''' <exception cref="T:System.ArgumentNullException"><paramref name="Namespace"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ISignatureProvider.GetSignature(System.Reflection.MemberInfo,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of a member</summary>
 <param name="Member">Member to represent</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of <paramref name="Member"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
</member>
<member name="M:Tools.ReflectionT.ISignatureProvider.GetAttribute(System.Reflection.CustomAttributeData,Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of attached custom attribute</summary>
 <param name="AttributeData"><see cref="T:System.Reflection.CustomAttributeData"/> to show</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of given custom attribute</returns>
</member>
<member name="M:Tools.ReflectionT.ISignatureProvider.GetAttributes(System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData},Tools.ReflectionT.SignatureFlags)">
 <summary>Gets string representation of attached custom attributes</summary>
 <param name="AttributeData">Collection of <see cref="T:System.Reflection.CustomAttributeData"/> to show</param>
 <param name="Flags">Controls how the signature will be rendered</param>
 <returns>String representation of given custom attributes</returns>
</member>
<member name="T:Tools.ReflectionT.SignatureFlags">
 <summary>Instructions for signature provider to which parts of signature to include in resulting string</summary>
 <remarks>Signature provider may chose to not generate some parts even when asked to and generate some parts even when not asked to</remarks>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.ShortNameOnly">
 <summary>Only short name included. This has value 0.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.AccessModifiers">
 <summary>Include access modifiers shuch ase Private, Public, etc.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.OtherModifiers">
 <summary>Include other modifiers such as Static, Overrides, etc.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.ObjectType">
 <summary>Include object type such as Class, Function, etc.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.LongName">
 <summary>Use fullly qualified name (otherwise short name is used)</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.GenericParameters">
 <summary>Include generic parameter names</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.GenericParametersDetails">
 <summary>Include generic parameter details (constraints). Works only when <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParameters"/> is set.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.FullGenericparameters">
 <summary>Include generic parameters with detauils (constraints). This is combination of <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParameters"/> and <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParametersDetails"/></summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.Signature">
 <summary>Include method signature (types of arguments only)</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.SignatureDetails">
 <summary>Include names and other details in signarure. valid only if <see cref="F:Tools.ReflectionT.SignatureFlags.Signature"/> is set</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.FullSignature">
 <summary>Include full signature with all details. Tis is combination of <see cref="F:Tools.ReflectionT.SignatureFlags.Signature"/> and <see cref="F:Tools.ReflectionT.SignatureFlags.SignatureDetails"/>.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.Type">
 <summary>Include (return) type. (Also type of enumeration or delegate type of event.)</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.Inheritance">
 <summary>Include inheritance and implementatipon info</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.SomeAttributes">
 <summary>Include some attribute commonly used by the provider</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.AllAttributes">
 <summary>Incklude all attributes. When set <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> has no effect.</summary>
 <remarks>This is advanced and provider may not support it and ignore.
 If provider does not suppiort this but support <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> it should use it instead.</remarks>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.Short">
 <summary>Short but meaningful signature. This is combination of <see cref="F:Tools.ReflectionT.SignatureFlags.GenericParameters"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.Signature"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.NoEmptyBraces"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.AllShortNames"/> and (in fact or) <see cref="F:Tools.ReflectionT.SignatureFlags.NoMultiline"/>.</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.Detailed">
 <summary>Detailed signature. Only flags not set are <see cref="F:Tools.ReflectionT.SignatureFlags.LongName"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.AllAttributes"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.NoEmptyBraces"/>, <see cref="F:Tools.ReflectionT.SignatureFlags.AllShortNames"/> and <see cref="F:Tools.ReflectionT.SignatureFlags.NoMultiline"/></summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.Full">
 <summary>Full details. This is combination of <see cref="F:Tools.ReflectionT.SignatureFlags.Detailed"/> and <see cref="F:Tools.ReflectionT.SignatureFlags.AllAttributes"/> with <see cref="F:Tools.ReflectionT.SignatureFlags.SomeAttributes"/> not set</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.NoEmptyBraces">
 <summary>Instructs provider tom emmit possible empty braces in signature (e.g. for method with no parameters)</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.AllShortNames">
 <summary>Instructs provider to render only short names of types in signatures (for generic argumens and method parameters, omits namespace part of type name)</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.NoMultiline">
 <summary>Instructs provider not to create multiline code</summary>
</member>
<member name="F:Tools.ReflectionT.SignatureFlags.Strict">
 <summary>Instructs provider to create only such fragments that are supported by provider's language.</summary>
 <remarks> This does not necesarily mean that provider will provide code that is valid in target language (i.e. if it is also instructed to ommit element type definition (<see cref="F:Tools.ReflectionT.SignatureFlags.ObjectType"/> is not set) or omit empty braces (<see cref="F:Tools.ReflectionT.SignatureFlags.NoEmptyBraces"/>).
 This mean that unsupported constructs will not be provided - it will be writtent in other way. I.e. VB does not support overloading of <c>AndAlso</c> (&amp;&amp; in C#) operator, so in strict mode the provider will return <c>Public Shared Function op_LogicalAnd</c> instead of <c>Public Shared Operator AndAlso</c>.</remarks>
</member>
<member name="T:Tools.EmptyArray`1">
 <summary>Provides static instances of empty arrays of any type</summary>
 <typeparam name="T">Type of array to get</typeparam>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.EmptyArray`1.#ctor">
 <summary>Private CTor to achieve pseudo-static class</summary>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="F:Tools.EmptyArray`1.value">
 <summary>Gets static empty array of given type</summary>
 <remarks>For type <see cref="T:System.Type"/> gets <see cref="F:System.Type.EmptyTypes"/></remarks>
</member>
<member name="T:Tools.EmptyArray">
 <summary>Provides static instances of empty arrays of common .NET types</summary>
 <version version="1.5.4">This class is new in version 1.5.4</version>
</member>
<member name="M:Tools.EmptyArray.#ctor">
 <summary>Private CTor to achieve pseudo-static class</summary>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="P:Tools.EmptyArray.Byte">
 <summary>Gets an empty array of type <see cref="T:System.Byte"/></summary>
</member>
<member name="P:Tools.EmptyArray.SByte">
 <summary>Gets an empty array of type <see cref="T:System.SByte"/></summary>
</member>
<member name="P:Tools.EmptyArray.Int16">
 <summary>Gets an empty array of type <see cref="T:System.Int16"/></summary>
</member>
<member name="P:Tools.EmptyArray.Int32">
 <summary>Gets an empty array of type <see cref="T:System.Int32"/></summary>
</member>
<member name="P:Tools.EmptyArray.Int64">
 <summary>Gets an empty array of type <see cref="T:System.Int64"/></summary>
</member>
<member name="P:Tools.EmptyArray.UInt16">
 <summary>Gets an empty array of type <see cref="T:System.UInt16"/></summary>
</member>
<member name="P:Tools.EmptyArray.UInt32">
 <summary>Gets an empty array of type <see cref="T:System.UInt32"/></summary>
</member>
<member name="P:Tools.EmptyArray.UInt64">
 <summary>Gets an empty array of type <see cref="T:System.UInt64"/></summary>
</member>
<member name="P:Tools.EmptyArray.Single">
 <summary>Gets an empty array of type <see cref="T:System.Single"/></summary>
</member>
<member name="P:Tools.EmptyArray.Double">
 <summary>Gets an empty array of type <see cref="T:System.Double"/></summary>
</member>
<member name="P:Tools.EmptyArray.Boolean">
 <summary>Gets an empty array of type <see cref="T:System.Boolean"/></summary>
</member>
<member name="P:Tools.EmptyArray.Char">
 <summary>Gets an empty array of type <see cref="T:System.Char"/></summary>
</member>
<member name="P:Tools.EmptyArray.Decimal">
 <summary>Gets an empty array of type <see cref="T:System.Decimal"/></summary>
</member>
<member name="P:Tools.EmptyArray.String">
 <summary>Gets an empty array of type <see cref="T:System.String"/></summary>
</member>
<member name="P:Tools.EmptyArray.Type">
 <summary>Gets an empty array of type <see cref="T:System.Type"/></summary>
</member>
<member name="P:Tools.EmptyArray.DateTime">
 <summary>Gets an empty array of type <see cref="T:System.DateTime"/></summary>
</member>
<member name="P:Tools.EmptyArray.TimeSpan">
 <summary>Gets an empty array of type <see cref="T:System.TimeSpan"/></summary>
</member>
<member name="P:Tools.EmptyArray.DateTimeOffset">
 <summary>Gets an empty array of type <see cref="T:System.DateTimeOffset"/></summary>
</member>
<member name="P:Tools.EmptyArray.Object">
 <summary>Gets an empty array of type <see cref="T:System.Object"/></summary>
</member>
<member name="P:Tools.EmptyArray.Guid">
 <summary>Gets an empty array of type <see cref="T:System.Guid"/></summary>
</member>
<member name="P:Tools.EmptyArray.Enum">
 <summary>Gets an empty array of type <see cref="T:System.Enum"/></summary>
</member>
<member name="P:Tools.EmptyArray.Delegate">
 <summary>Gets an empty array of type <see cref="T:System.Delegate"/></summary>
</member>
<member name="P:Tools.EmptyArray.Attribute">
 <summary>Gets an empty array of type <see cref="T:System.Attribute"/></summary>
</member>
<member name="P:Tools.EmptyArray.Exception">
 <summary>Gets an empty array of type <see cref="T:System.Exception"/></summary>
</member>
<member name="T:Tools.Operators">
 <summary>Defines operator methods for basic CLR types</summary>
 <version version="1.5.3" stage="Nightly">This module is new in version 1.5.3</version>
</member>
<member name="T:Tools.Operators.CharHelper">
 <summary>Helper structure - represents union of <see cref="T:System.Char"/> and <see cref="T:System.UInt16"/></summary>
</member>
<member name="F:Tools.Operators.CharHelper.char">
 <summary><see cref="T:System.Char"/> value</summary>
</member>
<member name="F:Tools.Operators.CharHelper.uShort">
 <summary><see cref="T:System.UInt16"/> value</summary>
</member>
<member name="M:Tools.Operators.CharHelper.#ctor(System.Char)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.Operators.CharHelper"/> union from <see cref="T:System.Char"/> value</summary>
</member>
<member name="M:Tools.Operators.CharHelper.#ctor(System.UInt16)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.Operators.CharHelper"/> union from <see cref="T:System.UInt16"/> value</summary>
</member>
<member name="M:Tools.Operators.op_Decrement(System.Byte)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.Byte.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.SByte)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.SByte.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.Int16)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.Int16.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.UInt16)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.UInt16.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.Int32)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.Int32.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.UInt32)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.UInt32.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.Int64)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.Int64.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.UInt64)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.UInt64.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.Single)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.Single.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.Double)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.Double.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Decrement(System.Char)">
 <summary>Unary decrement operator (--)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is less than <see cref="F:System.Char.MinValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Increment(System.Byte)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is greater than <see cref="F:System.Byte.MaxValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Increment(System.SByte)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is greater than <see cref="F:System.SByte.MaxValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Increment(System.Int16)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is greater than <see cref="F:System.Int16.MaxValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Increment(System.UInt16)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is greater than <see cref="F:System.UInt16.MaxValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Increment(System.Int32)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is greater than <see cref="F:System.Int32.MaxValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Increment(System.UInt32)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is greater than <see cref="F:System.UInt32.MaxValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Increment(System.Int64)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is greater than <see cref="F:System.Int64.MaxValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Increment(System.UInt64)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is greater than <see cref="F:System.UInt64.MaxValue"/></exception>
</member>
<member name="M:Tools.Operators.op_Increment(System.Single)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
</member>
<member name="M:Tools.Operators.op_Increment(System.Double)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
</member>
<member name="M:Tools.Operators.op_Increment(System.Char)">
 <summary>Unary increment operator (++)</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/> - 1</returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> - 1 is greater than <see cref="F:System.Char.MaxValue"/></exception>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.Byte)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> is not 0</exception>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.SByte)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
 <exception cref="T:System.OverflowException"> <paramref name="a"/> is <see cref="F:System.SByte.MinValue"/> (-128)</exception>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.Int16)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
 <exception cref="T:System.OverflowException"> <paramref name="a"/> is <see cref="F:System.Int16.MinValue"/> (-32768)</exception>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.UInt16)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> is not 0</exception>    
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.Int32)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
 <exception cref="T:System.OverflowException"> <paramref name="a"/> is <see cref="F:System.Int32.MinValue"/> (-2147483648)</exception>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.UInt32)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> is not 0</exception>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.Int64)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
 <exception cref="T:System.OverflowException"> <paramref name="a"/> is <see cref="F:System.Int64.MinValue"/> (-9223372036854775808)</exception>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.UInt64)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> is not 0</exception>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.Single)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.Double)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryNegation(System.Char)">
 <summary>Unary negation operator (-)</summary>
 <param name="a">A value</param>
 <returns>-<paramref name="a"/></returns>
 <exception cref="T:System.OverflowException"><paramref name="a"/> is not <see cref="F:Tools.Chars.NullChar"/></exception>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.Byte)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.SByte)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.Int16)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.UInt16)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.Int32)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.UInt32)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.Int64)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.UInt64)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.Single)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.Double)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_UnaryPlus(System.Char)">
 <summary>Unary plus operator (+)</summary>
 <param name="a">A value</param>
 <returns>+<paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalNot(System.Boolean)">
 <summary>Logical not operator (!, Not)</summary>
 <param name="a">A value</param>
 <returns>Not <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_True(System.Byte)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.SByte)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.Int16)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.UInt16)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.Int32)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.UInt32)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.Int64)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.UInt64)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.Single)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.Double)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.Char)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns>True if <paramref name="a"/> represents logical value true, false otherwise</returns>
</member>
<member name="M:Tools.Operators.op_True(System.Boolean)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_True(System.String)">
 <summary>IsTrue test operator</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_False(System.Byte)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.SByte)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.Int16)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.UInt16)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.Int32)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.UInt32)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.Int64)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.UInt64)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.Single)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.Double)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.Char)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns>False if <paramref name="a"/> represents logical value false, true otherwise</returns>
</member>
<member name="M:Tools.Operators.op_False(System.Boolean)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_False(System.String)">
 <summary>IsFalse test operator</summary>
 <param name="a">A value</param>
 <returns><paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.Byte)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.SByte)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.Int16)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.UInt16)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.Int32)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.UInt32)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.Int64)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.UInt64)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.Char)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_OnesComplement(System.Boolean)">
 <summary>One's complement operator (binary not; Not, ~)</summary>
 <param name="a">A value</param>
 <returns>One's complement of <paramref name="a"/></returns>
</member>
<member name="M:Tools.Operators.op_Addition(System.Byte,System.Byte)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Byte.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.SByte,System.SByte)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.SByte.MaxValue"/> or less than <see cref="F:System.SByte.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.Int16,System.Int16)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Int16.MaxValue"/> or less than <see cref="F:System.Int16.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.UInt16,System.UInt16)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.UInt16.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.Int32,System.Int32)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Int32.MaxValue"/> or less than <see cref="F:System.Int32.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.UInt32,System.UInt32)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.UInt32.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.Int64,System.Int64)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Int64.MaxValue"/> or less than <see cref="F:System.Int64.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.UInt64,System.UInt64)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.UInt64.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.Single,System.Single)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Single.MaxValue"/> or less than <see cref="F:System.Single.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.Double,System.Double)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Double.MaxValue"/> or less than <see cref="F:System.Double.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.Char,System.Char)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Char.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Addition(System.Boolean,System.Boolean)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Addition(System.String,System.String)">
 <summary>Addition (plus) operator (+)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> + <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.Byte,System.Byte)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.Byte.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.SByte,System.SByte)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.SByte.MinValue"/> or greater than <see cref="F:System.SByte.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.Int16,System.Int16)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.Int16.MinValue"/> or greater than <see cref="F:System.Int16.MaxValue"/>..</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.UInt16,System.UInt16)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.UInt16.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.Int32,System.Int32)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.Int32.MinValue"/> or greater than <see cref="F:System.Int32.MaxValue"/>..</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.UInt32,System.UInt32)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.UInt32.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.Int64,System.Int64)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.Int64.MinValue"/> or greater than <see cref="F:System.Int64.MaxValue"/>..</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.UInt64,System.UInt64)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.UInt64.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.Single,System.Single)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.Single.MinValue"/> or greater than <see cref="F:System.Single.MaxValue"/>..</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.Double,System.Double)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.Double.MinValue"/>  or greater than <see cref="F:System.Double.MaxValue"/>..</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.Char,System.Char)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is less than <see cref="F:System.Char.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Subtraction(System.Boolean,System.Boolean)">
 <summary>Subtraction (minus) operator (-)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> - <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Multiply(System.Byte,System.Byte)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Byte.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.SByte,System.SByte)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.SByte.MaxValue"/> or less than <see cref="F:System.SByte.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.Int16,System.Int16)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Int16.MaxValue"/> or less than <see cref="F:System.Int16.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.UInt16,System.UInt16)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.UInt16.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.Int32,System.Int32)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Int32.MaxValue"/> or less than <see cref="F:System.Int32.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.UInt32,System.UInt32)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.UInt32.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.Int64,System.Int64)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Int64.MaxValue"/> or less than <see cref="F:System.Int64.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.UInt64,System.UInt64)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.UInt64.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.Single,System.Single)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Single.MaxValue"/> or less than <see cref="F:System.Single.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.Double,System.Double)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Double.MaxValue"/> or less than <see cref="F:System.Double.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.Char,System.Char)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Char.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Multiply(System.Boolean,System.Boolean)">
 <summary>Multiply operator (*)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> * <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.Byte,System.Byte)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.SByte,System.SByte)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.Int16,System.Int16)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.UInt16,System.UInt16)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.UInt16.MaxValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Division(System.Int32,System.Int32)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.UInt32,System.UInt32)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.Int64,System.Int64)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.UInt64,System.UInt64)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.Single,System.Single)">
 <summary>Division operator (/)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.Double,System.Double)">
 <summary>Division operator (/)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.Char,System.Char)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Division(System.Boolean,System.Boolean)">
 <summary>Division operator (/; integral)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> / <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.Byte,System.Byte)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.SByte,System.SByte)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.Int16,System.Int16)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.UInt16,System.UInt16)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.Int32,System.Int32)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.UInt32,System.UInt32)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.Int64,System.Int64)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.UInt64,System.UInt64)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.Single,System.Single)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
 <exception cref="T:System.OverflowException">Resulting value is greater than <see cref="F:System.Single.MaxValue"/> or less than <see cref="F:System.Single.MinValue"/>.</exception>
</member>
<member name="M:Tools.Operators.op_Modulus(System.Double,System.Double)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.Char,System.Char)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Modulus(System.Boolean,System.Boolean)">
 <summary>Modulus (plus) operator (%, Mod)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> mod <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.Byte,System.Byte)">
 <summary>Binary exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.SByte,System.SByte)">
 <summary>Binary exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.Int16,System.Int16)">
 <summary>Binary exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.UInt16,System.UInt16)">
 <summary>Binary exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.Int32,System.Int32)">
 <summary>Binary exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.UInt32,System.UInt32)">
 <summary>Binary exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.Int64,System.Int64)">
 <summary>Binary exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.UInt64,System.UInt64)">
 <summary>Binary exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.Char,System.Char)">
 <summary>Binary exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_ExclusiveOr(System.Boolean,System.Boolean)">
 <summary>Boolean exclusive or operator (Xor, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> xor <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.Byte,System.Byte)">
 <summary>Bitwise And operator (And, &amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.SByte,System.SByte)">
 <summary>Bitwise And operator (And, &amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.Int16,System.Int16)">
 <summary>Bitwise And operator (And, &amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.UInt16,System.UInt16)">
 <summary>Bitwise And operator (And, &amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.Int32,System.Int32)">
 <summary>Bitwise And operator (And, &amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.UInt32,System.UInt32)">
 <summary>Bitwise And operator (And, &amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.Int64,System.Int64)">
 <summary>Bitwise And operator (And, &amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.UInt64,System.UInt64)">
 <summary>Bitwise And operator (And, &amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.Char,System.Char)">
 <summary>Bitwise And operator (And, &amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseAnd(System.Boolean,System.Boolean)">
 <summary>Boolean And operator (And, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.Byte,System.Byte)">
 <summary>Bitwise Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.SByte,System.SByte)">
 <summary>Bitwise Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.Int16,System.Int16)">
 <summary>Bitwise Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.UInt16,System.UInt16)">
 <summary>Bitwise Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.Int32,System.Int32)">
 <summary>Bitwise Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.UInt32,System.UInt32)">
 <summary>Bitwise Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.Int64,System.Int64)">
 <summary>Bitwise Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.UInt64,System.UInt64)">
 <summary>Bitwise Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.Char,System.Char)">
 <summary>Bitwise Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_BitwiseOr(System.Boolean,System.Boolean)">
 <summary>Boolean Or operator (Or, |)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.Byte,System.Byte)">
 <summary>Logical And operator (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.SByte,System.SByte)">
 <summary>Logical And operator (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.Int16,System.Int16)">
 <summary>Logical And operator (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.UInt16,System.UInt16)">
 <summary>Logical And operator (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.Int32,System.Int32)">
 <summary>Logical And operator (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.UInt32,System.UInt32)">
 <summary>Logical And operator (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.Int64,System.Int64)">
 <summary>Logical And operator (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.UInt64,System.UInt64)">
 <summary>Logical And operator (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.Single,System.Single)">
 <summary>Logical And operatAnd (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.Double,System.Double)">
 <summary>Logical And operatAnd (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.Char,System.Char)">
 <summary>Logical And operator (And, &amp;&amp;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalAnd(System.Boolean,System.Boolean)">
 <summary>Boolean And operator (And, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> And <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.Byte,System.Byte)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.SByte,System.SByte)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.Int16,System.Int16)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.UInt16,System.UInt16)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.Int32,System.Int32)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.UInt32,System.UInt32)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.Int64,System.Int64)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.Single,System.Single)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.Double,System.Double)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.UInt64,System.UInt64)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.Char,System.Char)">
 <summary>Logical Or operator (Or, ||)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LogicalOr(System.Boolean,System.Boolean)">
 <summary>Boolean Or operator (Or, ^)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> Or <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Assign``1(``0@,``0)">
 <summary>Assignment operator (=, &lt;-)</summary>
 <param name="a">Target of assignment. When function returns this parameter contains value of <paramref name="b"/>.</param>
 <param name="b">Source of assignment</param>
 <typeparam name="T">Type of values</typeparam>
 <returns>Assigned value (<paramref name="b"/>)</returns>
</member>
<member name="M:Tools.Operators.op_LeftShift(System.Byte,System.Byte)">
 <summary>Left shift operator (&lt;&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> &lt;&lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LeftShift(System.SByte,System.SByte)">
 <summary>Left shift operator (&lt;&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> &lt;&lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LeftShift(System.Int16,System.Int16)">
 <summary>Left shift operator (&lt;&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> &lt;&lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LeftShift(System.UInt16,System.UInt16)">
 <summary>Left shift operator (&lt;&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> &lt;&lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LeftShift(System.Int32,System.Int32)">
 <summary>Left shift operator (&lt;&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> &lt;&lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LeftShift(System.UInt32,System.UInt32)">
 <summary>Left shift operator (&lt;&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> &lt;&lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LeftShift(System.Int64,System.Int64)">
 <summary>Left shift operator (&lt;&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> &lt;&lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LeftShift(System.UInt64,System.UInt64)">
 <summary>Left shift operator (&lt;&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> &lt;&lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LeftShift(System.Char,System.Char)">
 <summary>Left shift operator (&lt;&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> &lt;&lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_RightShift(System.Byte,System.Byte)">
 <summary>Right shift operator (>>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> >> <paramref name="b"/></returns>
 <version version="1.5.4">Fix in documentation: Documentation wrongly stated that this method is Left shift operator.</version>
</member>
<member name="M:Tools.Operators.op_RightShift(System.SByte,System.SByte)">
 <summary>Right shift operator (>>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> >> <paramref name="b"/></returns>
 <version version="1.5.4">Fix in documentation: Documentation wrongly stated that this method is Left shift operator.</version>
</member>
<member name="M:Tools.Operators.op_RightShift(System.Int16,System.Int16)">
 <summary>Right shift operator (>>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> >> <paramref name="b"/></returns>
 <version version="1.5.4">Fix in documentation: Documentation wrongly stated that this method is Left shift operator.</version>
</member>
<member name="M:Tools.Operators.op_RightShift(System.UInt16,System.UInt16)">
 <summary>Right shift operator (>>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> >> <paramref name="b"/></returns>
 <version version="1.5.4">Fix in documentation: Documentation wrongly stated that this method is Left shift operator.</version>
</member>
<member name="M:Tools.Operators.op_RightShift(System.Int32,System.Int32)">
 <summary>Right shift operator (>>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> >> <paramref name="b"/></returns>
 <version version="1.5.4">Fix in documentation: Documentation wrongly stated that this method is Left shift operator.</version>
</member>
<member name="M:Tools.Operators.op_RightShift(System.UInt32,System.UInt32)">
 <summary>Right shift operator (>>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> >> <paramref name="b"/></returns>
 <version version="1.5.4">Fix in documentation: Documentation wrongly stated that this method is Left shift operator.</version>
</member>
<member name="M:Tools.Operators.op_RightShift(System.Int64,System.Int64)">
 <summary>Right shift operator (>>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> >> <paramref name="b"/></returns>
 <version version="1.5.4">Fix in documentation: Documentation wrongly stated that this method is Left shift operator.</version>
</member>
<member name="M:Tools.Operators.op_RightShift(System.UInt64,System.UInt64)">
 <summary>Right shift operator (>>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> >> <paramref name="b"/></returns>
 <version version="1.5.4">Fix in documentation: Documentation wrongly stated that this method is Left shift operator.</version>
</member>
<member name="M:Tools.Operators.op_RightShift(System.Char,System.Char)">
 <summary>Right shift operator (>>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> >> <paramref name="b"/></returns>
 <version version="1.5.4">Fix in documentation: Documentation wrongly stated that this method is Left shift operator.</version>
</member>
<member name="M:Tools.Operators.op_SignedRightShift(System.Byte,System.Byte)">
 <summary>Signed right shift operator (arithmetic right shift, SAR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SAR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_SignedRightShift(System.SByte,System.SByte)">
 <summary>Signed right shift operator (arithmetic right shift, SAR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SAR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_SignedRightShift(System.Int16,System.Int16)">
 <summary>Signed right shift operator (arithmetic right shift, SAR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SAR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_SignedRightShift(System.UInt16,System.UInt16)">
 <summary>Signed right shift operator (arithmetic right shift, SAR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SAR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_SignedRightShift(System.Int32,System.Int32)">
 <summary>Signed right shift operator (arithmetic right shift, SAR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SAR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_SignedRightShift(System.UInt32,System.UInt32)">
 <summary>Signed right shift operator (arithmetic right shift, SAR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SAR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_SignedRightShift(System.Int64,System.Int64)">
 <summary>Signed right shift operator (arithmetic right shift, SAR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SAR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_SignedRightShift(System.UInt64,System.UInt64)">
 <summary>Signed right shift operator (arithmetic right shift, SAR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SAR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_SignedRightShift(System.Char,System.Char)">
 <summary>Signed right shift operator (arithmetic right shift, SAR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SAR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_UnsignedRightShift(System.Byte,System.Byte)">
 <summary>Unsigned right shift (SHR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SHR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_UnsignedRightShift(System.SByte,System.SByte)">
 <summary>Unsigned right shift (SHR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SHR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_UnsignedRightShift(System.Int16,System.Int16)">
 <summary>Unsigned right shift (SHR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SHR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_UnsignedRightShift(System.UInt16,System.UInt16)">
 <summary>Unsigned right shift (SHR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SHR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_UnsignedRightShift(System.Int32,System.Int32)">
 <summary>Unsigned right shift (SHR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SHR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_UnsignedRightShift(System.UInt32,System.UInt32)">
 <summary>Unsigned right shift (SHR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SHR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_UnsignedRightShift(System.Int64,System.Int64)">
 <summary>Unsigned right shift (SHR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SHR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_UnsignedRightShift(System.UInt64,System.UInt64)">
 <summary>Unsigned right shift (SHR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SHR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_UnsignedRightShift(System.Char,System.Char)">
 <summary>Unsigned right shift (SHR)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns><paramref name="a"/> SHR <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Equality(System.Object,System.Object)">
 <summary>Compares thwo objects for equality (a == operator)</summary>
 <param name="a">A object</param>
 <param name="b">A object</param>
 <returns>True if both objects are null or are equal using <paramref name="a"/>.<see cref="M:System.Object.Equals(System.Object)">Equals</see>(<paramref name="b"/>)</returns>
</member>
<member name="M:Tools.Operators.op_Inequality(System.Object,System.Object)">
 <summary>Compares thwo objects for inequality</summary>
 <param name="a">A object</param>
 <param name="b">A object</param>
 <returns>True if exactly one of objects is null or objectse not equal using <paramref name="a"/>.<see cref="M:System.Object.Equals(System.Object)">Equals</see>(<paramref name="b"/>)</returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.Byte,System.Byte)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.SByte,System.SByte)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.Int16,System.Int16)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.UInt16,System.UInt16)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.Int32,System.Int32)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.UInt32,System.UInt32)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.Int64,System.Int64)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.UInt64,System.UInt64)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.Single,System.Single)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.Double,System.Double)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.Char,System.Char)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.Boolean,System.Boolean)">
 <summary>Greater than comparison operator (>)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThan(System.String,System.String)">
 <summary>Greater than comparison operator (>))</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> > <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.Byte,System.Byte)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.SByte,System.SByte)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.Int16,System.Int16)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.UInt16,System.UInt16)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.Int32,System.Int32)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.UInt32,System.UInt32)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.Int64,System.Int64)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.UInt64,System.UInt64)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.Single,System.Single)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.Double,System.Double)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.Char,System.Char)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.Boolean,System.Boolean)">
 <summary>Less than comparison operator (&lt;)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThan(System.String,System.String)">
 <summary>Less than comparison operator (&lt;))</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt; <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.Byte,System.Byte)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.SByte,System.SByte)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.Int16,System.Int16)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.UInt16,System.UInt16)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.Int32,System.Int32)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.UInt32,System.UInt32)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.Int64,System.Int64)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.UInt64,System.UInt64)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.Single,System.Single)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.Double,System.Double)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.Char,System.Char)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.Boolean,System.Boolean)">
 <summary>Greater than or equal comparison operator (>=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_GreaterThanOrEqual(System.String,System.String)">
 <summary>Greater than or equal comparison operator (>=))</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> >= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.Byte,System.Byte)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.SByte,System.SByte)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.Int16,System.Int16)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.UInt16,System.UInt16)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.Int32,System.Int32)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.UInt32,System.UInt32)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.Int64,System.Int64)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.UInt64,System.UInt64)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.Single,System.Single)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.Double,System.Double)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.Char,System.Char)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.Boolean,System.Boolean)">
 <summary>Less than or equal comparison operator (&lt;=)</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_LessThanOrEqual(System.String,System.String)">
 <summary>Less than or equal comparison operator (&lt;=))</summary>
 <param name="a">A value</param>
 <param name="b">A value</param>
 <returns>True if <paramref name="a"/> &lt;= <paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Comma``1(System.Object,``0)">
 <summary>Implements the comma (,) operator</summary>
 <param name="a">Ignored</param>
 <param name="b">Returned</param>
 <typeparam name="T">Type of parameter 2 and return value</typeparam>
 <returns><paramref name="b"/></returns>
</member>
<member name="M:Tools.Operators.op_Concatenate(System.String,System.String)">
 <summary>Implements the string concatenation operator (VB &amp;, PHP .)</summary>
 <param name="a">First string</param>
 <param name="b">2nd string</param>
 <returns>Strings <paramref name="a"/> and <paramref name="b"/> concatenated</returns>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Concatenate(System.Char,System.Char)">
 <summary>Implements the string concatenation operator (concatenates two chars to a string; VB &amp;, PHP .)</summary>
 <param name="a">First character</param>
 <param name="b">2nd character</param>
 <returns>Chars <paramref name="a"/> and <paramref name="b"/> concatenated</returns>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.SByte,System.SByte)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.Byte,System.Byte)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.Int16,System.Int16)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.UInt16,System.UInt16)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.Int32,System.Int32)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.UInt32,System.UInt32)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.Int64,System.Int64)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.UInt64,System.UInt64)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.Decimal,System.Decimal)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.Single,System.Single)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_Exponent(System.Double,System.Double)">
 <summary>Implements exponent operator (powers giwen number to given power; VB ^)</summary>
 <param name="a">The number to be powered</param>
 <param name="b">Power</param>
 <returns>Number <paramref name="a"/> powered by <paramref name="b"/>.</returns>
 <exception cref="T:System.OverflowException">An arithmetic operation results to a number that is out of range of <see cref="T:System.Double"/> type.</exception>
 <remarks>This is VisualBasic-specific operator</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_IntegerDivision(System.SByte,System.SByte)">
 <summary>Implements the integer division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator. For language compatibility reason implementation of this operator and <see cref="M:Tools.Operators.op_Division(System.Boolean,System.Boolean)"/> for type <see cref="T:System.SByte"/> is the same.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_IntegerDivision(System.Byte,System.Byte)">
 <summary>Implements the integer division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator. For language compatibility reason implementation of this operator and <see cref="M:Tools.Operators.op_Division(System.Boolean,System.Boolean)"/> for type <see cref="T:System.Byte"/> is the same.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_shortDivision(System.Int16,System.Int16)">
 <summary>Implements the short division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator. For language compatibility reason implementation of this operator and <see cref="M:Tools.Operators.op_Division(System.Boolean,System.Boolean)"/> for type <see cref="T:System.Int16"/> is the same.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_shortDivision(System.UInt16,System.UInt16)">
 <summary>Implements the short division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator. For language compatibility reason implementation of this operator and <see cref="M:Tools.Operators.op_Division(System.Boolean,System.Boolean)"/> for type <see cref="T:System.UInt16"/> is the same.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_IntegerDivision(System.Int32,System.Int32)">
 <summary>Implements the integer division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator. For language compatibility reason implementation of this operator and <see cref="M:Tools.Operators.op_Division(System.Boolean,System.Boolean)"/> for type <see cref="T:System.Int32"/> is the same.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_IntegerDivision(System.UInt32,System.UInt32)">
 <summary>Implements the integer division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator. For language compatibility reason implementation of this operator and <see cref="M:Tools.Operators.op_Division(System.Boolean,System.Boolean)"/> for type <see cref="T:System.UInt32"/> is the same.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_LongDivision(System.Int64,System.Int64)">
 <summary>Implements the Long division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator. For language compatibility reason implementation of this operator and <see cref="M:Tools.Operators.op_Division(System.Boolean,System.Boolean)"/> for type <see cref="T:System.Int64"/> is the same.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_LongDivision(System.UInt64,System.UInt64)">
 <summary>Implements the Long division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator. For language compatibility reason implementation of this operator and <see cref="M:Tools.Operators.op_Division(System.Boolean,System.Boolean)"/> for type <see cref="T:System.UInt64"/> is the same.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_SingleDivision(System.Single,System.Single)">
 <summary>Implements the Single division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_DoubleDivision(System.Double,System.Double)">
 <summary>Implements the Double division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.op_LongDivision(System.Decimal,System.Decimal)">
 <summary>Implements the Long division operator (VB \)</summary>
 <param name="a">Number to be divided</param>
 <param name="b">Number to divide <paramref name="a"/> by</param>
 <returns>Integral part of result of division of <paramref name="a"/> / <paramref name="b"/>.</returns>
 <remarks>This is VisualBasic-specific operator.</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="b"/> is zero</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.Operators.Reverse(Tools.ReflectionT.Operators)">
 <summary>Gets inverse operator to given operator (if possible, approxiomately)</summary>
 <param name="operator">Operator to get inverse operator for</param>
 <returns>An operator that is inversion to <paramref name="operator"/>. <see cref="F:Tools.ReflectionT.Operators.no"/> is no inversion exists or <paramref name="operator"/> is not a known <see cref="T:Tools.ReflectionT.Operators"/> value.</returns>
 <remarks>Inversion means that if <c>a × b == c</c> and ¤ is inversion of × then <c>c ¤ b == a</c></remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="T:Tools.SyntaxErrorException">
 <summary>An exception thrown when there is syntax error in text</summary>
 <version version="1.5.3" stage="nightly">This class is new in version 1.5.3</version>
</member>
<member name="M:Tools.SyntaxErrorException.#ctor">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.SyntaxErrorException"/> class</summary>
</member>
<member name="M:Tools.SyntaxErrorException.#ctor(System.String)">
 <summary>CTor - initializes a new instance of the <see cref="T:Tools.SyntaxErrorException"/> class with error message</summary>
 <param name="message">The message that describes the error.</param>
</member>
<member name="M:Tools.SyntaxErrorException.#ctor(System.String,System.Exception)">
 <summary>CTor - initializes a new instance of the <see cref="T:Tools.SyntaxErrorException"/> class with error message and inner exception</summary>
 <param name="message">The message that describes the error.</param>
 <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> if no inner exception is specified.</param>
</member>
<member name="M:Tools.SyntaxErrorException.#ctor(System.String,System.Int32,System.Int32)">
 <summary>CTor - initializes a new instance of the <see cref="T:Tools.SyntaxErrorException"/> class with error message and location</summary>
 <param name="message">The message that describes the error.</param>
 <param name="row">A 1-based row index of row the error occured at. 0 if not available.</param>
 <param name="column">A 1-based column (char) index the error started at. 0 if not available.</param>
</member>
<member name="M:Tools.SyntaxErrorException.#ctor(System.String,System.Int32,System.Int32,System.Exception)">
 <summary>CTor - initializes a new instance of the <see cref="T:Tools.SyntaxErrorException"/> class with error message, location and inner exception</summary>
 <param name="message">The message that describes the error.</param>
 <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> if no inner exception is specified.</param>
 <param name="row">A 1-based row index of row the error occured at. 0 if not available.</param>
 <param name="column">A 1-based column (char) index the error started at. 0 if not available.</param>
</member>
<member name="P:Tools.SyntaxErrorException.Row">
 <summary>Gets 1-based row index of row the error occured at</summary>
 <returns>1-based row index of row the error occured at. 0 when this information is not available.</returns>
</member>
<member name="P:Tools.SyntaxErrorException.Column">
 <summary>Gets 1-based column (char) index of row the error occured at</summary>
 <returns>1-based column (char) index of row the error occured at. 0 when this information is not available.</returns>
</member>
<member name="T:Tools.VersionPart">
 <summary>Represents a part of version information</summary>
 <version version="1.5.3">This class is new in version 1.5.3</version>
 <remarks>
 This class is intended for storing and comparing version information containing only some parts from left.
 <see cref="T:System.Version"/> class can be often used for this purpose, unless you wan to ommit <see cref="P:System.Version.Minor"/> part.
 <para><see cref="T:System.IFormattable"/> info:</para>
 <para>This implementation of <see cref="T:System.IFormattable"/> supports following formatting strings:</para>
 <list type="table"><listheader><term>Formatting string</term><description>Meaning</description></listheader>
 <item><term>Null, an empty string, "G" or "g"</term><description>Default formatting, same as "4"</description></item>
 <item><term>An integral number</term><description>Maximum number of components to render. Components are rendered in following order: <see cref="P:Tools.VersionPart.Major"/>, <see cref="P:Tools.VersionPart.Minor"/>, <see cref="P:Tools.VersionPart.Build"/>, <see cref="P:Tools.VersionPart.Revision"/>. Value zero or less producess an empty string. Value greater than 4 is treated as 4.</description></item>
 <item><term>Anything else</term><description><see cref="T:System.FormatException"/> is thrown.</description></item>
 </list></remarks>
</member>
<member name="P:Tools.VersionPart.Major">
 <summary>Gets the value of the major component of the version number.</summary>
</member>
<member name="P:Tools.VersionPart.Minor">
 <summary>Gets the value of the minor component of the version number.</summary>
</member>
<member name="P:Tools.VersionPart.Build">
 <summary>Gets the value of the build component of the version number.</summary>
</member>
<member name="P:Tools.VersionPart.Revision">
 <summary>Gets the value of the revision component of the version numer.</summary>
</member>
<member name="M:Tools.VersionPart.#ctor(System.Version)">
 <summary>Creates a new instance of the <see cref="T:Tools.VersionPart"/> class from a <see cref="T:System.Version"/> object</summary>
 <param name="version">A <see cref="T:System.Version"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="version"/> is null</exception>
</member>
<member name="M:Tools.VersionPart.#ctor(System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
 <summary>Creates a new instance of the <see cref="T:Tools.VersionPart"/> class from version numbers</summary>
 <param name="major">The major version number.</param>
 <param name="minor">The minor version number.</param>
 <param name="build">The build number.</param>
 <param name="revision">The revision number.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">Any parameter is less than zero</exception>
</member>
<member name="M:Tools.VersionPart.#ctor(System.String)">
 <summary>Creates a new instance of the <see cref="T:Tools.VersionPart"/> class from its string representation</summary>
 <param name="version">A string representation of version information. It is in format major[.minor[.build[.revision]]]</param>
 <exception cref="T:System.FormatException"><paramref name="version"/> is in incorrect format</exception>
 <exception cref="T:System.OverflowException">Part of version information is out of range of the <see cref="T:System.Int32"/> data type</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="version"/> is null</exception>
</member>
<member name="M:Tools.VersionPart.Parse(System.String)">
 <summary>Parses a astring to <see cref="T:Tools.VersionPart"/> value</summary>
 <param name="version">A string representation of version information. It is in format major[.minor[.build[.revision]]]</param>
 <returns>A new instance of <see cref="T:Tools.VersionPart"/> initialized from <paramref name="version"/></returns>
 <exception cref="T:System.FormatException"><paramref name="version"/> is in incorrect format</exception>
 <exception cref="T:System.OverflowException">Part of version information is out of range of the <see cref="T:System.Int32"/> data type</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="version"/> is null</exception>
</member>
<member name="M:Tools.VersionPart.TryParse(System.String,Tools.VersionPart@)">
 <summary>Attempts to parse version information from string to <see cref="T:Tools.VersionPart"/> object</summary>
 <param name="str">A string representation of version information (it's expected to be in format major[.minor[.build[.revision]]])</param>
 <param name="value">When the function returns true this parameter contains new instance of <see cref="T:Tools.VersionPart"/> popupated from <paramref name="str"/>.</param>
 <returns>True if <paramref name="str"/> was successfully parsd to <see cref="T:Tools.VersionPart"/> and assigned to <paramref name="value"/>; false otherwise</returns>
</member>
<member name="F:Tools.VersionPart.versionRegExp">
 <summary>A regular expression used for parsing version values</summary>
 <remarks>It parses out 1 to 4 named groups - major, minor, build and revision</remarks>
</member>
<member name="M:Tools.VersionPart.ToString(System.Int32,System.IFormatProvider)">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:VersionPart" /> with given precision using given formatting provider.</summary>
 <param name="provider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
 <param name="parts">Maximum number of parts of version information to be rendered. Zero or less causes en empty string to be returned. 4 or more is considered 4.</param>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Tools.VersionPart" />.</returns>
</member>
<member name="M:Tools.VersionPart.ToString(System.Int32)">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:VersionPart" /> with given precision.</summary>
 <param name="parts">Maximum number of parts of version information to be rendered. Zero or less causes en empty string to be returned. 4 or more is considered 4.</param>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Tools.VersionPart" />.</returns>
</member>
<member name="M:Tools.VersionPart.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:Tools.VersionPart" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Tools.VersionPart" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.VersionPart.ToString(System.String,System.IFormatProvider)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <returns>The value of the current instance in the specified format.</returns>
 <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
 <param name="formatProvider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system. </param>
 <exception cref="T:System.FormatException"><paramref name="format"/> cannot be persed as <see cref="T:System.Int32"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.VersionPart.ToString(System.String)">
 <summary>Formats the value of the current instance using the specified format and <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.</summary>
 <returns>The value of the current instance in the specified format.</returns>
 <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation. </param>
 <exception cref="T:System.FormatException"><paramref name="format"/> cannot be persed as <see cref="T:System.Int32"/> in <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/></exception>
</member>
<member name="M:Tools.VersionPart.ToVersion">
 <summary>Converts this instance of <see cref="T:Tools.VersionPart"/> to <see cref="T:System.Version"/></summary>
 <returns>A new instance of <see cref="T:System.Version"/> initialized from this instance</returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.VersionPart.Minor"/> is null.</exception>
</member>
<member name="M:Tools.VersionPart.op_Implicit(System.Version)~Tools.VersionPart">
 <summary>Converts <see cref="T:System.Version"/> to <see cref="T:Tools.VersionPart"/></summary>
 <param name="a">A <see cref="T:System.Version"/></param>
 <returns>A <see cref="T:Tools.VersionPart"/> initialized from <paramref name="a"/>; null if <paramref name="a"/> is null</returns>
</member>
<member name="M:Tools.VersionPart.op_Explicit(Tools.VersionPart)~System.Version">
 <summary>Converts <see cref="T:Tools.VersionPart"/> to <see cref="T:System.Version"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <returns>A <see cref="T:System.Version"/> initialized from <paramref name="a"/>; null if <paramref name="a"/> is null</returns>
 <exception cref="T:System.InvalidCastException"><paramref name="a"/>.<see cref="P:Tools.VersionPart.Minor">Minor</see> is null</exception>
 <seelaso cref="M:Tools.VersionPart.ToVersion"/>
</member>
<member name="M:Tools.VersionPart.op_Equality(Tools.VersionPart,Tools.VersionPart)">
 <summary>Compares two <see cref="T:Tools.VersionPart"/> instances for equality</summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>True if <paramref name="a"/> and <paramref name="b"/> are equal or are both null; false otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_Equality(Tools.VersionPart,System.Version)">
 <summary>Compares <see cref="T:Tools.VersionPart"/> and <see cref="T:System.Version"/> instances for equality</summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>True if <paramref name="a"/> and <paramref name="b"/> are equal or are both null; false otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_Equality(System.Version,Tools.VersionPart)">
 <summary>Compares <see cref="T:System.Version"/> and <see cref="T:Tools.VersionPart"/> instances for equality</summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>True if <paramref name="a"/> and <paramref name="b"/> are equal or are both null; false otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_Inequality(Tools.VersionPart,Tools.VersionPart)">
 <summary>Compares two <see cref="T:Tools.VersionPart"/> instances for inequality</summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>False if <paramref name="a"/> and <paramref name="b"/> are equal or are both null; true otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_Inequality(Tools.VersionPart,System.Version)">
 <summary>Compares <see cref="T:Tools.VersionPart"/> and <see cref="T:System.Version"/> instances for inequality</summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>False if <paramref name="a"/> and <paramref name="b"/> are equal or are both null; true otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_Inequality(System.Version,Tools.VersionPart)">
 <summary>Compares <see cref="T:System.Version"/> and <see cref="T:Tools.VersionPart"/> instances for inequality</summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>False if <paramref name="a"/> and <paramref name="b"/> are equal or are both null; true otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_GreaterThan(Tools.VersionPart,Tools.VersionPart)">
 <summary>Detects if one <see cref="T:Tools.VersionPart"/> is greater than other <see cref="T:Tools.VersionPart"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>True if <paramref name="a"/> represents version number greater than <paramref name="b"/>; false otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_LessThan(Tools.VersionPart,Tools.VersionPart)">
 <summary>Detects if one <see cref="T:Tools.VersionPart"/> is less than other <see cref="T:Tools.VersionPart"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>True if <paramref name="a"/> represents version number less than <paramref name="b"/>; false otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_GreaterThanOrEqual(Tools.VersionPart,Tools.VersionPart)">
 <summary>Detects if one <see cref="T:Tools.VersionPart"/> is greater than or equal to other <see cref="T:Tools.VersionPart"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>True if <paramref name="a"/> represents version number greater than or equal to <paramref name="b"/>; false otherwise</returns>
 <remarks>Unset values are ignored in comparison. For example 1.5 >= 1.5.3 and also 1.5.3 >= 1.5</remarks>
</member>
<member name="M:Tools.VersionPart.op_LessThanOrEqual(Tools.VersionPart,Tools.VersionPart)">
 <summary>Detects if one <see cref="T:Tools.VersionPart"/> is less than or equal to other <see cref="T:Tools.VersionPart"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:Tools.VersionPart"/></param>
 <returns>True if <paramref name="a"/> represents version number less than or equal to <paramref name="b"/>; false otherwise</returns>
 <remarks>Unset values are ignored in comparison. For example 1.5 &lt;= 1.5.3 and also 1.5.3 &lt;= 1.5</remarks>
</member>
<member name="M:Tools.VersionPart.op_GreaterThan(Tools.VersionPart,System.Version)">
 <summary>Detects if a <see cref="T:Tools.VersionPart"/> is greater than a <see cref="T:System.Version"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:System.Version"/></param>
 <returns>True if <paramref name="a"/> represents version number greater than <paramref name="b"/>; false otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_LessThan(Tools.VersionPart,System.Version)">
 <summary>Detects if a <see cref="T:Tools.VersionPart"/> is less than a <see cref="T:System.Version"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:System.Version"/></param>
 <returns>True if <paramref name="a"/> represents version number less than <paramref name="b"/>; false otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_GreaterThanOrEqual(Tools.VersionPart,System.Version)">
 <summary>Detects if a <see cref="T:Tools.VersionPart"/> is greater than or equal to a <see cref="T:System.Version"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:System.Version"/></param>
 <returns>True if <paramref name="a"/> represents version number greater than or equal to <paramref name="b"/>; false otherwise</returns>
 <remarks>Unset values are ignored in comparison. For example 1.5 >= 1.5.3 and also 1.5.3 >= 1.5</remarks>
</member>
<member name="M:Tools.VersionPart.op_LessThanOrEqual(Tools.VersionPart,System.Version)">
 <summary>Detects if a <see cref="T:Tools.VersionPart"/> is less than or equal to a <see cref="T:System.Version"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:System.Version"/></param>
 <returns>True if <paramref name="a"/> represents version number less than or equal to <paramref name="b"/>; false otherwise</returns>
 <remarks>Unset values are ignored in comparison. For example 1.5 &lt;= 1.5.3 and also 1.5.3 &lt;= 1.5</remarks>
</member>
<member name="M:Tools.VersionPart.op_GreaterThan(System.Version,Tools.VersionPart)">
 <summary>Detects if a <see cref="T:System.Version"/> is greater than a <see cref="T:Tools.VersionPart"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:System.Version"/></param>
 <returns>True if <paramref name="a"/> represents version number greater than <paramref name="b"/>; false otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_LessThan(System.Version,Tools.VersionPart)">
 <summary>Detects if a <see cref="T:System.Version"/> is less than a <see cref="T:Tools.VersionPart"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:System.Version"/></param>
 <returns>True if <paramref name="a"/> represents version number less than <paramref name="b"/>; false otherwise</returns>
</member>
<member name="M:Tools.VersionPart.op_GreaterThanOrEqual(System.Version,Tools.VersionPart)">
 <summary>Detects if a <see cref="T:System.Version"/> is greater than or equal to a <see cref="T:Tools.VersionPart"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:System.Version"/></param>
 <returns>True if <paramref name="a"/> represents version number greater than or equal to <paramref name="b"/>; false otherwise</returns>
 <remarks>Unset values are ignored in comparison. For example 1.5 >= 1.5.3 and also 1.5.3 >= 1.5</remarks>
</member>
<member name="M:Tools.VersionPart.op_LessThanOrEqual(System.Version,Tools.VersionPart)">
 <summary>Detects if a <see cref="T:System.Version"/> is less than or equal to a <see cref="T:Tools.VersionPart"/></summary>
 <param name="a">A <see cref="T:Tools.VersionPart"/></param>
 <param name="b">A <see cref="T:System.Version"/></param>
 <returns>True if <paramref name="a"/> represents version number less than or equal to <paramref name="b"/>; false otherwise</returns>
 <remarks>Unset values are ignored in comparison. For example 1.5 &lt;= 1.5.3 and also 1.5.3 &lt;= 1.5</remarks>
</member>
<member name="M:Tools.VersionPart.CompareTo(System.Version)">
 <summary>Compares the current object with another object of the same type.</summary>
 <returns>A value that indicates the relative order of the objects being compared. The return value has the following meanings:
 Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.
 Zero This object is equal to <paramref name="other" />.
 Greater than zero This object is greater than <paramref name="other" />.</returns>
 <param name="other">An object to compare with this object.</param>
 <remarks>Zero is also returned for uncomparable values like 1.5.3 and 1.5</remarks>
</member>
<member name="M:Tools.VersionPart.CompareTo(Tools.VersionPart)">
 <summary>Compares the current object with another object of the same type.</summary>
 <returns>A value that indicates the relative order of the objects being compared. The return value has the following meanings:
 Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.
 Zero This object is equal to <paramref name="other" />.
 Greater than zero This object is greater than <paramref name="other" />.</returns>
 <param name="other">An object to compare with this object.</param>
 <remarks>Zero is also returned for uncomparable values like 1.5.3 and 1.5</remarks>
</member>
<member name="M:Tools.VersionPart.Equals(System.Version)">
 <summary>Indicates whether the current object is equal to another object of type <see cref="T:System.Version"/>.</summary>
 <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
</member>
<member name="M:Tools.VersionPart.Equals(Tools.VersionPart)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
 <param name="other">An object to compare with this object.</param>
</member>
<member name="M:Tools.VersionPart.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.VersionPart.GetHashCode">
 <summary>Serves as a hash function for a particular type. </summary>
 <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric">
 <summary>Asymmetric encryption uses a pair of keys to encrypt and decrypt.</summary>
 <remarks>
 There is a "public" key which is used to encrypt. Decrypting, on the other hand, 
 requires both the "public" key and an additional "private" key. The advantage is 
 that people can send you encrypted messages without being able to decrypt them.
 <note>The only provider supported is the <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider"/></note>
 </remarks>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyModulus">
 <summary>Identifies name of application setting key used to store default public key modulus in app.config or web.config file</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyExponent">
 <summary>Identifies name of application setting key used to store default public key exponent in app.config or web.config file</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrimeP">
 <summary>Identifies name of application setting key used to store default private key P parameter in app.config or web.config file</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrimeQ">
 <summary>Identifies name of application setting key used to store default private key Q parameter in app.config or web.config file</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrimeExponentP">
 <summary>Identifies name of application setting key used to store default private key DP parameter in app.config or web.config file</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrimeExponentQ">
 <summary>Identifies name of application setting key used to store default private key DQ parameter in app.config or web.config file</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyCoefficient">
 <summary>Identifies name of application setting key used to store default private key InverseQ parameter in app.config or web.config file</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrivateExponent">
 <summary>Identifies name of application setting key used to store default private key D parameter in app.config or web.config file</summary>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey">
 <summary>Represents a public encryption key. Intended to be shared, itcontains only the Modulus and Exponent.</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.Modulus">
 <summary>Gets modulus of this key</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.Exponent">
 <summary>Gets exponent of this key</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.#ctor(System.String,System.String)">
 <summary>Creates a new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> class from modulus and exponent base64 values</summary>
 <param name="modulus">Modulus value (base64-encoded)</param>
 <param name="exponent">Exponent value (base64-encoded)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="modulus"/> or <paramref name="exponent"/> is null</exception>
 <exception cref="T:System.FormatException">
 The length of <paramref name="modulus"/> or <paramref name="exponent"/>, ignoring white-space characters, is not zero or a multiple of 4. -or-
 The format of <paramref name="modulus"/> or <paramref name="exponent"/> is invalid. <paramref name="modulus"/> or <paramref name="exponent"/> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.
 </exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.#ctor(System.Byte[],System.Byte[])">
 <summary>Creates a new instance ot the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> from modulus and exponent binary values</summary>
 <param name="modulus">Modulus value</param>
 <param name="exponent">Exponent value</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="modulus"/> or <paramref name="exponent"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.#ctor(System.Security.Cryptography.RSAParameters)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> class from <see cref="T:System.Security.Cryptography.RSAParameters"/></summary>
 <param name="parameters">A <see cref="T:System.Security.Cryptography.RSAParameters"/> object</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.#ctor(System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> class from string representing its XML representation</summary>
 <param name="keyXml">A string containing XML representation of public key</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.FromConfig">
 <summary>Loads public key from current web.config or app.config file using default names of settings</summary>
 <returns>A new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> representing default public key stored in current app.config or web.config file</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.FromConfig(System.String,System.String)">
 <summary>Loads public key from current web.config or app.config file using custom names of settings</summary>
 <param name="keyModulus">Key of app.config or web.config application settting stroring public key's modulus</param>
 <param name="keyExponent">Key of app.config or web.config application settting stroring public key's exponent</param>
 <returns>A new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> representing public key stored in current app.config or web.config file</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.FromXmlString(System.String)">
 <summary>Loads public key from string containing it's XML representation</summary>
 <param name="xml">String containing XML representation of public key</param>
 <returns>A ne winstance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> class</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.ToConfigSection">
 <summary>Returns app.config or web.config file XML section representing this public key (to be stored under default names of application settings)</summary>
 <returns>A string for app.config or web.config file</returns>
 <seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyModulus"/><seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyExponent"/>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.ToConfigSection(System.String,System.String)">
 <summary>Returns app.config or web.config file XML section representing this public key  (to be stored under custom names of application settings)</summary>
 <param name="keyModulus">Name of application setting to store modulus in</param>
 <param name="keyExponent">Name of application setting to store exponent in</param>
 <returns>A string for app.config or web.config file</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.ExportToConfigFile(System.String)">
 <summary>Writes the app.config or web.config file representation of this public key to a file (as default key)</summary>
 <param name="filePath">Path of configuration file to write key to</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.ExportToConfigFile(System.String,System.String,System.String)">
 <summary>Writes the app.config or web.config file representation of this public key to a file (under custom settings names)</summary>
 <param name="keyModulus">Name of application setting to store modulus in</param>
 <param name="keyExponent">Name of application setting to store exponent in</param>
 <param name="filePath">Path of configuration file to write key to</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.ToXml">
 <summary>Converts this public key to its XML string representation</summary>
 <returns>A string containing XML representation of this key</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.ExportToXmlFile(System.String)">
 <summary>Writes the Xml representation of this public key to a file</summary>
 <param name="filePath">A path of a XML file</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.ToParameters">
 <summary>Converts this public key to an RSAParameters object</summary>
 <returns>A <see cref="T:System.Security.Cryptography.RSAParameters"/> object</returns>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey">
 <summary>Represents a private encryption key. Not intended to be shared, as it contains all the elements that make up the key.</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeP">
 <summary>Gets the P parameter</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeQ">
 <summary>Gets the Q parameter</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeExponentP">
 <summary>Gets the prime exponent P</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeExponentQ">
 <summary>Gets the prime exponent Q</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.Coefficient">
 <summary>Gets the coeficient</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrivateExponent">
 <summary>Gets the private exponent</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>Creates a new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> class from base64-encoded values</summary>
 <param name="modulus">Modulus value (base64-encoded)</param>
 <param name="exponent">Exponent value (base64-encoded)</param>
 <param name="coefficient">A coeficient (base64-encoded)</param>
 <param name="primeExponentP">A prime exponent P (base64-encoded)</param>
 <param name="primeExponentQ">A prime exponent Q (base64-encoded)</param>
 <param name="primeP">A prime P (base64-encoded)</param>
 <param name="primeQ">A prime Q (base64-encoded)</param>
 <param name="privateExponent">A private exponent (base64-encoded)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="modulus"/> or <paramref name="exponent"/> is null</exception>
 <exception cref="T:System.FormatException">
 The length of an argument, ignoring white-space characters, is not zero or a multiple of 4. -or-
 The format of an argument is invalid. An argument contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.
 </exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
 <summary>Creates a new instance ot the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> from binary values</summary>
 <param name="modulus">Modulus value</param>
 <param name="exponent">Exponent value</param>
 <param name="coefficient">A coeficient</param>
 <param name="primeExponentP">A prime exponent P</param>
 <param name="primeExponentQ">A prime exponent Q</param>
 <param name="primeP">A prime P</param>
 <param name="primeQ">A prime Q</param>
 <param name="privateExponent">A private exponent</param>
 <exception cref="T:System.ArgumentNullException">Any arguments is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.#ctor(System.Security.Cryptography.RSAParameters)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> class from <see cref="T:System.Security.Cryptography.RSAParameters"/></summary>
 <param name="parameters">A <see cref="T:System.Security.Cryptography.RSAParameters"/> object</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.#ctor(System.String)">
 <summary>CTor - creates a new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> class from string representing its XML representation</summary>
 <param name="keyXml">A string containing XML representation of public key</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.FromConfig">
 <summary>Loads public key from current web.config or app.config file using default names of settings</summary>
 <returns>A new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> representing default public key stored in current app.config or web.config file</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.FromConfig(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>Loads public key from current web.config or app.config file using custom names of settings</summary>
 <param name="keyModulus">Key of app.config or web.config application settting stroring public key's modulus</param>
 <param name="keyExponent">Key of app.config or web.config application settting stroring public key's exponent</param>
 <returns>A new instance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> representing public key stored in current app.config or web.config file</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.FromXmlString(System.String)">
 <summary>Loads public key from string containing it's XML representation</summary>
 <param name="xml">String containing XML representation of public key</param>
 <returns>A ne winstance of the <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey"/> class</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.ToConfigSection">
 <summary>Returns app.config or web.config file XML section representing this public key (to be stored under default names of application settings)</summary>
 <returns>A string for app.config or web.config file</returns>
 <seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyModulus"/><seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyExponent"/>
 <seealso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrimeP"/><seealso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrimeQ"/><seealso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrimeExponentP"/><seealso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrimeExponentQ"/><seealso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyCoefficient"/><seealso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyPrivateExponent"/>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.ToConfigSection(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>Returns app.config or web.config file XML section representing this public part of this key (to be stored under custom names of application settings)</summary>
 <param name="keyExponent">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.Exponent"/> in</param>
 <param name="keyModulus">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.Modulus"/> in</param>
 <param name="keyPrimeP">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeP"/> in</param>
 <param name="keyPrimeQ">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeQ"/> in</param>
 <param name="keyPrimeExponentP">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeExponentP"/> in</param>
 <param name="KeyPrimeExponentQ">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeExponentQ"/> in</param>
 <param name="keyCoefficient">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.Coefficient"/> in</param>
 <param name="keyPrivateExponent">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrivateExponent"/> in</param>
 <returns>A string for app.config or web.config file</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.ToConfigSection(System.String,System.String)">
 <summary>Returns app.config or web.config file XML section representing this public part of this key (to be stored under custom names of application settings)</summary>
 <param name="keyModulus">Name of application setting to store modulus in</param>
 <param name="keyExponent">Name of application setting to store exponent in</param>
 <returns>A string for app.config or web.config file</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.ExportToConfigFile(System.String)">
 <summary>Writes the app.config or web.config file representation of this public key to a file (as default key)</summary>
 <param name="filePath">Path of configuration file to write key to</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.ExportToConfigFile(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
 <summary>Writes the app.config or web.config file representation of this public key to a file (under custom settings names)</summary>
 <param name="keyExponent">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.Exponent"/> in</param>
 <param name="keyModulus">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey.Modulus"/> in</param>
 <param name="keyPrimeP">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeP"/> in</param>
 <param name="keyPrimeQ">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeQ"/> in</param>
 <param name="keyPrimeExponentP">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeExponentP"/> in</param>
 <param name="KeyPrimeExponentQ">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrimeExponentQ"/> in</param>
 <param name="keyCoefficient">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.Coefficient"/> in</param>
 <param name="keyPrivateExponent">Name of application setting to store <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.PrivateExponent"/> in</param>
 <param name="filePath">Path of configuration file to write key to</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.ExportToConfigFile(System.String,System.String,System.String)">
 <summary>Writes the app.config or web.config file representation of this public part of this key to a file (under custom settings names)</summary>
 <param name="keyModulus">Name of application setting to store modulus in</param>
 <param name="keyExponent">Name of application setting to store exponent in</param>
 <param name="filePath">Path of configuration file to write key to</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey.ToParameters">
 <summary>Converts this private key to an <see cref="T:System.Security.Cryptography.RSAParameters"/> object</summary>
 <returns>A <see cref="T:System.Security.Cryptography.RSAParameters"/> object</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.#ctor">
 <summary>CTor - instantiates a new asymmetric encryption session using the default key size; this is usally 1024 bits</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.#ctor(System.Int32)">
 <summary>Instantiates a new asymmetric encryption session using a specific key size</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeyContainerName">
 <summary>Gets or sets the name of the key container used to store this key on disk.</summary>
 <remarks>
 This is an unavoidable side effect (bug) of the underlying Microsoft CryptoAPI. See
 http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/q322/3/71.asp&amp;NoWebContent=1
 </remarks>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeySizeBits">
 <summary>Gets the current key size, in bits</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeySizeMaxBits">
 <summary>Gets the maximum supported key size, in bits</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeySizeMinBits">
 <summary>Gets the minimum supported key size, in bits</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.KeySizeStepBits">
 <summary>Returns valid key step sizes, in bits</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.DefaultPublicKey">
 <summary>Returns the default public key as stored in the *.config file</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.DefaultPrivateKey">
 <summary>Returns the default private key as stored in the *.config file</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.GenerateNewKeyset(Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey@,Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey@)">
 <summary>Generates a new public/private key pair as objects</summary>
 <param name="publicKey">Returns a public key</param>
 <param name="privateKey">Raturns a private key</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.GenerateNewKeyset(System.String@,System.String@)">
 <summary>Generates a new public/private key pair as XML strings</summary>
 <param name="privateKeyXML">Returns a XML representation of public key</param>
 <param name="publicKeyXML">Returns a XML representation of private key</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.Encrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Encrypts data using the default public key</summary>
 <param name="data">Data to be encrypted</param>
 <returns>Encrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.Encrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey)">
 <summary>Encrypts data using the provided public key</summary>
 <param name="data">Data to be encrypted</param>
 <param name="publicKey">A public key used for data encryption</param>
 <returns>Encrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="publicKey"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.Encrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.String)">
 <summary>Encrypts data using the provided public key as XML</summary>
 <param name="data">Data to be encrypted</param>
 <param name="publicKeyXML">XML representation of public key used to encrypt data</param>
 <returns>Encrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.EncryptPrivate(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Encrypts data using current public key</summary>
 <param name="data">A data to be encrypred</param>
 <returns>Encrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.Decrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Decrypts data using the default private key</summary>
 <param name="encryptedData">An encrypted data to be decrypted</param>
 <returns>Decrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="encryptedData"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="encryptedData"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.Decrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey)">
 <summary>Decrypts data using the provided private key</summary>
 <param name="encryptedData">An encrypted data to be decrypted</param>
 <param name="PrivateKey">A private key to use to decrypt data</param>
 <returns>Decrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="encryptedData"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="encryptedData"/> or <paramref name="PrivateKey"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.Decrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.String)">
 <summary>Decrypts data using the provided private key as XML</summary>
 <param name="encryptedData">An encrypted data to be decrypted</param>
 <param name="PrivateKeyXML">XMl representation of private key to use to decrypt data</param>
 <returns>Decrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="encryptedData"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="encryptedData"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.DecryptPrivate(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Decrypts data using current private key</summary>
 <param name="encryptedData">An encrypted data to be decrypted</param>
 <returns>Decrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="encryptedData"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="encryptedData"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignData(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider)">
 <summary>Signs a hash of data using the default private key</summary>
 <param name="data">A data to sign hash of</param>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <returns>Signed hash of <paramref name="data"/>; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="hashAlghoritm"/> is not one of <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider"/> values</exception>
 <remarks>Signing computes hash of <paramref name="data"/> and then encrypts the hash using default private key.</remarks>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignData(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey,Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider)">
 <summary>Signs a hash of data using the provided private key</summary>
 <param name="data">A data to sign hash of</param>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <param name="privateKey">A private key to sign data with</param>
 <returns>Signed hash of <paramref name="data"/>; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="hashAlghoritm"/> is not one of <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider"/> values</exception>
 <remarks>Signing computes hash of <paramref name="data"/> and then encrypts the hash using given private key.</remarks>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignData(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.String,Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider)">
 <summary>Signs a hash of data using the provided private key as XML</summary>
 <param name="data">A data to sign hash of</param>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <param name="privateKeyXml">A XMl representation of private key to sign data with</param>
 <returns>Signed hash of <paramref name="data"/>; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
 <remarks>Signing computes hash of <paramref name="data"/> and then encrypts the hash using given private key.</remarks>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignData(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PrivateKey,System.Security.Cryptography.HashAlgorithm)">
 <summary>Signs a hash of data using the provided key and hash alghoritm</summary>
 <param name="data">A data to sign hash of</param>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <param name="privateKey">A private key to sign data with</param>
 <returns>Signed hash of <paramref name="data"/>; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="hashAlghoritm"/> is null</exception>
 <remarks>Signing computes hash of <paramref name="data"/> and then encrypts the hash using given private key.</remarks>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignDataInternal(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.Security.Cryptography.HashAlgorithm)">
 <summary>Signs a hash of data using preset private key and given hash alghoritm</summary>
 <param name="data">A data to sign hash of</param>
 <returns>Signed hash of <paramref name="data"/>; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="hashAlghoritm"/> is null</exception>
 <remarks>Signing computes hash of <paramref name="data"/> and then encrypts the hash using current private key.</remarks>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.VerifyData(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Verifies data against given signature using default public key</summary>
 <param name="data">A data to verify</param>
 <param name="signature">Signature originaly generated from <paramref name="data"/></param>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <returns>True if signature is signature originally generated from data using <see cref="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignDataInternal(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.Security.Cryptography.HashAlgorithm)"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="hashAlghoritm"/> or <paramref name="signature"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.VerifyData(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey,Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Verifies data against given signature using given public key</summary>
 <param name="data">A data to verify</param>
 <param name="signature">Signature originaly generated from <paramref name="data"/></param>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <param name="publicKey">A public key appropriate to private key data was originally signed with</param>
 <returns>True if signature is signature originally generated from data using <see cref="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignDataInternal(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.Security.Cryptography.HashAlgorithm)"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="hashAlghoritm"/> or <paramref name="signature"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.VerifyData(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.String,Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Verifies data against given signature using public key given as XML</summary>
 <param name="data">A data to verify</param>
 <param name="signature">Signature originaly generated from <paramref name="data"/></param>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <param name="publicKeyXML">A XML representation of public key originally used to sign data</param>
 <returns>True if signature is signature originally generated from data using <see cref="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignDataInternal(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.Security.Cryptography.HashAlgorithm)"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="hashAlghoritm"/> or <paramref name="signature"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.VerifyData(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.PublicKey,System.Security.Cryptography.HashAlgorithm,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Verifies data against given signature uisng igven public key and hash alghoritm</summary>
 <param name="data">A data to verify</param>
 <param name="signature">Signature originaly generated from <paramref name="data"/></param>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <param name="publicKey">A public key appropriate to private key data was originally signed with</param>
 <returns>True if signature is signature originally generated from data using <see cref="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignDataInternal(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.Security.Cryptography.HashAlgorithm)"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="hashAlghoritm"/> or <paramref name="signature"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.VerifyDataInternal(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.Security.Cryptography.HashAlgorithm,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Verifies data against given signature</summary>
 <param name="data">A data to verify</param>
 <param name="signature">Signature originaly generated from <paramref name="data"/></param>
 <param name="hashAlghoritm">A hash alghoritm to use to compute hash of <paramref name="data"/></param>
 <returns>True if signature is signature originally generated from data using <see cref="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.SignDataInternal(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,System.Security.Cryptography.HashAlgorithm)"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="hashAlghoritm"/> or <paramref name="signature"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Asymmetric.GetRSAProvider">
 <summary>
 gets the default RSA provider using the specified key size; 
 note that Microsoft's CryptoAPI has an underlying file system dependency that is unavoidable
 </summary>
 <remarks>
 http://support.microsoft.com/default.aspx?scid=http://support.microsoft.com:80/support/kb/articles/q322/3/71.asp&amp;NoWebContent=1
 </remarks>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData">
 <summary>Represents Hex, Byte, Base64, or String data to encrypt/decrypt</summary>
 <remarks>
 <para>Use the <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Text"/> property to set/get a string representation.</para>
 <para>Use the <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Hex"/> property to set/get a string-based Hexadecimal representation.</para>
 <para>Use the <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Base64"/> to set/get a string-based Base64 representation.</para>
 </remarks>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">
 <summary>Gets or sets the default text encoding for this Data instance</summary>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.#ctor">
 <summary>Default CTor - creates new, empty encryption data</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.#ctor(System.Byte[])">
 <summary>CTor - creates new encryption data with the specified byte array</summary>
 <param name="data">A byte array containing encryption data</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.#ctor(System.String)">
 <summary> CTor - creates new encryption data with the specified string; will be converted to byte array using UTF-8 encoding</summary>
 <param name="s">A string. The string will be converted to byte array using UTF-8 encoding</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.#ctor(System.String,System.Text.Encoding)">
 <summary>CTor - creates new encryption data using the specified string and the specified encoding to convert the string to a byte array.</summary>
 <param name="s">A string. The string will be converted to byte array using <paramref name="encoding"/></param>
 <param name="encoding">An encoding to be used with this instance</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is null</exception>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.IsEmpty">
 <summary>Returns true if no data is present</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.StepBytes">
 <summary>Gets or sets allowed step interval, in bytes, for this data; if 0, no limit</summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is less than zero</exception>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.StepBits">
 <summary>Gets or sets allowed step interval, in bits, for this data; if 0, no limit</summary>
 <remarks>Value being set is truncated to whole bytes</remarks>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is less than zero</exception>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.MinBytes">
 <summary>Gets or sets minimum number of bytes allowed for this data; if 0, no limit</summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is less than zero</exception>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.MinBits">
 <summary>Gets or sets minimum number of bits allowed for this data; if 0, no limit</summary>
 <remarks>Value being set is truncated to whole bytes</remarks>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is less than zero</exception>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.MaxBytes">
 <summary>Gets or sets maximum number of bytes allowed for this data; if 0, no limit</summary>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is less than zero</exception>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.MaxBits">
 <summary>Gets or sets maximum number of bits allowed for this data; if 0, no limit</summary>
 <remarks>Value being set is truncated to whole bytes</remarks>
 <exception cref="T:System.ArgumentOutOfRangeException">Value being set is less than zero</exception>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Bytes">
 <summary>Gets or sets the byte representation of the data</summary>
 <remarks>This will be padded to <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.MinBytes"/> and trimmed to <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.MaxBytes"/> as necessary!</remarks>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Text">
 <summary>Gets or sets text representation of bytes using <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/></summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Hex">
 <summary>Gets or sets hex string representation of this data</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Base64">
 <summary>Gets or sets Base64 string representation of this data</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.ToString">
 <summary>Returns text representation of bytes using <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/></summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.ToBase64">
 <summary>Returns Base64 string representation of this data</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.ToHex">
 <summary>Returns Hex string representation of this data</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.op_Implicit(System.Byte[])~Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData">
 <summary>Converts byte array to <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData"/></summary>
 <param name="a">A byte array</param>
 <returns>A new instance of <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData"/> initialized to <paramref name="a"/>; null if <paramref name="a"/> is null</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.op_Implicit(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)~System.Byte[]">
 <summary>Converts <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData"/> to a byte array</summary>
 <param name="a">An <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData"/></param>
 <remarks><paramref name="a"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Bytes">Bytes</see>; null if <paramref name="a"/> is null</remarks>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionUtilities">
 <summary>Provides static utility methods used by multiple <see cref="N:Tools.SecurityT.CryptographyT.EncryptionT"/> classes</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionUtilities.#ctor">
 <summary>Private CTor to achieve pseudo-static class</summary>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionUtilities.ToHex(System.Byte[])">
 <summary>Converts an array of bytes to a string Hex representation</summary>
 <param name="data">Array of bytes</param>
 <returns>Hexadecimal representation of <paramref name="data"/>; null if <paramref name="data"/> is null; <see cref="F:System.String.Empty"/> if <paramref name="data"/> is an empty array.</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionUtilities.FromHex(System.String)">
 <summary>Converts from a string Hex representation to an array of bytes</summary>
 <param name="hexEncoded">A hexastring</param>
 <remarks>Array of bytes reconstructed from <paramref name="hexEncoded"/>; null if <paramref name="hexEncoded"/> is null; an empty array if <paramref name="hexEncoded"/> is an empty string.</remarks>
 <exception cref="T:System.FormatException">String contains an invalid character (character not representing hexanumber)</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionUtilities.FromBase64(System.String)">
 <summary>Converts from a string Base64 representation to an array of bytes</summary>
 <param name="base64Encoded">Base64-encoded string</param>
 <remarks>Array of bytes; null if <paramref name="base64Encoded"/> is null; an empty array if <paramref name="base64Encoded"/> is an empty string</remarks>
 <exception cref="T:System.FormatException"><paramref name="base64Encoded"/> is invalid base64-encoded string</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionUtilities.ToBase64(System.Byte[])">
 <summary>Converts from an array of bytes to a string Base64 representation</summary>
 <param name="data">A data to convert</param>
 <returns>Base64 representation of <paramref name="data"/>; null if <paramref name="data"/> is null; an empty string if <paramref name="data"/> is an empty array</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionUtilities.GetXmlElement(System.String,System.String)">
 <summary>Retrieves an element from an XML string</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionUtilities.GetConfigString(System.String,System.Boolean)">
 <summary>Returns the specified string value from the application .config file</summary>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.Hash">
 <summary>Provides functions for calculating hash values using different alghoritms</summary>
 <remarks>
 Hash functions are fundamental to modern cryptography. These functions map binary 
 strings of an arbitrary length to small binary strings of a fixed length, known as 
 hash values. A cryptographic hash function has the property that it is computationally
 infeasible to find two distinct inputs that hash to the same value. Hash functions 
 are commonly used with digital signatures and for data integrity.
 </remarks>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider">
 <summary>Type of hash; some are security oriented, others are fast and simple</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.CRC32">
 <summary>Cyclic Redundancy Check provider, 32-bit</summary>
 <seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.CRC32"/>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.SHA1">
 <summary>Secure Hashing Algorithm provider, SHA-1 variant, 160-bit</summary>
 <seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.SHA1"/>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.SHA256">
 <summary>Secure Hashing Algorithm provider, SHA-2 variant, 256-bit</summary>
 <seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.SHA256"/>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.SHA384">
 <summary>Secure Hashing Algorithm provider, SHA-2 variant, 384-bit</summary>
 <seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.SHA384"/>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.SHA512">
 <summary>Secure Hashing Algorithm provider, SHA-2 variant, 512-bit</summary>
 <seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.SHA512"/>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.MD5">
 <summary>Message Digest algorithm 5, 128-bit</summary>
 <seelaso cref="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider.MD5"/>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Alghoritm">
 <summary>Gets a hash alghoritm</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.#ctor(Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider)">
 <summary>CTor - instantiate a new hash of the specified type</summary>
 <param name="provider">Identifies the hash alghoritm to use</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="provider"/> is not one of <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider"/> values</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.#ctor(System.Security.Cryptography.HashAlgorithm)">
 <summary>CTor- instantiates a new hash based on given <see cref="T:System.Security.Cryptography.HashAlgorithm"/></summary>
 <param name="alghoritm">A hash alghoritm provider</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="alghoritm"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.GetAlghoritm(Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider)">
 <summary>Converts <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider"/> value to instance of <see cref="T:System.Security.Cryptography.HashAlgorithm"/>-derived class</summary>
 <param name="provider">Identifies the hash alghoritm</param>
 <returns>An instance of <see cref="T:System.Security.Cryptography.HashAlgorithm"/>-derived class</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="provider"/> is not one of <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Hash.HashProvider"/> values</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Calculate(System.IO.Stream@)">
 <summary>Calculates hash on a stream of arbitrary length</summary>
 <param name="stream">A stream to calculate hash for</param>
 <remarks>Calculated hash</remarks>
 <exception cref="T:System.ObjectDisposedException"><see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Alghoritm"/> is disposed</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Calculate(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Calculates hash for fixed length <see cref="N:System.Data"/></summary>
 <param name="data">A data to calculate hash for</param>
 <returns>Calculated hash</returns>
 <exception cref="T:System.ObjectDisposedException"><see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Alghoritm"/> is disposed</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
 <remarks><see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> of value being returned is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see>.</remarks>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Calculate(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Calculates hash for a string with a prefixed salt value.</summary>
 <param name="data">A data to claculate hash for</param>
 <param name="salt">A "salt" is random data prefixed to every hashed value to prevent common dictionary attacks.</param>
 <exception cref="T:System.ObjectDisposedException"><see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Alghoritm"/> is disposed</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> or <paramref name="salt"/> is null</exception>
 <remarks><see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> of value being returned is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see>.</remarks>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Calculate(System.Byte[])">
 <summary>Calculates hash for an array of bytes</summary>
 <param name="data">A data to calculate hash for</param>
 <returns>Calculated hash</returns>
 <exception cref="T:System.ObjectDisposedException"><see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Alghoritm"/> is disposed</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.Hash.CRC32">
 <summary>Implements CRC32 hash alghoritm</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
 <summary>Routes data written to the object into the hash algorithm for computing the hash.</summary>
 <param name="array">The input to compute the hash code for. </param>
 <param name="ibStart">The offset into the byte array from which to begin using data. </param>
 <param name="cbSize">The number of bytes in the byte array to use as data. </param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.CRC32.HashFinal">
 <summary>Finalizes the hash computation after the last data is processed by the cryptographic stream object.</summary>
 <returns>The computed hash code.</returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.CRC32.Initialize">
 <summary>Initializes an implementation of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Hash.CRC32.Hash">
 <summary>Gets the value of the computed hash code.</summary>
 <returns>The current value of the computed hash code.</returns>
 <exception cref="T:System.ObjectDisposedException">The object has already been disposed.</exception>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.CRC32.isDisposed">
 <summary>True when this instance was already disposed</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.CRC32.Dispose(System.Boolean)">
 <summary>Releases all resources used by the current instance of the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> class.</summary>
 <param name="disposing">Is disposing</param>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Hash.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Dispose(System.Boolean)">
 <summary>Implements <see cref="M:System.IDisposable.Dispose"/></summary>
 <param name="disposing">True if disposing</param>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Hash.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric">
 <summary>Symmetric encryption uses a single key to encrypt and decrypt.</summary>
 <remarks>Both parties (encryptor and decryptor) must share the same secret key.</remarks>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.DefaultIntializationVector">
 <summary>Default initialization vector</summary>
</member>
<member name="T:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider">
 <summary>Symetric encryption providers</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider.DES">
 <summary>The Data Encryption Standard provider supports a 64 bit key only</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider.RC2">
 <summary>The Rivest Cipher 2 provider supports keys ranging from 40 to 128 bits, default is 128 bits</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider.Rijndael">
 <summary>The Rijndael (also known as AES) provider supports keys of 128, 192, or 256 bits with a default of 256 bits</summary>
</member>
<member name="F:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider.TripleDES">
 <summary>The TripleDES provider (also known as 3DES) supports keys of 128 or 192 bits with a default of 192 bits</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.#ctor(Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider,System.Boolean)">
 <summary>Instantiates a new symmetric encryption object using the specified provider.</summary>
 <param name="provider">Identifies symmetric cryptography alghoritm</param>
 <param name="useDefaultInitializationVector">True to use default initialization vector, false to use random one</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="provider"/> is not one of <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider"/> values</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.#ctor(System.Security.Cryptography.SymmetricAlgorithm,System.Boolean)">
 <summary>Instantiates a new symmetric encryption object using the specified provider.</summary>
 <param name="alghoritm">A symmetric cryptography alghoritm</param>
 <param name="useDefaultInitializationVector">True to use default initialization vector, false to use random one</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="alghoritm"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.GetAlghoritm(Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider)">
 <summary>Converts <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider"/> to <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/></summary>
 <param name="provider">Identifies symmetric cryptography provider</param>
 <returns>A new instance of <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>-derived class</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="provider"/> is not one of <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.SymmetricProvider"/> values</exception>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Algnoritm">
 <summary>Gets a cryptography alghoritm used by this instance</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.KeySizeBytes">
 <summary>Gets or sets key size in bytes.</summary>
 <remarks>Default key size is used for any given provider; if you want to force a specific key size, set this property</remarks>
 <seelaso cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.KeySizeBits"/>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.KeySizeBits">
 <summary>Gets or sets key size in bits.</summary>
 <remarks>Default key size is used for any given provider; if you want to force a specific key size, set this property</remarks>
 <seelaso cref="P:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.KeySizeBytes"/>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Key">
 <summary>Gets or sets the key used to encrypt/decrypt data</summary>
</member>
<member name="P:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.IntializationVector">
 <summary>Gets or sets initialization vector used by this instance</summary>
 <remarks>
 Using the default Cipher Block Chaining (CBC) mode, all data blocks are processed using
 the value derived from the previous block; the first data block has no previous data block
 to use, so it needs an InitializationVector to feed the first block
 </remarks>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.RandomInitializationVector">
 <summary>Generates a random Initialization Vector</summary>
 <remarks>An ititialization vector in form of <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData"/></remarks>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.RandomKey">
 <summary>Generates a random Key</summary>
 <returns>An encryption key in form of <see cref="T:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData"/></returns>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.ValidateKeyAndIv(System.Boolean)">
 <summary>Ensures that _crypto object has valid Key and IV prior to any attempt to encrypt/decrypt anything</summary>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Encrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Encrypts the specified Data using provided key</summary>
 <param name="data">A data to be encrypted</param>
 <param name="key">An encryption key; ignored if null</param>
 <returns>Encrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Encrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Encrypts the specified Data using preset key and preset initialization vector</summary>
 <param name="data">A data to be encrypted</param>
 <returns>Encryptred data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="data"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Encrypt(System.IO.Stream,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Encrypts the stream to memory using provided key and provided initialization vector</summary>
 <param name="stream">A stream to encrypt</param>
 <param name="key">An encryption key; ignored if null</param>
 <param name="iv">Initialization vector; ignored if nulll</param>
 <returns>Encrypted data</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Encrypt(System.IO.Stream,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Encrypts the stream to memory using specified key</summary>
 <param name="stream">A stream to encrypt</param>
 <param name="key">An encryption key; ignored if null</param>
 <returns>Encrypted data</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Encrypt(System.IO.Stream)">
 <summary>Encrypts the specified stream to memory using preset key and preset initialization vector</summary>
 <param name="stream">A stream to encrypt</param>
 <returns>Encrypted data</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Decrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Decrypts the specified data using provided key and preset initialization vector</summary>
 <param name="encryptedData">Encrypted data to decrypt</param>
 <param name="key">An encryption key; ignored if null</param>
 <returns>Decrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="encryptedData"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="encryptedData"/> is null</exception>
 <exception cref="T:System.Security.Cryptography.CryptographicException">Cannot decrypt data. The key may be invalid.</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Decrypt(System.IO.Stream,Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Decrypts the specified stream using provided key and preset initialization vector</summary>
 <param name="encryptedStream">A stream to decrypt</param>
 <param name="key">An encryption key; ignored if null</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="encryptedStream"/> is null</exception>
 <exception cref="T:System.Security.Cryptography.CryptographicException">Cannot decrypt data. The key may be invalid.</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Decrypt(System.IO.Stream)">
 <summary>Decrypts the specified stream using preset key and preset initialization vector</summary>
 <param name="encryptedStream">A stream to decrypt</param>
 <returns>Decrypted data</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="encryptedStream"/> is null</exception>
 <exception cref="T:System.Security.Cryptography.CryptographicException">Cannot decrypt data. The key may be invalid.</exception>
</member>
<member name="M:Tools.SecurityT.CryptographyT.EncryptionT.Symmetric.Decrypt(Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData)">
 <summary>Decrypts the specified data using preset key and preset initialization vector</summary>
 <param name="encryptedData">A data to decrypt</param>
 <returns>Decrypted data; <see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding"/> is set to <paramref name="encryptedData"/>.<see cref="P:Tools.SecurityT.CryptographyT.EncryptionT.EncryptionData.Encoding">Encoding</see></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="encryptedData"/> is null</exception>
 <exception cref="T:System.Security.Cryptography.CryptographicException">Cannot decrypt data. The key may be invalid.</exception>
</member>
<member name="T:Tools.TextT.Escaping">
 <summary>Contains various methods for string escaping</summary>
 <version version="1.5.3">This module is new in version 1.5.3</version>
 <version version="1.5.4">Changed namespace from <c>Text</c> to <see cref="N:Tools.TextT"/>.</version>
</member>
<member name="T:Tools.TextT.Escaping.Quotes">
 <summary>Indicates possible types of qotes used in many programming languages</summary>
</member>
<member name="F:Tools.TextT.Escaping.Quotes.Single">
 <summary>Single quotes (i.e. apostrophes) (')</summary>
</member>
<member name="F:Tools.TextT.Escaping.Quotes.Double">
 <summary>Double quotes (")</summary>
</member>
<member name="F:Tools.TextT.Escaping.Quotes.SingleOrDouble">
 <summary>Expect both - single(') or double (") quotes</summary>
</member>
<member name="T:Tools.TextT.Escaping.Mode">
 <summary>Defines possible escaping modes that can be used by many programming languages</summary>
</member>
<member name="F:Tools.TextT.Escaping.Mode.Native">
 <summary>Attempts to use character specific escape sequance when defined (like &amp;lt; for &lt; in HTML or \r for carriage return in C-based languages)</summary>
</member>
<member name="F:Tools.TextT.Escaping.Mode.Universal">
 <summary>Always uses universal unicode escaping sequence (like &amp;#60; for &lt; in HTML or \u000A for carriage return in JavaScript)</summary>
</member>
<member name="M:Tools.TextT.Escaping.EscapeXml(System.String,Tools.TextT.Escaping.Mode)">
 <summary>Makes string safe for XML (and HTML) by turning characters &amp; and &lt; to XML entities</summary>
 <param name="str">String to be made safe</param>
 <param name="mode">Mode of entity creation</param>
 <returns><paramref name="str"/> with characters &amp; and &lt; replaced with corresponding XML entities. Null when <paramref name="str"/> is null.</returns>
 <seealso href="http://www.w3.org/TR/xml11/#sec-references">XML Character and Entity References</seealso>
</member>
<member name="M:Tools.TextT.Escaping.EscapeXmlAttribute(System.String,Tools.TextT.Escaping.Mode,Tools.TextT.Escaping.Quotes)">
 <summary>Makes string safe for XML (and HTML) attributes by turning characters &amp;, &lt;, " and ' to XML entities</summary>
 <param name="str">String to be made safe</param>
 <param name="mode">Mode of entity creation</param>
 <param name="surroundingQuotes">Determines which quotes attribute is surronded with - allowing to escape only either ' or " or both.</param>
 <returns><paramref name="str"/> with characters &amp; and &lt; and possibly ' and " (depending on <paramref name="surroundingQuotes"/>) replaced with corresponding XML entities. Null when <paramref name="str"/> is null.</returns>
 <seealso href="http://www.w3.org/TR/xml11/#sec-references">XML Character and Entity References</seealso>
</member>
<member name="M:Tools.TextT.Escaping.EscapeJavaScript(System.String,Tools.TextT.Escaping.Mode,Tools.TextT.Escaping.Quotes)">
 <summary>Makes string safe for JavaScript (ECMA script) quoted string</summary>
 <param name="str">String to be made safe</param>
 <param name="mode">Mode of escape sequence creation</param>
 <param name="surroundingQuotes">Determines which quotes attribute is surronded with - allowing to escape only either ' or " or both.</param>
 <returns><paramref name="str"/> with characters \, <see cref="F:Tools.Chars.Cr"/>, <see cref="F:Tools.Chars.Lf"/> and possibly ' and " (depending on <paramref name="surroundingQuotes"/>) replaced with corresponding escape sequences. Null when <paramref name="str"/> is null.</returns>
 <seealso href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf#page=32">ECMA Script String Literals</seealso>
</member>
<member name="M:Tools.TextT.Escaping.EscapeStringFormat(System.String)">
 <summary>Makes string part safe for <see cref="T:System.String"/> function so it does not recognize any formating placeholders in it. This is achievend by duplicating all {s and }s.</summary>
 <param name="str">String to be made safe</param>
 <returns><paramref name="str"/> witch characters { and } duplicated. Null when <paramref name="str"/> is null.</returns>
 <seealso cref="T:System.String"/>
</member>
<member name="M:Tools.TextT.Escaping.EscapeSql(System.String)">
 <summary>Makes string safe for SQL quoted string</summary>
 <param name="str">String to be made safe</param>
 <returns><paramref name="str"/> with all occurences of single quote (') duplicated. Null when <paramref name="str"/> is null.</returns>
 <remarks>
 This function supports minimal SQL escaping (of single quote (') only). It does not support double-quoted strings supported by some database engines. It also does not support additional escape sequences supported by some database engines such as MySQL.
 <para>
 Following databases do not support additional escape sequences and it's safe to use this function with them: Microsft SQL, Oracle, Firebird, SQLite (list is not complete, only a few commonly used database engines' documentations were checked).
 Some of databases supporting additional escaping are MySQL, PostgreSQL.
 </para>
 <note>No additional escaping is part of SQL standard.</note>
 </remarks>
 <seealso href="http://msdn.microsoft.com/en-us/library/ms179899.aspx">Constants (Transact-SQL)</seealso>
 <seealso href="http://download.oracle.com/docs/cd/E11882_01/server.112/e10592/sql_elements003.htm#i42617">Oracle Text Literals</seealso>
 <seelaso href="http://publib.boulder.ibm.com/infocenter/db2luw/v9r8/index.jsp?topic=/com.ibm.db2.luw.sql.ref.doc/doc/r0000731.html">DB2 Constants</seelaso>
 <seealso href="http://www.firebirdsql.org/manual/qsg2-databases.html#qsg2-strings">Firebird - Thinks to know about strings</seealso>
 <seelaso href="http://www.sqlite.org/lang_expr.html">SQLite expressions</seelaso>
 <seelaso href="http://dev.mysql.com/doc/refman/5.0/en/string-syntax.html">MySQL Strings</seelaso>
 <seelaso href="http://www.postgresql.org/docs/8.4/interactive/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS">PostgreSQL String Constants</seelaso>
</member>
<member name="M:Tools.TextT.Escaping.EscapeMySql(System.String,Tools.TextT.Escaping.Quotes)">
 <summary>Makes string safe for MySQL quoted string</summary>
 <param name="str">String to be made safe</param>
 <param name="surroundingQuotes">Determines which quotes attribute is surronded with - allowing to escape only either ' or " or both.</param>
 <returns><paramref name="str"/> with some characters replaced by appropriate backslash escapes. Null when <paramref name="str"/> is null.</returns>
 <remarks>This function escapes string for MySQL database engine with <c><see href="http://dev.mysql.com/doc/refman/5.0/en/server-sql-mode.html#sqlmode_no_backslash_escapes">NO_BACKSLASH_ESCAPES</see></c> off.
 <para>
 Characters replaced are: single quote ('; if <paramref name="surroundingQuotes"/> requires it),
 double quote ("; if <paramref name="surroundingQuotes"/> requires it), null char, bacspace (\b, 0x8),
 line feed (new line, \n, 0xA), carriage return (\r, 0xD), vertical tab (\t, 0x9), Control-Z (0x26), backslash (\).
 </para>
 </remarks>
 <seelaso href="http://dev.mysql.com/doc/refman/5.0/en/string-syntax.html">MySQL Strings</seelaso>
</member>
<member name="M:Tools.TextT.Escaping.EscapePostgreSql(System.String,Tools.TextT.Escaping.Mode)">
 <summary>Makes string safe for PostgreSQL quoted string</summary>
 <param name="str">String to be made safe</param>
 <param name="mode">Mode of escape sequence creation. Mode <see cref="F:Tools.TextT.Escaping.Mode.Universal"/> requires that resulting string is specified as Unicode escaped string in PostgreSQL code (U&amp;'').</param>
 <returns><paramref name="str"/> with all occurences of single-quote (') duplicated (only when <paramref name="mode"/> is <see cref="F:Tools.TextT.Escaping.Mode.Native"/>) and a few other charactres replaced with appropriate backslash escape sequences. Null when <paramref name="str"/> is null.</returns>
 <remarks>
 Characters replaces by escape sequences are: single quote ('; when <paramref name="mode"/> is <see cref="F:Tools.TextT.Escaping.Mode.Native"/> replaced with '' otherwise with \0027),
 backspace (\b, 0x8), line feed (new line, \n, 0xA), carriage return (\r, 0xD), horizontal tab (\t, 0x9), backshash (\).
 <note>This requires PostrgeSQL option <see href="http://www.postgresql.org/docs/8.4/interactive/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS">standard_conforming_strings</see> to be off.</note>
 <note>Whan <paramref name="mode"/> is <see cref="F:Tools.TextT.Escaping.Mode.Universal"/> value returned by this function is notappropriate for "normal" PostgeSQL string literals. It must be used in Unicode string literals (U&amp;'').</note>
 </remarks>
 <seelaso href="http://www.postgresql.org/docs/8.4/interactive/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS">PostgreSQL String Constants</seelaso>
</member>
<member name="M:Tools.TextT.Escaping.EscapeSqlLike(System.String)">
 <summary>Escapes given string for right side of SQL LIKE operator to be treated as exact match.</summary>
 <param name="str">String to be made safe</param>
 <returns><paramref name="str"/> with all ocurences of underscore (_) and percent sign (%) backslash-escaped. Null when <paramref name="str"/> is null.</returns>
 <remarks>In conformat SQL implementations this string can be used on right side of LIKE operator only when followed by <c>ESCAPE '\'</c>. Some implementations (e.g. MySQL) may not require it.
 <para>This function does not make string safe for any kind of SQL sttring literal. It only makes it safe for right side of the LIKE operator (if passed there in proper form). Use <see cref="M:Tools.TextT.Escaping.EscapeSql(System.String)"/> or SQL-engine-specific function to make string safe for SQL string.</para></remarks>
 <version version="1.5.4">Fix: Backslash (\) was not escaped</version>
</member>
<member name="M:Tools.TextT.Escaping.EscapeSqlLike(System.String,System.Char)">
 <summary>Escapes given string for right side of SQL LIKE operator to be treated as exact match.</summary>
 <param name="str">String to be made safe</param>
 <returns><paramref name="str"/> with all ocurences of underscore (_) and percent sign (%) escaped. Null when <paramref name="str"/> is null.</returns>
 <remarks>In conformat SQL implementations this string can be used on right side of LIKE operator only when followed by <c>ESCAPE '<paramref name="escape"/>'</c>. Some implementations (e.g. MySQL) may not require it.
 <para>This function does not make string safe for any kind of SQL sttring literal. It only makes it safe for right side of the LIKE operator (if passed there in proper form). Use <see cref="M:Tools.TextT.Escaping.EscapeSql(System.String)"/> or SQL-engine-specific function to make string safe for SQL string.</para></remarks>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="M:Tools.TextT.Escaping.EscapeCSharp(System.String,Tools.TextT.Escaping.Mode)">
 <summary>Makes string safe for regular (non-verbatim) C# string (double-quoted)</summary>
 <param name="str">String to be made safe</param>
 <param name="mode">Mode of escape sequence creation</param>
 <returns><paramref name="str"/> with some characters replaced by native or universal escape sequences (depending on value of the <paramref name="mode"/>) parameter. Null when <paramref name="str"/> is null.</returns>
 <remarks>
 This function should be used for escaping strings that will be placed inside double-quoted C# string literal. It's not suitable for single-quoted character literals and it's not suitable for C# verbatim strings (@"").
 <para>This function replaces following characters with appropriate C# escape sequences: double quote ("), backslash (\), null character, alert (0x7, \a), backspace (0x8, \b), form feed (0xC, \f), new line (line feed, 0xA, \n), carriage return (0xD, \r), horizontal tab (0x9, \t), vertical tab (0xB, \v).</para>
 </remarks>
</member>
<member name="M:Tools.TextT.Escaping.EscapeC(System.String,Tools.TextT.Escaping.Mode,Tools.TextT.Escaping.Quotes)">
 <summary>Makes string safe for C/C++ string</summary>
 <param name="str">String to be made safe</param>
 <param name="mode">Mode of escape sequence creation</param>
 <param name="surroundingQuotes">Determines which quotes attribute is surronded with - allowing to escape only either ' or " or both.</param>
 <returns><paramref name="str"/> with some characters replaced by native or universal escape sequences (depending on value of the <paramref name="mode"/>) parameter. Null when <paramref name="str"/> is null.</returns>
 <remarks>
 This function replaces following characters: single quote ('; only when <paramref name="surroundingQuotes"/> requires it),
 double quote (", only when <paramref name="surroundingQuotes"/> requires it, backslash (\), alert (bell, \a, 0x7),
 backspace (\b, 0x8), form feed (\f, 0xC), line feed (new line, \n, 0xA), carriage return (\r, 0xD), horizontal tab (\t, 0x9),
 vertical tab (\v, 0xB), question mark when it is 2nd question mark in trigraph (??=, ??(, ??/, ??), ??', ??&lt;, ??!, ??>, ??-).</remarks>
 <seealso href="http://msdn.microsoft.com/en-us/library/h21280bw.aspx">C++ Escape sequences</seealso>
 <seealso href="http://msdn.microsoft.com/en-us/library/bt0y4awe.aspx">C++ Trigraphs</seealso>
</member>
<member name="M:Tools.TextT.Escaping.EscapePhpSingle(System.String)">
 <summary>Makes string safe for PHP single-quoted string</summary>
 <param name="str">String to be made safe</param>
 <returns><paramref name="str"/> with backslash-escaped all occurences of backslash (\) and single quote (').</returns>
 <remarks>Use this function only for single-quoted PHP strings as PHP handles single-quoted and double-quoted string "literals" different way.
 <note>PHP has not native support of Unicode. It can deal with UTF-8-encoded strings as if being ANSI.</note></remarks>
 <seealso href="http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.single">PHP Sigle quoted strings</seealso>
</member>
<member name="M:Tools.TextT.Escaping.EscapePhpDouble(System.String,Tools.TextT.Escaping.Mode)">
 <summary>Makes string safe for PHP double-quoted string</summary>
 <param name="str">String to be made safe</param>
 <param name="mode">Mode of escape sequence creation</param>
 <returns><paramref name="str"/> with some characters backslash-escaped with either special or universal ASCII escape sequences (depending on <paramref name="mode"/>).</returns>
 <remarks>Use this function only for double-quoted PHP strings as PHP handles single-quoted and double-quoted string "literals" different way.
 <para>Characters escaped are: backslash (\), line feed (new line, \n, 0xA), carriage return (\r, 0xD),
 horizontal tab (\t, 0x9), vertical tab (\v, 0xB), form feed (\f, 0xC), double quote ("), dollar sign ($).</para>
 <note>PHP support for escape sequences \v (vertical tab) and \f (form feed) is new in version 5.2.5. If you are targeting older version of PHP interpreter you must use <see cref="F:Tools.TextT.Escaping.Mode.Universal">Universal</see> <paramref name="mode"/> to make PHP interpreter understand the string literal properly.</note>
 <note>PHP has not native support of Unicode. It can deal with UTF-8-encoded strings as if being ANSI. Universal escape sequences genereted when <paramref name="mode"/> is <see cref="F:Tools.TextT.Escaping.Mode.Universal"/> represent ASCII rather than Unicode values.</note></remarks>
 <seealso href="http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double">PHP Double quoted strings</seealso>
</member>
<member name="M:Tools.TextT.Escaping.EscapeVBLike(System.String)">
 <summary>Makes string safe for Visual Basic Like operator right side</summary>
 <param name="str">String to be mader safe</param>
 <returns><paramref name="str"/> with occurences of cpecial characters turned to one-character-long character groups. Null when <paramref name="str"/> is null.</returns>
 <remarks>Characters replaced are:
 <list type="table"><listheader><term>Character</term><description>Replaced with</description></listheader>
 <item><term>?</term><description>[?]</description></item>
 <item><term>*</term><description>[*]</description></item>
 <item><term>#</term><description>[#]</description></item>
 <item><term>[</term><description>[[]</description></item>
 </list>
 This function does not make <paramref name="str"/> safe for Visual Basic string literals. It's only made safe to represent exact match for Visual Basic like operator when right hand of the operator is variable or function implementing the operator is called.
 <note>The <see cref="T:Tools.TextT.Escaping"/> module does not provide any function for escaping of Visual Basic strings (like it is provided for C#, PHP and other languages. This is because there is no universal way how to make string literal safe for Visual Basic. Certain characters simply cannot be present within Visual Basic string - even not as escape sequences. The only escape sequence supported by Visual Basic is " becomes "".</note>
 </remarks>
 <seealso href="http://msdn.microsoft.com/en-us/library/swf8kaxw.aspx">Like Operator (Visual Basic)</seealso>
 <seealso cref="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)"/>
 <seealso cref="M:Microsoft.VisualBasic.CompilerServices.Operators.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)"/>
 <seealso cref="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLike(System.String,System.String,Microsoft.VisualBasic.CompareMethod)"/>
</member>
<member name="M:Tools.TextT.Escaping.EscapeUrl(System.String)">
 <summary>Encodes a URL string.</summary>
 <param name="str">The text to encode.</param>
 <returns>An encoded string.</returns>
 <remarks>This function internally uses <see cref="M:System.Web.HttpUtility.UrlEncode(System.Byte[])"/>. In future releases this might be changed to use own implementation of URL encoding.</remarks>
 <seealso cref="M:System.Web.HttpUtility.UrlEncode(System.Byte[])"/>
</member>
<member name="M:Tools.TextT.Escaping.EscapeUrlPath(System.String)">
 <summary>Encodes the path portion of a URL string for reliable HTTP transmission from the Web server to a client.</summary>
 <param name="str">The text to URL-encode.</param>
 <returns>The URL-encoded text.</returns>
 <remarks>This function internally uses <see cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)"/>. In future releases this might be changed to use own implementation of URL encoding.</remarks>
 <seealso cref="M:System.Web.HttpUtility.UrlPathEncode(System.String)"/>
</member>
<member name="M:Tools.TextT.Escaping.EscapeCss(System.String,Tools.TextT.Escaping.Mode,Tools.TextT.Escaping.Quotes)">
 <summary>Makes string safe for CSS single- or double-quoted string literal</summary>
 <param name="str">String to me made safe</param>
 <param name="mode">Mode of escape sequence creation</param>
 <param name="surroundingQuotes">Determines which quotes attribute is surronded with - allowing to escape only either ' or " or both.</param>
 <returns><paramref name="str"/> with some characters replaced with escape sequences. Null when <paramref name="str"/> is null.</returns>
 <remarks>Following characters are encoded:
 <list type="table"><listheader><term>Character</term><description>Encoded as</description></listheader>
 <item><term>Single quote (')</term><description>\' or \27 (depending on <paramref name="mode"/>; not encoded when <paramref name="surroundingQuotes"/> does not contain <see cref="F:Tools.TextT.Escaping.Quotes.Single"/>)</description></item>
 <item><term>Double quote (")</term><description>\" or \22 (depending on <paramref name="mode"/>; not encoded when <paramref name="surroundingQuotes"/> does not contain <see cref="F:Tools.TextT.Escaping.Quotes.Double"/>)</description></item>
 <item><term>Backslash (\)</term><description>\\ or \5C (depending on <paramref name="mode"/>)</description></item>
 <item><term>Null char</term><description>\0</description></item>
 <item><term>Alert (bell, 0x7)</term><description>\7</description></item>
 <item><term>Form feed (\f, 0x8)</term><description>\8</description></item>
 <item><term>Line feed (new line, \n, 0xA)</term><description>\A</description></item>
 <item><term>Carriage return (\r, 0xD)</term><description>\D</description></item>
 <item><term>Vertical tab (\v, 0xB)</term><description>\B</description></item>
 <item><term>Horizontal tab (\t, 0x9)</term><description>\9</description></item>
 <item><term>Ampresand (&amp;)</term><description>\26</description></item>
 <item><term>Less than (&lt;)</term><description>\3C</description></item>
 </list>
 <para>
 Only single quote ('), double quote (") and backslash (\) support native mode escaping. All other characters are always escaped using numeric escapes.
 All numeric escapes are always followed by space. This is CSS standard feature how to terminate variable-lenght escape sequence. Conformant User agent ignores such space.
 </para>
 <para>
 Many CSS escapes are not necessayr and are provided for convenience.
 Espacially &amp; and &lt; escape sequences ensure that resulting CSS string can be also safely embdeded in HTML (XML) text node (with proper value of <paramref name="surroundingQuotes"/> in attribute value as well).
 </para>
 <para>Way of escaping provided by this function is compatible with CSS2 specification and CSS3 draft.</para>
 </remarks>
</member>
<member name="M:Tools.TextT.Escaping.EscapeRegEx(System.String,Tools.TextT.Escaping.Mode)">
 <summary>Escapes given string for .NET regular expressions. All characters with special meaning in regular expressions are replaced wint appropriate escape sequences.</summary>
 <param name="str">String to me made safe</param>
 <param name="mode">Mode of escape sequence creation</param>
 <returns><paramref name="str"/> with some characters replaced. Null when <paramref name="str"/> is null.</returns>
 <remarks>
 Characters replaced are special characters bell: (\a, 0x7), backspace (\b, 0x8), vertical tab (\t, 0x9), line feed (new line, \n, 0xA), 
 vertical tab (\v, 0xB), form feed (\f, 0xC), carriage return (\r, 0xD), escape (\e, 0x1B). And characters with
 special meaning for regular expressions: dot (.), dollar sign ($), circumflex (carret, ^), braces ({}), square brackets ([]), parentheses (()),
 pipe (vertical bar, |), asterisk (*), plus sign (+), question mark (?), backslash (\).
 </remarks>
</member>
<member name="T:Tools.TextT.EncodingT.ISO2022">
 <summary>Provides runtime access to list of text encodings registered by ISO-IR 2022 (also known as ISO/IEC 2022 or ECMA-35)</summary>
 <remarks>This class provides access to information about such encodings and possibly gives their names as registered by IANA and possibly gives instances of the <see cref="T:System.Text.Encoding"/> class to manipulate with text stored in this encoding. Not all ISO-2022 encodings are registered with IANA and not all ISO-2022 encodings are supported by .NET framework. This class does not provide more implementations of the <see cref="T:System.Text.Encoding"/> class to deal with all ISO-2022 registered encodings neither this class provides generic ISO-2022 reader/writer. The aim of this class is to provide possibility of identifiying ISO 2022 encoding by its escape sequence, not to deal with it.
 <para>For further reference see <a href="http://www.itscj.ipsj.or.jp/ISO-IR/">International Register of Coded Character Sets To Be Used With Escape Sequences</a>.</para></remarks>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022.xmlns">
 <summary>XML namespace which contains XML-Schema definition of format for storing information about ISO-2022 encodings</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022.AsciiEscape">
 <summary>represents ASCII Escape character often used with ISO-2022 encodings</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022._DefaultInstance">
 <summary>Contains value of the <see cref="P:Tools.TextT.EncodingT.ISO2022.DefaultInstance"/> property</summary>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022.DefaultInstance">
 <summary>Gets default instance of the <see cref="T:Tools.TextT.EncodingT.ISO2022"/> class initialized with default values.</summary>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022.#ctor">
 <summary>Default constructor. Returns new instance which operates with built-in definition of ISO-2022 encodings.</summary>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022.#ctor(System.Xml.Linq.XDocument)">
 <summary>Constructor which allows to load definitions of encodings from custom <see cref="T:System.Xml.Linq.XDocument"/></summary>
 <param name="EncodingDefinitions">The <see cref="T:System.Xml.Linq.XDocument"/> containing encoding definitions</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="EncodingDefinitions"/> is null</exception>
 <exception cref="T:System.Xml.XmlException">Given <paramref name="EncodingDefinitions"/> does not validate to XML-Schema</exception>
 <exception cref="T:System.ArgumentException">Root element of <paramref name="EncodingDefinitions"/> is not http://codeplex.com/DTools/IS2022:encodings</exception>
 <remarks>The XML-Schema for the http://codeplex.com/DTools/IS2022 namespace is specified in file Text/Encoding/IOS2022.xsd which is included in source code of the Tools project. Actual schema can be also obtained by reading embdeded resource Tools.TextT.EncodingT.ISO2022Schema from this assembly.</remarks>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>True if <paramref name="obj"/> is <see cref="T:Tools.TextT.EncodingT.ISO2022"/> and was initialized with the same xml element.</returns>
 <exception cref="T:System.NullReferenceException">The 
 <paramref name="obj" /> parameter is null.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022.veh(System.Object,System.Xml.Schema.ValidationEventArgs)">
 <summary><see cref="T:System.Xml.Schema.ValidationEventHandler"/> to handle and raise XML-Errors</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022.root">
 <summary>Root element of encoding definitions in XML</summary>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022.GetEncodingTypes">
 <summary>Gets all encoding types recognized by ISO-2022</summary>
 <returns>Array of <see cref="T:Tools.TextT.EncodingT.ISO2022EncodingType"/> class instance. One for each of types defined in the <see cref="T:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes"/> enumeration.</returns>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022.GetEncodings">
 <summary>Gets all encodings recognized by ISO-2022 and registered by IPSJ/ITSCJ</summary>
 <remarks>Array of <see cref="T:Tools.TextT.EncodingT.ISO2022Encoding"/> to represent all the encodings</remarks>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022.DetectEncoding(System.IO.Stream,Tools.TextT.EncodingT.ISO2022.ISO20200Sets,System.Byte[]@)">
 <summary>Attempts to detect ISO-2022 encoding of <see cref="T:System.IO.Stream"/></summary>
 <param name="stream">Stream to detect encoding of. Current position of stream must be at place where the encoding escape sequence starts, where encoding should be detected.</param>
 <param name="WorkingSet">Specifies current working set of stream - it defines which set of escape sequences will be used. If you are at the beginning of an unknown stream leave default value <see cref="F:Tools.TextT.EncodingT.ISO2022.ISO20200Sets.G0"/></param>
 <param name="BytesRead">Optional output parameter which returns all the bytes that were read from <paramref name="stream"/> when attempting to detect encoding. This parameter may be useful when trying to detect encoding of stream where you cannot seek in case encoding is not detected.</param>
 <returns>Detected encoding or null if encoding was not detected</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="WorkingSet"/> is not member of <see cref="T:Tools.TextT.EncodingT.ISO2022.ISO20200Sets"/>.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="stream"/> does not support reading</exception>
 <remarks>If return value is null the encoding was not detected. But actual position in <paramref name="stream"/> have been changed. If <paramref name="stream"/> represents ISO-2022 encoded string you want to decode you should seek back (if <paramref name="stream"/> supports seeking) and reinterpred bytes as characters in somehow determined default encoding.
 <para>This method is intended to be used especially only at start of string or in special cases when encoding type information is stored as ISO-2022 escape sequnce apart from encoded string itself. It is because it is not efficient to call this method for each byte in stream in order to test if it represents start of escape sequnce. You should use some finite-state-automaton-based alghoritm instead (which is not provided by this class).</para></remarks>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022.DetectEncoding(System.Byte[],Tools.TextT.EncodingT.ISO2022.ISO20200Sets)">
 <summary>Attempts to detect ISO-2022 encoding of array of bytes</summary>
 <param name="bytes">Byte array to detect encoding of. This array should start with valid ISO-2022 escape sequence for some encoding in given <paramref name="WorkingSet"/>. Otherwise encoding is not bdetected.</param>
 <param name="WorkingSet">Specifies current working set of stream - it defines which set of escape sequences will be used. If you are at the beginning of an unknown stream leave default value <see cref="F:Tools.TextT.EncodingT.ISO2022.ISO20200Sets.G0"/></param>
 <returns>Detected encoding or null if encoding was not detected</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="WorkingSet"/> is not member of <see cref="T:Tools.TextT.EncodingT.ISO2022.ISO20200Sets"/>.</exception>
</member>
<member name="T:Tools.TextT.EncodingT.ISO2022.ISO20200Sets">
 <summary>Defines working sets used by IS-2022</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022.ISO20200Sets.C0">
 <summary>C0 set (ASCII and derivatives)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022.ISO20200Sets.C1">
 <summary>C1 set (ISO 8859 and Unicode)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022.ISO20200Sets.G0">
 <summary>G0 set</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022.ISO20200Sets.G1">
 <summary>G1 set</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022.ISO20200Sets.G2">
 <summary>G2 set</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022.ISO20200Sets.G3">
 <summary>G3 set</summary>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022.ParseXmlEscapeSequence(System.String)">
 <summary>Parses Escape sequence as stored in Xml to array of bytes</summary>
 <param name="XmlEscapeSequence">String to be parsed</param>
 <remarks>Byte array representation of <paramref name="XmlEscapeSequence"/></remarks>
 <exception cref="T:System.FormatException"><paramref name="XmlEscapeSequence"/> contains invalid byte. Each byte is specified as either "ESC" string or two numbers from range 0÷127 separated by "/". Leading zeros are allowd. Bytes are separated, preceded and succeded by any number of whitespaces.</exception>
</member>
<member name="T:Tools.TextT.EncodingT.ISO2022Encoding">
 <summary>Represents single ISO-2022 encoding and provides infornmation about it.</summary>
 <seealso cref="T:Tools.TextT.EncodingT.ISO2022"/>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022Encoding.element">
 <summary><see cref="T:System.Xml.Linq.XElement"/> encoding info is stored in</summary>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022Encoding.#ctor(System.Xml.Linq.XElement)">
 <summary>Creates new instance of the <see cref="T:Tools.TextT.EncodingT.ISO2022Encoding"/> class from its definition in <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="encoding"><see cref="T:System.Xml.Linq.XElement"/> encoding is stored in</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="encoding"/> does not represent &lt;encoding> element.</exception>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.Name">
 <summary>Gets official encoding name under which it is registered by IPSJ/ITSCJ</summary>
 <returns>Name of encoding in ISO-2022 encoding register.</returns>
 <remarks>This property is never localized.</remarks>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.Number">
 <summary>Gets number under which the encoding is registered by IPSJ/ITSCJ</summary>
 <returns>Number of encoding in ISO-2022 encoding register.</returns>
 <remarks>In case the encoding is not assigned single number but two numbers separated by hyphen, this property returns such number as decimal number.</remarks>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022Encoding.NumberOriginal"/>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.NumberOriginal">
 <summary>Gets number under which the encoding is registered by IPSJ/ITSCJ</summary>
 <returns>Number as string in same form it was stored in xml element which initialized this instance. It means no assumptions about leading and trailing whitespaces can be done, as well as about leading zeros. Some numbers may contain hyphen.</returns>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022Encoding.Number"/>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.Type">
 <summary>Gets type of this encoding</summary>
 <returns>If called repeatedly for the same instance returns the same instance of the <see cref="T:Tools.TextT.EncodingT.ISO2022EncodingType"/>, but it is not the same instance (in terms of <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>) as one of those obtained by <see cref="M:Tools.TextT.EncodingT.ISO2022.GetEncodingTypes"/>.</returns>
 <remarks>Type of this encoding assording to IPSJ/ITSCJ registr</remarks>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.IanaName">
 <summary>Gets name of encoding as registered by IANA (if exists).</summary>
 <returns>Primary (preffered) name of encoding as registered by IANA. Or null if this encoding is not registered by IANA.</returns>
 <remarks>IANA organisation maintains list of encoding names registered for use on the Internet. Such encoding names are used eg. in XML encoding specification or in HTTP headers. Also <see cref="P:System.Text.EncodingInfo.Name"/> and <see cref="P:System.Text.Encoding.WebName"/> uses IANA registred names. For more information see <a href="http://www.iana.org">www.iana.org</a> or <a href="http://www.iana.org/assignments/character-sets">character sets registry</a>.</remarks>
 <seealso cref="P:System.Text.Encoding.WebName"/><seealso cref="P:System.Text.EncodingInfo.Name"/>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022Encoding.IanaAlias"/>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.IanaAlias">
 <summary>Return alternative name for encoding as registered by IANA in format "iso-ir-0" (if exists).</summary>
 <returns>Alias name of encoding which starts with "iso-ir-" and then contains <see cref="P:Tools.TextT.EncodingT.ISO2022Encoding.NumberOriginal"/> without leading zeros. If such alias does not exist returns null.</returns>
 <remarks>IANA registeres several aliases for each encoding. Most of ISO-2022 encoding registered with IANA have alias "iso-ir-0" where 0 is <see cref="P:Tools.TextT.EncodingT.ISO2022Encoding.NumberOriginal"/> (without leading zeros).</remarks>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022Encoding.IanaName"/>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022Encoding.GetEncoding">
 <summary>Gets <see cref="T:System.Text.Encoding"/> which implements ISO-2022 encoding represented by this instance</summary>
 <returns>Appropriate <see cref="T:System.Text.Encoding"/> or null if either <see cref="P:Tools.TextT.EncodingT.ISO2022Encoding.IanaName"/> is null or it is not supported by the .NET framework (the <see cref="M:Encoding.GetEncoding(System.String)">Encoding.GetEncoding</see> method.)</returns>
 <remarks>Actual ability of .NET framework to support particular encoding depends on which encodings are supported by (installed in) operating system.</remarks>
 <seealso cref="T:System.Text.Encoding"/><seeaslo cref="M:Encoding.GetEncoding(System.String)"/><seealso cref="P:Tools.TextT.EncodingT.ISO2022Encoding.IanaName"/>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.EscapeSequence(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)">
 <summary>Gets escape sequence used to switch to encoding represented by this instance in given working set</summary>
 <param name="WorkingSet">Working set to obtain escape sequence for</param>
 <returns>Escape sequance as array of bytes. Null if escape sequence for given working set does not exist.</returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="WorkingSet"/> is not member of <see cref="T:Tools.TextT.EncodingT.ISO2022.ISO20200Sets"/>.</exception>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.C0EscapeSequence">
 <summary>Gets escape sequence used to switch to encoding represented by this instance in C0 working set.</summary>
 <remarks>Escape sequence as array of bytes or null if the encoding has no escape sequence for C0 working set</remarks>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.C1EscapeSequence">
 <summary>Gets escape sequence used to switch to encoding represented by this instance in C1 working set.</summary>
 <remarks>Escape sequence as array of bytes or null if the encoding has no escape sequence for C1 working set</remarks>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.G0EscapeSequence">
 <summary>Gets escape sequence used to switch to encoding represented by this instance in G0 working set.</summary>
 <remarks>Escape sequence as array of bytes or null if the encoding has no escape sequence for G0 working set</remarks>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.G1EscapeSequence">
 <summary>Gets escape sequence used to switch to encoding represented by this instance in G1 working set.</summary>
 <remarks>Escape sequence as array of bytes or null if the encoding has no escape sequence for G1 working set</remarks>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.G2EscapeSequence">
 <summary>Gets escape sequence used to switch to encoding represented by this instance in G2 working set.</summary>
 <remarks>Escape sequence as array of bytes or null if the encoding has no escape sequence for G2 working set</remarks>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.G3EscapeSequence">
 <summary>Gets escape sequence used to switch to encoding represented by this instance in G3 working set.</summary>
 <remarks>Escape sequence as array of bytes or null if the encoding has no escape sequence for G3 working set</remarks>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022Encoding.UsesCommonPrefix">
 <summary>Gets value idicating if this <see cref="P:Tools.TextT.EncodingT.ISO2022Encoding.EscapeSequence(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/> for this encoding starts wit same prefix sa <see cref="P:Tools.TextT.EncodingT.ISO2022Encoding.EscapeSequence(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/> of all other encodings of same type that use common prefix too.</summary>
 <returns>True if <see cref="P:Tools.TextT.EncodingT.ISO2022Encoding.EscapeSequence(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/> of this encoding starts with <see cref="P:Tools.TextT.EncodingT.ISO2022Encoding.Type"/>.<see cref="P:Tools.TextT.EncodingT.ISO2022EncodingType.EscapeSequencePrefix(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)">EscapeSequencePrefix</see> for all working sets.</returns>
 <remarks>This is only hint property and is not mentioned in the ISO-2022 standard.</remarks>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022Encoding.Equals(Tools.TextT.EncodingT.ISO2022Encoding)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <returns>true if <paramref name="other"/> was initialized with the same xml elemet as current instance</returns>
 <param name="other">An object to compare with this object.</param>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022Encoding.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />. </summary>
 <returns>true if the specified <see cref="T:System.Object" /> is <see cref="T:Tools.TextT.EncodingT.ISO2022Encoding"/> and it was initialized by the same xml element.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
 <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
 <filterpriority>2</filterpriority>
 <remarks>Use type-safe overload <see cref="M:Tools.TextT.EncodingT.ISO2022EncodingType.Equals(Tools.TextT.EncodingT.ISO2022EncodingType)"/> instead</remarks>
</member>
<member name="T:Tools.TextT.EncodingT.ISO2022EncodingType">
 <summary>Represents and provides information about one type of encoding as recognized by ISO-2022</summary>
 <remarks>You can obtain all encoding type information by <see cref="M:Tools.TextT.EncodingT.ISO2022.GetEncodingTypes"/>. All existing encoding types are defined in the <see cref="T:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes"/> enumeration.
 <para>This class has no public constructor.</para></remarks>
 <seealso cref="M:Tools.TextT.EncodingT.ISO2022.GetEncodingTypes"/><seealso cref="T:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes"/>
 <seealso cref="T:Tools.TextT.EncodingT.ISO2022"/>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022EncodingType.#ctor(System.Xml.Linq.XElement)">
 <summary>Constructs a new instance from given <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="type"><see cref="T:System.Xml.Linq.XElement"/> &lt;type> which represents ISO-20200 encoding type to be constructed.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="type"/> dioes not represent element &lt;type></exception>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.element">
 <summary>The <see cref="T:System.Xml.Linq.XElement"/> which stores information for this instance</summary>
</member>
<member name="T:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes">
 <summary>Defines all encoding types recognized by ISO-2022</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes.C0">
 <summary>The C0 type (C0-Control character sets)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes.t_94_1">
 <summary>The 94/1 type (94-Character graphic character sets with one Intermediate byte)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes.S">
 <summary>The S type (Single control functions)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes.C1">
 <summary>The C1 type (C1 Control character sets)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes.M">
 <summary>The M type (Multiple byte graphic character sets)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes.wSR">
 <summary>The wSR type (Coding systems with Standard return)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes.woSR">
 <summary>The w/oSR type (Coding Systems without Standard return)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes.t_96">
 <summary>The 96 type (96-Character graphic character set)</summary>
</member>
<member name="F:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes.t_94_2">
 <summary>The 94-2 type (94-Character graphic character set with second Intermediate byte)</summary>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022EncodingType.Type">
 <summary>Returns one of <see cref="T:Tools.TextT.EncodingT.ISO2022EncodingType.EncodingTypes"/> values which identifies type of encoding recognized by ISO-2022.</summary>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022EncodingType.EscapeSequencePrefix(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)">
 <summary>Gets default escape sequence prefix used by encodings of type represented by current instance in given working set</summary>
 <returns>Array of bytes used as prefix of escape sequence. Null if encodings of current type usualy does not use given working set.</returns>
 <param name="WorkingSet">Working set to get escape sequence prefix for</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="WorkingSet"/> is not member of <see cref="T:Tools.TextT.EncodingT.ISO2022.ISO20200Sets"/>.</exception>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022EncodingType.C0EscapeSequencePrefix">
 <summary>Gets default prefix of escape sequence used by encodign of current type in working set C0.</summary>
 <returns>Escape sequence as array of bytes or null if current encoding type does not usually have escape sequence in the C0 working set.</returns>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022EncodingType.EscapeSequencePrefix(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022EncodingType.C1EscapeSequencePrefix">
 <summary>Gets default prefix of escape sequence used by encodign of current type in working set C1.</summary>
 <returns>Escape sequence as array of bytes or null if current encoding type does not usually have escape sequence in the C1 working set.</returns>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022EncodingType.EscapeSequencePrefix(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022EncodingType.G0EscapeSequencePrefix">
 <summary>Gets default prefix of escape sequence used by encodign of current type in working set G0.</summary>
 <returns>Escape sequence as array of bytes or null if current encoding type does not usually have escape sequence in the G0 working set.</returns>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022EncodingType.EscapeSequencePrefix(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022EncodingType.G1EscapeSequencePrefix">
 <summary>Gets default prefix of escape sequence used by encodign of current type in working set G1.</summary>
 <returns>Escape sequence as array of bytes or null if current encoding type does not usually have escape sequence in the G1 working set.</returns>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022EncodingType.EscapeSequencePrefix(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022EncodingType.G2EscapeSequencePrefix">
 <summary>Gets default prefix of escape sequence used by encodign of current type in working set G2.</summary>
 <returns>Escape sequence as array of bytes or null if current encoding type does not usually have escape sequence in the G2 working set.</returns>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022EncodingType.EscapeSequencePrefix(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/>
</member>
<member name="P:Tools.TextT.EncodingT.ISO2022EncodingType.G3EscapeSequencePrefix">
 <summary>Gets default prefix of escape sequence used by encodign of current type in working set G3.</summary>
 <returns>Escape sequence as array of bytes or null if current encoding type does not usually have escape sequence in the G3 working set.</returns>
 <seealso cref="P:Tools.TextT.EncodingT.ISO2022EncodingType.EscapeSequencePrefix(Tools.TextT.EncodingT.ISO2022.ISO20200Sets)"/>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022EncodingType.Equals(Tools.TextT.EncodingT.ISO2022EncodingType)">
 <summary>Indicates whether the current object is equal to another object of the same type.</summary>
 <returns>true if <paramref name="other"/> was initialized with the same xml elemet as current instance</returns>
 <param name="other">An object to compare with this object.</param>
</member>
<member name="M:Tools.TextT.EncodingT.ISO2022EncodingType.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />. </summary>
 <returns>true if the specified <see cref="T:System.Object" /> is <see cref="T:Tools.TextT.EncodingT.ISO2022EncodingType"/> and it was initialized by the same xml element.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
 <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
 <filterpriority>2</filterpriority>
 <remarks>Use type-safe overload <see cref="M:Tools.TextT.EncodingT.ISO2022EncodingType.Equals(Tools.TextT.EncodingT.ISO2022EncodingType)"/> instead</remarks>
</member>
<member name="T:Tools.TextT.TextExtensions">
 <summary>Miscaleneous text tools</summary>
</member>
<member name="M:Tools.TextT.TextExtensions.MTrim(System.String,System.Boolean)">
 <summary>Normalizes all whitespaces in given <see cref="T:System.String"/></summary>
 <param name="Str"><see cref="T:System.String"/> to normalize</param>
 <param name="KeepType">True to keep type of whitespace (Endline, Tab, Space; first in group is used) or False to replace all whitespaces with spaces</param>
 <returns><see cref="T:System.String"/> with removed white characters at the beginning and at the end and reduced all groups of whitespaces to one white space</returns>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.TextT.TextExtensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Object[])">
 <summary>Appends a formatted string, which contains zero or more format specifications, and the default line terminator to given <see cref="T:System.Text.StringBuilder"/>. Each format specification is replaced by the string representation of a corresponding object argument.</summary>
 <param name="Target"><see cref="T:System.Text.StringBuilder"/> to append formatted string to</param>
 <param name="Format">A composite format string.</param>
 <param name="args">An array of objects to format.</param>
 <returns><paramref name="Target"/></returns>
 <seealso cref="T:System.String"/><seealso cref="M:System.Text.StringBuilder.AppendLine"/><seealso cref="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)"/>
</member>
<member name="M:Tools.TextT.TextExtensions.AppendLineFormat(System.IFormatProvider,System.Text.StringBuilder,System.String,System.Object[])">
 <summary>Appends a formatted string, which contains zero or more format specifications, and the default line terminator to given <see cref="T:System.Text.StringBuilder"/>. Each format specification is replaced by the string representation of a corresponding object argument.</summary>
 <param name="Provider">An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.</param>
 <param name="Target"><see cref="T:System.Text.StringBuilder"/> to append formatted string to</param>
 <param name="Format">A composite format string.</param>
 <param name="args">An array of objects to format.</param>
 <returns><paramref name="Target"/></returns>
 <seealso cref="T:System.String"/><seealso cref="M:System.Text.StringBuilder.AppendLine"/><seealso cref="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)"/>
</member>
<member name="T:Tools.TextT.Casing">
 <summary>Defines character casing</summary>
 <version version="1.5.2">Enumeration introduced</version>
</member>
<member name="F:Tools.TextT.Casing.LowerCase">
 <summary>Lower case</summary>
</member>
<member name="F:Tools.TextT.Casing.UpperCase">
 <summary>Upper case</summary>
</member>
<member name="T:Tools.ThreadingT.IInvoke">
 <summary>Represents an object which is tied to a thread and can invoke methods in context of that thread</summary>
 <remarks>Main purpose of this interface is to provide type-safe call of <see cref="M:Tools.ThreadingT.IInvoke.Invoke(System.Delegate,System.Object[])"/> methods using <see cref="T:Tools.ThreadingT.IInvokeExtensions"/>.</remarks>
 <seelaso cref="T:Tools.ThreadingT.IInvokeExtensions"/>
 <version version="1.5.3">This interface is new in version 1.5.3</version>
</member>
<member name="M:Tools.ThreadingT.IInvoke.Invoke(System.Delegate,System.Object[])">
 <summary>Synchronously invokes a delegate in UI thread</summary>
 <param name="delegate">A delegate to be invoked</param>
 <param name="params">Delegate parameters</param>
 <returns>Result of delegate call</returns>
 <remarks><see cref="T:Tools.ThreadingT.IInvokeExtensions"/> module provides type safe overloaded generic extension methods to this method</remarks>
</member>
<member name="T:Tools.ThreadingT.IInvokeExtensions">
 <summary>Provides extension methods for <see cref="T:Tools.ThreadingT.IInvoke"/> interface</summary>
 <seealso cref="T:Tools.ThreadingT.IInvoke"/><seealso cref="T:Tools.WindowsT.ThreadingT.DispatcherExtensions"/>
 <version version="1.5.3">This module is new in version 1.5.3</version>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``1(Tools.ThreadingT.IInvoke,System.Func{``0})">
 <summary>Calls parameter-less function in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``2(Tools.ThreadingT.IInvoke,System.Func{``0,``1},``0)">
 <summary>Calls a function with 1 parameter in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T">Type of 1st parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``3(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2},``0,``1)">
 <summary>Calls a function with 2 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``4(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3},``0,``1,``2)">
 <summary>Calls a function with 3 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``5(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
 <summary>Calls a function with 4 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``6(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4)">
 <summary>Calls a function with 5 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``7(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5)">
 <summary>Calls a function with 6 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``8(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6)">
 <summary>Calls a function with 7 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``9(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7)">
 <summary>Calls a function with 8 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``10(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
 <summary>Calls a function with 9 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``11(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
 <summary>Calls a function with 10 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``12(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
 <summary>Calls a function with 11 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``13(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
 <summary>Calls a function with 12 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``14(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
 <summary>Calls a function with 13 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``15(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
 <summary>Calls a function with 14 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``16(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
 <summary>Calls a function with 15 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <param name="param15">15th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <typeparam name="T15">Type of 15th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``17(Tools.ThreadingT.IInvoke,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
 <summary>Calls a function with 16 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <param name="param15">15th parameter</param>
 <param name="param16">16th parameter</param>
 <typeparam name="TResult">Return type of <paramref name="delegate"/></typeparam>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <typeparam name="T15">Type of 15th parameter</typeparam>
 <typeparam name="T16">Type of 16th parameter</typeparam>
 <returns>Result of call to <paramref name="delegate"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke(Tools.ThreadingT.IInvoke,System.Action)">
 <summary>Calls parameter-less method in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``1(Tools.ThreadingT.IInvoke,System.Action{``0},``0)">
 <summary>Calls a method with 1 parameter in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <typeparam name="T">Type of 1st parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``2(Tools.ThreadingT.IInvoke,System.Action{``0,``1},``0,``1)">
 <summary>Calls a method with 2 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``3(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2},``0,``1,``2)">
 <summary>Calls a method with 3 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``4(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
 <summary>Calls a method with 4 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``5(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
 <summary>Calls a method with 5 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``6(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
 <summary>Calls a method with 6 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``7(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
 <summary>Calls a method with 7 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``8(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6,``7},``0,``1,``2,``3,``4,``5,``6,``7)">
 <summary>Calls a method with 8 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``9(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
 <summary>Calls a method with 9 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``10(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
 <summary>Calls a method with 10 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``11(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
 <summary>Calls a method with 11 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``12(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
 <summary>Calls a method with 12 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``13(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
 <summary>Calls a method with 13 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``14(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
 <summary>Calls a method with 14 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``15(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
 <summary>Calls a method with 15 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <param name="param15">15th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <typeparam name="T15">Type of 15th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="M:Tools.ThreadingT.IInvokeExtensions.Invoke``16(Tools.ThreadingT.IInvoke,System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
 <summary>Calls a method with 16 parameters in UI thread</summary>
 <param name="object">An object to invoke delegate in UI thread of</param>
 <param name="delegate">A delegate to be invoked</param>
 <param name="param1">1st parameter</param>
 <param name="param2">2nd parameter</param>
 <param name="param3">3rd parameter</param>
 <param name="param4">4th parameter</param>
 <param name="param5">5th parameter</param>
 <param name="param6">6th parameter</param>
 <param name="param7">7th parameter</param>
 <param name="param8">8th parameter</param>
 <param name="param9">9th parameter</param>
 <param name="param10">10th parameter</param>
 <param name="param11">11th parameter</param>
 <param name="param12">12th parameter</param>
 <param name="param13">13th parameter</param>
 <param name="param14">14th parameter</param>
 <param name="param15">15th parameter</param>
 <param name="param16">16th parameter</param>
 <typeparam name="T1">Type of 1st parameter</typeparam>
 <typeparam name="T2">Type of 2nd parameter</typeparam>
 <typeparam name="T3">Type of 3rd parameter</typeparam>
 <typeparam name="T4">Type of 4th parameter</typeparam>
 <typeparam name="T5">Type of 5th parameter</typeparam>
 <typeparam name="T6">Type of 6th parameter</typeparam>
 <typeparam name="T7">Type of 7th parameter</typeparam>
 <typeparam name="T8">Type of 8th parameter</typeparam>
 <typeparam name="T9">Type of 9th parameter</typeparam>
 <typeparam name="T10">Type of 10th parameter</typeparam>
 <typeparam name="T11">Type of 11th parameter</typeparam>
 <typeparam name="T12">Type of 12th parameter</typeparam>
 <typeparam name="T13">Type of 13th parameter</typeparam>
 <typeparam name="T14">Type of 14th parameter</typeparam>
 <typeparam name="T15">Type of 15th parameter</typeparam>
 <typeparam name="T16">Type of 16th parameter</typeparam>
 <s>Result of call to <paramref name="delegate"/></s>
 <exception cref="T:System.ArgumentNullException"><paramref name="object"/> or <paramref name="delegate"/> is null</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">Exception was thrown while invoking the <paramref name="delegate"/>. See <see cref="P:System.Exception.InnerException"/> for details.</exception>
</member>
<member name="T:Tools.DataStructuresT.GenericT.IPair`2">
 <summary>Type tha contains value of two distinct types</summary>
 <typeparam name="T1">Type of first value</typeparam>
 <typeparam name="T2">Type of second value</typeparam>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="P:Tools.DataStructuresT.GenericT.IPair`2.Value1">
 <summary>Value of type <see cref="!:T1"/></summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.IPair`2.Value2">
 <summary>Value of type <typeparamref name="T2"/></summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.IPair`2.Swap">
 <summary>Swaps values <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value2"/></summary>
</member>
<member name="T:Tools.DataStructuresT.GenericT.Pair`2">
 <summary>Implements <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> as reference type</summary>
 <typeparam name="T1">Type of Value1</typeparam>
 <typeparam name="T2">Type of Value2</typeparam>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.4">THis class now overrides methods <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/> and <see cref="M:System.Object.ToString"/>.</version>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Pair`2._Value1">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value1"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Pair`2._Value2">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value2"/> property</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.#ctor(`0,`1)">
 <summary>CTor - initialize with two values</summary>
 <param name="V1">Initial value for <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value1"/></param>
 <param name="V2">Initial value for <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value2"/></param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.#ctor(Tools.DataStructuresT.GenericT.IPair{`0,`1})">
 <summary>CTor - initialize with another instance of <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/></summary>
 <param name="a">Instance to initialize new istance</param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.Clone1">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.Swap">
 <summary>Swaps values <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value2"/></summary>        
</member>
<member name="P:Tools.DataStructuresT.GenericT.Pair`2.Value1">
 <summary>Value of type <see cref="!:T1"/></summary>        
</member>
<member name="P:Tools.DataStructuresT.GenericT.Pair`2.Value2">
 <summary>Value of type <typeparamref name="T2"/></summary>        
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.Clone">
 <summary>Returns new instance of <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> initialized with current instance</summary>
 <returns>New instance of <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> initialized with current instance if either <see cref="!:T1"/> or <typeparamref name="T2"/> implements <see cref="T:System.ICloneable"/> then they are also cloned via <see cref="M:System.ICloneable.Clone"/></returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.op_Implicit(Tools.DataStructuresT.GenericT.Pair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
 <summary>Converts <see cref="T:Tools.DataStructuresT.GenericT.Pair`2"/> into <see cref="T:System.Collections.Generic.KeyValuePair`2"/></summary>
 <param name="a">Value to be converted</param>
 <returns>Converted <paramref name="a"/></returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~Tools.DataStructuresT.GenericT.Pair{`0,`1}">
 <summary>Converts <see cref="T:System.Collections.Generic.KeyValuePair`2"/> into <see cref="T:Tools.DataStructuresT.GenericT.Pair`2"/></summary>
 <param name="a">Value to be converted</param>
 <returns>Converted <paramref name="a"/></returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.GetHashCode">
 <summary>Serves as a hash function for a particular type. </summary>
 <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
 <version>This method override at this level is new in version 1.5.4</version>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <version>This method override at this level is new in version 1.5.4</version>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`2.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>
 A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
 This implementation returns string values of <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value2"/> in format <c>{{Value1}, {Value2}}</c>.
 </returns>
 <version>This method override at this level is new in version 1.5.4</version>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.DataStructuresT.GenericT.Pair`1">
 <summary>Limits <see cref="T:Tools.DataStructuresT.GenericT.Pair`2"/> to contain only values of the same type</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`1.#ctor(`0,`0)">
 <summary>CTor - initialize with two values</summary>
 <param name="V1">Initial value for <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value1"/></param>
 <param name="V2">Initial value for <see cref="P:Tools.DataStructuresT.GenericT.Pair`2.Value2"/></param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`1.#ctor(Tools.DataStructuresT.GenericT.IPair{`0,`0})">
 <summary>CTor - initialize with another instance of <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/></summary>
 <param name="a">Instance to initialize new istance</param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Pair`1.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="T:Tools.DataStructuresT.GenericT.IT1orT2`2">
 <summary>Represents type that can contain either value of type T1 or value of type T2. It cannot contain both values at the same time.</summary>
 <typeparam name="T1">One of alternativelly stored types</typeparam>
 <typeparam name="T2">One of alternativelly stored types</typeparam>
 <remarks>
 Although this interface inherits <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> be very careful when utilizing this inheritance because behaviour of <see cref="T:Tools.DataStructuresT.GenericT.IT1orT2`2"/> is different whnen storing values (it can contain only one value at the sam time). Consider utilizing this ihneritance only in read-only way.
 </remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.Value1">
 <summary>Gets or sets value of type <see cref="!:T1"/></summary>
 <value>Non-null value to set value of type <see cref="!:T1"/> and delete value of type <typeparamref name="T2"/> or nothing to delete value of type <see cref="!:T1"/></value>
 <returns>If this instance contains value of type <see cref="!:T1"/> then returns it, otherwise return null</returns>
 <remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value1"/> retruns null it means that either value of type <see cref="!:T1"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> property to true in order to store null value of type <see cref="!:T1"/>.
 </remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.Value2">
 <summary>Gets or sets value of type <typeparamref name="T2"/></summary>
 <value>Non-null value to set value of type <typeparamref name="T2"/> and delete value of type <typeparamref name="T2"/> or nothing to delete value of type <typeparamref name="T2"/></value>
 <returns>If this instance contains value of type <typeparamref name="T2"/> then returns it, otherwise return null</returns>
 <remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value2"/> retruns null it means that either value of type <typeparamref name="T2"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains2"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> property to true in order to store null value of type <typeparamref name="T2"/>.
 </remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.objValue">
 <summary>Get or sets stored value in type-unsafe way</summary>
 <value>New value to be stored in this instance</value>
 <returns>Value stored in this instance</returns>
 <exception cref="T:System.NullReferenceException">When trying to obtain value from instance that contains value of type neither <see cref="!:T1"/> nor <typeparamref name="T2"/></exception>
 <exception cref="T:System.ArgumentException">When trying to set value of type other than <see cref="!:T1"/> or <typeparamref name="T2"/></exception>
</member>
<member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1">
 <summary>Determines if currrent instance contains value of type <see  cref="!:T1"/></summary>
 <value>
 True to delete value of type <see cref="!:T1"/> 
 False to mark this instance as containing value of type <see cref="!:T1"/> and not containing value of type <typeparamref name="T2"/>.
 </value>
 <returns>True if this instance contains value of type <see cref="!:T1"/> (even if containde value is null)</returns>
 <remarks>
 When <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> is True and is set to True nothing happens.
 When <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains1"/> is False and is set tor True nothing is stored in <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value2"/> is removed.
 </remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains2">
 <summary>Determines if currrent instance contains value of type <see  cref="!:T2"/></summary>
 <value>
 True to delete value of type <typeparamref name="T2"/> 
 False to mark this instance as containing value of type <typeparamref name="T2"/> and not containing value of type <see cref="!:T1"/>.
 </value>
 <returns>True if this instance contains value of type <typeparamref name="T2"/> (even if containde value is null)</returns>
 <remarks>
 When <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains2"/> is True and is set to True nothing happens.
 When <see cref="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains2"/> is False and is set tor True nothing is stored in <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value2"/> and <see cref="P:Tools.DataStructuresT.GenericT.IPair`2.Value1"/> is removed.
 </remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.contains(System.Type)">
 <summary>Identifies whether this instance contains value of specified type</summary>
 <param name="T">Type to be contained</param>
 <returns>True if this instance contais value of type <paramref name="T"/> otherwise False</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.IT1orT2`2.IsEmpty">
 <summary>Determines whether instance contains value of neither type <see cref="!:T1"/> nor type <typeparamref name="T2"/></summary>
 <returns>True when both values are not present. False if one of values is present (even if it contains null)</returns>
</member>
<member name="T:Tools.DataStructuresT.GenericT.T1orT2`2">
 <summary>Implements type that can contain either value of type T1 ore value of type T2. It cannot contain both values at the same time.</summary>
 <typeparam name="T1">One of alternativelly stored types</typeparam>
 <typeparam name="T2">One of alternativelly stored types</typeparam>
 <remarks>
 Although rhis class implements <see cref="T:Tools.DataStructuresT.GenericT.IPair`2"/> through <see cref="T:Tools.DataStructuresT.GenericT.IT1orT2`2"/> be careful when utilizing this implementation because behaviour of <see cref="T:Tools.DataStructuresT.GenericT.IT1orT2`2"/> is different when storing values (it can contain only one value at the sam time). Consider utilizing this inheritance only in read-only way.
 </remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.DataStructuresT.GenericT.T1orT2`2._value1">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.T1orT2`2._value2">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> property</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.#ctor(`0)">
 <summary>CTor - initializes new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> with value of type <see cref="!:T1"/></summary>
 <param name="value">Value to be contained in new instance</param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.#ctor">
 <summary>CTor - initializes en empty instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/></summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.#ctor(`1)">
 <summary>CTor - initializes new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> with value of type <typeparamref name="T2"/></summary>
 <param name="value">Value to be contained in new instance</param>
</member>
<member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1">
 <summary>Gets or sets value of type <see cref="!:T1"/></summary>
 <value>Non-null value to set value of type <see cref="!:T1"/> and delete value of type <typeparamref name="T2"/> or nothing to delete value of type <see cref="!:T1"/></value>
 <returns>If this instance contains value of type <see cref="!:T1"/> then returns it, otherwise return null</returns>
 <remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> retruns null it means that either value of type <see cref="!:T1"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> property to true in order to store null value of type <see cref="!:T1"/>.
 </remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2">
 <summary>Gets or sets value of type <typeparamref name="T2"/></summary>
 <value>Non-null value to set value of type <typeparamref name="T2"/> and delete value of type <typeparamref name="T2"/> or nothing to delete value of type <typeparamref name="T2"/></value>
 <returns>If this instance contains value of type <typeparamref name="T2"/> then returns it, otherwise return null</returns>
 <remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> retruns null it means that either value of type <typeparamref name="T2"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> property to true in order to store null value of type <typeparamref name="T2"/>.
 </remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1">
 <summary>Determines if currrent instance contains value of type <see  cref="!:T1"/></summary>
 <value>
 True to delete value of type <see cref="!:T1"/> 
 False to mark this instance as containing value of type <see cref="!:T1"/> and not containing value of type <typeparamref name="T2"/>.
 </value>
 <returns>True if this instance contains value of type <see cref="!:T1"/> (even if containde value is null)</returns>
 <remarks>
 When <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> is True and is set to True nothing happens.
 When <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> is False and is set tor True nothing is stored in <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> is removed.
 </remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2">
 <summary>Determines if currrent instance contains value of type <see  cref="!:T2"/></summary>
 <value>
 True to delete value of type <typeparamref name="T2"/> 
 False to mark this instance as containing value of type <typeparamref name="T2"/> and not containing value of type <see cref="!:T1"/>.
 </value>
 <returns>True if this instance contains value of type <typeparamref name="T2"/> (even if containde value is null)</returns>
 <remarks>
 When <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2"/> is True and is set to True nothing happens.
 When <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2"/> is False and is set tor True nothing is stored in <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> and <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> is removed.
 </remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.IsEmpty">
 <summary>Determines whether instance contains value of neither type <see cref="!:T1"/> nor type <typeparamref name="T2"/></summary>
 <returns>True when both values are not present. False if one of values is present (even if it contains null)</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.value">
 <summary>Gets copy if this instance or fills this instance with content of another instance</summary>
 <value>Instance which's content will be used to fill this instance</value>
 <returns>New instance ininialized with content of this instance</returns>
 <exception cref="T:System.NullReferenceException"><see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> is False and <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2"/> is False</exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.op_Implicit(`0)~Tools.DataStructuresT.GenericT.T1orT2{`0,`1}">
 <summary>Boxes value of type <see cref="!:T1"/> into new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/></summary>
 <param name="a">Value to be boxed</param>
 <returns>New instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> initialized with <paramref name="a"/></returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.op_Implicit(`1)~Tools.DataStructuresT.GenericT.T1orT2{`0,`1}">
 <summary>Boxes value of type <typeparamref name="T2"/> into new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/></summary>
 <param name="a">Value to be boxed</param>
 <returns>New instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> initialized with <paramref name="a"/></returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.op_Explicit(Tools.DataStructuresT.GenericT.T1orT2{`0,`1})~`0">
 <summary>Unboxes value of type <see cref="!:T1"/> from <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> when <paramref name="a"/> contains <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/>.</summary>
 <param name="a">Instance that may contain value to be unboxed</param>
 <returns>Value of <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> property of <paramref name="a"/></returns>
 <exception cref="T:System.InvalidCastException"><paramref name="a"/>doesn't contain value of type <see cref="!:T1"/></exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.op_Explicit(Tools.DataStructuresT.GenericT.T1orT2{`0,`1})~`1">
 <summary>Unboxes value of type <typeparamref name="T2"/> from <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> when <paramref name="a"/> contains <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/>.</summary>
 <param name="a">Instance that may contain value to be unboxed</param>
 <returns>Value of <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> property of <paramref name="a"/></returns>
 <exception cref="T:System.InvalidCastException"><paramref name="a"/>doesn't contain value of type <typeparamref name="T2"/></exception>
</member>
<member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains(System.Type)">
 <summary>Identifies whether this instance contains value of specified type</summary>
 <param name="T">Type to be contained</param>
 <returns>True if this instance contais value of type <paramref name="T"/> otherwise False</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.Swap">
 <summary>Return new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> initialized by value of this instance</summary>
 <returns>Instance of type with swapped types <see cref="!:T1"/> and <typeparamref name="T2"/></returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.Swap1">
 <summary>Swaps values <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> and <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/></summary>        
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.Clone">
 <summary>Returns new instance of <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> inicialized by value of current instance</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.T1orT2`2.objValue">
 <summary>Get or sets stored value in type-unsafe way</summary>
 <value>New value to be stored in this instance</value>
 <returns>Value stored in this instance</returns>
 <exception cref="T:System.NullReferenceException">When trying to obtain value from instance that contains value of type neither <see cref="!:T1"/> nor <typeparamref name="T2"/></exception>
 <exception cref="T:System.ArgumentException">When trying to set value of type other than <see cref="!:T1"/> or <typeparamref name="T2"/></exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.ToString">
 <summary>String representation of instance</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.T1orT2`2.Clone1">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="T:Tools.DataStructuresT.GenericT.Tree`1">
 <summary>Represents tree or sub-tree</summary>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.#ctor">
 <summary>CTor - an empty tree with no value</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.#ctor(Tools.DataStructuresT.GenericT.Tree{`0})">
 <summary>Copy CTor - clones instance of tree</summary>
 <param name="a">Instance to clone</param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.#ctor(`0,System.Collections.Generic.IEnumerable{`0})">
 <summary>CTor - from value and optionally values of nodes</summary>
 <param name="value">value for root</param>
 <param name="Nodes">values for nodes</param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.#ctor(`0,System.Collections.Generic.IEnumerable{Tools.DataStructuresT.GenericT.Tree{`0}})">
 <summary>CTor - from value and nodes</summary>
 <param name="value">value for root</param>
 <param name="Nodes">node to fill <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> with</param>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree`1._Value">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Value"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.Value">
 <summary>Value of this node</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree`1.__Nodes">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes">
 <summary>Sub-trees of this tree</summary>
 <exception cref="T:System.NullReferenceException">Is thrown by <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> or <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>'s setter of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> when null is passed there.</exception>
 <exception cref="T:System.OperationCanceledException">Is thrown by <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/> or <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/>'s setter of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> when: Attempting to pass node which's <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> is already set to non-null value -or- attempting to pass node which is <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Root"/> of current tree.</exception>
 <remarks>See also <seealso cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)"/>, <seealso cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)"/></remarks>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree`1._Parent">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.Parent">
 <summary>Node this node is placed in</summary>
 <returns>parent node of this node or null when this node is root</returns>
 <value>New parent node of this node. Setting root to another value causes moving current node and whole its sub-tree into node specified in <paramref name="value"/>, so it is no longer present in old parent</value>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.ToString">
 <summary>String representation of this instance</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.Clone1">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <remarks>Use type-safe <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.Clone"/> instead</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.Nodes_ItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}},Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
 <exception cref="T:System.NullReferenceException">Attepmt to assign null reference</exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.Nodes_Adding(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}},Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
 <exception cref="T:System.NullReferenceException">Attepmt to add null reference</exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnAdding(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
 <summary>Called before adding item to <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/></summary>
 <param name="e">Event parameters. You can use it to cancel the operation.</param>
 <exception cref="T:System.NullReferenceException">Attepmt to add null reference</exception>
 <remarks>When node that is being added has already parent set or this node is root of current tree then <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to true, which causes <see cref="T:System.OperationCanceledException"/> to be thrown by <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Add(`0)"/> or <see cref="M:Tools.CollectionsT.GenericT.ListWithEvents`1.Insert(System.Int32,System.Object)"/></remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnAdded(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemIndexEventArgs)">
 <summary>Called when item was added into <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/></summary>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnItemChanging(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
 <summary>Called before item of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> is changed</summary>
 <param name="e">Event parameters. You can use it to cancel the operation.</param>
 <exception cref="T:System.NullReferenceException">Attepmt to assign null reference</exception>
 <remarks>When node that is being passed has already parent set or this node is root of current tree then <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to true, which causes <see cref="T:System.OperationCanceledException"/> to be thrown by <see cref="P:Tools.CollectionsT.GenericT.ListWithEvents`1.Item(System.Int32)"/>'s setter</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnItemChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.OldNewItemEventArgs)">
 <summary>Called after item of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> is changed</summary>
 <param name="e">Event parameters</param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)">
 <summary>Called before single item is removed from <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/></summary>
 <param name="e">Event parameters. You can use it to cancel the operation.</param>
 <remarks>This method is not called when <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> is to be cleared using <see cref="M:System.Collections.Generic.ICollection`1.Clear"/>. Use <seealso cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnClearing(System.ComponentModel.CancelEventArgs)"/> instead.</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemIndexEventArgs)">
 <summary>Called after single item is removed from <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/></summary>
 <param name="e">Event parameters</param>
 <remarks>This method is not called after <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> has been cleared using <see cref="M:System.Collections.Generic.ICollection`1.Clear"/>. Use <seealso cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemsEventArgs)"/> instead.</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnClearing(System.ComponentModel.CancelEventArgs)">
 <summary>Called before whole <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> is cleared at once</summary>
 <param name="e">Event parameters. You can use it to cancel the operation.</param>
 <remarks>In case of clearing <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> at once the <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnRemoving(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.CancelableItemIndexEventArgs)"/> method is not called.</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.OnCleared(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemsEventArgs)">
 <summary>Called after whole <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> was cleared at once</summary>
 <param name="e">Event parameters</param>
 <remarks>In case of clearing <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/> at once the <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.OnRemoved(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.Tree{`0}}.ItemIndexEventArgs)"/> method is not called.</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.Adopt(Tools.DataStructuresT.GenericT.Tree{`0})">
 <summary>Adpots specified sub-tree and removes it from its old <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></summary>
 <param name="Node"><see cref="T:Tools.DataStructuresT.GenericT.Tree`1"/> to be adopted</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Node"/> is null</exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.AdoptClone(Tools.DataStructuresT.GenericT.Tree{`0})">
 <summary>Adopts clone of given sub-tree</summary>
 <param name="Node"><see cref="T:Tools.DataStructuresT.GenericT.Tree`1"/> to be adopted</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Node"/> is null</exception>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.IsRoot">
 <summary>Determines if current node is root</summary>
 <returns>True when <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> is null</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.IsLeaf">
 <summary>determines if current node is leaf</summary>
 <returns>True when current node has no child</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.Root">
 <summary>Finds root of tree</summary>
 <returns><see cref="T:Tools.DataStructuresT.GenericT.Tree`1"/> that doesnt have <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.Depth">
 <summary>Computes depth of this node</summary>
 <returns>Number of nodes above current</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrder">
 <summary>Gets enumerator that itterates through tree in pre-order manner</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.PostOrder">
 <summary>Gets enumerator that itterates through tree in post-order manner</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.InOrder">
 <summary>Gets enumerator that itterates through tree in in-order manner</summary>
 <remarks>You should use in-order enumerator only on binary trees. Otherwise in-order semantic is ugly: First the bigger half of children from left to right is returned, then parent and then remaining children.</remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrderBackward">
 <summary>Gets enumerator that itterates through tree in pre-order manner from last to first item (from right to left)</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.PostOrderBackward">
 <summary>Gets enumerator that itterates through tree in post-order manner from last to first item (from right to left)</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.InOrderBackward">
 <summary>Gets enumerator that itterates through tree in in-order manner from last to first item (from right to left)</summary>
 <remarks>You should use in-order enumerator only on binary trees. Otherwise in-order semantic is ugly: First the bigger half of children from right to left is returned, then parent and then remaining children.</remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.LeftMost">
 <summary>Left most node of current sub-tree</summary>
 <returns>The most left (first) leaf of current subtree (the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.LeftMost"/> property of first item in <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/>) if has any nodes, itself otherwise</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.RightMost">
 <summary>Right most node of current sub-tree</summary>
 <returns>The most right (last) leaf of current subtree (the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.RightMost"/> property of first item in <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Nodes"/>) if has any nodes, itself otherwise</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrderNextRight(Tools.DataStructuresT.GenericT.Tree{`0})">
 <summary>Next node in forward pre-order order</summary>
 <param name="Root">Optional root of subtree being parsed</param>
 <returns>If node has sub-nodes returns first sub-node. Otherwise serches for right neighbour of the nearest parent as possible. Returns null if nothing found.</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrderNextLeft(Tools.DataStructuresT.GenericT.Tree{`0})">
 <summary>Next node in backward pre-order order</summary>
 <param name="Root">Optional root of subtree being parsed</param>
 <returns>If node has sub-nodes returns last sub-node. Otherwise serches for left neighbour of the nearest parent as possible. Returns null if nothing found.</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.Index">
 <summary>Index of current node in collection of nodes of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></summary>
 <returns>Index of the current node in collection of nodes of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> if has parent, -1 otherwise</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.RightNeighbour">
 <summary>Next node in collection of nodes of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></summary>
 <returns>Next node if any or null</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.LeftNeighbour">
 <summary>Previous node in collection of nodes of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/></summary>
 <returns>Previous node if any or null</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.InOrderNextChildIndex">
 <summary>Index of next child in forward in-order order (previous in backward in-order)</summary>
 <returns>Index of node or -1</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.InOrderPrevChildIndex">
 <summary>Index of previous child in forward in-order order (next in backward in-order)</summary>
 <returns>Indexd of node or -1</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.Right">
 <summary>Gets nearest node on the right (after) current node at same level of tree (not necessaryly under same parent)</summary>
 <remarks>Node on the same level as current node on the right or null if no node found</remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.Left">
 <summary>Gets nearest node on the left (before) current node at same level of tree (not necessaryly under same parent)</summary>
 <remarks>Node on the same level as current node on the left or null if no node found</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.Contains(Tools.DataStructuresT.GenericT.Tree{`0})">
 <summary>Gets value indicating if current node contains given node</summary>
 <param name="Node">Node to be found</param>
 <returns>True if current node is <paramref name="Node"/> or <paramref name="Node"/> is sub-node of current node</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.Contains(`0)">
 <summary>Gets value indicating if current node contains given value</summary>
 <param name="Value">Value to be found</param>
 <returns>True if <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Value"/> of current node or one of it'S subnodes returns true for the <see cref="M:System.Object.Equals(System.Object)"/> function.</returns>
 <remarks>If you want to get node that contains such value, use the <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.Find(`0)"/> function</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.Find(`0)">
 <summary>Searches for given value in current tree</summary>
 <param name="Value">Value to be found</param>
 <returns>First node which's <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Value"/>'s <see cref="M:System.Object.Equals(System.Object)"/> returns true for <paramref name="Value"/></returns>
 <remarks>This function uses <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.PreOrder"/> enumerator.</remarks>
</member>
<member name="T:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator">
 <summary>Enumerates through <see cref="T:Tools.DataStructuresT.GenericT.Tree`1"/> (or its sub-tree) in given order</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator._Direction">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Direction"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator._Order">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Order"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator._Root">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Root"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Current">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentNode"/> property or null when the enumerator is before start or after end of the collection</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Before">
 <summary>If <see cref="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Current"/> is null distinguishes between position before start (True) and after end (False) of the collection</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Direction">
 <summary>Direction of enumerating</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Order">
 <summary>Order of enumerating</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Root">
 <summary>The node that is root for this enumerator</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.#ctor(Tools.DataStructuresT.GenericT.Tree{`0},Tools.DataStructuresT.GenericT.Tree.EnumOrders,Tools.DataStructuresT.GenericT.Tree.EnumDirections)">
 <summary>CTor</summary>
 <param name="Root">The node to start and end enumeration with</param>
 <param name="Order">Order of enumerating</param>
 <param name="Direction">Direction of enumerating</param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetValueEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>If this enumerator was not initialized or disposed, returns itself. If it was returns clone of itself.</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetNodeEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>If this enumerator was not initialized or disposed, returns itself. If it was returns clone of itself.</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetEnumerator1">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns><see cref="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetValueEnumerator"/></returns>
 <remarks>Use type-safe <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetValueEnumerator"/> or <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.GetNodeEnumerator"/> instead</remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentValue">
 <summary>Gets value of the node in the tree at the current position of the enumerator.</summary>
 <returns>Value of the node in the collection at the current position of the enumerator</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentNode">
 <summary>Gets or sets current position of the enumerator</summary>
 <returns>The node in the collection at the current position of the enumerator</returns>
 <value>New position of the enumerator. New posotion must be in sub-tree of <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.Parent"/> or can be null which has same efect as <see cref="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Reset"/></value>
 <exception cref="T:System.ArgumentException">Attempt to set postion otside of current tree</exception>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentNode1">
 <summary>Gets the node in the tree at the current position of the enumerator.</summary>
 <returns>The node in the collection at the current position of the enumerator</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentValue1">
 <summary>Returns <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentValue"/></summary>
 <remarks>Use type-safe <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentNode"/> and <see cref="P:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.CurrentValue"/> instead</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.MoveNext">
 <summary>Advances the enumerator to the next element of the collection.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Dispose(System.Boolean)">
 <summary>IDisposable</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree`1.TreeEnumerator.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <remarks>This code added by Visual Basic to correctly implement the disposable pattern.</remarks>
</member>
<member name="T:Tools.DataStructuresT.GenericT.Tree">
 <summary>Contains shared utilities for all trees</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Tree.#ctor">
 <summary>This class cannot be instantiated</summary>
</member>
<member name="T:Tools.DataStructuresT.GenericT.Tree.EnumDirections">
 <summary>Directions of tree enumerationg</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree.EnumDirections.FirstToLast">
 <summary>Frøom frist to last (left to right)</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree.EnumDirections.LastToFirst">
 <summary>From last to first (right to left)</summary>
</member>
<member name="T:Tools.DataStructuresT.GenericT.Tree.EnumOrders">
 <summary>Tree enumeration orders</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree.EnumOrders.PreOrder">
 <summary>Pre-order: Me, then children</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree.EnumOrders.InOrder">
 <summary>In-order: Me between children. Good only for binary trees. Current node is enumerated after first half of children. In it has only one child the current node is enumerated second</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Tree.EnumOrders.PostOrder">
 <summary>Post-order: Children, then me</summary>
</member>
<member name="T:Tools.DataStructuresT.GenericT.GraphNode">
 <summary>Represents graph node</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphNode.__Edges">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphNode.Edges"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.Edges">
 <summary>Gets edges of this node</summary>
 <returns>Edges from and to this node</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.EdgesInternal">
 <summary>Gets edges of this node for adding and removing</summary>
 <returns>Edges from and to this node</returns>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphNode._Graph">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphNode.Graph"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.Graph">
 <summary>Gets graph this node belongs to</summary>
 <returns>Graph this node belongs to, null when this node is not in graph</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.Neighbours">
 <summary>Gets all neighbouring nodes of current node</summary>
 <returns>Nodes at the other sides of all (incoming and outgoing) edges of this node</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.ReachableNeighbours">
 <summary>Gets all neighbour nodes that can be reached form this node</summary>
 <returns>Nodes edge from this node leads to</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.ReachingNeighbours">
 <summary>Gets all neighbour nodes that can reach this node</summary>
 <returns>Nodes edge to this node leads from</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.EdgesToReachableNeighbours">
 <summary>Gets edges to all neighbour nodes that can be reached form this node</summary>
 <returns>Nodes edge from this node leads to</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.EdgesToReachingNeighbours">
 <summary>Gets edges to all neighbour nodes that can reach this node</summary>
 <returns>Nodes edge to this node leads from</returns>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphNode._Tag">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphNode.Tag"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.Tag">
 <summary>Additional object attached to this node</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphNode.Clone">
 <summary>Clones non-graph properties of current node</summary>
 <returns>Cloned node</returns>
 <remarks>This implementation clones only the <see cref="P:Tools.DataStructuresT.GenericT.GraphNode.Tag"/> property</remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.StandAlone">
 <summary>Gets value indicating if this node is stand alone</summary>
 <returns>True where tehere are no edges leading to or from this node</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.IsRoot">
 <summary>Gets value indicating if this node is root</summary>
 <returns>True if there are no edges leading to this node</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.IsDeadEnd">
 <summary>Gets value indicating if this node is dead end</summary>
 <returns>True if there are no edges leading from this node</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.Degree">
 <summary>Gets total degree of the node</summary>
 <returns>Number of edges inciding with this node</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.DegreeIn">
 <summary>Gets input degree of this node</summary>
 <returns>Number of edges incoming to this node</returns>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphNode.DegreeOut">
 <summary>Gets output degree of this node</summary>
 <returns>Number of edges outgoing from this node</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphNode.Remove">
 <summary>Removes this node from graph</summary>
 <remarks>All edges inciding with this node are removed as well. 
 <para>If <see cref="P:Tools.DataStructuresT.GenericT.GraphNode.Graph"/> is null, no action is taken.</para></remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphNode.OnEdgeAdded(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphEdge}.ItemIndexEventArgs)">
 <summary>When impelmented in derived class reacts to item add to the <see cref="P:Tools.DataStructuresT.GenericT.GraphNode.Edges"/> collection</summary>
 <param name="e">Event arguments</param>
 <remarks>This implementation does nothing</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphNode.OnEdgesCleared(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphEdge}.ItemsEventArgs)">
 <summary>When impelmented in derived class reacts to all items removal from the <see cref="P:Tools.DataStructuresT.GenericT.GraphNode.Edges"/> collection</summary>
 <param name="e">Event arguments</param>
 <remarks>This implementation does nothing</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphNode.OnEdgeChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphEdge}.OldNewItemEventArgs)">
 <summary>When impelmented in derived class reacts to item replacement in the <see cref="P:Tools.DataStructuresT.GenericT.GraphNode.Edges"/> collection</summary>
 <param name="e">Event arguments</param>
 <remarks>This implementation does nothing</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphNode.OnEdgeRemoved(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphEdge}.ItemIndexEventArgs)">
 <summary>When impelmented in derived class reacts to item removal from the <see cref="P:Tools.DataStructuresT.GenericT.GraphNode.Edges"/> collection</summary>
 <param name="e">Event arguments</param>
 <remarks>This implementation does nothing</remarks>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphNode.AlghoritmData">
 <summary>Contains alghoritm data</summary>
 <remarks>When particular alghoritm runs over the graph, it stores its data here. Do not change this field when alghoritm runs!</remarks>
</member>
<member name="T:Tools.DataStructuresT.GenericT.GraphEdge">
 <summary>Represents graph edge</summary>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphEdge.#ctor">
 <summary>Creates new instance of the <see cref="T:Tools.DataStructuresT.GenericT.GraphEdge"/> class with <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Value"/> 1</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphEdge.#ctor(System.Double)">
 <summary>Creates new instance of the <see cref="T:Tools.DataStructuresT.GenericT.GraphEdge"/> class with given value of <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Value"/></summary>
 <param name="Value">Value (weight) of edge</param>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphEdge._Value">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Value"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphEdge.Value">
 <summary>Gets or sets value (weight, length, capacity etc.) of this edge</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphEdge._Node1">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node1"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphEdge.Node1">
 <summary>Gets node this edge starts in</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphEdge._Node2">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node2"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphEdge.Node2">
 <summary>Gets node this edge ends in</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphEdge._BiDir">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.BiDir"/> rpoeprty</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphEdge.BiDir">
 <summary>Gets or sets value idicating if this edge is bidirectional (two-way)</summary>
 <returns>True if this property leads from <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node1"/> to <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node2"/> as well as from <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node2"/> to <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node1"/>; false if this edge leads from <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node1"/> to <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node2"/> only.</returns>
 <value>True to make this edg two-way; false to make it one-way (oriented)</value>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphEdge.Graph">
 <summary>Gets graph this edge belongs to</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphEdge.Remove">
 <summary>Removes the edge from inciding nodes and continer graph</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphEdge._Tag">
 <summary>Contains value of the tag property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphEdge.Tag">
 <summary>Additional object attached to edge</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphEdge.IsDuplicate">
 <summary>Gets value indicating if edge from same and to same node exits</summary>
 <returns>True if there is another edge from <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node1"/> to <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node2"/> with same direction</returns>
 <remarks>Edges where one is bidirectional and the other is not are not considered duplicate</remarks>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphEdge.IsLoop">
 <summary>Gets value indicating if this edge is loop</summary>
 <returns>True if <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node1"/> and <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node2"/> are the same</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphEdge.Connets(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphNode)">
 <summary>Gets value indicating if this edge connects given nodes in any direction</summary>
 <param name="Node1">A node</param>
 <param name="Node2">A node</param>
 <returns>True if this this one of given nodes and ends in the other</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Node1"/> or <paramref name="Node2"/> is <see langword="null"/></exception>
 <seelaso cref="M:Tools.DataStructuresT.GenericT.GraphEdge.Leads(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphNode)"/>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphEdge.Leads(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphNode)">
 <summary>Gets value indicating if this edge leads from given start node to given end node</summary>
 <param name="Node1">Expected start node</param>
 <param name="Node2">Expected end node</param>
 <returns>True if this edge leads from <paramref name="Node1"/> to <paramref name="Node2"/></returns>
 <remarks>If <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.BiDir"/> is true, has same result as <see cref="M:Tools.DataStructuresT.GenericT.GraphEdge.Connets(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphNode)"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Node1"/> or <paramref name="Node2"/> is <see langword="null"/></exception>
 <seelaso cref="M:Tools.DataStructuresT.GenericT.GraphEdge.Connets(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphNode)"/>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphEdge.GetOther(Tools.DataStructuresT.GenericT.GraphNode)">
 <summary>Gets the other node of edge</summary>
 <param name="Node">One of edge nodes</param>
 <returns>Other edge node. If <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node1"/> is <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node2"/> returns <paramref name="Node"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Node"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Node"/> is neither <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node1"/> node <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Node2"/></exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.GraphEdge.Clone">
 <summary>Clones non-graph properties of edge and <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.BiDir"/></summary>
 <returns>Cloned edge</returns>
 <remarks>This implementation clones only <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Tag"/>, <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Value"/> and <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.BiDir"/></remarks>
</member>
<member name="T:Tools.DataStructuresT.GenericT.Graph">
 <summary>Represents whole graph, implements graph alghoritms</summary>
 <remarks>You should always run only one graph alghoritm at time (on single graph)</remarks>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Graph.__Nodes">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Graph.Nodes"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Graph.Edges">
 <summary>Gets edges of this graph</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Graph.Nodes">
 <summary>Gets nodes of this graph</summary>
 <exception cref="T:System.OperationCanceledException"><see cref="T:System.OperationCanceledException"/> may be thrown when adding or changin items in this collection using invalid new items. Invalid node is such node that is already present in this or another graph.</exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.Handlers(Tools.DataStructuresT.GenericT.GraphNode,System.Boolean)">
 <summary>Adds or removes handlers of node</summary>
 <param name="item">Node to add/remove handler of</param>
 <param name="Add">True to add, false to remove</param>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.OnNodeAdded(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphNode}.ItemIndexEventArgs)">
 <summary>When overriden in derived class takes additional actions when node is added</summary>
 <param name="e">Event arguments</param>
 <remarks>This implementation does nothing</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.OnNodesCleared(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphNode}.ItemsEventArgs)">
 <summary>When overriden in derived class takes additional actions when the <see cref="P:Tools.DataStructuresT.GenericT.Graph.Nodes"/> collection is cleared</summary>
 <param name="e">Event arguments</param>
 <remarks>This implementation does nothing</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.OnNodeChanged(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphNode}.OldNewItemEventArgs)">
 <summary>When overriden in derived class takes additional actions when item in the <see cref="P:Tools.DataStructuresT.GenericT.Graph.Nodes"/> collection is replaced</summary>
 <param name="e">Event arguments</param>
 <remarks>This implementation does nothing</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.OnNodeRemoved(Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphNode}.ItemIndexEventArgs)">
 <summary>When overriden in derived class takes additional actions when item is added to the <see cref="P:Tools.DataStructuresT.GenericT.Graph.Nodes"/> collection</summary>
 <param name="e">Event arguments</param>
 <remarks>This implementation does nothing</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.OnEdgeAdded(Tools.DataStructuresT.GenericT.GraphNode,Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphEdge}.ItemIndexEventArgs)">
 <summary>When impelmented in derived class reacts to item add to the <see cref="P:Tools.DataStructuresT.GenericT.Graph.Edges"/> collection</summary>
 <param name="e">Event arguments</param>
 <param name="Node">Node the event occured for</param>
 <remarks>This implementation does nothing. Not called when node is replaced.</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.OnEdgesCleared(Tools.DataStructuresT.GenericT.GraphNode,Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphEdge}.ItemsEventArgs)">
 <summary>When impelmented in derived class reacts to all items of single node removal from the <see cref="P:Tools.DataStructuresT.GenericT.Graph.Edges"/> collection</summary>
 <param name="e">Event arguments</param>
 <param name="Node">Node the event occured for</param>
 <remarks>This implementation does nothing. Not called when <see cref="P:Tools.DataStructuresT.GenericT.Graph.Nodes"/> are claread, or node is removed.</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.OnEdgeChanged(Tools.DataStructuresT.GenericT.GraphNode,Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphEdge}.OldNewItemEventArgs)">
 <summary>When impelmented in derived class reacts to item replacement in the <see cref="P:Tools.DataStructuresT.GenericT.Graph.Edges"/> collection</summary>
 <param name="e">Event arguments</param>
 <param name="Node">Node the event occured for</param>
 <remarks>This implementation does nothing. Not called.</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.OnEdgeRemoved(Tools.DataStructuresT.GenericT.GraphNode,Tools.CollectionsT.GenericT.ListWithEvents{Tools.DataStructuresT.GenericT.GraphEdge}.ItemIndexEventArgs)">
 <summary>When impelmented in derived class reacts to item removal from the <see cref="P:Tools.DataStructuresT.GenericT.Graph.Edges"/> collection</summary>
 <param name="e">Event arguments</param>
 <param name="Node">Node the event occured for</param>
 <remarks>This implementation does nothing. If node is removed, called only for remaining node (not called for loop edges). Not called when node is replaced.</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.Connect(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphEdge)">
 <summary>Connects two nodes using given edge</summary>
 <param name="Node1">Starting node</param>
 <param name="Node2">End node</param>
 <param name="Edge">Connecting edge</param>
 <returns><paramref name="Edge"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Node1"/>, <paramref name="Node2"/> or <paramref name="Edge"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Node1"/> or <paramref name="Node2"/> does not belong to current graph
 -or- <paramref name="Edge"/> belongs to any graph.</exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.Connect(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphNode)">
 <summary>Connects two nodes using new edge</summary>
 <param name="Node1">Staring node</param>
 <param name="Node2">End node</param>
 <returns>Newly created edge. The edge has <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Value"/> 1 and <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.BiDir"/> true (unless <see cref="M:Tools.DataStructuresT.GenericT.Graph.CreateEdge(System.Double)"/> in derived class overrides this behavior)</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Node1"/> or <paramref name="Node2"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Node1"/> or <paramref name="Node2"/> does not belong to current graph</exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.Connect(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphNode,System.Double)">
 <summary>Connects two nodes using new edge with given weight</summary>
 <param name="Node1">Staring node</param>
 <param name="Node2">End node</param>
 <returns>Newly created edge. The edge has <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Value"/> <paramref name="EdgeValue"/> and <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.BiDir"/> true (unless <see cref="M:Tools.DataStructuresT.GenericT.Graph.CreateEdge(System.Double)"/> in derived class overrides this behavior)</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Node1"/> or <paramref name="Node2"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Node1"/> or <paramref name="Node2"/> does not belong to current graph</exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.CreateEdge(System.Double)">
 <summary>Creates new edge</summary>
 <param name="Value">Weight of edge</param>
 <returns>Newly created edge. Edge has not graph set.</returns>
 <remarks>Used by <see cref="M:Tools.DataStructuresT.GenericT.Graph.Connect(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphNode)"/></remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.Clone">
 <summary>Clones the graph</summary>
 <returns>New cloned graph</returns>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.ICloneable_Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance.</returns>
</member>
<member name="F:Tools.DataStructuresT.GenericT.Graph.bgw">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.Graph.BackgroundWorker"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.Graph.BackgroundWorker">
 <summary>When set, graph alghoritms uses it to report progress (if supported) and to cancel itself</summary>
 <returns>Current background worker used by alghoritms</returns>
 <remarks>State (if reported) is reported in <see cref="T:Tools.WindowsT.FormsT.ProgressMonitor"/>-compatible way</remarks>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.FindPaths(Tools.DataStructuresT.GenericT.GraphNode)">
 <summary>Runs Dijkstra alghoritm of inding the shortest weighted paths from given node</summary>
 <param name="From">Start node to search fro paths from</param>
 <remarks>When alghoritm finishes, each node (N) has set its distance from <paramref name="From"/> in <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.DoubleDistance"/> and its predecessor in reverse-direction path from N to <paramref name="From"/> in <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.Predecessor"/> (edge can be determined by <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.PredecessorEdge"/>.
 <para>This alghoritm cannot work when <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Value"/> is zero or less.</para>
 <para>This alghoritm reports progress.</para></remarks>
 <exception cref="T:System.OperationCanceledException"><see cref="P:Tools.DataStructuresT.GenericT.Graph.BackgroundWorker"/>.<see cref="P:System.ComponentModel.BackgroundWorker.CancellationPending">CancellationPending</see> is set to true.</exception>
 <exception cref="T:Tools.DataStructuresT.GenericT.InvalidGraphException">Edge with <see cref="P:Tools.DataStructuresT.GenericT.GraphEdge.Value"/> less than or equal to zero reached.</exception>
</member>
<member name="M:Tools.DataStructuresT.GenericT.Graph.DijkstraRelax(Tools.DataStructuresT.GenericT.GraphNode,Tools.DataStructuresT.GenericT.GraphEdge,Tools.CollectionsT.GenericT.PriorityQueue{Tools.DataStructuresT.GenericT.GraphNode})">
 <summary>Relaxes path for Dijkstra alhoritm</summary>
 <param name="u">Parent node</param>
 <param name="h">Observed edge</param>
 <param name="q">Queue</param>
</member>
<member name="T:Tools.DataStructuresT.GenericT.GraphAlghoritmData">
 <summary>Data used by graph alghoritm</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphAlghoritmData._DoubleDistance">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.DoubleDistance"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphAlghoritmData._IntegerDistance">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.IntegerDistance"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphAlghoritmData._PredecessorEdge">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.PredecessorEdge"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphAlghoritmData._Predecessor">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.Predecessor"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphAlghoritmData._State">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.State"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphAlghoritmData._OpenMark">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.OpenMark"/> property</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphAlghoritmData._CloseMark">
 <summary>Contains value of the <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.CloseMark"/> property</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.CloseMark">
 <summary>If used by alghoritm contains node close time-stam as integer</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.DoubleDistance">
 <summary>If used by alghoritm contains distance of node from start of searching as double value</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.IntegerDistance">
 <summary>If used by alghoritm contains ditance of node from start of searching as integer</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.OpenMark">
 <summary>If used by alghoritm contains node open time-stam as integer</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.Predecessor">
 <summary>If used by alghoritm contains node predecessor (or parent) in alghoritm-deined structure</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.PredecessorEdge">
 <summary>If used by alghoritm contains edge from <see cref="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.Predecessor"/> to current node</summary>
</member>
<member name="P:Tools.DataStructuresT.GenericT.GraphAlghoritmData.State">
 <summary>If used by alghoritm contains node state during alghoritm run</summary>
 <value>Default value if <see cref="F:Tools.DataStructuresT.GenericT.GraphNodeState.Fresh"/>. When alghoritm finishes the value should be <see cref="F:Tools.DataStructuresT.GenericT.GraphNodeState.Closed"/> (if alghoritm uses this property)</value>
</member>
<member name="T:Tools.DataStructuresT.GenericT.GraphNodeState">
 <summary>Possible states of graph node while alghoritm is running</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphNodeState.Fresh">
 <summary>The nodes is fresh (never visited)</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphNodeState.Open">
 <summary>The node is open (currently being processed)</summary>
</member>
<member name="F:Tools.DataStructuresT.GenericT.GraphNodeState.Closed">
 <summary>The node is closed (already processed)</summary>
</member>
<member name="T:Tools.DataStructuresT.GenericT.InvalidGraphException">
 <summary>Exception thrown when <see cref="T:Tools.DataStructuresT.GenericT.Graph"/> is in invalid for specific alghoritm</summary>
</member>
<member name="M:Tools.DataStructuresT.GenericT.InvalidGraphException.#ctor(System.String,System.Exception)">
 <summary>Initializes a new instance of the <see cref="T:System.InvalidOperationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
 <param name="message">The error message that explains the reason for the exception.</param>
 <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
</member>
<member name="T:Tools.DrawingT.DesignT.EmbededFileEditor">
 <summary><see cref="T:System.Drawing.Design.UITypeEditor"/> of <see cref="T:System.Byte"/> capable to save bytes info file and load them from it</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.DrawingT.DesignT.EmbededFileEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.</summary>
 <returns><see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/></returns>
</member>
<member name="M:Tools.DrawingT.DesignT.EmbededFileEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
 <summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
 <param name="value">The object to edit.</param>
 <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
 <returns>Content of loaded file or <paramref name="value"/> if no file is loaded</returns>
</member>
<member name="F:Tools.DrawingT.DesignT.EmbededFileEditor.Context">
 <summary>The context parameter of <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.EmbededFileEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member>
<member name="F:Tools.DrawingT.DesignT.EmbededFileEditor.Service">
 <summary>service obtained from provider parameter of <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.EmbededFileEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member>
<member name="F:Tools.DrawingT.DesignT.EmbededFileEditor.Value">
 <summary>Property value is passed through this field between <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> and <see cref="M:Tools.DrawingT.DesignT.EmbededFileEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member>
<member name="M:Tools.DrawingT.DesignT.EmbededFileEditor.Lst_Click(System.Object,System.EventArgs)">
 <summary>Invoked when <see cref="T:System.Windows.Forms.ListBox"/> that provided drop-down UI is clicked</summary>
 <param name="sender">The <see cref="T:System.Windows.Forms.ListBox"/></param>
 <param name="e">Event params</param>
</member>
<member name="T:Tools.DrawingT.DesignT.EmbededImageEditor">
 <summary><see cref="T:System.Drawing.Design.UITypeEditor"/> of <see cref="T:System.Byte"/> capable to save and load image</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.DrawingT.DesignT.EmbededImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.</summary>
 <returns><see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/></returns>
</member>
<member name="M:Tools.DrawingT.DesignT.EmbededImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
 <summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
 <param name="value">The object to edit.</param>
 <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
 <returns>Content of loaded file or <paramref name="value"/> if no file is loaded</returns>
</member>
<member name="F:Tools.DrawingT.DesignT.EmbededImageEditor.Context">
 <summary>The context parameter of <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.EmbededImageEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member>
<member name="F:Tools.DrawingT.DesignT.EmbededImageEditor.Service">
 <summary>service obtained from provider parameter of <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.EmbededImageEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member>
<member name="F:Tools.DrawingT.DesignT.EmbededImageEditor.Value">
 <summary>Property value is passed through this field between <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> and <see cref="M:Tools.DrawingT.DesignT.EmbededImageEditor.Lst_Click(System.Object,System.EventArgs)"/></summary>
</member>
<member name="M:Tools.DrawingT.DesignT.EmbededImageEditor.Lst_Click(System.Object,System.EventArgs)">
 <summary>Invoked when <see cref="T:System.Windows.Forms.ListBox"/> that provided drop-down UI is clicked</summary>
 <param name="sender">The <see cref="T:System.Windows.Forms.ListBox"/></param>
 <param name="e">Event params</param>
</member>
<member name="T:Tools.DrawingT.DesignT.NewEditor">
 <summary><see cref="T:System.Drawing.Design.UITypeEditor"/> capable of creating new instance either from <see cref="T:System.ComponentModel.DefaultValueAttribute"/> (preffered if available and <see cref="P:System.ComponentModel.DefaultValueAttribute.Value"/> is not null) or by parameterless CTor</summary>
 <remarks>
 The <see cref="T:System.ComponentModel.DefaultValueAttribute"/> used can be applyed either on property (preffered) or on type of the property.
 See also <seealso cref="T:System.ComponentModel.InstanceCreationEditor"/>.
 </remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.DrawingT.DesignT.NewEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.</summary>
 <returns><see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/></returns>
</member>
<member name="M:Tools.DrawingT.DesignT.NewEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
 <summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.</summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
 <param name="value">The object to edit.</param>
 <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
 <returns>New value of type of property  obtained either via <see cref="T:System.ComponentModel.DefaultValueAttribute"/> or via default CTor</returns>
</member>
<member name="F:Tools.DrawingT.DesignT.NewEditor.Context">
 <summary>The context parameter of <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.NewEditor.Lbl_Click(System.Object,System.EventArgs)"/></summary>
</member>
<member name="F:Tools.DrawingT.DesignT.NewEditor.Service">
 <summary>service obtained from provider parameter of <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> used by <see cref="M:Tools.DrawingT.DesignT.NewEditor.Lbl_Click(System.Object,System.EventArgs)"/></summary>
</member>
<member name="M:Tools.DrawingT.DesignT.NewEditor.Lbl_Click(System.Object,System.EventArgs)">
 <summary>Handles <see cref="E:System.Windows.Forms.Control.Click"/> event of label used to provide drop-down UI</summary>
 <param name="sender">The <see cref="T:System.Windows.Forms.Label"/></param>
 <param name="e">Event params</param>
</member>
<member name="T:Tools.DrawingT.DesignT.UITypeEditor`1">
 <summary>Base class for type-safe <see cref="T:System.Drawing.Design.UITypeEditor">UITypeEditors</see></summary>
 <typeparam name="T">Type of value being edited</typeparam>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
 <summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> method.</summary>
 <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
 <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services. </param>
 <param name="value">The object to edit. </param>
 <remarks>Use type-safe overload instead</remarks>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is not of type <typeparamref name="T"/> and it is not null.</exception>
</member>
<member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,`0)">
 <summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> method.</summary>
 <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
 <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services. </param>
 <param name="value">The object to edit. </param>
</member>
<member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
 <summary>Paints a representation of the value of an object using the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs" />.</summary>
 <param name="e">A <see cref="T:System.Drawing.Design.PaintValueEventArgs" /> that indicates what to paint and where to paint it. </param>
 <remarks>Use type-safe overload instead</remarks>
</member>
<member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValue(Tools.DrawingT.DesignT.UITypeEditor{`0}.PaintValueEventArgs)">
 <summary>Paints a representation of the value of an object using the specified <see cref="T:System.Drawing.Design.PaintValueEventArgs" />.</summary>
 <param name="e">A <see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs" /> that indicates what to paint and where to paint it. </param>
</member>
<member name="T:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs">
 <summary>Type-safe implementation of <see cref="T:System.Drawing.Design.PaintValueEventArgs"/></summary>
</member>
<member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs.#ctor(System.ComponentModel.ITypeDescriptorContext,`0,System.Drawing.Graphics,System.Drawing.Rectangle)">
 <summary>Initializes a new instance of the <see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs" /> class using the specified values.</summary>
 <param name="context">The context in which the value appears.</param>
 <param name="value">The value to paint.</param>
 <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> object with which drawing is to be done.</param>
 <param name="bounds">The <see cref="T:System.Drawing.Rectangle" /> in which drawing is to be done.</param>
 <exception cref="T:System.ArgumentNullException">graphics is null.</exception>
</member>
<member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs.#ctor(System.Drawing.Design.PaintValueEventArgs)">
 <summary>Initializes a new instance of the <see cref="T:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs" /> class from another instance of <see cref="T:System.Drawing.Design.PaintValueEventArgs"/>.</summary>
 <param name="other">A <see cref="T:System.Drawing.Design.PaintValueEventArgs"/></param>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="other"/>.<see cref="P:System.Drawing.Design.PaintValueEventArgs.Value">Value</see> is not of type <typeparamref name="T"/>.</exception>
</member>
<member name="M:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs.VerifyValue(System.Object)">
 <summary>Verifies that given value is of type <typeparamref name="T"/></summary>
 <param name="value">Value to be verified</param>
 <remarks><paramref name="value"/></remarks>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is not of type <typeparamref name="T"/>.</exception>
</member>
<member name="P:Tools.DrawingT.DesignT.UITypeEditor`1.PaintValueEventArgs.Value">
 <summary>Gets the value to paint.</summary>
 <returns>An object indicating what to paint.</returns>
</member>
<member name="T:Tools.DrawingT.DesignT.DropDownControlEditor`2">
 <summary>Implements drop-down <see cref="T:System.Drawing.Design.UITypeEditor"/> represented by WinForms <see cref="T:System.Windows.Forms.Control"/></summary>
 <typeparam name="T">Type of value being edited</typeparam>
 <typeparam name=" TControl">Type of <see cref="T:System.Windows.Forms.Control"/> that serves as editor GUI. It must implement <see cref="T:Tools.DrawingT.DesignT.IEditor`1"/> and has default CTor. You can derive your control from <see cref="T:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1"/> whic implements basic functionality of <see cref="T:Tools.DrawingT.DesignT.IEditor`1"/> interface</typeparam>
 <seelaso cref="T:Tools.DrawingT.DesignT.IEditor`1"/><seelaso cref="T:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1"/>
</member>
<member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.ShowDropDown(`1,System.IServiceProvider,System.ComponentModel.ITypeDescriptorContext)">
 <summary>Performs all tasks needed to show drop down</summary>
 <param name="control">Control to be shown</param>
 <param name="provider"><see cref="T:System.IServiceProvider"/> that provides environment for drop down</param>
 <param name="context">Context for this editing session</param>
 <returns>True when drop-down was shown, false when it was not shown due to some condition.</returns>
 <remarks>
 This implementation <paramref name="provider"/> is not null, <paramref name="context"/>.<see cref="P:System.ComponentModel.ITypeDescriptorContext.Instance">Instance</see> is not null and <paramref name="provider"/> provides <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/>. If those conditions are true, drop down is shown, otherwise not.
 While showing dropdown <paramref name="control"/>.<see cref="P:Tools.DrawingT.DesignT.IEditor`1.Service">Service</see> and <paramref name="control"/>.<see cref="P:Tools.DrawingT.DesignT.IEditor`1.Context"/> properties are set and handler is attached to <paramref name="control"/>.<see cref="E:System.Windows.Forms.Control.KeyDown">KeyDown</see>.
 Then <see cref="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.ShowDropDown(!1,System.Windows.Forms.Design.IWindowsFormsEditorService)"/> is called. After that handle is detached.
 <para>Note for inheritors: Inheritor should ensure that each instance of <typeparamref name="TControl"/> is being shown only once at same time.</para>
 </remarks>
</member>
<member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.ShowDropDown(`1,System.Windows.Forms.Design.IWindowsFormsEditorService)">
 <summary>Shows drop-down editor for <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/></summary>
 <param name="Control">Control to be shown</param>
 <param name="edSvc"><see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> that provides environment for current editing session.</param>
 <remarks>This method is called by overloaded <see cref="M:Tools.DrawingT.DesignT.DesignT.DropDownControlEditor`2.ShowDropDown(!1,System.IServiceProviderSystem.ComponentModel.ITypeDescriptorContext)"/> when all conditions necessary for showin drop-down as WinForms <see cref="T:System.Windows.Forms.Control"/> are fullfilled.
 <para>This implementation calls <paramref name="Control"/>.<see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnBeforeShow">OnBeforeShow</see>, shows drop down and calls <paramref name="Control"/>.<see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed">OnClosed</see>.</para>
 <para>Note for inheritors: Inheritor should ensure that each instance of <typeparamref name="TControl"/> is being shown only once at same time.</para>
 </remarks>
</member>
<member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,`0)">
 <summary>Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle" /> method.</summary>
 <returns>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</returns>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information. </param>
 <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services. </param>
 <param name="value">The object to edit. </param>
 <remarks>This implementation creates instance if <typeparamref name="TControl"/> amd calls <see cref="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.ShowDropDown(!1,System.Windows.Forms.Design.IWindowsFormsEditorService)"/> for it.
 <para>Note for inheritors: Inheritor should ensure that each instance of <typeparamref name="TControl"/> is being shown only once at same time.</para></remarks>
</member>
<member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)" /> method.</summary>
 <returns><see cref="F:System.Drawing.Design.UITypeEditorEditStyle.DropDown"/></returns>
</member>
<member name="P:Tools.DrawingT.DesignT.DropDownControlEditor`2.IsDropDownResizable">
 <summary>Gets a value indicating whether drop-down editors should be resizable by the user.</summary>
 <returns>This implementation returns false unless <see cref="!:TControl"/> implements <see cref="T:Tools.DrawingT.DesignT.IEditorExtended`1"/> - in such case it retuns <see cref="P:Tools.DrawingT.DesignT.IEditorExtended`1.IsDropDownResizable"/>.</returns>
</member>
<member name="M:Tools.DrawingT.DesignT.DropDownControlEditor`2.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
 <summary>Indicates whether this editor supports painting a representation of an object's value.</summary>
 <returns>This implementation always returns false</returns>
</member>
<member name="T:Tools.DrawingT.DesignT.IEditor`1">
 <summary>Interface for control that implements GUI for <see cref="T:Tools.DrawingT.DesignT.DropDownControlEditor`2"/></summary>
 <remarks>This type is usually implemnetd by class derived from <see cref="T:System.Windows.Forms.Control"/> (such as <see cref="T:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1"/>).
 <para>However <see cref="T:Tools.DrawingT.DesignT.DropDownControlEditor`2"/> does not do so, control implementation can be recycled. This means shown, closed and the shown again, closed again and then shown again ...</para></remarks>
 <typeparam name="T">Type of value being edited</typeparam>
</member>
<member name="P:Tools.DrawingT.DesignT.IEditor`1.Value">
 <summary>Gets or sets edited value</summary>
</member>
<member name="P:Tools.DrawingT.DesignT.IEditor`1.Service">
 <summary>Stores <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> valid for current editing session</summary>
 <remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnBeforeShow"/> and <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed"/>.</remarks>
</member>
<member name="P:Tools.DrawingT.DesignT.IEditor`1.Context">
 <summary>Stores context of current editing session</summary>
 <remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnBeforeShow"/> and <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed"/>.</remarks>
</member>
<member name="P:Tools.DrawingT.DesignT.IEditor`1.Result">
 <summary>Stores editing result</summary>
 <returns>True if editing was terminated with success, false if it was canceled</returns>
 <remarks>Implementing control is responsible for setting this property typically to false when Esc is pressed and true when Enter is pressed. Value must be valid after <see cref="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed"/> is called.</remarks>
</member>
<member name="M:Tools.DrawingT.DesignT.IEditor`1.OnBeforeShow">
 <summary>Owner of control informs control that it is about to be shown by calling this methos. It is called just befiore the control is shown.</summary>
</member>
<member name="M:Tools.DrawingT.DesignT.IEditor`1.OnClosed">
 <summary>Informs control that it was just hidden by calling this method.</summary>
 <remarks>When implementing editor for reference type that is edited by changin its properties instead of changing its instance. Properties shouldbe changed in this method and onyl if <see cref="P:Tools.DrawingT.DesignT.IEditor`1.Result"/> is true.</remarks>
</member>
<member name="T:Tools.DrawingT.DesignT.IEditorExtended`1">
 <summary>Extends <see cref="T:Tools.DrawingT.DesignT.IEditor`1"/> with additional members to control behavior and appearance</summary>
 <typeparam name="T">Type of value being edited</typeparam>
</member>
<member name="P:Tools.DrawingT.DesignT.IEditorExtended`1.IsDropDownResizable">
 <summary>Gets value indicating if editor drop-down control should be resizable</summary>
 <returns>True if editor drop down control should be resizable, false if not</returns>
 <seelaso cref="P:System.Drawing.Design.UITypeEditor.IsDropDownResizable"/>
</member>
<member name="T:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1">
 <summary>Provides base abstract implementation of drop down control <see cref="T:Tools.DrawingT.DesignT.DropDownControlEditor`2"/></summary>
 <typeparam name="T">Type of value being edited</typeparam>
</member>
<member name="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.ProcessDialogKey(System.Windows.Forms.Keys)">
 <summary>Processes a dialog key.</summary>
 <returns>True if the key was processed by the control; otherwise, false. This implementation always returns false. It only track keys <see cref="F:System.Windows.Forms.Keys.Enter"/> and <see cref="F:System.Windows.Forms.Keys.Escape"/> to <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Result"/>.</returns>
 <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process. </param>
 <remarks>This implementation sets <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Result"/> to false if <paramref name="keyData"/> is <see cref="F:System.Windows.Forms.Keys.Escape"/> (and neither Alt, Ctrl nor Shift is pressed). If <paramref name="keyData"/> is <see cref="F:System.Windows.Forms.Keys.Enter"/> (and neitehr Alt, Ctrl nor Shift is pressed) sets <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Result"/> to true sets result to true and then calls <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.UpdateValue"/>.</remarks>
</member>
<member name="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.UpdateValue">
 <summary>When overriden in derived class updates the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Value"/> property with value generated by actual state of control</summary>
 <remarks>
 <para>You should override and implement this method in case your control does not update the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Value"/> property whenever control state changes.
 Consider these two simple controls:
 <list type="number">
 <item>Control is implemented by <see  cref="T:System.Windows.Forms.ListBox"/> and the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Value"/> property is update whenever <see cref="P:System.Windows.Forms.ListBox.SelectedIndex"/> changes.</item>
 <item>Control is implemented by <see cref="T:System.Windows.Forms.ListBox"/> and the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Value"/> property is not updated when <see cref="P:System.Windows.Forms.ListBox.SelectedIndex"/> changes. You want to set the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Value"/> when dropdown closes.</item>
 </list>
 In scenario 1 you have not to implement <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.UpdateValue"/>.
 In scenario 2 you should implement <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.UpdateValue"/>.
 </para>
 <para>In this implementation this method is called by <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.ProcessDialogKey(System.Windows.Forms.Keys)"/> when enter key is pressed (<see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Result"/> property is valid and has value true). It is not called when you close drop down manually by calling <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Service">Service</see>.<see cref="M:System.Windows.Forms.Design.IWindowsFormsEditorService.CloseDropDown">CloseDropDown</see>.</para>
 <para>This implementation does nothing.</para>
 </remarks>
</member>
<member name="F:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1._Context">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Context"/> property</summary>
</member>
<member name="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Context">
 <summary>Stores context of current editing session</summary>
 <remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.OnBeforeShow"/> and <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.OnClosed"/>.</remarks>
</member>
<member name="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.OnBeforeShow">
 <summary>Owner of control informs control that it is about to be shown by calling this methos. It is called just befiore the control is shown.</summary>
 <remarks>This implementation does nothing</remarks>
</member>
<member name="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.OnClosed">
 <summary>Informs control that it was just hidden by calling this method.</summary>
 <remarks>When implementing editor for reference type that is edited by changin its properties instead of changing its instance. Properties shouldbe changed in this method and onyl if <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Result"/> is true.<para>This implementation does nothing.</para></remarks>
</member>
<member name="F:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1._Result">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Result"/> property</summary>
</member>
<member name="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Result">
 <summary>Stores editing result</summary>
 <returns>True if editing was terminated with success, false if it was canceled</returns>
 <remarks>
 Implementing control is responsible for setting this property typically to false when Esc is pressed and true when Enter is pressed. Value must be valid after <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.OnClosed"/> is called.
 <see cref="T:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1"/> provides such behavior by <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.ProcessDialogKey(System.Windows.Forms.Keys)"/> function.
 </remarks>
</member>
<member name="F:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1._Service">
 <summary>Countains value of the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Service"/> property</summary>
</member>
<member name="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Service">
 <summary>Stores <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService"/> valid for current editing session</summary>
 <remarks>This property is set by owner of the control and is valid between calls of <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.OnBeforeShow"/> and <see cref="M:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.OnClosed"/>.</remarks>
</member>
<member name="F:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1._Value">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Value"/> property</summary>
</member>
<member name="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Value">
 <summary>Gets or sets edited value</summary>
</member>
<member name="T:Tools.DrawingT.IconOrBitmap">
 <summary>Represents bitmap stored either as <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/> or as <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/></summary>
 <remarks>Each instance of <see cref="T:Tools.DrawingT.IconOrBitmap"/> can be converted to <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/> and <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/></remarks>
</member>
<member name="M:Tools.DrawingT.IconOrBitmap.#ctor(System.Drawing.Icon)">
 <summary>CTor form <see cref="T:System.Drawing.Icon"/></summary>
 <param name="Icon">An <see cref="T:System.Drawing.Icon"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Icon"/> is null</exception>
</member>
<member name="M:Tools.DrawingT.IconOrBitmap.#ctor(System.Drawing.Image)">
 <summary>CTor form <see cref="T:System.Drawing.Image"/></summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="Image"/> is null</exception>
 <param name="Image">An <see cref="T:System.Drawing.Image"/></param>
</member>
<member name="M:Tools.DrawingT.IconOrBitmap.op_Implicit(Tools.DrawingT.IconOrBitmap)~System.Drawing.Image">
 <summary>Converts <see cref="T:Tools.DrawingT.IconOrBitmap"/> to <see  cref="P:Tools.DrawingT.IconOrBitmap.Image"/></summary>
 <param name="a">A <see cref="T:Tools.DrawingT.IconOrBitmap"/></param>
 <returns><see cref="T:System.Drawing.Image"/> that represents by this instance. It is either <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/> or <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/>.<see cref="M:System.Drawing.Icon.ToBitmap">ToBitmap</see>; null when <paramref name="a"/> is null.</returns>
 <seelaso cref="P:Tools.DrawingT.IconOrBitmap.Image"/>
 <version version="1.5.3">Fix: <see cref="T:System.NullReferenceException"/> when <paramref name="a"/> is null. Now returns null instead.</version>
</member>
<member name="M:Tools.DrawingT.IconOrBitmap.op_Implicit(Tools.DrawingT.IconOrBitmap)~System.Drawing.Icon">
 <summary>Converts <see cref="T:Tools.DrawingT.IconOrBitmap"/> to <see  cref="P:Tools.DrawingT.IconOrBitmap.Image"/></summary>
 <param name="a">A <see cref="T:Tools.DrawingT.IconOrBitmap"/></param>
 <returns><see cref="T:System.Drawing.Image"/> that represents by this instance. It is either <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/> or <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/>.<see cref="M:System.Drawing.Icon.ToBitmap">ToBitmap</see>; null when <paramref name="a"/> is null.</returns>
 <seelaso cref="P:Tools.DrawingT.IconOrBitmap.Icon"/>
 <version version="1.5.3">Fix: <see cref="T:System.NullReferenceException"/> when <paramref name="a"/> is null. Now returns null instead.</version>
</member>
<member name="M:Tools.DrawingT.IconOrBitmap.op_Implicit(Tools.DataStructuresT.GenericT.T1orT2{System.Drawing.Bitmap,System.Drawing.Icon})~Tools.DrawingT.IconOrBitmap">
 <summary>Converts <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/>[<see cref="T:System.Drawing.Bitmap"/>, <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/>] to <see cref="T:Tools.DrawingT.IconOrBitmap"/></summary>
 <param name="a">Value to be converted</param>
 <returns>New instance of <see cref="T:Tools.DrawingT.IconOrBitmap"/>. Null if <paramref name="a"/> is null.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> does contain neither value</exception>
</member>
<member name="M:Tools.DrawingT.IconOrBitmap.op_Implicit(Tools.DataStructuresT.GenericT.T1orT2{System.Drawing.Icon,System.Drawing.Bitmap})~Tools.DrawingT.IconOrBitmap">
 <summary>Converts <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/>[<see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/>, <see cref="T:System.Drawing.Bitmap"/>] to <see cref="T:Tools.DrawingT.IconOrBitmap"/></summary>
 <param name="a">Value to be converted</param>
 <returns>New instance of <see cref="T:Tools.DrawingT.IconOrBitmap"/>. Null if <paramref name="a"/> is null.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> does contain neither value</exception>
</member>
<member name="M:Tools.DrawingT.IconOrBitmap.op_Implicit(Tools.DataStructuresT.GenericT.T1orT2{System.Drawing.Icon,System.Drawing.Image})~Tools.DrawingT.IconOrBitmap">
 <summary>Converts <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/>[<see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/>, <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/>] to <see cref="T:Tools.DrawingT.IconOrBitmap"/></summary>
 <param name="a">Value to be converted</param>
 <returns>New instance of <see cref="T:Tools.DrawingT.IconOrBitmap"/>. Null if <paramref name="a"/> is null.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> does contain neither value</exception>
</member>
<member name="M:Tools.DrawingT.IconOrBitmap.op_Implicit(System.Drawing.Icon)~Tools.DrawingT.IconOrBitmap">
 <summary>Converts <see cref="T:System.Drawing.Icon"/> to <see cref="T:Tools.DrawingT.IconOrBitmap"/></summary>
 <param name="a">A <see cref="T:System.Drawing.Icon"/></param>
 <returns><see cref="T:Tools.DrawingT.IconOrBitmap"/> initialized with <paramref name="a"/>. Null if <paramref name="a"/> is null.</returns>
</member>
<member name="M:Tools.DrawingT.IconOrBitmap.op_Implicit(System.Drawing.Image)~Tools.DrawingT.IconOrBitmap">
 <summary>Converts <see cref="T:System.Drawing.Image"/> to <see cref="T:Tools.DrawingT.IconOrBitmap"/></summary>
 <param name="a">A <see cref="T:System.Drawing.Image"/></param>
 <returns><see cref="T:Tools.DrawingT.IconOrBitmap"/> initialized with <paramref name="a"/>. Null if <paramref name="a"/> is null.</returns>
</member>
<member name="P:Tools.DrawingT.IconOrBitmap.value1">
 <summary>Gets or sets value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/></summary>
 <value>Non-null value to set value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/> and delete value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/></value>
 <returns>If this instance contains value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/> then returns it, otherwise return null</returns>
 <remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value1"/> retruns null it means that either value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> property to true in order to store null value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/>.
 </remarks>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <seelaso cref="P:Tools.DrawingT.IconOrBitmap.Image"/>
</member>
<member name="P:Tools.DrawingT.IconOrBitmap.Image">
 <summary>Gets or sets value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/></summary>
 <value>Non-null value to set value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/> and delete value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/></value>
 <returns>Image represented by this instance</returns>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <seelaso cref="M:System.Drawing.Icon.ToBitmap"/>
</member>
<member name="P:Tools.DrawingT.IconOrBitmap.value2">
 <summary>Gets or sets value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/></summary>
 <value>Non-null value to set value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/> and delete value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/></value>
 <returns>If this instance contains value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/> then returns it, otherwise return null</returns>
 <remarks>
 If <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.value2"/> retruns null it means that either value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/> is not present in this instance or it is present but it is null. Check <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains2"/> property in order to determine actual situation.
 You must set this property to nothing and then set <see cref="P:Tools.DataStructuresT.GenericT.T1orT2`2.contains1"/> property to true in order to store null value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/>.
 </remarks>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <seelaso cref="P:Tools.DrawingT.IconOrBitmap.Icon"/>
</member>
<member name="P:Tools.DrawingT.IconOrBitmap.Icon">
 <summary>Gets or sets value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/></summary>
 <value>Non-null value to set value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Icon"/> and delete value of type <see cref="P:Tools.DrawingT.IconOrBitmap.Image"/></value>
 <returns>Representation of this instance as <see cref="T:System.Drawing.Icon"/></returns>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <seelaso cref="M:System.Drawing.Bitmap.FromHicon(System.IntPtr)"/><seelaso cref="M:System.Drawing.Icon.FromHandle(System.IntPtr)"/>
</member>
<member name="T:Tools.DrawingT.ImageTools">
 <summary>Contains extension methods for working with images</summary>
</member>
<member name="M:Tools.DrawingT.ImageTools.ThumbSize(System.Drawing.Size,System.Drawing.Size)">
 <summary>Gets thumbnail size that best fits into given size</summary>
 <param name="ImgSize">Size of original image</param>
 <param name="ThumbBounds">Size that represents maximal bounds of thumbnail</param>
 <returns>Size that does not exceed <paramref name="ThumbBounds"/> and has same proportions as <paramref name="ImgSize"/></returns>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.DrawingT.ImageTools.ThumbSize(System.Drawing.Image,System.Drawing.Size)">
 <summary>Gets size of image that best fits into given size and has same proportins</summary>
 <param name="Image">Original image (only <see cref="P:System.Drawing.Image.Size"/> of this image is used).</param>
 <param name="ThumbBounds">Size that represents maximal bounds of thumbnail</param>
 <returns>Size that does not exceed <paramref name="ThumbBounds"/> and has same proportions as <paramref name="Image"/>.<see cref="P:System.Drawing.Image.Size">Size</see>.</returns>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.DrawingT.ImageTools.Overlay(System.Drawing.Image,System.Drawing.Image,System.Drawing.ContentAlignment)">
 <summary>Combines two images by overlaying them</summary>
 <param name="Background">Image to serve as background</param>
 <param name="OverlayImage">Image to draw over <paramref name="Background"/></param>
 <param name="Position">Position of overlay image</param>
 <returns>New instance of <see cref="T:System.Drawing.Image"/> with <paramref name="Background"/> as backround and <paramref name="OverlayImage"/> drawn ovwe it.</returns>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.DrawingT.ImageTools.DrawImageInPixels(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Point)">
 <summary>Draws image at given position in its pixel size (unscaled)</summary>
 <param name="g">Graphic to draw the image</param>
 <param name="img">Image to be drawn</param>
 <param name="Position">Position (in pixels) to draw the image</param>
</member>
<member name="M:Tools.DrawingT.ImageTools.DrawImageInPixels(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32)">
 <summary>Draws image at given position in its pixel size (unscaled)</summary>
 <param name="g">Graphic to draw the image</param>
 <param name="img">Image to be drawn</param>
 <param name="x">X part of position of image</param>
 <param name="y">Y part of position of image</param>
</member>
<member name="M:Tools.DrawingT.ImageTools.GetThumbnail(System.Drawing.Image,System.Drawing.Size,System.Drawing.Image.GetThumbnailImageAbort)">
 <summary>Gets thumbnail for given image</summary>
 <param name="img">Image to get thumbnail of</param>
 <param name="Bounds">Maximum size of thumbnail</param>
 <param name="CancelFunction">Optional function that can be used to cancel long-lasting thumbmail creation</param>
 <returns>Image that is guaranted to fit in <paramref name="Bounds"/> and has the same proportions as original image</returns>
 <remarks>Uses <see cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)"/>.</remarks>
 <seelaso cref="M:System.Drawing.Image.GetThumbnailImage(System.Int32,System.Int32,System.Drawing.Image.GetThumbnailImageAbort,System.IntPtr)"/>
 <exception cref="T:System.ArgumentNullException"><paramref name="img"/> is null</exception>
</member>
<member name="M:Tools.DrawingT.ImageTools.GetThumbnail(System.Drawing.Image,System.Drawing.Size,System.Drawing.Color,System.Drawing.Graphics.DrawImageAbort)">
 <summary>Gets thumbnail for given image drawn on specified background</summary>
 <param name="img">Image to get thumbnail of</param>
 <param name="bounds">Size of restangle to place image on</param>
 <param name="Background">Background color for rectangle</param>
 <param name="CancelFunction">Optional function that can be used to cancel long-lasting thumbnail creation</param>
 <returns>Image that consists of rectangle of color <paramref name="Background"/> and image <paramref name="img"/> proportionally scaled to fit to <paramref name="bounds"/> and centered within <paramref name="bounds"/>.</returns>
 <remarks>Uses <see cref="M:System.Drawing.Graphics.DrawImage(System.Drawing.Image,System.Drawing.Point)"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="img"/> is null</exception>
</member>
<member name="T:Tools.DrawingT.SystemColorsExtension">
 <summary>Gives access to aditional system-defined colors</summary>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="P:Tools.DrawingT.SystemColorsExtension.BrowserLink">
 <summary>Color of non visited non hovered hyperlink in web browser</summary>
</member>
<member name="P:Tools.DrawingT.SystemColorsExtension.BrowserVisitedLink">
 <summary>Color of visited hyperlink in web browser</summary>
</member>
<member name="P:Tools.DrawingT.SystemColorsExtension.BrowserActiveLink">
 <summary>Color as active (hovered) hyperlink in web browser</summary>
</member>
<member name="T:Tools.IOt.BinaryWriter">
 <summary>Extends <see cref="T:System.IO.BinaryWriter"/> to be able to read numeric data in both little-endian and big-endian format</summary>
</member>
<member name="F:Tools.IOt.BinaryWriter._ByteOrder">
 <summary>Contains value of the <see cref="P:Tools.IOt.BinaryWriter.ByteOrder"/> property</summary>
</member>
<member name="P:Tools.IOt.BinaryWriter.ByteOrder">
 <summary>Format in which numeric data are read</summary>
 <remarks>Only integral numbers are affected by this property
 <list><listheader>List of affected functions</listheader>
 <item><see cref="M:Tools.IOt.BinaryWriter.Write(System.Int16)"/></item>
 <item><see cref="M:Tools.IOt.BinaryWriter.Write(System.Int32)"/></item>
 <item><see cref="M:Tools.IOt.BinaryWriter.Write(System.Int64)"/></item>
 <item><see cref="M:Tools.IOt.BinaryWriter.Write(System.UInt16)"/></item>
 <item><see cref="M:Tools.IOt.BinaryWriter.Write(System.UInt32)"/></item>
 <item><see cref="M:Tools.IOt.BinaryWriter.Write(System.UInt64)"/></item>
 </list>
 </remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.IOt.BinaryReader.ByteAlign"/></exception>
</member>
<member name="M:Tools.IOt.BinaryWriter.#ctor(System.IO.Stream,Tools.IOt.BinaryReader.ByteAlign)">
 <summary>Initializes a new instance of the <see cref="T:Tools.IOt.BinaryReader"/> class based on the supplied stream and using <see cref="T:System.Text.UTF8Encoding"/>.</summary>
 <param name="input">A stream.</param>
 <param name="Align">Format in which numeric data are read</param>
 <exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Align"/> is not member of <see cref="T:Tools.IOt.BinaryReader.ByteAlign"/></exception>
</member>
<member name="M:Tools.IOt.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,Tools.IOt.BinaryReader.ByteAlign)">
 <summary>Initializes a new instance of the <see cref="T:Tools.IOt.BinaryReader"/> class based on the supplied stream and a specific character encoding.</summary>
 <param name="encoding">The character encoding.</param>
 <param name="input">The supplied stream.</param>
 <param name="Align">Format in which numeric data are read</param>
 <exception cref="T:System.ArgumentNullException">encoding is null.</exception>
 <exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed.</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Align"/> is not member of <see cref="T:Tools.IOt.BinaryReader.ByteAlign"/></exception>
</member>
<member name="M:Tools.IOt.BinaryWriter.Write(System.Int32)">
 <summary>Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.</summary>
 <param name="value">The four-byte signed integer to write.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
</member>
<member name="M:Tools.IOt.BinaryWriter.Write(System.UInt32)">
 <summary>Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.</summary>
 <param name="value">The four-byte unsigned integer to write.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
</member>
<member name="M:Tools.IOt.BinaryWriter.Write(System.Int64)">
 <summary>Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.</summary>
 <param name="value">The eight-byte signed integer to write.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
</member>
<member name="M:Tools.IOt.BinaryWriter.Write(System.UInt64)">
 <summary>Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.</summary>
 <param name="value">The eight-byte unsigned integer to write.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
</member>
<member name="M:Tools.IOt.BinaryWriter.Write(System.Int16)">
 <summary>Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.</summary>
 <param name="value">The two-byte signed integer to write.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
</member>
<member name="M:Tools.IOt.BinaryWriter.Write(System.UInt16)">
 <summary>Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.</summary>
 <param name="value">The two-byte unsigned integer to write.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
</member>
<member name="T:Tools.IOt.OverflowStream">
 <summary>Implements sream that can be used to write data into another streem where writer does not see the basë sream and it is possible to write more data the possibli fits into free space in base stream</summary>
 <seealso cref="T:System.IO.Stream"/>
 <remarks>This stream is attached to another stream that can read, write and seek. It is possible to read, write and seek this stream. If data are written which exceeds size of restricted area within base stream, the data are cached in memore and when <see cref="M:Tools.IOt.OverflowStream.Flush"/> is called the data are insert at position of end of restricted area in base stream. Actual data in base stream are moved.
 The overflow mechanism is ommited when resticted area ends at the end of base steream.</remarks>
</member>
<member name="F:Tools.IOt.OverflowStream._BaseStream">
 <summary>Contains value of the <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> property</summary>
</member>
<member name="F:Tools.IOt.OverflowStream._Start">
 <summary>Contains value of the <see cref="P:Tools.IOt.OverflowStream.Start"/> property</summary>
</member>
<member name="F:Tools.IOt.OverflowStream._SharedLength">
 <summary>Contains value of the <see cref="P:Tools.IOt.OverflowStream.SharedLength"/> property</summary>
</member>
<member name="F:Tools.IOt.OverflowStream._OverflowStream">
 <summary>Contains value of the <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> property</summary>
</member>
<member name="F:Tools.IOt.OverflowStream._Underflow">
 <summary>Contains value of the <see cref="P:Tools.IOt.OverflowStream.Underflow"/> property</summary>
</member>
<member name="F:Tools.IOt.OverflowStream._Position">
 <summary>Contains value of the <see cref="P:Tools.IOt.OverflowStream.Position"/> property</summary>
</member>
<member name="P:Tools.IOt.OverflowStream.BaseStream">
 <summary>Gets base stream of this stream</summary>
 <returns>The stream this strem writes data into and reads data from</returns>
</member>
<member name="P:Tools.IOt.OverflowStream.Start">
 <summary>Gets offset of area in <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> this stream has access to</summary>
 <returns>Offset of first byte this stream has assce to in <see cref="P:Tools.IOt.OverflowStream.BaseStream"/></returns>
</member>
<member name="P:Tools.IOt.OverflowStream.SharedLength">
 <summary>Gets size (in bytes) of area in <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> this stream has access to</summary>
 <returns>Number of bytes of <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> starting at <see cref="P:Tools.IOt.OverflowStream.Start"/> this stream has access to. If more bytes is written to this stream, they are stored in overflow area and are inserted into <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> on <see cref="M:Tools.IOt.OverflowStream.Flush"/></returns>
 <remarks>Value of this property changes on <see cref="M:Tools.IOt.OverflowStream.Flush"/></remarks>
</member>
<member name="P:Tools.IOt.OverflowStream.OverflowStream">
 <summary>Gets stream bytes which does not fit into restricted area of <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> are written into</summary>
 <returns>Stream of bytes that does not fit into restricted area of <see cref="P:Tools.IOt.OverflowStream.BaseStream"/></returns>
 <remarks>Note for inheritors: Avoid writing to this stream when <see cref="P:Tools.IOt.OverflowStream.Underflow"/> is nonzero.</remarks>
</member>
<member name="P:Tools.IOt.OverflowStream.Underflow">
 <summary>In case the <see cref="M:Tools.IOt.OverflowStream.SetLength(System.Int64)"/> method of this instance was used and the lenght set was smaller than <see cref="P:Tools.IOt.OverflowStream.SharedLength"/> this property gets the difference bethween those two lengths (always positive value).</summary>
 <remarks>Number of bytes this stream is shorter than <see cref="P:Tools.IOt.OverflowStream.SharedLength"/> or zero if this stream is same zize or longer than <see cref="P:Tools.IOt.OverflowStream.SharedLength"/></remarks>
</member>
<member name="M:Tools.IOt.OverflowStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
 <summary>Creates new instace of the <see cref="P:Tools.IOt.OverflowStream.OverflowStream"/> class</summary>
 <param name="BaseStream">Stream to insert data to.</param>
 <param name="Start">The byte offset from start of <paramref name="BaseStream"/> to start of area new instance will have access to. (See <see cref="P:Tools.IOt.OverflowStream.Start"/>)</param>
 <param name="SharedLength">The lenght (in bytes) of area (starting at <paramref name="Start"/> new instance will have access to. (See <see cref="P:Tools.IOt.OverflowStream.SharedLength"/>)</param>
</member>
<member name="M:Tools.IOt.OverflowStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Int64)">
 <summary>Creates new instace of the <see cref="P:Tools.IOt.OverflowStream.OverflowStream"/> class</summary>
 <param name="BaseStream">Stream to insert data to.</param>
 <param name="Start">The byte offset from start of <paramref name="BaseStream"/> to start of area new instance will have access to. (See <see cref="P:Tools.IOt.OverflowStream.Start"/>)</param>
 <param name="SharedLength">The lenght (in bytes) of area (starting at <paramref name="Start"/> new instance will have access to. (See <see cref="P:Tools.IOt.OverflowStream.SharedLength"/>)</param>
 <param name="OverflowCapacity">The initial size of <see cref="P:Tools.IOt.OverflowStream.OverflowStream"/> in bytes</param>
</member>
<member name="P:Tools.IOt.OverflowStream.CanRead">
 <summary>Gets a value indicating whether the current stream supports reading.</summary>
 <returns>true</returns>
</member>
<member name="P:Tools.IOt.OverflowStream.CanSeek">
 <summary>Gets a value indicating whether the current stream supports seeking.</summary>
 <returns>true</returns>
</member>
<member name="P:Tools.IOt.OverflowStream.CanWrite">
 <summary>Gets a value indicating whether the current stream supports writing.</summary>
 <returns>true</returns>
</member>
<member name="P:Tools.IOt.OverflowStream.Length">
 <summary>Gets the length in bytes of the stream.</summary>
 <returns>A long value representing the length of the stream in bytes.</returns>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
</member>
<member name="M:Tools.IOt.OverflowStream.Seek(System.Int64,System.IO.SeekOrigin)">
 <summary>Sets the position within the current stream.</summary>
 <returns>The new position within the current stream.</returns>
 <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
 <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
</member>
<member name="M:Tools.IOt.OverflowStream.SetLength(System.Int64)">
 <summary>Sets the length of the current stream.</summary>
 <param name="value">The desired length of the current stream in bytes.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
</member>
<member name="P:Tools.IOt.OverflowStream.IsAtEnd">
 <summary>Gets value indicating if if this stream operates at the end of <see cref="P:Tools.IOt.OverflowStream.BaseStream"/>, so buffering to <see cref="P:Tools.IOt.OverflowStream.OverflowStream"/> can be ommitted.</summary>
 <returns>True when sum of <see cref="P:Tools.IOt.OverflowStream.Start"/> and <see cref="P:Tools.IOt.OverflowStream.SharedLength"/> is greater than of equal to lenght of <see cref="P:Tools.IOt.OverflowStream.BaseStream"/></returns>
</member>
<member name="P:Tools.IOt.OverflowStream.Position">
 <summary>Gets or sets the position within the current stream.</summary>
 <returns>The current position within the stream.</returns>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
</member>
<member name="M:Tools.IOt.OverflowStream.Flush">
 <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.                </summary>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
</member>
<member name="M:Tools.IOt.OverflowStream.Read(System.Byte[],System.Int32,System.Int32)">
 <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
 <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
 <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
 <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
 <param name="count">The maximum number of bytes to be read from the current stream.</param>
 <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
</member>
<member name="M:Tools.IOt.OverflowStream.Write(System.Byte[],System.Int32,System.Int32)">
 <summary>Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</summary>
 <param name="buffer">An array of bytes. This method copies <paramref name="count" /> bytes from <paramref name="buffer" /> to the current stream.</param>
 <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
 <param name="count">The number of bytes to be written to the current stream.</param>
 <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
</member>
<member name="M:Tools.IOt.OverflowStream.ReadByte">
 <summary>Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</summary>
 <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
</member>
<member name="M:Tools.IOt.OverflowStream.WriteByte(System.Byte)">
 <summary>Writes a byte to the current position in the stream and advances the position within the stream by one byte.</summary>
 <param name="value">The byte to write to the stream.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.IOt.OverflowStream.Close">
 <summary>Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</summary>
</member>
<member name="F:Tools.IOt.OverflowStream._CloseBaseStream">
 <summary>Contains value of the <paramref name="CloseBaseStream"/> property</summary>
</member>
<member name="P:Tools.IOt.OverflowStream.CloseBaseStream">
 <summary>Gets or sets value indicating when <see cref="P:Tools.IOt.OverflowStream.BaseStream">BaseStream</see>.<see cref="M:System.IO.Stream.Close">Close</see> is called when <see cref="M:Tools.IOt.OverflowStream.Close"/> is called.</summary>
 <remarks>True if base stream is closed when this stream is closed.</remarks>
</member>
<member name="M:Tools.IOt.OverflowStream.OnAfterFlush(Tools.IOt.OverflowStream.FlushEventArgs)">
 <summary>Raises the <see cref="E:Tools.IOt.OverflowStream.AfterFlush"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.IOt.OverflowStream.OnAfterClose(System.EventArgs)">
 <summary>Raises the <see cref="E:Tools.IOt.OverflowStream.AfterClose"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="E:Tools.IOt.OverflowStream.AfterFlush">
 <summary>Raised after the <see cref="M:Tools.IOt.OverflowStream.Flush"/> method is called</summary>
 <remarks>Use this event to detect changes of lenght of embdeded stream.
 <para>When stream is fkushed all data are written to <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> and original data of <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> positioned after resticted area of this stream is moved (left or right) depending on if <see cref="P:Tools.IOt.OverflowStream.SharedLength"/> is shinking or growing. <see cref="P:Tools.IOt.OverflowStream.SharedLength"/> is updated so it is same as <see cref="P:Tools.IOt.OverflowStream.Length"/>.</para>
 <para>When this stream is placed at the end of <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> this event is raised for each call of <see cref="M:Tools.IOt.OverflowStream.Write(System.Byte[],System.Int32,System.Int32)"/> which causes change of length of stream and for each call of <see cref="M:Tools.IOt.OverflowStream.SetLength(System.Int64)"/> because buffering is ommited.</para>
 <para>The <see cref="M:Tools.IOt.OverflowStream.Flush"/> method also calls the <see cref="M:System.IO.Stream.Flush"/> method of <see cref="P:Tools.IOt.OverflowStream.BaseStream"/>. This event is raised before it is called.</para></remarks>
</member>
<member name="E:Tools.IOt.OverflowStream.AfterClose">
 <summary>Raised after the <see cref="M:Tools.IOt.OverflowStream.Close"/> method is called</summary>
 <remarks>If <see cref="P:Tools.IOt.OverflowStream.CloseBaseStream"/> is true, this event is raised before <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> is closed.</remarks>
</member>
<member name="F:Tools.IOt.OverflowStream.FlushEventArgs._OldSharedLength">
 <summary>Contains value of the <see cref="P:Tools.IOt.OverflowStream.FlushEventArgs.OldSharedLenght"/> property</summary>
</member>
<member name="M:Tools.IOt.OverflowStream.FlushEventArgs.#ctor(System.Int64,System.Boolean)">
 <summary>CTor</summary>
 <param name="OldSharedLength"><see cref="P:Tools.IOt.OverflowStream.SharedLength"/> before fhush was performed.</param>
 <param name="ForWrite">Indicates if event is being raised by <see cref="M:Tools.IOt.OverflowStream.Write(System.Byte[],System.Int32,System.Int32)"/> or <see cref="M:Tools.IOt.OverflowStream.SetLength(System.Int64)"/> method (true) or <see cref="M:Tools.IOt.OverflowStream.Flush"/> method (false)</param>
</member>
<member name="F:Tools.IOt.OverflowStream.FlushEventArgs._ForWrite">
 <summary>Contains cvalue of the <see cref="P:Tools.IOt.OverflowStream.FlushEventArgs.ForWrite"/> property</summary>
</member>
<member name="P:Tools.IOt.OverflowStream.FlushEventArgs.ForWrite">
 <summary>Gest value idicating if event was raised for <see cref="M:Tools.IOt.OverflowStream.Write(System.Byte[],System.Int32,System.Int32)"/> or <see cref="M:Tools.IOt.OverflowStream.SetLength(System.Int64)"/> method or for <see cref="M:Tools.IOt.OverflowStream.Flush"/></summary>
 <returns>True if event was raised for <see cref="M:Tools.IOt.OverflowStream.Write(System.Byte[],System.Int32,System.Int32)"/> or <see cref="M:Tools.IOt.OverflowStream.SetLength(System.Int64)"/> method. False if event was raised for <see cref="M:Tools.IOt.OverflowStream.Flush"/></returns>
 <remarks>The <see cref="T:Tools.IOt.OverflowStream"/> class raises the <see cref="E:Tools.IOt.OverflowStream.AfterFlush"/> event with this property set to true whenever <see cref="M:Tools.IOt.OverflowStream.Write(System.Byte[],System.Int32,System.Int32)"/> which causes change of length of stream or <see cref="M:Tools.IOt.OverflowStream.SetLength(System.Int64)"/> is called while buffering mechanism is ommited because of <see cref="T:Tools.IOt.OverflowStream"/> resides at the end of <see cref="P:Tools.IOt.OverflowStream.BaseStream"/> </remarks>
</member>
<member name="P:Tools.IOt.OverflowStream.FlushEventArgs.OldSharedLenght">
 <summary>Value of the <see cref="P:Tools.IOt.OverflowStream.SharedLength"/> property before call of the <see cref="M:Tools.IOt.OverflowStream.Flush"/> method</summary>
 <returns>Gets old value of the <see cref="P:Tools.IOt.OverflowStream.SharedLength"/> property before the action thät caused the event to be raised was taken.</returns>
</member>
<member name="T:Tools.IOt.SyncFSWatcher">
 <summary><see cref="T:System.IO.FileSystemWatcher"/> with synchronous events added</summary>
 <seelaso cref="T:System.IO.FileSystemWatcher"/>
</member>
<member name="F:Tools.IOt.SyncFSWatcher.asyncOp">
 <summary>And assynchronous operation for callback from <see cref="T:System.IO.FileSystemWatcher"/></summary>
</member>
<member name="F:Tools.IOt.SyncFSWatcher.dDeleted">
 <summary>Delegate of the <see cref="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)"/> method for event callback</summary>
</member>
<member name="F:Tools.IOt.SyncFSWatcher.dChanged">
 <summary>Delegate of the <see cref="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)"/> method for event callback</summary>
</member>
<member name="F:Tools.IOt.SyncFSWatcher.dRenamed">
 <summary>Delegate of the <see cref="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)"/> method for event callback</summary>
</member>
<member name="F:Tools.IOt.SyncFSWatcher.dCreated">
 <summary>Delegate of the <see cref="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)"/> method for event callback</summary>
</member>
<member name="E:Tools.IOt.SyncFSWatcher.CreatedSync">
 <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is created</summary>
</member>
<member name="E:Tools.IOt.SyncFSWatcher.DeletedSync">
 <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is deleted.</summary>
</member>
<member name="E:Tools.IOt.SyncFSWatcher.RenamedSync">
 <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is renamed.</summary>
</member>
<member name="E:Tools.IOt.SyncFSWatcher.ChangedSync">
 <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> is changed</summary>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.#ctor">
 <summary>Initializes a new instance of the SyncFSWatcher class.</summary>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.#ctor(System.String)">
 <summary>Initializes a new instance of the SyncFSWatcher class, given the specified directory to monitor.</summary>
 <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.#ctor(System.String,System.String)">
 <summary>Initializes a new instance of the SyncFSWatcher class, given the specified directory and type of files to monitor.</summary>
 <param name="filter">The type of files to watch. For example, "*.txt" watches for changes to all text files.</param>
 <param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.fswFile_Created(System.Object,System.IO.FileSystemEventArgs)">
 <remarks>Occurs in another thread, callback needed</remarks>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.fswFile_Deleted(System.Object,System.IO.FileSystemEventArgs)">
 <remarks>Occurs in another thread, callback needed</remarks>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.fswFile_Changed(System.Object,System.IO.FileSystemEventArgs)">
 <remarks>Occurs in another thread, callback needed</remarks>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.fswFile_Renamed(System.Object,System.IO.RenamedEventArgs)">
 <remarks>Occurs in another thread, callback needed</remarks>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.OnDeletedAsync(System.IO.FileSystemEventArgs)">
 <summary>Asynchronous method calls synchronous method method <see cref="M:Tools.IOt.SyncFSWatcher.OnDeletedSync(System.IO.FileSystemEventArgs)"/></summary>
 <param name="e">A <see cref="T:System.IO.FileSystemEventArgs"/> that contains the event data.</param>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.OnRenamedAsync(System.IO.RenamedEventArgs)">
 <summary>Asynchronous method calls synchronous method method <see cref="M:Tools.IOt.SyncFSWatcher.OnRenamedSync(System.IO.RenamedEventArgs)"/></summary>
 <param name="e">A <see cref="T:System.IO.RenamedEventArgs"/> that contains the event data.</param>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.OnCreatedAsync(System.IO.FileSystemEventArgs)">
 <summary>Asynchronous method calls synchronous method method <see cref="M:Tools.IOt.SyncFSWatcher.OnCreatedSync(System.IO.FileSystemEventArgs)"/></summary>
 <param name="e">A <see cref="T:System.IO.FileSystemEventArgs"/> that contains the event data.</param>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.OnChangedAsync(System.IO.FileSystemEventArgs)">
 <summary>Asynchronous method calls synchronous method method <see cref="M:Tools.IOt.SyncFSWatcher.OnChangedSync(System.IO.FileSystemEventArgs)"/></summary>
 <param name="e">A <see cref="T:System.IO.FileSystemEventArgs"/> that contains the event data.</param>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.OnDeletedSync(System.IO.FileSystemEventArgs)">
 <summary>Raises the <see cref="E:Tools.IOt.SyncFSWatcher.DeletedSync"/> event</summary>
 <param name="e">A <see cref="T:System.IO.FileSystemEventArgs"/> that contains the event data.</param>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.OnRenamedSync(System.IO.RenamedEventArgs)">
 <summary>Raises the <see cref="E:Tools.IOt.SyncFSWatcher.RenamedSync"/> event</summary>
 <param name="e">A <see cref="T:System.IO.RenamedEventArgs"/> that contains the event data.</param>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.OnChangedSync(System.IO.FileSystemEventArgs)">
 <summary>Raises the <see cref="E:Tools.IOt.SyncFSWatcher.ChangedSync"/> event</summary>
 <param name="e">A <see cref="T:System.IO.FileSystemEventArgs"/> that contains the event data.</param>
</member>
<member name="M:Tools.IOt.SyncFSWatcher.OnCreatedSync(System.IO.FileSystemEventArgs)">
 <summary>Raises the <see cref="E:Tools.IOt.SyncFSWatcher.CreatedSync"/> event</summary>
 <param name="e">A <see cref="T:System.IO.FileSystemEventArgs"/> that contains the event data.</param>
</member>
<member name="T:Tools.IOt.UnionReadOnlyStream">
 <summary>Implements read-only stream which reads across multiple other streams</summary>
</member>
<member name="M:Tools.IOt.UnionReadOnlyStream.#ctor(System.IO.Stream[])">
 <summary>CTor from array of streams</summary>
 <param name="Streams">Array of streams to read across. If any of streams does not support seeking all streems must be positioned at position when reading should start. If all streams supports seeking, they can be positioned anywhere and will be seeked to start.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Streams"/> is null</exception>
 <exception cref="T:System.ArgumentException">Any of streams does not support reading</exception>
</member>
<member name="F:Tools.IOt.UnionReadOnlyStream.Streams">
 <summary>Streams to read across</summary>
</member>
<member name="M:Tools.IOt.UnionReadOnlyStream.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
 <summary>CTor from array of streams</summary>
 <param name="Streams">Array of streams to read across. If any of streams does not support seeking all streems must be positioned at position when reading should start. If all streams supports seeking, they can be positioned anywhere and will be seeked to start.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Streams"/> is null</exception>
 <exception cref="T:System.ArgumentException">Any of streams does not support reading</exception>
</member>
<member name="F:Tools.IOt.UnionReadOnlyStream._CanSeek">
 <summary>Contains value of the <see cref="P:Tools.IOt.UnionReadOnlyStream.CanSeek"/> property</summary>
</member>
<member name="F:Tools.IOt.UnionReadOnlyStream.CurrentStream">
 <summary>Index of current stream in <see cref="F:Tools.IOt.UnionReadOnlyStream.Streams"/></summary>
</member>
<member name="F:Tools.IOt.UnionReadOnlyStream.CurrentPosition">
 <summary>Current position (number of bytes read from start of first stream)</summary>
</member>
<member name="P:Tools.IOt.UnionReadOnlyStream.CanRead">
 <summary>Gets a value indicating whether the current stream supports reading.</summary>
 <returns>Always true</returns>
</member>
<member name="P:Tools.IOt.UnionReadOnlyStream.CanSeek">
 <summary>Gets a value indicating whether the current stream supports seeking.</summary>
 <returns>True if all underlying streams support seeking</returns>
</member>
<member name="P:Tools.IOt.UnionReadOnlyStream.CanWrite">
 <summary>Gets a value indicating whether the current stream supports writing.</summary>
 <returns>Always false</returns>
</member>
<member name="M:Tools.IOt.UnionReadOnlyStream.Flush">
 <summary>Does nothing</summary>
</member>
<member name="P:Tools.IOt.UnionReadOnlyStream.Length">
 <summary>Gets the length in bytes of the stream.</summary>
 <returns>A long value representing the length of the stream in bytes.</returns>
 <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
</member>
<member name="M:Tools.IOt.UnionReadOnlyStream.SetLength(System.Int64)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="value">Ignored</param>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="M:Tools.IOt.UnionReadOnlyStream.Write(System.Byte[],System.Int32,System.Int32)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="buffer">Ignored</param>
 <param name="offset">Ignored </param>
 <param name="count">Ignored</param>
 <exception cref="T:System.NotSupportedException">Always</exception>
</member>
<member name="P:Tools.IOt.UnionReadOnlyStream.Position">
 <summary>Gets or sets the position within the current stream.</summary>
 <returns>The current position within the stream.</returns>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.NotSupportedException">The stream does not support seeking.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.IOt.UnionReadOnlyStream.Read(System.Byte[],System.Int32,System.Int32)">
 <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
 <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
 <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
 <param name="offset">The zero-based byte offset in 
 <paramref name="buffer" /> at which to begin storing the data read from the current stream.</param>
 <param name="count">The maximum number of bytes to be read from the current stream.</param>
 <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</exception>
 <exception cref="T:System.ArgumentNullException">
 <paramref name="buffer" /> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> or <paramref name="count" /> is negative.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.NotSupportedException">The stream does not support reading.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.IOt.UnionReadOnlyStream.Seek(System.Int64,System.IO.SeekOrigin)">
 <summary>Sets the position within the current stream.</summary>
 <returns>The new position within the current stream.</returns>
 <param name="offset">A byte offset relative to the <paramref name="origin" /> parameter.</param>
 <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</param>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
 <version version="1.5.3">Fix: ALways returns zero.</version>
 <filterpriority>1</filterpriority>
</member>
<member name="T:Tools.IOt.BinaryReader">
 <summary>Extends <see cref="T:System.IO.BinaryReader"/> to be able to read numeric data in both little-endian and big-endian format</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="T:Tools.IOt.BinaryReader.ByteAlign">
 <summary>Possible byte orders</summary>
</member>
<member name="F:Tools.IOt.BinaryReader.ByteAlign.LittleEndian">
 <summary>LittleEndian (Intel)</summary>
 <remarks>Stores 0A0B0C0D as 0D0C0B0A</remarks>
</member>
<member name="F:Tools.IOt.BinaryReader.ByteAlign.BigEndian">
 <summary>BigEndian (Motorola)</summary>
 <remarks>Stores 0A0B0C0D as 0A0B0C0D</remarks>
</member>
<member name="F:Tools.IOt.BinaryReader._ByteOrder">
 <summary>Contains value of the <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> property</summary>
</member>
<member name="P:Tools.IOt.BinaryReader.ByteOrder">
 <summary>Format in which numeric data are read</summary>
 <remarks>Only integral numbers are affected by this property
 <list><listheader>List of affected functions</listheader>
 <item><see cref="M:Tools.IOt.BinaryReader.ReadInt16"/></item>
 <item><see cref="M:Tools.IOt.BinaryReader.ReadInt32"/></item>
 <item><see cref="M:Tools.IOt.BinaryReader.ReadInt64"/></item>
 <item><see cref="M:Tools.IOt.BinaryReader.ReadUInt16"/></item>
 <item><see cref="M:Tools.IOt.BinaryReader.ReadUInt32"/></item>
 <item><see cref="M:Tools.IOt.BinaryReader.ReadUInt64"/></item>
 </list>
 </remarks>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Value being set is not member of <see cref="T:Tools.IOt.BinaryReader.ByteAlign"/></exception>
</member>
<member name="M:Tools.IOt.BinaryReader.#ctor(System.IO.Stream,Tools.IOt.BinaryReader.ByteAlign)">
 <summary>Initializes a new instance of the <see cref="T:Tools.IOt.BinaryReader"/> class based on the supplied stream and using <see cref="T:System.Text.UTF8Encoding"/>.</summary>
 <param name="input">A stream.</param>
 <param name="Align">Format in which numeric data are read</param>
 <exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Align"/> is not member of <see cref="T:Tools.IOt.BinaryReader.ByteAlign"/></exception>
</member>
<member name="M:Tools.IOt.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,Tools.IOt.BinaryReader.ByteAlign)">
 <summary>Initializes a new instance of the <see cref="T:Tools.IOt.BinaryReader"/> class based on the supplied stream and a specific character encoding.</summary>
 <param name="encoding">The character encoding.</param>
 <param name="input">The supplied stream.</param>
 <param name="Align">Format in which numeric data are read</param>
 <exception cref="T:System.ArgumentNullException">encoding is null.</exception>
 <exception cref="T:System.ArgumentException">The stream does not support reading, the stream is null, or the stream is already closed.</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Align"/> is not member of <see cref="T:Tools.IOt.BinaryReader.ByteAlign"/></exception>
</member>
<member name="M:Tools.IOt.BinaryReader.ReadInt16">
 <summary>Reads a 2-byte signed integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the current position of the stream by two bytes.</summary>
 <returns>A 2-byte signed integer read from the current stream.</returns>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member>
<member name="M:Tools.IOt.BinaryReader.ReadInt32">
 <summary>Reads a 4-byte signed integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the current position of the stream by four bytes.</summary>
 <returns>A 4-byte signed integer read from the current stream.</returns>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member>
<member name="M:Tools.IOt.BinaryReader.ReadInt64">
 <summary>Reads an 8-byte signed integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the current position of the stream by eight bytes.</summary>
 <returns>An 8-byte signed integer read from the current stream.</returns>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member>
<member name="M:Tools.IOt.BinaryReader.ReadUInt16">
 <summary>Reads a 2-byte unsigned integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the position of the stream by two bytes.</summary>
 <returns>A 2-byte unsigned integer read from this stream.</returns>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member>
<member name="M:Tools.IOt.BinaryReader.ReadUInt32">
 <summary>Reads a 4-byte unsigned integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the position of the stream by four bytes.</summary>
 <returns>A 4-byte unsigned integer read from this stream.</returns>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member>
<member name="M:Tools.IOt.BinaryReader.ReadUInt64">
 <summary>Reads an 8-byte unsigned integer from the current stream using specified endian encoding accorifng to <see cref="P:Tools.IOt.BinaryReader.ByteOrder"/> and advances the position of the stream by eight bytes.</summary>
 <returns>An 8-byte unsigned integer read from this stream.</returns>
 <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.IO.EndOfStreamException">The end of the stream is reached.</exception>
</member>
<member name="T:Tools.IOt.ConstrainedReadOnlyStream">
 <summary>Implements stream that reads only part of base stream</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.IOt.ConstrainedReadOnlyStream.Stream">
 <summary><see cref="T:System.IO.Stream"/> being constrained</summary>
</member>
<member name="F:Tools.IOt.ConstrainedReadOnlyStream.StartPosition">
 <summary>Minimum position for seek (0-based)</summary>
</member>
<member name="F:Tools.IOt.ConstrainedReadOnlyStream.ConstrainedLenght">
 <summary>Number of bytes allowed to read starting at <see cref="F:Tools.IOt.ConstrainedReadOnlyStream.StartPosition"/></summary>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
 <summary>CTor</summary>
 <param name="BaseStream">Stream to be constrained</param>
 <param name="StartPosition">Minimum position for seek (0-based)</param>
 <param name="Lenght">Number of bytes allowed to read starting at <paramref name="StartPosition"/></param>
 <exception cref="T:System.NotSupportedException"><paramref name="Stream"/> doesn't support read or seek (the <see cref="P:System.IO.Stream.CanRead"/> or <see cref="P:System.IO.Stream.CanSeek"/> returns false)</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="Lenght"/> is less than zero -or-
 Position of end of constraint is after end of <paramref name="BaseStream"/> and <paramref name="Lenght"/> is greater than zero
 </exception>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.CanRead">
 <summary>Gets a value indicating whether the current stream supports reading.</summary>
 <returns>Always true</returns>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.CanSeek">
 <summary>Gets a value indicating whether the current stream supports seeking.</summary>
 <returns>Always true</returns>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.CanWrite">
 <summary>Gets a value indicating whether the current stream supports writing.</summary>
 <returns>Always false</returns>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.Flush">
 <summary>This is readonly stream, does nothing</summary>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.Length">
 <summary>Gets the length in bytes of the constrained stream</summary>
 <returns>A long value representing the length of the sconstrained tream in bytes.</returns>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the base stream was closed.</exception>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream">
 <summary>Stream being constrained</summary>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart">
 <summary>Offset of start of <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> where constrainment starts</summary>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.Position">
 <summary>Gets or sets the position within the current stream.</summary>
 <value>Sets postion in base stream to new position assigned plus <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart"/>. When new value exceeds constrainment limits then it is set too edge values. Position can be set 1 byte after end of stream to determine EOF</value>
 <returns>The current position within the stream. Returns 0 if position of <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> if before <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart"/>, returns <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Length"/> if position of <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is after end of constraint</returns>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed</exception>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.Read(System.Byte[],System.Int32,System.Int32)">
 <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
 <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
 <param name="count">The maximum number of bytes to be read from the current stream.</param>
 <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
 <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
 <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
 <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative.</exception>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.Seek(System.Int64,System.IO.SeekOrigin)">
 <summary>Sets the position within the current stream.</summary>
 <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
 <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
 <returns>The new position within the current stream.</returns>
 <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
 <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed.</exception>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.SetLength(System.Int64)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="value">Ignored</param>
 <exception cref="T:System.NotSupportedException">Always: The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</exception>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.Write(System.Byte[],System.Int32,System.Int32)">
 <summary>Throws <see cref="T:System.NotSupportedException"/></summary>
 <param name="offset">Ignored</param>
 <param name="count">Ignored</param>
 <param name="buffer">Ignored</param>
 <exception cref="T:System.NotSupportedException">Always: The stream does not support writing.</exception>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.GetEnumerator">
 <summary>Returns an enumerator that iterates through the collection.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.GetEnumerator1">
 <summary>Returns an enumerator that iterates through a collection.</summary>
 <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.Item(System.Int64)">
 <summary>Gets value on specified index</summary>
 <param name="index">Index to obtain value</param>
 <returns>value lying on specified <paramref name="index"/></returns>
 <exception cref="T:System.ArgumentException">Specified <paramref name="index"/> is invalid</exception>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.Maximum">
 <summary>Maximal valid value for index</summary>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.Minimum">
 <summary>Minimal valid value for index</summary>
</member>
<member name="P:Tools.IOt.ConstrainedReadOnlyStream.TruePosition">
 <summary>Returns <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> translated into <see cref="P:System.IO.Stream.Position"/> in <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> or into <see cref="P:System.IO.Stream.Position"/> in its <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/></summary>
 <returns>
 <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> in this <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> + <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart"/> if <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is not <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/>.
 If <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> returns <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> in <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/>'s <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> recursively.
 </returns>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.TranslatePosition(System.Int64)">
 <summary>Returns <paramref name="Position"/> translated into <see cref="P:System.IO.Stream.Position"/> in <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> or into <see cref="P:System.IO.Stream.Position"/> in its <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/></summary>
 <returns>
 <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> in this <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> + <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.ConstraintStart"/> if <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is not <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/>.
 If <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> is <see cref="T:Tools.IOt.ConstrainedReadOnlyStream"/> returns <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.Position"/> in <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/>'s <see cref="P:Tools.IOt.ConstrainedReadOnlyStream.BaseStream"/> recursively.
 </returns>
</member>
<member name="M:Tools.IOt.ConstrainedReadOnlyStream.ToString">
 <summary>String representation</summary>
</member>
<member name="T:Tools.IOt.FileSystemEnumerator">
 <summary>Enumerates through files and folders within specified folder</summary>
</member>
<member name="F:Tools.IOt.FileSystemEnumerator.Root">
 <summary>Folder to start enumeration with. Used to initialize the enumerator.</summary>
</member>
<member name="F:Tools.IOt.FileSystemEnumerator.Levels">
 <summary>Levels of recursive enumeration in file system</summary>
</member>
<member name="F:Tools.IOt.FileSystemEnumerator._FoldersFirst">
 <summary>Contains value of the <see cref="P:Tools.IOt.FileSystemEnumerator.FoldersFirst"/> property</summary>
</member>
<member name="P:Tools.IOt.FileSystemEnumerator.FoldersFirst">
 <summary>Gets value idication if folders are listed before files</summary>
</member>
<member name="M:Tools.IOt.FileSystemEnumerator.#ctor(System.String,System.Boolean)">
 <summary>CTor</summary>
 <param name="Root">The folder to start enumeration with. This folder is not included in list. All files and folders in it are recursivelly included.</param>
 <param name="FoldersFirst">True to enlist folders and its content before files of each current folder</param>
</member>
<member name="P:Tools.IOt.FileSystemEnumerator.Current">
 <summary>Gets string that represents current file or folder enumerator points to.</summary>
 <returns>String that represents full path of file or folder enumerator points to</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member>
<member name="P:Tools.IOt.FileSystemEnumerator.CurrentPath">
 <summary>Gets <see cref="T:Tools.IOt.Path"/> that represents current file or folder enumerator points to.</summary>
 <returns><see cref="T:Tools.IOt.Path"/> that represents full path of file or folder enumerator points to</returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
</member>
<member name="P:Tools.IOt.FileSystemEnumerator.Current1">
 <summary>Same as <see cref="P:Tools.IOt.FileSystemEnumerator.Current"/>, but type unsafe</summary>
 <returns><see cref="P:Tools.IOt.FileSystemEnumerator.Current"/></returns>
 <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception>
 <remarks>Use type-safe <see cref="P:Tools.IOt.FileSystemEnumerator.Current"/> or <see cref="P:Tools.IOt.FileSystemEnumerator.CurrentPath"/> instead</remarks>
</member>
<member name="P:Tools.IOt.FileSystemEnumerator.CurrentLevel">
 <summary>Gets curent level of recursion (0-based)</summary>
 <returns>Current level of recursion. -1 if enumerator is either before first or after last item.</returns>
</member>
<member name="F:Tools.IOt.FileSystemEnumerator._Current">
 <summary>Stores current path as string. If null, enumeration has not been initialized yer or has already finished</summary>
</member>
<member name="M:Tools.IOt.FileSystemEnumerator.MoveNext">
 <summary>Advances the enumerator to the next file or folder.</summary>
 <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has alredy enumerated all the files and folders.</returns>
</member>
<member name="M:Tools.IOt.FileSystemEnumerator.Reset">
 <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
 <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
</member>
<member name="M:Tools.IOt.FileSystemEnumerator.GetEnumeratorForFolder(System.String)">
 <summary>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates files and folders in given directory in order depending on <see cref="P:Tools.IOt.FileSystemEnumerator.FoldersFirst"/>.</summary>
 <param name="Path">Directory to get files and folders for</param>
</member>
<member name="F:Tools.IOt.FileSystemEnumerator.disposedValue">
 <summary>To detect redundant calls</summary>
</member>
<member name="M:Tools.IOt.FileSystemEnumerator.Dispose(System.Boolean)">
 <summary>Implements <see cref="M:System.IDisposable.Dispose"/>'s logic</summary>
 <param name="disposing">Set to true by <see cref="M:Tools.IOt.FileSystemEnumerator.Dispose"/></param>
</member>
<member name="M:Tools.IOt.FileSystemEnumerator.Dispose">
 <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
 <remarks>Do not change this code.  Put cleanup code in Dispose(ByVal disposing As Boolean) above.</remarks>
</member>
<member name="T:Tools.IOt.FilteredFileSystemEnumerator">
 <summary>Implements enumerator through file system with generic call-back filter</summary>
</member>
<member name="F:Tools.IOt.FilteredFileSystemEnumerator._Filter">
 <summary>Contains value of the <see cref="P:Tools.IOt.FilteredFileSystemEnumerator.Filter"/> property</summary>
</member>
<member name="P:Tools.IOt.FilteredFileSystemEnumerator.Filter">
 <summary>Filter function called when item is about to be included in output.</summary>
 <exception cref="T:System.ArgumentNullException">Value being set is null</exception>
 <exception cref="T:System.InvalidOperationException">Trying to set this property when it is not null</exception>
 <remarks>This property can be only set when it is null</remarks>
</member>
<member name="T:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons">
 <summary>Defines reasons for calling filter function</summary>
</member>
<member name="F:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons.See">
 <summary>Reason is that base class is about to get known about the file or folder</summary>
 <remarks>
 If you want folder to be went through but do not want them to be enlisted, return true. Return False for all files that you want exclude from listing.
 Filter with this argument is called by <see cref="M:Tools.CollectionsT.GenericT.FilteredEnumerator`1.MoveNext"/> created as wrapper of result of <see cref="M:Tools.IOt.FileSystemEnumerator.GetEnumeratorForFolder(System.String)"/>. Items filtered by this call are skipped and it it is folder it is not entered and its content is skipped to.
 </remarks>
</member>
<member name="F:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons.Show">
 <summary>Reason is that base class is about to make the item current item (user called <see cref="M:Tools.IOt.FilteredFileSystemEnumerator.MoveNext"/>).</summary>
 <remarks>
 There is no reason to return false for files in this situation since all files should be filtered on <see cref="F:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons.See"/>.
 Return false for any folder you want to enlist content but not enlist folder itself.
 Filter with this argument is called by <see cref="M:Tools.IOt.FilteredFileSystemEnumerator.MoveNext"/> function and items that does not pass it are skipped in output. But folders are entered and their content is listed (it it pass the filter).
 </remarks>
</member>
<member name="M:Tools.IOt.FilteredFileSystemEnumerator.#ctor(System.String,System.Func{System.String,Tools.IOt.FilteredFileSystemEnumerator.FilterReasons,System.Boolean},System.Boolean)">
 <summary>CTor</summary>
 <param name="Root">Folder to start enumeration with. This folder's name is not included in list.</param>
 <param name="Filter">Filter function that is called for all files and folders when they are about to be included in output list. The function must return True for items that should be included.</param>
 <param name="FoldersFirst">True if folders should be enlisted recursively before files or current folder.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Filter"/> is null</exception>
</member>
<member name="M:Tools.IOt.FilteredFileSystemEnumerator.#ctor(System.String,System.Boolean)">
 <summary>CTor without filter</summary>
 <param name="Root">Folder to start enumeration with. This folder's name is not included in list.</param>
 <param name="FoldersFirst">True if folders should be enlisted recursively before files or current folder.</param>
 <remarks>When using this constructor, you must set the <see cref="P:Tools.IOt.FilteredFileSystemEnumerator.Filter"/> property as soon as possible</remarks>
</member>
<member name="M:Tools.IOt.FilteredFileSystemEnumerator.GetEnumeratorForFolder(System.String)">
 <summary>Returns <see cref="T:System.Collections.Generic.IEnumerator`1"/> that enumerates files and folders in given directory in order depending on <see cref="P:Tools.IOt.FileSystemEnumerator.FoldersFirst"/>. Files and folders that does not pass filer are excluded from enumerator (excluded folders are not entered).</summary>
 <param name="Path">Directory to get files and folders for</param>
</member>
<member name="M:Tools.IOt.FilteredFileSystemEnumerator.MoveNext">
 <summary>Advances the enumerator to the next file or folder. Files and folders that does not pass the filer as skipped, but folders are entered.</summary>
 <returns>True if the enumerator was successfully advanced to the next element; false if the enumerator has alredy enumerated all the files and folders.</returns>
</member>
<member name="T:Tools.IOt.FileSystemEnumeratorWithMask">
 <summary>Recursive enumerator of files and folder filtered by masks</summary>
 <remarks>Allows to list only files of all folders. Filter separatelly files, folders to be listed and folders to be browsed.</remarks>
</member>
<member name="F:Tools.IOt.FileSystemEnumeratorWithMask.Masks">
 <summary>List of masks</summary>
</member>
<member name="F:Tools.IOt.FileSystemEnumeratorWithMask._FoldersListMasks">
 <summary>Contains value of the <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersListMasks"/> property</summary>
</member>
<member name="F:Tools.IOt.FileSystemEnumeratorWithMask._FoldersEnterMasks">
 <summary>Cont value of the <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersEnterMasks"/> property</summary>
</member>
<member name="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersListMasks">
 <summary>Special masks for folders to list in output</summary>
 <remarks>Default value is an empty array. So, by default folders are not listed.</remarks>
 <value>Array of masks in format used by Visual Basic Like operator (wildchars ? and *)</value>
 <exception cref="T:System.ArgumentNullException">Value beign set is null</exception>
</member>
<member name="P:Tools.IOt.FileSystemEnumeratorWithMask.FilesMasks">
 <summary>Gets or sets array masks used for files</summary>
 <value>Array of masks used for files. Masks are in formet used by Visual Basic Like operator (wildchars * and ?)</value>
 <returns>Array of maks. Getter can change actual instance stored in masks. Avoid using getter unless it is necessary. Inheritors can use <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.MaskForFiles"/>.</returns>
 <exception cref="T:System.ArgumentNullException">Value beign set is null</exception>
</member>
<member name="P:Tools.IOt.FileSystemEnumeratorWithMask.MaskForFiles">
 <summary>Returns masks for files</summary>
 <returns>Use <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FilesMasks"/> in order to set this property</returns>
</member>
<member name="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersEnterMasks">
 <summary>Special masks for folders to list their content</summary>
 <value>Array of masks in format used by Visual Basic Like operator (wildchars ? and *)</value>
 <exception cref="T:System.ArgumentNullException">Value beign set is null</exception>
</member>
<member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
 <summary>CTor from root and masks as <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
 <param name="Masks">List of masks for files. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
 <param name="FoldersFirst"></param>
</member>
<member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.String[])">
 <summary>CTor from root and array of masks</summary>
 <param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
 <param name="Masks">Array of masks for files. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
</member>
<member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.String,System.Boolean)">
 <summary>CTor from root and one mask</summary>
 <param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
 <param name="Mask">Mask for files. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
 <param name="FoldersFirst"></param>
</member>
<member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.Boolean,System.String[])">
 <summary>CTor from root, boolean for defining order of listing of folders and array of masks</summary>
 <param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
 <param name="FoldersFirst"></param>
 <param name="Masks">Array of masks for files. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
</member>
<member name="M:Tools.IOt.FileSystemEnumeratorWithMask.#ctor(System.String,System.String,System.Char,System.Boolean)">
 <summary>CTor from root and masks in one string separated by separator</summary>
 <param name="Root">Folder to start enumeration with. The folder itself is not included, but its content is.</param>
 <param name="Masks">Masks for files separated by <paramref name="MaskSeperator"/>. Each mask is in format used by Visual Basic Like operator (wildchars * and ?).</param>
 <param name="MaskSeperator">Seperator for <see cref="T:System.String">splitting</see> <paramref name="Masks"/>.</param>
 <param name="FoldersFirst"></param>
</member>
<member name="M:Tools.IOt.FileSystemEnumeratorWithMask.Filter(System.String,Tools.IOt.FilteredFileSystemEnumerator.FilterReasons)">
 <summary>Returns if file or folder should be included in listing or if folder should be browser</summary>
 <param name="Path">File or folder</param>
 <param name="Reason">Type of filtering</param>
 <returns>True if <paramref name="Path"/> satisfies al least one mask from either <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersEnterMasks"/>, <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.FoldersListMasks"/> or <see cref="P:Tools.IOt.FileSystemEnumeratorWithMask.MaskForFiles"/> depending on <paramref name="Reason"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">This implementation throws <see cref="T:System.ComponentModel.InvalidEnumArgumentException"/> when <paramref name="Path"/> represents folder and <paramref name="Reason"/> is not one of <see cref="T:Tools.IOt.FilteredFileSystemEnumerator.FilterReasons"/> members.</exception>
</member>
<member name="T:Tools.IOt.Path">
 <summary>Wraps <see cref="T:System.String"/> into separet class representing path and allows operation with it</summary>
 <remarks>There are no check of validity of paths in current file system during operations, so you can operate with nonexisting paths (unless specified otherwise).</remarks>
 <seelaso cref="M:Tools.IOt.FileSystemTools.GetIcon(Tools.IOt.Path,System.Boolean,System.Boolean)"/>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.IOt.Path._Path">
 <summary>Contains value of the <see cref="P:Tools.IOt.Path.Path"/> property</summary>
</member>
<member name="M:Tools.IOt.Path.#ctor(System.String)">
 <summary>CTor from String</summary>
 <param name="Path">Addres in file system from which create the path</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Path"/> is null</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="Path"/> is an empty string or consists only of whitespace characters
 -or-
 <paramref name="Path"/> contains invalid character as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>
 </exception>
</member>
<member name="M:Tools.IOt.Path.#ctor(Tools.IOt.Path)">
 <summary>Copy CTor</summary>
 <param name="a">Instance which's copy to create</param>
</member>
<member name="P:Tools.IOt.Path.Path">
 <summary>String representaion of path</summary>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="value"/> is an empty string or consists only of whitespace characters
 -or-
 <paramref name="value"/> contains invalid character as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>
 </exception>
</member>
<member name="P:Tools.IOt.Path.IPathProvider_Path">
 <summary>String representaion of path</summary>
</member>
<member name="M:Tools.IOt.Path.ToString">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="P:Tools.IOt.Path.Path"/>.</summary>
 <returns>A <see cref="T:System.String"/> that represents the current <see cref="P:Tools.IOt.Path.Path"/></returns>
</member>
<member name="M:Tools.IOt.Path.op_Addition(Tools.IOt.Path,Tools.IOt.Path)">
 <summary>Conbines to paths - Left and right part</summary>
 <param name="Left">Left part of path</param>
 <param name="Right">Right part of path (should be relative to <paramref name="Left"/></param>
 <returns>Paths combined according to rules of current operating system</returns>
 <remarks>
 <para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
 <para>See also <seealso cref="M:System.IO.Path.Combine(System.String,System.String)"/></para>
 </remarks>
 <exception cref="T:System.ArgumentNullException">
     <see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Left"/> or of <paramref name="Right"/> is null</exception>
 <exception cref="T:System.ArgumentException">
     <see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Left"/> or of <paramref name="Right"/> contain one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
 <exception cref="T:System.NullReferenceException">
     <paramref name="Left"/> or <paramref name="Right"/> is null</exception>
</member>
<member name="M:Tools.IOt.Path.op_Addition(Tools.IOt.Path,System.String)">
 <summary>Conbines to paths - Left and right part</summary>
 <param name="Left">Left part of path</param>
 <param name="Right">Right part of path (should be relative to <paramref name="Left"/></param>
 <returns>Paths combined according to rules of current operating system</returns>
 <remarks>
 <para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
 <para>See also <seealso cref="M:System.IO.Path.Combine(System.String,System.String)"/></para>
 </remarks>
 <exception cref="T:System.ArgumentNullException">
     <see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Left"/> or <paramref name="Right"/> is null</exception>
 <exception cref="T:System.ArgumentException">
     <see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Left"/> or <paramref name="Right"/> contain one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
 <exception cref="T:System.NullReferenceException">
     <paramref name="Left"/> is null</exception>
</member>
<member name="M:Tools.IOt.Path.op_Addition(System.String,Tools.IOt.Path)">
 <summary>Conbines to paths - Left and right part</summary>
 <param name="Left">Left part of path</param>
 <param name="Right">Right part of path (should be relative to <paramref name="Left"/></param>
 <returns>Paths combined according to rules of current operating system</returns>
 <remarks>
 <para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
 <para>See also <seealso cref="M:System.IO.Path.Combine(System.String,System.String)"/></para>
 </remarks>
 <exception cref="T:System.ArgumentNullException">
     <paramref name="Left"/> or <see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Right"/> is null</exception>
 <exception cref="T:System.ArgumentException">
     <paramref name="Left"/> or <see cref="P:Tools.IOt.Path.Path"/> of <paramref name="Right"/> contain one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
 <exception cref="T:System.NullReferenceException">
     <paramref name="Right"/> is null</exception>
</member>
<member name="M:Tools.IOt.Path.op_Explicit(System.String)~Tools.IOt.Path">
 <summary>Converts <see cref="T:System.String"/> into <see cref="T:System.IO.Path"/></summary>
 <param name="a"><see cref="T:System.String"/> to be converted</param>
 <returns>A new instance of <see cref="P:Tools.IOt.Path.Path"/> initialized with <paramref name="a"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
 <exception cref="T:System.ArgumentException">
 <paramref name="a"/> is an empty string or consists only of whitespace characters
 -or-
 <paramref name="a"/> contains invalid character as defined in <see cref="M:System.IO.Path.GetInvalidPathChars"/>
 </exception>
</member>
<member name="M:Tools.IOt.Path.op_Implicit(Tools.IOt.Path)~System.String">
 <summary>Converts <see cref="T:System.IO.Path"/> into <see cref="T:System.String"/></summary>
 <param name="a"><see cref="T:System.IO.Path"/> to be converted</param>
 <returns>Value of <see cref="P:Tools.IOt.Path.Path"/> property of <paramref name="a"/></returns>
</member>
<member name="P:Tools.IOt.Path.DirectoryName">
 <summary>Directory information of <see cref="T:System.IO.Path"/></summary>
 <returns>A <see cref="T:System.String"/> containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns <see cref="F:System.String.Empty"/> if path does not contain directory information.</returns>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains invalid characters, is empty, or contains only white spaces, or contains a wildcard character.</exception>
 <exception cref="T:System.IO.PathTooLongException"><see cref="P:Tools.IOt.Path.Path"/> is longer than the system-defined maximum length</exception>
 <remarks>
 <para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
 <para>See also<seealso cref="M:System.IO.Path.GetDirectoryName(System.String)"/></para>
 </remarks>
</member>
<member name="P:Tools.IOt.Path.Extension">
 <summary>Returns the extension of the <see cref="T:System.IO.Path"/>.</summary>
 <returns>A <see cref="T:System.String"/> containing the extension of the specified path (including the "."), null, or <see cref="F:System.String.Empty"/>. If <see cref="P:Tools.IOt.Path.Path"/> is null, <see cref="P:Tools.IOt.Path.Extension"/> returns null. If <see cref="P:Tools.IOt.Path.Path"/> does not have extension information, <see cref="P:Tools.IOt.Path.Extension"/> returns <see cref="T:System.String"/>.</returns>
 <value>The new extension (with a leading period). Specify null to remove an existing extension from <see cref="T:System.IO.Path"/></value>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
 <remarks>
 <para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
 <para>See also <seealso cref="M:System.IO.Path.GetExtension(System.String)"/>, <seealso cref="M:System.IO.Path.ChangeExtension(System.String,System.String)"/></para>
 </remarks>
</member>
<member name="P:Tools.IOt.Path.FileName">
 <summary>Returns the file name and extension of the <see cref="T:System.IO.Path"/>.</summary>
 <returns>A <see cref="T:System.String"/> consisting of the characters after the last directory character in <see cref="P:Tools.IOt.Path.Path"/>. If the last character of <see cref="P:Tools.IOt.Path.Path"/> is a directory or volume separator character, this property returns <see cref="F:System.String.Empty"/>. If <see cref="P:Tools.IOt.Path.Path"/> is null, this method returns null.</returns>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
 <remarks>
 <para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
 <para>See also <seealso cref="M:System.IO.Path.GetFileName(System.String)"/></para>
 </remarks>
</member>
<member name="P:Tools.IOt.Path.FileNameWithoutExtension">
 <summary>Returns the file name of the <see cref="T:System.IO.Path"/> without the extension.</summary>
 <returns>A <see cref="T:System.String"/> containing the string returned by <see cref="P:Tools.IOt.Path.FileName"/>, minus the last period (.) and all characters following it.</returns>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.</exception>
 <remarks>
 <para><see cref="T:System.ArgumentException"/> caused by empty, null or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/></para>
 <para>See also <seealso cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)"/></para>
 </remarks>
</member>
<member name="M:Tools.IOt.Path.GetFullPath">
 <summary>Returns the absolute path for the <see cref="T:System.IO.Path"/>.</summary>
 <returns>A string containing the fully qualified location of <see cref="T:System.IO.Path"/>, such as <example>"C:\MyFile.txt"</example>.</returns>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
 <exception cref="T:System.ArgumentNullException"><see cref="P:Tools.IOt.Path.Path"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.-or- The system could not retrieve the absolute path.</exception>
 <exception cref="T:System.NotSupportedException"><see cref="P:Tools.IOt.Path.Path"/> contains a colon (":").</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters</exception>
 <remarks>
 <para>Looks at file system</para>
 <para><see cref="T:System.ArgumentException"/> caused by empty, or invalid <see cref="P:Tools.IOt.Path.Path"/> should occure only due to wildcart, because other cases are made impossible by setter of <see cref="P:Tools.IOt.Path.Path"/>, <see cref="T:System.ArgumentNullException"/> should not occure due to same reason.</para>
 <para>See also <seealso cref="M:System.IO.Path.GetFullPath(System.String)"/></para>
 </remarks>
</member>
<member name="P:Tools.IOt.Path.ContainsInvalidPathChar">
 <summary>Gets value indicating wheather <see cref="P:Tools.IOt.Path.Path"/> contains¨character not allowed in path as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/></summary>
 <returns>Should always retrun false because invalid path chars are vlocked by the <see cref="P:Tools.IOt.Path.Path"/> setter</returns>
 <exception cref="T:System.NullReferenceException"><see cref="P:Tools.IOt.Path.Path"/> is Null - Should not occure because null values fo <see cref="P:Tools.IOt.Path.Path"/> are invalid</exception>
</member>
<member name="P:Tools.IOt.Path.PathRoot">
 <summary>Gets the root directory information of the <see cref="T:System.IO.Path"/>.</summary>
 <returns>A string containing the root directory of <see cref="T:System.IO.Path"/>, such as "C:\", or null if path is null, or an empty string if path does not contain root directory information.</returns>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.-or- <see cref="F:System.String.Empty"/> was passed to path. <para>This exception should occure only due to wildcards because other invalid values or blocked by <see cref="P:Tools.IOt.Path.Path"/>'s setter.</para></exception>
 <remarks>See also <seealso cref="M:System.IO.Path.GetPathRoot(System.String)"/></remarks>
</member>
<member name="M:Tools.IOt.Path.Random">
 <summary>Returns random path</summary>
 <remarks>See also <seealso cref="M:System.IO.Path.GetRandomFileName"/></remarks>
</member>
<member name="M:Tools.IOt.Path.TempFile">
 <summary>Returns path of a uniquely named, zero-byte temporary file on disk</summary>
 <exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.- or -This method was unable to create a temporary file.</exception>
 <remarks>See also <seealso cref="M:System.IO.Path.GetTempFileName"/></remarks>
</member>
<member name="P:Tools.IOt.Path.HasExtension">
 <summary>Determines whether a path includes a file name extension.</summary>
 <returns>true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException">path contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.<para>This exception should occure only due to wildcards because another invalid characters are blocked by the <see cref="P:Tools.IOt.Path.Path"/> setter</para></exception>
 <remarks>See also <seealso cref="M:System.IO.Path.HasExtension(System.String)"/></remarks>
</member>
<member name="P:Tools.IOt.Path.IsRooted">
 <summary>Gets a value indicating whether the specified <see cref="T:System.IO.Path"/> contains absolute or relative path information.</summary>
 <returns>true if <see cref="T:System.IO.Path"/> contains an absolute path; otherwise, false.</returns>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains one or more of the invalid characters defined in <see cref="F:System.IO.Path.InvalidPathChars"/>, or contains a wildcard character.<para>This exception should occure only due to wildcards becouse another invalid characters are blocked by the <see cref="P:Tools.IOt.Path.Path"/> setter.</para></exception>
 <remarks>See also <seealso cref="M:System.IO.Path.IsPathRooted(System.String)"/></remarks>
</member>
<member name="T:Tools.IOt.Path.SystemPaths">
 <summary>Returns various system path as instance of <see cref="T:System.IO.Path"/></summary>
</member>
<member name="M:Tools.IOt.Path.SystemPaths.#ctor">
 <summary>Protected CTor</summary>
 <remarks>Protected in order not this class to be instantiable but in order to be deriveable</remarks>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Temp">
 <summary>Returns the path of the current users's temporary folder.</summary>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.AllUserAppDataCurrent">
 <summary>Gets path of directory specific for current application taht should be used to store shared data</summary>
 <remarks>This is application-specific directory</remarks>
 <exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.UserAppDataCurrent">
 <summary>Gets path of directory specific for current application taht should be used to store user specific data</summary>
 <remarks>This is application-specific directory</remarks>
 <exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Desktop">
 <summary>Gets path of Desktop of current user</summary>
 <exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Documments">
 <summary>Gets path of current user's Documents directory</summary>
 <exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Music">
 <summary>Gets path of My Music directory of current user</summary>
 <exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Pictures">
 <summary>Gets path of MyMy Pictures directory of current user</summary>
 <exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.ProgramFiles">
 <summary>Gets path of the Program Files directory</summary>
 <exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Programs">
 <summary>Gets path of Programs directory (In the Start menu) of current user</summary>
 <exception cref="T:System.IO.DirectoryNotFoundException">Path is empty usually because the operation systems doesn't support the directory</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.OS">
 <summary>Gets path of operating system directory (typically C:\Windows)</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.System">
 <summary>Gets path of system directory (typically C:\Windows\System32)</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Cookies">
 <summary>Gets path of user directory for Cookies</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.DesktopLogical">
 <summary>Gets path of logical desktop (possibly same as <see cref="P:Tools.IOt.Path.SystemPaths.Desktop"/>)</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Favorites">
 <summary>Gets path of user directory for Favorites</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.History">
 <summary>Gets path of user directory for History</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.InternetCache">
 <summary>Gets path of user directory for Internet cache</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.ApplicationData">
 <summary>Gets path of the directory that serves as a common repository for application-specific data that is used by the current, non-roaming user.</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.AllUsersApplicationData">
 <summary>The directory that serves as a common repository for application-specific data that is used by all users.</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.MyComputer">
 <summary>Path of the My Computer</summary>
 <exception cref="T:System.ArgumentException"> When path is invalid, eg. empty which is common for Windows systems</exception>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Recent">
 <summary>Gets path of recent files directory</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.SendTo">
 <summary>Gets path of sent to directory</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Start">
 <summary>Gets path of Start menu directory</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Startup">
 <summary>Gets path of startup directory</summary>
</member>
<member name="P:Tools.IOt.Path.SystemPaths.Templates">
 <summary>Gets path of templates directory</summary>
</member>
<member name="M:Tools.IOt.Path.Normalize(System.Boolean)">
 <summary>Normalizes path to use only one type of directory separators</summary>
 <param name="ToAlternative">If set to true the alternative directory separator (/ on Windows) is used instead of primary (\ on Windows)</param>
 <remarks>See also <seealso cref="F:System.IO.Path.DirectorySeparatorChar"/>, <seealso cref="F:System.IO.Path.AltDirectorySeparatorChar"/></remarks>
</member>
<member name="P:Tools.IOt.Path.Segments">
 <summary>Gets segmnents (directories) of path</summary>
 <returns>Normalized (see <see cref="M:Tools.IOt.Path.Normalize(System.Boolean)"/>) paht's <see cref="P:Tools.IOt.Path.Path"/> splitted by <see cref="F:System.IO.Path.DirectorySeparatorChar"/></returns>
 <remarks>In order to be able co re-construct path in <see cref="M:Tools.IOt.Path.Join(System.Collections.Generic.IEnumerable{System.String})"/> function the paths is splitted by all occurences of the <see cref="F:System.IO.Path.DirectorySeparatorChar"/>. This means that path like \\Dzonny\C\ hase 5 elements ("","","Dzonny","C","")</remarks>
</member>
<member name="M:Tools.IOt.Path.Up(System.Int32)">
 <summary>Removes <paramref name="Levels"/> parts from end of path</summary>
 <param name="Levels">Number of levels to be removed</param>
 <remarks>Note that if path ends with <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> (Like C:/Temp/) then result is only removal of this char (C:\Temp)</remarks>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Levels"/> is less then zero -or- <paramref name="Levels"/> is greater or equal to number of segments in current path</exception>
</member>
<member name="M:Tools.IOt.Path.op_Subtraction(Tools.IOt.Path,System.Int32)">
 <summary>Removes <paramref name="Levels"/> parts from end of <paramref name="Path"/></summary>
 <param name="Levels">Number of levels to be removed</param>
 <param name="Path">The <see cref="T:System.IO.Path"/> to remove levels from</param>
 <returns>New instance of <see cref="T:System.IO.Path"/> with segments removed</returns>
 <remarks>Note that if path ends with <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> (Like C:/Temp/) then result is only removal of this char (C:\Temp)</remarks>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Levels"/> is less then zero -or- <paramref name="Levels"/> is greater or equal to number of segments in current path</exception>
</member>
<member name="P:Tools.IOt.Path.Depth">
 <summary>Number of segments of current path</summary>
 <remarks>Note that number of segments is such path on Windows \\Dzonny\C\ if 5. See <see cref="P:Tools.IOt.Path.Segments"/></remarks>
</member>
<member name="M:Tools.IOt.Path.Join(System.Collections.Generic.IEnumerable{System.String})">
 <summary>Creates path from its segments</summary>
 <param name="Segments">Parts to maked path of</param>
 <exception cref="T:System.ArgumentNullException">Segments is null</exception>
</member>
<member name="M:Tools.IOt.Path.CreateDirectory">
 <summary>Creates all directories and subdirectories as specified by <see cref="T:System.IO.Path"/>.</summary>
 <returns>A <see cref="T:System.IO.DirectoryInfo"/> as specified by <see cref="T:System.IO.Path"/>.</returns>
 <exception cref="T:System.ArgumentNullException"><see cref="P:Tools.IOt.Path.Path"/> is null. Shouldn't occure.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.IO.IOException">The directory specified by path is read-only or is not empty.-or-A file with the same name and location specified by <see cref="T:System.IO.Path"/> exists.</exception>
 <exception cref="T:System.NotSupportedException">An attempt was made to create a directory with only the colon character (:).</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>. Should not occure.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.op_GreaterThan(Tools.IOt.Path,Tools.IOt.Path)">
 <summary>Gets value indicating if <paramref name="Child"/> is child address of <paramref name="Parent"/></summary>
 <param name="Parent">Possibly parent address</param>
 <param name="Child">Possibly child address</param>
 <returns>True if <paramref name="Child"/> is subdirecrory of <paramref name="Parent"/> or file lying there</returns>
 <remarks>This operator works with no touch to file system - only string comparison is done</remarks>
</member>
<member name="M:Tools.IOt.Path.op_LessThan(Tools.IOt.Path,Tools.IOt.Path)">
 <summary>Gets value indicating if <paramref name="Child"/> is child address of <paramref name="Parent"/></summary>
 <param name="Parent">Possibly parent address</param>
 <param name="Child">Possibly child address</param>
 <returns>True if <paramref name="Child"/> is subdirecrory of <paramref name="Parent"/> or file lying there</returns>
 <remarks>This operator works with no touch to file system - only string comparison is done</remarks>
</member>
<member name="M:Tools.IOt.Path.op_Equality(Tools.IOt.Path,Tools.IOt.Path)">
 <summary>Compares two <see cref="P:Tools.IOt.Path.Path"/>s for equivalence</summary>
 <param name="a">First path to be combared</param>
 <param name="b">Second path to be compared</param>
 <returns>True if both paths are equivalent</returns>
 <remarks>Only string comparison is done</remarks>
</member>
<member name="M:Tools.IOt.Path.op_Inequality(Tools.IOt.Path,Tools.IOt.Path)">
 <summary>Compares two <see cref="P:Tools.IOt.Path.Path"/>s for inequivalence</summary>
 <param name="a">First path to be combared</param>
 <param name="b">Second path to be compared</param>
 <returns>True if path aren't equivalent</returns>
 <remarks>Only string comparison is done</remarks>
</member>
<member name="M:Tools.IOt.Path.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.IO.Path"/>.</summary>
 <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.IO.Path"/>.</param>
 <returns>True if <paramref name="obj"/> represents <see cref="P:Tools.IOt.Path.Path"/> or <see cref="T:System.String"/> equivalent to current instance or </returns>
</member>
<member name="M:Tools.IOt.Path.IsChildOf(Tools.IOt.Path)">
 <summary>Indicates wheather current instance is sub-path of passed instance</summary>
 <param name="Parent">Possible parent of current instace</param>
 <returns>True if <paramref name="Parent"/> is parent of current instance</returns>
</member>
<member name="M:Tools.IOt.Path.IsParentOf(Tools.IOt.Path)">
 <summary>Indicates wheather current instance is parent of passed instance</summary>
 <param name="Child">Posiible child of current instance</param>
 <returns>True if <paramref name="Child"/> is sub-path of current instace</returns>
 <version version="1.5.4">Renamed form <c>IsparentOf</c> to <c>IsParentOf</c></version>
</member>
<member name="P:Tools.IOt.Path.IsDirectory">
 <summary>Checks wheather path represented by current instance exists and is directory</summary>
</member>
<member name="P:Tools.IOt.Path.IsVolume">
 <summary>Gets value indicatiing if path represents volume</summary>
 <returns>True when this path consists only of root part and it is not UNC path.</returns>
 <remarks>Volume is considered to be top-level directory like C:\ on Windows or /vol on Linux. UNC paths are not volumes.</remarks>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="P:Tools.IOt.Path.IsUNC">
 <summary>Windows-specific: Gets value indicating if this path is an UNC path</summary>
 <returns>True if path starts with doubled <see cref="F:System.IO.Path.DirectorySeparatorChar"/> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/></returns>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="P:Tools.IOt.Path.IsUNCServer">
 <summary>Windows-specific: Gets value indicating if current path represents path to UNC server</summary>
 <returns>True when path <see cref="P:Tools.IOt.Path.IsUNC">is UNC path</see> and it has only one segment; false otherwise</returns>
 <version version="1.5.2">Property introduced</version>
</member>
<member name="M:Tools.IOt.Path.GetDirectory">
 <summary>Gets directory represented by current instance (if exists)</summary>
 <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> contains invalid characters such as ", &lt;, >, or |. This exception should not occure because invalid characters are filtered by the <see cref="P:Tools.IOt.Path.Path"/> setter</exception>
 <exception cref="T:System.ArgumentNullException"><seealso cref="P:Tools.IOt.Path.Path"/> is null. Should not occure.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission</exception>
</member>
<member name="P:Tools.IOt.Path.IsFile">
 <summary>Check wheather path represented by current instace exists and is file</summary>
</member>
<member name="M:Tools.IOt.Path.GetFile">
 <summary>Gets file represented by current instance (if exists)</summary>
 <exception cref="T:System.UnauthorizedAccessException">Access to file is denied.</exception>
 <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentNullException"><see cref="P:Tools.IOt.Path.Path"/> is null. Should not occure.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
 <exception cref="T:System.NotSupportedException"><see cref="P:Tools.IOt.Path.Path"/> contains a colon (:) in the middle of the string.</exception>
 <exception cref="T:System.ArgumentException">The <see cref="P:Tools.IOt.Path.Path"/> is empty, contains only white spaces, or contains invalid characters. Should not occure because the <see cref="P:Tools.IOt.Path.Path"/> setter blocks such values.</exception>
</member>
<member name="P:Tools.IOt.Path.Exists">
 <summary>Checks wheather path represented by current instance exists</summary>
 <returns>True if <see cref="P:Tools.IOt.Path.IsFile"/> or <see cref="P:Tools.IOt.Path.IsDirectory"/> returns True</returns>
</member>
<member name="M:Tools.IOt.Path.ExistsPath(System.Boolean)">
 <summary>Gets value indicating if file or directory represented by this path exists</summary>
 <param name="TrueForEmptyDrive">True to return true when return true for empty drives</param>
 <returns>True if <see cref="P:Tools.IOt.Path.IsFile"/>, <see cref="P:Tools.IOt.Path.IsDirectory"/> or <paramref name="TrueForEmptyDrive"/> and <see cref="P:Tools.IOt.Path.IsVolume"/> and the volume exists in <see cref="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.Drives"/></returns>
 <version version="1.5.2">Function introduced</version>
</member>
<member name="M:Tools.IOt.Path.Delete">
 <summary>Deletes item represented by <see cref="T:System.IO.Path"/> Directories are deleted recursivelly</summary>
 <exception cref="T:System.IO.IOException">The specified file is in use.</exception>
 <exception cref="T:System.NotSupportedException">path is in an invalid format.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. -or- path specified a read-only file.</exception>
</member>
<member name="M:Tools.IOt.Path.Copy(Tools.IOt.Path,System.Boolean)">
 <summary>Copies file or directory from one location to another</summary>
 <param name="Target">Target location</param>
 <param name="SkipErrors">Applies only when copying directory. Suppresses exceptions occuring when copying individual items. It may result not exact copy.</param>
 <returns>When copying file always True, when copying directory and <paramref name="SkipErrors"/> is True returns true if no error occured during procces if <paramref name="SkipErrors"/> is false returns True or throws an exception.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Target"/> is null</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="Target"/> is invalid (for example, it is on an unmapped drive).</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Target"/> specifies a directory when copying file</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.NotSupportedException"><see cref="P:Tools.IOt.Path.Path"/> of curent instance or of <paramref name="Target"/> is in an invalid format when copying file -or-
 An attempt was made to create a directory with only the colon character (:) when coping directory.</exception>
 <exception cref="T:System.IO.IOException">An I/O error has occurred when copying file. -or-
 The directory specified by <paramref name="Target"/> or one of its subdirectories is read-only or is not empty or a file with the same name and location specified by <paramref name="Target"/> or one of its subdirectories exists while copying directory.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
 <exception cref="T:System.IO.FileNotFoundException">Source file was not found.</exception>
</member>
<member name="M:Tools.IOt.Path.Move(Tools.IOt.Path,System.Boolean)">
 <summary>Moves file or directory from one location to another</summary>
 <param name="Target">Target location</param>
 <param name="SkipErrors">Applies only when moving directory. Suppresses exceptions occuring when moving individual items. It may result not exact copy.</param>
 <returns>When moving file always True, when moving directory and <paramref name="SkipErrors"/> is True returns true if no error occured during procces if <paramref name="SkipErrors"/> is false returns True or throws an exception.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Target"/> is null</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="Target"/> is invalid (for example, it is on an unmapped drive).</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Target"/> specifies a directory when copying file</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.NotSupportedException"><see cref="P:Tools.IOt.Path.Path"/> of curent instance or of <paramref name="Target"/> is in an invalid format when copying file -or-
 An attempt was made to create a directory with only the colon character (:) when coping directory.</exception>
 <exception cref="T:System.IO.IOException">An I/O error has occurred when copying file. -or-
 The directory specified by <paramref name="Target"/> or one of its subdirectories is read-only or is not empty or a file with the same name and location specified by <paramref name="Target"/> or one of its subdirectories exists while copying directory.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
 <exception cref="T:System.IO.FileNotFoundException">Sorce file was not found.</exception>
</member>
<member name="M:Tools.IOt.Path.GetEnumerator">
 <summary>Returns an enumerator that iterates through the all files and folder under current folder recursivelly. Current folder is included in enumeration. Files are listed before folders at each level.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the file system recursivelly.</returns>
 <remarks>If current instance points to file instead of folder then return enumerator thet enumerates throught array of exactly one item - current path; otherwise <see cref="T:Tools.IOt.FileSystemEnumerator"/> is returned.</remarks>
</member>
<member name="M:Tools.IOt.Path.GetEnumerator(System.Boolean)">
 <summary>Returns an enumerator that iterates through the all files and folders under current folder recursivelly. Current folder is not included in enumeration.</summary>
 <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterates through the file system recursivelly.</returns>
 <param name="FoldersFirst">True to list Folders before files at each level.</param>
 <remarks>If current instance points to file instead of folder then return enumerator thet enumerates throught array of exactly one item - current path; otherwise <see cref="T:Tools.IOt.FileSystemEnumerator"/> is returned.</remarks>
</member>
<member name="M:Tools.IOt.Path.GetEnumerator1">
 <summary>Returns an enumerator that iterates through the file system.</summary>
 <returns><see cref="M:Tools.IOt.Path.GetEnumerator()"/></returns>
 <remarks>Use type-safe <see cref="M:Tools.IOt.Path.GetEnumerator()"/>instead</remarks>
</member>
<member name="M:Tools.IOt.Path.GetChildren">
 <summary>Gets all files and folders in this folder</summary>
 <returns>Files and folders in folder represented by this instance</returns>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetFiles">
 <summary>Gets all files in this folder</summary>
 <returns>Files in folder represented by this instance</returns>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetSubFolders">
 <summary>Gets all folders in this folder</summary>
 <returns>Folders in folder represented by this instance</returns>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetChildren(System.Func{Tools.IOt.Path,System.Boolean}[])">
 <summary>Gets all files and folders in this folder restricted by AND operation among given conditions</summary>
 <param name="Conditions">Conditions to be evaluated and ANDed</param>
 <returns>Files and folders in folder represented by this instance</returns>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetChildren(System.String)">
 <summary>Gets all files and folders in this folder restricted by mask</summary>
 <returns>Files and folders in folder represented by this instance</returns>
 <param name="Mask">Mask used to restrict files and folders. The mask is in format of <see cref="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">Visual Basic operator Like</see> and is case-insensitive</param>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetFiles(System.String)">
 <summary>Gets all files in this folder restricted by mask</summary>
 <returns>Files in folder represented by this instance</returns>
 <param name="Mask">Mask used to restrict files. The mask is in format of <see cref="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">Visual Basic operator Like</see> and is case insensitive</param>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetSubFolders(System.String)">
 <summary>Gets all subfolders in this folder restricked by mask</summary>
 <returns>Files in folder represented by this instance</returns>
 <param name="Mask">Mask used to restrict folders. The mask is in format of <see cref="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">Visual Basic operator Like</see> and is case insensitive</param>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetChildren(System.Func{Tools.IOt.Path,System.Boolean})">
 <summary>Gets all files and folders in this folder restricted by condition</summary>
 <returns>Files and folders in folder represented by this instance</returns>
 <param name="Condition">Condition to be avaluated for each child. Only those children for which the condition is true are returned.</param>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetFiles(System.Func{Tools.IOt.Path,System.Boolean})">
 <summary>Gets all files in this folder restricted by condition</summary>
 <returns>Files in folder represented by this instance</returns>
 <param name="Condition">Condition to be avaluated for each file. Only those files for which the condition is true are returned.</param>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetSubFolders(System.Func{Tools.IOt.Path,System.Boolean})">
 <summary>Gets all subfolders in this folder restricked by condition</summary>
 <param name="Condition">Condition to be avaluated for each subfolder. Only those subfolders for which the condition is true are returned.</param>
 <returns>Files in folder represented by this instance</returns>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetChildren(System.String[])">
 <summary>Gets all files and folders in this folder restricted by mask</summary>
 <returns>Files and folders in folder represented by this instance</returns>
 <param name="Masks">Masks used to restrict files and folders. The mask is in format of <see cref="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">Visual Basic operator Like</see> and is case insensitive. The OR operation is pefromed between all masks.</param>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetFiles(System.String[])">
 <summary>Gets all files in this folder restricted by masks</summary>
 <returns>Files in folder represented by this instance</returns>
 <param name="Masks">Masks used to restrict files. The mask is in format of <see cref="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">Visual Basic operator Like</see> and is case insinsitive. The OR operation is pefromed between all masks.</param>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.GetSubFolders(System.String[])">
 <summary>Gets all subfolders in this folder restricked by masks</summary>
 <returns>Files in folder represented by this instance</returns>
 <param name="Masks">Masks used to restrict folders. The mask is in format of <see cref="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">Visual Basic operator Like</see> nad is case insensitive. The OR operation is pefromed between all masks.</param>
 <exception cref="T:System.IO.IOException">This instance represents a file.</exception>
 <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception>
 <exception cref="T:System.ArgumentException"><see cref="P:Tools.IOt.Path.Path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.</exception>
 <exception cref="T:System.IO.PathTooLongException">The specified <see cref="P:Tools.IOt.Path.Path"/>, name of children, or both exceed the system-defined maximum length.</exception>
 <exception cref="T:System.IO.DirectoryNotFoundException"><see cref="P:Tools.IOt.Path.Path"/> is invalid (for example, it is on an unmapped drive).</exception>
</member>
<member name="M:Tools.IOt.Path.LikeFS(System.String,System.String)">
 <summary>Represents <see cref="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">Visual Basic Like operator</see> in Option Compare Text (case insensitive) mode</summary>
 <param name="pattern">Patter to text <paramref name="text"/> against</param>
 <param name="text">Text to test agains <paramref name="pattern"/></param>
 <returns>True or false depending on if <paramref name="text"/> matches <paramref name="pattern"/></returns>
</member>
<member name="M:Tools.IOt.Path.GetDifference(Tools.IOt.Path,Tools.IOt.Path)">
 <summary>Gets relative path from <paramref name="b"/> to <paramref name="a"/></summary>
 <param name="a">Reference path. SHould be folder.</param>
 <param name="b">Path to make relative to <paramref name="a"/></param>
 <returns>
 A relative path, as <paramref name="a"/> is seen from <paramref name="b"/>.
 Returns <paramref name="b"/> if either <paramref name="a"/> or <paramref name="b"/> is relative.
 Returns <paramref name="b"/> if <paramref name="a"/> and <paramref name="b"/> has nothing in commmon.
 </returns>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="F:Tools.IOt.Path._isCaseSensitive">
 <summary>Caches value of the <see cref="P:Tools.IOt.Path.IsCaseSensitive"/> property (when not nulll)</summary>
 <threadsafety>Synchronize write access to this field uisng <see cref="F:Tools.IOt.Path.isCaseSensitiveLock"/>.</threadsafety>
</member>
<member name="F:Tools.IOt.Path.isCaseSensitiveLock">
 <summary>Use to synchronoze write access to <see cref="F:Tools.IOt.Path._isCaseSensitive"/></summary>
</member>
<member name="P:Tools.IOt.Path.IsCaseSensitive">
 <summary>Gets value indicating if paths are cas-sensitive on current operating system</summary>
 <version version="1.5.4">This property is new in version 1.5.4</version>
 <threadsafety>This property is thread-safe</threadsafety>
</member>
<member name="M:Tools.IOt.Path.GetDifference(System.String,System.String)">
 <summary>Gets relative path from <paramref name="b"/> to <paramref name="a"/></summary>
 <param name="a">Reference path. Should be folder.</param>
 <param name="b">Path to make relative to <paramref name="a"/></param>
 <returns>
 A relative path, as <paramref name="a"/> is seen from <paramref name="b"/>.
 Returns <paramref name="b"/> if either <paramref name="a"/> or <paramref name="b"/> is relative.
 Returns <paramref name="b"/> if <paramref name="a"/> and <paramref name="b"/> has nothing in commmon.
 </returns>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="T:Tools.IOt.IPathProvider">
 <summary>Interface of object that provides path</summary>
</member>
<member name="P:Tools.IOt.IPathProvider.Path">
 <summary>Path of file or directory represented by this object</summary>
</member>
<member name="T:Tools.IOt.StreamTools">
 <summary>Tools related to IO <see cref="T:System.IO.Stream"/>s</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.IOt.StreamTools.InsertInto(System.IO.Stream,System.Int32,System.Int32,System.Byte[],System.Int64,System.Int64,System.Int32)">
 <summary>Replaces given ammount of bytes in <see cref="T:System.IO.Stream"/> with another amount of bytes</summary>
 <param name="Stream">Stream to perform operation on. It must support seking, reading and writing</param>
 <param name="Position">Position where bytes to be replaced starts</param>
 <param name="BytesToReplace">Number of bytes currently in stream to be replaced (can be 0)</param>
 <param name="Data">Bytes to replace old bytes with</param>
 <param name="Chunk">when data are moved from one part of stream to another they are moved in chunks. This defines size of chunk in bytes. Befault is 1024.</param>
 <param name="Offset">Offset in <paramref name="Data"/> to start inserting from</param>
 <param name="Count">Number of bytes from <paramref name="Data"/> to use</param>
 <remarks>If <paramref name="Data"/>'s lenght does not match <paramref name="BytesToReplace"/> the stream is shortened or enlarged and data after replaced block are moved as necessary</remarks>
 <exception cref="T:System.IO.IOException">An IO error occurs</exception>
 <exception cref="T:System.ObjectDisposedException"><paramref name="Stream"/> is closed</exception>
 <exception cref="T:System.NotSupportedException">
 <paramref name="Stream"/> does not support seeking -or-
 <paramref name="Stream"/> does not support writing -or-
 <paramref name="Stream"/> does not suport reading
 </exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> is null -or- <paramref name="Data"/> is null</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Position"/> is not within range &lt;0; <paramref name="Stream"/>.<see cref="P:System.IO.Stream.Length">Length</see>) -or- <paramref name="BytesToReplace"/> is not within range &lt;0; <paramref name="Stream"/>.<see cref="P:System.IO.Stream.Length">Lenght</see> - <paramref name="Position"/> - or- <paramref name="Chunk"/> is not positive -or- <paramref name="Offset"/> or <paramref name="Count"/> is negative</exception>
 <exception cref="T:System.ArgumentException">Sum of <paramref name="Offset"/> and <paramref name="Count"/> is greater than length of <paramref name="Data"/></exception>
 <version version="1.5.3" stage="Nightly">Fix: <see cref="T:System.ArgumentOutOfRangeException"/> may be thrown when <paramref name="BytesToReplace"/>  &lt; <paramref name="Count"/>.</version>
 <version version="1.5.3">Fix: <see cref="T:System.ArgumentException"/> thrown when <paramref name="BytesToReplace"/> >= <paramref name="Count"/> (fixed - the exception is no longer thrown).</version>
</member>
<member name="M:Tools.IOt.StreamTools.InsertInto(System.IO.Stream,System.Int32,System.Int32,System.Byte[],System.Int32)">
 <summary>Replaces given ammount of bytes in <see cref="T:System.IO.Stream"/> with another amount of bytes</summary>
 <param name="Stream">Stream to perform operation on. It must support seking, reading and writing</param>
 <param name="Position">Position where bytes to be replaced starts</param>
 <param name="BytesToReplace">Number of bytes currently in stream to be replaced (can be 0)</param>
 <param name="Data">Bytes to replace old bytes with</param>
 <param name="Chunk">when data are moved from one part of stream to another they are moved in chunks. This defines size of chunk in bytes. Befault is 1024.</param>
 <remarks>If <paramref name="Data"/>'s lenght does not match <paramref name="BytesToReplace"/> the stream is shortened or enlarged and data after replaced block are moved as necessary</remarks>
 <exception cref="T:System.IO.IOException">An IO error occurs</exception>
 <exception cref="T:System.ObjectDisposedException"><paramref name="Stream"/> is closed</exception>
 <exception cref="T:System.NotSupportedException">
 <paramref name="Stream"/> does not support seeking -or-
 <paramref name="Stream"/> does not support writing -or-
 <paramref name="Stream"/> does not suport reading
 </exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> is null -or- <paramref name="Data"/> is null</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Position"/> is not within range &lt;0; <paramref name="Stream"/>.<see cref="P:System.IO.Stream.Length">Length</see>) -or- <paramref name="BytesToReplace"/> is not within range &lt;0; <paramref name="Stream"/>.<see cref="P:System.IO.Stream.Length">Lenght</see> - <paramref name="Position"/> - or- <paramref name="Chunk"/> is not positive</exception>
 <version version="1.5.3">Fix: <see cref="T:System.ArgumentException"/> thrown when <paramref name="BytesToReplace"/> >= <paramref name="Data"/>.<see cref="P:System.Array.Length">Length</see> (fixed - the exception is no longer thrown).</version>
</member>
<member name="M:Tools.IOt.StreamTools.Write(System.IO.Stream,System.IO.Stream)">
 <summary>Writes content of <see cref="T:System.IO.Stream"/> to <see cref="T:System.IO.Stream"/></summary>
 <param name="Target">Target to write content of <paramref name="Source"/> to</param>
 <param name="Source">Contains data to write to <paramref name="Target"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Source"/> or <paramref name="Target"/> is null</exception>
 <exception cref="T:System.IO.IOException">An IO error occurs</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="Source"/> does not support reading or <paramref name="Target"/> does not suport writing.</exception>
 <exception cref="T:System.ObjectDisposedException"><paramref name="Source"/> or <paramref name="Target"/> was cloased</exception>
</member>
<member name="M:Tools.IOt.StreamTools.Write(Tools.IOt.BinaryWriter,System.IO.Stream)">
 <summary>Writes content of <see cref="T:System.IO.Stream"/> to <see cref="T:System.IO.Stream"/></summary>
 <param name="Target">Target to write content of <paramref name="Source"/> to</param>
 <param name="Source">Contains data to write to <paramref name="Target"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Source"/> or <paramref name="Target"/> is null</exception>
 <exception cref="T:System.IO.IOException">An IO error occurs</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="Source"/> does not support reading or <paramref name="Target"/> does not suport writing.</exception>
 <exception cref="T:System.ObjectDisposedException"><paramref name="Source"/> or <paramref name="Target"/> was cloased</exception>
</member>
<member name="M:Tools.IOt.StreamTools.Write(Tools.IOt.BinaryWriter,Tools.IOt.BinaryReader)">
 <summary>Writes content of <see cref="T:System.IO.Stream"/> to <see cref="T:System.IO.Stream"/></summary>
 <param name="Target">Target to write content of <paramref name="Source"/> to</param>
 <param name="Source">Contains data to write to <paramref name="Target"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Source"/> or <paramref name="Target"/> is null</exception>
 <exception cref="T:System.IO.IOException">An IO error occurs</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="Source"/> does not support reading or <paramref name="Target"/> does not suport writing.</exception>
 <exception cref="T:System.ObjectDisposedException"><paramref name="Source"/> or <paramref name="Target"/> was cloased</exception>
</member>
<member name="M:Tools.IOt.StreamTools.Write(System.IO.Stream,Tools.IOt.BinaryReader)">
 <summary>Writes content of <see cref="T:System.IO.Stream"/> to <see cref="T:System.IO.Stream"/></summary>
 <param name="Target">Target to write content of <paramref name="Source"/> to</param>
 <param name="Source">Contains data to write to <paramref name="Target"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Source"/> or <paramref name="Target"/> is null</exception>
 <exception cref="T:System.IO.IOException">An IO error occurs</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="Source"/> does not support reading or <paramref name="Target"/> does not suport writing.</exception>
 <exception cref="T:System.ObjectDisposedException"><paramref name="Source"/> or <paramref name="Target"/> was cloased</exception>
</member>
<member name="T:Tools.IOt.FileSystemOperations">
 <summary>Contains static functions for working with files and directories</summary>
 <version version="1.5.2" stage="Nightly">Module introduced</version>
</member>
<member name="M:Tools.IOt.FileSystemOperations.Copy(Tools.IOt.Path,Tools.IOt.Path,Tools.IOt.PathCopyCallBack,Tools.IOt.PathCopyErrorCallBack,System.Boolean)">
 <summary>Recursivelly copies directory structure from one directory to another</summary>
 <param name="SourcePath">Directory to be copyied</param>
 <param name="TargetPath">Directory content of <paramref name="SourcePath"/> to be copyied to</param>
 <param name="CallBack">Callback function to report progress and allow cancellation. Can be null.</param>
 <param name="ErrorCallBack">Callback function called when an error occures. Allows error recovery. Can be null. If null no error recovery is done - all exceptions are thrown. To overwrite existing file, this callback must be provided.</param>
 <param name="KeepOriginalTime">True to preserve file create/write/access time on copy (applies to directories as well but only to directories created by this function)</param>
 <remarks>This function can copy single file as well - when <paramref name="SourcePath"/> point to file. In such case <paramref name="TargetPath"/> must point to file as well.
 <para>See <see cref="M:Tools.IOt.FileSystemOperations.FileCopy(Tools.IOt.Path,Tools.IOt.Path,Tools.IOt.PathCopyCallBack,Tools.IOt.PathCopyErrorCallBack)"/> for details of how this function works.</para></remarks>
 <exception cref="T:Tools.IOt.FileAlreadyExistsException"><paramref name="TargetPath"/> file exists and <paramref name="ErrorCallBack"/> is null or it does not return <see cref="F:Tools.IOt.PathCopyCallbackResult.Retry"/> when called with <see cref="T:Tools.IOt.FileAlreadyExistsException"/>.</exception>
 <exception cref="T:System.IO.IOException">An IO exception occured while openning source or target file or when reading source file or when writing target file or when manipulating directories and <paramref name="ErrorCallBack"/> is null or it returns <see cref="F:Tools.IOt.PathCopyCallbackResult.Abort"/> (or <see cref="T:Tools.IOt.PathCopyCallbackResult"/> non-mmeber) for the exception.</exception>
 <exception cref="T:System.Security.SecurityException">A security exception oocured while openning source or target file or when manipulating directories and <paramref name="ErrorCallBack"/> is null or ire returns <see cref="F:Tools.IOt.PathCopyCallbackResult.Abort"/> (or <see cref="T:Tools.IOt.PathCopyCallbackResult"/> non-member) for the exception.</exception>
 <exception cref="T:System.UnauthorizedAccessException">Access denied exception oocured while openning source or target file or when manipulating directories and <paramref name="ErrorCallBack"/> is null or ire returns <see cref="F:Tools.IOt.PathCopyCallbackResult.Abort"/> (or <see cref="T:Tools.IOt.PathCopyCallbackResult"/> non-member) for the exception.</exception>
 <exception cref="T:System.OperationCanceledException"><paramref name="CallBack"/> returned <see cref="F:Tools.IOt.PathCopyCallbackResult.Abort"/></exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="CallBack"/> returned <see cref="F:Tools.IOt.PathCopyCallbackResult.Ignore"/> when its parameter SourceFileName was null.</exception>
</member>
<member name="M:Tools.IOt.FileSystemOperations.PreserveAttributes(Tools.IOt.Path,Tools.IOt.Path,Tools.IOt.PathCopyErrorCallBack,System.Boolean)">
 <summary>Applies attributes and optionaly times form one file to another</summary>
 <param name="SourceFile">Source of attributes and times</param>
 <param name="TargetFile">Target file</param>
 <param name="ErrorCallBack">Error callback function</param>
 <param name="KeepOriginalTime">True to preserve times (create/write/access) as well as attributes</param>
 <returns>True when operation can continue; false otherwise</returns>
 <exception cref="T:System.IO.IOException">An IO exception occured not handle by callback</exception>
 <exception cref="T:System.Security.SecurityException">A security exception occured not handled by the callback</exception>
 <exception cref="T:System.UnauthorizedAccessException">An access denied exception occured not handld by callback</exception>
</member>
<member name="M:Tools.IOt.FileSystemOperations.FileCopy(Tools.IOt.Path,Tools.IOt.Path,Tools.IOt.PathCopyCallBack,Tools.IOt.PathCopyErrorCallBack)">
 <summary>Copies single file from source path to target path</summary>
 <param name="SourcePath">Path to source file</param>
 <param name="TargetPath">Path to destination file (not only target directory, shall include file name)</param>
 <param name="CallBack">Callback function to report progress and allow cancellation. Can be null.</param>
 <param name="ErrorCallBack">Callback function called when an error occures. Allows error recovery. Can be null. If null no error recovery is done - all exceptions are thrown. To overwrite existing file, this callback must be provided.</param>
 <returns>Status of operation</returns>
 <exception cref="T:Tools.IOt.FileAlreadyExistsException"><paramref name="TargetPath"/> file exists and <paramref name="ErrorCallBack"/> is null or it does not return <see cref="F:Tools.IOt.PathCopyCallbackResult.Retry"/> when called with <see cref="T:Tools.IOt.FileAlreadyExistsException"/>.</exception>
 <exception cref="T:System.IO.IOException">An IO exception occured while openning source or target file or when reading source file or when writing target file and <paramref name="ErrorCallBack"/> is null or it returns <see cref="F:Tools.IOt.PathCopyCallbackResult.Abort"/> (or <see cref="T:Tools.IOt.PathCopyCallbackResult"/> non-mmeber) for the exception.</exception>
 <exception cref="T:System.Security.SecurityException">A security exception oocured while openning source or target file and <paramref name="ErrorCallBack"/> is null or ire returns <see cref="F:Tools.IOt.PathCopyCallbackResult.Abort"/> (or <see cref="T:Tools.IOt.PathCopyCallbackResult"/> non-member) for the exception.</exception>
 <exception cref="T:System.UnauthorizedAccessException">Access denied exception oocured while openning source or target file and <paramref name="ErrorCallBack"/> is null or ire returns <see cref="F:Tools.IOt.PathCopyCallbackResult.Abort"/> (or <see cref="T:Tools.IOt.PathCopyCallbackResult"/> non-member) for the exception.</exception>
 <exception cref="T:System.OperationCanceledException"><paramref name="CallBack"/> returned <see cref="F:Tools.IOt.PathCopyCallbackResult.Abort"/></exception>
 <exception cref="T:System.InvalidOperationException"><paramref name="CallBack"/> returned <see cref="F:Tools.IOt.PathCopyCallbackResult.Ignore"/> when its parameter SourceFileName was null.</exception>
 <remarks>Directory for <paramref name="TargetPath"/> must exist. This function does not attempt to create it.
 <para><paramref name="CallBack"/> function is first time called with file names and zero progress. All subsequent calls are with source and file name null (to recude string copying overhead). <paramref name="CallBack"/> can only return <see cref="F:Tools.IOt.PathCopyCallbackResult.Ignore"/> when called with source and target path non-null. This will cause file to be skiped and function to return true immediatelly.</para>
 <para>It cannot be guaranted how often the callback function is called. Typically it is called for every 1024 bytes copyied. At leas it is called two times (with zero and 100% progress).</para>
 <para>The copying proces is stream-based. Simply source file and target file streams are opened and read -> write is done by using <see cref="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)"/> and <see cref="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)"/> using 1024 bytes buffer. This means that no attributtes associated with the file are preserved for target file.</para></remarks>
 <seelaso cref="M:Tools.IOt.FileSystemOperations.Copy(Tools.IOt.Path,Tools.IOt.Path,Tools.IOt.PathCopyCallBack,Tools.IOt.PathCopyErrorCallBack,System.Boolean)"/>
</member>
<member name="T:Tools.IOt.PathCopyCallBack">
 <summary>Provides callback function for file/directory copy operation</summary>
 <param name="SourceFileName">Full path of source file currently being copyied.
 <note>This argument is usually null. It is non-unly only when callback function is called for the first tame for single file. Subsequent calls for the same file has this argument null.</note></param>
 <param name="TargetFileName">Full path of targte file <paramref name="SourceFileName"/> is being copied to.
 <note>Null when <paramref name="SourceFileName"/> is null.</note></param>
 <param name="TotalSize">Total size, in bytes, of source file</param>
 <param name="BytesCopyed">Number of bytes already succesfully copied from <paramref name="SourceFileName"/> to <paramref name="TargetFileName"/>.</param>
 <returns>Value indicating how to continue the operation. By default this delegate should return <see cref="F:Tools.IOt.PathCopyCallbackResult.Ignore"/> (which meants that operation will continue). This delegate shall not return <see cref="F:Tools.IOt.PathCopyCallbackResult.Retry"/> unless <paramref name="SourceFileName"/> is not null.</returns>
 <remarks>When <paramref name="SourceFileName"/> is not null <paramref name="BytesCopyed"/> is always zero. When callback function returns <see cref="F:Tools.IOt.PathCopyCallbackResult.Retry"/> in such situation, copying of file <paramref name="SourceFileName"/> is skipped.
 <para>When callback function returns <see cref="F:Tools.IOt.PathCopyCallbackResult.Cancel"/> or <see cref="F:Tools.IOt.PathCopyCallbackResult.Abort"/> no cleenup is done (only all opened files are closed). Half-copyied target files is leftin file system. You should delete the file.</para></remarks>
</member>
<member name="T:Tools.IOt.PathCopyErrorCallBack">
 <summary>Used to provide custom error handling during file/directory copy operation</summary>
 <param name="SourceFileName">Full path of source file or directory currently being copyied</param>
 <param name="TargetFileName">Full path of target file or directory - target of <paramref name="SourceFileName"/></param>
 <param name="Stage">Identifies process stage where exception have occured</param>
 <param name="Exception">The exception.<para>When <paramref name="Exception"/> is <see cref="T:Tools.IOt.FileAlreadyExistsException"/> return <see cref="F:Tools.IOt.PathCopyCallbackResult.Retry"/> to overwrite the file.</para></param>
 <returns>A value indicating how to recover from the error</returns>
 <remarks>When copy operation fails during source-read -> target-write process, no cleenup is done (but all opened files are closed). Caller you should delete half-copyied target file.</remarks>
</member>
<member name="T:Tools.IOt.PathCopyCallbackResult">
 <summary>Ways of solving path copy errors</summary>
</member>
<member name="F:Tools.IOt.PathCopyCallbackResult.Cancel">
 <summary>Siletnly cancel the operation</summary>
</member>
<member name="F:Tools.IOt.PathCopyCallbackResult.Abort">
 <summary>Aborth the operation. Exception will be thrown.</summary>
</member>
<member name="F:Tools.IOt.PathCopyCallbackResult.Retry">
 <summary>Try failed sub-operation again</summary>
</member>
<member name="F:Tools.IOt.PathCopyCallbackResult.Ignore">
 <summary>Ignore failure and procede to next file/directory</summary>
</member>
<member name="T:Tools.IOt.PathCopyStages">
 <summary>Stages of file/directory copy process when exception can occure</summary>
</member>
<member name="F:Tools.IOt.PathCopyStages.CreateDirectory">
 <summary>Target directory (or one of its subdirectories required for subdirectories of source directory) does not exist and it is being created</summary>
 <remarks>Not used by <see cref="M:Tools.IOt.FileSystemOperations.FileCopy(Tools.IOt.Path,Tools.IOt.Path,Tools.IOt.PathCopyCallBack,Tools.IOt.PathCopyErrorCallBack)"/></remarks>
</member>
<member name="F:Tools.IOt.PathCopyStages.OpenSourceFile">
 <summary>Source file is being opened</summary>
</member>
<member name="F:Tools.IOt.PathCopyStages.CheckTagretFileExists">
 <summary>Check if tagret file exists</summary>
</member>
<member name="F:Tools.IOt.PathCopyStages.OpenTargetFile">
 <summary>tagrte file is being opened</summary>
</member>
<member name="F:Tools.IOt.PathCopyStages.Read">
 <summary>Reading bytes from source file</summary>
</member>
<member name="F:Tools.IOt.PathCopyStages.Write">
 <summary>Writing bytes to tagret file</summary>
</member>
<member name="F:Tools.IOt.PathCopyStages.SetFileAttributes">
 <summary>File attributes or times are being set</summary>
 <remarks>Not used by <see cref="M:Tools.IOt.FileSystemOperations.FileCopy(Tools.IOt.Path,Tools.IOt.Path,Tools.IOt.PathCopyCallBack,Tools.IOt.PathCopyErrorCallBack)"/></remarks>
</member>
<member name="F:Tools.IOt.PathCopyStages.SetDirectoryAttributes">
 <summary>Directory attributes or times are being set</summary>
 <remarks>Not used by <see cref="M:Tools.IOt.FileSystemOperations.FileCopy(Tools.IOt.Path,Tools.IOt.Path,Tools.IOt.PathCopyCallBack,Tools.IOt.PathCopyErrorCallBack)"/></remarks>
</member>
<member name="T:Tools.IOt.FileAlreadyExistsException">
 <summary>Excpetion throw when target path is already used by a file</summary>
</member>
<member name="M:Tools.IOt.FileAlreadyExistsException.#ctor(Tools.IOt.Path)">
 <summary>CTfor from path</summary>
 <param name="Path">Path to existent target file</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Path"/> is null.</exception>
</member>
<member name="M:Tools.IOt.FileAlreadyExistsException.#ctor(System.String,System.Boolean)">
 <summary>CTor form message and optionally inner exception</summary>
 <param name="Message">The error message that explains the reason for the exception.</param>
 <param name="InnerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not null, the current exception is raised in a catch block that handles the inner exception.</param>
</member>
<member name="T:Tools.IOt.FileCopyResult">
 <summary>Result of file copy operation</summary>
</member>
<member name="F:Tools.IOt.FileCopyResult.Copyed">
 <summary>File was copied</summary>
</member>
<member name="F:Tools.IOt.FileCopyResult.PreCancelled">
 <summary>Copying was cancelled before it started</summary>
</member>
<member name="F:Tools.IOt.FileCopyResult.Cancelled">
 <summary>Copying was cancelled after it started</summary>
</member>
<member name="F:Tools.IOt.FileCopyResult.Terminate">
 <summary>If this falg is set, the whole batch copying operation was cancelled by callback function and should not continue. This is never combined with <see cref="F:Tools.IOt.FileCopyResult.Copyed"/></summary>
</member>
<member name="T:Tools.ResourcesT.Exceptions">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.AllEdgesValuesMustBePositive">
<summary>
Looks up a localized string similar to 'All edges&apos; values must be positive'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.AllowAddCancelableEventsHandlersCanBeChangedOnlyFromTrueToFalse">
<summary>
Looks up a localized string similar to 'AllowAddCancelableEventsHandlers  can be changed only from True to False'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.AllRecordsHaveBennAlreadyWritten">
<summary>
Looks up a localized string similar to 'All records have benn already written.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.AllTypesIn0MustInheritFrom0">
<summary>
Looks up a localized string similar to 'All types in {0} must inherit from {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.AlphabetLenghtBaseMismatch">
<summary>
Looks up a localized string similar to 'Lenght of alphabet must be same as base'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ArabicDefaultNotSpecified">
<summary>
Looks up a localized string similar to 'Default for of Arabic letter must be specified'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ArrayCannotBeEmpty">
<summary>
Looks up a localized string similar to 'Array cannot be empty.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ArrayMustHaveExactlyXBytes">
<summary>
Looks up a localized string similar to 'Array must have exactly {0} bytes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.AttemptToCreateCyclicLinkedListOfIFDs">
<summary>
Looks up a localized string similar to 'Attempt to create cyclic linked-list of IFDs'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.AttemptToCreateCyclicTree">
<summary>
Looks up a localized string similar to 'Attempt to create cyclic tree'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.AttemptToSeekAfterEndOfStream">
<summary>
Looks up a localized string similar to 'Attempt to seek after end of stream.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.AttributeCannotDeriveFromAttributeWhenWarningKindIsNoAttributeAttribute">
<summary>
Looks up a localized string similar to 'Attribute cannot derive from Attribute when WarningKind is NoAttributeAttribute'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Base64StringInvalid">
<summary>
Looks up a localized string similar to 'The provided string does not appear to be Base64 encoded:'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.BaseInvalidCharacter">
<summary>
Looks up a localized string similar to 'Value contains character that cannot be interpreted as numeral in given base'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.BaseStreamOfOverflowStreamMustBeAbleToReadWriteAndSeek">
<summary>
Looks up a localized string similar to 'BaseStream of OverflowStream must be able to Read, Write and Seek.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.BIMSegmentDoesnTStartWithSting8BIM">
<summary>
Looks up a localized string similar to '8BIM segment doesn&apos;t start with sting &apos;8BIM&apos;'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.BitmapViolatesLenghtConstraintImageSizeMustBe4600Px">
<summary>
Looks up a localized string similar to 'Bitmap violates lenght constraint. Image size must be 460×{0}px'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.BitmapWidthMustBe460px">
<summary>
Looks up a localized string similar to 'Bitmap width must be 460px'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.BytesCannotBe0">
<summary>
Looks up a localized string similar to 'Bytes cannot be 0'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CanConsistOnlyOfGraphicCharacters">
<summary>
Looks up a localized string similar to '{0} can consist only of graphic characters'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CanContainOnlyASCIIEncodableGraphicCharactersAndSpaces">
<summary>
Looks up a localized string similar to '{0} can contain only ASCII-encodable graphic characters and spaces'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CanContainOnlyGraphicCharactersExceptAnd">
<summary>
Looks up a localized string similar to '{0} can contain only graphic characters except :, ? and *'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CanNeverContainItemWithKeyOfType1">
<summary>
Looks up a localized string similar to '{0} can never contain item with key of type {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotAddHandlerToTheAddingEventWhenAllowAddCancelableEventsHandlersIsFalse">
<summary>
Looks up a localized string similar to 'Cannot add handler to the Adding event when AllowAddCancelableEventsHandlers is False'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotAddHandlerToTheClearigEventWhenAllowAddCancelableEventsHandlersIsFalse">
<summary>
Looks up a localized string similar to 'Cannot add handler to the Clearig event when AllowAddCancelableEventsHandlers is False'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotAddHandlerToTheItemChangingEventWhenAllowAddCancelableEventsHandlersIsFalse">
<summary>
Looks up a localized string similar to 'Cannot add handler to the ItemChanging event when AllowAddCancelableEventsHandlers is False'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotAddHandlerToTheRemovingEventWhenAllowAddCancelableEventsHandlersIsFalse">
<summary>
Looks up a localized string similar to 'Cannot add handler to the Removing event when AllowAddCancelableEventsHandlers is False'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotAddNodeThatHaveParentAlreadySet">
<summary>
Looks up a localized string similar to 'Cannot add node that have parent already set'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotAddNullNodeIntoTree">
<summary>
Looks up a localized string similar to 'Cannot add null node into tree'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotAdoptNull">
<summary>
Looks up a localized string similar to 'Cannot adopt null'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotAssignNodeThatGaveParentAlreadySet">
<summary>
Looks up a localized string similar to 'Cannot assign node that gave parent already set'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBe1When2Is3">
<summary>
Looks up a localized string similar to '{0} cannot be {1} when {2} is {3}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeAnEmptyString">
<summary>
Looks up a localized string similar to '{0} cannot be an empty string'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeChanged">
<summary>
Looks up a localized string similar to '{0} cannot be changed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeCleared">
<summary>
Looks up a localized string similar to '{0} cannot be cleared'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeConvertedTo1">
<summary>
Looks up a localized string similar to '&apos;{0}&apos; cannot be converted to {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeInterpretedAs1">
<summary>
Looks up a localized string similar to '{0} cannot be interpreted as {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeInterpretedAsMemberOf1">
<summary>
Looks up a localized string similar to '{0} cannot be interpreted as member of {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeNegative">
<summary>
Looks up a localized string similar to '{0} cannot be negative'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeNull">
<summary>
Looks up a localized string similar to '{0} cannot be null'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeNullOrAnEmptyString">
<summary>
Looks up a localized string similar to '{0} cannot be null or an empty string'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeNullOrEmpty">
<summary>
Looks up a localized string similar to '{0} cannot be null or empty'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeSet">
<summary>
Looks up a localized string similar to '{0} cannot be set.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeSetTo1When2Is3">
<summary>
Looks up a localized string similar to '{0} cannot be set to {1} when {2} is {3}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeSetTo1When2Is31">
<summary>
Looks up a localized string similar to '{0} cannot be set to {1} when {2} is {3}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeSetToFalse">
<summary>
Looks up a localized string similar to '{0} cannot be set to false'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotBeSetToNull">
<summary>
Looks up a localized string similar to '{0} cannot be set to null'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotChangeItemPropertyWhenReadOnlyIsTrue">
<summary>
Looks up a localized string similar to 'Cannot change Item property when ReadOnly is True'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotChangeNumberOfComponentsOfThisRecord">
<summary>
Looks up a localized string similar to 'Cannot change number of components of this record'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotChangeStateFrom0To1">
<summary>
Looks up a localized string similar to 'Cannot change state from {0} to {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotChangeValueOfThe0PropertyWhen1IsTrue">
<summary>
Looks up a localized string similar to 'Cannot change value of the {0} property when {1} is true'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotContainCharactersAnd">
<summary>
Looks up a localized string similar to '{0} cannot contain characters *, /, ? and :'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotConvertGiven0To1BecauseItDoesNotRepresentKnown2">
<summary>
Looks up a localized string similar to 'Cannot convert given {0} to {1} because it does not represent known {2}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotConvertNegativeValuesToUnsignedRational">
<summary>
Looks up a localized string similar to 'Cannot convert negative values to unsigned rational'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotConvertString0To1">
<summary>
Looks up a localized string similar to 'Cannot convert string &quot;{0}&quot; to {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotCreateInstanceOfType01WasThrownWhenObtainingNewInstance">
<summary>
Looks up a localized string similar to 'Cannot create instance of type {0}. {1} was thrown when obtaining new instance:'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotGetBaseClassMethodOfGlobalMethod">
<summary>
Looks up a localized string similar to 'Cannot get base class method of global method'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotGetDerivedClassMethodForGlobalMethod">
<summary>
Looks up a localized string similar to 'Cannot get derived class method for global method.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotInterpretValue0As1">
<summary>
Looks up a localized string similar to 'Cannot interpret value &quot;{0}&quot; as {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotLoadManifestResourceStream">
<summary>
Looks up a localized string similar to 'Cannot load manifest resource stream {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotLocate0In1">
<summary>
Looks up a localized string similar to 'Cannot locate {0} in {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotPutNullNodeIntoTree">
<summary>
Looks up a localized string similar to 'Cannot put null node into tree'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotReadTagDataFromStream">
<summary>
Looks up a localized string similar to 'Cannot read tag data from stream'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotRemoveLastItemFrom0">
<summary>
Looks up a localized string similar to 'Cannot remove last item from {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotRemoveRecordWhichPoitsToSubIFDRemoveSubIFDFirst">
<summary>
Looks up a localized string similar to 'Cannot remove record which poits to subIFD. Remove subIFD first.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotResumeCountDownTimerWhenThereIsNoTimeLeft">
<summary>
Looks up a localized string similar to 'Cannot resume count-down timer when there is no time left.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotReturnValueForThisInstanceOfT1orT2BecauseItContainsNeitherValue1NorValue2">
<summary>
Looks up a localized string similar to 'Cannot return value for this instance of T1orT2 because it contains neither value1 nor value2.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotSaveExifDataBecauseOfInvalidContent">
<summary>
Looks up a localized string similar to 'Cannot save Exif data because of invalid content.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotSetFixedToTrueWhenLengthIs0">
<summary>
Looks up a localized string similar to 'Cannot set Fixed to True when Length is 0'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotSetLengthTo0WhenFixedIsTrue">
<summary>
Looks up a localized string similar to 'Cannot set Length to 0 when Fixed is true'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotSetValueOfTheExifPropertyToOtherInstanceThenIsValueOfExifPropertyOfPreviousIFD">
<summary>
Looks up a localized string similar to 'Cannot set value of the Exif property to other instance then is value of Exif property of Previous IFD.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CannotWriteIFDAtThisTime">
<summary>
Looks up a localized string similar to 'Cannot write IFD at this time.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ChangingWasCanceledInEventhandler">
<summary>
Looks up a localized string similar to 'Changing was canceled in eventhandler'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CharacterRepresntingNumeralCannotBeSameAsCharacterRepresenting">
<summary>
Looks up a localized string similar to 'Character represnting numeral cannot be same as character representing negavive sign'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CharactersRepreentingNumeralsMustBeDifferent">
<summary>
Looks up a localized string similar to 'Characters repreenting numerals must be different'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ClassCannotBeUsedAsMessageBox">
<summary>
Looks up a localized string similar to 'Class cannot be used as message box.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ClassThatRepresentsDefaultMessageBoxImplementationMustHaveParameterLessConstructor">
<summary>
Looks up a localized string similar to 'Class that represents default MessageBox implementation must have parameter-less constructor.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ClearingWasCanceledInEventhendler">
<summary>
Looks up a localized string similar to 'Clearing was canceled in eventhendler'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CodeIsNotValidISO639LanguageCode">
<summary>
Looks up a localized string similar to 'Code is not valid ISO 639 language code'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CollectionCannotContainNullValue">
<summary>
Looks up a localized string similar to 'Collection cannot contain null value'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CollectionIsReadOnly">
<summary>
Looks up a localized string similar to 'Collection is read-only'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ComponentCannotBeAnEmptyString">
<summary>
Looks up a localized string similar to '{0} component cannot be an empty string'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ComponentMustBeEncodeableByASCII">
<summary>
Looks up a localized string similar to '{0} component must be encodeable by ASCII'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Constant0DoesNotExistInType1">
<summary>
Looks up a localized string similar to 'Constant {0} does not exist in type {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ConversionTo0Failed">
<summary>
Looks up a localized string similar to 'Conversion to {0} failed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CountDownTimeMustBeGreaterThanZero">
<summary>
Looks up a localized string similar to 'Count down time must be greater than zero.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.CurrentApplicationHasNoConsoleAllocateConsoleFirst">
<summary>
Looks up a localized string similar to 'Current application has no console. Allocate console first.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DataSetNumberMustBeLessThanOrEqualTo9">
<summary>
Looks up a localized string similar to 'DataSetNumber must be less than or equal to 9'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DataSetsLongerThan32767BAreNotSupported">
<summary>
Looks up a localized string similar to 'DataSets longer than 32767B are not supported'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DataTypesCannotBeNullAndMustContainAtLeastOneElement">
<summary>
Looks up a localized string similar to 'DataTypes cannot be null and must contain at least one element'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DeclaringTypeOfMethodIsNotGeneric">
<summary>
Looks up a localized string similar to 'Declaring type of method is not generic.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DecryptInitializationVectorMissing">
<summary>
Looks up a localized string similar to 'No initialization vector was provided for the decryption operation.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DecryptKeyMissing">
<summary>
Looks up a localized string similar to 'No key was provided for the decryption operation.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DefaultMessageBoxImplementationCannotBeAbstractType">
<summary>
Looks up a localized string similar to 'Default MessageBox implementation cannot be abstract type.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DefaultMessageBoxImplementationCannotBeGenericTypeDefinition">
<summary>
Looks up a localized string similar to 'Default MessageBox implementation cannot be generic type definition.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DerivedTypeDoesNotDeriveFromMethodDeclaringType">
<summary>
Looks up a localized string similar to 'Derived type does not derive from method decrating type'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DoesNotRepresentSupportedExpression">
<summary>
Looks up a localized string similar to '{0} does not represent supported expression.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.DoesnTSupportWriting">
<summary>
Looks up a localized string similar to '{0} doesn&apos;t support writing'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EachGroupMustHaveAtLeast0Tags">
<summary>
Looks up a localized string similar to 'Each group must have at least {0} tags'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ElementMustBe">
<summary>
Looks up a localized string similar to 'Element must be {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EmptyNumberNotAllowedInBase">
<summary>
Looks up a localized string similar to 'Value cannot be an empty string when base is greater than 1'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EncodingWithSameCodepageIsNotInList">
<summary>
Looks up a localized string similar to 'Encoding with same codepage is not in list'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EntryPointMustBeSpecified">
<summary>
Looks up a localized string similar to 'EntryPoint must be specified'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EnumerationDoesNotAllowNegativeValues">
<summary>
Looks up a localized string similar to 'Enumeration does not allow negative values'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EnumeratorIsEitherNotInitializedYedOrEnumerationHasAlreadyFinished">
<summary>
Looks up a localized string similar to 'Enumerator is either not initialized yed or enumeration has already finished'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EnumeratorIsPositionedOutsideIReadOnlyIndexableBounds">
<summary>
Looks up a localized string similar to 'Enumerator is positioned outside IReadOnlyIndexable bounds'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EnumTypeOfItemsPassedToStringEnumValueMustBeSameAsThatInTheTypeParameter">
<summary>
Looks up a localized string similar to 'EnumType of items passed to StringEnum_Value must be same as that in the Type parameter'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EOINotFound">
<summary>
Looks up a localized string similar to 'EOI not found'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ErrorWhileDeserializing0">
<summary>
Looks up a localized string similar to 'Error while deserializing {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ErrorWhileDeserializingLinkLabelItem">
<summary>
Looks up a localized string similar to 'Error while deserializing LinkLabelItem'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ErrorWhileParsing0Found1Expected2AtPosition3">
<summary>
Looks up a localized string similar to 'Error while parsing {0}. Found &apos;{1}&apos;, expected {2} at position {3}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.EscapeSequenceStringIsInInvalidFormat">
<summary>
Looks up a localized string similar to 'Escape sequence string is in invalid format.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ExifMapGeneratorCannotBeAttachedToMultipleReaders">
<summary>
Looks up a localized string similar to 'ExifMapGenerator cannot be attached to multiple readers'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ExifMapIsInvalidBecauseItContainsWriterGeneratedItems">
<summary>
Looks up a localized string similar to 'Exif map is invalid because it contains writer-generated items'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ExifMEtadataKeyMustContain2SeparatedParts">
<summary>
Looks up a localized string similar to 'Exif metadata key must contain 2 colon(:)-separated parts.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ExifPofSubIFDBeingAddedReplacedMustBeEitherNullOrSameAsExifOfParentIFD">
<summary>
Looks up a localized string similar to '&quot;Exif pof subIFD being added/replaced must be either null or same as Exif of parent IFD'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ExifRecordKeyMustBeValidUInt16Value">
<summary>
Looks up a localized string similar to 'Exif record key must be valid UInt16 value'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ExifStreamAndMapMustHaveSameLengths">
<summary>
Looks up a localized string similar to 'Exif stream and map must have same lengths'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ExtendedSizeTagsAreNotSupported">
<summary>
Looks up a localized string similar to 'Extended-size tags are not supported'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.File0AlreadyExists">
<summary>
Looks up a localized string similar to 'File {0} already exists.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.File0DoesNotExist">
<summary>
Looks up a localized string similar to 'File {0} does not exist.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.FileNotFound">
<summary>
Looks up a localized string similar to 'File not found.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.FinnishigIsNotAllowedInState0">
<summary>
Looks up a localized string similar to 'Finnishig is not allowed in state {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.FollowingIFDCannotBeSubIFD">
<summary>
Looks up a localized string similar to 'Following IFD cannot be SubIFD'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.FollowingIFDMustBeMemberOfSameExifOrBeMemberOfNoExifAsCurrentIFD">
<summary>
Looks up a localized string similar to 'Following IFD must be member of same Exif or be member of no Exif as current IFD.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ForUncompressedThumbnailStripOffsetsAndStripByteCountsMustHaveSameLength">
<summary>
Looks up a localized string similar to 'For uncompressed thumbnail StripOffsets and StripByteCounts must have same length'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.GivenIFDIsAlreadyInUse">
<summary>
Looks up a localized string similar to 'Given IFD is already in use'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.GivenInstanceWasNotCreatedFrom0">
<summary>
Looks up a localized string similar to 'Given instance was not created from {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.GivenKeyIsAlreadyPresentInTheDictionary">
<summary>
Looks up a localized string similar to 'Given key is already present in the dictionary'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.GivenMarkerSCodeDoesnTStartWithFFh">
<summary>
Looks up a localized string similar to 'Given marker&apos;s code doesn&apos;t start with FFh'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.GivenObjectCannotBeLocated">
<summary>
Looks up a localized string similar to 'Given object cannot be located.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.GivenStreamDoesNotSupportReading">
<summary>
Looks up a localized string similar to 'Given stream does not support reading'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.GivenTypeIsNotEnum">
<summary>
Looks up a localized string similar to 'Given type is not enum'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.GivenValueIsNotKnownSystemSound">
<summary>
Looks up a localized string similar to 'Given value is not known system sound'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.HasToManyDigits">
<summary>
Looks up a localized string similar to '{0} has to many digits'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.HexStringInvalid">
<summary>
Looks up a localized string similar to 'The provided string does not appear to be Hex encoded:'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IFDBeingSavedIsInvalidPointerToSubIFDMustHaveOneComponent">
<summary>
Looks up a localized string similar to 'IFD being saved is invalid: Pointer to SubIFD must have one component.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IFDIdentificationPartOfExifMetadataKeyIsInvalidItMust">
<summary>
Looks up a localized string similar to 'IFD identification part of Exif metadata key is invalid. It must be either E, G, I or number.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IFDPassedToTheIFD0PropertyCannotHaveThePreviousPropertySet">
<summary>
Looks up a localized string similar to 'IFD passed to the IFD0 property cannot have the Previous property set.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IFDPassedToTheIFD0PropertyMustEitherHaveNoExifAsociatedOrMustHaveAssociatedCurrrentInstance">
<summary>
Looks up a localized string similar to 'IFD passed to the IFD0 property must either have no Exif asociated or must have associated currrent instance.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IfParentIFDAlreadyContainsRecordThatIsAboutToBecomeParentRecordOfSubIFDItMustOfTypeOneElementOfTypeUInt32">
<summary>
Looks up a localized string similar to 'If parent IFD already contains record that is about to become parent record of subIFD it must of type one element of type UInt32'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ImageDataDoesNotContainEnoghBytes">
<summary>
Looks up a localized string similar to 'Image data does not contain enogh bytes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IncompleteFormatString">
<summary>
Looks up a localized string similar to 'Incomplete format string.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IndexMustBeInRangeDefinedByCounfOfIFDs">
<summary>
Looks up a localized string similar to 'Index must be in range defined by counf of IFDs'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IndexMustBeInRangeOfTheCollection">
<summary>
Looks up a localized string similar to 'index must be in range of the collection.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IndexWasOutOfRangeOfControlsCollection">
<summary>
Looks up a localized string similar to 'index was out of range of controls collection.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InternalObjectMustBeEitherUxThemeObjectOrNonThemedVisualStyleObject">
<summary>
Looks up a localized string similar to 'InternalObject must be either UxThemeObject or NonThemedVisualStyleObject'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidBitmapNumberOfBitsInBitmapMustBeMultiplicationOf460">
<summary>
Looks up a localized string similar to 'Invalid bitmap. Number of bits in bitmap must be multiplication of 460'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidBooleanValue">
<summary>
Looks up a localized string similar to 'Invalid boolean value {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidCharacterNear01">
<summary>
Looks up a localized string similar to 'Invalid character near &quot;{0}{1}&quot;'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidFormatSpecifier">
<summary>
Looks up a localized string similar to 'Invalid format specifier'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidFormatStringArgumentNumberExpected">
<summary>
Looks up a localized string similar to 'Invalid format string. Argument number expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidFormatStringExpectedWidthNumber">
<summary>
Looks up a localized string similar to 'Invalid format string. Expected width number.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidFormatStringExpectedWidthNumberOr">
<summary>
Looks up a localized string similar to 'Invalid format string. Expected width number or &quot;-&quot;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidFormatStringInvalidHexadecimalEscapeSequence">
<summary>
Looks up a localized string similar to 'Invalid format string. Invalid hexadecimal escape sequence'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidFormatStringInvalidUnicodeCodePoint0D">
<summary>
Looks up a localized string similar to 'Invalid format string. Invalid unicode code point {0:D}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidFormatStringInvalidUnicodeCodePoint0x0X">
<summary>
Looks up a localized string similar to 'Invalid format string. Invalid unicode code point 0x{0:x}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidFormatStringNumeralOrExpected">
<summary>
Looks up a localized string similar to 'Invalid format string. Numeral &quot;:&quot; or &quot;}&quot; expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidFormatStringNumeralOrExpected2">
<summary>
Looks up a localized string similar to 'Invalid format string. Numeral, &quot;,&quot;, &quot;:&quot; or &quot;}&quot; expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidRomanNumeralSequenceInvalidSubtraction">
<summary>
Looks up a localized string similar to 'Invalid Roman numeral sequence - invalid subtraction. Only allowed subtractions are IV, IX, XL, XC, CD and CM'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidValueForByteOrderTestAtExifHeader">
<summary>
Looks up a localized string similar to 'Invalid value for byte order test at Exif header '.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidValueReturnedByLoopFunction">
<summary>
Looks up a localized string similar to 'Invalid value {0} returned by loop function.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvalidVersionFormat">
<summary>
Looks up a localized string similar to '{0} is invalid version'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvallidNumberBase">
<summary>
Looks up a localized string similar to 'Base must be greater than zero'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.InvocationListOfDelegateMustHaveExactlyOneItem">
<summary>
Looks up a localized string similar to 'Invocation list of delegate must have exactly one item.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IPTCDataSetsLongerThat32767BytesAreNotSupported">
<summary>
Looks up a localized string similar to 'IPTC DataSets longer that 32767 bytes are not supported'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IsGreaterThanOrEqualToLenghtOfArray">
<summary>
Looks up a localized string similar to '{0} is greater than or equal to lenght of array'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IsMultidimensional">
<summary>
Looks up a localized string similar to '{0} is multidimensional'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IsNotAllowed">
<summary>
Looks up a localized string similar to '{0} is not allowed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IsNotMemberOf1">
<summary>
Looks up a localized string similar to '{0} is not member of {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.IsNotSupportedTypeOfXMLSerializedCodeDOMObject">
<summary>
Looks up a localized string similar to '{0} is not supported type of XML-serialized CodeDOM object.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ISO6391CodeMustContainExactly2LowercaseLatinLetters">
<summary>
Looks up a localized string similar to 'ISO 639-1 code must contain exactly 2 lowercase latin letters.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ISO6392CodeMustContainExactly3LowercaseLatinLetters">
<summary>
Looks up a localized string similar to 'ISO 639-2 code must contain exactly 3 lowercase latin letters.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ISO6392DuplicateCodeMustContainExactly3LowercaseLatinLetters">
<summary>
Looks up a localized string similar to 'ISO 639-2 duplicate code must contain exactly 3 lowercase latin letters.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Item0ContainsNonAlphaCharacter">
<summary>
Looks up a localized string similar to 'Item {0} contains non-alpha character'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Item0ContainsNonGraphicCharacter">
<summary>
Looks up a localized string similar to 'Item {0} contains non-graphic character'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Item0ContainsNonGraphicNonSpaceCharacter">
<summary>
Looks up a localized string similar to 'Item {0} contains non-graphic-non-space character'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Item0ContainsNonGraphicNonSpaceNonCrNonLfCharacter">
<summary>
Looks up a localized string similar to 'Item {0} contains non-graphic-non-space-non-cr-non-lf character'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.JPEGFileDoesnTEndWithCorrectEOIMarker">
<summary>
Looks up a localized string similar to 'JPEG file doesn&apos;t end with correct EOI marker'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.JPEGFileDoesnTStartWithCorrectSOIMarker">
<summary>
Looks up a localized string similar to 'JPEG file doesn&apos;t start with correct SOI marker'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.JPEGThumbnailSizeIsSpecifiedToBeOutsideOfExifStream">
<summary>
Looks up a localized string similar to 'JPEG thumbnail size is specified to be outside of Exif stream'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Key0CanHoldOnlyIFDOfType1">
<summary>
Looks up a localized string similar to 'Key {0} can hold only IFD of type {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.KeyIsInvalidForIPTCMetadata">
<summary>
Looks up a localized string similar to 'Key is invalid for IPTC metadata.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LenCannotBe0WhenFixedIsTrue">
<summary>
Looks up a localized string similar to 'Len cannot be 0 when Fixed is true'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LenghtConstraintViolation">
<summary>
Looks up a localized string similar to 'Lenght constraint violation.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LenghtOf0MustFitInto1">
<summary>
Looks up a localized string similar to 'Lenght of {0} must fit into {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LenghtOfSerialized0DiffersFrom1Bytes">
<summary>
Looks up a localized string similar to 'Lenght of serialized {0} differs from {1} bytes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LenghtOfSerializedNameExceeds0Bytes">
<summary>
Looks up a localized string similar to 'Lenght of serialized name exceeds {0} bytes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LenghtOfSubjectNameMustFitInto64">
<summary>
Looks up a localized string similar to 'Lenght of SubjectName must fit into 64'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LenghtOfSubjectReferenceMustFitInto64">
<summary>
Looks up a localized string similar to 'Lenght of SubjectReference must fit into 64'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LengthOf0MustBeNonZero">
<summary>
Looks up a localized string similar to 'Length of {0} must be non-zero'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LengthOfDataStoredUnderThisTagIsDifferentFrom8WhichIsNecessaryForDatatypeCCYYMMDD">
<summary>
Looks up a localized string similar to 'Length of data stored under this tag is different from 8 which is necessary for datatype CCYYMMDD'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LengthOfDataStoredUnderThisTagIsDifferentThen11WhichIsNecessaryForDatatypeHHMMSSHHMM">
<summary>
Looks up a localized string similar to 'Length of data stored under this tag is different then 11 which is necessary for datatype HHMMSS_HHMM'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LengthOfODEAndIPRTogetherWithSeparatorsMustWitInto61">
<summary>
Looks up a localized string similar to 'Length of ODE and IPR together with separators must wit into 61'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LengthOfSerialized0IsNotWithinRange12Bytes">
<summary>
Looks up a localized string similar to 'Length of serialized {0} is not within range {1}÷{2} bytes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LigatureToChar">
<summary>
Looks up a localized string similar to 'Ligature cannot be converted to single character'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LinkLabelInternalErrorItemFoundInItemsButNotFoundInLinks">
<summary>
Looks up a localized string similar to 'LinkLabel internal error: Item found in Items but not found in Links'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.LinkLabelInternalExceptionLinkForItemNotFound">
<summary>
Looks up a localized string similar to 'LinkLabel internal exception: Link for item not found'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ListIsLocked">
<summary>
Looks up a localized string similar to 'List is locked'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ListOfExceptionsCannotBeEmpty">
<summary>
Looks up a localized string similar to 'List of exceptions cannot be empty.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ListWithEventsDoesNotSupportSearching">
<summary>
Looks up a localized string similar to 'ListWithEvents does not support searching'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ListWithEventsDoesNotSupportSorting">
<summary>
Looks up a localized string similar to 'ListWithEvents does not support sorting'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MaximumBaseSupported">
<summary>
Looks up a localized string similar to 'Maximum supported base is {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MenuItemDoesnTExist">
<summary>
Looks up a localized string similar to 'Menu item doesn&apos;t exist'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MessageBoxCannotBeReCycledWhenItIsShown">
<summary>
Looks up a localized string similar to 'MessageBox cannot be re-cycled when it is shown.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MessageBoxMustBeInCreatedStateInOrderToBeDisplyedByPerformDialog">
<summary>
Looks up a localized string similar to 'MessageBox must be in Created State in order to be displyed by PerformDialog.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MessageBoxMustOwnThisInstanceInOrderThisInstanceToBe">
<summary>
Looks up a localized string similar to 'MessageBox must own this instance in order this instance to be associated with it.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MethodDeclaringTypeAndTypeToGetMethodOfMustBeCreated">
<summary>
Looks up a localized string similar to 'Method declaring type and type to get method of must be created from the same generic type.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MultipleExceptionClassRequiresAtLeast2Excptions">
<summary>
Looks up a localized string similar to 'MultipleException class requires at least 2 excptions.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MultipleExceptionsHaveOccured">
<summary>
Looks up a localized string similar to 'Multiple exceptions have occured.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBe1">
<summary>
Looks up a localized string similar to '{0} must be {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBe1Dimensional">
<summary>
Looks up a localized string similar to '{0} must be 1-dimensional'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeDecoratedWith1">
<summary>
Looks up a localized string similar to '{0} must be decorated with {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeEnumeration">
<summary>
Looks up a localized string similar to '{0} must be enumeration'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeEqualToOrGreaterThan1">
<summary>
Looks up a localized string similar to '{0} must be equal to or greater than {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeFromRange12Or3IfUnknown">
<summary>
Looks up a localized string similar to '{0} must be from range {1}÷{2} or {3} if unknown'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeGenericTypeInstance">
<summary>
Looks up a localized string similar to '{0} must be generic type instance.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeGreaterThanOrEqualTo1">
<summary>
Looks up a localized string similar to '{0} must be greater than or equal to {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeGreaterThanOrEqualToZero">
<summary>
Looks up a localized string similar to '{0} must be greater than or equal to zero'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeInWholeMinutes">
<summary>
Looks up a localized string similar to '{0} must be in whole minutes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeLessThenOrEqualTo1">
<summary>
Looks up a localized string similar to '{0} must be less then or equal to {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeMemberOf0CollectionOf2">
<summary>
Looks up a localized string similar to '{0} must be member of {1} collection of {2}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeMemberOfEnumeration1">
<summary>
Looks up a localized string similar to '{0} must be member of enumeration {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeNonNegative">
<summary>
Looks up a localized string similar to '{0} must be non-negative'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeOneOf1Or2Values">
<summary>
Looks up a localized string similar to '{0} must be one of {1} or {2} values'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBePositive">
<summary>
Looks up a localized string similar to '{0} must be positive'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBePositiveAndLessThan1H0MmSs">
<summary>
Looks up a localized string similar to '{0} must be positive and less than {1:h(0):mm:ss}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeStringWithLengthFrom1To2Characters">
<summary>
Looks up a localized string similar to '{0} must be string with length from {1} to {2} characters'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeWithinRange01">
<summary>
Looks up a localized string similar to '{2} must be within range {0}÷{1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeWithinRange12">
<summary>
Looks up a localized string similar to '{0} must be within range &lt;{1}; {2})'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustBeWithinRangeOfValuesOfType1">
<summary>
Looks up a localized string similar to '{0} must be within range of values of type {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustContainAtLeast1Items">
<summary>
Looks up a localized string similar to '{0} must contain at least {1} items'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustContainAtLeastOneItem">
<summary>
Looks up a localized string similar to '{0} must contain at least one item.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustContainExactly1Parts">
<summary>
Looks up a localized string similar to '{0} must contain exactly {1} parts'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustNotBeNull">
<summary>
Looks up a localized string similar to '{0} must not be null'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.MustRepresentXMLElement1">
<summary>
Looks up a localized string similar to '{0} must represent XML element {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Namespace0HasNoPrefixAssociatedAndItIsNotDefaultNamespace">
<summary>
Looks up a localized string similar to 'Namespace {0} has no prefix associated and it is not default namespace.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NamespacePrefix0IsNotDefined">
<summary>
Looks up a localized string similar to 'Namespace prefix {0} is not defined'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NegativeValueUnsupported">
<summary>
Looks up a localized string similar to 'Negative values are not supported'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NoCastOperatorIsMostSpecific">
<summary>
Looks up a localized string similar to 'No cast operator is most specific'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NoConditionWasTrue">
<summary>
Looks up a localized string similar to 'No condition was true.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NoJPEGMarkerFound">
<summary>
Looks up a localized string similar to 'No JPEG marker found'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NoPropertyIsMostSpecific">
<summary>
Looks up a localized string similar to 'No {0} property is most specific'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NoSuitablePropertyFound">
<summary>
Looks up a localized string similar to 'No suitable {0} property found'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NotEnoughSpaceInDestinationArray">
<summary>
Looks up a localized string similar to 'Not enough space in destination array.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NotFoundIn1">
<summary>
Looks up a localized string similar to '{0} not found in {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Number0CannotBeStoredIn1Bytes">
<summary>
Looks up a localized string similar to 'Number {0} cannot be stored in {1} bytes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NumberCannotConsistOfSignOnly">
<summary>
Looks up a localized string similar to 'Number cannot consist of sign only.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NumberOfBitIn0MustBeLessThat1">
<summary>
Looks up a localized string similar to 'Number of bit in {0} must be less that {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NumberOfComponentsOf0MustBeFrom1To2">
<summary>
Looks up a localized string similar to 'Number of components of {0} must be from {1} to {2}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NumberOfElementsCannotBe0">
<summary>
Looks up a localized string similar to 'Number of elements cannot be 0'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NumberOfItemsOf0DiffersFrom1">
<summary>
Looks up a localized string similar to 'Number of items of {0} differs from {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.NumeralCharactersMustBeDistinct">
<summary>
Looks up a localized string similar to 'Numeral characters must be distinct'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ObjectOfType0CannotBeSerializedAsPrimitiveObject">
<summary>
Looks up a localized string similar to 'Object of type {0} cannot be serialized as primitive object.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Only124And8BytesIntegersCanBeReadVia0">
<summary>
Looks up a localized string similar to 'Only 1,2,4 and 8-bytes integers can be read via {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OnlyAllowedValuesForBlobTypeAreUnknownJpegThumbnailAndTiffThumbnailPart">
<summary>
Looks up a localized string similar to 'Only allowed values for BlobType are Unknown, JpegThumbnail and TiffThumbnailPart'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OnlyGraphicCharactersAreAllowedIn0">
<summary>
Looks up a localized string similar to 'Only graphic characters are allowed in {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OnlyIListInstancesCanBeUsedInListWrapper">
<summary>
Looks up a localized string similar to 'Only IList instances can be used in ListWrapper'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OnlySoundsOfTypeSystemSoundPlayerAndSoundPlayerWrapperAreSupported">
<summary>
Looks up a localized string similar to 'Only sounds of type SystemSoundPlayer and SoundPlayerWrapper are supported'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OnlySoundsWithKnownLocationCanBeConverted">
<summary>
Looks up a localized string similar to 'Only sounds with known location can be converted'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OnlyValuesOfFollowingTypesAreAcceptable">
<summary>
Looks up a localized string similar to 'Only values of following types are acceptable:'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OnlyValuesOfType0AreAcceptable">
<summary>
Looks up a localized string similar to 'Only values of type {0} are acceptable'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OnlyValueSOfType0CanBeEditedBy0">
<summary>
Looks up a localized string similar to 'Only value s of type {0} can be edited by {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OperationWasCancelled">
<summary>
Looks up a localized string similar to 'Operation was cancelled.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Or_">
<summary>
Looks up a localized string similar to 'or'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.OriginalExifStreamMustBeAlLeast12BytesLong">
<summary>
Looks up a localized string similar to 'Original Exif stream must be al least 12 bytes long.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ParentIFDOfSubIFDBeingAddedReplacedMustMeNull">
<summary>
Looks up a localized string similar to 'ParentIFD of subIFD being added/replaced must me null.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ParentTypeOf0MustBe1">
<summary>
Looks up a localized string similar to 'Parent type of {0} must be {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Path">
<summary>
Looks up a localized string similar to 'Path'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Path0DoesNotExist">
<summary>
Looks up a localized string similar to 'Path {0} does not exist.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.PathCannotBeBasedOnAnEmptyStringOrStringContainingOnlyWhitespaces">
<summary>
Looks up a localized string similar to 'Path cannot be based on an empty string or string containing only whitespaces'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.PathCannotBeBasedOnNullString">
<summary>
Looks up a localized string similar to 'Path cannot be based on null string'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.PathStringContainsInvalidCharacter0">
<summary>
Looks up a localized string similar to 'Path string contains invalid character &apos;{0}&apos;'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.PreserveThumbnailCannotBeChangedAfterWritingOfDataStarted">
<summary>
Looks up a localized string similar to 'PreserveThumbnail cannot be changed after writing of data started.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Property0HasAlreadyBeenSetAndItCannotBeChanged">
<summary>
Looks up a localized string similar to 'Property {0} has already been set and it cannot be changed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.PropertyIsReadOnly">
<summary>
Looks up a localized string similar to 'Property is read only'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.PropertyMustBeSet">
<summary>
Looks up a localized string similar to '{0} must be set'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.PropertyWasAlreadySet">
<summary>
Looks up a localized string similar to 'Property {0} was already set'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ProviderDoesNotProviderService">
<summary>
Looks up a localized string similar to 'Provider does not provider service {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RecordMustBeFrom0To9">
<summary>
Looks up a localized string similar to 'Record must be from 0 to 9'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RecordNumberPartOfExifMetadataIdentificationIsInvalid">
<summary>
Looks up a localized string similar to 'Record number part of Exif metadata identification is invalid.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RecordsCanBeWrittenOnlyWhenWriterStateIsRecords">
<summary>
Looks up a localized string similar to 'Records can be written only when WriterState is Records'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RecycleInternalCanBeCalledOnlyOnClosedMessagebox">
<summary>
Looks up a localized string similar to 'RecycleInternal can be called only on closed messagebox.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RegistryHiveIsNoLongerSupported">
<summary>
Looks up a localized string similar to 'The {0} registry hive is no longer supported'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RemovingWasCenceledInEventHandler">
<summary>
Looks up a localized string similar to 'Removing was cenceled in event handler'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RendererMustRender0">
<summary>
Looks up a localized string similar to 'Renderer must render {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ReportedLengthOf8BIMSegmentDoesnFFitIntoBaseStream">
<summary>
Looks up a localized string similar to 'Reported length of 8BIM segment doesn&apos;f fit into base stream'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ResultCannotBeNone">
<summary>
Looks up a localized string similar to 'Result cannot be None'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Retuned1">
<summary>
Looks up a localized string similar to '{0} retuned {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RootElementMustBe0">
<summary>
Looks up a localized string similar to 'Root element must be &lt;{0}&gt;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RootElementMustBe0Or1">
<summary>
Looks up a localized string similar to 'Root element must be &lt;{0}&gt; or &lt;{1}&gt;'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.RootElementOf0MustBe1">
<summary>
Looks up a localized string similar to 'Root element of {0} must be {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SerializedValueHasNotLength2Bytes">
<summary>
Looks up a localized string similar to 'Serialized value has not length 2 bytes.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ShouldBeGreaterThanZero">
<summary>
Looks up a localized string similar to '{0} should be greater than zero'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SizeOfConstrainedStreamMustFitIntoBaseStream">
<summary>
Looks up a localized string similar to 'Size of constrained stream must fit into base stream.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SlashExpected">
<summary>
Looks up a localized string similar to '/ expected'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SourceFileOrDirectoryNotFound">
<summary>
Looks up a localized string similar to 'Source file or directory not found'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StoredItemLenghtMustBe0">
<summary>
Looks up a localized string similar to 'Stored item lenght must be {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StoredTimeDoesNotContainValidCharacterOnTimeZoneOffsetSignPosition">
<summary>
Looks up a localized string similar to 'Stored time does not contain valid character on time zone offset sign position'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StoredValueHasInvalidLenght">
<summary>
Looks up a localized string similar to 'Stored value has invalid lenght'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StreamCannotBeUpdatedBecauseItsContentDiffersFromContent">
<summary>
Looks up a localized string similar to 'Stream cannot be updated because its content differs from content of stream this instance was created from.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StreamCannotBeUpdatedBycauseItHasDifferentLengthFrom">
<summary>
Looks up a localized string similar to 'Stream cannot be updated bycause it has different length from stream this instance was created from.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StreamDoesNotSupportSeekingOrReading">
<summary>
Looks up a localized string similar to 'Stream does not support seeking or reading'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StreamMustSupportReadingAndSeeking">
<summary>
Looks up a localized string similar to 'Stream must support reading and seeking'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StreamRepresentingExifMetadataItemMustSupportSeekingAndReading">
<summary>
Looks up a localized string similar to 'Stream representing Exif metadata item must support seeking and reading.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StreamToReadJPEGFromMustBeAbleToSeekAndRead">
<summary>
Looks up a localized string similar to 'Stream to read JPEG from must be able to seek and read'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StreamToWriteExifMedatadaToMustSupportReadingWritingAndSeeking">
<summary>
Looks up a localized string similar to 'Stream to write Exif medatada to must support reading, writing and seeking.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.String0CanotBeStoredWithoutViolatingLengthAndOrFixedConstraint">
<summary>
Looks up a localized string similar to 'String &quot;{0}&quot; canot be stored without violating length and/or fixed constraint'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.String0IsNotValid1">
<summary>
Looks up a localized string similar to 'String &quot;{0}&quot; is not valid {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.String0RepresentsHigherNumberThanMaximum1">
<summary>
Looks up a localized string similar to 'String {0} represents higher number than maximum {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StringIsNotValidDescription">
<summary>
Looks up a localized string similar to 'String &quot;{0}&quot; is not valid description of {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.StringMustConsistOfEventNumberOfHexadeimalNumerals">
<summary>
Looks up a localized string similar to 'String must consist of event number of hexadeimal numerals'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SubIFD">
<summary>
Looks up a localized string similar to 'SubIFD'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SubIFDKeyMustBeValidUInt16Value">
<summary>
Looks up a localized string similar to 'SubIFD key must be valid UInt16 value'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SubjectNameCanContainOnlyGraphicCharactersExceptAnd">
<summary>
Looks up a localized string similar to 'SubjectName can contain only graphic characters except :, ? and *'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SubjectReferenceNumberMustBeMemberOfEitherSubjectReferenceNumbersSubjectMatterNumbersOrEconomySubjectDetail">
<summary>
Looks up a localized string similar to 'SubjectReferenceNumber must be member of either SubjectReferenceNumbers, SubjectMatterNumbers or EconomySubjectDetail'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SuppliedStreamByteOrderDoesNotMatchByteOrderTestWord">
<summary>
Looks up a localized string similar to 'Supplied stream byte order does not match byte order test word.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SuppliedStreamHasInvalidByteOrderMarker">
<summary>
Looks up a localized string similar to 'Supplied stream has invalid byte order marker.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SupportsNeitherWritingNorSeeking">
<summary>
Looks up a localized string similar to '{0} supports neither writing nor seeking'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormastStringExpectedAt0">
<summary>
Looks up a localized string similar to 'Syntax error in formast string. &apos;]&apos; expected at {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringDMustBeFollowedWithAt0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. &apos;D&apos; must be followed with &apos;(&apos; at {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringLMustBeFollowedWithAt0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. &apos;L&apos; must be followed with &apos;(&apos; at {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringMMustBeFollowedWithAt0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. &apos;M&apos; must be followed with &apos;(&apos; at {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringMustBeFollowedWithDOrDAt0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. &apos;[&apos; must be followed with &apos;d&apos; or &apos;D&apos; at {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringSMustBeFollowedWithAt0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. &apos;S&apos; must be followed with &apos;(&apos; at {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringTMustBeFollowedByAt0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. &apos;T&apos; must be followed by &apos;(&apos; at {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedCharacter0InConditionAt1ExpectedComparisonOperator">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected character &apos;{0}&apos; in condition at {1}. Expected comparison operator.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedCharacter0InConditionLeftSideAbsoluteValueAt1Expected2">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected character &apos;{0}&apos; in condition left side absolute value at {1}. Expected &apos;{2}&apos;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedCharacterInFormatStringConditionLeftSide0At1">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected character in format string (condition left side) {0} at {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedCharacterInFormatStringConditionLeftSideAbsoluteValue0At1">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected character in format string (condition left side absolute value) {0} at {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFomatStringAt0ExpectedForCondition">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of fomat string at {0}. Expected &apos;)&apos; for condition.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0ExpectedComparisonOperator">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Expected comparison operator.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0ExpectedNumberOr">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Expected number or &apos;)&apos;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0NumberExpected">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Number expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0NumberOrExpected">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Number, &apos;.&apos; or &apos;:&apos; expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0NumberOrExpected_">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Number or &apos;:&apos; expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0NumberOrExpected__">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Number or &apos;.&apos; expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionLeftSide0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition left side {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionLeftSideAbsoluteValue0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition left side absolute value {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionLeftSideAbsoluteValueAt0Expected1">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition left side absolute value at {0}. Expected &apos;{1}&apos;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInInnerFormatSpecificationAt0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in inner format specification at {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInQuotedStringAt0">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unexpected end of format string in quoted string at {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1ExpectedNumberOr">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Expected number or &apos;)&apos;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1NumberExpected">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Number expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1NumberOrExpected">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Number, &apos;.&apos; or &apos;:&apos; expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1NumberOrExpected_">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Number or &apos;:&apos; expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1NumberOrExpected__">
<summary>
Looks up a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Number or &apos;.&apos; expected.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.SystemSoundPlayerWrapperCanBeConvertedOnlyWhenItProvidesSoundLocation">
<summary>
Looks up a localized string similar to 'SystemSoundPlayerWrapper can be converted only when it provides sound location.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TagMarkerMustBe1Ch">
<summary>
Looks up a localized string similar to 'Tag marker must be 1Ch'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TargetCannotBeUpdatedBecauseItContainsNoExifData">
<summary>
Looks up a localized string similar to 'Target cannot be updated, because it contains no Exif data.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TextCannotBeChangedViaTheTextProperty">
<summary>
Looks up a localized string similar to 'Text cannot be changed via the Text property'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TextMustBeEncodeableByASCII">
<summary>
Looks up a localized string similar to '{0} text must be encodeable by ASCII'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.The0MarkupExtensionRequiresAn1ServiceProvider">
<summary>
Looks up a localized string similar to 'The {0} markup extension requires an {1} service provider'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.The0PropertyHaveAlreadyBeenInitialized">
<summary>
Looks up a localized string similar to 'The {0} property have already been initialized.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TheBeginnignOfExifMapIsInvalid">
<summary>
Looks up a localized string similar to 'The beginnign of Exif map is invalid'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TheCollectionChangeActionOtherActionAndActionsThatAreNotMembersOfTheCollectionActionEnumerationAreNotSupportedOn0Collection">
<summary>
Looks up a localized string similar to 'The CollectionChangeAction.Other action and actions that are not members of the CollectionAction enumeration are not supported on {0} collection.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TheEnumerationHasNotStartedYetOrHasAlreadyFinished">
<summary>
Looks up a localized string similar to 'The enumeration has not started yet or has already finished.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TheFile0CannotBeFound">
<summary>
Looks up a localized string similar to 'The file {0} cannot be found.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TheImageFileIsInvalid">
<summary>
Looks up a localized string similar to 'The image file is invalid.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TheLenghtOf0ExceedsLimit">
<summary>
Looks up a localized string similar to 'The lenght of {0} exceeds limit'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThePathSDepthIsNotEnoughToRemove0Levels">
<summary>
Looks up a localized string similar to 'The path&apos;s depth is not enough to remove {0} levels'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThePreviousPropertyOfIFDBeingSetAsFollowingMustBeNull">
<summary>
Looks up a localized string similar to 'The Previous property of IFD being set as following must be null'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThereAreNotEnoughtItemsIn0">
<summary>
Looks up a localized string similar to 'There are not enought items in {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThereIsAlreadyDirectoryNamed0">
<summary>
Looks up a localized string similar to 'There is already directory named {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThereIsNotEngoughSpaceInArrayAfter0ToPlaceAllItemsFromCollection">
<summary>
Looks up a localized string similar to 'There is not engough space in array after {0}  to place all items from collection'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThereIsNotEnoughSpaceBetween0AndTheEndOfTheArrayForItemsStoredInCollection">
<summary>
Looks up a localized string similar to 'There is not enough space between {0} and the end of the array for items stored in collection'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThereIsNotEnoughtResults">
<summary>
Looks up a localized string similar to 'There is not enought results.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThereWasAnErrorInvokingMessageBoxSeeInnerExceptionForDetails">
<summary>
Looks up a localized string similar to 'There was an error invoking MessageBox. See inner exception for details.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThereWasAnErrorObtaininInstanceOfDefaultImplementationOfMessageBoxSeeInnerExceptionForDetails">
<summary>
Looks up a localized string similar to 'There was an error obtainin instance of default implementation of MessageBox. See inner exception for details.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThereWasAnErrorSavingFile0">
<summary>
Looks up a localized string similar to 'There was an error saving file {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TheTagsPropertyHaveNotBeenInitializedUseTheSetTagsMethodToInitializeIt">
<summary>
Looks up a localized string similar to 'The Tags property have not been initialized. Use the SetTags method to initialize it.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.This0CannotBeConvertedTo1BecauseItDoesnTContain1">
<summary>
Looks up a localized string similar to 'This {0} cannot be converted to {1} because it doesn&apos;t contain {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisControlIsAlreadyUsedByMessageBoxItCannotBeUsedTwice">
<summary>
Looks up a localized string similar to 'This control is already used by message box. It cannot be used twice.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisConverterCanConvertBackOnlyFrom0">
<summary>
Looks up a localized string similar to 'This converter can convert back only from {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisConverterCanConvertBackOnlyTo0">
<summary>
Looks up a localized string similar to 'This converter can convert back only to {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisConverterCanConvertOnlyBetweenTypes0And1">
<summary>
Looks up a localized string similar to 'This converter can convert only between types {0} and {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisConverterCanConvertOnlyFrom0">
<summary>
Looks up a localized string similar to 'This converter can convert only from {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisConverterCanConvertOnlyTo0">
<summary>
Looks up a localized string similar to 'This converter can convert only to {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisEnumerationDoesNotAllowValuesThatAreNotMemberOfIt">
<summary>
Looks up a localized string similar to 'This enumeration does not allow values that are not member of it'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisInstanceIsLocked">
<summary>
Looks up a localized string similar to 'This instance is locked'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisInstanceWasCreatedFromSizeChangedEventArgsWhich">
<summary>
Looks up a localized string similar to 'This instance was created from SizeChangedEventArgs which&apos;s OriginalSource is not UIElement'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisInstanceWasNotCreatedForUpdating">
<summary>
Looks up a localized string similar to 'This instance was not created for updating'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisStreamDoesNotSupportSeeking">
<summary>
Looks up a localized string similar to 'This stream does not support seeking.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisStreamDoesNotSupportWriting">
<summary>
Looks up a localized string similar to 'This stream does not support writing.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThisT1orT2CannotBeConvertedTo0BecauseItDoesnTContainValueOf1">
<summary>
Looks up a localized string similar to 'This T1orT2 cannot be converted to {0} because it doesn&apos;t contain value of {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThousandMultiplicationSuffixMustDifferFromNumerals">
<summary>
Looks up a localized string similar to 'Thousand multiplication suffix must differ from numerals.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThumbnailCanBePreservedOnlyIfExifWriterOperatesOverAlreadyExistingStreamOfExifMetadata">
<summary>
Looks up a localized string similar to 'Thumbnail can be preserved only if Exif writer operates over already-existing stream of Exif metadata.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ThumbnailDataAreInvalid">
<summary>
Looks up a localized string similar to 'Thumbnail data are invalid'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TiffThumbnailSizeIsSpecifiedToBeOutsideOfExifStream">
<summary>
Looks up a localized string similar to 'Tiff thumbnail size is specified to be outside of Exif stream.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TimeMustBeNonNegativeAndLessThen1Day">
<summary>
Looks up a localized string similar to 'Time must be non-negative and less then 1 day'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ToManyCLSCompliantAttributes">
<summary>
Looks up a localized string similar to 'To many CLSCompliant attributes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Type0IsNotAcceptableForDataType1">
<summary>
Looks up a localized string similar to 'Type {0} is not acceptable for data type {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Type0IsNotSupported">
<summary>
Looks up a localized string similar to 'Type {0} is not supported'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Type0IsNotSupportedAsValueOfStatusedControlProperty">
<summary>
Looks up a localized string similar to 'Type {0} is not supported as value of StatusedControl property.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TypeIsNotGeneric">
<summary>
Looks up a localized string similar to 'Type is not generic.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TypeIsSpecifiedNeitherViaPropertyNorInValue">
<summary>
Looks up a localized string similar to 'Type is specified neither via property nor in value'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TypeMustBeEnumeration">
<summary>
Looks up a localized string similar to 'Type must be enumeration'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TypeMustInheritFromMessageBox">
<summary>
Looks up a localized string similar to 'Type must inherit from MessageBox'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TypeNotEnum">
<summary>
Looks up a localized string similar to 'Type {0} is not enum'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.TypeOfIFDFollowingAfterIFD0MustBeIFDMain">
<summary>
Looks up a localized string similar to 'Type of IFD following after IFD0 must be IFDMain'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Types0And1AreNotCompatible">
<summary>
Looks up a localized string similar to 'Types {0} and {1} are not compatible'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnableToCastType0ToType1">
<summary>
Looks up a localized string similar to 'Unable to cast type {0} to type {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnexpectedCallOf0">
<summary>
Looks up a localized string similar to 'Unexpected call of {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnexpectedCharacter0">
<summary>
Looks up a localized string similar to 'Unexpected character {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnexpectedCharacter0InRomanNumeral">
<summary>
Looks up a localized string similar to 'Unexpected character {0} in Roman numeral.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnexpectedCharacters0InRomanNumeral">
<summary>
Looks up a localized string similar to 'Unexpected characters {0} in Roman numeral'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnexpedtedValue0">
<summary>
Looks up a localized string similar to 'Unexpedted value {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnknownBaseTypeOfEnum">
<summary>
Looks up a localized string similar to 'Unknown base type of enum'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnknownByteOrderMark">
<summary>
Looks up a localized string similar to 'Unknown byte order mark '.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnknownImageExtensionImageWillNotBeSaved">
<summary>
Looks up a localized string similar to 'Unknown image extension, image will not be saved.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnknownISO2022EncodingType0">
<summary>
Looks up a localized string similar to 'Unknown ISO-2022 encoding type {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnknownPredefinedName0">
<summary>
Looks up a localized string similar to 'Unknown predefined name &quot;{0}&quot;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnknownState0">
<summary>
Looks up a localized string similar to 'Unknown state {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnknownSystemMetadataItemName">
<summary>
Looks up a localized string similar to '{0} is not known system metadata item name.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnknownUnderlyingType0">
<summary>
Looks up a localized string similar to 'Unknown underlying type {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Unsupported0Value">
<summary>
Looks up a localized string similar to 'Unsupported {0} value.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnsupportedCodeDomObject0">
<summary>
Looks up a localized string similar to 'Unsupported CodeDom object {0}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnsupportedElement">
<summary>
Looks up a localized string similar to 'Unsupported element {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnsupportedSourceType">
<summary>
Looks up a localized string similar to 'Unsupported source type'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnsupportedTargetType">
<summary>
Looks up a localized string similar to 'Unsupported target type'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnsupportedTypeForComparison0">
<summary>
Looks up a localized string similar to 'Unsupported type for comparison ({0}).'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.UnsupportedTypeOfMemberInfoOfNamedArgumentOfAttribute">
<summary>
Looks up a localized string similar to 'Unsupported type of MemberInfo of named argument of attribute'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.Value0CannotBeInterperetedAsRationalToManySlashes">
<summary>
Looks up a localized string similar to 'Value {0} cannot be interpereted as rational - to many slashes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueCanBeConverterNeitherTo0NorTo1">
<summary>
Looks up a localized string similar to 'Value can be converter neither to {0} nor to {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueCannotBeEmptyString">
<summary>
Looks up a localized string similar to 'Value cannot be empty string'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueCannotBeNaNOrInfinity">
<summary>
Looks up a localized string similar to 'Value cannot be NaN or infinity'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueIsInvalidASCIIValueBecauseItIsNotTerminatedWith">
<summary>
Looks up a localized string similar to 'Value is invalid ASCII value because it is not terminated with nullchar.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueMustBeFor">
<summary>
Looks up a localized string similar to '{0} must be {1} for {2}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfIncompatibleTypeIsBeingSet">
<summary>
Looks up a localized string similar to 'Value of incompatible type is being set'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfIncompatibleTypePassedToASCIIRecord">
<summary>
Looks up a localized string similar to 'Value of incompatible type passed to ASCII record'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfIncompatibleTypePassedToExifRecord">
<summary>
Looks up a localized string similar to 'Value of incompatible type passed to Exif record'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfObjeValuePropertyMustBeEitherOfTypeT1OrOfTypeT1">
<summary>
Looks up a localized string similar to 'Value of ObjeValue property must be either of type T1 or of type T1'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfSomeTypeWasPassedWhereItIsNotAcceptable">
<summary>
Looks up a localized string similar to 'Value of some type was passed where it is not acceptable.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfThe0PropertyCannotBeChangedAfterItWasSet">
<summary>
Looks up a localized string similar to 'Value of the {0} property cannot be changed after it was set.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfType0CannotBeConvertedTo1">
<summary>
Looks up a localized string similar to 'Value of type {0} cannot be converted to {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfType0CannotBeDeserializedStandAloneBecauseIts">
<summary>
Looks up a localized string similar to 'Value of type {0} cannot be deserialized stand-alone, because its object representation does not inherit from CodeObject.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfType0IsNotAcceptable">
<summary>
Looks up a localized string similar to 'Value of type {0} is not acceptable.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfUnexpectedType0Expected1">
<summary>
Looks up a localized string similar to 'Value of unexpected type {0}. Expected {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueOfUnexpectedType0ExpectedOneOfFollowingTypes">
<summary>
Looks up a localized string similar to 'Value of unexpected type {0}, expected one of following types:'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.ValueWasNotFound">
<summary>
Looks up a localized string similar to 'Value was not found'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.VersionComponentMustBeGreaterThanOrEqualToZero">
<summary>
Looks up a localized string similar to 'Version component must be greater than or equal to zero'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.VersionPartToVersionMinorNull">
<summary>
Looks up a localized string similar to 'Cannot convert VersionPart to Version when Minor is not set.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WasGreaterThanLegnthOf2">
<summary>
Looks up a localized string similar to '{0} + {1} was greater than legnth of {2}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WasInfinity">
<summary>
Looks up a localized string similar to '{0} was infinity'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WasNaN">
<summary>
Looks up a localized string similar to '{0} was NaN'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WasNotMemberOf">
<summary>
Looks up a localized string similar to '{0} was not member of {1}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.When0Is12MustBe3">
<summary>
Looks up a localized string similar to 'When {0} is {1}, {2} must be {3}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.When0Is1Then2MustBeSet">
<summary>
Looks up a localized string similar to 'When {0} is {1} then {2} must be set'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.When0Is1ThenTypeOfThisInstanceMustBe2">
<summary>
Looks up a localized string similar to 'When {0} is {1} then type of this instance must be {2}'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WhenFixedIsTrueLenCannotBe0">
<summary>
Looks up a localized string similar to 'When Fixed is True Len cannot be 0'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WhenStageIsGetConstructorArgumentsGetNamedArgumentsInvokeConstructorGetConstructorArgumentValueSetFieldSetPropertyInvokeMethodOrGetNamedArgumentValueCustomAttributeDataCannotBeNull">
<summary>
Looks up a localized string similar to 'When Stage is GetConstructorArguments, GetNamedArguments, InvokeConstructor, GetConstructorArgumentValue, SetField, SetProperty, InvokeMethod or GetNamedArgumentValue CustomAttributeData cannot be null.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WhenStageIsGetConstructorArgumentValueArgumentIndexMustBeWithinRangeOfCustomAttributeDateConstructorArguments">
<summary>
Looks up a localized string similar to 'When Stage is GetConstructorArgumentValue, ArgumentIndex must be within range of CustomAttributeDate.ConstructorArguments'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WhenStageIsGetConstructorArgumentValueArgumentIndexMustBeWithinRangeOfCustomAttributeDateNamedArguments">
<summary>
Looks up a localized string similar to 'When Stage is GetConstructorArgumentValue, ArgumentIndex must be within range of CustomAttributeDate.NamedArguments'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WhenStageIsGetCustomAttributeDateOrGetCustomAttributesCustomAttribuetDataMustBeNullAndArgumentIndexMustBe1">
<summary>
Looks up a localized string similar to 'When Stage is GetCustomAttributeDate or GetCustomAttributes CustomAttribuetData must be null and ArgumentIndex must be -1'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.WriterIsNotInitializedOrIsFinished">
<summary>
Looks up a localized string similar to 'Writer is not initialized or is finished'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.XMLAttributeHasNoParentElement">
<summary>
Looks up a localized string similar to 'XML attribute has no parent element.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Exceptions.YouShouldNotReplaceRecordsWhichServesAsPointersToSubIFDsIfYouDoSoReplacementRecordMustBeOfTypeUInt16WithOneElementFixedLength">
<summary>
Looks up a localized string similar to 'You should not replace records which serves as pointers to subIFDs. If you do so replacement record must be of type UInt16 with one element, fixed length.'.
</summary>
</member>
<member name="M:Tools.ResourcesT.Exceptions.AllEdgesValuesMustBePositiveFormat">
<summary>
The stub formatting method returning the AllEdgesValuesMustBePositive property value.
</summary>
<returns>The AllEdgesValuesMustBePositive property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.AllowAddCancelableEventsHandlersCanBeChangedOnlyFromTrueToFalseFormat">
<summary>
The stub formatting method returning the AllowAddCancelableEventsHandlersCanBeChangedOnlyFromTrueToFalse property value.
</summary>
<returns>The AllowAddCancelableEventsHandlersCanBeChangedOnlyFromTrueToFalse property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.AllRecordsHaveBennAlreadyWrittenFormat">
<summary>
The stub formatting method returning the AllRecordsHaveBennAlreadyWritten property value.
</summary>
<returns>The AllRecordsHaveBennAlreadyWritten property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.AllTypesIn0MustInheritFrom0Format(System.Object)">
<summary>
Formats a localized string similar to 'All types in {0} must inherit from {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.AlphabetLenghtBaseMismatchFormat">
<summary>
The stub formatting method returning the AlphabetLenghtBaseMismatch property value.
</summary>
<returns>The AlphabetLenghtBaseMismatch property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ArabicDefaultNotSpecifiedFormat">
<summary>
The stub formatting method returning the ArabicDefaultNotSpecified property value.
</summary>
<returns>The ArabicDefaultNotSpecified property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ArrayCannotBeEmptyFormat">
<summary>
The stub formatting method returning the ArrayCannotBeEmpty property value.
</summary>
<returns>The ArrayCannotBeEmpty property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ArrayMustHaveExactlyXBytesFormat(System.Object)">
<summary>
Formats a localized string similar to 'Array must have exactly {0} bytes'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.AttemptToCreateCyclicLinkedListOfIFDsFormat">
<summary>
The stub formatting method returning the AttemptToCreateCyclicLinkedListOfIFDs property value.
</summary>
<returns>The AttemptToCreateCyclicLinkedListOfIFDs property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.AttemptToCreateCyclicTreeFormat">
<summary>
The stub formatting method returning the AttemptToCreateCyclicTree property value.
</summary>
<returns>The AttemptToCreateCyclicTree property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.AttemptToSeekAfterEndOfStreamFormat">
<summary>
The stub formatting method returning the AttemptToSeekAfterEndOfStream property value.
</summary>
<returns>The AttemptToSeekAfterEndOfStream property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.AttributeCannotDeriveFromAttributeWhenWarningKindIsNoAttributeAttributeFormat">
<summary>
The stub formatting method returning the AttributeCannotDeriveFromAttributeWhenWarningKindIsNoAttributeAttribute property value.
</summary>
<returns>The AttributeCannotDeriveFromAttributeWhenWarningKindIsNoAttributeAttribute property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Base64StringInvalidFormat">
<summary>
The stub formatting method returning the Base64StringInvalid property value.
</summary>
<returns>The Base64StringInvalid property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.BaseInvalidCharacterFormat">
<summary>
The stub formatting method returning the BaseInvalidCharacter property value.
</summary>
<returns>The BaseInvalidCharacter property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.BaseStreamOfOverflowStreamMustBeAbleToReadWriteAndSeekFormat">
<summary>
The stub formatting method returning the BaseStreamOfOverflowStreamMustBeAbleToReadWriteAndSeek property value.
</summary>
<returns>The BaseStreamOfOverflowStreamMustBeAbleToReadWriteAndSeek property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.BIMSegmentDoesnTStartWithSting8BIMFormat">
<summary>
The stub formatting method returning the BIMSegmentDoesnTStartWithSting8BIM property value.
</summary>
<returns>The BIMSegmentDoesnTStartWithSting8BIM property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.BitmapViolatesLenghtConstraintImageSizeMustBe4600PxFormat(System.Object)">
<summary>
Formats a localized string similar to 'Bitmap violates lenght constraint. Image size must be 460×{0}px'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.BitmapWidthMustBe460pxFormat">
<summary>
The stub formatting method returning the BitmapWidthMustBe460px property value.
</summary>
<returns>The BitmapWidthMustBe460px property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.BytesCannotBe0Format">
<summary>
The stub formatting method returning the BytesCannotBe0 property value.
</summary>
<returns>The BytesCannotBe0 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CanConsistOnlyOfGraphicCharactersFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} can consist only of graphic characters'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CanContainOnlyASCIIEncodableGraphicCharactersAndSpacesFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} can contain only ASCII-encodable graphic characters and spaces'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CanContainOnlyGraphicCharactersExceptAndFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} can contain only graphic characters except :, ? and *'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CanNeverContainItemWithKeyOfType1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} can never contain item with key of type {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotAddHandlerToTheAddingEventWhenAllowAddCancelableEventsHandlersIsFalseFormat">
<summary>
The stub formatting method returning the CannotAddHandlerToTheAddingEventWhenAllowAddCancelableEventsHandlersIsFalse property value.
</summary>
<returns>The CannotAddHandlerToTheAddingEventWhenAllowAddCancelableEventsHandlersIsFalse property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotAddHandlerToTheClearigEventWhenAllowAddCancelableEventsHandlersIsFalseFormat">
<summary>
The stub formatting method returning the CannotAddHandlerToTheClearigEventWhenAllowAddCancelableEventsHandlersIsFalse property value.
</summary>
<returns>The CannotAddHandlerToTheClearigEventWhenAllowAddCancelableEventsHandlersIsFalse property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotAddHandlerToTheItemChangingEventWhenAllowAddCancelableEventsHandlersIsFalseFormat">
<summary>
The stub formatting method returning the CannotAddHandlerToTheItemChangingEventWhenAllowAddCancelableEventsHandlersIsFalse property value.
</summary>
<returns>The CannotAddHandlerToTheItemChangingEventWhenAllowAddCancelableEventsHandlersIsFalse property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotAddHandlerToTheRemovingEventWhenAllowAddCancelableEventsHandlersIsFalseFormat">
<summary>
The stub formatting method returning the CannotAddHandlerToTheRemovingEventWhenAllowAddCancelableEventsHandlersIsFalse property value.
</summary>
<returns>The CannotAddHandlerToTheRemovingEventWhenAllowAddCancelableEventsHandlersIsFalse property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotAddNodeThatHaveParentAlreadySetFormat">
<summary>
The stub formatting method returning the CannotAddNodeThatHaveParentAlreadySet property value.
</summary>
<returns>The CannotAddNodeThatHaveParentAlreadySet property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotAddNullNodeIntoTreeFormat">
<summary>
The stub formatting method returning the CannotAddNullNodeIntoTree property value.
</summary>
<returns>The CannotAddNullNodeIntoTree property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotAdoptNullFormat">
<summary>
The stub formatting method returning the CannotAdoptNull property value.
</summary>
<returns>The CannotAdoptNull property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotAssignNodeThatGaveParentAlreadySetFormat">
<summary>
The stub formatting method returning the CannotAssignNodeThatGaveParentAlreadySet property value.
</summary>
<returns>The CannotAssignNodeThatGaveParentAlreadySet property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBe1When2Is3Format(System.Object,System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be {1} when {2} is {3}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<param name="arg3">An object (3) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeAnEmptyStringFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be an empty string'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeChangedFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be changed'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeClearedFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be cleared'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeConvertedTo1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '&apos;{0}&apos; cannot be converted to {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeInterpretedAs1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be interpreted as {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeInterpretedAsMemberOf1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be interpreted as member of {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeNegativeFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be negative'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeNullFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be null'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeNullOrAnEmptyStringFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be null or an empty string'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeNullOrEmptyFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be null or empty'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeSetFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be set.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeSetTo1When2Is3Format(System.Object,System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be set to {1} when {2} is {3}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<param name="arg3">An object (3) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeSetTo1When2Is31Format(System.Object,System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be set to {1} when {2} is {3}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<param name="arg3">An object (3) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeSetToFalseFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be set to false'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotBeSetToNullFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot be set to null'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotChangeItemPropertyWhenReadOnlyIsTrueFormat">
<summary>
The stub formatting method returning the CannotChangeItemPropertyWhenReadOnlyIsTrue property value.
</summary>
<returns>The CannotChangeItemPropertyWhenReadOnlyIsTrue property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotChangeNumberOfComponentsOfThisRecordFormat">
<summary>
The stub formatting method returning the CannotChangeNumberOfComponentsOfThisRecord property value.
</summary>
<returns>The CannotChangeNumberOfComponentsOfThisRecord property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotChangeStateFrom0To1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Cannot change state from {0} to {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotChangeValueOfThe0PropertyWhen1IsTrueFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Cannot change value of the {0} property when {1} is true'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotContainCharactersAndFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} cannot contain characters *, /, ? and :'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotConvertGiven0To1BecauseItDoesNotRepresentKnown2Format(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Cannot convert given {0} to {1} because it does not represent known {2}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotConvertNegativeValuesToUnsignedRationalFormat">
<summary>
The stub formatting method returning the CannotConvertNegativeValuesToUnsignedRational property value.
</summary>
<returns>The CannotConvertNegativeValuesToUnsignedRational property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotConvertString0To1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Cannot convert string &quot;{0}&quot; to {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotCreateInstanceOfType01WasThrownWhenObtainingNewInstanceFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Cannot create instance of type {0}. {1} was thrown when obtaining new instance:'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotGetBaseClassMethodOfGlobalMethodFormat">
<summary>
The stub formatting method returning the CannotGetBaseClassMethodOfGlobalMethod property value.
</summary>
<returns>The CannotGetBaseClassMethodOfGlobalMethod property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotGetDerivedClassMethodForGlobalMethodFormat">
<summary>
The stub formatting method returning the CannotGetDerivedClassMethodForGlobalMethod property value.
</summary>
<returns>The CannotGetDerivedClassMethodForGlobalMethod property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotInterpretValue0As1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Cannot interpret value &quot;{0}&quot; as {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotLoadManifestResourceStreamFormat(System.Object)">
<summary>
Formats a localized string similar to 'Cannot load manifest resource stream {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotLocate0In1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Cannot locate {0} in {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotPutNullNodeIntoTreeFormat">
<summary>
The stub formatting method returning the CannotPutNullNodeIntoTree property value.
</summary>
<returns>The CannotPutNullNodeIntoTree property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotReadTagDataFromStreamFormat">
<summary>
The stub formatting method returning the CannotReadTagDataFromStream property value.
</summary>
<returns>The CannotReadTagDataFromStream property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotRemoveLastItemFrom0Format(System.Object)">
<summary>
Formats a localized string similar to 'Cannot remove last item from {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotRemoveRecordWhichPoitsToSubIFDRemoveSubIFDFirstFormat">
<summary>
The stub formatting method returning the CannotRemoveRecordWhichPoitsToSubIFDRemoveSubIFDFirst property value.
</summary>
<returns>The CannotRemoveRecordWhichPoitsToSubIFDRemoveSubIFDFirst property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotResumeCountDownTimerWhenThereIsNoTimeLeftFormat">
<summary>
The stub formatting method returning the CannotResumeCountDownTimerWhenThereIsNoTimeLeft property value.
</summary>
<returns>The CannotResumeCountDownTimerWhenThereIsNoTimeLeft property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotReturnValueForThisInstanceOfT1orT2BecauseItContainsNeitherValue1NorValue2Format">
<summary>
The stub formatting method returning the CannotReturnValueForThisInstanceOfT1orT2BecauseItContainsNeitherValue1NorValue2 property value.
</summary>
<returns>The CannotReturnValueForThisInstanceOfT1orT2BecauseItContainsNeitherValue1NorValue2 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotSaveExifDataBecauseOfInvalidContentFormat">
<summary>
The stub formatting method returning the CannotSaveExifDataBecauseOfInvalidContent property value.
</summary>
<returns>The CannotSaveExifDataBecauseOfInvalidContent property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotSetFixedToTrueWhenLengthIs0Format">
<summary>
The stub formatting method returning the CannotSetFixedToTrueWhenLengthIs0 property value.
</summary>
<returns>The CannotSetFixedToTrueWhenLengthIs0 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotSetLengthTo0WhenFixedIsTrueFormat">
<summary>
The stub formatting method returning the CannotSetLengthTo0WhenFixedIsTrue property value.
</summary>
<returns>The CannotSetLengthTo0WhenFixedIsTrue property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotSetValueOfTheExifPropertyToOtherInstanceThenIsValueOfExifPropertyOfPreviousIFDFormat">
<summary>
The stub formatting method returning the CannotSetValueOfTheExifPropertyToOtherInstanceThenIsValueOfExifPropertyOfPreviousIFD property value.
</summary>
<returns>The CannotSetValueOfTheExifPropertyToOtherInstanceThenIsValueOfExifPropertyOfPreviousIFD property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CannotWriteIFDAtThisTimeFormat">
<summary>
The stub formatting method returning the CannotWriteIFDAtThisTime property value.
</summary>
<returns>The CannotWriteIFDAtThisTime property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ChangingWasCanceledInEventhandlerFormat">
<summary>
The stub formatting method returning the ChangingWasCanceledInEventhandler property value.
</summary>
<returns>The ChangingWasCanceledInEventhandler property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CharacterRepresntingNumeralCannotBeSameAsCharacterRepresentingFormat">
<summary>
The stub formatting method returning the CharacterRepresntingNumeralCannotBeSameAsCharacterRepresenting property value.
</summary>
<returns>The CharacterRepresntingNumeralCannotBeSameAsCharacterRepresenting property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CharactersRepreentingNumeralsMustBeDifferentFormat">
<summary>
The stub formatting method returning the CharactersRepreentingNumeralsMustBeDifferent property value.
</summary>
<returns>The CharactersRepreentingNumeralsMustBeDifferent property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ClassCannotBeUsedAsMessageBoxFormat">
<summary>
The stub formatting method returning the ClassCannotBeUsedAsMessageBox property value.
</summary>
<returns>The ClassCannotBeUsedAsMessageBox property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ClassThatRepresentsDefaultMessageBoxImplementationMustHaveParameterLessConstructorFormat">
<summary>
The stub formatting method returning the ClassThatRepresentsDefaultMessageBoxImplementationMustHaveParameterLessConstructor property value.
</summary>
<returns>The ClassThatRepresentsDefaultMessageBoxImplementationMustHaveParameterLessConstructor property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ClearingWasCanceledInEventhendlerFormat">
<summary>
The stub formatting method returning the ClearingWasCanceledInEventhendler property value.
</summary>
<returns>The ClearingWasCanceledInEventhendler property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CodeIsNotValidISO639LanguageCodeFormat">
<summary>
The stub formatting method returning the CodeIsNotValidISO639LanguageCode property value.
</summary>
<returns>The CodeIsNotValidISO639LanguageCode property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CollectionCannotContainNullValueFormat">
<summary>
The stub formatting method returning the CollectionCannotContainNullValue property value.
</summary>
<returns>The CollectionCannotContainNullValue property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CollectionIsReadOnlyFormat">
<summary>
The stub formatting method returning the CollectionIsReadOnly property value.
</summary>
<returns>The CollectionIsReadOnly property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ComponentCannotBeAnEmptyStringFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} component cannot be an empty string'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ComponentMustBeEncodeableByASCIIFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} component must be encodeable by ASCII'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Constant0DoesNotExistInType1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Constant {0} does not exist in type {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ConversionTo0FailedFormat(System.Object)">
<summary>
Formats a localized string similar to 'Conversion to {0} failed'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CountDownTimeMustBeGreaterThanZeroFormat">
<summary>
The stub formatting method returning the CountDownTimeMustBeGreaterThanZero property value.
</summary>
<returns>The CountDownTimeMustBeGreaterThanZero property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.CurrentApplicationHasNoConsoleAllocateConsoleFirstFormat">
<summary>
The stub formatting method returning the CurrentApplicationHasNoConsoleAllocateConsoleFirst property value.
</summary>
<returns>The CurrentApplicationHasNoConsoleAllocateConsoleFirst property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DataSetNumberMustBeLessThanOrEqualTo9Format">
<summary>
The stub formatting method returning the DataSetNumberMustBeLessThanOrEqualTo9 property value.
</summary>
<returns>The DataSetNumberMustBeLessThanOrEqualTo9 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DataSetsLongerThan32767BAreNotSupportedFormat">
<summary>
The stub formatting method returning the DataSetsLongerThan32767BAreNotSupported property value.
</summary>
<returns>The DataSetsLongerThan32767BAreNotSupported property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DataTypesCannotBeNullAndMustContainAtLeastOneElementFormat">
<summary>
The stub formatting method returning the DataTypesCannotBeNullAndMustContainAtLeastOneElement property value.
</summary>
<returns>The DataTypesCannotBeNullAndMustContainAtLeastOneElement property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DeclaringTypeOfMethodIsNotGenericFormat">
<summary>
The stub formatting method returning the DeclaringTypeOfMethodIsNotGeneric property value.
</summary>
<returns>The DeclaringTypeOfMethodIsNotGeneric property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DecryptInitializationVectorMissingFormat">
<summary>
The stub formatting method returning the DecryptInitializationVectorMissing property value.
</summary>
<returns>The DecryptInitializationVectorMissing property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DecryptKeyMissingFormat">
<summary>
The stub formatting method returning the DecryptKeyMissing property value.
</summary>
<returns>The DecryptKeyMissing property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DefaultMessageBoxImplementationCannotBeAbstractTypeFormat">
<summary>
The stub formatting method returning the DefaultMessageBoxImplementationCannotBeAbstractType property value.
</summary>
<returns>The DefaultMessageBoxImplementationCannotBeAbstractType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DefaultMessageBoxImplementationCannotBeGenericTypeDefinitionFormat">
<summary>
The stub formatting method returning the DefaultMessageBoxImplementationCannotBeGenericTypeDefinition property value.
</summary>
<returns>The DefaultMessageBoxImplementationCannotBeGenericTypeDefinition property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DerivedTypeDoesNotDeriveFromMethodDeclaringTypeFormat">
<summary>
The stub formatting method returning the DerivedTypeDoesNotDeriveFromMethodDeclaringType property value.
</summary>
<returns>The DerivedTypeDoesNotDeriveFromMethodDeclaringType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DoesNotRepresentSupportedExpressionFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} does not represent supported expression.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.DoesnTSupportWritingFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} doesn&apos;t support writing'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EachGroupMustHaveAtLeast0TagsFormat(System.Object)">
<summary>
Formats a localized string similar to 'Each group must have at least {0} tags'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ElementMustBeFormat(System.Object)">
<summary>
Formats a localized string similar to 'Element must be {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EmptyNumberNotAllowedInBaseFormat">
<summary>
The stub formatting method returning the EmptyNumberNotAllowedInBase property value.
</summary>
<returns>The EmptyNumberNotAllowedInBase property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EncodingWithSameCodepageIsNotInListFormat">
<summary>
The stub formatting method returning the EncodingWithSameCodepageIsNotInList property value.
</summary>
<returns>The EncodingWithSameCodepageIsNotInList property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EntryPointMustBeSpecifiedFormat">
<summary>
The stub formatting method returning the EntryPointMustBeSpecified property value.
</summary>
<returns>The EntryPointMustBeSpecified property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EnumerationDoesNotAllowNegativeValuesFormat">
<summary>
The stub formatting method returning the EnumerationDoesNotAllowNegativeValues property value.
</summary>
<returns>The EnumerationDoesNotAllowNegativeValues property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EnumeratorIsEitherNotInitializedYedOrEnumerationHasAlreadyFinishedFormat">
<summary>
The stub formatting method returning the EnumeratorIsEitherNotInitializedYedOrEnumerationHasAlreadyFinished property value.
</summary>
<returns>The EnumeratorIsEitherNotInitializedYedOrEnumerationHasAlreadyFinished property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EnumeratorIsPositionedOutsideIReadOnlyIndexableBoundsFormat">
<summary>
The stub formatting method returning the EnumeratorIsPositionedOutsideIReadOnlyIndexableBounds property value.
</summary>
<returns>The EnumeratorIsPositionedOutsideIReadOnlyIndexableBounds property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EnumTypeOfItemsPassedToStringEnumValueMustBeSameAsThatInTheTypeParameterFormat">
<summary>
The stub formatting method returning the EnumTypeOfItemsPassedToStringEnumValueMustBeSameAsThatInTheTypeParameter property value.
</summary>
<returns>The EnumTypeOfItemsPassedToStringEnumValueMustBeSameAsThatInTheTypeParameter property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EOINotFoundFormat">
<summary>
The stub formatting method returning the EOINotFound property value.
</summary>
<returns>The EOINotFound property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ErrorWhileDeserializing0Format(System.Object)">
<summary>
Formats a localized string similar to 'Error while deserializing {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ErrorWhileDeserializingLinkLabelItemFormat">
<summary>
The stub formatting method returning the ErrorWhileDeserializingLinkLabelItem property value.
</summary>
<returns>The ErrorWhileDeserializingLinkLabelItem property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ErrorWhileParsing0Found1Expected2AtPosition3Format(System.Object,System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Error while parsing {0}. Found &apos;{1}&apos;, expected {2} at position {3}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<param name="arg3">An object (3) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.EscapeSequenceStringIsInInvalidFormatFormat">
<summary>
The stub formatting method returning the EscapeSequenceStringIsInInvalidFormat property value.
</summary>
<returns>The EscapeSequenceStringIsInInvalidFormat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ExifMapGeneratorCannotBeAttachedToMultipleReadersFormat">
<summary>
The stub formatting method returning the ExifMapGeneratorCannotBeAttachedToMultipleReaders property value.
</summary>
<returns>The ExifMapGeneratorCannotBeAttachedToMultipleReaders property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ExifMapIsInvalidBecauseItContainsWriterGeneratedItemsFormat">
<summary>
The stub formatting method returning the ExifMapIsInvalidBecauseItContainsWriterGeneratedItems property value.
</summary>
<returns>The ExifMapIsInvalidBecauseItContainsWriterGeneratedItems property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ExifMEtadataKeyMustContain2SeparatedPartsFormat">
<summary>
The stub formatting method returning the ExifMEtadataKeyMustContain2SeparatedParts property value.
</summary>
<returns>The ExifMEtadataKeyMustContain2SeparatedParts property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ExifPofSubIFDBeingAddedReplacedMustBeEitherNullOrSameAsExifOfParentIFDFormat">
<summary>
The stub formatting method returning the ExifPofSubIFDBeingAddedReplacedMustBeEitherNullOrSameAsExifOfParentIFD property value.
</summary>
<returns>The ExifPofSubIFDBeingAddedReplacedMustBeEitherNullOrSameAsExifOfParentIFD property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ExifRecordKeyMustBeValidUInt16ValueFormat">
<summary>
The stub formatting method returning the ExifRecordKeyMustBeValidUInt16Value property value.
</summary>
<returns>The ExifRecordKeyMustBeValidUInt16Value property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ExifStreamAndMapMustHaveSameLengthsFormat">
<summary>
The stub formatting method returning the ExifStreamAndMapMustHaveSameLengths property value.
</summary>
<returns>The ExifStreamAndMapMustHaveSameLengths property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ExtendedSizeTagsAreNotSupportedFormat">
<summary>
The stub formatting method returning the ExtendedSizeTagsAreNotSupported property value.
</summary>
<returns>The ExtendedSizeTagsAreNotSupported property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.File0AlreadyExistsFormat(System.Object)">
<summary>
Formats a localized string similar to 'File {0} already exists.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.File0DoesNotExistFormat(System.Object)">
<summary>
Formats a localized string similar to 'File {0} does not exist.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.FileNotFoundFormat">
<summary>
The stub formatting method returning the FileNotFound property value.
</summary>
<returns>The FileNotFound property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.FinnishigIsNotAllowedInState0Format(System.Object)">
<summary>
Formats a localized string similar to 'Finnishig is not allowed in state {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.FollowingIFDCannotBeSubIFDFormat">
<summary>
The stub formatting method returning the FollowingIFDCannotBeSubIFD property value.
</summary>
<returns>The FollowingIFDCannotBeSubIFD property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.FollowingIFDMustBeMemberOfSameExifOrBeMemberOfNoExifAsCurrentIFDFormat">
<summary>
The stub formatting method returning the FollowingIFDMustBeMemberOfSameExifOrBeMemberOfNoExifAsCurrentIFD property value.
</summary>
<returns>The FollowingIFDMustBeMemberOfSameExifOrBeMemberOfNoExifAsCurrentIFD property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ForUncompressedThumbnailStripOffsetsAndStripByteCountsMustHaveSameLengthFormat">
<summary>
The stub formatting method returning the ForUncompressedThumbnailStripOffsetsAndStripByteCountsMustHaveSameLength property value.
</summary>
<returns>The ForUncompressedThumbnailStripOffsetsAndStripByteCountsMustHaveSameLength property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.GivenIFDIsAlreadyInUseFormat">
<summary>
The stub formatting method returning the GivenIFDIsAlreadyInUse property value.
</summary>
<returns>The GivenIFDIsAlreadyInUse property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.GivenInstanceWasNotCreatedFrom0Format(System.Object)">
<summary>
Formats a localized string similar to 'Given instance was not created from {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.GivenKeyIsAlreadyPresentInTheDictionaryFormat">
<summary>
The stub formatting method returning the GivenKeyIsAlreadyPresentInTheDictionary property value.
</summary>
<returns>The GivenKeyIsAlreadyPresentInTheDictionary property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.GivenMarkerSCodeDoesnTStartWithFFhFormat">
<summary>
The stub formatting method returning the GivenMarkerSCodeDoesnTStartWithFFh property value.
</summary>
<returns>The GivenMarkerSCodeDoesnTStartWithFFh property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.GivenObjectCannotBeLocatedFormat">
<summary>
The stub formatting method returning the GivenObjectCannotBeLocated property value.
</summary>
<returns>The GivenObjectCannotBeLocated property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.GivenStreamDoesNotSupportReadingFormat">
<summary>
The stub formatting method returning the GivenStreamDoesNotSupportReading property value.
</summary>
<returns>The GivenStreamDoesNotSupportReading property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.GivenTypeIsNotEnumFormat">
<summary>
The stub formatting method returning the GivenTypeIsNotEnum property value.
</summary>
<returns>The GivenTypeIsNotEnum property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.GivenValueIsNotKnownSystemSoundFormat">
<summary>
The stub formatting method returning the GivenValueIsNotKnownSystemSound property value.
</summary>
<returns>The GivenValueIsNotKnownSystemSound property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.HasToManyDigitsFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} has to many digits'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.HexStringInvalidFormat">
<summary>
The stub formatting method returning the HexStringInvalid property value.
</summary>
<returns>The HexStringInvalid property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IFDBeingSavedIsInvalidPointerToSubIFDMustHaveOneComponentFormat">
<summary>
The stub formatting method returning the IFDBeingSavedIsInvalidPointerToSubIFDMustHaveOneComponent property value.
</summary>
<returns>The IFDBeingSavedIsInvalidPointerToSubIFDMustHaveOneComponent property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IFDIdentificationPartOfExifMetadataKeyIsInvalidItMustFormat">
<summary>
The stub formatting method returning the IFDIdentificationPartOfExifMetadataKeyIsInvalidItMust property value.
</summary>
<returns>The IFDIdentificationPartOfExifMetadataKeyIsInvalidItMust property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IFDPassedToTheIFD0PropertyCannotHaveThePreviousPropertySetFormat">
<summary>
The stub formatting method returning the IFDPassedToTheIFD0PropertyCannotHaveThePreviousPropertySet property value.
</summary>
<returns>The IFDPassedToTheIFD0PropertyCannotHaveThePreviousPropertySet property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IFDPassedToTheIFD0PropertyMustEitherHaveNoExifAsociatedOrMustHaveAssociatedCurrrentInstanceFormat">
<summary>
The stub formatting method returning the IFDPassedToTheIFD0PropertyMustEitherHaveNoExifAsociatedOrMustHaveAssociatedCurrrentInstance property value.
</summary>
<returns>The IFDPassedToTheIFD0PropertyMustEitherHaveNoExifAsociatedOrMustHaveAssociatedCurrrentInstance property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IfParentIFDAlreadyContainsRecordThatIsAboutToBecomeParentRecordOfSubIFDItMustOfTypeOneElementOfTypeUInt32Format">
<summary>
The stub formatting method returning the IfParentIFDAlreadyContainsRecordThatIsAboutToBecomeParentRecordOfSubIFDItMustOfTypeOneElementOfTypeUInt32 property value.
</summary>
<returns>The IfParentIFDAlreadyContainsRecordThatIsAboutToBecomeParentRecordOfSubIFDItMustOfTypeOneElementOfTypeUInt32 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ImageDataDoesNotContainEnoghBytesFormat">
<summary>
The stub formatting method returning the ImageDataDoesNotContainEnoghBytes property value.
</summary>
<returns>The ImageDataDoesNotContainEnoghBytes property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IncompleteFormatStringFormat">
<summary>
The stub formatting method returning the IncompleteFormatString property value.
</summary>
<returns>The IncompleteFormatString property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IndexMustBeInRangeDefinedByCounfOfIFDsFormat">
<summary>
The stub formatting method returning the IndexMustBeInRangeDefinedByCounfOfIFDs property value.
</summary>
<returns>The IndexMustBeInRangeDefinedByCounfOfIFDs property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IndexMustBeInRangeOfTheCollectionFormat">
<summary>
The stub formatting method returning the IndexMustBeInRangeOfTheCollection property value.
</summary>
<returns>The IndexMustBeInRangeOfTheCollection property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IndexWasOutOfRangeOfControlsCollectionFormat">
<summary>
The stub formatting method returning the IndexWasOutOfRangeOfControlsCollection property value.
</summary>
<returns>The IndexWasOutOfRangeOfControlsCollection property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InternalObjectMustBeEitherUxThemeObjectOrNonThemedVisualStyleObjectFormat">
<summary>
The stub formatting method returning the InternalObjectMustBeEitherUxThemeObjectOrNonThemedVisualStyleObject property value.
</summary>
<returns>The InternalObjectMustBeEitherUxThemeObjectOrNonThemedVisualStyleObject property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidBitmapNumberOfBitsInBitmapMustBeMultiplicationOf460Format">
<summary>
The stub formatting method returning the InvalidBitmapNumberOfBitsInBitmapMustBeMultiplicationOf460 property value.
</summary>
<returns>The InvalidBitmapNumberOfBitsInBitmapMustBeMultiplicationOf460 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidBooleanValueFormat(System.Object)">
<summary>
Formats a localized string similar to 'Invalid boolean value {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidCharacterNear01Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Invalid character near &quot;{0}{1}&quot;'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidFormatSpecifierFormat">
<summary>
The stub formatting method returning the InvalidFormatSpecifier property value.
</summary>
<returns>The InvalidFormatSpecifier property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidFormatStringArgumentNumberExpectedFormat">
<summary>
The stub formatting method returning the InvalidFormatStringArgumentNumberExpected property value.
</summary>
<returns>The InvalidFormatStringArgumentNumberExpected property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidFormatStringExpectedWidthNumberFormat">
<summary>
The stub formatting method returning the InvalidFormatStringExpectedWidthNumber property value.
</summary>
<returns>The InvalidFormatStringExpectedWidthNumber property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidFormatStringExpectedWidthNumberOrFormat">
<summary>
The stub formatting method returning the InvalidFormatStringExpectedWidthNumberOr property value.
</summary>
<returns>The InvalidFormatStringExpectedWidthNumberOr property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidFormatStringInvalidHexadecimalEscapeSequenceFormat">
<summary>
The stub formatting method returning the InvalidFormatStringInvalidHexadecimalEscapeSequence property value.
</summary>
<returns>The InvalidFormatStringInvalidHexadecimalEscapeSequence property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidFormatStringInvalidUnicodeCodePoint0DFormat(System.Object)">
<summary>
Formats a localized string similar to 'Invalid format string. Invalid unicode code point {0:D}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidFormatStringInvalidUnicodeCodePoint0x0XFormat(System.Object)">
<summary>
Formats a localized string similar to 'Invalid format string. Invalid unicode code point 0x{0:x}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidRomanNumeralSequenceInvalidSubtractionFormat">
<summary>
The stub formatting method returning the InvalidRomanNumeralSequenceInvalidSubtraction property value.
</summary>
<returns>The InvalidRomanNumeralSequenceInvalidSubtraction property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidValueForByteOrderTestAtExifHeaderFormat">
<summary>
The stub formatting method returning the InvalidValueForByteOrderTestAtExifHeader property value.
</summary>
<returns>The InvalidValueForByteOrderTestAtExifHeader property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidValueReturnedByLoopFunctionFormat(System.Object)">
<summary>
Formats a localized string similar to 'Invalid value {0} returned by loop function.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvalidVersionFormatFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} is invalid version'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvallidNumberBaseFormat">
<summary>
The stub formatting method returning the InvallidNumberBase property value.
</summary>
<returns>The InvallidNumberBase property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.InvocationListOfDelegateMustHaveExactlyOneItemFormat">
<summary>
The stub formatting method returning the InvocationListOfDelegateMustHaveExactlyOneItem property value.
</summary>
<returns>The InvocationListOfDelegateMustHaveExactlyOneItem property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IPTCDataSetsLongerThat32767BytesAreNotSupportedFormat">
<summary>
The stub formatting method returning the IPTCDataSetsLongerThat32767BytesAreNotSupported property value.
</summary>
<returns>The IPTCDataSetsLongerThat32767BytesAreNotSupported property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IsGreaterThanOrEqualToLenghtOfArrayFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} is greater than or equal to lenght of array'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IsMultidimensionalFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} is multidimensional'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IsNotAllowedFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} is not allowed'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IsNotMemberOf1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} is not member of {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.IsNotSupportedTypeOfXMLSerializedCodeDOMObjectFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} is not supported type of XML-serialized CodeDOM object.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ISO6391CodeMustContainExactly2LowercaseLatinLettersFormat">
<summary>
The stub formatting method returning the ISO6391CodeMustContainExactly2LowercaseLatinLetters property value.
</summary>
<returns>The ISO6391CodeMustContainExactly2LowercaseLatinLetters property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ISO6392CodeMustContainExactly3LowercaseLatinLettersFormat">
<summary>
The stub formatting method returning the ISO6392CodeMustContainExactly3LowercaseLatinLetters property value.
</summary>
<returns>The ISO6392CodeMustContainExactly3LowercaseLatinLetters property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ISO6392DuplicateCodeMustContainExactly3LowercaseLatinLettersFormat">
<summary>
The stub formatting method returning the ISO6392DuplicateCodeMustContainExactly3LowercaseLatinLetters property value.
</summary>
<returns>The ISO6392DuplicateCodeMustContainExactly3LowercaseLatinLetters property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Item0ContainsNonAlphaCharacterFormat(System.Object)">
<summary>
Formats a localized string similar to 'Item {0} contains non-alpha character'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Item0ContainsNonGraphicCharacterFormat(System.Object)">
<summary>
Formats a localized string similar to 'Item {0} contains non-graphic character'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Item0ContainsNonGraphicNonSpaceCharacterFormat(System.Object)">
<summary>
Formats a localized string similar to 'Item {0} contains non-graphic-non-space character'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Item0ContainsNonGraphicNonSpaceNonCrNonLfCharacterFormat(System.Object)">
<summary>
Formats a localized string similar to 'Item {0} contains non-graphic-non-space-non-cr-non-lf character'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.JPEGFileDoesnTEndWithCorrectEOIMarkerFormat">
<summary>
The stub formatting method returning the JPEGFileDoesnTEndWithCorrectEOIMarker property value.
</summary>
<returns>The JPEGFileDoesnTEndWithCorrectEOIMarker property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.JPEGFileDoesnTStartWithCorrectSOIMarkerFormat">
<summary>
The stub formatting method returning the JPEGFileDoesnTStartWithCorrectSOIMarker property value.
</summary>
<returns>The JPEGFileDoesnTStartWithCorrectSOIMarker property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.JPEGThumbnailSizeIsSpecifiedToBeOutsideOfExifStreamFormat">
<summary>
The stub formatting method returning the JPEGThumbnailSizeIsSpecifiedToBeOutsideOfExifStream property value.
</summary>
<returns>The JPEGThumbnailSizeIsSpecifiedToBeOutsideOfExifStream property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Key0CanHoldOnlyIFDOfType1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Key {0} can hold only IFD of type {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.KeyIsInvalidForIPTCMetadataFormat">
<summary>
The stub formatting method returning the KeyIsInvalidForIPTCMetadata property value.
</summary>
<returns>The KeyIsInvalidForIPTCMetadata property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LenCannotBe0WhenFixedIsTrueFormat">
<summary>
The stub formatting method returning the LenCannotBe0WhenFixedIsTrue property value.
</summary>
<returns>The LenCannotBe0WhenFixedIsTrue property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LenghtConstraintViolationFormat">
<summary>
The stub formatting method returning the LenghtConstraintViolation property value.
</summary>
<returns>The LenghtConstraintViolation property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LenghtOf0MustFitInto1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Lenght of {0} must fit into {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LenghtOfSerialized0DiffersFrom1BytesFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Lenght of serialized {0} differs from {1} bytes'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LenghtOfSerializedNameExceeds0BytesFormat(System.Object)">
<summary>
Formats a localized string similar to 'Lenght of serialized name exceeds {0} bytes'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LenghtOfSubjectNameMustFitInto64Format">
<summary>
The stub formatting method returning the LenghtOfSubjectNameMustFitInto64 property value.
</summary>
<returns>The LenghtOfSubjectNameMustFitInto64 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LenghtOfSubjectReferenceMustFitInto64Format">
<summary>
The stub formatting method returning the LenghtOfSubjectReferenceMustFitInto64 property value.
</summary>
<returns>The LenghtOfSubjectReferenceMustFitInto64 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LengthOf0MustBeNonZeroFormat(System.Object)">
<summary>
Formats a localized string similar to 'Length of {0} must be non-zero'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LengthOfDataStoredUnderThisTagIsDifferentFrom8WhichIsNecessaryForDatatypeCCYYMMDDFormat">
<summary>
The stub formatting method returning the LengthOfDataStoredUnderThisTagIsDifferentFrom8WhichIsNecessaryForDatatypeCCYYMMDD property value.
</summary>
<returns>The LengthOfDataStoredUnderThisTagIsDifferentFrom8WhichIsNecessaryForDatatypeCCYYMMDD property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LengthOfDataStoredUnderThisTagIsDifferentThen11WhichIsNecessaryForDatatypeHHMMSSHHMMFormat">
<summary>
The stub formatting method returning the LengthOfDataStoredUnderThisTagIsDifferentThen11WhichIsNecessaryForDatatypeHHMMSSHHMM property value.
</summary>
<returns>The LengthOfDataStoredUnderThisTagIsDifferentThen11WhichIsNecessaryForDatatypeHHMMSSHHMM property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LengthOfODEAndIPRTogetherWithSeparatorsMustWitInto61Format">
<summary>
The stub formatting method returning the LengthOfODEAndIPRTogetherWithSeparatorsMustWitInto61 property value.
</summary>
<returns>The LengthOfODEAndIPRTogetherWithSeparatorsMustWitInto61 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LengthOfSerialized0IsNotWithinRange12BytesFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Length of serialized {0} is not within range {1}÷{2} bytes'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LigatureToCharFormat">
<summary>
The stub formatting method returning the LigatureToChar property value.
</summary>
<returns>The LigatureToChar property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LinkLabelInternalErrorItemFoundInItemsButNotFoundInLinksFormat">
<summary>
The stub formatting method returning the LinkLabelInternalErrorItemFoundInItemsButNotFoundInLinks property value.
</summary>
<returns>The LinkLabelInternalErrorItemFoundInItemsButNotFoundInLinks property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.LinkLabelInternalExceptionLinkForItemNotFoundFormat">
<summary>
The stub formatting method returning the LinkLabelInternalExceptionLinkForItemNotFound property value.
</summary>
<returns>The LinkLabelInternalExceptionLinkForItemNotFound property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ListIsLockedFormat">
<summary>
The stub formatting method returning the ListIsLocked property value.
</summary>
<returns>The ListIsLocked property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ListOfExceptionsCannotBeEmptyFormat">
<summary>
The stub formatting method returning the ListOfExceptionsCannotBeEmpty property value.
</summary>
<returns>The ListOfExceptionsCannotBeEmpty property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ListWithEventsDoesNotSupportSearchingFormat">
<summary>
The stub formatting method returning the ListWithEventsDoesNotSupportSearching property value.
</summary>
<returns>The ListWithEventsDoesNotSupportSearching property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ListWithEventsDoesNotSupportSortingFormat">
<summary>
The stub formatting method returning the ListWithEventsDoesNotSupportSorting property value.
</summary>
<returns>The ListWithEventsDoesNotSupportSorting property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MaximumBaseSupportedFormat(System.Object)">
<summary>
Formats a localized string similar to 'Maximum supported base is {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MenuItemDoesnTExistFormat">
<summary>
The stub formatting method returning the MenuItemDoesnTExist property value.
</summary>
<returns>The MenuItemDoesnTExist property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MessageBoxCannotBeReCycledWhenItIsShownFormat">
<summary>
The stub formatting method returning the MessageBoxCannotBeReCycledWhenItIsShown property value.
</summary>
<returns>The MessageBoxCannotBeReCycledWhenItIsShown property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MessageBoxMustBeInCreatedStateInOrderToBeDisplyedByPerformDialogFormat">
<summary>
The stub formatting method returning the MessageBoxMustBeInCreatedStateInOrderToBeDisplyedByPerformDialog property value.
</summary>
<returns>The MessageBoxMustBeInCreatedStateInOrderToBeDisplyedByPerformDialog property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MessageBoxMustOwnThisInstanceInOrderThisInstanceToBeFormat">
<summary>
The stub formatting method returning the MessageBoxMustOwnThisInstanceInOrderThisInstanceToBe property value.
</summary>
<returns>The MessageBoxMustOwnThisInstanceInOrderThisInstanceToBe property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MethodDeclaringTypeAndTypeToGetMethodOfMustBeCreatedFormat">
<summary>
The stub formatting method returning the MethodDeclaringTypeAndTypeToGetMethodOfMustBeCreated property value.
</summary>
<returns>The MethodDeclaringTypeAndTypeToGetMethodOfMustBeCreated property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MultipleExceptionClassRequiresAtLeast2ExcptionsFormat">
<summary>
The stub formatting method returning the MultipleExceptionClassRequiresAtLeast2Excptions property value.
</summary>
<returns>The MultipleExceptionClassRequiresAtLeast2Excptions property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MultipleExceptionsHaveOccuredFormat">
<summary>
The stub formatting method returning the MultipleExceptionsHaveOccured property value.
</summary>
<returns>The MultipleExceptionsHaveOccured property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBe1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBe1DimensionalFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must be 1-dimensional'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeDecoratedWith1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be decorated with {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeEnumerationFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must be enumeration'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeEqualToOrGreaterThan1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be equal to or greater than {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeFromRange12Or3IfUnknownFormat(System.Object,System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be from range {1}÷{2} or {3} if unknown'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<param name="arg3">An object (3) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeGenericTypeInstanceFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must be generic type instance.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeGreaterThanOrEqualTo1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be greater than or equal to {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeGreaterThanOrEqualToZeroFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must be greater than or equal to zero'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeInWholeMinutesFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must be in whole minutes'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeLessThenOrEqualTo1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be less then or equal to {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeMemberOf0CollectionOf2Format(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be member of {1} collection of {2}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeMemberOfEnumeration1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be member of enumeration {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeNonNegativeFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must be non-negative'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeOneOf1Or2ValuesFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be one of {1} or {2} values'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBePositiveFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must be positive'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBePositiveAndLessThan1H0MmSsFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be positive and less than {1:h(0):mm:ss}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeStringWithLengthFrom1To2CharactersFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be string with length from {1} to {2} characters'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeWithinRange01Format(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{2} must be within range {0}÷{1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeWithinRange12Format(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be within range &lt;{1}; {2})'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustBeWithinRangeOfValuesOfType1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be within range of values of type {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustContainAtLeast1ItemsFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must contain at least {1} items'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustContainAtLeastOneItemFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must contain at least one item.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustContainExactly1PartsFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must contain exactly {1} parts'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustNotBeNullFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must not be null'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.MustRepresentXMLElement1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must represent XML element {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Namespace0HasNoPrefixAssociatedAndItIsNotDefaultNamespaceFormat(System.Object)">
<summary>
Formats a localized string similar to 'Namespace {0} has no prefix associated and it is not default namespace.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NamespacePrefix0IsNotDefinedFormat(System.Object)">
<summary>
Formats a localized string similar to 'Namespace prefix {0} is not defined'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NegativeValueUnsupportedFormat">
<summary>
The stub formatting method returning the NegativeValueUnsupported property value.
</summary>
<returns>The NegativeValueUnsupported property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NoCastOperatorIsMostSpecificFormat">
<summary>
The stub formatting method returning the NoCastOperatorIsMostSpecific property value.
</summary>
<returns>The NoCastOperatorIsMostSpecific property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NoConditionWasTrueFormat">
<summary>
The stub formatting method returning the NoConditionWasTrue property value.
</summary>
<returns>The NoConditionWasTrue property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NoJPEGMarkerFoundFormat">
<summary>
The stub formatting method returning the NoJPEGMarkerFound property value.
</summary>
<returns>The NoJPEGMarkerFound property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NoPropertyIsMostSpecificFormat(System.Object)">
<summary>
Formats a localized string similar to 'No {0} property is most specific'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NoSuitablePropertyFoundFormat(System.Object)">
<summary>
Formats a localized string similar to 'No suitable {0} property found'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NotEnoughSpaceInDestinationArrayFormat">
<summary>
The stub formatting method returning the NotEnoughSpaceInDestinationArray property value.
</summary>
<returns>The NotEnoughSpaceInDestinationArray property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NotFoundIn1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} not found in {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Number0CannotBeStoredIn1BytesFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Number {0} cannot be stored in {1} bytes'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NumberCannotConsistOfSignOnlyFormat">
<summary>
The stub formatting method returning the NumberCannotConsistOfSignOnly property value.
</summary>
<returns>The NumberCannotConsistOfSignOnly property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NumberOfBitIn0MustBeLessThat1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Number of bit in {0} must be less that {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NumberOfComponentsOf0MustBeFrom1To2Format(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Number of components of {0} must be from {1} to {2}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NumberOfElementsCannotBe0Format">
<summary>
The stub formatting method returning the NumberOfElementsCannotBe0 property value.
</summary>
<returns>The NumberOfElementsCannotBe0 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NumberOfItemsOf0DiffersFrom1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Number of items of {0} differs from {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.NumeralCharactersMustBeDistinctFormat">
<summary>
The stub formatting method returning the NumeralCharactersMustBeDistinct property value.
</summary>
<returns>The NumeralCharactersMustBeDistinct property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ObjectOfType0CannotBeSerializedAsPrimitiveObjectFormat(System.Object)">
<summary>
Formats a localized string similar to 'Object of type {0} cannot be serialized as primitive object.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Only124And8BytesIntegersCanBeReadVia0Format(System.Object)">
<summary>
Formats a localized string similar to 'Only 1,2,4 and 8-bytes integers can be read via {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OnlyAllowedValuesForBlobTypeAreUnknownJpegThumbnailAndTiffThumbnailPartFormat">
<summary>
The stub formatting method returning the OnlyAllowedValuesForBlobTypeAreUnknownJpegThumbnailAndTiffThumbnailPart property value.
</summary>
<returns>The OnlyAllowedValuesForBlobTypeAreUnknownJpegThumbnailAndTiffThumbnailPart property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OnlyGraphicCharactersAreAllowedIn0Format(System.Object)">
<summary>
Formats a localized string similar to 'Only graphic characters are allowed in {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OnlyIListInstancesCanBeUsedInListWrapperFormat">
<summary>
The stub formatting method returning the OnlyIListInstancesCanBeUsedInListWrapper property value.
</summary>
<returns>The OnlyIListInstancesCanBeUsedInListWrapper property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OnlySoundsOfTypeSystemSoundPlayerAndSoundPlayerWrapperAreSupportedFormat">
<summary>
The stub formatting method returning the OnlySoundsOfTypeSystemSoundPlayerAndSoundPlayerWrapperAreSupported property value.
</summary>
<returns>The OnlySoundsOfTypeSystemSoundPlayerAndSoundPlayerWrapperAreSupported property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OnlySoundsWithKnownLocationCanBeConvertedFormat">
<summary>
The stub formatting method returning the OnlySoundsWithKnownLocationCanBeConverted property value.
</summary>
<returns>The OnlySoundsWithKnownLocationCanBeConverted property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OnlyValuesOfFollowingTypesAreAcceptableFormat">
<summary>
The stub formatting method returning the OnlyValuesOfFollowingTypesAreAcceptable property value.
</summary>
<returns>The OnlyValuesOfFollowingTypesAreAcceptable property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OnlyValuesOfType0AreAcceptableFormat(System.Object)">
<summary>
Formats a localized string similar to 'Only values of type {0} are acceptable'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OnlyValueSOfType0CanBeEditedBy0Format(System.Object)">
<summary>
Formats a localized string similar to 'Only value s of type {0} can be edited by {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OperationWasCancelledFormat">
<summary>
The stub formatting method returning the OperationWasCancelled property value.
</summary>
<returns>The OperationWasCancelled property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Or_Format">
<summary>
The stub formatting method returning the Or_ property value.
</summary>
<returns>The Or_ property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.OriginalExifStreamMustBeAlLeast12BytesLongFormat">
<summary>
The stub formatting method returning the OriginalExifStreamMustBeAlLeast12BytesLong property value.
</summary>
<returns>The OriginalExifStreamMustBeAlLeast12BytesLong property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ParentIFDOfSubIFDBeingAddedReplacedMustMeNullFormat">
<summary>
The stub formatting method returning the ParentIFDOfSubIFDBeingAddedReplacedMustMeNull property value.
</summary>
<returns>The ParentIFDOfSubIFDBeingAddedReplacedMustMeNull property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ParentTypeOf0MustBe1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Parent type of {0} must be {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.PathFormat">
<summary>
The stub formatting method returning the Path property value.
</summary>
<returns>The Path property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Path0DoesNotExistFormat(System.Object)">
<summary>
Formats a localized string similar to 'Path {0} does not exist.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.PathCannotBeBasedOnAnEmptyStringOrStringContainingOnlyWhitespacesFormat">
<summary>
The stub formatting method returning the PathCannotBeBasedOnAnEmptyStringOrStringContainingOnlyWhitespaces property value.
</summary>
<returns>The PathCannotBeBasedOnAnEmptyStringOrStringContainingOnlyWhitespaces property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.PathCannotBeBasedOnNullStringFormat">
<summary>
The stub formatting method returning the PathCannotBeBasedOnNullString property value.
</summary>
<returns>The PathCannotBeBasedOnNullString property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.PathStringContainsInvalidCharacter0Format(System.Object)">
<summary>
Formats a localized string similar to 'Path string contains invalid character &apos;{0}&apos;'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.PreserveThumbnailCannotBeChangedAfterWritingOfDataStartedFormat">
<summary>
The stub formatting method returning the PreserveThumbnailCannotBeChangedAfterWritingOfDataStarted property value.
</summary>
<returns>The PreserveThumbnailCannotBeChangedAfterWritingOfDataStarted property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Property0HasAlreadyBeenSetAndItCannotBeChangedFormat(System.Object)">
<summary>
Formats a localized string similar to 'Property {0} has already been set and it cannot be changed'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.PropertyIsReadOnlyFormat">
<summary>
The stub formatting method returning the PropertyIsReadOnly property value.
</summary>
<returns>The PropertyIsReadOnly property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.PropertyMustBeSetFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} must be set'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.PropertyWasAlreadySetFormat(System.Object)">
<summary>
Formats a localized string similar to 'Property {0} was already set'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ProviderDoesNotProviderServiceFormat(System.Object)">
<summary>
Formats a localized string similar to 'Provider does not provider service {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RecordMustBeFrom0To9Format">
<summary>
The stub formatting method returning the RecordMustBeFrom0To9 property value.
</summary>
<returns>The RecordMustBeFrom0To9 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RecordNumberPartOfExifMetadataIdentificationIsInvalidFormat">
<summary>
The stub formatting method returning the RecordNumberPartOfExifMetadataIdentificationIsInvalid property value.
</summary>
<returns>The RecordNumberPartOfExifMetadataIdentificationIsInvalid property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RecordsCanBeWrittenOnlyWhenWriterStateIsRecordsFormat">
<summary>
The stub formatting method returning the RecordsCanBeWrittenOnlyWhenWriterStateIsRecords property value.
</summary>
<returns>The RecordsCanBeWrittenOnlyWhenWriterStateIsRecords property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RecycleInternalCanBeCalledOnlyOnClosedMessageboxFormat">
<summary>
The stub formatting method returning the RecycleInternalCanBeCalledOnlyOnClosedMessagebox property value.
</summary>
<returns>The RecycleInternalCanBeCalledOnlyOnClosedMessagebox property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RegistryHiveIsNoLongerSupportedFormat(System.Object)">
<summary>
Formats a localized string similar to 'The {0} registry hive is no longer supported'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RemovingWasCenceledInEventHandlerFormat">
<summary>
The stub formatting method returning the RemovingWasCenceledInEventHandler property value.
</summary>
<returns>The RemovingWasCenceledInEventHandler property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RendererMustRender0Format(System.Object)">
<summary>
Formats a localized string similar to 'Renderer must render {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ReportedLengthOf8BIMSegmentDoesnFFitIntoBaseStreamFormat">
<summary>
The stub formatting method returning the ReportedLengthOf8BIMSegmentDoesnFFitIntoBaseStream property value.
</summary>
<returns>The ReportedLengthOf8BIMSegmentDoesnFFitIntoBaseStream property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ResultCannotBeNoneFormat">
<summary>
The stub formatting method returning the ResultCannotBeNone property value.
</summary>
<returns>The ResultCannotBeNone property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Retuned1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} retuned {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RootElementMustBe0Format(System.Object)">
<summary>
Formats a localized string similar to 'Root element must be &lt;{0}&gt;.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RootElementMustBe0Or1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Root element must be &lt;{0}&gt; or &lt;{1}&gt;'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.RootElementOf0MustBe1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Root element of {0} must be {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SerializedValueHasNotLength2BytesFormat">
<summary>
The stub formatting method returning the SerializedValueHasNotLength2Bytes property value.
</summary>
<returns>The SerializedValueHasNotLength2Bytes property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ShouldBeGreaterThanZeroFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} should be greater than zero'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SizeOfConstrainedStreamMustFitIntoBaseStreamFormat">
<summary>
The stub formatting method returning the SizeOfConstrainedStreamMustFitIntoBaseStream property value.
</summary>
<returns>The SizeOfConstrainedStreamMustFitIntoBaseStream property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SlashExpectedFormat">
<summary>
The stub formatting method returning the SlashExpected property value.
</summary>
<returns>The SlashExpected property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SourceFileOrDirectoryNotFoundFormat">
<summary>
The stub formatting method returning the SourceFileOrDirectoryNotFound property value.
</summary>
<returns>The SourceFileOrDirectoryNotFound property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StoredItemLenghtMustBe0Format(System.Object)">
<summary>
Formats a localized string similar to 'Stored item lenght must be {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StoredTimeDoesNotContainValidCharacterOnTimeZoneOffsetSignPositionFormat">
<summary>
The stub formatting method returning the StoredTimeDoesNotContainValidCharacterOnTimeZoneOffsetSignPosition property value.
</summary>
<returns>The StoredTimeDoesNotContainValidCharacterOnTimeZoneOffsetSignPosition property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StoredValueHasInvalidLenghtFormat">
<summary>
The stub formatting method returning the StoredValueHasInvalidLenght property value.
</summary>
<returns>The StoredValueHasInvalidLenght property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StreamCannotBeUpdatedBecauseItsContentDiffersFromContentFormat">
<summary>
The stub formatting method returning the StreamCannotBeUpdatedBecauseItsContentDiffersFromContent property value.
</summary>
<returns>The StreamCannotBeUpdatedBecauseItsContentDiffersFromContent property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StreamCannotBeUpdatedBycauseItHasDifferentLengthFromFormat">
<summary>
The stub formatting method returning the StreamCannotBeUpdatedBycauseItHasDifferentLengthFrom property value.
</summary>
<returns>The StreamCannotBeUpdatedBycauseItHasDifferentLengthFrom property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StreamDoesNotSupportSeekingOrReadingFormat">
<summary>
The stub formatting method returning the StreamDoesNotSupportSeekingOrReading property value.
</summary>
<returns>The StreamDoesNotSupportSeekingOrReading property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StreamMustSupportReadingAndSeekingFormat">
<summary>
The stub formatting method returning the StreamMustSupportReadingAndSeeking property value.
</summary>
<returns>The StreamMustSupportReadingAndSeeking property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StreamRepresentingExifMetadataItemMustSupportSeekingAndReadingFormat">
<summary>
The stub formatting method returning the StreamRepresentingExifMetadataItemMustSupportSeekingAndReading property value.
</summary>
<returns>The StreamRepresentingExifMetadataItemMustSupportSeekingAndReading property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StreamToReadJPEGFromMustBeAbleToSeekAndReadFormat">
<summary>
The stub formatting method returning the StreamToReadJPEGFromMustBeAbleToSeekAndRead property value.
</summary>
<returns>The StreamToReadJPEGFromMustBeAbleToSeekAndRead property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StreamToWriteExifMedatadaToMustSupportReadingWritingAndSeekingFormat">
<summary>
The stub formatting method returning the StreamToWriteExifMedatadaToMustSupportReadingWritingAndSeeking property value.
</summary>
<returns>The StreamToWriteExifMedatadaToMustSupportReadingWritingAndSeeking property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.String0CanotBeStoredWithoutViolatingLengthAndOrFixedConstraintFormat(System.Object)">
<summary>
Formats a localized string similar to 'String &quot;{0}&quot; canot be stored without violating length and/or fixed constraint'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.String0IsNotValid1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'String &quot;{0}&quot; is not valid {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.String0RepresentsHigherNumberThanMaximum1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'String {0} represents higher number than maximum {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StringIsNotValidDescriptionFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'String &quot;{0}&quot; is not valid description of {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.StringMustConsistOfEventNumberOfHexadeimalNumeralsFormat">
<summary>
The stub formatting method returning the StringMustConsistOfEventNumberOfHexadeimalNumerals property value.
</summary>
<returns>The StringMustConsistOfEventNumberOfHexadeimalNumerals property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SubIFDFormat">
<summary>
The stub formatting method returning the SubIFD property value.
</summary>
<returns>The SubIFD property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SubIFDKeyMustBeValidUInt16ValueFormat">
<summary>
The stub formatting method returning the SubIFDKeyMustBeValidUInt16Value property value.
</summary>
<returns>The SubIFDKeyMustBeValidUInt16Value property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SubjectNameCanContainOnlyGraphicCharactersExceptAndFormat">
<summary>
The stub formatting method returning the SubjectNameCanContainOnlyGraphicCharactersExceptAnd property value.
</summary>
<returns>The SubjectNameCanContainOnlyGraphicCharactersExceptAnd property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SubjectReferenceNumberMustBeMemberOfEitherSubjectReferenceNumbersSubjectMatterNumbersOrEconomySubjectDetailFormat">
<summary>
The stub formatting method returning the SubjectReferenceNumberMustBeMemberOfEitherSubjectReferenceNumbersSubjectMatterNumbersOrEconomySubjectDetail property value.
</summary>
<returns>The SubjectReferenceNumberMustBeMemberOfEitherSubjectReferenceNumbersSubjectMatterNumbersOrEconomySubjectDetail property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SuppliedStreamByteOrderDoesNotMatchByteOrderTestWordFormat">
<summary>
The stub formatting method returning the SuppliedStreamByteOrderDoesNotMatchByteOrderTestWord property value.
</summary>
<returns>The SuppliedStreamByteOrderDoesNotMatchByteOrderTestWord property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SuppliedStreamHasInvalidByteOrderMarkerFormat">
<summary>
The stub formatting method returning the SuppliedStreamHasInvalidByteOrderMarker property value.
</summary>
<returns>The SuppliedStreamHasInvalidByteOrderMarker property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SupportsNeitherWritingNorSeekingFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} supports neither writing nor seeking'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormastStringExpectedAt0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in formast string. &apos;]&apos; expected at {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringDMustBeFollowedWithAt0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. &apos;D&apos; must be followed with &apos;(&apos; at {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringLMustBeFollowedWithAt0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. &apos;L&apos; must be followed with &apos;(&apos; at {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringMMustBeFollowedWithAt0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. &apos;M&apos; must be followed with &apos;(&apos; at {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringMustBeFollowedWithDOrDAt0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. &apos;[&apos; must be followed with &apos;d&apos; or &apos;D&apos; at {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringSMustBeFollowedWithAt0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. &apos;S&apos; must be followed with &apos;(&apos; at {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringTMustBeFollowedByAt0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. &apos;T&apos; must be followed by &apos;(&apos; at {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedCharacter0InConditionAt1ExpectedComparisonOperatorFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected character &apos;{0}&apos; in condition at {1}. Expected comparison operator.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedCharacter0InConditionLeftSideAbsoluteValueAt1Expected2Format(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected character &apos;{0}&apos; in condition left side absolute value at {1}. Expected &apos;{2}&apos;.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedCharacterInFormatStringConditionLeftSide0At1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected character in format string (condition left side) {0} at {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedCharacterInFormatStringConditionLeftSideAbsoluteValue0At1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected character in format string (condition left side absolute value) {0} at {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFomatStringAt0ExpectedForConditionFormat(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of fomat string at {0}. Expected &apos;)&apos; for condition.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0ExpectedComparisonOperatorFormat(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Expected comparison operator.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0ExpectedNumberOrFormat(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Expected number or &apos;)&apos;.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0NumberExpectedFormat(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Number expected.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0NumberOrExpectedFormat(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Number, &apos;.&apos; or &apos;:&apos; expected.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0NumberOrExpected_Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Number or &apos;:&apos; expected.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionAt0NumberOrExpected__Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition at {0}. Number or &apos;.&apos; expected.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionLeftSide0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition left side {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionLeftSideAbsoluteValue0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition left side absolute value {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInConditionLeftSideAbsoluteValueAt0Expected1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in condition left side absolute value at {0}. Expected &apos;{1}&apos;.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInInnerFormatSpecificationAt0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in inner format specification at {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnexpectedEndOfFormatStringInQuotedStringAt0Format(System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unexpected end of format string in quoted string at {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1ExpectedNumberOrFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Expected number or &apos;)&apos;.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1NumberExpectedFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Number expected.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1NumberOrExpectedFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Number, &apos;.&apos; or &apos;:&apos; expected.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1NumberOrExpected_Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Number or &apos;:&apos; expected.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SyntaxErrorInFormatStringUnextectedCharacter0InConditionAt1NumberOrExpected__Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Syntax error in format string. Unextected character &apos;{0}&apos; in condition at {1}. Number or &apos;.&apos; expected.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.SystemSoundPlayerWrapperCanBeConvertedOnlyWhenItProvidesSoundLocationFormat">
<summary>
The stub formatting method returning the SystemSoundPlayerWrapperCanBeConvertedOnlyWhenItProvidesSoundLocation property value.
</summary>
<returns>The SystemSoundPlayerWrapperCanBeConvertedOnlyWhenItProvidesSoundLocation property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TagMarkerMustBe1ChFormat">
<summary>
The stub formatting method returning the TagMarkerMustBe1Ch property value.
</summary>
<returns>The TagMarkerMustBe1Ch property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TargetCannotBeUpdatedBecauseItContainsNoExifDataFormat">
<summary>
The stub formatting method returning the TargetCannotBeUpdatedBecauseItContainsNoExifData property value.
</summary>
<returns>The TargetCannotBeUpdatedBecauseItContainsNoExifData property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TextCannotBeChangedViaTheTextPropertyFormat">
<summary>
The stub formatting method returning the TextCannotBeChangedViaTheTextProperty property value.
</summary>
<returns>The TextCannotBeChangedViaTheTextProperty property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TextMustBeEncodeableByASCIIFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} text must be encodeable by ASCII'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.The0MarkupExtensionRequiresAn1ServiceProviderFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'The {0} markup extension requires an {1} service provider'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.The0PropertyHaveAlreadyBeenInitializedFormat(System.Object)">
<summary>
Formats a localized string similar to 'The {0} property have already been initialized.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TheBeginnignOfExifMapIsInvalidFormat">
<summary>
The stub formatting method returning the TheBeginnignOfExifMapIsInvalid property value.
</summary>
<returns>The TheBeginnignOfExifMapIsInvalid property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TheCollectionChangeActionOtherActionAndActionsThatAreNotMembersOfTheCollectionActionEnumerationAreNotSupportedOn0CollectionFormat(System.Object)">
<summary>
Formats a localized string similar to 'The CollectionChangeAction.Other action and actions that are not members of the CollectionAction enumeration are not supported on {0} collection.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TheEnumerationHasNotStartedYetOrHasAlreadyFinishedFormat">
<summary>
The stub formatting method returning the TheEnumerationHasNotStartedYetOrHasAlreadyFinished property value.
</summary>
<returns>The TheEnumerationHasNotStartedYetOrHasAlreadyFinished property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TheFile0CannotBeFoundFormat(System.Object)">
<summary>
Formats a localized string similar to 'The file {0} cannot be found.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TheImageFileIsInvalidFormat">
<summary>
The stub formatting method returning the TheImageFileIsInvalid property value.
</summary>
<returns>The TheImageFileIsInvalid property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TheLenghtOf0ExceedsLimitFormat(System.Object)">
<summary>
Formats a localized string similar to 'The lenght of {0} exceeds limit'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThePathSDepthIsNotEnoughToRemove0LevelsFormat(System.Object)">
<summary>
Formats a localized string similar to 'The path&apos;s depth is not enough to remove {0} levels'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThePreviousPropertyOfIFDBeingSetAsFollowingMustBeNullFormat">
<summary>
The stub formatting method returning the ThePreviousPropertyOfIFDBeingSetAsFollowingMustBeNull property value.
</summary>
<returns>The ThePreviousPropertyOfIFDBeingSetAsFollowingMustBeNull property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThereAreNotEnoughtItemsIn0Format(System.Object)">
<summary>
Formats a localized string similar to 'There are not enought items in {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThereIsAlreadyDirectoryNamed0Format(System.Object)">
<summary>
Formats a localized string similar to 'There is already directory named {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThereIsNotEngoughSpaceInArrayAfter0ToPlaceAllItemsFromCollectionFormat(System.Object)">
<summary>
Formats a localized string similar to 'There is not engough space in array after {0}  to place all items from collection'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThereIsNotEnoughSpaceBetween0AndTheEndOfTheArrayForItemsStoredInCollectionFormat(System.Object)">
<summary>
Formats a localized string similar to 'There is not enough space between {0} and the end of the array for items stored in collection'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThereIsNotEnoughtResultsFormat">
<summary>
The stub formatting method returning the ThereIsNotEnoughtResults property value.
</summary>
<returns>The ThereIsNotEnoughtResults property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThereWasAnErrorInvokingMessageBoxSeeInnerExceptionForDetailsFormat">
<summary>
The stub formatting method returning the ThereWasAnErrorInvokingMessageBoxSeeInnerExceptionForDetails property value.
</summary>
<returns>The ThereWasAnErrorInvokingMessageBoxSeeInnerExceptionForDetails property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThereWasAnErrorObtaininInstanceOfDefaultImplementationOfMessageBoxSeeInnerExceptionForDetailsFormat">
<summary>
The stub formatting method returning the ThereWasAnErrorObtaininInstanceOfDefaultImplementationOfMessageBoxSeeInnerExceptionForDetails property value.
</summary>
<returns>The ThereWasAnErrorObtaininInstanceOfDefaultImplementationOfMessageBoxSeeInnerExceptionForDetails property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThereWasAnErrorSavingFile0Format(System.Object)">
<summary>
Formats a localized string similar to 'There was an error saving file {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TheTagsPropertyHaveNotBeenInitializedUseTheSetTagsMethodToInitializeItFormat">
<summary>
The stub formatting method returning the TheTagsPropertyHaveNotBeenInitializedUseTheSetTagsMethodToInitializeIt property value.
</summary>
<returns>The TheTagsPropertyHaveNotBeenInitializedUseTheSetTagsMethodToInitializeIt property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.This0CannotBeConvertedTo1BecauseItDoesnTContain1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'This {0} cannot be converted to {1} because it doesn&apos;t contain {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisControlIsAlreadyUsedByMessageBoxItCannotBeUsedTwiceFormat">
<summary>
The stub formatting method returning the ThisControlIsAlreadyUsedByMessageBoxItCannotBeUsedTwice property value.
</summary>
<returns>The ThisControlIsAlreadyUsedByMessageBoxItCannotBeUsedTwice property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisConverterCanConvertBackOnlyFrom0Format(System.Object)">
<summary>
Formats a localized string similar to 'This converter can convert back only from {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisConverterCanConvertBackOnlyTo0Format(System.Object)">
<summary>
Formats a localized string similar to 'This converter can convert back only to {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisConverterCanConvertOnlyBetweenTypes0And1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'This converter can convert only between types {0} and {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisConverterCanConvertOnlyFrom0Format(System.Object)">
<summary>
Formats a localized string similar to 'This converter can convert only from {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisConverterCanConvertOnlyTo0Format(System.Object)">
<summary>
Formats a localized string similar to 'This converter can convert only to {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisEnumerationDoesNotAllowValuesThatAreNotMemberOfItFormat">
<summary>
The stub formatting method returning the ThisEnumerationDoesNotAllowValuesThatAreNotMemberOfIt property value.
</summary>
<returns>The ThisEnumerationDoesNotAllowValuesThatAreNotMemberOfIt property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisInstanceIsLockedFormat">
<summary>
The stub formatting method returning the ThisInstanceIsLocked property value.
</summary>
<returns>The ThisInstanceIsLocked property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisInstanceWasCreatedFromSizeChangedEventArgsWhichFormat">
<summary>
The stub formatting method returning the ThisInstanceWasCreatedFromSizeChangedEventArgsWhich property value.
</summary>
<returns>The ThisInstanceWasCreatedFromSizeChangedEventArgsWhich property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisInstanceWasNotCreatedForUpdatingFormat">
<summary>
The stub formatting method returning the ThisInstanceWasNotCreatedForUpdating property value.
</summary>
<returns>The ThisInstanceWasNotCreatedForUpdating property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisStreamDoesNotSupportSeekingFormat">
<summary>
The stub formatting method returning the ThisStreamDoesNotSupportSeeking property value.
</summary>
<returns>The ThisStreamDoesNotSupportSeeking property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisStreamDoesNotSupportWritingFormat">
<summary>
The stub formatting method returning the ThisStreamDoesNotSupportWriting property value.
</summary>
<returns>The ThisStreamDoesNotSupportWriting property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThisT1orT2CannotBeConvertedTo0BecauseItDoesnTContainValueOf1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'This T1orT2 cannot be converted to {0} because it doesn&apos;t contain value of {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThousandMultiplicationSuffixMustDifferFromNumeralsFormat">
<summary>
The stub formatting method returning the ThousandMultiplicationSuffixMustDifferFromNumerals property value.
</summary>
<returns>The ThousandMultiplicationSuffixMustDifferFromNumerals property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThumbnailCanBePreservedOnlyIfExifWriterOperatesOverAlreadyExistingStreamOfExifMetadataFormat">
<summary>
The stub formatting method returning the ThumbnailCanBePreservedOnlyIfExifWriterOperatesOverAlreadyExistingStreamOfExifMetadata property value.
</summary>
<returns>The ThumbnailCanBePreservedOnlyIfExifWriterOperatesOverAlreadyExistingStreamOfExifMetadata property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ThumbnailDataAreInvalidFormat">
<summary>
The stub formatting method returning the ThumbnailDataAreInvalid property value.
</summary>
<returns>The ThumbnailDataAreInvalid property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TiffThumbnailSizeIsSpecifiedToBeOutsideOfExifStreamFormat">
<summary>
The stub formatting method returning the TiffThumbnailSizeIsSpecifiedToBeOutsideOfExifStream property value.
</summary>
<returns>The TiffThumbnailSizeIsSpecifiedToBeOutsideOfExifStream property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TimeMustBeNonNegativeAndLessThen1DayFormat">
<summary>
The stub formatting method returning the TimeMustBeNonNegativeAndLessThen1Day property value.
</summary>
<returns>The TimeMustBeNonNegativeAndLessThen1Day property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ToManyCLSCompliantAttributesFormat">
<summary>
The stub formatting method returning the ToManyCLSCompliantAttributes property value.
</summary>
<returns>The ToManyCLSCompliantAttributes property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Type0IsNotAcceptableForDataType1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Type {0} is not acceptable for data type {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Type0IsNotSupportedFormat(System.Object)">
<summary>
Formats a localized string similar to 'Type {0} is not supported'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Type0IsNotSupportedAsValueOfStatusedControlPropertyFormat(System.Object)">
<summary>
Formats a localized string similar to 'Type {0} is not supported as value of StatusedControl property.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TypeIsNotGenericFormat">
<summary>
The stub formatting method returning the TypeIsNotGeneric property value.
</summary>
<returns>The TypeIsNotGeneric property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TypeIsSpecifiedNeitherViaPropertyNorInValueFormat">
<summary>
The stub formatting method returning the TypeIsSpecifiedNeitherViaPropertyNorInValue property value.
</summary>
<returns>The TypeIsSpecifiedNeitherViaPropertyNorInValue property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TypeMustBeEnumerationFormat">
<summary>
The stub formatting method returning the TypeMustBeEnumeration property value.
</summary>
<returns>The TypeMustBeEnumeration property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TypeMustInheritFromMessageBoxFormat">
<summary>
The stub formatting method returning the TypeMustInheritFromMessageBox property value.
</summary>
<returns>The TypeMustInheritFromMessageBox property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TypeNotEnumFormat(System.Object)">
<summary>
Formats a localized string similar to 'Type {0} is not enum'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.TypeOfIFDFollowingAfterIFD0MustBeIFDMainFormat">
<summary>
The stub formatting method returning the TypeOfIFDFollowingAfterIFD0MustBeIFDMain property value.
</summary>
<returns>The TypeOfIFDFollowingAfterIFD0MustBeIFDMain property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Types0And1AreNotCompatibleFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Types {0} and {1} are not compatible'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnableToCastType0ToType1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Unable to cast type {0} to type {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnexpectedCallOf0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unexpected call of {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnexpectedCharacter0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unexpected character {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnexpectedCharacter0InRomanNumeralFormat(System.Object)">
<summary>
Formats a localized string similar to 'Unexpected character {0} in Roman numeral.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnexpectedCharacters0InRomanNumeralFormat(System.Object)">
<summary>
Formats a localized string similar to 'Unexpected characters {0} in Roman numeral'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnexpedtedValue0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unexpedted value {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnknownBaseTypeOfEnumFormat">
<summary>
The stub formatting method returning the UnknownBaseTypeOfEnum property value.
</summary>
<returns>The UnknownBaseTypeOfEnum property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnknownByteOrderMarkFormat">
<summary>
The stub formatting method returning the UnknownByteOrderMark property value.
</summary>
<returns>The UnknownByteOrderMark property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnknownImageExtensionImageWillNotBeSavedFormat">
<summary>
The stub formatting method returning the UnknownImageExtensionImageWillNotBeSaved property value.
</summary>
<returns>The UnknownImageExtensionImageWillNotBeSaved property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnknownISO2022EncodingType0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unknown ISO-2022 encoding type {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnknownPredefinedName0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unknown predefined name &quot;{0}&quot;.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnknownState0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unknown state {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnknownSystemMetadataItemNameFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} is not known system metadata item name.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnknownUnderlyingType0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unknown underlying type {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Unsupported0ValueFormat(System.Object)">
<summary>
Formats a localized string similar to 'Unsupported {0} value.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnsupportedCodeDomObject0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unsupported CodeDom object {0}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnsupportedElementFormat(System.Object)">
<summary>
Formats a localized string similar to 'Unsupported element {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnsupportedSourceTypeFormat">
<summary>
The stub formatting method returning the UnsupportedSourceType property value.
</summary>
<returns>The UnsupportedSourceType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnsupportedTargetTypeFormat">
<summary>
The stub formatting method returning the UnsupportedTargetType property value.
</summary>
<returns>The UnsupportedTargetType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnsupportedTypeForComparison0Format(System.Object)">
<summary>
Formats a localized string similar to 'Unsupported type for comparison ({0}).'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.UnsupportedTypeOfMemberInfoOfNamedArgumentOfAttributeFormat">
<summary>
The stub formatting method returning the UnsupportedTypeOfMemberInfoOfNamedArgumentOfAttribute property value.
</summary>
<returns>The UnsupportedTypeOfMemberInfoOfNamedArgumentOfAttribute property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.Value0CannotBeInterperetedAsRationalToManySlashesFormat(System.Object)">
<summary>
Formats a localized string similar to 'Value {0} cannot be interpereted as rational - to many slashes'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueCanBeConverterNeitherTo0NorTo1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Value can be converter neither to {0} nor to {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueCannotBeEmptyStringFormat">
<summary>
The stub formatting method returning the ValueCannotBeEmptyString property value.
</summary>
<returns>The ValueCannotBeEmptyString property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueCannotBeNaNOrInfinityFormat">
<summary>
The stub formatting method returning the ValueCannotBeNaNOrInfinity property value.
</summary>
<returns>The ValueCannotBeNaNOrInfinity property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueIsInvalidASCIIValueBecauseItIsNotTerminatedWithFormat">
<summary>
The stub formatting method returning the ValueIsInvalidASCIIValueBecauseItIsNotTerminatedWith property value.
</summary>
<returns>The ValueIsInvalidASCIIValueBecauseItIsNotTerminatedWith property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueMustBeForFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} must be {1} for {2}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfIncompatibleTypeIsBeingSetFormat">
<summary>
The stub formatting method returning the ValueOfIncompatibleTypeIsBeingSet property value.
</summary>
<returns>The ValueOfIncompatibleTypeIsBeingSet property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfIncompatibleTypePassedToASCIIRecordFormat">
<summary>
The stub formatting method returning the ValueOfIncompatibleTypePassedToASCIIRecord property value.
</summary>
<returns>The ValueOfIncompatibleTypePassedToASCIIRecord property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfIncompatibleTypePassedToExifRecordFormat">
<summary>
The stub formatting method returning the ValueOfIncompatibleTypePassedToExifRecord property value.
</summary>
<returns>The ValueOfIncompatibleTypePassedToExifRecord property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfObjeValuePropertyMustBeEitherOfTypeT1OrOfTypeT1Format">
<summary>
The stub formatting method returning the ValueOfObjeValuePropertyMustBeEitherOfTypeT1OrOfTypeT1 property value.
</summary>
<returns>The ValueOfObjeValuePropertyMustBeEitherOfTypeT1OrOfTypeT1 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfSomeTypeWasPassedWhereItIsNotAcceptableFormat">
<summary>
The stub formatting method returning the ValueOfSomeTypeWasPassedWhereItIsNotAcceptable property value.
</summary>
<returns>The ValueOfSomeTypeWasPassedWhereItIsNotAcceptable property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfThe0PropertyCannotBeChangedAfterItWasSetFormat(System.Object)">
<summary>
Formats a localized string similar to 'Value of the {0} property cannot be changed after it was set.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfType0CannotBeConvertedTo1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Value of type {0} cannot be converted to {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfType0CannotBeDeserializedStandAloneBecauseItsFormat(System.Object)">
<summary>
Formats a localized string similar to 'Value of type {0} cannot be deserialized stand-alone, because its object representation does not inherit from CodeObject.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfType0IsNotAcceptableFormat(System.Object)">
<summary>
Formats a localized string similar to 'Value of type {0} is not acceptable.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfUnexpectedType0Expected1Format(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Value of unexpected type {0}. Expected {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueOfUnexpectedType0ExpectedOneOfFollowingTypesFormat(System.Object)">
<summary>
Formats a localized string similar to 'Value of unexpected type {0}, expected one of following types:'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.ValueWasNotFoundFormat">
<summary>
The stub formatting method returning the ValueWasNotFound property value.
</summary>
<returns>The ValueWasNotFound property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.VersionComponentMustBeGreaterThanOrEqualToZeroFormat">
<summary>
The stub formatting method returning the VersionComponentMustBeGreaterThanOrEqualToZero property value.
</summary>
<returns>The VersionComponentMustBeGreaterThanOrEqualToZero property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.VersionPartToVersionMinorNullFormat">
<summary>
The stub formatting method returning the VersionPartToVersionMinorNull property value.
</summary>
<returns>The VersionPartToVersionMinorNull property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WasGreaterThanLegnthOf2Format(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} + {1} was greater than legnth of {2}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WasInfinityFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} was infinity'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WasNaNFormat(System.Object)">
<summary>
Formats a localized string similar to '{0} was NaN'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WasNotMemberOfFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} was not member of {1}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.When0Is12MustBe3Format(System.Object,System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'When {0} is {1}, {2} must be {3}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<param name="arg3">An object (3) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.When0Is1Then2MustBeSetFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'When {0} is {1} then {2} must be set'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.When0Is1ThenTypeOfThisInstanceMustBe2Format(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'When {0} is {1} then type of this instance must be {2}'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WhenFixedIsTrueLenCannotBe0Format">
<summary>
The stub formatting method returning the WhenFixedIsTrueLenCannotBe0 property value.
</summary>
<returns>The WhenFixedIsTrueLenCannotBe0 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WhenStageIsGetConstructorArgumentsGetNamedArgumentsInvokeConstructorGetConstructorArgumentValueSetFieldSetPropertyInvokeMethodOrGetNamedArgumentValueCustomAttributeDataCannotBeNullFormat">
<summary>
The stub formatting method returning the WhenStageIsGetConstructorArgumentsGetNamedArgumentsInvokeConstructorGetConstructorArgumentValueSetFieldSetPropertyInvokeMethodOrGetNamedArgumentValueCustomAttributeDataCannotBeNull property value.
</summary>
<returns>The WhenStageIsGetConstructorArgumentsGetNamedArgumentsInvokeConstructorGetConstructorArgumentValueSetFieldSetPropertyInvokeMethodOrGetNamedArgumentValueCustomAttributeDataCannotBeNull property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WhenStageIsGetConstructorArgumentValueArgumentIndexMustBeWithinRangeOfCustomAttributeDateConstructorArgumentsFormat">
<summary>
The stub formatting method returning the WhenStageIsGetConstructorArgumentValueArgumentIndexMustBeWithinRangeOfCustomAttributeDateConstructorArguments property value.
</summary>
<returns>The WhenStageIsGetConstructorArgumentValueArgumentIndexMustBeWithinRangeOfCustomAttributeDateConstructorArguments property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WhenStageIsGetConstructorArgumentValueArgumentIndexMustBeWithinRangeOfCustomAttributeDateNamedArgumentsFormat">
<summary>
The stub formatting method returning the WhenStageIsGetConstructorArgumentValueArgumentIndexMustBeWithinRangeOfCustomAttributeDateNamedArguments property value.
</summary>
<returns>The WhenStageIsGetConstructorArgumentValueArgumentIndexMustBeWithinRangeOfCustomAttributeDateNamedArguments property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WhenStageIsGetCustomAttributeDateOrGetCustomAttributesCustomAttribuetDataMustBeNullAndArgumentIndexMustBe1Format">
<summary>
The stub formatting method returning the WhenStageIsGetCustomAttributeDateOrGetCustomAttributesCustomAttribuetDataMustBeNullAndArgumentIndexMustBe1 property value.
</summary>
<returns>The WhenStageIsGetCustomAttributeDateOrGetCustomAttributesCustomAttribuetDataMustBeNullAndArgumentIndexMustBe1 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.WriterIsNotInitializedOrIsFinishedFormat">
<summary>
The stub formatting method returning the WriterIsNotInitializedOrIsFinished property value.
</summary>
<returns>The WriterIsNotInitializedOrIsFinished property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.XMLAttributeHasNoParentElementFormat">
<summary>
The stub formatting method returning the XMLAttributeHasNoParentElement property value.
</summary>
<returns>The XMLAttributeHasNoParentElement property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Exceptions.YouShouldNotReplaceRecordsWhichServesAsPointersToSubIFDsIfYouDoSoReplacementRecordMustBeOfTypeUInt16WithOneElementFixedLengthFormat">
<summary>
The stub formatting method returning the YouShouldNotReplaceRecordsWhichServesAsPointersToSubIFDsIfYouDoSoReplacementRecordMustBeOfTypeUInt16WithOneElementFixedLength property value.
</summary>
<returns>The YouShouldNotReplaceRecordsWhichServesAsPointersToSubIFDsIfYouDoSoReplacementRecordMustBeOfTypeUInt16WithOneElementFixedLength property value.</returns>
</member>
<member name="T:Tools.ResourcesT.Resources">
 <summary>Provides access to various resources that should be publicly available for users of ĐTools</summary>
 <remarks>
 Only calls to <see cref="N:Tools.My.Resources"/> are allowed here;
 only properties are allowed here;
 because properties shouldn't be decorated with AuthorAttribute and VersionAttribute, it is not necessary to use these attribute here
 </remarks>
</member>
<member name="P:Tools.ResourcesT.Resources.ToolsIcon">
 <summary>Icon representing ĐTools project</summary>
 <remarks>The 'Đ' letter</remarks>
</member>
<member name="T:Tools.ResourcesT.SystemResources">
 <summary>Wraps internal class of .NET Framework <see cref="T:System.SR"/></summary>
 <remarks>Functionality of this class strongly relays on implementation details of .NET Framework!!!</remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ResourcesT.SystemResources.#ctor">
 <summary>CTor</summary>
 <remarks>In order not to be possible to create instance</remarks>
</member>
<member name="P:Tools.ResourcesT.SystemResources.SRType">
 <summary>Gets <see cref="T:System.Type"/> that represents <see cref="T:System.SR"/> class</summary>
</member>
<member name="P:Tools.ResourcesT.SystemResources.KeyNames">
 <summary>Gets names of all constants in <see cref="T:System.SR"/> class</summary>
 <returns>Array that contains name of all public and private constants in <see cref="T:Syste.SR"/></returns>
</member>
<member name="P:Tools.ResourcesT.SystemResources.Key(System.String)">
 <summary>Get value of specified field</summary>
 <param name="Name">Name of constant defined in <see cref="T:System.SR"/>. All possible names are returned by the <see cref="P:Tools.ResourcesT.SystemResources.KeyNames"/> property</param>
 <exception cref="T:System.NullReferenceException">Field with name <paramref name="Name"/> is not accessible</exception>
</member>
<member name="P:Tools.ResourcesT.SystemResources.Value(Tools.ResourcesT.SystemResources.KnownValues)">
 <summary>Gets string value of system resource</summary>
 <returns>Value of given system resource or null when resource is not available.</returns>
 <param name="Key">Key of resource. Possible keys are retruned by the <see cref="P:Tools.ResourcesT.SystemResources.Key(System.String)"/> property</param>
</member>
<member name="P:Tools.ResourcesT.SystemResources.Value(System.String)">
 <summary>Gets string value of system resource</summary>
 <returns>Value of given system resource or null when resource is not available.</returns>
 <param name="Key">Key of resource. Possible keys are retruned by the <see cref="P:Tools.ResourcesT.SystemResources.Key(System.String)"/> property</param>
 <exception cref="T:System.Reflection.TargetInvocationException">Unknown unexpected error when obtaining resource value</exception>
</member>
<member name="P:Tools.ResourcesT.SystemResources.ObjValue(System.String)">
 <summary>Gets object value of system resource</summary>
 <returns>Value of given system resource or null when resource is not available.</returns>
 <param name="Key">Key of resource. Possible keys are retruned by the <see cref="P:Tools.ResourcesT.SystemResources.Key(System.String)"/> property</param>
 <exception cref="T:System.Reflection.TargetInvocationException">Unknown unexpected error when obtaining resource value</exception>
</member>
<member name="P:Tools.ResourcesT.SystemResources.Value(System.String,System.Object[])">
 <summary>Gets formated string value of system resource</summary>
 <param name="Key">Key of resource. Possible keys are retruned by the <see cref="P:Tools.ResourcesT.SystemResources.Key(System.String)"/> property</param>
 <param name="args">Formating arguments</param>
 <returns>Formated value of given system resource or null when resource is not available.</returns>
</member>
<member name="T:Tools.ResourcesT.SystemResources.KnownValues">
 <summary>Contains values of known keys for the <see cref="F:Tools.ResourcesT.SystemResources.KnownValues.Value"/> property</summary>
 <completionlist cref="T:Tools.ResourcesT.SystemResources.KnownValues"/>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Value">
 <summary>Key value</summary>
</member>
<member name="M:Tools.ResourcesT.SystemResources.KnownValues.op_Implicit(Tools.ResourcesT.SystemResources.KnownValues)~System.String">
 <summary>Allows use of <see cref="T:Tools.ResourcesT.SystemResources.KnownValues"/> class as <see cref="T:System.String"/> by converting it to <see cref="T:System.String"/></summary>
 <param name="a">A <see cref="T:Tools.ResourcesT.SystemResources.KnownValues"/> instance to convert</param>
 <returns>Key value contained in <paramref name="a"/></returns>
</member>
<member name="M:Tools.ResourcesT.SystemResources.KnownValues.op_Implicit(System.String)~Tools.ResourcesT.SystemResources.KnownValues">
 <summary>Allows passings strings where <see cref="T:Tools.ResourcesT.SystemResources.KnownValues"/> is expected</summary>
 <param name="a"><see cref="T:System.String"/> to be converted</param>
 <returns>Instance of <see cref="T:Tools.ResourcesT.SystemResources.KnownValues"/> that contains <paramref name="a"/></returns>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.RTL">
 <summary>Key for resource getting something like "RTL_False"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugLaunchFailed">
 <summary>Key for resource getting something like "Cannot launch the debugger.  Make sure that a Microsoft (R) .NET Framework debugger is properly installed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugLaunchFailedTitle">
 <summary>Key for resource getting something like "Microsoft .NET Framework Debug Launch Failure"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugAssertTitle">
 <summary>Key for resource getting something like "Assertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugAssertBanner">
 <summary>Key for resource getting something like "---- DEBUG ASSERTION FAILED ----"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugAssertShortMessage">
 <summary>Key for resource getting something like "---- Assert Short Message ----"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugAssertLongMessage">
 <summary>Key for resource getting something like "---- Assert Long Message ----"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DebugMessageTruncated">
 <summary>Key for resource getting something like "{0}...&#13;&#10;&lt;truncated>"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ObjectDisposed">
 <summary>Key for resource getting something like "Object {0} has been disposed and can no longer be used."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported">
 <summary>Key for resource getting something like "This operation is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExceptionOccurred">
 <summary>Key for resource getting something like "An exception occurred writing trace output to log file '{0}'. {1}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MustAddListener">
 <summary>Key for resource getting something like "Only TraceListeners can be added to a TraceListenerCollection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ToStringNull">
 <summary>Key for resource getting something like "(null)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnumConverterInvalidValue">
 <summary>Key for resource getting something like "The value '{0}' is not a valid value for the enum '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConvertFromException">
 <summary>Key for resource getting something like "{0} cannot convert from {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConvertToException">
 <summary>Key for resource getting something like "'{0}' is unable to convert '{1}' to '{2}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConvertInvalidPrimitive">
 <summary>Key for resource getting something like "{0} is not a valid value for {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorMissingPropertyAccessors">
 <summary>Key for resource getting something like "Accessor methods for the {0} property are missing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorInvalidPropertyType">
 <summary>Key for resource getting something like "Invalid type for the {0} property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorMissingEventAccessors">
 <summary>Key for resource getting something like "Accessor methods for the {0} event are missing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorInvalidEventHandler">
 <summary>Key for resource getting something like "Invalid event handler for the {0} event."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorInvalidEventType">
 <summary>Key for resource getting something like "Invalid type for the {0} event."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidMemberName">
 <summary>Key for resource getting something like "Invalid member name."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorBadExtenderType">
 <summary>Key for resource getting something like "The {0} extender provider is not compatible with the {1} type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NullableConverterBadCtorArg">
 <summary>Key for resource getting something like "The specified type is not a nullable type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorExpectedElementType">
 <summary>Key for resource getting something like "Expected types in the collection to be of type {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorSameAssociation">
 <summary>Key for resource getting something like "Cannot create an association when the primary and secondary objects are the same."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorAlreadyAssociated">
 <summary>Key for resource getting something like "The primary and secondary objects are already associated with each other."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorProviderError">
 <summary>Key for resource getting something like "The type description provider {0} has returned null from {1} which is illegal."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorUnsupportedRemoteObject">
 <summary>Key for resource getting something like "The object {0} is being remoted by a proxy that does not support interface discovery.  This type of remoted object is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TypeDescriptorArgsCountMismatch">
 <summary>Key for resource getting something like "The number of elements in the Type and Object arrays must match."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorCreateSystemEvents">
 <summary>Key for resource getting something like "Failed to create system events window thread."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorCreateTimer">
 <summary>Key for resource getting something like "Cannot create timer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorKillTimer">
 <summary>Key for resource getting something like "Cannot end timer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorSystemEventsNotSupported">
 <summary>Key for resource getting something like "System event notifications are not supported under the current context. Server processes, for example, may not support global system event notifications."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorGetTempPath">
 <summary>Key for resource getting something like "Cannot get temporary file name"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CHECKOUTCanceled">
 <summary>Key for resource getting something like "The checkout was canceled by the user."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorInvalidServiceInstance">
 <summary>Key for resource getting something like "The service instance must derive from or implement {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorServiceExists">
 <summary>Key for resource getting something like "The service {0} already exists in the service container."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentNull_Key">
 <summary>Key for resource getting something like "Key cannot be null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_AddingDuplicate">
 <summary>Key for resource getting something like "An entry with the same key already exists."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidValue">
 <summary>Key for resource getting something like "Argument {0} should be larger than {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_NeedNonNegNum">
 <summary>Key for resource getting something like "Index is less than zero."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_InvalidThreshold">
 <summary>Key for resource getting something like "The specified threshold for creating dictionary is out of range."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EnumFailedVersion">
 <summary>Key for resource getting something like "Collection was modified after the enumerator was instantiated."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EnumOpCantHappen">
 <summary>Key for resource getting something like "Enumerator is positioned before the first element or after the last element of the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_MultiRank">
 <summary>Key for resource getting something like "Multi dimension array is not supported on this operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_NonZeroLowerBound">
 <summary>Key for resource getting something like "The lower bound of target array must be zero."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_InsufficientSpace">
 <summary>Key for resource getting something like "Insufficient space in the target location to copy the information."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_EnumeratorReset">
 <summary>Key for resource getting something like "Reset is not supported on the Enumerator."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Invalid_Array_Type">
 <summary>Key for resource getting something like "Target array type is not compatible with the type of items in the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Serialization_InvalidOnDeser">
 <summary>Key for resource getting something like "OnDeserialization method was called while the object was not being deserialized."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Serialization_MissingValues">
 <summary>Key for resource getting something like "The values for this collection are missing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Serialization_MismatchedCount">
 <summary>Key for resource getting something like "The serialized Count information doesn't match the number of items."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExternalLinkedListNode">
 <summary>Key for resource getting something like "The LinkedList node does not belong to current LinkedList."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LinkedListNodeIsAttached">
 <summary>Key for resource getting something like "The LinkedList node belongs a LinkedList."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LinkedListEmpty">
 <summary>Key for resource getting something like "The LinkedList is empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_WrongType">
 <summary>Key for resource getting something like "The value "{0}" isn't of type "{1}" and can't be used in this generic collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_ItemNotExist">
 <summary>Key for resource getting something like "The specified item does not exist in this KeyedCollection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_ImplementIComparable">
 <summary>Key for resource getting something like "At least one object must implement IComparable."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EmptyCollection">
 <summary>Key for resource getting something like "This operation is not valid on an empty collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EmptyQueue">
 <summary>Key for resource getting something like "Queue empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EmptyStack">
 <summary>Key for resource getting something like "Stack empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_CannotRemoveFromStackOrQueue">
 <summary>Key for resource getting something like "Removal is an invalid operation for Stack or Queue."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_Index">
 <summary>Key for resource getting something like "Index was out of range. Must be non-negative and less than the size of the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_SmallCapacity">
 <summary>Key for resource getting something like "capacity was less than the current size."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_ArrayPlusOffTooSmall">
 <summary>Key for resource getting something like "Destination array is not long enough to copy all the items in the collection. Check array index and length."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_KeyCollectionSet">
 <summary>Key for resource getting something like "Mutating a key collection derived from a dictionary is not allowed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_ValueCollectionSet">
 <summary>Key for resource getting something like "Mutating a value collection derived from a dictionary is not allowed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_ReadOnlyCollection">
 <summary>Key for resource getting something like "Collection is read-only."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_SortedListNestedWrite">
 <summary>Key for resource getting something like "This operation is not supported on SortedList nested types because they require modifying the original SortedList."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantModifyListSortDescriptionCollection">
 <summary>Key for resource getting something like "Once a ListSortDescriptionCollection has been created it can't be modified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPrimitiveType">
 <summary>Key for resource getting something like "Invalid Primitive Type: {0}. Consider using CodeObjectCreateExpression."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CodeGenOutputWriter">
 <summary>Key for resource getting something like "The output writer for code generation and the writer supplied don't match and cannot be used. This is generally caused by a bad implementation of a CodeGenerator derived class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CodeGenReentrance">
 <summary>Key for resource getting something like "This code generation API cannot be called while the generator is being used to generate something else."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidLanguageIdentifier">
 <summary>Key for resource getting something like "The identifier:"{0}" on the property:"{1}" of type:"{2}" is not a valid language-independent identifier name. Check to see if CodeGenerator.IsValidLanguageIndependentIdentifier allows the identifier name."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidTypeName">
 <summary>Key for resource getting something like "The type name:"{0}" on the property:"{1}" of type:"{2}" is not a valid language-independent type name."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Empty_attribute">
 <summary>Key for resource getting something like "The '{0}' attribute cannot be an empty string."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Invalid_nonnegative_integer_attribute">
 <summary>Key for resource getting something like "The '{0}' attribute must be a non-negative integer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CodeDomProvider_NotDefined">
 <summary>Key for resource getting something like "There is no CodeDom provider defined for the language."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Language_Names_Cannot_Be_Empty">
 <summary>Key for resource getting something like "You need to specify a non-empty String for a language name in the CodeDom configuration section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Extension_Names_Cannot_Be_Empty_Or_Non_Period_Based">
 <summary>Key for resource getting something like "An extension name in the CodeDom configuration section must be a non-empty string which starts with a period."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Unable_To_Locate_Type">
 <summary>Key for resource getting something like "The CodeDom provider type "{0}" could not be located."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_CodeDomAPI">
 <summary>Key for resource getting something like "This CodeDomProvider does not support this method."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArityDoesntMatch">
 <summary>Key for resource getting something like "The total arity specified in '{0}' does not match the number of TypeArguments supplied.  There were '{1}' TypeArguments supplied. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PartialTrustErrorTextReplacement">
 <summary>Key for resource getting something like "&lt;The original value of this property potentially contains file system information and has been suppressed.>"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PartialTrustIllegalProvider">
 <summary>Key for resource getting something like "When used in partial trust, langID must be C#, VB, J#, or JScript, and the language provider must be in the global assembly cache."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IllegalAssemblyReference">
 <summary>Key for resource getting something like "Assembly references cannot begin with '-', or contain a '/' or '\'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line1">
 <summary>Key for resource getting something like "auto-generated>"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line2">
 <summary>Key for resource getting something like "This code was generated by a tool."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line3">
 <summary>Key for resource getting something like "Runtime Version:"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line4">
 <summary>Key for resource getting something like "Changes to this file may cause incorrect behavior and will be lost if"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AutoGen_Comment_Line5">
 <summary>Key for resource getting something like "the code is regenerated."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantContainNullEntries">
 <summary>Key for resource getting something like "Array '{0}' cannot contain null entries."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPathCharsInChecksum">
 <summary>Key for resource getting something like "The CodeChecksumPragma file name '{0}' contains invalid path characters. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidRegion">
 <summary>Key for resource getting something like "The region directive '{0}' contains invalid characters.  RegionText cannot contain any new line characters. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MetaExtenderName">
 <summary>Key for resource getting something like "{0} on {1}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidEnumArgument">
 <summary>Key for resource getting something like "The value of argument '{0}' ({1}) is invalid for Enum type '{2}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidArgument">
 <summary>Key for resource getting something like "'{1}' is not a valid value for '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidNullArgument">
 <summary>Key for resource getting something like "Null is not a valid value for {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidNullEmptyArgument">
 <summary>Key for resource getting something like "Argument {0} cannot be null or zero-length."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicExceptionTypeOnly">
 <summary>Key for resource getting something like "A valid license cannot be granted for the type {0}. Contact the manufacturer of the component for more information."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicExceptionTypeAndInstance">
 <summary>Key for resource getting something like "An instance of type '{1}' was being created, and a valid license could not be granted for the type '{0}'. Please,  contact the manufacturer of the component for more information."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicMgrContextCannotBeChanged">
 <summary>Key for resource getting something like "The CurrentContext property of the LicenseManager is currently locked and cannot be changed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicMgrAlreadyLocked">
 <summary>Key for resource getting something like "The CurrentContext property of the LicenseManager is already locked by another user."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LicMgrDifferentUser">
 <summary>Key for resource getting something like "The CurrentContext property of the LicenseManager can only be unlocked with the same contextUser."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidElementType">
 <summary>Key for resource getting something like "Element type {0} is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidIdentifier">
 <summary>Key for resource getting something like "Identifier '{0}' is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecFailedToCreate">
 <summary>Key for resource getting something like "Failed to create file {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecTimeout">
 <summary>Key for resource getting something like "Timed out waiting for a program to execute. The command being executed was {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecBadreturn">
 <summary>Key for resource getting something like "An invalid return code was encountered waiting for a program to execute. The command being executed was {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecCantGetRetCode">
 <summary>Key for resource getting something like "Unable to get the return code for a program being executed. The command that was being executed was '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecCantExec">
 <summary>Key for resource getting something like "Cannot execute a program. The command being executed was {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ExecCantRevert">
 <summary>Key for resource getting something like "Cannot execute a program. Impersonation failed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CompilerNotFound">
 <summary>Key for resource getting something like "Compiler executable file {0} cannot be found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DuplicateFileName">
 <summary>Key for resource getting something like "The file name '{0}' was already in the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CollectionReadOnly">
 <summary>Key for resource getting something like "Collection is read-only."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BitVectorFull">
 <summary>Key for resource getting something like "Bit vector is full."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ISupportInitializeDescr">
 <summary>Key for resource getting something like "Specifies support for transacted initialization. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArrayConverterText">
 <summary>Key for resource getting something like "{0} Array"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CollectionConverterText">
 <summary>Key for resource getting something like "(Collection)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MultilineStringConverterText">
 <summary>Key for resource getting something like "(Text)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CultureInfoConverterDefaultCultureString">
 <summary>Key for resource getting something like "(Default)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CultureInfoConverterInvalidCulture">
 <summary>Key for resource getting something like "The {0} culture cannot be converted to a CultureInfo object on this computer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPrimitive">
 <summary>Key for resource getting something like "The text {0} is not a valid {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerInvalidInterval">
 <summary>Key for resource getting something like "'{0}' is not a valid value for 'Interval'. 'Interval' must be greater than {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceSwitchLevelTooHigh">
 <summary>Key for resource getting something like "Attempted to set {0} to a value that is too high.  Setting level to TraceLevel.Verbose"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceSwitchLevelTooLow">
 <summary>Key for resource getting something like "Attempted to set {0} to a value that is too low.  Setting level to TraceLevel.Off"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceSwitchInvalidLevel">
 <summary>Key for resource getting something like "The Level must be set to a value in the enumeration TraceLevel."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceListenerIndentSize">
 <summary>Key for resource getting something like "The IndentSize property must be non-negative."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceListenerFail">
 <summary>Key for resource getting something like "Fail:"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TraceAsTraceSource">
 <summary>Key for resource getting something like "Trace"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidLowBoundArgument">
 <summary>Key for resource getting something like "'{1}' is not a valid value for '{0}'. '{0}' must be greater than {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DuplicateComponentName">
 <summary>Key for resource getting something like "Duplicate component name '{0}'.  Component names must be unique and case-insensitive."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotImplemented">
 <summary>Key for resource getting something like "{0}: Not implemented"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.OutOfMemory">
 <summary>Key for resource getting something like "Could not allocate needed memory."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EOF">
 <summary>Key for resource getting something like "End of data stream encountered."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IOError">
 <summary>Key for resource getting something like "Unknown input/output failure."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadChar">
 <summary>Key for resource getting something like "Unexpected Character: '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.toStringNone">
 <summary>Key for resource getting something like "(none)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.toStringUnknown">
 <summary>Key for resource getting something like "(unknown)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidEnum">
 <summary>Key for resource getting something like "{0} is not a valid {1} value."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IndexOutOfRange">
 <summary>Key for resource getting something like "Index {0} is out of range."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorPropertyAccessorException">
 <summary>Key for resource getting something like "Property accessor '{0}' on object '{1}' threw the following exception:'{2}'"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation">
 <summary>Key for resource getting something like "Invalid operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EmptyStack">
 <summary>Key for resource getting something like "Stack has no items in it."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerformanceCounterDesc">
 <summary>Key for resource getting something like "Represents a Windows performance counter component."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCCategoryName">
 <summary>Key for resource getting something like "Category name of the performance counter object."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCCounterName">
 <summary>Key for resource getting something like "Counter name of the performance counter object."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCInstanceName">
 <summary>Key for resource getting something like "Instance name of the performance counter object."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCMachineName">
 <summary>Key for resource getting something like "Specifies the machine from where to read the performance data."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PCInstanceLifetime">
 <summary>Key for resource getting something like "Specifies the lifetime of the instance."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryAction">
 <summary>Key for resource getting something like "Action"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryAppearance">
 <summary>Key for resource getting something like "Appearance"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryAsynchronous">
 <summary>Key for resource getting something like "Asynchronous"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryBehavior">
 <summary>Key for resource getting something like "Behavior"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryData">
 <summary>Key for resource getting something like "Data"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryDDE">
 <summary>Key for resource getting something like "DDE"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryDesign">
 <summary>Key for resource getting something like "Design"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryDragDrop">
 <summary>Key for resource getting something like "Drag Drop"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryFocus">
 <summary>Key for resource getting something like "Focus"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryFont">
 <summary>Key for resource getting something like "Font"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryFormat">
 <summary>Key for resource getting something like "Format"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryKey">
 <summary>Key for resource getting something like "Key"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryList">
 <summary>Key for resource getting something like "List"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryLayout">
 <summary>Key for resource getting something like "Layout"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryDefault">
 <summary>Key for resource getting something like "Misc"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryMouse">
 <summary>Key for resource getting something like "Mouse"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryPosition">
 <summary>Key for resource getting something like "Position"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryText">
 <summary>Key for resource getting something like "Text"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryScale">
 <summary>Key for resource getting something like "Scale"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryWindowStyle">
 <summary>Key for resource getting something like "Window Style"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyCategoryConfig">
 <summary>Key for resource getting something like "Configurations"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.OnlyAllowedOnce">
 <summary>Key for resource getting something like "This operation is only allowed once per object."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BeginIndexNotNegative">
 <summary>Key for resource getting something like "Start index cannot be less than 0 or greater than input length."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LengthNotNegative">
 <summary>Key for resource getting something like "Length cannot be less than 0 or exceed input length."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnimplementedState">
 <summary>Key for resource getting something like "Unimplemented state."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnexpectedOpcode">
 <summary>Key for resource getting something like "Unexpected opcode in regular expression generation: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoResultOnFailed">
 <summary>Key for resource getting something like "Result cannot be called on a failed Match."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnterminatedBracket">
 <summary>Key for resource getting something like "Unterminated [] set."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TooManyParens">
 <summary>Key for resource getting something like "Too many )'s."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NestedQuantify">
 <summary>Key for resource getting something like "Nested quantifier {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.QuantifyAfterNothing">
 <summary>Key for resource getting something like "Quantifier {x,y} following nothing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InternalError">
 <summary>Key for resource getting something like "Internal error in ScanRegex."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IllegalRange">
 <summary>Key for resource getting something like "Illegal {x,y} with x > y."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotEnoughParens">
 <summary>Key for resource getting something like "Not enough )'s."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadClassInCharRange">
 <summary>Key for resource getting something like "Cannot include class \{0} in character range."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReversedCharRange">
 <summary>Key for resource getting something like "[x-y] range in reverse order."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UndefinedReference">
 <summary>Key for resource getting something like "(?({0}) ) reference to undefined group."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MalformedReference">
 <summary>Key for resource getting something like "(?({0}) ) malformed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnrecognizedGrouping">
 <summary>Key for resource getting something like "Unrecognized grouping construct."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnterminatedComment">
 <summary>Key for resource getting something like "Unterminated (?#...) comment."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IllegalEndEscape">
 <summary>Key for resource getting something like "Illegal \ at end of pattern."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MalformedNameRef">
 <summary>Key for resource getting something like "Malformed \k&lt;...> named back reference."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UndefinedBackref">
 <summary>Key for resource getting something like "Reference to undefined group number {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UndefinedNameRef">
 <summary>Key for resource getting something like "Reference to undefined group name {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TooFewHex">
 <summary>Key for resource getting something like "Insufficient hexadecimal digits."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingControl">
 <summary>Key for resource getting something like "Missing control character."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnrecognizedControl">
 <summary>Key for resource getting something like "Unrecognized control character."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnrecognizedEscape">
 <summary>Key for resource getting something like "Unrecognized escape sequence \{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IllegalCondition">
 <summary>Key for resource getting something like "Illegal conditional (?(...)) expression."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TooManyAlternates">
 <summary>Key for resource getting something like "Too many | in (?()|)."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MakeException">
 <summary>Key for resource getting something like "parsing "{0}" - {1}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IncompleteSlashP">
 <summary>Key for resource getting something like "Incomplete \p{X} character escape."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MalformedSlashP">
 <summary>Key for resource getting something like "Malformed \p{X} character escape."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidGroupName">
 <summary>Key for resource getting something like "Invalid group name: Group names must begin with a word character."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CapnumNotZero">
 <summary>Key for resource getting something like "Capture number cannot be zero."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AlternationCantCapture">
 <summary>Key for resource getting something like "Alternation conditions do not capture and cannot be named."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AlternationCantHaveComment">
 <summary>Key for resource getting something like "Alternation conditions cannot be comments."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CaptureGroupOutOfRange">
 <summary>Key for resource getting something like "Capture group numbers must be less than or equal to Int32.MaxValue."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SubtractionMustBeLast">
 <summary>Key for resource getting something like "A subtraction must be the last element in a character class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownProperty">
 <summary>Key for resource getting something like "Unknown property '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReplacementError">
 <summary>Key for resource getting something like "Replacement pattern error."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CountTooSmall">
 <summary>Key for resource getting something like "Count cannot be less than -1."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnumNotStarted">
 <summary>Key for resource getting something like "Enumeration has either not started or has already finished."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_AlreadyOpen">
 <summary>Key for resource getting something like "The file is already open.  Call Close before trying to open the FileObject again."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_Closed">
 <summary>Key for resource getting something like "The FileObject is currently closed.  Try opening it."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_NotWhileWriting">
 <summary>Key for resource getting something like "File information cannot be queried while open for writing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_FileDoesNotExist">
 <summary>Key for resource getting something like "File information cannot be queried if the file does not exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_MustBeClosed">
 <summary>Key for resource getting something like "This operation can only be done when the FileObject is closed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_MustBeFileName">
 <summary>Key for resource getting something like "You must specify a file name, not a relative or absolute path."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_InvalidInternalState">
 <summary>Key for resource getting something like "FileObject's open mode wasn't set to a valid value.  This FileObject is corrupt."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_PathNotSet">
 <summary>Key for resource getting something like "The path has not been set, or is an empty string.  Please ensure you specify some path."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_Reading">
 <summary>Key for resource getting something like "The file is currently open for reading.  Close the file and reopen it before attempting this."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_Writing">
 <summary>Key for resource getting something like "The file is currently open for writing.  Close the file and reopen it before attempting this."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_InvalidEnumeration">
 <summary>Key for resource getting something like "Enumerator is positioned before the first line or after the last line of the file."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObject_NoReset">
 <summary>Key for resource getting something like "Reset is not supported on a FileLineEnumerator."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DirectoryObject_MustBeDirName">
 <summary>Key for resource getting something like "You must specify a directory name, not a relative or absolute path."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DirectoryObjectPathDescr">
 <summary>Key for resource getting something like "The fully qualified, or relative path to the directory you wish to read from. E.g., "c:\temp"."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObjectDetectEncodingDescr">
 <summary>Key for resource getting something like "Determines whether the file will be parsed to see if it has a byte order mark indicating its encoding.  If it does, this will be used rather than the current specified encoding."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObjectEncodingDescr">
 <summary>Key for resource getting something like "The encoding to use when reading the file. UTF-8 is the default."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileObjectPathDescr">
 <summary>Key for resource getting something like "The fully qualified, or relative path to the file you wish to read from. E.g., "myfile.txt"."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_RankMultiDimNotSupported">
 <summary>Key for resource getting something like "Only single dimensional arrays are supported for the requested action."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_EnumIllegalVal">
 <summary>Key for resource getting something like "Illegal enum value: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_OutOfRange_NeedNonNegNum">
 <summary>Key for resource getting something like "Non-negative number required."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidPermissionState">
 <summary>Key for resource getting something like "Invalid permission state."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidOidValue">
 <summary>Key for resource getting something like "The OID value was invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_WrongType">
 <summary>Key for resource getting something like "Operation on type '{0}' attempted with target of incorrect type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_EmptyOrNullString">
 <summary>Key for resource getting something like "String cannot be empty or null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_EmptyOrNullArray">
 <summary>Key for resource getting something like "Array cannot be empty or null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidClassAttribute">
 <summary>Key for resource getting something like "The value of "class" attribute is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidNameType">
 <summary>Key for resource getting something like "The value of "nameType" is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EnumNotStarted">
 <summary>Key for resource getting something like "Enumeration has not started.  Call MoveNext."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_DuplicateItemNotAllowed">
 <summary>Key for resource getting something like "Duplicate items are not allowed in the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Asn_MismatchedOidInCollection">
 <summary>Key for resource getting something like "The AsnEncodedData object does not have the same OID for the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Envelope_Empty_Content">
 <summary>Key for resource getting something like "Cannot create CMS enveloped for empty content."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Invalid_Recipient_Info_Type">
 <summary>Key for resource getting something like "The recipient info type {0} is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Invalid_Subject_Identifier_Type">
 <summary>Key for resource getting something like "The subject identifier type {0} is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Invalid_Subject_Identifier_Type_Value_Mismatch">
 <summary>Key for resource getting something like "The subject identifier type {0} does not match the value data type {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Key_Agree_Date_Not_Available">
 <summary>Key for resource getting something like "The Date property is not available for none KID key agree recipient."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Key_Agree_Other_Key_Attribute_Not_Available">
 <summary>Key for resource getting something like "The OtherKeyAttribute property is not available for none KID key agree recipient."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_MessageNotSigned">
 <summary>Key for resource getting something like "The CMS message is not signed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_MessageNotSignedByNoSignature">
 <summary>Key for resource getting something like "The CMS message is not signed by NoSignature."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_MessageNotEncrypted">
 <summary>Key for resource getting something like "The CMS message is not encrypted."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Not_Supported">
 <summary>Key for resource getting something like "The Cryptographic Message Standard (CMS) is not supported on this platform."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_RecipientCertificateNotFound">
 <summary>Key for resource getting something like "The recipient certificate is not specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Sign_Empty_Content">
 <summary>Key for resource getting something like "Cannot create CMS signature for empty content."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Cms_Sign_No_Signature_First_Signer">
 <summary>Key for resource getting something like "CmsSigner has to be the first signer with NoSignature."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_DpApi_InvalidMemoryLength">
 <summary>Key for resource getting something like "The length of the data should be a multiple of 16 bytes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_InvalidHandle">
 <summary>Key for resource getting something like "{0} is an invalid handle."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_InvalidContextHandle">
 <summary>Key for resource getting something like "The chain context handle is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_InvalidStoreHandle">
 <summary>Key for resource getting something like "The store handle is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Oid_InvalidValue">
 <summary>Key for resource getting something like "The OID value is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Pkcs9_ExplicitAddNotAllowed">
 <summary>Key for resource getting something like "The PKCS 9 attribute cannot be explicitly added to the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Pkcs9_InvalidOid">
 <summary>Key for resource getting something like "The OID does not represent a valid PKCS 9 attribute."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Pkcs9_MultipleSigningTimeNotAllowed">
 <summary>Key for resource getting something like "Cannot add multiple PKCS 9 signing time attributes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_Pkcs9_AttributeMismatch">
 <summary>Key for resource getting something like "The parameter should be a PKCS 9 attribute."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_AddFailed">
 <summary>Key for resource getting something like "Adding certificate with index '{0}' failed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_BadEncoding">
 <summary>Key for resource getting something like "Input data cannot be coded as a valid certificate."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_ExportFailed">
 <summary>Key for resource getting something like "The certificate export operation failed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_ExtensionMismatch">
 <summary>Key for resource getting something like "The parameter should be an X509Extension."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_InvalidFindType">
 <summary>Key for resource getting something like "Invalid find type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_InvalidFindValue">
 <summary>Key for resource getting something like "Invalid find value."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_InvalidEncodingFormat">
 <summary>Key for resource getting something like "Invalid encoding format."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_InvalidContentType">
 <summary>Key for resource getting something like "Invalid content type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_KeyMismatch">
 <summary>Key for resource getting something like "The public key of the certificate does not match the value specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cryptography_X509_RemoveFailed">
 <summary>Key for resource getting something like "Removing certificate with index '{0}' failed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Environment_NotInteractive">
 <summary>Key for resource getting something like "The current session is not interactive."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_InvalidKeyImpl">
 <summary>Key for resource getting something like "Only asymmetric keys that implement ICspAsymmetricAlgorithm are supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_KeyAlgorithm">
 <summary>Key for resource getting something like "The certificate key algorithm is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_PlatformRequiresNT">
 <summary>Key for resource getting something like "This operation is only supported on Windows 2000, Windows XP, and higher."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_UnreadableStream">
 <summary>Key for resource getting something like "Stream does not support reading."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Security_InvalidValue">
 <summary>Key for resource getting something like "The {0} value was invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Unknown_Error">
 <summary>Key for resource getting something like "Unknown error."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nonClsCompliantException">
 <summary>Key for resource getting something like "A non-CLS Compliant Exception (i.e. an object that does not derive from System.Exception) was thrown."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_illegalConfigWith">
 <summary>Key for resource getting something like "The '{0}' attribute cannot appear when '{1}' is present."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_illegalConfigWithout">
 <summary>Key for resource getting something like "The '{0}' attribute can only appear when '{1}' is present."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_baddate">
 <summary>Key for resource getting something like "The value of the date string in the header is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_writestarted">
 <summary>Key for resource getting something like "This property cannot be set after writing has started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_clsmall">
 <summary>Key for resource getting something like "The Content-Length value must be greater than or equal to zero."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_reqsubmitted">
 <summary>Key for resource getting something like "This operation cannot be performed after the request has been submitted."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_rspsubmitted">
 <summary>Key for resource getting something like "This operation cannot be performed after the response has been submitted."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_no_http_cmd">
 <summary>Key for resource getting something like "The requested FTP command is not supported when using HTTP proxy."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_method_name">
 <summary>Key for resource getting something like "FTP Method names cannot be null or empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_renameto">
 <summary>Key for resource getting something like "The RenameTo filename cannot be null or empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_no_defaultcreds">
 <summary>Key for resource getting something like "Default credentials are not supported on an FTP request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpnoresponse">
 <summary>Key for resource getting something like "This type of FTP request does not return a response stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_response_invalid_format">
 <summary>Key for resource getting something like "The response string '{0}' has invalid format."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_no_offsetforhttp">
 <summary>Key for resource getting something like "Offsets are not supported when sending an FTP request over an HTTP proxy."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_uri">
 <summary>Key for resource getting something like "The requested URI is invalid for this FTP command."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_status_response">
 <summary>Key for resource getting something like "The status response ({0}) is not expected in response to '{1}' command."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_server_failed_passive">
 <summary>Key for resource getting something like "The server failed the passive mode request with status response ({0})."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_passive_address_different">
 <summary>Key for resource getting something like "The server returned an address in response to the PASV command that is different than the address to which the FTP connection was made."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_active_address_different">
 <summary>Key for resource getting something like "The data connection was made from an address that is different than the address to which the FTP connection was made."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_proxy_does_not_support_ssl">
 <summary>Key for resource getting something like "SSL cannot be enabled when using a proxy."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_invalid_response_filename">
 <summary>Key for resource getting something like "The server returned the filename ({0}) which is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftp_unsupported_method">
 <summary>Key for resource getting something like "This method is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_resubmitcanceled">
 <summary>Key for resource getting something like "An error occurred on an automatic resubmission of the request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_redirect_perm">
 <summary>Key for resource getting something like "WebPermission demand failed for redirect URI."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_resubmitprotofailed">
 <summary>Key for resource getting something like "Cannot handle redirect from HTTP/HTTPS protocols to other dissimilar ones."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_needchunked">
 <summary>Key for resource getting something like "TransferEncoding requires the SendChunked property to be set to true."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nochunked">
 <summary>Key for resource getting something like "Chunked encoding must be set via the SendChunked property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nochunkuploadonhttp10">
 <summary>Key for resource getting something like "Chunked encoding upload is not supported on the HTTP/1.0 protocol."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_connarg">
 <summary>Key for resource getting something like "Keep-Alive and Close may not be set using this property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_no100">
 <summary>Key for resource getting something like "100-Continue may not be set using this property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_fromto">
 <summary>Key for resource getting something like "The From parameter cannot be less than To."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_rangetoosmall">
 <summary>Key for resource getting something like "The From or To parameter cannot be less than 0."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_entitytoobig">
 <summary>Key for resource getting something like "Bytes to be written to the stream exceed the Content-Length bytes size specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalidversion">
 <summary>Key for resource getting something like "This protocol version is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalidstatus">
 <summary>Key for resource getting something like "The status code must be exactly three digits."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_toosmall">
 <summary>Key for resource getting something like "The specified value must be greater than 0."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_toolong">
 <summary>Key for resource getting something like "The size of {0} is too long. It cannot be longer than {1} characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_connclosed">
 <summary>Key for resource getting something like "The underlying connection was closed: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headerrestrict">
 <summary>Key for resource getting something like "This header must be modified using the appropriate property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headerrestrict_resp">
 <summary>Key for resource getting something like "The '{0}' header cannot be modified directly."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_noseek">
 <summary>Key for resource getting something like "This stream does not support seek operations."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_servererror">
 <summary>Key for resource getting something like "The remote server returned an error: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nouploadonget">
 <summary>Key for resource getting something like "Cannot send a content-body with this verb-type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_mutualauthfailed">
 <summary>Key for resource getting something like "The requirement for mutual authentication was not met by the remote server."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invasync">
 <summary>Key for resource getting something like "Cannot block a call on this socket while an earlier asynchronous call is in progress."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_inasync">
 <summary>Key for resource getting something like "An asynchronous call is already in progress. It must be completed or canceled before you can call this method."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_mustbeuri">
 <summary>Key for resource getting something like "The {0} parameter must represent a valid Uri (see inner exception)."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_format_shexp">
 <summary>Key for resource getting something like "The shell expression '{0}' could not be parsed because it is formatted incorrectly."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cannot_load_proxy_helper">
 <summary>Key for resource getting something like "Failed to load the proxy script runtime environment from the Microsoft.JScript assembly."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_repcall">
 <summary>Key for resource getting something like "Cannot re-call BeginGetRequestStream/BeginGetResponse while a previous call is still in progress."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_wrongversion">
 <summary>Key for resource getting something like "Only HTTP/1.0 and HTTP/1.1 version requests are currently supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_badmethod">
 <summary>Key for resource getting something like "Cannot set null or blank methods on request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_notenoughbyteswritten">
 <summary>Key for resource getting something like "Cannot close stream until all bytes are written."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_timeout_use_ge_zero">
 <summary>Key for resource getting something like "Timeout can be only be set to 'System.Threading.Timeout.Infinite' or a value >= 0."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_timeout_use_gt_zero">
 <summary>Key for resource getting something like "Timeout can be only be set to 'System.Threading.Timeout.Infinite' or a value > 0."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_no_0timeouts">
 <summary>Key for resource getting something like "NetworkStream does not support a 0 millisecond timeout, use a value greater than zero for the timeout instead."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_requestaborted">
 <summary>Key for resource getting something like "The request was aborted: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_tooManyRedirections">
 <summary>Key for resource getting something like "Too many automatic redirections were attempted."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_authmodulenotregistered">
 <summary>Key for resource getting something like "The supplied authentication module is not registered."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_authschemenotregistered">
 <summary>Key for resource getting something like "There is no registered module for this authentication scheme."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_proxyschemenotsupported">
 <summary>Key for resource getting something like "The ServicePointManager does not support proxies with the {0} scheme."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_maxsrvpoints">
 <summary>Key for resource getting something like "The maximum number of service points was exceeded."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_maxbinddelegateretry">
 <summary>Key for resource getting something like "Reached maximum number of BindIPEndPointDelegate retries."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_unknown_prefix">
 <summary>Key for resource getting something like "The URI prefix is not recognized."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_notconnected">
 <summary>Key for resource getting something like "The operation is not allowed on non-connected sockets."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_notstream">
 <summary>Key for resource getting something like "The operation is not allowed on non-stream oriented sockets."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_timeout">
 <summary>Key for resource getting something like "The operation has timed out."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nocontentlengthonget">
 <summary>Key for resource getting something like "Content-Length cannot be set for an operation that does not write data."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_contentlengthmissing">
 <summary>Key for resource getting something like "When performing a write operation with AllowWriteStreamBuffering set to false, you must either set ContentLength to a non-negative number or set SendChunked to true."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nonhttpproxynotallowed">
 <summary>Key for resource getting something like "The URI scheme for the supplied IWebProxy has the illegal value '{0}'. Only 'http' is supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nottoken">
 <summary>Key for resource getting something like "The supplied string is not a valid HTTP token."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_rangetype">
 <summary>Key for resource getting something like "A different range specifier has already been added to this request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_need_writebuffering">
 <summary>Key for resource getting something like "This request requires buffering data to succeed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_securitypackagesupport">
 <summary>Key for resource getting something like "The requested security package is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_securityprotocolnotsupported">
 <summary>Key for resource getting something like "The requested security protocol is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_nodefaultcreds">
 <summary>Key for resource getting something like "Default credentials cannot be supplied for the {0} authentication scheme."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_stopped">
 <summary>Key for resource getting something like "Not listening. You must call the Start() method before calling this method."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_udpconnected">
 <summary>Key for resource getting something like "Cannot send packets to an arbitrary host while connected."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_readonlystream">
 <summary>Key for resource getting something like "The stream does not support writing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_writeonlystream">
 <summary>Key for resource getting something like "The stream does not support reading."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_no_concurrent_io_allowed">
 <summary>Key for resource getting something like "The stream does not support concurrent IO read or write operations."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_needmorethreads">
 <summary>Key for resource getting something like "There were not enough free threads in the ThreadPool to complete the operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_MethodNotImplementedException">
 <summary>Key for resource getting something like "This method is not implemented by this class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_PropertyNotImplementedException">
 <summary>Key for resource getting something like "This property is not implemented by this class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_MethodNotSupportedException">
 <summary>Key for resource getting something like "This method is not supported by this class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_PropertyNotSupportedException">
 <summary>Key for resource getting something like "This property is not supported by this class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ProtocolNotSupportedException">
 <summary>Key for resource getting something like "The '{0}' protocol is not supported by this class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_HashAlgorithmNotSupportedException">
 <summary>Key for resource getting something like "The '{0}' hash algorithm not supported by this class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_QOPNotSupportedException">
 <summary>Key for resource getting something like "The '{0}' quality of service is not supported by this class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_SelectModeNotSupportedException">
 <summary>Key for resource getting something like "The '{0}' select mode is not supported by this class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_InvalidSocketHandle">
 <summary>Key for resource getting something like "The socket handle is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_InvalidAddressFamily">
 <summary>Key for resource getting something like "The AddressFamily {0} is not valid for the {1} end point, use {2} instead."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_InvalidSocketAddressSize">
 <summary>Key for resource getting something like "The supplied {0} is an invalid size for the {1} end point."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalidAddressList">
 <summary>Key for resource getting something like "None of the discovered or specified addresses match the socket address family."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalidPingBufferSize">
 <summary>Key for resource getting something like "The buffer length must not exceed 65500 bytes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cant_perform_during_shutdown">
 <summary>Key for resource getting something like "This operation cannot be performed while the AppDomain is shutting down."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cant_create_environment">
 <summary>Key for resource getting something like "Unable to create another web proxy script environment at this time."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_completed_result">
 <summary>Key for resource getting something like "This operation cannot be performed on a completed asynchronous result object."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_protocol_invalid_family">
 <summary>Key for resource getting something like "'{0}' Client can only accept InterNetwork or InterNetworkV6 addresses."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_protocol_invalid_multicast_family">
 <summary>Key for resource getting something like "Multicast family is not the same as the family of the '{0}' Client."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_zerolist">
 <summary>Key for resource getting something like "The parameter {0} must contain one or more elements."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_blocking">
 <summary>Key for resource getting something like "The operation is not allowed on a non-blocking Socket."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_useblocking">
 <summary>Key for resource getting something like "Use the Blocking property to change the status of the Socket."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_select">
 <summary>Key for resource getting something like "The operation is not allowed on objects of type {0}. Use only objects of type {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_toolarge_select">
 <summary>Key for resource getting something like "The {0} list contains too many items; a maximum of {1} is allowed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_empty_select">
 <summary>Key for resource getting something like "All lists are either null or empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_mustbind">
 <summary>Key for resource getting something like "You must call the Bind method before performing this operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_mustlisten">
 <summary>Key for resource getting something like "You must call the Listen method before performing this operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_mustnotlisten">
 <summary>Key for resource getting something like "You may not perform this operation after calling the Listen method."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_mustnotbebound">
 <summary>Key for resource getting something like "The socket must not be bound or connected."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_namedmustnotbebound">
 <summary>Key for resource getting something like "{0}: The socket must not be bound or connected."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_invalid_socketinformation">
 <summary>Key for resource getting something like "The specified value for the socket information in invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_invalid_ipaddress_length">
 <summary>Key for resource getting something like "The number of specified IP addresses has to be greater than 0."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_invalid_optionValue">
 <summary>Key for resource getting something like "The specified value is not a valid '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_invalid_optionValue_all">
 <summary>Key for resource getting something like "The specified value is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_disconnectedConnect">
 <summary>Key for resource getting something like "Once the socket has been disconnected, you can only reconnect again asynchronously, and only to a different EndPoint.  BeginConnect must be called on a thread that won't exit until the operation has been completed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_disconnectedAccept">
 <summary>Key for resource getting something like "Once the socket has been disconnected, you can only accept again asynchronously.  BeginAccept must be called on a thread that won't exit until the operation has been completed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_tcplistener_mustbestopped">
 <summary>Key for resource getting something like "The TcpListener must not be listening before performing this operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_sockets_no_duplicate_async">
 <summary>Key for resource getting something like "BeginConnect cannot be called while another asynchronous operation is in progress on the same Socket."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_proxy">
 <summary>Key for resource getting something like "Error creating the Web Proxy specified in the 'system.net/defaultProxy' configuration section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_proxy_module_not_public">
 <summary>Key for resource getting something like "The specified proxy module type is not public."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_authenticationmodules">
 <summary>Key for resource getting something like "Error creating the modules specified in the 'system.net/authenticationModules' configuration section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_webrequestmodules">
 <summary>Key for resource getting something like "Error creating the modules specified in the 'system.net/webRequestModules' configuration section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_requestcaching">
 <summary>Key for resource getting something like "Error creating the Web Request caching policy specified in the 'system.net/requestCaching' configuration section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_section_permission">
 <summary>Key for resource getting something like "Insufficient permissions for setting the configuration section '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_element_permission">
 <summary>Key for resource getting something like "Insufficient permissions for setting the configuration element '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_config_property_permission">
 <summary>Key for resource getting something like "Insufficient permissions for setting the configuration property '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_InvalidHeaderName">
 <summary>Key for resource getting something like "Header name is invalid"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_InvalidContentLength">
 <summary>Key for resource getting something like "'Content-Length' header value is invalid"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_IncompleteHeaderLine">
 <summary>Key for resource getting something like "Invalid header name"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_CrLfError">
 <summary>Key for resource getting something like "CR must be followed by LF"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_InvalidChunkFormat">
 <summary>Key for resource getting something like "Response chunk format is invalid"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebResponseParseError_UnexpectedServerResponse">
 <summary>Key for resource getting something like "Unexpected server response received"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderInvalidControlChars">
 <summary>Key for resource getting something like "Specified value has invalid Control characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderInvalidCRLFChars">
 <summary>Key for resource getting something like "Specified value has invalid CRLF characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderInvalidHeaderChars">
 <summary>Key for resource getting something like "Specified value has invalid HTTP Header characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderInvalidNonAsciiChars">
 <summary>Key for resource getting something like "Specified value has invalid non-ASCII characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_WebHeaderMissingColon">
 <summary>Key for resource getting something like "Specified value does not have a ':' separator."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_Success">
 <summary>Key for resource getting something like "Status success"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_NameResolutionFailure">
 <summary>Key for resource getting something like "The remote name could not be resolved"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ConnectFailure">
 <summary>Key for resource getting something like "Unable to connect to the remote server"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ReceiveFailure">
 <summary>Key for resource getting something like "An unexpected error occurred on a receive"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_SendFailure">
 <summary>Key for resource getting something like "An unexpected error occurred on a send"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_PipelineFailure">
 <summary>Key for resource getting something like "A pipeline failure occurred"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_RequestCanceled">
 <summary>Key for resource getting something like "The request was canceled"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ConnectionClosed">
 <summary>Key for resource getting something like "The connection was closed unexpectedly"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_TrustFailure">
 <summary>Key for resource getting something like "Could not establish trust relationship for the SSL/TLS secure channel"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_SecureChannelFailure">
 <summary>Key for resource getting something like "Could not create SSL/TLS secure channel"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ServerProtocolViolation">
 <summary>Key for resource getting something like "The server committed a protocol violation"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_KeepAliveFailure">
 <summary>Key for resource getting something like "A connection that was expected to be kept alive was closed by the server"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_ProxyNameResolutionFailure">
 <summary>Key for resource getting something like "The proxy name could not be resolved"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_MessageLengthLimitExceeded">
 <summary>Key for resource getting something like "The message length limit was exceeded"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_CacheEntryNotFound">
 <summary>Key for resource getting something like "The request cache-only policy does not allow a network request and the response is not found in cache"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_RequestProhibitedByCachePolicy">
 <summary>Key for resource getting something like "The request could not be satisfied using a cache-only policy"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_Timeout">
 <summary>Key for resource getting something like "The operation has timed out"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webstatus_RequestProhibitedByProxy">
 <summary>Key for resource getting something like "The IWebProxy object associated with the request did not allow the request to proceed"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_InvalidStatusCode">
 <summary>Key for resource getting something like "The server returned a status code outside the valid range of 100-599."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ServiceNotAvailable">
 <summary>Key for resource getting something like "Service not available, closing control connection"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_CantOpenData">
 <summary>Key for resource getting something like "Can't open data connection"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ConnectionClosed">
 <summary>Key for resource getting something like "Connection closed; transfer aborted"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionNotTakenFileUnavailableOrBusy">
 <summary>Key for resource getting something like "File unavailable (e.g., file busy)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionAbortedLocalProcessingError">
 <summary>Key for resource getting something like "Local error in processing"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionNotTakenInsufficentSpace">
 <summary>Key for resource getting something like "Insufficient storage space in system"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_CommandSyntaxError">
 <summary>Key for resource getting something like "Syntax error, command unrecognized"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ArgumentSyntaxError">
 <summary>Key for resource getting something like "Syntax error in parameters or arguments"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_CommandNotImplemented">
 <summary>Key for resource getting something like "Command not implemented"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_BadCommandSequence">
 <summary>Key for resource getting something like "Bad sequence of commands"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_NotLoggedIn">
 <summary>Key for resource getting something like "Not logged in"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_AccountNeeded">
 <summary>Key for resource getting something like "Need account for storing files"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionNotTakenFileUnavailable">
 <summary>Key for resource getting something like "File unavailable (e.g., file not found, no access)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionAbortedUnknownPageType">
 <summary>Key for resource getting something like "Page type unknown"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_FileActionAborted">
 <summary>Key for resource getting something like "Exceeded storage allocation (for current directory or data set)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ftpstatuscode_ActionNotTakenFilenameNotAllowed">
 <summary>Key for resource getting something like "File name not allowed"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NoContent">
 <summary>Key for resource getting something like "No Content"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NonAuthoritativeInformation">
 <summary>Key for resource getting something like "Non Authoritative Information"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_ResetContent">
 <summary>Key for resource getting something like "Reset Content"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_PartialContent">
 <summary>Key for resource getting something like "Partial Content"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_MultipleChoices">
 <summary>Key for resource getting something like "Multiple Choices Redirect"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Ambiguous">
 <summary>Key for resource getting something like "Ambiguous Redirect"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_MovedPermanently">
 <summary>Key for resource getting something like "Moved Permanently Redirect"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Moved">
 <summary>Key for resource getting something like "Moved Redirect"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Found">
 <summary>Key for resource getting something like "Found Redirect"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Redirect">
 <summary>Key for resource getting something like "Redirect"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_SeeOther">
 <summary>Key for resource getting something like "See Other"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_RedirectMethod">
 <summary>Key for resource getting something like "Redirect Method"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NotModified">
 <summary>Key for resource getting something like "Not Modified"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_UseProxy">
 <summary>Key for resource getting something like "Use Proxy Redirect"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_TemporaryRedirect">
 <summary>Key for resource getting something like "Temporary Redirect"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_RedirectKeepVerb">
 <summary>Key for resource getting something like "Redirect Keep Verb"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_BadRequest">
 <summary>Key for resource getting something like "Bad Request"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Unauthorized">
 <summary>Key for resource getting something like "Unauthorized"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_PaymentRequired">
 <summary>Key for resource getting something like "Payment Required"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Forbidden">
 <summary>Key for resource getting something like "Forbidden"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NotFound">
 <summary>Key for resource getting something like "Not Found"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_MethodNotAllowed">
 <summary>Key for resource getting something like "Method Not Allowed"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NotAcceptable">
 <summary>Key for resource getting something like "Not Acceptable"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_ProxyAuthenticationRequired">
 <summary>Key for resource getting something like "Proxy Authentication Required"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_RequestTimeout">
 <summary>Key for resource getting something like "Request Timeout"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Conflict">
 <summary>Key for resource getting something like "Conflict"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_Gone">
 <summary>Key for resource getting something like "Gone"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_LengthRequired">
 <summary>Key for resource getting something like "Length Required"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_InternalServerError">
 <summary>Key for resource getting something like "Internal Server Error"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_NotImplemented">
 <summary>Key for resource getting something like "Not Implemented"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_BadGateway">
 <summary>Key for resource getting something like "Bad Gateway"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_ServiceUnavailable">
 <summary>Key for resource getting something like "Server Unavailable"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_GatewayTimeout">
 <summary>Key for resource getting something like "Gateway Timeout"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_httpstatuscode_HttpVersionNotSupported">
 <summary>Key for resource getting something like "Http Version Not Supported"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadScheme">
 <summary>Key for resource getting something like "Invalid URI: The URI scheme is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadFormat">
 <summary>Key for resource getting something like "Invalid URI: The format of the URI could not be determined."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadUserPassword">
 <summary>Key for resource getting something like "Invalid URI: The username:password construct is badly formed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadHostName">
 <summary>Key for resource getting something like "Invalid URI: The hostname could not be parsed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadAuthority">
 <summary>Key for resource getting something like "Invalid URI: The Authority/Host could not be parsed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadAuthorityTerminator">
 <summary>Key for resource getting something like "Invalid URI: The Authority/Host cannot end with a backslash character ('\')."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadFileName">
 <summary>Key for resource getting something like "Invalid URI: Can't parse data as a filename."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_EmptyUri">
 <summary>Key for resource getting something like "Invalid URI: The URI is empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadString">
 <summary>Key for resource getting something like "Invalid URI: There is an invalid sequence in the string."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_MustRootedPath">
 <summary>Key for resource getting something like "Invalid URI: A Dos path must be rooted, for example, 'c:\'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_BadPort">
 <summary>Key for resource getting something like "Invalid URI: A port was expected because of there is a colon (':') present but the port could not be parsed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_SizeLimit">
 <summary>Key for resource getting something like "Invalid URI: The Uri string is too long."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_SchemeLimit">
 <summary>Key for resource getting something like "Invalid URI: The Uri scheme is too long."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_NotAbsolute">
 <summary>Key for resource getting something like "This operation is not supported for a relative URI."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_SpecialUriComponent">
 <summary>Key for resource getting something like "A special Uri parsing request: '{0}' cannot be mixed with other Uri component parsing flags: '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_CustomValidationFailed">
 <summary>Key for resource getting something like "A Uri derived class has refused to accept the input string as a valid absolute Uri."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_PortOutOfRange">
 <summary>Key for resource getting something like "A derived type '{0}' has reported an invalid value for the Uri port '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_UserDrivenParsing">
 <summary>Key for resource getting something like "A derived type '{0}' is responsible for parsing this Uri instance. The base implementation must not be used."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_AlreadyRegistered">
 <summary>Key for resource getting something like "A URI scheme name '{0}' already has a registered custom parser."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_NeedFreshParser">
 <summary>Key for resource getting something like "The URI parser instance passed into 'uriParser' parameter is already registered with the scheme name '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_CannotCreateRelative">
 <summary>Key for resource getting something like "A relative URI cannot be created because the 'uriString' parameter represents an absolute URI."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_uri_InvalidUriKind">
 <summary>Key for resource getting something like "The value '{0}' passed for the UriKind parameter is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_completionportwasbound">
 <summary>Key for resource getting something like "The socket has already been bound to an io completion port."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_writefailure">
 <summary>Key for resource getting something like "Unable to write data to the transport connection: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_readfailure">
 <summary>Key for resource getting something like "Unable to read data from the transport connection: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_connectionclosed">
 <summary>Key for resource getting something like "The connection was closed"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_transportfailure">
 <summary>Key for resource getting something like "Unable to create a transport connection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_internal_bind">
 <summary>Key for resource getting something like "Internal Error: A socket handle could not be bound to a completion port."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_invalidasyncresult">
 <summary>Key for resource getting something like "The IAsyncResult object was not returned from the corresponding asynchronous method on this class."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_invalidnestedcall">
 <summary>Key for resource getting something like "The {0} method cannot be called when another {1} operation is pending."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_invalidendcall">
 <summary>Key for resource getting something like "{0} can only be called once for each asynchronous operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_must_be_rw_stream">
 <summary>Key for resource getting something like "The stream has to be read/write."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_header_id">
 <summary>Key for resource getting something like "Found a wrong header field {0} read = {1}, expected = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_out_range">
 <summary>Key for resource getting something like "The byte count must not exceed {0} bytes for this stream type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_encrypt">
 <summary>Key for resource getting something like "The encryption operation failed, see inner exception."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_decrypt">
 <summary>Key for resource getting something like "The decryption operation failed, see inner exception."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_read">
 <summary>Key for resource getting something like "The read operation failed, see inner exception."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_write">
 <summary>Key for resource getting something like "The write operation failed, see inner exception."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_eof">
 <summary>Key for resource getting something like "Received an unexpected EOF or 0 bytes from the transport stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_io_async_result">
 <summary>Key for resource getting something like "The parameter: {0} is not valid. Use the object returned from corresponding Begin async call."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headers_req">
 <summary>Key for resource getting something like "This collection holds response headers and cannot contain the specified request header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headers_rsp">
 <summary>Key for resource getting something like "This collection holds request headers and cannot contain the specified response header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_headers_toolong">
 <summary>Key for resource getting something like "Header values cannot be longer than {0} characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_emptystringset">
 <summary>Key for resource getting something like "This property cannot be set to an empty string."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_emptystringcall">
 <summary>Key for resource getting something like "The parameter '{0}' cannot be an empty string."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_mustcall">
 <summary>Key for resource getting something like "Please call the {0} method before calling this method."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_mustcompletecall">
 <summary>Key for resource getting something like "The in-progress method {0} must be completed first."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_callinprogress">
 <summary>Key for resource getting something like "Cannot re-call {0} while a previous call is still in progress."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_scheme">
 <summary>Key for resource getting something like "Only Uri prefixes starting with 'http://' or 'https://' are supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_host">
 <summary>Key for resource getting something like "Only Uri prefixes with a valid hostname are supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_slash">
 <summary>Key for resource getting something like "Only Uri prefixes ending in '/' are allowed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_repcall">
 <summary>Key for resource getting something like "This method cannot be called twice."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_tls_version">
 <summary>Key for resource getting something like "The SSL version is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_target">
 <summary>Key for resource getting something like "Cannot cast target permission type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_both_regex">
 <summary>Key for resource getting something like "Cannot subset Regex. Only support if both patterns are identical."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_none">
 <summary>Key for resource getting something like "There are no permissions to check."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_attrib_count">
 <summary>Key for resource getting something like "The value for '{0}' must be specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_invalid_val">
 <summary>Key for resource getting something like "The parameter value '{0}={1}' is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_attrib_multi">
 <summary>Key for resource getting something like "The permission '{0}={1}' cannot be added. Add a separate Attribute statement."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_epname">
 <summary>Key for resource getting something like "The argument value '{0}' is invalid for creating a SocketPermission object."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_perm_invalid_val_in_element">
 <summary>Key for resource getting something like "The '{0}' element contains one or more invalid values."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalid_ip_addr">
 <summary>Key for resource getting something like "IPv4 address 0.0.0.0 and IPv6 address ::0 are unspecified addresses that cannot be used as a target address."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.dns_bad_ip_address">
 <summary>Key for resource getting something like "An invalid IP address was specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_bad_mac_address">
 <summary>Key for resource getting something like "An invalid physical address was specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ping">
 <summary>Key for resource getting something like "An exception occurred during a Ping request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient">
 <summary>Key for resource getting something like "An exception occurred during a WebClient request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient_ContentType">
 <summary>Key for resource getting something like "The Content-Type header cannot be changed from its default value for this request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient_Multipart">
 <summary>Key for resource getting something like "The Content-Type header cannot be set to a multipart type for this request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient_no_concurrent_io_allowed">
 <summary>Key for resource getting something like "WebClient does not support concurrent I/O operations."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_webclient_invalid_baseaddress">
 <summary>Key for resource getting something like "The specified value is not a valid base address."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_container_add_cookie">
 <summary>Key for resource getting something like "An error occurred when adding a cookie to the container."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_invalid">
 <summary>Key for resource getting something like "Invalid contents for cookie = '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_size">
 <summary>Key for resource getting something like "The value size of the cookie is '{0}'. This exceeds the configured maximum size, which is '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_parse_header">
 <summary>Key for resource getting something like "An error occurred when parsing the Cookie header for Uri '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_attribute">
 <summary>Key for resource getting something like "The '{0}'='{1}' part of the cookie is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_format">
 <summary>Key for resource getting something like "Cookie format error."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_exists">
 <summary>Key for resource getting something like "Cookie already exists."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cookie_capacity_range">
 <summary>Key for resource getting something like "'{0}' has to be greater than '{1}' and less than '{2}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_set_token">
 <summary>Key for resource getting something like "Failed to impersonate a thread doing authentication of a Web Request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_revert_token">
 <summary>Key for resource getting something like "Failed to revert the thread token after authenticating a Web Request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_async_context">
 <summary>Key for resource getting something like "Async context creation failed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_encrypt">
 <summary>Key for resource getting something like "The encryption operation failed, see inner exception."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_decrypt">
 <summary>Key for resource getting something like "The decryption operation failed, see inner exception."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_context_expired">
 <summary>Key for resource getting something like "The security context has expired."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_handshake_start">
 <summary>Key for resource getting something like "The handshake failed. The remote side has dropped the stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_handshake">
 <summary>Key for resource getting something like "The handshake failed, see inner exception."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_frame">
 <summary>Key for resource getting something like "The handshake failed due to an unexpected packet format."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_corrupted">
 <summary>Key for resource getting something like "The stream is corrupted due to an invalid SSL version number in the SSL protocol header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_cert_validation">
 <summary>Key for resource getting something like "The remote certificate is invalid according to the validation procedure."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_invalid_end_call">
 <summary>Key for resource getting something like "{0} can only be called once for each asynchronous operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_invalid_begin_call">
 <summary>Key for resource getting something like "{0} cannot be called when another {1} operation is pending."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_ssl_io_no_server_cert">
 <summary>Key for resource getting something like "The server mode SSL must use a certificate with the associated private key."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_bad_client_creds">
 <summary>Key for resource getting something like "The server has rejected the client credentials."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_bad_client_creds_or_target_mismatch">
 <summary>Key for resource getting something like "Either the target name is incorrect or the server has rejected the client credentials."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_context_expectation">
 <summary>Key for resource getting something like "A security requirement was not fulfilled during authentication. Required: {0}, negotiated: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_context_expectation_remote">
 <summary>Key for resource getting something like "A remote side security requirement was not fulfilled during authentication. Try increasing the ProtectionLevel and/or ImpersonationLevel."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_supported_impl_levels">
 <summary>Key for resource getting something like "The supported values are Identification, Impersonation or Delegation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_no_protection_on_win9x">
 <summary>Key for resource getting something like "The current platform only supports ProtectionLevel.None."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_no_anonymous_support">
 <summary>Key for resource getting something like "The TokenImpersonationLevel.Anonymous level is not supported for authentication."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_reauth">
 <summary>Key for resource getting something like "This operation is not allowed on a security context that has already been authenticated."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_noauth">
 <summary>Key for resource getting something like "This operation is only allowed using a successfully authenticated context."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_client_server">
 <summary>Key for resource getting something like "Once authentication is attempted as the client or server, additional authentication attempts must use the same client or server role."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_noencryption">
 <summary>Key for resource getting something like "This authenticated context does not support data encryption."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_SSPI">
 <summary>Key for resource getting something like "A call to SSPI failed, see inner exception."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_failure">
 <summary>Key for resource getting something like "Authentication failed, see inner exception."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_eof">
 <summary>Key for resource getting something like "Authentication failed because the remote party has closed the transport stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_alert">
 <summary>Key for resource getting something like "Authentication failed on the remote side (the stream might still be available for additional authentication attempts)."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_ignored_reauth">
 <summary>Key for resource getting something like "Re-authentication failed because the remote party continued to encrypt more than {0} bytes before answering re-authentication."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_empty_read">
 <summary>Key for resource getting something like "Protocol error: cannot proceed with SSPI handshake because an empty blob was received."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_auth_message_not_encrypted">
 <summary>Key for resource getting something like "Protocol error: A received message contains a valid signature but it was not encrypted as required by the effective Protection Level."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_frame_size">
 <summary>Key for resource getting something like "Received an invalid authentication frame. The message size is limited to {0} bytes, attempted to read {1} bytes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_frame_read_io">
 <summary>Key for resource getting something like "Received incomplete authentication message. Remote party has probably closed the connection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_frame_read_size">
 <summary>Key for resource getting something like "Cannot determine the frame size or a corrupted frame was received."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_frame_max_size">
 <summary>Key for resource getting something like "The payload size is limited to {0}, attempted set it to {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_jscript_load">
 <summary>Key for resource getting something like "The proxy JScript file threw an exception while being initialized: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_proxy_not_gmt">
 <summary>Key for resource getting something like "The specified value is not a valid GMT time."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_proxy_invalid_dayofweek">
 <summary>Key for resource getting something like "The specified value is not a valid day of the week."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_param_not_string">
 <summary>Key for resource getting something like "Argument must be a string instead of {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_value_cannot_be_negative">
 <summary>Key for resource getting something like "The specified value cannot be negative."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalid_offset">
 <summary>Key for resource getting something like "Value of offset cannot be negative or greater than the length of the buffer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_offset_plus_count">
 <summary>Key for resource getting something like "Sum of offset and count cannot be greater than the length of the buffer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cannot_be_false">
 <summary>Key for resource getting something like "The specified value cannot be false."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalid_enum">
 <summary>Key for resource getting something like "The specified value is not valid in the '{0}' enumeration."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_listener_already">
 <summary>Key for resource getting something like "Failed to listen on prefix '{0}' because it conflicts with an existing registration on the machine."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_shadowstream_not_writable">
 <summary>Key for resource getting something like "Shadow stream must be writable."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_validator_fail">
 <summary>Key for resource getting something like "The validation method {0}() returned a failure for this request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_access_denied">
 <summary>Key for resource getting something like "For this RequestCache object, {0} access is denied."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_validator_result">
 <summary>Key for resource getting something like "The validation method {0}() returned the unexpected status: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_retrieve_failure">
 <summary>Key for resource getting something like "Cache retrieve failed: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_not_supported_body">
 <summary>Key for resource getting something like "The cached response is not supported for a request with a content body."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_not_supported_command">
 <summary>Key for resource getting something like "The cached response is not supported for a request with the specified request method."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_not_accept_response">
 <summary>Key for resource getting something like "The cache protocol refused the server response. To allow automatic request retrying, set request.AllowAutoRedirect to true."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_method_failed">
 <summary>Key for resource getting something like "The request (Method = {0}) cannot be served from the cache and will fail because of the effective CachePolicy: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_key_failed">
 <summary>Key for resource getting something like "The request failed because no cache entry (CacheKey = {0}) was found and the effective CachePolicy is {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_no_stream">
 <summary>Key for resource getting something like "The cache protocol returned a cached response but the cache entry is invalid because it has a null stream. (Cache Key = {0})."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_unsupported_partial_stream">
 <summary>Key for resource getting something like "A partial content stream does not support this operation or some method argument is out of range."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_not_configured">
 <summary>Key for resource getting something like "No cache protocol is available for this request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_cache_non_seekable_stream_not_supported">
 <summary>Key for resource getting something like "The transport stream instance passed in the RangeStream constructor is not seekable and therefore is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_invalid_cast">
 <summary>Key for resource getting something like "Invalid cast from {0} to {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_collection_readonly">
 <summary>Key for resource getting something like "The collection is read-only."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_not_ipermission">
 <summary>Key for resource getting something like "Specified value does not contain 'IPermission' as its tag."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_no_classname">
 <summary>Key for resource getting something like "Specified value does not contain a 'class' attribute."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_no_typename">
 <summary>Key for resource getting something like "The value class attribute is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_array_too_small">
 <summary>Key for resource getting something like "The target array is too small."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_servicePointAddressNotSupportedInHostMode">
 <summary>Key for resource getting something like "This property is not supported for protocols that do not use URI."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_listener_delegate_exception">
 <summary>Key for resource getting something like "Sending 500 response, AuthenticationSchemeSelectorDelegate threw an exception: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_listener_unsupported_authentication_scheme">
 <summary>Key for resource getting something like "Received a request with an unsupported authentication scheme, Authorization:{0} SupportedSchemes:{1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_listener_unmatched_authentication_scheme">
 <summary>Key for resource getting something like "Received a request with an unmatched or no authentication scheme. AuthenticationSchemes:{0}, Authorization:{1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_listener_create_valid_identity_failed">
 <summary>Key for resource getting something like "Failed to create a valid Identity for an incoming request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sspi_enumerating_security_packages">
 <summary>Key for resource getting something like "Enumerating security packages:"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sspi_security_package_not_found">
 <summary>Key for resource getting something like "Security package '{0}' was not found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sspi_security_context_input_buffer">
 <summary>Key for resource getting something like "{0}(In-Buffer length={1}, Out-Buffer length={2}, returned code={3})."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sspi_security_context_input_buffers">
 <summary>Key for resource getting something like "{0}(In-Buffers count={1}, Out-Buffer length={2}, returned code={3})."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_certificate">
 <summary>Key for resource getting something like "Remote certificate: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_locating_private_key_for_certificate">
 <summary>Key for resource getting something like "Locating the private key for the certificate: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cert_is_of_type_2">
 <summary>Key for resource getting something like "Certificate is of type X509Certificate2 and contains the private key."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_found_cert_in_store">
 <summary>Key for resource getting something like "Found the certificate in the {0} store."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_did_not_find_cert_in_store">
 <summary>Key for resource getting something like "Cannot find the certificate in either the LocalMachine store or the CurrentUser store."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_open_store_failed">
 <summary>Key for resource getting something like "Opening Certificate store {0} failed, exception: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_got_certificate_from_delegate">
 <summary>Key for resource getting something like "Got a certificate from the client delegate."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_no_delegate_and_have_no_client_cert">
 <summary>Key for resource getting something like "Client delegate did not provide a certificate; and there are not other user-provided certificates. Need to attempt a session restart."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_no_delegate_but_have_client_cert">
 <summary>Key for resource getting something like "Client delegate did not provide a certificate; but there are other user-provided certificates"."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_attempting_restart_using_cert">
 <summary>Key for resource getting something like "Attempting to restart the session using the user-provided certificate: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_no_issuers_try_all_certs">
 <summary>Key for resource getting something like "We have user-provided certificates. The server has not specified any issuers, so try all the certificates."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_server_issuers_look_for_matching_certs">
 <summary>Key for resource getting something like "We have user-provided certificates. The server has specified {0} issuer(s). Looking for certificates that match any of the issuers."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_selected_cert">
 <summary>Key for resource getting something like "Selected certificate: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_n_certs_after_filtering">
 <summary>Key for resource getting something like "Left with {0} client certificates to choose from."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_finding_matching_certs">
 <summary>Key for resource getting something like "Trying to find a matching certificate in the certificate store."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_using_cached_credential">
 <summary>Key for resource getting something like "Using the cached credential handle."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_user_declared_valid">
 <summary>Key for resource getting something like "Remote certificate was verified as valid by the user."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_user_declared_invalid">
 <summary>Key for resource getting something like "Remote certificate was verified as invalid by the user."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_has_no_errors">
 <summary>Key for resource getting something like "Remote certificate has no errors."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_has_errors">
 <summary>Key for resource getting something like "Remote certificate has errors:"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_not_available">
 <summary>Key for resource getting something like "The remote server did not provide a certificate."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_remote_cert_name_mismatch">
 <summary>Key for resource getting something like "Certificate name mismatch."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_autodetect_script_location_parse_error">
 <summary>Key for resource getting something like "WebProxy failed to parse the auto-detected location of a proxy script:"{0}" into a Uri."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_autodetect_failed">
 <summary>Key for resource getting something like "WebProxy failed to autodetect a Uri for a proxy script."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_script_execution_error">
 <summary>Key for resource getting something like "WebProxy caught an exception while executing the ScriptReturn script: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_script_download_compile_error">
 <summary>Key for resource getting something like "WebProxy caught an exception while  downloading/compiling the proxy script: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_system_setting_update">
 <summary>Key for resource getting something like "ScriptEngine was notified of a potential change in the system's proxy settings and will update WebProxy settings."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_update_due_to_ip_config_change">
 <summary>Key for resource getting something like "ScriptEngine was notified of a change in the IP configuration and will update WebProxy settings."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_called_with_null_parameter">
 <summary>Key for resource getting something like "{0} was called with a null '{1}' parameter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_proxy_called_with_invalid_parameter">
 <summary>Key for resource getting something like "{0} was called with an invalid parameter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_validation_failed_resubmit">
 <summary>Key for resource getting something like "Resubmitting this request because cache cannot validate the response."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_refused_server_response">
 <summary>Key for resource getting something like "Caching protocol has refused the server response. To allow automatic request retrying set request.AllowAutoRedirect=true."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_ftp_proxy_doesnt_support_partial">
 <summary>Key for resource getting something like "This FTP request is configured to use a proxy through HTTP protocol. Cache revalidation and partially cached responses are not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_ftp_method">
 <summary>Key for resource getting something like "FTP request method={0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_ftp_supports_bin_only">
 <summary>Key for resource getting something like "Caching is not supported for non-binary FTP request mode."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_replacing_entry_with_HTTP_200">
 <summary>Key for resource getting something like "Replacing cache entry metadata with 'HTTP/1.1 200 OK' status line to satisfy HTTP cache protocol logic."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_now_time">
 <summary>Key for resource getting something like "[Now Time (UTC)] = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_age_absolute">
 <summary>Key for resource getting something like "[MaxAge] Absolute time expiration check (sensitive to clock skew), cache Expires: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age1">
 <summary>Key for resource getting something like "[Age1] Now - LastSynchronized = [Age1] Now - LastSynchronized = {0}, Last Synchronized: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age1_date_header">
 <summary>Key for resource getting something like "[Age1] NowTime-Date Header = {0}, Date Header: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age1_last_synchronized">
 <summary>Key for resource getting something like "[Age1] Now - LastSynchronized + AgeHeader = {0}, Last Synchronized: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age1_last_synchronized_age_header">
 <summary>Key for resource getting something like "[Age1] Now - LastSynchronized + AgeHeader = {0}, Last Synchronized: {1}, Age Header: {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age2">
 <summary>Key for resource getting something like "[Age2] AgeHeader = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_age_cache_s_max_age">
 <summary>Key for resource getting something like "[MaxAge] Cache s_MaxAge = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_age_expires_date">
 <summary>Key for resource getting something like "[MaxAge] Cache Expires - Date = {0}, Expires: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_age_cache_max_age">
 <summary>Key for resource getting something like "[MaxAge] Cache MaxAge = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_max_age_use_10_percent">
 <summary>Key for resource getting something like "[MaxAge] Cannot compute Cache MaxAge, use 10% since LastModified: {0}, LastModified: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_max_age_use_default">
 <summary>Key for resource getting something like "[MaxAge] Cannot compute Cache MaxAge, using default RequestCacheValidator.UnspecifiedMaxAge: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_validator_invalid_for_policy">
 <summary>Key for resource getting something like "This validator should not be called for policy : {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_response_last_modified">
 <summary>Key for resource getting something like "Response LastModified={0},  ContentLength= {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cache_last_modified">
 <summary>Key for resource getting something like "Cache    LastModified={0},  ContentLength= {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_partial_and_non_zero_content_offset">
 <summary>Key for resource getting something like "A Cache Entry is partial and the user request has non zero ContentOffset = {0}. A restart from cache is not supported for partial cache entries."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_response_valid_based_on_policy">
 <summary>Key for resource getting something like "Response is valid based on Policy = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_null_response_failure">
 <summary>Key for resource getting something like "Response is null so this Request should fail."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_ftp_response_status">
 <summary>Key for resource getting something like "FTP Response Status={0}, {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_valid_based_on_retry">
 <summary>Key for resource getting something like "Accept this response as valid based on the retry count = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_update_based_on_method">
 <summary>Key for resource getting something like "Cache is not updated based on the request Method = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_removed_existing_invalid_entry">
 <summary>Key for resource getting something like "Existing entry is removed because it was found invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_updated_based_on_policy">
 <summary>Key for resource getting something like "Cache is not updated based on Policy = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_updated_because_no_response">
 <summary>Key for resource getting something like "Cache is not updated because there is no response associated with the request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_removed_existing_based_on_method">
 <summary>Key for resource getting something like "Existing cache entry is removed based on the request Method = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_existing_not_removed_because_unexpected_response_status">
 <summary>Key for resource getting something like "Existing cache entry should but cannot be removed due to unexpected response Status = ({0}) {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_removed_existing_based_on_policy">
 <summary>Key for resource getting something like "Existing cache entry is removed based on Policy = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_updated_based_on_ftp_response_status">
 <summary>Key for resource getting something like "Cache is not updated based on the FTP response status. Expected = {0}, actual = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_update_not_supported_for_ftp_restart">
 <summary>Key for resource getting something like "Cache update is not supported for restarted FTP responses. Restart offset = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_removed_entry_because_ftp_restart_response_changed">
 <summary>Key for resource getting something like "Existing cache entry is removed since a restarted response was changed on the server, cache LastModified date = {0}, new LastModified date = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_last_synchronized">
 <summary>Key for resource getting something like "The cache entry last synchronized time = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_suppress_update_because_synched_last_minute">
 <summary>Key for resource getting something like "Suppressing cache update since the entry was synchronized within the last minute."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_updating_last_synchronized">
 <summary>Key for resource getting something like "Updating cache entry last synchronized time = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_remove">
 <summary>Key for resource getting something like "{0} Cannot Remove (throw): Key = {1}, Error = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_key_status">
 <summary>Key for resource getting something like "{0}, Key = {1}, -> Status = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_key_remove_failed_status">
 <summary>Key for resource getting something like "{0}, Key = {1}, Remove operation failed -> Status = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_usecount_file">
 <summary>Key for resource getting something like "{0}, UseCount = {1}, File = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_stream">
 <summary>Key for resource getting something like "{0}, stream = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_filename">
 <summary>Key for resource getting something like "{0} -> Filename = {1}, Status = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_lookup_failed">
 <summary>Key for resource getting something like "{0}, Lookup operation failed -> {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_exception">
 <summary>Key for resource getting something like "{0}, Exception = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_expected_length">
 <summary>Key for resource getting something like "Expected length (0=none)= {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_last_modified">
 <summary>Key for resource getting something like "LastModified    (0=none)= {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_expires">
 <summary>Key for resource getting something like "Expires         (0=none)= {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_stale">
 <summary>Key for resource getting something like "MaxStale (sec)          = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_dumping_metadata">
 <summary>Key for resource getting something like "...Dumping Metadata... "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_create_failed">
 <summary>Key for resource getting something like "Create operation failed -> {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_set_expires">
 <summary>Key for resource getting something like "Set Expires               ={0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_set_last_modified">
 <summary>Key for resource getting something like "Set LastModified          ={0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_set_last_synchronized">
 <summary>Key for resource getting something like "Set LastSynchronized      ={0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_enable_max_stale">
 <summary>Key for resource getting something like "Enable MaxStale (sec) ={0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_disable_max_stale">
 <summary>Key for resource getting something like "Disable MaxStale (set to 0)."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_set_new_metadata">
 <summary>Key for resource getting something like "Set new Metadata."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_dumping">
 <summary>Key for resource getting something like "...Dumping... "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_key">
 <summary>Key for resource getting something like "{0}, Key = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_commit">
 <summary>Key for resource getting something like "{0}, Nothing was written to the stream, do not commit that cache entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_error_deleting_filename">
 <summary>Key for resource getting something like "{0}, Error deleting a Filename = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_update_failed">
 <summary>Key for resource getting something like "{0}, Key = {1}, Update operation failed -> {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_delete_failed">
 <summary>Key for resource getting something like "{0}, Key = {1}, Delete operation failed -> {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_commit_failed">
 <summary>Key for resource getting something like "{0}, Key = {1}, Commit operation failed -> {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_committed_as_partial">
 <summary>Key for resource getting something like "{0}, Key = {1}, Committed entry as partial, not cached bytes count = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_max_stale_and_update_status">
 <summary>Key for resource getting something like "{0}, MaxStale = {1}, Update Status = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_failing_request_with_exception">
 <summary>Key for resource getting something like "Failing request with the WebExceptionStatus = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_request_method">
 <summary>Key for resource getting something like "Request Method = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_http_status_parse_failure">
 <summary>Key for resource getting something like "Cannot Parse Cache HTTP Status Line: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_http_status_line">
 <summary>Key for resource getting something like "Entry Status Line = HTTP/{0} {1} {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cache_control">
 <summary>Key for resource getting something like "Cache Cache-Control = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_invalid_http_version">
 <summary>Key for resource getting something like "The cached version is invalid, assuming HTTP 1.0."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_http_response_header">
 <summary>Key for resource getting something like "This Cache Entry does not carry HTTP response headers."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_http_header_parse_error">
 <summary>Key for resource getting something like "Cannot parse HTTP headers in entry metadata, offending string: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_metadata_name_value_parse_error">
 <summary>Key for resource getting something like "Cannot parse all strings in system metadata as "name:value", offending string: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_content_range_error">
 <summary>Key for resource getting something like "Invalid format of Response Content-Range:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cache_control_error">
 <summary>Key for resource getting something like "Invalid CacheControl header = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_unexpected_status">
 <summary>Key for resource getting something like "The cache protocol method {0} has returned unexpected status: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_object_and_exception">
 <summary>Key for resource getting something like "{0} exception: {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_revalidation_not_needed">
 <summary>Key for resource getting something like "{0}, No cache entry revalidation is needed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_updated_based_on_cache_protocol_status">
 <summary>Key for resource getting something like "{0}, Cache is not updated based on the current cache protocol status = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_closing_cache_stream">
 <summary>Key for resource getting something like "{0}: {1} Closing effective cache stream, type = {2}, cache entry key = {3}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_exception_ignored">
 <summary>Key for resource getting something like "{0}: an exception (ignored) on {1} = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_cache_entry">
 <summary>Key for resource getting something like "{0} has requested a cache response but the entry does not exist (Stream.Null)."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_null_cached_stream">
 <summary>Key for resource getting something like "{0} has requested a cache response but the cached stream is null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_requested_combined_but_null_cached_stream">
 <summary>Key for resource getting something like "{0} has requested a combined response but the cached stream is null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_returned_range_cache">
 <summary>Key for resource getting something like "{0} has returned a range cache stream, Offset = {1}, Length = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_entry_not_found_freshness_undefined">
 <summary>Key for resource getting something like "{0}, Cache Entry not found, freshness result = Undefined."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_dumping_cache_context">
 <summary>Key for resource getting something like "...Dumping Cache Context..."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_result">
 <summary>Key for resource getting something like "{0}, result = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_uri_with_query_has_no_expiration">
 <summary>Key for resource getting something like "Request Uri has a Query, and no explicit expiration time is provided."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_uri_with_query_and_cached_resp_from_http_10">
 <summary>Key for resource getting something like "Request Uri has a Query, and cached response is from HTTP 1.0 server."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_valid_as_fresh_or_because_policy">
 <summary>Key for resource getting something like "Valid as fresh or because of Cache Policy = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_accept_based_on_retry_count">
 <summary>Key for resource getting something like "Accept this response base on the retry count = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_date_header_older_than_cache_entry">
 <summary>Key for resource getting something like "Response Date header value is older than that of the cache entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_server_didnt_satisfy_range">
 <summary>Key for resource getting something like "Server did not satisfy the range: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_304_received_on_unconditional_request">
 <summary>Key for resource getting something like "304 response was received on an unconditional request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_304_received_on_unconditional_request_expected_200_206">
 <summary>Key for resource getting something like "304 response was received on an unconditional request, but expected response code is 200 or 206."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_last_modified_header_older_than_cache_entry">
 <summary>Key for resource getting something like "HTTP 1.0 Response Last-Modified header value is older than that of the cache entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_freshness_outside_policy_limits">
 <summary>Key for resource getting something like "Response freshness is not within the specified policy limits."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_need_to_remove_invalid_cache_entry_304">
 <summary>Key for resource getting something like "Need to remove an invalid cache entry with status code == 304(NotModified)."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_status">
 <summary>Key for resource getting something like "Response Status = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_304_or_request_head">
 <summary>Key for resource getting something like "Response==304 or Request was HEAD, updating cache entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_dont_update_cached_headers">
 <summary>Key for resource getting something like "Do not update Cached Headers."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_update_cached_headers">
 <summary>Key for resource getting something like "Update Cached Headers."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_partial_resp_not_combined_with_existing_entry">
 <summary>Key for resource getting something like "A partial response is not combined with existing cache entry, Cache Stream Size = {0}, response Range Start = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_request_contains_conditional_header">
 <summary>Key for resource getting something like "User Request contains a conditional header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_not_a_get_head_post">
 <summary>Key for resource getting something like "This was Not a GET, HEAD or POST request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_update_cache_if_304">
 <summary>Key for resource getting something like "Cannot update cache if Response status == 304 and a cache entry was not found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_update_cache_with_head_resp">
 <summary>Key for resource getting something like "Cannot update cache with HEAD response if the cache entry does not exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_http_resp_is_null">
 <summary>Key for resource getting something like "HttpWebResponse is null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_cache_control_is_no_store">
 <summary>Key for resource getting something like "Response Cache-Control = no-store."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_cache_control_is_public">
 <summary>Key for resource getting something like "Response Cache-Control = public."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_cache_control_is_private">
 <summary>Key for resource getting something like "Response Cache-Control = private, and Cache is public."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_cache_control_is_private_plus_headers">
 <summary>Key for resource getting something like "Response Cache-Control = private+Headers, removing those headers."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_older_than_cache">
 <summary>Key for resource getting something like "HttpWebResponse date is older than of the cached one."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_revalidation_required">
 <summary>Key for resource getting something like "Response revalidation is always required but neither Last-Modified nor ETag header is set on the response."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_needs_revalidation">
 <summary>Key for resource getting something like "Response can be cached although it will always require revalidation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_allows_caching">
 <summary>Key for resource getting something like "Response explicitly allows caching = Cache-Control: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_auth_header_and_no_s_max_age">
 <summary>Key for resource getting something like "Request carries Authorization Header and no s-maxage, proxy-revalidate or public directive found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_post_resp_without_cache_control_or_expires">
 <summary>Key for resource getting something like "POST Response without Cache-Control or Expires headers."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_valid_based_on_status_code">
 <summary>Key for resource getting something like "Valid based on Status Code: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_no_cache_control">
 <summary>Key for resource getting something like "Response with no CacheControl and Status Code = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_age">
 <summary>Key for resource getting something like "Cache Age = {0}, Cache MaxAge = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_policy_min_fresh">
 <summary>Key for resource getting something like "Client Policy MinFresh = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_policy_max_age">
 <summary>Key for resource getting something like "Client Policy MaxAge = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_policy_cache_sync_date">
 <summary>Key for resource getting something like "Client Policy CacheSyncDate (UTC) = {0}, Cache LastSynchronizedUtc = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_policy_max_stale">
 <summary>Key for resource getting something like "Client Policy MaxStale = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_control_no_cache">
 <summary>Key for resource getting something like "Cached CacheControl = no-cache."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_control_no_cache_removing_some_headers">
 <summary>Key for resource getting something like "Cached CacheControl = no-cache, Removing some headers."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_control_must_revalidate">
 <summary>Key for resource getting something like "Cached CacheControl = must-revalidate and Cache is not fresh."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cached_auth_header">
 <summary>Key for resource getting something like "The cached entry has Authorization Header and cache is not fresh."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cached_auth_header_no_control_directive">
 <summary>Key for resource getting something like "The cached entry has Authorization Header and no Cache-Control directive present that would allow to use that entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_after_validation">
 <summary>Key for resource getting something like "After Response Cache Validation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_resp_status_304">
 <summary>Key for resource getting something like "Response status == 304 but the cache entry does not exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_head_resp_has_different_content_length">
 <summary>Key for resource getting something like "A response resulted from a HEAD request has different Content-Length header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_head_resp_has_different_content_md5">
 <summary>Key for resource getting something like "A response resulted from a HEAD request has different Content-MD5 header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_head_resp_has_different_etag">
 <summary>Key for resource getting something like "A response resulted from a HEAD request has different ETag header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_304_head_resp_has_different_last_modified">
 <summary>Key for resource getting something like "A 304 response resulted from a HEAD request has different Last-Modified header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_existing_entry_has_to_be_discarded">
 <summary>Key for resource getting something like "An existing cache entry has to be discarded."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_existing_entry_should_be_discarded">
 <summary>Key for resource getting something like "An existing cache entry should be discarded."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_206_resp_non_matching_entry">
 <summary>Key for resource getting something like "A 206 Response has been received and either ETag or Last-Modified header value does not match cache entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_206_resp_starting_position_not_adjusted">
 <summary>Key for resource getting something like "The starting position for 206 Response is not adjusted to the end of cache entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_combined_resp_requested">
 <summary>Key for resource getting something like "Creation of a combined response has been requested from the cache protocol."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_updating_headers_on_304">
 <summary>Key for resource getting something like "Updating headers on 304 response."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_suppressing_headers_update_on_304">
 <summary>Key for resource getting something like "Suppressing cache headers update on 304, new headers don't add anything."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_status_code_not_304_206">
 <summary>Key for resource getting something like "A Response Status Code is not 304 or 206."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_sxx_resp_cache_only">
 <summary>Key for resource getting something like "A 5XX Response and Cache-Only like policy, serving from cache."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_sxx_resp_can_be_replaced">
 <summary>Key for resource getting something like "A 5XX Response that can be replaced by existing cache entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_empty">
 <summary>Key for resource getting something like "Cache entry Vary header is empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_contains_asterisks">
 <summary>Key for resource getting something like "Cache entry Vary header contains '*'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_no_headers_in_metadata">
 <summary>Key for resource getting something like "No request headers are found in cached metadata to test based on the cached response Vary header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_mismatched_count">
 <summary>Key for resource getting something like "Vary header: Request and cache header fields count does not match, header name = {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_mismatched_field">
 <summary>Key for resource getting something like "Vary header: A Cache header field mismatch the request one, header name = {0}, cache field = {1}, request field = {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_vary_header_match">
 <summary>Key for resource getting something like "All required Request headers match based on cached Vary response header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range">
 <summary>Key for resource getting something like "Request Range (not in Cache yet) = Range:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range_invalid_format">
 <summary>Key for resource getting something like "Invalid format of Request Range:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range_not_in_cache">
 <summary>Key for resource getting something like "Cannot serve from Cache, Range:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range_in_cache">
 <summary>Key for resource getting something like "Serving Request Range from cache, Range:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_partial_resp">
 <summary>Key for resource getting something like "Serving Partial Response (206) from cache, Content-Range:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_range_request_range">
 <summary>Key for resource getting something like "Range Request (user specified), Range: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_could_be_partial">
 <summary>Key for resource getting something like "Could be a Partial Cached Response, Size = {0}, Response Content Length = {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_condition_if_none_match">
 <summary>Key for resource getting something like "Request Condition = If-None-Match:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_condition_if_modified_since">
 <summary>Key for resource getting something like "Request Condition = If-Modified-Since:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_construct_conditional_request">
 <summary>Key for resource getting something like "A Conditional Request cannot be constructed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_cannot_construct_conditional_range_request">
 <summary>Key for resource getting something like "A Conditional Range request cannot be constructed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_entry_size_too_big">
 <summary>Key for resource getting something like "Cached Entry Size = {0} is too big, cannot do a range request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_condition_if_range">
 <summary>Key for resource getting something like "Request Condition = If-Range:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_conditional_range_not_implemented_on_http_10">
 <summary>Key for resource getting something like "A Conditional Range request on Http &lt;= 1.0 is not implemented."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_saving_request_headers">
 <summary>Key for resource getting something like "Saving Request Headers, Vary: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_only_byte_range_implemented">
 <summary>Key for resource getting something like "Ranges other than bytes are not implemented."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_cache_multiple_complex_range_not_implemented">
 <summary>Key for resource getting something like "Multiple/complexe ranges are not implemented."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_unknown">
 <summary>Key for resource getting something like "unknown"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_operation_returned_something">
 <summary>Key for resource getting something like "{0} returned {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_operation_failed_with_error">
 <summary>Key for resource getting something like "{0} failed with error {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_buffered_n_bytes">
 <summary>Key for resource getting something like "Buffered {0} bytes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_method_equal">
 <summary>Key for resource getting something like "Method={0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_releasing_connection">
 <summary>Key for resource getting something like "Releasing FTP connection#{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_unexpected_exception">
 <summary>Key for resource getting something like "Unexpected exception in {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_server_response_error_code">
 <summary>Key for resource getting something like "Error code {0} was received from server response."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_resubmitting_request">
 <summary>Key for resource getting something like "Resubmitting request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_retrieving_localhost_exception">
 <summary>Key for resource getting something like "An unexpected exception while retrieving the local address list: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_resolved_servicepoint_may_not_be_remote_server">
 <summary>Key for resource getting something like "A resolved ServicePoint host could be wrongly considered as a remote server."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_received_status_line">
 <summary>Key for resource getting something like "Received status line: Version={0}, StatusCode={1}, StatusDescription={2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sending_headers">
 <summary>Key for resource getting something like "Sending headers&#10;{{&#10;{0}}}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_received_headers">
 <summary>Key for resource getting something like "Received headers&#10;{{&#10;{0}}}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_shell_expression_pattern_format_warning">
 <summary>Key for resource getting something like "ShellServices.ShellExpression.Parse() was called with a badly formatted 'pattern':{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_exception_in_callback">
 <summary>Key for resource getting something like "Exception in callback: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_sending_command">
 <summary>Key for resource getting something like "Sending command [{0}]"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.net_log_received_response">
 <summary>Key for resource getting something like "Received response [{0}]"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Mail7BitStreamInvalidCharacter">
 <summary>Key for resource getting something like "An invalid character was found in the 7-bit stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailAddressInvalidFormat">
 <summary>Key for resource getting something like "The specified string is not in the form required for an e-mail address."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailAddressUnsupportedFormat">
 <summary>Key for resource getting something like "The specified e-mail address is currently not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailSubjectInvalidFormat">
 <summary>Key for resource getting something like "The specified string is not in the form required for a subject."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailBase64InvalidCharacter">
 <summary>Key for resource getting something like "An invalid character was found in the Base-64 stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailCollectionIsReadOnly">
 <summary>Key for resource getting something like "The collection is read-only."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailDateInvalidFormat">
 <summary>Key for resource getting something like "The date is in an invalid format."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderFieldAlreadyExists">
 <summary>Key for resource getting something like "The specified singleton field already exists in the collection and cannot be added."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderFieldInvalidCharacter">
 <summary>Key for resource getting something like "An invalid character was found in the mail header."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderFieldMalformedHeader">
 <summary>Key for resource getting something like "The mail header is malformed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderFieldMismatchedName">
 <summary>Key for resource getting something like "The header name does not match this property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderIndexOutOfBounds">
 <summary>Key for resource getting something like "The index value is outside the bounds of the array."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderItemAccessorOnlySingleton">
 <summary>Key for resource getting something like "The Item property can only be used with singleton fields."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderListHasChanged">
 <summary>Key for resource getting something like "The underlying list has been changed and the enumeration is out of date."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderResetCalledBeforeEOF">
 <summary>Key for resource getting something like "The stream should have been consumed before resetting."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderTargetArrayTooSmall">
 <summary>Key for resource getting something like "The target array is too small to contain all the headers."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHeaderInvalidCID">
 <summary>Key for resource getting something like "The ContentID cannot contain a '&lt;' or '>' character."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailHostNotFound">
 <summary>Key for resource getting something like "The SMTP host was not found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailReaderGetContentStreamAlreadyCalled">
 <summary>Key for resource getting something like "GetContentStream() can only be called once."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailReaderTruncated">
 <summary>Key for resource getting something like "Premature end of stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailWriterIsInContent">
 <summary>Key for resource getting something like "This operation cannot be performed while in content."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailWriterLineLengthTooSmall">
 <summary>Key for resource getting something like "Maximum line length too small."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailServerDoesNotSupportStartTls">
 <summary>Key for resource getting something like "Server does not support secure connections."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MailServerResponse">
 <summary>Key for resource getting something like "The server response was: {0}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SSPIAuthenticationOrSPNNull">
 <summary>Key for resource getting something like "AuthenticationType and ServicePrincipalName cannot be specified as null for server's SSPI Negotiation module."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SSPIPInvokeError">
 <summary>Key for resource getting something like "{0} failed with error {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SSPIInvalidHandleType">
 <summary>Key for resource getting something like "'{0}' is not a supported handle type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAlreadyConnected">
 <summary>Key for resource getting something like "Already connected."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAuthenticationFailed">
 <summary>Key for resource getting something like "Authentication failed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAuthenticationFailedNoCreds">
 <summary>Key for resource getting something like "Authentication failed due to lack of credentials."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpDataStreamOpen">
 <summary>Key for resource getting something like "Data stream is still open."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpDefaultMimePreamble">
 <summary>Key for resource getting something like "This is a multi-part MIME message."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpDefaultSubject">
 <summary>Key for resource getting something like "@@SOAP Application Message"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpInvalidResponse">
 <summary>Key for resource getting something like "Smtp server returned an invalid response."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpNotConnected">
 <summary>Key for resource getting something like "Not connected."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpSystemStatus">
 <summary>Key for resource getting something like "System status, or system help reply."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpHelpMessage">
 <summary>Key for resource getting something like "Help message."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpServiceReady">
 <summary>Key for resource getting something like "Service ready."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpServiceClosingTransmissionChannel">
 <summary>Key for resource getting something like "Service closing transmission channel."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpOK">
 <summary>Key for resource getting something like "Completed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpUserNotLocalWillForward">
 <summary>Key for resource getting something like "User not local; will forward to specified path."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpStartMailInput">
 <summary>Key for resource getting something like "Start mail input; end with &lt;CRLF>.&lt;CRLF>."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpServiceNotAvailable">
 <summary>Key for resource getting something like "Service not available, closing transmission channel."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpMailboxBusy">
 <summary>Key for resource getting something like "Mailbox unavailable."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpLocalErrorInProcessing">
 <summary>Key for resource getting something like "Error in processing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpInsufficientStorage">
 <summary>Key for resource getting something like "Insufficient system storage."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpPermissionDenied">
 <summary>Key for resource getting something like "Client does not have permission to Send As this sender."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpCommandUnrecognized">
 <summary>Key for resource getting something like "Syntax error, command unrecognized."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpSyntaxError">
 <summary>Key for resource getting something like "Syntax error in parameters or arguments."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpCommandNotImplemented">
 <summary>Key for resource getting something like "Command not implemented."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpBadCommandSequence">
 <summary>Key for resource getting something like "Bad sequence of commands."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpCommandParameterNotImplemented">
 <summary>Key for resource getting something like "Command parameter not implemented."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpMailboxUnavailable">
 <summary>Key for resource getting something like "Mailbox unavailable."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpUserNotLocalTryAlternatePath">
 <summary>Key for resource getting something like "User not local; please try a different path."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpExceededStorageAllocation">
 <summary>Key for resource getting something like "Exceeded storage allocation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpMailboxNameNotAllowed">
 <summary>Key for resource getting something like "Mailbox name not allowed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpTransactionFailed">
 <summary>Key for resource getting something like "Transaction failed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpSendMailFailure">
 <summary>Key for resource getting something like "Failure sending mail."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpRecipientFailed">
 <summary>Key for resource getting something like "Unable to send to a recipient."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpRecipientRequired">
 <summary>Key for resource getting something like "A recipient must be specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpFromRequired">
 <summary>Key for resource getting something like "A from address must be specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAllRecipientsFailed">
 <summary>Key for resource getting something like "Unable to send to all recipients."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpClientNotPermitted">
 <summary>Key for resource getting something like "Client does not have permission to submit mail to this server."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpMustIssueStartTlsFirst">
 <summary>Key for resource getting something like "The SMTP server requires a secure connection or the client was not authenticated."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpNeedAbsolutePickupDirectory">
 <summary>Key for resource getting something like "Only absolute directories are allowed for pickup directory."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpGetIisPickupDirectoryFailed">
 <summary>Key for resource getting something like "Cannot get IIS pickup directory."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpPickupDirectoryDoesnotSupportSsl">
 <summary>Key for resource getting something like "SSL must not be enabled for pickup-directory delivery methods."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpOperationInProgress">
 <summary>Key for resource getting something like "Previous operation is still in progress."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpAuthResponseInvalid">
 <summary>Key for resource getting something like "The server returned an invalid response in the authentication handshake."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpEhloResponseInvalid">
 <summary>Key for resource getting something like "The server returned an invalid response to the EHLO command."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MimeTransferEncodingNotSupported">
 <summary>Key for resource getting something like "The MIME transfer encoding '{0}' is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SeekNotSupported">
 <summary>Key for resource getting something like "Seeking is not supported on this stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WriteNotSupported">
 <summary>Key for resource getting something like "Writing is not supported on this stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidHexDigit">
 <summary>Key for resource getting something like "Invalid hex digit '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidSSPIContext">
 <summary>Key for resource getting something like "The SSPI context is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidSSPIContextKey">
 <summary>Key for resource getting something like "A null session key was obtained from SSPI."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidSSPINegotiationElement">
 <summary>Key for resource getting something like "Invalid SSPI BinaryNegotiationElement."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidHeaderName">
 <summary>Key for resource getting something like "An invalid character was found in header name."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidHeaderValue">
 <summary>Key for resource getting something like "An invalid character was found in header value."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotGetEffectiveTimeOfSSPIContext">
 <summary>Key for resource getting something like "Cannot get the effective time of the SSPI context."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotGetExpiryTimeOfSSPIContext">
 <summary>Key for resource getting something like "Cannot get the expiry time of the SSPI context."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadNotSupported">
 <summary>Key for resource getting something like "Reading is not supported on this stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidAsyncResult">
 <summary>Key for resource getting something like "The AsyncResult is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnspecifiedHost">
 <summary>Key for resource getting something like "The SMTP host was not specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPort">
 <summary>Key for resource getting something like "The specified port is invalid. The port must be greater than 0."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SmtpInvalidOperationDuringSend">
 <summary>Key for resource getting something like "This operation cannot be performed while a message is being sent."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MimePartCantResetStream">
 <summary>Key for resource getting something like "One of the streams has already been used and can't be reset to the origin."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MediaTypeInvalid">
 <summary>Key for resource getting something like "The specified media type is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ContentTypeInvalid">
 <summary>Key for resource getting something like "The specified content type is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ContentDispositionInvalid">
 <summary>Key for resource getting something like "The specified content disposition is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AttributeNotSupported">
 <summary>Key for resource getting something like "'{0}' is not a valid configuration attribute for type '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cannot_remove_with_null">
 <summary>Key for resource getting something like "Cannot remove with null name."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_elements_only">
 <summary>Key for resource getting something like "Only elements allowed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_no_child_nodes">
 <summary>Key for resource getting something like "Child nodes not allowed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_required_attribute_empty">
 <summary>Key for resource getting something like "Required attribute '{0}' cannot be empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_required_attribute_missing">
 <summary>Key for resource getting something like "Required attribute '{0}' not found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_time_overflow">
 <summary>Key for resource getting something like "The time span for the property '{0}' exceeds the maximum that can be stored in the configuration."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_type_must_be_configurationvalidation">
 <summary>Key for resource getting something like "The ConfigurationValidation attribute must be derived from ConfigurationValidation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_type_must_be_typeconverter">
 <summary>Key for resource getting something like "The ConfigurationPropertyConverter attribute must be derived from TypeConverter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_unknown_format">
 <summary>Key for resource getting something like "Unknown"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_unrecognized_attribute">
 <summary>Key for resource getting something like "Unrecognized attribute '{0}'. Note that attribute names are case-sensitive."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_base_unrecognized_element">
 <summary>Key for resource getting something like "Unrecognized element."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_invalid_boolean_attribute">
 <summary>Key for resource getting something like "The property '{0}' must have value 'true' or 'false'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_invalid_integer_attribute">
 <summary>Key for resource getting something like "The '{0}' attribute must be set to an integer value."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_invalid_positive_integer_attribute">
 <summary>Key for resource getting something like "The '{0}' attribute must be set to a positive integer value."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_invalid_type_attribute">
 <summary>Key for resource getting something like "The '{0}' attribute must be set to a valid Type name."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_missing_required_attribute">
 <summary>Key for resource getting something like "The '{0}' attribute must be specified on the '{1}' tag."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_name_value_file_section_file_invalid_root">
 <summary>Key for resource getting something like "The root element must match the name of the section referencing the file, '{0}'"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_provider_must_implement_type">
 <summary>Key for resource getting something like "Provider must implement the class '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_provider_name_null_or_empty">
 <summary>Key for resource getting something like "Provider name cannot be null or empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_provider_not_found">
 <summary>Key for resource getting something like "The provider was not found in the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_property_name_cannot_be_empty">
 <summary>Key for resource getting something like "Property '{0}' cannot be empty or null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_section_cannot_clear_locked_section">
 <summary>Key for resource getting something like "Cannot clear section handlers.  Section '{0}' is locked."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_section_record_not_found">
 <summary>Key for resource getting something like "SectionRecord not found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_source_cannot_contain_file">
 <summary>Key for resource getting something like "The 'File' property cannot be used with the ConfigSource property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_system_already_set">
 <summary>Key for resource getting something like "The configuration system can only be set once.  Configuration system is already set"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_unable_to_read_security_policy">
 <summary>Key for resource getting something like "Unable to read security policy."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Config_write_xml_returned_null">
 <summary>Key for resource getting something like "WriteXml returned null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cannot_clear_sections_within_group">
 <summary>Key for resource getting something like "Server cannot clear configuration sections from within section groups.  &lt;clear/> must be a child of &lt;configSections>."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cannot_exit_up_top_directory">
 <summary>Key for resource getting something like "Cannot use a leading .. to exit above the top directory."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_create_listener">
 <summary>Key for resource getting something like "Couldn't create listener '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TextWriterTL_DefaultConstructor_NotSupported">
 <summary>Key for resource getting something like "initializeData needs to be a valid file name for TextWriterTraceListener.  "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_create_type_instance">
 <summary>Key for resource getting something like "Could not create {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_find_type">
 <summary>Key for resource getting something like "Couldn't find type for class {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_get_constructor">
 <summary>Key for resource getting something like "Couldn't find constructor for class {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EmptyTypeName_NotAllowed">
 <summary>Key for resource getting something like "switchType needs to be a valid class name. It can't be empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Incorrect_base_type">
 <summary>Key for resource getting something like "The specified type, '{0}' is not derived from the appropriate base type, '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Only_specify_one">
 <summary>Key for resource getting something like "'switchValue' and 'switchName' cannot both be specified on source '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Provider_Already_Initialized">
 <summary>Key for resource getting something like "This provider instance has already been initialized."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Reference_listener_cant_have_properties">
 <summary>Key for resource getting something like "A listener with no type name specified references the sharedListeners section and cannot have any attributes other than 'Name'.  Listener: '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Reference_to_nonexistent_listener">
 <summary>Key for resource getting something like "Listener '{0}' does not exist in the sharedListeners section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsPropertyNotFound">
 <summary>Key for resource getting something like "The settings property '{0}' was not found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsPropertyReadOnly">
 <summary>Key for resource getting something like "The settings property '{0}' is read-only."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsPropertyWrongType">
 <summary>Key for resource getting something like "The settings property '{0}' is of a non-compatible type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Type_isnt_tracelistener">
 <summary>Key for resource getting something like "Could not add trace listener {0} because it is not a subclass of TraceListener."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Unable_to_convert_type_from_string">
 <summary>Key for resource getting something like "Could not find a type-converter to convert object if type '{0}' from string."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Unable_to_convert_type_to_string">
 <summary>Key for resource getting something like "Could not find a type-converter to convert object if type '{0}' to string."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Value_must_be_numeric">
 <summary>Key for resource getting something like "Error in trace switch '{0}': The value of a switch must be integral."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_create_from_default_value">
 <summary>Key for resource getting something like "The property '{0}' could not be created from it's default value. Error message: {1}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Could_not_create_from_default_value_2">
 <summary>Key for resource getting something like "The property '{0}' could not be created from it's default value because the default value is of a different type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidDirName">
 <summary>Key for resource getting something like "The directory name {0} is invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_IOError">
 <summary>Key for resource getting something like "Error reading the {0} directory."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PatternInvalidChar">
 <summary>Key for resource getting something like "The character '{0}' in the pattern provided is not valid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BufferSizeTooLarge">
 <summary>Key for resource getting something like "The specified buffer size is too large. FileSystemWatcher cannot allocate {0} bytes for the internal buffer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_ChangedFilter">
 <summary>Key for resource getting something like "Flag to indicate which change event to monitor."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Enabled">
 <summary>Key for resource getting something like "Flag to indicate whether this component is active or not."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Filter">
 <summary>Key for resource getting something like "The file pattern filter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_IncludeSubdirectories">
 <summary>Key for resource getting something like "Flag to watch subdirectories."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Path">
 <summary>Key for resource getting something like "The path to the directory to monitor."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_SynchronizingObject">
 <summary>Key for resource getting something like "The object used to marshal the event handler calls issued as a result of a Directory change."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Changed">
 <summary>Key for resource getting something like "Occurs when a file and/or directory change matches the filter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Created">
 <summary>Key for resource getting something like "Occurs when a file and/or directory creation matches the filter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Deleted">
 <summary>Key for resource getting something like "Occurs when a file and/or directory deletion matches the filter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_Renamed">
 <summary>Key for resource getting something like "Occurs when a file and/or directory rename matches the filter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FSW_BufferOverflow">
 <summary>Key for resource getting something like "Too many changes at once in directory:{0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileSystemWatcherDesc">
 <summary>Key for resource getting something like "Monitors file system change notifications and raises events when a directory or file changes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSet">
 <summary>Key for resource getting something like "[Not Set]"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerAutoReset">
 <summary>Key for resource getting something like "Indicates whether the timer will be restarted when it is enabled."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerEnabled">
 <summary>Key for resource getting something like "Indicates whether the timer is enabled to fire events at a defined interval."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerInterval">
 <summary>Key for resource getting something like "The number of milliseconds between timer events."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerIntervalElapsed">
 <summary>Key for resource getting something like "Occurs when the Interval has elapsed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TimerSynchronizingObject">
 <summary>Key for resource getting something like "The object used to marshal the event handler calls issued when an interval has elapsed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MismatchedCounterTypes">
 <summary>Key for resource getting something like "Mismatched counter types."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoPropertyForAttribute">
 <summary>Key for resource getting something like "Could not find a property for the attribute '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidAttributeType">
 <summary>Key for resource getting something like "The value of attribute '{0}' could not be converted to the proper type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Generic_ArgCantBeEmptyString">
 <summary>Key for resource getting something like "'{0}' can not be empty string."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadLogName">
 <summary>Key for resource getting something like "Event log names must consist of printable characters and cannot contain \, *, ?, or spaces"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidProperty">
 <summary>Key for resource getting something like "Invalid value {1} for property {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotifyCreateFailed">
 <summary>Key for resource getting something like "Cannot create Notify event."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantMonitorEventLog">
 <summary>Key for resource getting something like "Cannot monitor Event log. The log may exist on a remote computer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InitTwice">
 <summary>Key for resource getting something like "Cannot initialize the same object twice."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidParameter">
 <summary>Key for resource getting something like "Invalid value '{1}' for parameter '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingParameter">
 <summary>Key for resource getting something like "Must specify value for {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ParameterTooLong">
 <summary>Key for resource getting something like "The size of {0} is too big. It cannot be longer than {1} characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LocalSourceAlreadyExists">
 <summary>Key for resource getting something like "Source {0} already exists on the local computer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SourceAlreadyExists">
 <summary>Key for resource getting something like "Source {0} already exists on the computer '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LocalLogAlreadyExistsAsSource">
 <summary>Key for resource getting something like "Log {0} has already been registered as a source on the local computer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogAlreadyExistsAsSource">
 <summary>Key for resource getting something like "Log {0} has already been registered as a source on the computer '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DuplicateLogName">
 <summary>Key for resource getting something like "Only the first eight characters of a custom log name are significant, and there is already another log on the system using the first eight characters of the name given. Name given: '{0}', name of existing log: '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.RegKeyMissing">
 <summary>Key for resource getting something like "Cannot open registry key {0}\{1}\{2} on computer '{3}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LocalRegKeyMissing">
 <summary>Key for resource getting something like "Cannot open registry key {0}\{1}\{2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.RegKeyMissingShort">
 <summary>Key for resource getting something like "Cannot open registry key {0} on computer {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidParameterFormat">
 <summary>Key for resource getting something like "Invalid format for argument {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoLogName">
 <summary>Key for resource getting something like "Log to delete was not specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.RegKeyNoAccess">
 <summary>Key for resource getting something like "Cannot open registry key {0} on computer {1}. You might not have access."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingLog">
 <summary>Key for resource getting something like "Cannot find Log {0} on computer '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SourceNotRegistered">
 <summary>Key for resource getting something like "The source '{0}' is not registered on machine '{1}', or you do not have write access to the {2} registry key."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LocalSourceNotRegistered">
 <summary>Key for resource getting something like "Source {0} is not registered on the local computer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantRetrieveEntries">
 <summary>Key for resource getting something like "Cannot retrieve all entries."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IndexOutOfBounds">
 <summary>Key for resource getting something like "Index {0} is out of bounds."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadLogEntryAt">
 <summary>Key for resource getting something like "Cannot read log entry number {0}.  The event log may be corrupt."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingLogProperty">
 <summary>Key for resource getting something like "Log property value has not been specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantOpenLog">
 <summary>Key for resource getting something like "Cannot open log {0} on machine {1}. Windows has not provided an error code."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NeedSourceToOpen">
 <summary>Key for resource getting something like "Source property was not set before opening the event log in write mode."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NeedSourceToWrite">
 <summary>Key for resource getting something like "Source property was not set before writing to the event log."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantOpenLogAccess">
 <summary>Key for resource getting something like "Cannot open log for source '{0}'. You may not have write access."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryTooLong">
 <summary>Key for resource getting something like "Log entry string is too long. A string written to the event log cannot exceed 32766 characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TooManyReplacementStrings">
 <summary>Key for resource getting something like "The maximum allowed number of replacement strings is 255."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogSourceMismatch">
 <summary>Key for resource getting something like "The source '{0}' is not registered in log '{1}'. (It is registered in log '{2}'.) " The Source and Log properties must be matched, or you may set Log to the empty string, and it will automatically be matched to the Source property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoAccountInfo">
 <summary>Key for resource getting something like "Cannot obtain account information."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoCurrentEntry">
 <summary>Key for resource getting something like "No current EventLog entry available, cursor is located before the first or after the last element of the enumeration."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MessageNotFormatted">
 <summary>Key for resource getting something like "The description for Event ID '{0}' in Source '{1}' cannot be found.  The local computer may not have the necessary registry information or message DLL files to display the message, or you may not have permission to access them.  The following information is part of the event:"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EventID">
 <summary>Key for resource getting something like "Invalid eventID value '{0}'. It must be in the range between '{1}' and '{2}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogDoesNotExists">
 <summary>Key for resource getting something like "The event log '{0}' on computer '{1}' does not exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidCustomerLogName">
 <summary>Key for resource getting something like "The log name: '{0}' is invalid for customer log creation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotDeleteEqualSource">
 <summary>Key for resource getting something like "The event log source '{0}' cannot be deleted, because it's equal to the log name."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.RentionDaysOutOfRange">
 <summary>Key for resource getting something like "'retentionDays' must be between 1 and 365 days."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaximumKilobytesOutOfRange">
 <summary>Key for resource getting something like "MaximumKilobytes must be between 64 KB and 4 GB, and must be in 64K increments."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SomeLogsInaccessible">
 <summary>Key for resource getting something like "The source was not found, but some or all event logs could not be searched.  Inaccessible logs: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadConfigSwitchValue">
 <summary>Key for resource getting something like "The config value for Switch '{0}' was invalid."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConfigSectionsUnique">
 <summary>Key for resource getting something like "The '{0}' section can only appear once per config file."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ConfigSectionsUniquePerSection">
 <summary>Key for resource getting something like "The '{0}' tag can only appear once per section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SourceListenerDoesntExist">
 <summary>Key for resource getting something like "The listener '{0}' added to source '{1}' must have a listener with the same name defined in the main Trace listeners section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SourceSwitchDoesntExist">
 <summary>Key for resource getting something like "The source '{0}' must have a switch with the same name defined in the Switches section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadOnlyCounter">
 <summary>Key for resource getting something like "Cannot update Performance Counter, this object has been initialized as ReadOnly."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadOnlyRemoveInstance">
 <summary>Key for resource getting something like "Cannot remove Performance Counter Instance, this object as been initialized as ReadOnly."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotCustomCounter">
 <summary>Key for resource getting something like "The requested Performance Counter is not a custom counter, it has to be initialized as ReadOnly."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CategoryNameMissing">
 <summary>Key for resource getting something like "Failed to initialize because CategoryName is missing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterNameMissing">
 <summary>Key for resource getting something like "Failed to initialize because CounterName is missing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceNameProhibited">
 <summary>Key for resource getting something like "Counter is single instance, instance name '{0}' is not valid for this counter category."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceNameRequired">
 <summary>Key for resource getting something like "Counter is not single instance, an instance name needs to be specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingInstance">
 <summary>Key for resource getting something like "Instance {0} does not exist in category {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerformanceCategoryExists">
 <summary>Key for resource getting something like "Cannot create Performance Category '{0}' because it already exists."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidCounterName">
 <summary>Key for resource getting something like "Invalid empty or null string for counter name."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DuplicateCounterName">
 <summary>Key for resource getting something like "Cannot create Performance Category with counter name {0} because the name is a duplicate."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantDeleteCategory">
 <summary>Key for resource getting something like "Cannot delete Performance Category because this category is not registered or is a system category."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingCategory">
 <summary>Key for resource getting something like "Category does not exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingCategoryDetail">
 <summary>Key for resource getting something like "Category {0} does not exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadCategory">
 <summary>Key for resource getting something like "Cannot read Category {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingCounter">
 <summary>Key for resource getting something like "Counter {0} does not exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CategoryNameNotSet">
 <summary>Key for resource getting something like "Category name property has not been set."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterExists">
 <summary>Key for resource getting something like "Could not locate Performance Counter with specified category name '{0}', counter name '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadCategoryIndex">
 <summary>Key for resource getting something like "Could not Read Category Index: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadCounter">
 <summary>Key for resource getting something like "Counter '{0}' does not exist in the specified Category."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantReadInstance">
 <summary>Key for resource getting something like "Instance '{0}' does not exist in the specified Category."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.RemoteWriting">
 <summary>Key for resource getting something like "Cannot write to a Performance Counter in a remote machine."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterLayout">
 <summary>Key for resource getting something like "The Counter layout for the Category specified is invalid, a counter of the type:  AverageCount64, AverageTimer32, CounterMultiTimer, CounterMultiTimerInverse, CounterMultiTimer100Ns, CounterMultiTimer100NsInverse, RawFraction, or SampleFraction has to be immediately followed by any of the base counter types: AverageBase, CounterMultiBase, RawBase or SampleBase."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PossibleDeadlock">
 <summary>Key for resource getting something like "The operation couldn't be completed, potential internal deadlock."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SharedMemoryGhosted">
 <summary>Key for resource getting something like "Cannot access shared memory, AppDomain has been unloaded."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.HelpNotAvailable">
 <summary>Key for resource getting something like "Help not available."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerfInvalidHelp">
 <summary>Key for resource getting something like "Invalid help string. Its length must be in the range between '{0}' and '{1}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerfInvalidCounterName">
 <summary>Key for resource getting something like "Invalid counter name. Its length must be in the range between '{0}' and '{1}'. Double quotes, control characters and leading or trailing spaces are not allowed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerfInvalidCategoryName">
 <summary>Key for resource getting something like "Invalid category name. Its length must be in the range between '{0}' and '{1}'. Double quotes, control characters and leading or trailing spaces are not allowed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MustAddCounterCreationData">
 <summary>Key for resource getting something like "Only objects of type CounterCreationData can be added to a CounterCreationDataCollection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.RemoteCounterAdmin">
 <summary>Key for resource getting something like "Creating or Deleting Performance Counter Categories on remote machines is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoInstanceInformation">
 <summary>Key for resource getting something like "The {0} category doesn't provide any instance information, no accurate data can be returned."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PerfCounterPdhError">
 <summary>Key for resource getting something like "There was an error calculating the PerformanceCounter value (0x{0})."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MultiInstanceOnly">
 <summary>Key for resource getting something like "Category '{0}' is marked as multi-instance.  Performance counters in this category can only be created with instance names."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SingleInstanceOnly">
 <summary>Key for resource getting something like "Category '{0}' is marked as single-instance.  Performance counters in this category can only be created without instance names."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceNameTooLong">
 <summary>Key for resource getting something like "Instance names used for writing to custom counters must be 127 characters or less. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CategoryNameTooLong">
 <summary>Key for resource getting something like "Category names must be 1024 characters or less. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceLifetimeProcessonReadOnly">
 <summary>Key for resource getting something like "InstanceLifetime is unused by ReadOnly counters. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceLifetimeProcessforSingleInstance">
 <summary>Key for resource getting something like "Single instance categories are only valid with the Global lifetime. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceAlreadyExists">
 <summary>Key for resource getting something like "Instance '{0}' already exists with a lifetime of Process.  It cannot be recreated or reused until it has been removed or until the process using it has exited. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantSetLifetimeAfterInitialized">
 <summary>Key for resource getting something like "The InstanceLifetime cannot be set after the instance has been initialized.  You must use the default constructor and set the CategoryName, InstanceName, CounterName, InstanceLifetime and ReadOnly properties manually before setting the RawValue. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessLifetimeNotValidInGlobal">
 <summary>Key for resource getting something like "PerformanceCounterInstanceLifetime.Process is not valid in the global shared memory.  If your performance counter category was created with an older version of the Framework, it uses the global shared memory.  Either use PerformanceCounterInstanceLifetime.Global, or if applications running on older versions of the Framework do not need to write to your category, delete and recreate it. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantConvertProcessToGlobal">
 <summary>Key for resource getting something like "An instance with a lifetime of Process can only be accessed from a PerformanceCounter with the InstanceLifetime set to PerformanceCounterInstanceLifetime.Process. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantConvertGlobalToProcess">
 <summary>Key for resource getting something like "An instance with a lifetime of Global can only be accessed from a PerformanceCounter with the InstanceLifetime set to PerformanceCounterInstanceLifetime.Global. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PriorityClassNotSupported">
 <summary>Key for resource getting something like "The AboveNormal and BelowNormal priority classes are not available on this platform."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WinNTRequired">
 <summary>Key for resource getting something like "Feature requires Windows NT."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Win2kRequired">
 <summary>Key for resource getting something like "Feature requires Windows 2000."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoAssociatedProcess">
 <summary>Key for resource getting something like "No process is associated with this object."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessIdRequired">
 <summary>Key for resource getting something like "Feature requires a process identifier."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupportedRemote">
 <summary>Key for resource getting something like "Feature is not supported for remote machines."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoProcessInfo">
 <summary>Key for resource getting something like "Process has exited, so the requested information is not available."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WaitTillExit">
 <summary>Key for resource getting something like "Process must exit before requested information can be determined."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoProcessHandle">
 <summary>Key for resource getting something like "Process was not started by this object, so requested information cannot be determined."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MissingProccess">
 <summary>Key for resource getting something like "Process with an Id of {0} is not running."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadMinWorkset">
 <summary>Key for resource getting something like "Minimum working set size is invalid. It must be less than or equal to the maximum working set size."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadMaxWorkset">
 <summary>Key for resource getting something like "Maximum working set size is invalid. It must be greater than or equal to the minimum working set size."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WinNTRequiredForRemote">
 <summary>Key for resource getting something like "Operating system does not support accessing processes on remote computers. This feature requires Windows NT or later."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessHasExited">
 <summary>Key for resource getting something like "Cannot process request because the process ({0}) has exited."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessHasExitedNoId">
 <summary>Key for resource getting something like "Cannot process request because the process has exited."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadExited">
 <summary>Key for resource getting something like "The request cannot be processed because the thread ({0}) has exited."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Win2000Required">
 <summary>Key for resource getting something like "Feature requires Windows 2000 or later."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WinXPRequired">
 <summary>Key for resource getting something like "Feature requires Windows XP or later."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Win2k3Required">
 <summary>Key for resource getting something like "Feature requires Windows Server 2003 or later."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessNotFound">
 <summary>Key for resource getting something like "Thread {0} found, but no process {1} found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetProcessId">
 <summary>Key for resource getting something like "Cannot retrieve process identifier from the process handle."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessDisabled">
 <summary>Key for resource getting something like "Process performance counter is disabled, so the requested operation cannot be performed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WaitReasonUnavailable">
 <summary>Key for resource getting something like "WaitReason is only available if the ThreadState is Wait."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupportedRemoteThread">
 <summary>Key for resource getting something like "Feature is not supported for threads on remote computers."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UseShellExecuteRequiresSTA">
 <summary>Key for resource getting something like "Current thread is not in Single Thread Apartment (STA) mode. Starting a process with UseShellExecute set to True requires the current thread be in STA mode.  Ensure that your Main function has STAThreadAttribute marked."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantRedirectStreams">
 <summary>Key for resource getting something like "The Process object must have the UseShellExecute property set to false in order to redirect IO streams."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantUseEnvVars">
 <summary>Key for resource getting something like "The Process object must have the UseShellExecute property set to false in order to use environment variables."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantStartAsUser">
 <summary>Key for resource getting something like "The Process object must have the UseShellExecute property set to false in order to start a process as a user."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CouldntConnectToRemoteMachine">
 <summary>Key for resource getting something like "Couldn't connect to remote machine."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CouldntGetProcessInfos">
 <summary>Key for resource getting something like "Couldn't get process information from performance counter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InputIdleUnkownError">
 <summary>Key for resource getting something like "WaitForInputIdle failed.  This could be because the process does not have a graphical interface."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.FileNameMissing">
 <summary>Key for resource getting something like "Cannot start process because a file name has not been provided."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnvironmentBlock">
 <summary>Key for resource getting something like "The environment block provided doesn't have the correct format."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnumProcessModuleFailed">
 <summary>Key for resource getting something like "Unable to enumerate the process modules."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PendingAsyncOperation">
 <summary>Key for resource getting something like "An async read operation has already been started on the stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoAsyncOperation">
 <summary>Key for resource getting something like "No async read operation is in progress on the stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidApplication">
 <summary>Key for resource getting something like "The specified executable is not a valid Win32 application."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.StandardOutputEncodingNotAllowed">
 <summary>Key for resource getting something like "StandardOutputEncoding is only supported when standard output is redirected."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.StandardErrorEncodingNotAllowed">
 <summary>Key for resource getting something like "StandardErrorEncoding is only supported when standard error is redirected."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CountersOOM">
 <summary>Key for resource getting something like "Custom counters file view is out of memory."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MappingCorrupted">
 <summary>Key for resource getting something like "Cannot continue the current operation, the performance counters memory mapping has been corrupted."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SetSecurityDescriptorFailed">
 <summary>Key for resource getting something like "Cannot initialize security descriptor initialized."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantCreateFileMapping">
 <summary>Key for resource getting something like "Cannot create file mapping."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantMapFileView">
 <summary>Key for resource getting something like "Cannot map view of file."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetMappingSize">
 <summary>Key for resource getting something like "Cannot calculate the size of the file view. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetStandardOut">
 <summary>Key for resource getting something like "StandardOut has not been redirected or the process hasn't started yet."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetStandardIn">
 <summary>Key for resource getting something like "StandardIn has not been redirected."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantGetStandardError">
 <summary>Key for resource getting something like "StandardError has not been redirected."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantMixSyncAsyncOperation">
 <summary>Key for resource getting something like "Cannot mix synchronous and asynchronous operation on process stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoFileMappingSize">
 <summary>Key for resource getting something like "Cannot retrieve file mapping size while initializing configuration settings."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EnvironmentBlockTooLong">
 <summary>Key for resource getting something like "The environment block used to start a process cannot be longer than 65535 bytes.  Your environment block is {0} bytes long.  Remove some environment variables and try again. "</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_InvalidSerialPort">
 <summary>Key for resource getting something like "The given port name does not start with COM/com or does not resolve to a valid serial port."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_InvalidSerialPortExtended">
 <summary>Key for resource getting something like "The given port name is invalid.  It may be a valid port, but not a serial port."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_SecurityException">
 <summary>Key for resource getting something like "The port name cannot start with '\'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidOffLen">
 <summary>Key for resource getting something like "Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentNull_Array">
 <summary>Key for resource getting something like "Array cannot be null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentNull_Buffer">
 <summary>Key for resource getting something like "Buffer cannot be null."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_Bounds_Lower_Upper">
 <summary>Key for resource getting something like "Argument must be between {0} and {1}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_Enum">
 <summary>Key for resource getting something like "Enum value was out of legal range."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_NeedNonNegNumRequired">
 <summary>Key for resource getting something like "Non-negative number required."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_Timeout">
 <summary>Key for resource getting something like "The timeout must be greater than or equal to -1."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_WriteTimeout">
 <summary>Key for resource getting something like "The timeout must be either a positive number or -1."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_NeedPosNum">
 <summary>Key for resource getting something like "Positive number required."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentOutOfRange_OffsetOut">
 <summary>Key for resource getting something like "Either offset did not refer to a position in the string, or there is an insufficient length of destination character array."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IndexOutOfRange_IORaceCondition">
 <summary>Key for resource getting something like "Probable I/O race condition detected while copying memory.  The I/O package is not thread safe by default.  In multithreaded applications, a stream must be accessed in a thread-safe way, such as a thread-safe wrapper returned by TextReader's or TextWriter's Synchronized methods.  This also applies to classes like StreamWriter and StreamReader."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_BindHandleFailed">
 <summary>Key for resource getting something like "BindHandle for ThreadPool failed on this handle."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_OperationAborted">
 <summary>Key for resource getting something like "The I/O operation has been aborted because of either a thread exit or an application request."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_UnseekableStream">
 <summary>Key for resource getting something like "Stream does not support seeking."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnauthorizedAccess_IODenied_Path">
 <summary>Key for resource getting something like "Access to the port '{0}' is denied."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_EOF_ReadBeyondEOF">
 <summary>Key for resource getting something like "Unable to read beyond the end of the stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_UnknownError">
 <summary>Key for resource getting something like "Unknown Error '{0}'."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ObjectDisposed_StreamClosed">
 <summary>Key for resource getting something like "Can not access a closed Stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Arg_WrongAsyncResult">
 <summary>Key for resource getting something like "IAsyncResult object did not come from the corresponding async method on this type."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EndReadCalledMultiple">
 <summary>Key for resource getting something like "EndRead can only be called once for each asynchronous operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EndWriteCalledMultiple">
 <summary>Key for resource getting something like "EndWrite can only be called once for each asynchronous operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_PortNotFound">
 <summary>Key for resource getting something like "The specified port does not exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_PortNotFoundFileName">
 <summary>Key for resource getting something like "The port '{0}' does not exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnauthorizedAccess_IODenied_NoPathName">
 <summary>Key for resource getting something like "Access to the port is denied."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_PathTooLong">
 <summary>Key for resource getting something like "The specified port name is too long.  The port name must be less than 260 characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_SharingViolation_NoFileName">
 <summary>Key for resource getting something like "The process cannot access the port because it is being used by another process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.IO_SharingViolation_File">
 <summary>Key for resource getting something like "The process cannot access the port '{0}' because it is being used by another process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupported_UnwritableStream">
 <summary>Key for resource getting something like "Stream does not support writing."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ObjectDisposed_WriterClosed">
 <summary>Key for resource getting something like "Can not write to a closed TextWriter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BaseStream_Invalid_Not_Open">
 <summary>Key for resource getting something like "The BaseStream is only available when the port is open."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PortNameEmpty_String">
 <summary>Key for resource getting something like "The PortName cannot be empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Port_not_open">
 <summary>Key for resource getting something like "The port is closed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Port_already_open">
 <summary>Key for resource getting something like "The port is already open."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Cant_be_set_when_open">
 <summary>Key for resource getting something like "'{0}' cannot be set while the port is open."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Max_Baud">
 <summary>Key for resource getting something like "The maximum baud rate for the device is {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.In_Break_State">
 <summary>Key for resource getting something like "The port is in the break state and cannot be written to."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Write_timed_out">
 <summary>Key for resource getting something like "The write timed out."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CantSetRtsWithHandshaking">
 <summary>Key for resource getting something like "RtsEnable cannot be accessed if Handshake is set to RequestToSend or RequestToSendXOnXOff."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupportedOS">
 <summary>Key for resource getting something like "GetPortNames is not supported on Win9x platforms."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotSupportedEncoding">
 <summary>Key for resource getting something like "SerialPort does not support encoding '{0}'.  The supported encodings include ASCIIEncoding, UTF8Encoding, UnicodeEncoding, UTF32Encoding, and most single or double byte code pages.  For a complete list please see the documentation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BaudRate">
 <summary>Key for resource getting something like "The baud rate to use on this serial port."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DataBits">
 <summary>Key for resource getting something like "The number of data bits per transmitted/received byte."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DiscardNull">
 <summary>Key for resource getting something like "Whether to discard null bytes received on the port before adding to serial buffer."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.DtrEnable">
 <summary>Key for resource getting something like "Whether to enable the Data Terminal Ready (DTR) line during communications."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Encoding">
 <summary>Key for resource getting something like "The encoding to use when reading and writing strings."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Handshake">
 <summary>Key for resource getting something like "The handshaking protocol for flow control in data exchange, which can be None."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NewLine">
 <summary>Key for resource getting something like "The string used by ReadLine and WriteLine to denote a new line."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Parity">
 <summary>Key for resource getting something like "The scheme for parity checking each received byte and marking each transmitted byte."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ParityReplace">
 <summary>Key for resource getting something like "Byte with which to replace bytes received with parity errors."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PortName">
 <summary>Key for resource getting something like "The name of the communications port to open."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadBufferSize">
 <summary>Key for resource getting something like "The size of the read buffer in bytes.  This is the maximum number of read bytes which can be buffered."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReadTimeout">
 <summary>Key for resource getting something like "The read timeout in Milliseconds."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ReceivedBytesThreshold">
 <summary>Key for resource getting something like "Number of bytes required to be available before the Read event is fired."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.RtsEnable">
 <summary>Key for resource getting something like "Whether to enable the Request To Send (RTS) line during communications."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SerialPortDesc">
 <summary>Key for resource getting something like "Represents a serial port resource."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.StopBits">
 <summary>Key for resource getting something like "The number of stop bits per transmitted/received byte."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WriteBufferSize">
 <summary>Key for resource getting something like "The size of the write buffer in bytes.  This is the maximum number of bytes which can be queued for write."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WriteTimeout">
 <summary>Key for resource getting something like "The write timeout in milliseconds."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SerialErrorReceived">
 <summary>Key for resource getting something like "Raised each time when an error is received from the SerialPort."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SerialPinChanged">
 <summary>Key for resource getting something like "Raised each time when pin is changed on the SerialPort."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SerialDataReceived">
 <summary>Key for resource getting something like "Raised each time when data is received from the SerialPort."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterType">
 <summary>Key for resource getting something like "The type of this counter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterName">
 <summary>Key for resource getting something like "The name of this counter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CounterHelp">
 <summary>Key for resource getting something like "Help information for this counter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.EventLogDesc">
 <summary>Key for resource getting something like "Provides interaction with Windows event logs."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ErrorDataReceived">
 <summary>Key for resource getting something like "User event handler to call for async IO with StandardError stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntries">
 <summary>Key for resource getting something like "The contents of the log."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogLog">
 <summary>Key for resource getting something like "Gets or sets the name of the log to read from and write to."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogMachineName">
 <summary>Key for resource getting something like "The name of the machine on which to read or write events."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogMonitoring">
 <summary>Key for resource getting something like "Indicates if the component monitors the event log for changes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogSynchronizingObject">
 <summary>Key for resource getting something like "The object used to marshal the event handler calls issued as a result of an EventLog change."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogSource">
 <summary>Key for resource getting something like "The application name (source name) to use when writing to the event log."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryWritten">
 <summary>Key for resource getting something like "Raised each time any application writes an entry to the event log."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryMachineName">
 <summary>Key for resource getting something like "The machine on which this event log resides."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryData">
 <summary>Key for resource getting something like "The binary data associated with this entry in the event log."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryIndex">
 <summary>Key for resource getting something like "The sequence of this entry in the event log."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryCategory">
 <summary>Key for resource getting something like "The category for this message."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryCategoryNumber">
 <summary>Key for resource getting something like "An application-specific category number assigned to this entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryEventID">
 <summary>Key for resource getting something like "The number identifying the message for this source."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryEntryType">
 <summary>Key for resource getting something like "The type of entry - Information, Warning, etc."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryMessage">
 <summary>Key for resource getting something like "The text of the message for this entry"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntrySource">
 <summary>Key for resource getting something like "The name of the application that wrote this entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryReplacementStrings">
 <summary>Key for resource getting something like "The application-supplied strings used in the message."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryResourceId">
 <summary>Key for resource getting something like "The full number identifying the message in the event message dll."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryTimeGenerated">
 <summary>Key for resource getting something like "The time at which the application logged this entry."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryTimeWritten">
 <summary>Key for resource getting something like "The time at which the system logged this entry to the event log."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.LogEntryUserName">
 <summary>Key for resource getting something like "The username of the account associated with this entry by the writing application."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.OutputDataReceived">
 <summary>Key for resource getting something like "User event handler to call for async IO with StandardOutput stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PC_CounterHelp">
 <summary>Key for resource getting something like "The description message for this counter."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PC_CounterType">
 <summary>Key for resource getting something like "The counter type indicates how to interpret the value of the counter, for example an actual count or a rate of change."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PC_ReadOnly">
 <summary>Key for resource getting something like "Indicates if the counter is read only.  Remote counters and counters not created using this component are read-only."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PC_RawValue">
 <summary>Key for resource getting something like "Directly accesses the raw value of this counter.  The counter must have been created using this component."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessAssociated">
 <summary>Key for resource getting something like "Indicates if the process component is associated with a real process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessDesc">
 <summary>Key for resource getting something like "Provides access to local and remote processes, enabling starting and stopping of local processes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessExitCode">
 <summary>Key for resource getting something like "The value returned from the associated process when it terminated."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessTerminated">
 <summary>Key for resource getting something like "Indicates if the associated process has been terminated."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessExitTime">
 <summary>Key for resource getting something like "The time that the associated process exited."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessHandle">
 <summary>Key for resource getting something like "Returns the native handle for this process.   The handle is only available if the process was started using this component."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessHandleCount">
 <summary>Key for resource getting something like "The number of native handles associated with this process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessId">
 <summary>Key for resource getting something like "The unique identifier for the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMachineName">
 <summary>Key for resource getting something like "The name of the machine the running the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMainModule">
 <summary>Key for resource getting something like "The main module for the associated process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessModules">
 <summary>Key for resource getting something like "The modules that have been loaded by the associated process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessSynchronizingObject">
 <summary>Key for resource getting something like "The object used to marshal the event handler calls issued as a result of a Process exit."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessSessionId">
 <summary>Key for resource getting something like "The identifier for the session of the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessThreads">
 <summary>Key for resource getting something like "The threads running in the associated process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessEnableRaisingEvents">
 <summary>Key for resource getting something like "Whether the process component should watch for the associated process to exit, and raise the Exited event."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessExited">
 <summary>Key for resource getting something like "If the WatchForExit property is set to true, then this event is raised when the associated process exits."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessFileName">
 <summary>Key for resource getting something like "The name of the application, document or URL to start."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessWorkingDirectory">
 <summary>Key for resource getting something like "The initial working directory for the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessBasePriority">
 <summary>Key for resource getting something like "The base priority computed based on the priority class that all threads run relative to."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMainWindowHandle">
 <summary>Key for resource getting something like "The handle of the main window for the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMainWindowTitle">
 <summary>Key for resource getting something like "The caption of the main window for the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMaxWorkingSet">
 <summary>Key for resource getting something like "The maximum amount of physical memory the process has required since it was started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessMinWorkingSet">
 <summary>Key for resource getting something like "The minimum amount of physical memory the process has required since it was started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessNonpagedSystemMemorySize">
 <summary>Key for resource getting something like "The number of bytes of non pageable system  memory the process is using."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPagedMemorySize">
 <summary>Key for resource getting something like "The current amount of memory that can be paged to disk that the process is using."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPagedSystemMemorySize">
 <summary>Key for resource getting something like "The number of bytes of pageable system memory the process is using."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPeakPagedMemorySize">
 <summary>Key for resource getting something like "The maximum amount of memory that can be paged to disk that the process has used since it was started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPeakWorkingSet">
 <summary>Key for resource getting something like "The maximum amount of physical memory the process has used since it was started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPeakVirtualMemorySize">
 <summary>Key for resource getting something like "The maximum amount of virtual memory the process has allocated since it was started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPriorityBoostEnabled">
 <summary>Key for resource getting something like "Whether this process would like a priority boost when the user interacts with it."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPriorityClass">
 <summary>Key for resource getting something like "The priority that the threads in the process run relative to."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPrivateMemorySize">
 <summary>Key for resource getting something like "The current amount of memory that the process has allocated that cannot be shared with other processes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessPrivilegedProcessorTime">
 <summary>Key for resource getting something like "The amount of CPU time the process spent inside the operating system core."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessProcessName">
 <summary>Key for resource getting something like "The name of the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessProcessorAffinity">
 <summary>Key for resource getting something like "A bit mask which represents the processors that the threads within the process are allowed to run on."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessResponding">
 <summary>Key for resource getting something like "Whether this process is currently responding."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStandardError">
 <summary>Key for resource getting something like "Standard error stream of the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStandardInput">
 <summary>Key for resource getting something like "Standard input stream of the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStandardOutput">
 <summary>Key for resource getting something like "Standard output stream of the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStartInfo">
 <summary>Key for resource getting something like "Specifies information used to start a process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessStartTime">
 <summary>Key for resource getting something like "The time at which the process was started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessTotalProcessorTime">
 <summary>Key for resource getting something like "The amount of CPU time the process has used."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessUserProcessorTime">
 <summary>Key for resource getting something like "The amount of CPU time the process spent outside the operating system core."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessVirtualMemorySize">
 <summary>Key for resource getting something like "The amount of virtual memory the process has currently allocated."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessWorkingSet">
 <summary>Key for resource getting something like "The current amount of physical memory the process is using."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModModuleName">
 <summary>Key for resource getting something like "The name of the module."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModFileName">
 <summary>Key for resource getting something like "The file name of the module."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModBaseAddress">
 <summary>Key for resource getting something like "The memory address that the module loaded at."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModModuleMemorySize">
 <summary>Key for resource getting something like "The amount of virtual memory required by the code and data in the module file."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcModEntryPointAddress">
 <summary>Key for resource getting something like "The memory address of the function that runs when the module is loaded."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessVerb">
 <summary>Key for resource getting something like "The verb to apply to the document specified by the FileName property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessArguments">
 <summary>Key for resource getting something like "Command line arguments that will be passed to the application specified by the FileName property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessErrorDialog">
 <summary>Key for resource getting something like "Whether to show an error dialog to the user if there is an error."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessWindowStyle">
 <summary>Key for resource getting something like "How the main window should be created when the process starts."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessCreateNoWindow">
 <summary>Key for resource getting something like "Whether to start the process without creating a new window to contain it."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessEnvironmentVariables">
 <summary>Key for resource getting something like "Set of environment variables that apply to this process and child processes."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessRedirectStandardInput">
 <summary>Key for resource getting something like "Whether the process command input is read from the Process instance's StandardInput member."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessRedirectStandardOutput">
 <summary>Key for resource getting something like "Whether the process output is written to the Process instance's StandardOutput member."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessRedirectStandardError">
 <summary>Key for resource getting something like "Whether the process's error output is written to the Process instance's StandardError member."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProcessUseShellExecute">
 <summary>Key for resource getting something like "Whether to use the operating system shell to start the process."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadBasePriority">
 <summary>Key for resource getting something like "The current base priority of the thread."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadCurrentPriority">
 <summary>Key for resource getting something like "The current priority level of the thread."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadId">
 <summary>Key for resource getting something like "The unique identifier for the thread."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadPriorityBoostEnabled">
 <summary>Key for resource getting something like "Whether the thread would like a priority boost when the user interacts with UI associated with the thread."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadPriorityLevel">
 <summary>Key for resource getting something like "The priority level of the thread."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadPrivilegedProcessorTime">
 <summary>Key for resource getting something like "The amount of CPU time the thread spent inside the operating system core."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadStartAddress">
 <summary>Key for resource getting something like "The memory address of the function that was run when the thread started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadStartTime">
 <summary>Key for resource getting something like "The time the thread was started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadThreadState">
 <summary>Key for resource getting something like "The execution state of the thread."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadTotalProcessorTime">
 <summary>Key for resource getting something like "The amount of CPU time the thread has consumed since it was started."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadUserProcessorTime">
 <summary>Key for resource getting something like "The amount of CPU time the thread spent outside the operating system core."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ThreadWaitReason">
 <summary>Key for resource getting something like "The reason the thread is waiting, if it is waiting."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.VerbEditorDefault">
 <summary>Key for resource getting something like "(Default)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AppSettingsReaderNoKey">
 <summary>Key for resource getting something like "The key '{0}' does not exist in the appSettings configuration section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AppSettingsReaderNoParser">
 <summary>Key for resource getting something like "Type '{0}' does not have a Parse method."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AppSettingsReaderCantParse">
 <summary>Key for resource getting something like "The value '{0}' was found in the appSettings configuration section for key '{1}', and this value is not a valid {2}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AppSettingsReaderEmptyString">
 <summary>Key for resource getting something like "(empty string)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPermissionState">
 <summary>Key for resource getting something like "Invalid permission state."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionNumberOfElements">
 <summary>Key for resource getting something like "The number of elements on the access path must be the same as the number of tag names."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionItemExists">
 <summary>Key for resource getting something like "The item provided already exists."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionItemDoesntExist">
 <summary>Key for resource getting something like "The requested item doesn't exist."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionBadParameterEnum">
 <summary>Key for resource getting something like "Parameter must be of type enum."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionInvalidLength">
 <summary>Key for resource getting something like "Length must be greater than {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PermissionTypeMismatch">
 <summary>Key for resource getting something like "Type mismatch."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_NotAPermissionElement">
 <summary>Key for resource getting something like "'securityElement' was not a permission element."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidXMLBadVersion">
 <summary>Key for resource getting something like "Invalid Xml - can only parse elements of version one."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidPermissionLevel">
 <summary>Key for resource getting something like "Invalid permission level."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.TargetNotWebBrowserPermissionLevel">
 <summary>Key for resource getting something like "Target not WebBrowserPermissionLevel."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WebBrowserBadXml">
 <summary>Key for resource getting something like "Bad Xml {0}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollNeedNonNegativeNum">
 <summary>Key for resource getting something like "Need a non negative number for capacity."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollDuplicateKey">
 <summary>Key for resource getting something like "Cannot add item since the item with the key already exists in the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollReferenceKeyNotFound">
 <summary>Key for resource getting something like "The key reference with respect to which the insertion operation was to be performed was not found."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollKeyNotFound">
 <summary>Key for resource getting something like "Cannot find the key {0} in the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollInvalidKey">
 <summary>Key for resource getting something like "Keys must be non-null non-empty Strings."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.KeyedCollCapacityOverflow">
 <summary>Key for resource getting something like "Capacity overflowed and went negative.  Check capacity of the collection."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_EnumEnded">
 <summary>Key for resource getting something like "The enumeration has already completed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.OrderedDictionary_ReadOnly">
 <summary>Key for resource getting something like "The OrderedDictionary is readonly and cannot be modified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.OrderedDictionary_SerializationMismatch">
 <summary>Key for resource getting something like "There was an error deserializing the OrderedDictionary.  The ArrayList does not contain DictionaryEntries."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_ExceptionOccurred">
 <summary>Key for resource getting something like "An exception occurred during the operation, making the result invalid.  Check InnerException for exception details."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_QueueingFailed">
 <summary>Key for resource getting something like "Queuing WaitCallback failed."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_OperationCancelled">
 <summary>Key for resource getting something like "Operation has been cancelled."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_OperationAlreadyCompleted">
 <summary>Key for resource getting something like "This operation has already had OperationCompleted called on it and further calls are illegal."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_NullDelegate">
 <summary>Key for resource getting something like "A non-null SendOrPostCallback must be supplied."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerAlreadyRunning">
 <summary>Key for resource getting something like "This BackgroundWorker is currently busy and cannot run multiple tasks concurrently."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerDoesntReportProgress">
 <summary>Key for resource getting something like "This BackgroundWorker states that it doesn't report progress. Modify WorkerReportsProgress to state that it does report progress."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerDoesntSupportCancellation">
 <summary>Key for resource getting something like "This BackgroundWorker states that it doesn't support cancellation. Modify WorkerSupportsCancellation to state that it does support cancellation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_ProgressChangedEventArgs_ProgressPercentage">
 <summary>Key for resource getting something like "Percentage progress made in operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_ProgressChangedEventArgs_UserState">
 <summary>Key for resource getting something like "User-supplied state to identify operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_AsyncEventArgs_Cancelled">
 <summary>Key for resource getting something like "True if operation was cancelled."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_AsyncEventArgs_Error">
 <summary>Key for resource getting something like "Exception that occurred during operation.  Null if no error."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Async_AsyncEventArgs_UserState">
 <summary>Key for resource getting something like "User-supplied state to identify operation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_CancellationPending">
 <summary>Key for resource getting something like "Has the user attempted to cancel the operation? To be accessed from DoWork event handler."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_DoWork">
 <summary>Key for resource getting something like "Event handler to be run on a different thread when the operation begins."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_IsBusy">
 <summary>Key for resource getting something like "Is the worker still currently working on a background operation?"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_ProgressChanged">
 <summary>Key for resource getting something like "Raised when the worker thread indicates that some progress has been made."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_RunWorkerCompleted">
 <summary>Key for resource getting something like "Raised when the worker has completed (either through success, failure, or cancellation)."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerReportsProgress">
 <summary>Key for resource getting something like "Whether the worker will report progress."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_WorkerSupportsCancellation">
 <summary>Key for resource getting something like "Whether the worker supports cancellation."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_DoWorkEventArgs_Argument">
 <summary>Key for resource getting something like "Argument passed into the worker handler from BackgroundWorker.RunWorkerAsync."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_DoWorkEventArgs_Result">
 <summary>Key for resource getting something like "Result from the worker function."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BackgroundWorker_Desc">
 <summary>Key for resource getting something like "Executes an operation on a separate thread."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceCreationEditorDefaultText">
 <summary>Key for resource getting something like "(New...)"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyTabAttributeBadPropertyTabScope">
 <summary>Key for resource getting something like "Scope must be PropertyTabScope.Document or PropertyTabScope.Component"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyTabAttributeTypeLoadException">
 <summary>Key for resource getting something like "Couldn't find type {0}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyTabAttributeArrayLengthMismatch">
 <summary>Key for resource getting something like "tabClasses must have the same number of items as tabScopes"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyTabAttributeParamsBothNull">
 <summary>Key for resource getting something like "An array of tab type names or tab types must be specified"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceDescriptorCannotBeStatic">
 <summary>Key for resource getting something like "Parameter cannot be static."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceDescriptorMustBeStatic">
 <summary>Key for resource getting something like "Parameter must be static."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceDescriptorMustBeReadable">
 <summary>Key for resource getting something like "Parameter must be readable."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InstanceDescriptorLengthMismatch">
 <summary>Key for resource getting something like "Length mismatch."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ToolboxItemAttributeFailedGetType">
 <summary>Key for resource getting something like "Failed to create ToolboxItem of type: {0}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyDescriptorCollectionBadValue">
 <summary>Key for resource getting something like "Parameter must be of type PropertyDescriptor."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PropertyDescriptorCollectionBadKey">
 <summary>Key for resource getting something like "Parameter must be of type int or string."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.AspNetHostingPermissionBadXml">
 <summary>Key for resource getting something like "Bad Xml {0}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CorruptedGZipHeader">
 <summary>Key for resource getting something like "The magic number in GZip header is not correct. Make sure you are passing in a GZip stream."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownCompressionMode">
 <summary>Key for resource getting something like "The compression mode specified in GZip header is unknown."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownState">
 <summary>Key for resource getting something like "Decoder is in some unknown state. This might be caused by corrupted data."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidHuffmanData">
 <summary>Key for resource getting something like "Failed to construct a huffman tree using the length array. The stream might be corrupted."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidCRC">
 <summary>Key for resource getting something like "The CRC in GZip footer does not match the CRC calculated from the decompressed data."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidStreamSize">
 <summary>Key for resource getting something like "The stream size in GZip footer does not match the real stream size."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownBlockType">
 <summary>Key for resource getting something like "Unknown block type. Stream might be corrupted."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidBlockLength">
 <summary>Key for resource getting something like "Block length does not match with its complement."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.GenericInvalidData">
 <summary>Key for resource getting something like "Found invalid data while decoding."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotReadFromDeflateStream">
 <summary>Key for resource getting something like "Reading from the compression stream is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.CannotWriteToDeflateStream">
 <summary>Key for resource getting something like "Writing to the compression stream is not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotReadableStream">
 <summary>Key for resource getting something like "The base stream is not readable."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NotWriteableStream">
 <summary>Key for resource getting something like "The base stream is not writeable."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidArgumentOffsetCount">
 <summary>Key for resource getting something like "Offset plus count is larger than the length of target array."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidBeginCall">
 <summary>Key for resource getting something like "Only one asynchronous reader is allowed time at one time."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidEndCall">
 <summary>Key for resource getting something like "EndRead is only callable when there is one pending asynchronous reader ."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.StreamSizeOverflow">
 <summary>Key for resource getting something like "The gzip stream can't contain more than 4GB data."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.InvalidOperation_HCCountOverflow">
 <summary>Key for resource getting something like "Handle collector count overflows or underflows."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_InvalidThreshold">
 <summary>Key for resource getting something like "maximumThreshold cannot be less than initialThreshold."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_SemaphoreInitialMaximum">
 <summary>Key for resource getting something like "The initial count for the semaphore must be greater than or equal to zero and less than the maximum count."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Argument_WaitHandleNameTooLong">
 <summary>Key for resource getting something like "The name can be no more than 260 characters in length."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.Threading_SemaphoreFullException">
 <summary>Key for resource getting something like "Adding the given count to the semaphore would cause it to exceed its maximum count."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.WaitHandleCannotBeOpenedException_InvalidHandle">
 <summary>Key for resource getting something like "A WaitHandle with system-wide name '{0}' cannot be created. A WaitHandle of a different type might have the same name."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentNotAPermissionElement">
 <summary>Key for resource getting something like "Argument was not a permission Element."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ArgumentWrongType">
 <summary>Key for resource getting something like "Argument should be of type {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BadXmlVersion">
 <summary>Key for resource getting something like "Xml version was wrong."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BinarySerializationNotSupported">
 <summary>Key for resource getting something like "Binary serialization is current not supported by the LocalFileSettingsProvider."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.BothScopeAttributes">
 <summary>Key for resource getting something like "The setting {0} has both an ApplicationScopedSettingAttribute and a UserScopedSettingAttribute."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.NoScopeAttributes">
 <summary>Key for resource getting something like "The setting {0} does not have either an ApplicationScopedSettingAttribute or UserScopedSettingAttribute."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.PositionOutOfRange">
 <summary>Key for resource getting something like "Position cannot be less than zero."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProviderInstantiationFailed">
 <summary>Key for resource getting something like "Failed to instantiate provider: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.ProviderTypeLoadFailed">
 <summary>Key for resource getting something like "Failed to load provider type: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SaveAppScopedNotSupported">
 <summary>Key for resource getting something like "Error saving {0} - The LocalFileSettingsProvider does not support saving changes to application-scoped settings."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsResetFailed">
 <summary>Key for resource getting something like "Failed to reset settings: unable to access the configuration section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsSaveFailed">
 <summary>Key for resource getting something like "Failed to save settings: {0}"</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SettingsSaveFailedNoSection">
 <summary>Key for resource getting something like "Failed to save settings: unable to access the configuration section."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.StringDeserializationFailed">
 <summary>Key for resource getting something like "Could not use String deserialization for setting: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.StringSerializationFailed">
 <summary>Key for resource getting something like "Could not use String serialization for setting: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownSerializationFormat">
 <summary>Key for resource getting something like "Unknown serialization format specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownSeekOrigin">
 <summary>Key for resource getting something like "Unknown SeekOrigin specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UnknownUserLevel">
 <summary>Key for resource getting something like "Unknown ConfigurationUserLevel specified."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.UserSettingsNotSupported">
 <summary>Key for resource getting something like "The current configuration system does not support user-scoped settings."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.XmlDeserializationFailed">
 <summary>Key for resource getting something like "Could not use Xml deserialization for setting: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.XmlSerializationFailed">
 <summary>Key for resource getting something like "Could not use Xml serialization for setting: {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MemberRelationshipService_RelationshipNotSupported">
 <summary>Key for resource getting something like "Relationships between {0}.{1} and {2}.{3} are not supported."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaskedTextProviderPasswordAndPromptCharError">
 <summary>Key for resource getting something like "The PasswordChar and PromptChar values cannot be the same."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaskedTextProviderInvalidCharError">
 <summary>Key for resource getting something like "The specified character value is not allowed for this property."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaskedTextProviderMaskNullOrEmpty">
 <summary>Key for resource getting something like "The Mask value cannot be null or empty."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.MaskedTextProviderMaskInvalidChar">
 <summary>Key for resource getting something like "The specified mask contains invalid characters."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.StandardOleMarshalObjectGetMarshalerFailed">
 <summary>Key for resource getting something like "Failed to get marshaler for IID {0}."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIBadSoundLocation">
 <summary>Key for resource getting something like "Could not determine a universal resource identifier for the sound location."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIFileDoesNotExist">
 <summary>Key for resource getting something like "Please be sure a sound file exists at the specified location."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIFormatNotSupported">
 <summary>Key for resource getting something like "Sound API only supports playing PCM wave files."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIInvalidWaveFile">
 <summary>Key for resource getting something like "The file located at {0} is not a valid wave file."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIInvalidWaveHeader">
 <summary>Key for resource getting something like "The wave header is corrupt."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPILoadTimedOut">
 <summary>Key for resource getting something like "The request to load the wave file in memory timed out."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPILoadTimeout">
 <summary>Key for resource getting something like "The LoadTimeout property of a SoundPlayer cannot be negative."</summary>
</member>
<member name="F:Tools.ResourcesT.SystemResources.KnownValues.SoundAPIReadError">
 <summary>Key for resource getting something like "There was an error reading the file located at {0}. Please make sure that a valid wave file exists at the specified location."</summary>
</member>
<member name="T:Tools.ResourcesT.SRDescriptionAttribute">
 <summary>Exposes functionality of internall (friend) .NET class System.SRDescriptionAttribute - applies <see cref="T:System.ComponentModel.DescriptionAttribute"/> which's value is loaded from internal .NET Framework resource</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.ResourcesT.SRDescriptionAttribute._ResourceKey">
 <summary>Contains value of the <see cref="P:Tools.ResourcesT.SRDescriptionAttribute.ResourceKey"/> property</summary>
</member>
<member name="M:Tools.ResourcesT.SRDescriptionAttribute.#ctor(Tools.ResourcesT.SystemResources.KnownValues)">
 <summary>CTor</summary>
 <param name="ResourceKey">Known resource key to get value from</param>
 <remarks>This CTor is only hint for intellisense. However it is fully functional you will propebly never use it.</remarks>
</member>
<member name="M:Tools.ResourcesT.SRDescriptionAttribute.#ctor(System.String)">
 <summary>CTor</summary>
 <param name="ResourceKey">Resource key to get value from</param>
</member>
<member name="P:Tools.ResourcesT.SRDescriptionAttribute.Description">
 <summary>Gets the description stored in this attribute.</summary>
 <returns>The description stored in system resource key <see cref="P:Tools.ResourcesT.SRDescriptionAttribute.ResourceKey"/></returns>
 <exception cref="T:System.Reflection.TargetInvocationException">Unknown unexpected error when obtaining resource value</exception>
</member>
<member name="P:Tools.ResourcesT.SRDescriptionAttribute.ResourceKey">
 <summary>Key of system resource that contains value of this attribute</summary>
</member>
<member name="T:Tools.ResourcesT.SRCategoryAttribute">
 <summary>Exposes functionality of internall (friend) .NET class System.SRCategoryAttribute - applies <see cref="T:System.ComponentModel.DescriptionAttribute"/> which's value is loaded from internal .NET Framework resource</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ResourcesT.SRCategoryAttribute.#ctor(Tools.ResourcesT.SystemResources.KnownValues)">
 <summary>CTor</summary>
 <param name="ResourceKey">Known resource key to get value from</param>
 <remarks>This CTor is only hint for intellisense. However it is fully functional you will propebly never use it.</remarks>
</member>
<member name="M:Tools.ResourcesT.SRCategoryAttribute.#ctor(System.String)">
 <summary>CTor</summary>
 <param name="ResourceKey">Resource key to get value from</param>
</member>
<member name="T:Tools.ResourcesT.Components">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Accessibility_cat">
<summary>
Looks up a localized string similar to 'Accessibility'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.AccessKey_d">
<summary>
Looks up a localized string similar to 'Access character for the button. Should be one of characters from button text.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Action_cat">
<summary>
Looks up a localized string similar to 'Action'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.AllowClose_d">
<summary>
Looks up a localized string similar to 'Value indicationg if dialog can be closed without clicking on button. Thi is typically by closing the window that represents the dialog by the &quot;X&quot; button.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Appearance_cat">
<summary>
Looks up a localized string similar to 'Appearance'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Asterisk">
<summary>
Looks up a localized string similar to 'Asterisk'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Asynchronous_cat">
<summary>
Looks up a localized string similar to 'Asynchronous'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Beep">
<summary>
Looks up a localized string similar to 'Beep'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Behavior_cat">
<summary>
Looks up a localized string similar to 'Behavior'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Browse">
<summary>
Looks up a localized string similar to 'Browse...'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Buttons_d">
<summary>
Looks up a localized string similar to 'Defines buttons displayed on message box'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.ChangedSync_d">
<summary>
Looks up a localized string similar to 'Raised when file is changed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.CheckBoxes_d">
<summary>
Looks up a localized string similar to 'Check boxes displayed for message box. Can be used for example for &apos;Do not show this message in future&apos; option.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Checked_d">
<summary>
Looks up a localized string similar to 'Indicates of option is selected'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.CheckedChanged_d">
<summary>
Looks up a localized string similar to 'Raised when value of the Checked property changes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Clear">
<summary>
Looks up a localized string similar to 'Clear'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.ClickPreview_d">
<summary>
Looks up a localized string similar to 'Raised when user clicks the button. Can be canceled.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Closed_d">
<summary>
Looks up a localized string similar to 'Raised after dialog is closed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.CloseResponse_d">
<summary>
Looks up a localized string similar to 'Value returned by the Show function / DialogResult property when user closes the dialog by closing dialog window or by pressing escape'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Colors_cat">
<summary>
Looks up a localized string similar to 'Colors'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Column_d">
<summary>
Looks up a localized string similar to 'Gets or sets sort column index. Set this property to value out of range of columns (e.g. -1) to avoid sorting.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.ComboBox_d">
<summary>
Looks up a localized string similar to 'Combo box displayed on dialog'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Config_cat">
<summary>
Looks up a localized string similar to 'Config'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.CountDown_d">
<summary>
Looks up a localized string similar to 'Raised when count-down time ticks - once a second.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.CreatedSync_d">
<summary>
Looks up a localized string similar to 'Raised when file is created'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Data_cat">
<summary>
Looks up a localized string similar to 'Data'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.DDE_cat">
<summary>
Looks up a localized string similar to 'DDE'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Default_cat">
<summary>
Looks up a localized string similar to 'Default'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.DefaultButton_d">
<summary>
Looks up a localized string similar to 'indicates 0-based index of button that has focus when message box is shown and is default button for message box (usually reported when user presses enter).'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.DeletedSync_d">
<summary>
Looks up a localized string similar to 'Raised when file is deleted'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Descending_d">
<summary>
Looks up a localized string similar to 'Gets or sets if sorting order is reversed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Design_cat">
<summary>
Looks up a localized string similar to 'Design'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Display_cat">
<summary>
Looks up a localized string similar to 'Display'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.DisplayMember_d">
<summary>
Looks up a localized string similar to 'Indicates member (property, field) used to obtain text to be shown to user for each item.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.DragDrop_cat">
<summary>
Looks up a localized string similar to 'DragDrop'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Editable_d">
<summary>
Looks up a localized string similar to 'Indicates if user can change text of combo box (true) or must select only form list of predefined values (false).'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Enabled_d">
<summary>
Looks up a localized string similar to 'Indicates if control is enabled, so user can interact with it.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Exclamation">
<summary>
Looks up a localized string similar to 'Exclamation'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Focus_cat">
<summary>
Looks up a localized string similar to 'Focus'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.FolderBrowsing_cat">
<summary>
Looks up a localized string similar to 'Folder Browsing'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Font_cat">
<summary>
Looks up a localized string similar to 'Font'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Format_cat">
<summary>
Looks up a localized string similar to 'Format'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Hand">
<summary>
Looks up a localized string similar to 'Hand'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Icon_d">
<summary>
Looks up a localized string similar to 'Icon shown in left to corner (lrt) of dialog'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.ImagesFilter">
<summary>
Looks up a localized string similar to 'Images (bmp,jpeg,png,gif,tiff)|*.bmp;*.jpeg;*.jpg;*.gif;*.tif;*.tiff;*.png'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Items_cat">
<summary>
Looks up a localized string similar to 'Items'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Items_d">
<summary>
Looks up a localized string similar to 'Items shown to user in drop down. Item can be any Object.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Key_cat">
<summary>
Looks up a localized string similar to 'Key'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Layout_cat">
<summary>
Looks up a localized string similar to 'Layout'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.List_cat">
<summary>
Looks up a localized string similar to 'List'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.LoadFromFile">
<summary>
Looks up a localized string similar to 'Load from file...'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.MessageBoxButton_Text_d">
<summary>
Looks up a localized string similar to 'Text displayed on the control'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.MessageBoxCounDownTimeFormat">
<summary>
Looks up a localized string similar to '{0} ({1:s})'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Misc_cat">
<summary>
Looks up a localized string similar to 'Misc'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Mouse_cat">
<summary>
Looks up a localized string similar to 'Mouse'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.New___">
<summary>
Looks up a localized string similar to 'New ...'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.OnlySOIAndEOIMarkersCanHaveLenghtSetToZeroLength1IsNotAllowed">
<summary>
Looks up a localized string similar to 'Only SOI and EOI markers can have lenght set to zero, length 1 is not allowed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Options_d">
<summary>
Looks up a localized string similar to 'Addtional options controlling how dialog is displayed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Play">
<summary>
Looks up a localized string similar to 'Play'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.PlayOnShow_d">
<summary>
Looks up a localized string similar to 'Sound to be played when message box is shown'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Position_cat">
<summary>
Looks up a localized string similar to 'Position'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Private_cat">
<summary>
Looks up a localized string similar to 'Private'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Prompt_d">
<summary>
Looks up a localized string similar to 'Text of prompt displayed to the user.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.PropertyChanged_cat">
<summary>
Looks up a localized string similar to 'Property Changed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Question">
<summary>
Looks up a localized string similar to 'Question'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Radios_d">
<summary>
Looks up a localized string similar to 'Radio buttons (options) displayed on messagebox'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.RenamedSync_d">
<summary>
Looks up a localized string similar to 'Raised when file is renamed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Result_d">
<summary>
Looks up a localized string similar to 'Result of message box returned when this button is clicked.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.SaveDataAs">
<summary>
Looks up a localized string similar to 'Save data as...'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Scale_cat">
<summary>
Looks up a localized string similar to 'Scale'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.SelectedIndex_d">
<summary>
Looks up a localized string similar to 'Indicates 0-based index of selected item in combo box.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.SelectedIndexChanged_d">
<summary>
Looks up a localized string similar to 'Raised when value of the SelectedIndex property changes.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.SelectedItemChanged_d">
<summary>
Looks up a localized string similar to 'Raised when value of the SelectedItem property changes'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.SelectWavFile">
<summary>
Looks up a localized string similar to 'Select wav file'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Shown_d">
<summary>
Looks up a localized string similar to 'Raised after dialog is shown'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.SortMode_d">
<summary>
Looks up a localized string similar to 'Gets or sets the way of sorting'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.State_d">
<summary>
Looks up a localized string similar to 'Current check state of check box'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.StateChanged_d">
<summary>
Looks up a localized string similar to 'Raised ehrn value of the State property changed'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Text_cat">
<summary>
Looks up a localized string similar to 'Text'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.ThreeState_d">
<summary>
Looks up a localized string similar to 'Indicateis if checkbox has 3rd intermediate state'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.TimeButton_d">
<summary>
Looks up a localized string similar to 'Indicates 0-based index of button which displays the count-down timer. It aslo defines result of dialog returned when time elapses. -1 chose button automatically acording to CloseResponse, &lt;-1 displays count-down in title, &gt; number of buttons hides count-down indicator.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Timer_d">
<summary>
Looks up a localized string similar to 'Inidcates how long the message box will be show to user before being closed automatically. If zero or less, no count-down takes effect.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.Title_d">
<summary>
Looks up a localized string similar to 'Title shown in dialog header'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.ToolTip_d">
<summary>
Looks up a localized string similar to 'Tool tip text (help) for control'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.WavFilter">
<summary>
Looks up a localized string similar to 'wav files (*.wav)|*.wav'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.WindowStyle_cat">
<summary>
Looks up a localized string similar to 'Window Style'.
</summary>
</member>
<member name="P:Tools.ResourcesT.Components.ZerofillWidth_d">
<summary>
Looks up a localized string similar to 'Defines fill width applicable when SortMode is ZeroFill. Items will be filled with zeros (&quot;0&quot;) to specified width and then sorted as strings.'.
</summary>
</member>
<member name="M:Tools.ResourcesT.Components.Accessibility_catFormat">
<summary>
The stub formatting method returning the Accessibility_cat property value.
</summary>
<returns>The Accessibility_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.AccessKey_dFormat">
<summary>
The stub formatting method returning the AccessKey_d property value.
</summary>
<returns>The AccessKey_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Action_catFormat">
<summary>
The stub formatting method returning the Action_cat property value.
</summary>
<returns>The Action_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.AllowClose_dFormat">
<summary>
The stub formatting method returning the AllowClose_d property value.
</summary>
<returns>The AllowClose_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Appearance_catFormat">
<summary>
The stub formatting method returning the Appearance_cat property value.
</summary>
<returns>The Appearance_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.AsteriskFormat">
<summary>
The stub formatting method returning the Asterisk property value.
</summary>
<returns>The Asterisk property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Asynchronous_catFormat">
<summary>
The stub formatting method returning the Asynchronous_cat property value.
</summary>
<returns>The Asynchronous_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.BeepFormat">
<summary>
The stub formatting method returning the Beep property value.
</summary>
<returns>The Beep property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Behavior_catFormat">
<summary>
The stub formatting method returning the Behavior_cat property value.
</summary>
<returns>The Behavior_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.BrowseFormat">
<summary>
The stub formatting method returning the Browse property value.
</summary>
<returns>The Browse property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Buttons_dFormat">
<summary>
The stub formatting method returning the Buttons_d property value.
</summary>
<returns>The Buttons_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.ChangedSync_dFormat">
<summary>
The stub formatting method returning the ChangedSync_d property value.
</summary>
<returns>The ChangedSync_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.CheckBoxes_dFormat">
<summary>
The stub formatting method returning the CheckBoxes_d property value.
</summary>
<returns>The CheckBoxes_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Checked_dFormat">
<summary>
The stub formatting method returning the Checked_d property value.
</summary>
<returns>The Checked_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.CheckedChanged_dFormat">
<summary>
The stub formatting method returning the CheckedChanged_d property value.
</summary>
<returns>The CheckedChanged_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.ClearFormat">
<summary>
The stub formatting method returning the Clear property value.
</summary>
<returns>The Clear property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.ClickPreview_dFormat">
<summary>
The stub formatting method returning the ClickPreview_d property value.
</summary>
<returns>The ClickPreview_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Closed_dFormat">
<summary>
The stub formatting method returning the Closed_d property value.
</summary>
<returns>The Closed_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.CloseResponse_dFormat">
<summary>
The stub formatting method returning the CloseResponse_d property value.
</summary>
<returns>The CloseResponse_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Colors_catFormat">
<summary>
The stub formatting method returning the Colors_cat property value.
</summary>
<returns>The Colors_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Column_dFormat">
<summary>
The stub formatting method returning the Column_d property value.
</summary>
<returns>The Column_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.ComboBox_dFormat">
<summary>
The stub formatting method returning the ComboBox_d property value.
</summary>
<returns>The ComboBox_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Config_catFormat">
<summary>
The stub formatting method returning the Config_cat property value.
</summary>
<returns>The Config_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.CountDown_dFormat">
<summary>
The stub formatting method returning the CountDown_d property value.
</summary>
<returns>The CountDown_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.CreatedSync_dFormat">
<summary>
The stub formatting method returning the CreatedSync_d property value.
</summary>
<returns>The CreatedSync_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Data_catFormat">
<summary>
The stub formatting method returning the Data_cat property value.
</summary>
<returns>The Data_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.DDE_catFormat">
<summary>
The stub formatting method returning the DDE_cat property value.
</summary>
<returns>The DDE_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Default_catFormat">
<summary>
The stub formatting method returning the Default_cat property value.
</summary>
<returns>The Default_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.DefaultButton_dFormat">
<summary>
The stub formatting method returning the DefaultButton_d property value.
</summary>
<returns>The DefaultButton_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.DeletedSync_dFormat">
<summary>
The stub formatting method returning the DeletedSync_d property value.
</summary>
<returns>The DeletedSync_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Descending_dFormat">
<summary>
The stub formatting method returning the Descending_d property value.
</summary>
<returns>The Descending_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Design_catFormat">
<summary>
The stub formatting method returning the Design_cat property value.
</summary>
<returns>The Design_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Display_catFormat">
<summary>
The stub formatting method returning the Display_cat property value.
</summary>
<returns>The Display_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.DisplayMember_dFormat">
<summary>
The stub formatting method returning the DisplayMember_d property value.
</summary>
<returns>The DisplayMember_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.DragDrop_catFormat">
<summary>
The stub formatting method returning the DragDrop_cat property value.
</summary>
<returns>The DragDrop_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Editable_dFormat">
<summary>
The stub formatting method returning the Editable_d property value.
</summary>
<returns>The Editable_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Enabled_dFormat">
<summary>
The stub formatting method returning the Enabled_d property value.
</summary>
<returns>The Enabled_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.ExclamationFormat">
<summary>
The stub formatting method returning the Exclamation property value.
</summary>
<returns>The Exclamation property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Focus_catFormat">
<summary>
The stub formatting method returning the Focus_cat property value.
</summary>
<returns>The Focus_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.FolderBrowsing_catFormat">
<summary>
The stub formatting method returning the FolderBrowsing_cat property value.
</summary>
<returns>The FolderBrowsing_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Font_catFormat">
<summary>
The stub formatting method returning the Font_cat property value.
</summary>
<returns>The Font_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Format_catFormat">
<summary>
The stub formatting method returning the Format_cat property value.
</summary>
<returns>The Format_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.HandFormat">
<summary>
The stub formatting method returning the Hand property value.
</summary>
<returns>The Hand property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Icon_dFormat">
<summary>
The stub formatting method returning the Icon_d property value.
</summary>
<returns>The Icon_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.ImagesFilterFormat">
<summary>
The stub formatting method returning the ImagesFilter property value.
</summary>
<returns>The ImagesFilter property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Items_catFormat">
<summary>
The stub formatting method returning the Items_cat property value.
</summary>
<returns>The Items_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Items_dFormat">
<summary>
The stub formatting method returning the Items_d property value.
</summary>
<returns>The Items_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Key_catFormat">
<summary>
The stub formatting method returning the Key_cat property value.
</summary>
<returns>The Key_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Layout_catFormat">
<summary>
The stub formatting method returning the Layout_cat property value.
</summary>
<returns>The Layout_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.List_catFormat">
<summary>
The stub formatting method returning the List_cat property value.
</summary>
<returns>The List_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.LoadFromFileFormat">
<summary>
The stub formatting method returning the LoadFromFile property value.
</summary>
<returns>The LoadFromFile property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.MessageBoxButton_Text_dFormat">
<summary>
The stub formatting method returning the MessageBoxButton_Text_d property value.
</summary>
<returns>The MessageBoxButton_Text_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.MessageBoxCounDownTimeFormatFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} ({1:s})'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Misc_catFormat">
<summary>
The stub formatting method returning the Misc_cat property value.
</summary>
<returns>The Misc_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Mouse_catFormat">
<summary>
The stub formatting method returning the Mouse_cat property value.
</summary>
<returns>The Mouse_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.New___Format">
<summary>
The stub formatting method returning the New___ property value.
</summary>
<returns>The New___ property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.OnlySOIAndEOIMarkersCanHaveLenghtSetToZeroLength1IsNotAllowedFormat">
<summary>
The stub formatting method returning the OnlySOIAndEOIMarkersCanHaveLenghtSetToZeroLength1IsNotAllowed property value.
</summary>
<returns>The OnlySOIAndEOIMarkersCanHaveLenghtSetToZeroLength1IsNotAllowed property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Options_dFormat">
<summary>
The stub formatting method returning the Options_d property value.
</summary>
<returns>The Options_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.PlayFormat">
<summary>
The stub formatting method returning the Play property value.
</summary>
<returns>The Play property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.PlayOnShow_dFormat">
<summary>
The stub formatting method returning the PlayOnShow_d property value.
</summary>
<returns>The PlayOnShow_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Position_catFormat">
<summary>
The stub formatting method returning the Position_cat property value.
</summary>
<returns>The Position_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Private_catFormat">
<summary>
The stub formatting method returning the Private_cat property value.
</summary>
<returns>The Private_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Prompt_dFormat">
<summary>
The stub formatting method returning the Prompt_d property value.
</summary>
<returns>The Prompt_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.PropertyChanged_catFormat">
<summary>
The stub formatting method returning the PropertyChanged_cat property value.
</summary>
<returns>The PropertyChanged_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.QuestionFormat">
<summary>
The stub formatting method returning the Question property value.
</summary>
<returns>The Question property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Radios_dFormat">
<summary>
The stub formatting method returning the Radios_d property value.
</summary>
<returns>The Radios_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.RenamedSync_dFormat">
<summary>
The stub formatting method returning the RenamedSync_d property value.
</summary>
<returns>The RenamedSync_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Result_dFormat">
<summary>
The stub formatting method returning the Result_d property value.
</summary>
<returns>The Result_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.SaveDataAsFormat">
<summary>
The stub formatting method returning the SaveDataAs property value.
</summary>
<returns>The SaveDataAs property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Scale_catFormat">
<summary>
The stub formatting method returning the Scale_cat property value.
</summary>
<returns>The Scale_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.SelectedIndex_dFormat">
<summary>
The stub formatting method returning the SelectedIndex_d property value.
</summary>
<returns>The SelectedIndex_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.SelectedIndexChanged_dFormat">
<summary>
The stub formatting method returning the SelectedIndexChanged_d property value.
</summary>
<returns>The SelectedIndexChanged_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.SelectedItemChanged_dFormat">
<summary>
The stub formatting method returning the SelectedItemChanged_d property value.
</summary>
<returns>The SelectedItemChanged_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.SelectWavFileFormat">
<summary>
The stub formatting method returning the SelectWavFile property value.
</summary>
<returns>The SelectWavFile property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Shown_dFormat">
<summary>
The stub formatting method returning the Shown_d property value.
</summary>
<returns>The Shown_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.SortMode_dFormat">
<summary>
The stub formatting method returning the SortMode_d property value.
</summary>
<returns>The SortMode_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.State_dFormat">
<summary>
The stub formatting method returning the State_d property value.
</summary>
<returns>The State_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.StateChanged_dFormat">
<summary>
The stub formatting method returning the StateChanged_d property value.
</summary>
<returns>The StateChanged_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Text_catFormat">
<summary>
The stub formatting method returning the Text_cat property value.
</summary>
<returns>The Text_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.ThreeState_dFormat">
<summary>
The stub formatting method returning the ThreeState_d property value.
</summary>
<returns>The ThreeState_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.TimeButton_dFormat">
<summary>
The stub formatting method returning the TimeButton_d property value.
</summary>
<returns>The TimeButton_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Timer_dFormat">
<summary>
The stub formatting method returning the Timer_d property value.
</summary>
<returns>The Timer_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.Title_dFormat">
<summary>
The stub formatting method returning the Title_d property value.
</summary>
<returns>The Title_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.ToolTip_dFormat">
<summary>
The stub formatting method returning the ToolTip_d property value.
</summary>
<returns>The ToolTip_d property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.WavFilterFormat">
<summary>
The stub formatting method returning the WavFilter property value.
</summary>
<returns>The WavFilter property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.WindowStyle_catFormat">
<summary>
The stub formatting method returning the WindowStyle_cat property value.
</summary>
<returns>The WindowStyle_cat property value.</returns>
</member>
<member name="M:Tools.ResourcesT.Components.ZerofillWidth_dFormat">
<summary>
The stub formatting method returning the ZerofillWidth_d property value.
</summary>
<returns>The ZerofillWidth_d property value.</returns>
</member>
<member name="T:Tools.ResourcesT.CLSComplianceCheckerResources">
<summary>
A strongly-typed resource class, for looking up localized strings, formatting them, etc.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.InternalSyncObject">
<summary>
Thread safe lock object used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.ResourceManager">
<summary>
Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.Culture">
<summary>
Overrides the current thread's CurrentUICulture property for all
resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.AddName">
<summary>
Looks up a localized string similar to 'Event method add shall be named add_&lt;event name&gt;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.AddParameters">
<summary>
Looks up a localized string similar to 'Event method add shall take exactly one parameters of type of type of event delegate.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.AddRemoveBothOrNo">
<summary>
Looks up a localized string similar to 'Event methods add remove shall be both present or both absent.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.AddSpecialName">
<summary>
Looks up a localized string similar to 'Event method add shall be marked specialname.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.Array0">
<summary>
Looks up a localized string similar to 'Array must have lower bound 0 in each dimension.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.AttributeNamedParamType">
<summary>
Looks up a localized string similar to 'Custom attribute {0} named parameter value for {1} is encoded using CLS-unsupported type {2}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.AttributeParamType">
<summary>
Looks up a localized string similar to 'Custom attribute {0} constructor value is encoded using CLS-unsupported type {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.AttributeUsage_AllowMultiple">
<summary>
Looks up a localized string similar to 'AttributeUsage.AllowMultiple violated, attribute {0} is used more than once.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.AttributeUsage_ValidOn">
<summary>
Looks up a localized string similar to 'AttributeUsage.ValidOn violated, attribute {0} cannot be applied to item of type {1}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.CLSCompliantInCLSIncompliant">
<summary>
Looks up a localized string similar to 'Member of CLS-incompliant type is marked as CLS-compliant'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.CLSInclompliantAttribute">
<summary>
Looks up a localized string similar to 'CLS-inclompliant attribute {0} used.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.ConstantValue">
<summary>
Looks up a localized string similar to 'Constant value specified in metadata is not of same type as is type of the field.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.CustomAttributeDataInaccessible">
<summary>
Looks up a localized string similar to 'Cannot check custom attribute data on {0}, becasue it does not provide access to custom attribute data.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_AttributeUsageAttribute">
<summary>
Looks up a localized string similar to 'Cannot get AttributeUsageAttribute'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_CustomAttributes">
<summary>
Looks up a localized string similar to 'Cannot get custom attributes.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_FieldsInModule">
<summary>
Looks up a localized string similar to 'Error while getting fields in module.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_GenericParametersInType">
<summary>
Looks up a localized string similar to 'Cannot get generic parameters of type {0}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_IndexesInProperty">
<summary>
Looks up a localized string similar to 'Cannot get property index parameters.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_MembersInType">
<summary>
Looks up a localized string similar to 'Error while geting members of type.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_MethodsInModule">
<summary>
Looks up a localized string similar to 'Error while getting methods in module.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_ModulesInAssembly">
<summary>
Looks up a localized string similar to 'Error while getting modules in assembly'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_ParametersInSetter">
<summary>
Looks up a localized string similar to 'Cannot get parameters of property setter.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_ParamsInMethod">
<summary>
Looks up a localized string similar to 'Error while getting parameters of method'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_TypeInAssembly">
<summary>
Looks up a localized string similar to 'Error while getting types in assembly. Some types weren&apos;t loaded.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_TypesInModule">
<summary>
Looks up a localized string similar to 'Error while getting types in module.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.e_TypesInModule_some">
<summary>
Looks up a localized string similar to 'Error while getting types in module. Some types weren&apos;t loaded.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.EnumerationFieldKind">
<summary>
Looks up a localized string similar to 'Enum fields must be either static literals or instance field named &quot;value__&quot; marked RTSpecialName.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.EnumerationLiteralStatic">
<summary>
Looks up a localized string similar to 'Enum member literals must be static.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.EnumerationOnlyFields">
<summary>
Looks up a localized string similar to 'Enumeration can contain only fields.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.EnumerationValue__Type">
<summary>
Looks up a localized string similar to 'Type of enumeration field value__ must be ebumeration underlying type.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.EnumType">
<summary>
Looks up a localized string similar to 'Enum underlying type is not built-in CLS-comliant integral type'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.EventAccessorsVisibility">
<summary>
Looks up a localized string similar to 'Event accessors shall have same accessibility.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.EventType">
<summary>
Looks up a localized string similar to 'Event delegate type is not CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.EventTypeDelegate">
<summary>
Looks up a localized string similar to 'Event type shall be delegate.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.ExposeFriend">
<summary>
Looks up a localized string similar to '{0} exposes type {1}, which is not accessible from outside of assembly.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.ExposeNested">
<summary>
Looks up a localized string similar to '{0} exposes type {1}, which is not accessible from outisde of type {2}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.FieldType">
<summary>
Looks up a localized string similar to 'Field type is not CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.GenericParamType">
<summary>
Looks up a localized string similar to 'Type {0} passed to generic type is not CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.GetterName">
<summary>
Looks up a localized string similar to 'Property getter name shall be get_&lt;property name&gt; (expected &quot;{0}&quot;, actual &quot;{1}&quot;).'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.GetterParametersCount">
<summary>
Looks up a localized string similar to 'Number of parameters of property and of getter shall be same.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.GetterSetterStatic">
<summary>
Looks up a localized string similar to 'Property getter and setter must both be static or both be instance.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.GetterSetterVirtual">
<summary>
Looks up a localized string similar to 'Property getter and setter must both be virtual or both be non-virtual.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.GetterSpecialName">
<summary>
Looks up a localized string similar to 'Property getter shall be marked specialname.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.GetterType">
<summary>
Looks up a localized string similar to 'Property getter return type shall be same as type of property.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.GlobalFields">
<summary>
Looks up a localized string similar to 'Global fields are not CLS-compliant'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.GlobalMethods">
<summary>
Looks up a localized string similar to 'Global methods are not CLS-compliant'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.IncompliantType">
<summary>
Looks up a localized string similar to 'Type {0} is not CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.IndexType">
<summary>
Looks up a localized string similar to 'Property index parameter type {0} is not CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.InheritCLSCompliant">
<summary>
Looks up a localized string similar to 'CLS-compliant type shall inherit only CLS-compliant type.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.InterfaceCLSIncompliantMember">
<summary>
Looks up a localized string similar to 'Inerface shall not require CLS-incompliant members to be implemented in order to implement it.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.InterfaceField">
<summary>
Looks up a localized string similar to 'Interface shall not declare fields.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.InterfaceStaticMethod">
<summary>
Looks up a localized string similar to 'Interface shall not declare static methods.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.MissingValue__">
<summary>
Looks up a localized string similar to 'Enumeration is missing the value__ field.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.Modreqs">
<summary>
Looks up a localized string similar to 'CLS does not allow required modifiers (modreqs).'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.Name">
<summary>
Looks up a localized string similar to 'Name &quot;{0}&quot; is not CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NameC">
<summary>
Looks up a localized string similar to 'Name &quot;{0}&quot; is not stored in Unicode Normalization Form C.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NameOfGenericType">
<summary>
Looks up a localized string similar to 'Name of generic type shall encode number of type parameters.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NameOfNestedGenericType">
<summary>
Looks up a localized string similar to 'Name of nested type shall encode number of type parameters newly introdued by nested type.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericConstraint">
<summary>
Looks up a localized string similar to 'When type parameter specifies a constraint, corresponding parameter of nested type shall specify it as well. Parameter {0} of type {1} is missing constraint to type {2}.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericConstraint_Class">
<summary>
Looks up a localized string similar to 'When type parameter specifies reference type constraint, corresponding type parameters of nested type must specify it as well.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericConstraint_New">
<summary>
Looks up a localized string similar to 'When type parameter specifies default constructor constraint, corresponding type parameters of nested type must specify it as well.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericConstraint_Struct">
<summary>
Looks up a localized string similar to 'When type parameter specifies value type (not nullable) constraint, corresponding type parameters of nested type must specify it as well.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericTypeParametersCount">
<summary>
Looks up a localized string similar to 'Type nested in generic type shall have at least as many type parameters as declaring type.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NoAttributeAttribute">
<summary>
Looks up a localized string similar to 'Attribute type {0} does not derive from System.Attribute.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.NoPropertyAccesor">
<summary>
Looks up a localized string similar to 'Property has no accessor.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.OverrididedLevel">
<summary>
Looks up a localized string similar to 'Overriding method shall have same access level as method it overrides. Only familly-or-assembly accessibility can be changed to familly when overriding method is in different assembly then method it overrides.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.ParametersInGetter">
<summary>
Looks up a localized string similar to 'Cannot get parameters of property getter.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.ParamType">
<summary>
Looks up a localized string similar to 'Parameter {0} is not of CLS-compliant type.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.Pointer">
<summary>
Looks up a localized string similar to 'Unmanaged pointer are not CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.PropertyByRef">
<summary>
Looks up a localized string similar to 'Property parameter shall not be passed by reference.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.PropertyGetterParameters">
<summary>
Looks up a localized string similar to 'Property getter parameters shall be same as property parameters.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.PropertySetterParameters">
<summary>
Looks up a localized string similar to 'Property setter parameters shall be same as property parameters (except for last setter parameter).'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.PropertyType">
<summary>
Looks up a localized string similar to 'Property type is not CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.RaiseName">
<summary>
Looks up a localized string similar to 'Event method raise shall be named raise_&lt;event name&gt;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.RaiseSpecialName">
<summary>
Looks up a localized string similar to 'Event method raise shall be marked specialname.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.RemoveName">
<summary>
Looks up a localized string similar to 'Event method remove shall be named remove_&lt;event name&gt;.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.RemoveParameters">
<summary>
Looks up a localized string similar to 'Event method remove shall take exactly one parameters of type of type of event delegate.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.RemoveSpecialName">
<summary>
Looks up a localized string similar to 'Event method remove shall be marked specialname.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.RequireImplementIncompliant">
<summary>
Looks up a localized string similar to 'CLS-compliant types shall  not require implementation of CLS-incompliant members.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.ReturnType">
<summary>
Looks up a localized string similar to 'Return type of method is not CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.SetterLastParam">
<summary>
Looks up a localized string similar to 'Type of last parameter of property setter shall be same as type of property.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.SetterName">
<summary>
Looks up a localized string similar to 'Property setter name shall be set_&lt;property name&gt; (expected &quot;{0}&quot;, actual &quot;{1}&quot;).'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.SetterParametersCount">
<summary>
Looks up a localized string similar to 'Property setter shall have exactly one more parameter than property itself.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.SetterSpecialName">
<summary>
Looks up a localized string similar to 'Property setter shall be marked specialname.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.StandardCallingConvention">
<summary>
Looks up a localized string similar to 'Only supported calling convention is standard.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.TypedReference">
<summary>
Looks up a localized string similar to 'TypedReference is noc CLS-compliant.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.TypeOfEnumMember">
<summary>
Looks up a localized string similar to 'Enum member literals must be of same type as is enum itself.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.UniqueName">
<summary>
Looks up a localized string similar to 'Culture-invariant lowercase representation of type name &quot;{0}&quot; is not unique.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.UniqueSignature">
<summary>
Looks up a localized string similar to 'Member signature is not unique.'.
</summary>
</member>
<member name="P:Tools.ResourcesT.CLSComplianceCheckerResources.VarArgsAreNotCLSCompliant">
<summary>
Looks up a localized string similar to 'VarArgs are not CLS-compliant.'.
</summary>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.AddNameFormat">
<summary>
The stub formatting method returning the AddName property value.
</summary>
<returns>The AddName property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.AddParametersFormat">
<summary>
The stub formatting method returning the AddParameters property value.
</summary>
<returns>The AddParameters property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.AddRemoveBothOrNoFormat">
<summary>
The stub formatting method returning the AddRemoveBothOrNo property value.
</summary>
<returns>The AddRemoveBothOrNo property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.AddSpecialNameFormat">
<summary>
The stub formatting method returning the AddSpecialName property value.
</summary>
<returns>The AddSpecialName property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.Array0Format">
<summary>
The stub formatting method returning the Array0 property value.
</summary>
<returns>The Array0 property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.AttributeNamedParamTypeFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Custom attribute {0} named parameter value for {1} is encoded using CLS-unsupported type {2}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.AttributeParamTypeFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Custom attribute {0} constructor value is encoded using CLS-unsupported type {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.AttributeUsage_AllowMultipleFormat(System.Object)">
<summary>
Formats a localized string similar to 'AttributeUsage.AllowMultiple violated, attribute {0} is used more than once.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.AttributeUsage_ValidOnFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'AttributeUsage.ValidOn violated, attribute {0} cannot be applied to item of type {1}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.CLSCompliantInCLSIncompliantFormat">
<summary>
The stub formatting method returning the CLSCompliantInCLSIncompliant property value.
</summary>
<returns>The CLSCompliantInCLSIncompliant property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.CLSInclompliantAttributeFormat(System.Object)">
<summary>
Formats a localized string similar to 'CLS-inclompliant attribute {0} used.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.ConstantValueFormat">
<summary>
The stub formatting method returning the ConstantValue property value.
</summary>
<returns>The ConstantValue property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.CustomAttributeDataInaccessibleFormat(System.Object)">
<summary>
Formats a localized string similar to 'Cannot check custom attribute data on {0}, becasue it does not provide access to custom attribute data.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_AttributeUsageAttributeFormat">
<summary>
The stub formatting method returning the e_AttributeUsageAttribute property value.
</summary>
<returns>The e_AttributeUsageAttribute property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_CustomAttributesFormat">
<summary>
The stub formatting method returning the e_CustomAttributes property value.
</summary>
<returns>The e_CustomAttributes property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_FieldsInModuleFormat">
<summary>
The stub formatting method returning the e_FieldsInModule property value.
</summary>
<returns>The e_FieldsInModule property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_GenericParametersInTypeFormat(System.Object)">
<summary>
Formats a localized string similar to 'Cannot get generic parameters of type {0}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_IndexesInPropertyFormat">
<summary>
The stub formatting method returning the e_IndexesInProperty property value.
</summary>
<returns>The e_IndexesInProperty property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_MembersInTypeFormat">
<summary>
The stub formatting method returning the e_MembersInType property value.
</summary>
<returns>The e_MembersInType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_MethodsInModuleFormat">
<summary>
The stub formatting method returning the e_MethodsInModule property value.
</summary>
<returns>The e_MethodsInModule property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_ModulesInAssemblyFormat">
<summary>
The stub formatting method returning the e_ModulesInAssembly property value.
</summary>
<returns>The e_ModulesInAssembly property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_ParametersInSetterFormat">
<summary>
The stub formatting method returning the e_ParametersInSetter property value.
</summary>
<returns>The e_ParametersInSetter property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_ParamsInMethodFormat">
<summary>
The stub formatting method returning the e_ParamsInMethod property value.
</summary>
<returns>The e_ParamsInMethod property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_TypeInAssemblyFormat">
<summary>
The stub formatting method returning the e_TypeInAssembly property value.
</summary>
<returns>The e_TypeInAssembly property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_TypesInModuleFormat">
<summary>
The stub formatting method returning the e_TypesInModule property value.
</summary>
<returns>The e_TypesInModule property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.e_TypesInModule_someFormat">
<summary>
The stub formatting method returning the e_TypesInModule_some property value.
</summary>
<returns>The e_TypesInModule_some property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.EnumerationFieldKindFormat">
<summary>
The stub formatting method returning the EnumerationFieldKind property value.
</summary>
<returns>The EnumerationFieldKind property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.EnumerationLiteralStaticFormat">
<summary>
The stub formatting method returning the EnumerationLiteralStatic property value.
</summary>
<returns>The EnumerationLiteralStatic property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.EnumerationOnlyFieldsFormat">
<summary>
The stub formatting method returning the EnumerationOnlyFields property value.
</summary>
<returns>The EnumerationOnlyFields property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.EnumerationValue__TypeFormat">
<summary>
The stub formatting method returning the EnumerationValue__Type property value.
</summary>
<returns>The EnumerationValue__Type property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.EnumTypeFormat">
<summary>
The stub formatting method returning the EnumType property value.
</summary>
<returns>The EnumType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.EventAccessorsVisibilityFormat">
<summary>
The stub formatting method returning the EventAccessorsVisibility property value.
</summary>
<returns>The EventAccessorsVisibility property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.EventTypeFormat">
<summary>
The stub formatting method returning the EventType property value.
</summary>
<returns>The EventType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.EventTypeDelegateFormat">
<summary>
The stub formatting method returning the EventTypeDelegate property value.
</summary>
<returns>The EventTypeDelegate property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.ExposeFriendFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} exposes type {1}, which is not accessible from outside of assembly.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.ExposeNestedFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to '{0} exposes type {1}, which is not accessible from outisde of type {2}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.FieldTypeFormat">
<summary>
The stub formatting method returning the FieldType property value.
</summary>
<returns>The FieldType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.GenericParamTypeFormat(System.Object)">
<summary>
Formats a localized string similar to 'Type {0} passed to generic type is not CLS-compliant.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.GetterNameFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Property getter name shall be get_&lt;property name&gt; (expected &quot;{0}&quot;, actual &quot;{1}&quot;).'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.GetterParametersCountFormat">
<summary>
The stub formatting method returning the GetterParametersCount property value.
</summary>
<returns>The GetterParametersCount property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.GetterSetterStaticFormat">
<summary>
The stub formatting method returning the GetterSetterStatic property value.
</summary>
<returns>The GetterSetterStatic property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.GetterSetterVirtualFormat">
<summary>
The stub formatting method returning the GetterSetterVirtual property value.
</summary>
<returns>The GetterSetterVirtual property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.GetterSpecialNameFormat">
<summary>
The stub formatting method returning the GetterSpecialName property value.
</summary>
<returns>The GetterSpecialName property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.GetterTypeFormat">
<summary>
The stub formatting method returning the GetterType property value.
</summary>
<returns>The GetterType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.GlobalFieldsFormat">
<summary>
The stub formatting method returning the GlobalFields property value.
</summary>
<returns>The GlobalFields property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.GlobalMethodsFormat">
<summary>
The stub formatting method returning the GlobalMethods property value.
</summary>
<returns>The GlobalMethods property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.IncompliantTypeFormat(System.Object)">
<summary>
Formats a localized string similar to 'Type {0} is not CLS-compliant.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.IndexTypeFormat(System.Object)">
<summary>
Formats a localized string similar to 'Property index parameter type {0} is not CLS-compliant.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.InheritCLSCompliantFormat">
<summary>
The stub formatting method returning the InheritCLSCompliant property value.
</summary>
<returns>The InheritCLSCompliant property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.InterfaceCLSIncompliantMemberFormat">
<summary>
The stub formatting method returning the InterfaceCLSIncompliantMember property value.
</summary>
<returns>The InterfaceCLSIncompliantMember property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.InterfaceFieldFormat">
<summary>
The stub formatting method returning the InterfaceField property value.
</summary>
<returns>The InterfaceField property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.InterfaceStaticMethodFormat">
<summary>
The stub formatting method returning the InterfaceStaticMethod property value.
</summary>
<returns>The InterfaceStaticMethod property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.MissingValue__Format">
<summary>
The stub formatting method returning the MissingValue__ property value.
</summary>
<returns>The MissingValue__ property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.ModreqsFormat">
<summary>
The stub formatting method returning the Modreqs property value.
</summary>
<returns>The Modreqs property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NameFormat(System.Object)">
<summary>
Formats a localized string similar to 'Name &quot;{0}&quot; is not CLS-compliant.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NameCFormat(System.Object)">
<summary>
Formats a localized string similar to 'Name &quot;{0}&quot; is not stored in Unicode Normalization Form C.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NameOfGenericTypeFormat">
<summary>
The stub formatting method returning the NameOfGenericType property value.
</summary>
<returns>The NameOfGenericType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NameOfNestedGenericTypeFormat">
<summary>
The stub formatting method returning the NameOfNestedGenericType property value.
</summary>
<returns>The NameOfNestedGenericType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericConstraintFormat(System.Object,System.Object,System.Object)">
<summary>
Formats a localized string similar to 'When type parameter specifies a constraint, corresponding parameter of nested type shall specify it as well. Parameter {0} of type {1} is missing constraint to type {2}.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<param name="arg2">An object (2) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericConstraint_ClassFormat">
<summary>
The stub formatting method returning the NestedGenericConstraint_Class property value.
</summary>
<returns>The NestedGenericConstraint_Class property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericConstraint_NewFormat">
<summary>
The stub formatting method returning the NestedGenericConstraint_New property value.
</summary>
<returns>The NestedGenericConstraint_New property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericConstraint_StructFormat">
<summary>
The stub formatting method returning the NestedGenericConstraint_Struct property value.
</summary>
<returns>The NestedGenericConstraint_Struct property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NestedGenericTypeParametersCountFormat">
<summary>
The stub formatting method returning the NestedGenericTypeParametersCount property value.
</summary>
<returns>The NestedGenericTypeParametersCount property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NoAttributeAttributeFormat(System.Object)">
<summary>
Formats a localized string similar to 'Attribute type {0} does not derive from System.Attribute.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.NoPropertyAccesorFormat">
<summary>
The stub formatting method returning the NoPropertyAccesor property value.
</summary>
<returns>The NoPropertyAccesor property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.OverrididedLevelFormat">
<summary>
The stub formatting method returning the OverrididedLevel property value.
</summary>
<returns>The OverrididedLevel property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.ParametersInGetterFormat">
<summary>
The stub formatting method returning the ParametersInGetter property value.
</summary>
<returns>The ParametersInGetter property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.ParamTypeFormat(System.Object)">
<summary>
Formats a localized string similar to 'Parameter {0} is not of CLS-compliant type.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.PointerFormat">
<summary>
The stub formatting method returning the Pointer property value.
</summary>
<returns>The Pointer property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.PropertyByRefFormat">
<summary>
The stub formatting method returning the PropertyByRef property value.
</summary>
<returns>The PropertyByRef property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.PropertyGetterParametersFormat">
<summary>
The stub formatting method returning the PropertyGetterParameters property value.
</summary>
<returns>The PropertyGetterParameters property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.PropertySetterParametersFormat">
<summary>
The stub formatting method returning the PropertySetterParameters property value.
</summary>
<returns>The PropertySetterParameters property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.PropertyTypeFormat">
<summary>
The stub formatting method returning the PropertyType property value.
</summary>
<returns>The PropertyType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.RaiseNameFormat">
<summary>
The stub formatting method returning the RaiseName property value.
</summary>
<returns>The RaiseName property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.RaiseSpecialNameFormat">
<summary>
The stub formatting method returning the RaiseSpecialName property value.
</summary>
<returns>The RaiseSpecialName property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.RemoveNameFormat">
<summary>
The stub formatting method returning the RemoveName property value.
</summary>
<returns>The RemoveName property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.RemoveParametersFormat">
<summary>
The stub formatting method returning the RemoveParameters property value.
</summary>
<returns>The RemoveParameters property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.RemoveSpecialNameFormat">
<summary>
The stub formatting method returning the RemoveSpecialName property value.
</summary>
<returns>The RemoveSpecialName property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.RequireImplementIncompliantFormat">
<summary>
The stub formatting method returning the RequireImplementIncompliant property value.
</summary>
<returns>The RequireImplementIncompliant property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.ReturnTypeFormat">
<summary>
The stub formatting method returning the ReturnType property value.
</summary>
<returns>The ReturnType property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.SetterLastParamFormat">
<summary>
The stub formatting method returning the SetterLastParam property value.
</summary>
<returns>The SetterLastParam property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.SetterNameFormat(System.Object,System.Object)">
<summary>
Formats a localized string similar to 'Property setter name shall be set_&lt;property name&gt; (expected &quot;{0}&quot;, actual &quot;{1}&quot;).'.
</summary>
<param name="arg0">An object (0) to format.</param>
<param name="arg1">An object (1) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.SetterParametersCountFormat">
<summary>
The stub formatting method returning the SetterParametersCount property value.
</summary>
<returns>The SetterParametersCount property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.SetterSpecialNameFormat">
<summary>
The stub formatting method returning the SetterSpecialName property value.
</summary>
<returns>The SetterSpecialName property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.StandardCallingConventionFormat">
<summary>
The stub formatting method returning the StandardCallingConvention property value.
</summary>
<returns>The StandardCallingConvention property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.TypedReferenceFormat">
<summary>
The stub formatting method returning the TypedReference property value.
</summary>
<returns>The TypedReference property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.TypeOfEnumMemberFormat">
<summary>
The stub formatting method returning the TypeOfEnumMember property value.
</summary>
<returns>The TypeOfEnumMember property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.UniqueNameFormat(System.Object)">
<summary>
Formats a localized string similar to 'Culture-invariant lowercase representation of type name &quot;{0}&quot; is not unique.'.
</summary>
<param name="arg0">An object (0) to format.</param>
<returns>A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.UniqueSignatureFormat">
<summary>
The stub formatting method returning the UniqueSignature property value.
</summary>
<returns>The UniqueSignature property value.</returns>
</member>
<member name="M:Tools.ResourcesT.CLSComplianceCheckerResources.VarArgsAreNotCLSCompliantFormat">
<summary>
The stub formatting method returning the VarArgsAreNotCLSCompliant property value.
</summary>
<returns>The VarArgsAreNotCLSCompliant property value.</returns>
</member>
<member name="T:Tools.TestsT.AttributeTest">
 <summary>Performs tests of custom attributes</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest._TestedObjects">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.TestedObjects"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest._Errors">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.Errors"/> properties</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest._Warnings">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.Warnings"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest._PreventReTesting">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.PreventReTesting"/> property</summary>
</member>
<member name="P:Tools.TestsT.AttributeTest.PreventReTesting">
 <summary>Gets or sets value indicating if metadata objects that were once tested by this instance are not tested again when encountered</summary>
 <returns>True if testing objects again is prevented, false when not</returns>
 <value>Default value is true</value>
 <remarks>This property being set to true makes this instance to remeber all objects tested by it. It has impact on speed of testing.</remarks>
 <seelaso cref="P:Tools.TestsT.AttributeTest.CreateStatistic"/><seelaso cref="P:Tools.TestsT.AttributeTest.TestedObjects"/>
</member>
<member name="P:Tools.TestsT.AttributeTest.TestedObjects">
 <summary>Gets metadata objects that were tested by this instance</summary>
 <remarks>This property is valid only for time when <see cref="P:Tools.TestsT.AttributeTest.PreventReTesting"/> was true.</remarks>
 <seelaso cref="P:Tools.TestsT.AttributeTest.PreventReTesting"/>
</member>
<member name="P:Tools.TestsT.AttributeTest.Errors">
 <summary>Gets errors encountered by this instance while testing</summary>
 <seelaso cref="E:Tools.TestsT.AttributeTest.Error"/>
</member>
<member name="P:Tools.TestsT.AttributeTest.Warnings">
 <summary>Gets warnings encountered by this instance while testing</summary>
 <seelaso cref="E:Tools.TestsT.AttributeTest.Warning"/>
</member>
<member name="M:Tools.TestsT.AttributeTest.Test(System.Collections.Generic.IEnumerable{System.Reflection.ICustomAttributeProvider},System.Boolean,System.Boolean)">
 <summary>Tests attributes of given metadata objects</summary>
 <param name="Objects">Metadata objects to test attributes of. Can be null (in such case no tests are performed)</param>
 <param name="Private">When <paramref name="Recursive"/> true indicates if private nested items will be tested</param>
 <param name="Recursive">True to test all nested objects of <paramref name="Objects"/></param>
 <version version="1.5.4">Argument names converted tob camelCase</version>
</member>
<member name="M:Tools.TestsT.AttributeTest.SafeContains``1(System.Collections.Generic.List{``0},``0)">
 <summary>Searches <see cref="T:System.Collections.Generic.List`1"/> for item in exception-safe way</summary>
 <param name="list"><see cref="T:System.Collections.Generic.List`1"/> to be searched through</param>
 <param name="Obj">Item to be sought</param>
 <returns>True if <paramref name="list"/> cointains <paramref name="Obj"/></returns>
</member>
<member name="M:Tools.TestsT.AttributeTest.Test(System.Reflection.ICustomAttributeProvider,System.Boolean,System.Boolean)">
 <summary>Tests attributes of given metadata object</summary>
 <param name="object">Metadata object to test attributes of. Can be null (in such case no tests are performed)</param>
 <param name="private">When <paramref name="Recursive"/> true indicates if private nested items will be tested</param>
 <param name="recursive">True to test all nested objects of <paramref name="Object"/></param>
 <version version="1.5.4">Parameter names converted to camelCase</version>
</member>
<member name="M:Tools.TestsT.AttributeTest.TestObject(System.Reflection.ICustomAttributeProvider)">
 <summary>Performs test of single metadata object</summary>
 <param name="Object">Metadat object to be tested</param>
 <version version="1.5.4">Fix: <see cref="T:System.InvalidCastException"/> when attributtes cannot be read via <see cref="T:System.Reflection.CustomAttributeData"/></version>
 <version version="1.5.4">Parameter <c>Object</c> renamed to <c>object</c></version>
</member>
<member name="M:Tools.TestsT.AttributeTest.OnObjectReached(System.Reflection.ICustomAttributeProvider)">
 <summary>Raises the <see cref="E:Tools.TestsT.AttributeTest.ObjectReached"/> event</summary>
 <param name="Object">Metadata object reached</param>
 <version version="1.5.4">Parameter <c>Object</c> renamed to <c>object</c></version>
</member>
<member name="M:Tools.TestsT.AttributeTest.OnError(Tools.TestsT.AttributeTest.ErrorStages,System.Exception,System.Reflection.ICustomAttributeProvider,System.Reflection.CustomAttributeData,System.Int32)">
 <summary>Raises the <see cref="E:Tools.TestsT.AttributeTest.Error"/> event</summary>
 <param name="Exception"><see cref="T:System.Exception"/> that caused this error</param>
 <param name="Object">Metadata object being verified</param>
 <param name="Stage">Identifies stage of parsing and kind of error</param>
 <param name="CustomAttributeData"><see cref="T:System.Reflection.CustomAttributeData"/> if available in this <paramref name="Stage"/></param>
 <param name="ArgumentIndex">Index of attribute argument if relevant in this <paramref name="Stage"/></param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Stage"/> is not member of <see cref="T:Tools.TestsT.AttributeTest.ErrorStages"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> or <paramref name="Object"/> is null -or- <paramref name="Stage"/> is <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetConstructorArguments"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetNamedArguments"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.InvokeConstructor"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetConstructorArgumentValue"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetField"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetProperty"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.InvokeMethod"/> or <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetNamedArgumentValue"/> and <paramref name="CustomAttributeData"/> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Stage"/> is <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetConstructorArgumentValue"/> and <paramref name="ArgumentIndex"/> is not within range of <paramref name="CustomAttributeData"/>.<see cref="P:System.Reflection.CustomAttributeData.ConstructorArguments">ConstructorArguments</see> -or- <paramref name="Stage"/> is <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetField"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetProperty"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.InvokeMethod"/> or <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetNamedArgumentValue"/> and <paramref name="ArgumentIndex"/> is not within range of <paramref name="CustomAttributeData"/>.<see cref="P:System.Reflection.CustomAttributeData.NamedArguments">NamedArguments</see>.</exception>
</member>
<member name="M:Tools.TestsT.AttributeTest.OnError(Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs)">
 <summary>Raises the <see cref="E:Tools.TestsT.AttributeTest.Error"/> event, adds error to <see cref="P:Tools.TestsT.AttributeTest.Errors"/>.</summary>
 <param name="e">Event arguments</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is null</exception>
</member>
<member name="M:Tools.TestsT.AttributeTest.OnAttributeOk(Tools.TestsT.AttributeTest.AttributeEventArgs)">
 <summary>Raises the <see cref="E:Tools.TestsT.AttributeTest.AttributeOk"/> event</summary>
 <param name="e">Event arguments</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is null</exception>
</member>
<member name="M:Tools.TestsT.AttributeTest.OnBeforeTest(System.Reflection.ICustomAttributeProvider)">
 <summary>Raises the <see cref="E:Tools.TestsT.AttributeTest.BeforeTest"/> event</summary>
 <param name="Object">Object to be tested</param>
 <returns>True to test the object, false to skip it</returns>
 <version version="1.5.4">Parameter <c>Object</c> renamed to <c>object</c></version>
</member>
<member name="M:Tools.TestsT.AttributeTest.OnBeforeExpand(System.Reflection.ICustomAttributeProvider)">
 <summary>Raises the <see cref="E:Tools.TestsT.AttributeTest.BeforeExpand"/> event</summary>
 <param name="Object">Object to be expanded</param>
 <returns>True to expand the object, false to skip it</returns>
 <remarks>Raised only for recursive testing</remarks>
 <version version="1.5.4">Parameter <c>Object</c> renamed to <c>object</c></version>
</member>
<member name="M:Tools.TestsT.AttributeTest.OnWarning(Tools.TestsT.AttributeTest.WarningEventArgs)">
 <summary>Raises the <see cref="E:Tools.TestsT.AttributeTest.Warning"/> event, adds warning to <see cref="P:Tools.TestsT.AttributeTest.Warnings"/> collection</summary>
 <param name="e">event arguments</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="e"/> is null</exception>
</member>
<member name="E:Tools.TestsT.AttributeTest.BeforeTest">
 <summary>Raised before metadata object is tested.</summary>
 <remarks>This event can be cancelled.</remarks>
</member>
<member name="E:Tools.TestsT.AttributeTest.BeforeExpand">
 <summary>During recursive testing raised before metadata object is queried for its sub-objects</summary>
 <remarks>This event can be canceůlled.</remarks>
</member>
<member name="E:Tools.TestsT.AttributeTest.ObjectReached">
 <summary>Raised before object is tested</summary>
 <param name="sender">This instance</param>
 <param name="object">Object being tested</param>
 <version version="1.5.4">Parameter <c>Object</c> renamed to <c>object</c></version>
</member>
<member name="E:Tools.TestsT.AttributeTest.Error">
 <summary>Raised when an exception occures causing that particular attribute cannot be instantiated</summary>
 <remarks>Errors are stored in the <see cref="P:Tools.TestsT.AttributeTest.Errors"/> collection.</remarks>
 <seelaso cref="P:Tools.TestsT.AttributeTest.Errors"/>
</member>
<member name="E:Tools.TestsT.AttributeTest.AttributeOk">
 <summary>Raised after attribute is successfully parsed and instantiated</summary>
 <remarks>Not raised of attributes that do not inherit from <see cref="T:System.Attribute"/>. See <see cref="E:Tools.TestsT.AttributeTest.Warning"/> for such attributes.</remarks>
</member>
<member name="E:Tools.TestsT.AttributeTest.Warning">
 <summary>Raised when non-critical issue occures during parse proces</summary>
 <remarks>Warnings are stored in the <see cref="P:Tools.TestsT.AttributeTest.Warnings"/> collection</remarks>
 <seelaso cref="P:Tools.TestsT.AttributeTest.Warnings"/>
</member>
<member name="T:Tools.TestsT.AttributeTest.ErrorStages">
 <summary>Identifies places where is expected error and identifies kinds of errors</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.GetCustomAttributeData">
 <summary>The <see cref="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)"/> method is called</summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> data is null and <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> has no meaning</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.GetConstructorArguments">
 <summary>The <see cref="P:System.Reflection.CustomAttributeData.ConstructorArguments"/> is got</summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> is not null amd <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> has no meaning</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.GetConstructorArgumentValue">
 <summary>The <see cref="P:System.Reflection.CustomAttributeTypedArgument.Value"/> is got</summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> is not null amd <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> indicates index into <see cref="P:System.Reflection.CustomAttributeData.ConstructorArguments"/> collection</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.InvokeConstructor">
 <summary>Custom attribute constructor obtained via <see cref="P:System.Reflection.CustomAttributeData.Constructor"/> is invoked</summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> is not null amd <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> has no meaning</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.GetNamedArguments">
 <summary>The <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> is got</summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> is not null amd <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> has no meaning</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.GetNamedArgumentValue">
 <summary>The <see cref="P:System.Reflection.CustomAttributeNamedArgument.TypedValue"/> is got</summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> is not null amd <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> indicates index into <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> collection.</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.SetField">
 <summary>Named argument with <see cref="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo"/> of type <see cref="T:System.Reflection.FieldInfo"/> is set</summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> is not null amd <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> indicates index into <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> collection.</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.SetProperty">
 <summary>Named argument with <see cref="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo"/> of type <see cref="T:System.Reflection.PropertyInfo"/> is set</summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> is not null amd <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> indicates index into <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> collection.</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.InvokeMethod">
 <summary>Named argument with <see cref="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo"/> of type <see cref="T:System.Reflection.MethodBase"/> is set</summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> is not null amd <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> indicates index into <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> collection.</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.NamedArgumentUnknown">
 <summary><see cref="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo"/> is neither of <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.MethodBase"/></summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> is not null amd <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> indicates index into <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> collection.</remarks>
</member>
<member name="F:Tools.TestsT.AttributeTest.ErrorStages.GetCustomAttributes">
 <summary><see cref="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)"/> is invoked (because object is of none of types supported by <see cref="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)"/></summary>
 <remarks><see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> data is null and <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> has no meaning</remarks>
</member>
<member name="T:Tools.TestsT.AttributeTest.AttributeEventArgs">
 <summary>Event arguments reporting attributes</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.AttributeEventArgs._object">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.AttributeEventArgs.Object"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.AttributeEventArgs._customAttributeData">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.AttributeEventArgs.CustomAttributeData"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.AttributeEventArgs._attribute">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.AttributeEventArgs.Attribute"/> property</summary>
</member>
<member name="P:Tools.TestsT.AttributeTest.AttributeEventArgs.Object">
 <summary>Gets the object the attribute is applied onto</summary>
</member>
<member name="P:Tools.TestsT.AttributeTest.AttributeEventArgs.CustomAttributeData">
 <summary>If available gets <see cref="T:System.Reflection.CustomAttributeData"/> <see cref="P:Tools.TestsT.AttributeTest.AttributeEventArgs.Attribute"/> was instantiated from</summary>
</member>
<member name="P:Tools.TestsT.AttributeTest.AttributeEventArgs.Attribute">
 <summary>The attribute</summary>
</member>
<member name="M:Tools.TestsT.AttributeTest.AttributeEventArgs.#ctor(System.Reflection.ICustomAttributeProvider,System.Reflection.CustomAttributeData,System.Attribute)">
 <summary>CTor</summary>
 <param name="Object">Metadata objetc <paramref name="Attribute"/> is applied onto</param>
 <param name="CustomAttributeData">If available, <see cref="T:System.Reflection.CustomAttributeData"/> <paramref name="Attribute"/> was instantiated from</param>
 <param name="Attribute">The attribute</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Object"/> or <paramref name="Attribute"/> is null</exception>
 <version version="1.5.4">Argument names converted tob camelCase</version>
</member>
<member name="T:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs">
 <summary>Arguments of event reporting custom attributes test error</summary>
</member>
<member name="M:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.#ctor(Tools.TestsT.AttributeTest.ErrorStages,System.Exception,System.Reflection.ICustomAttributeProvider,System.Reflection.CustomAttributeData,System.Int32)">
 <summary>CTor</summary>
 <param name="Stage">Identifies kind of erro and stage of attribute construction process where the error has happened</param>
 <param name="Exception">The exception that caused the error</param>
 <param name="Object">Objets being tested</param>
 <param name="CustomAttributeData">Attribute data attribute is about to be constructed from (if available; otherwise null)</param>
 <param name="ArgumentIndex">Index of argument that caused the error (if relevant; otherwise -1)</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Stage"/> is not member of <see cref="T:Tools.TestsT.AttributeTest.ErrorStages"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Exception"/> or <paramref name="Object"/> is null -or- <paramref name="Stage"/> is <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetConstructorArguments"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetNamedArguments"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.InvokeConstructor"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetConstructorArgumentValue"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetField"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetProperty"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.InvokeMethod"/> or <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetNamedArgumentValue"/> and <paramref name="CustomAttributeData"/> is null.</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="Stage"/> is <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetConstructorArgumentValue"/> and <paramref name="ArgumentIndex"/> is not within range of <paramref name="CustomAttributeData"/>.<see cref="P:System.Reflection.CustomAttributeData.ConstructorArguments">ConstructorArguments</see> -or- <paramref name="Stage"/> is <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetField"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetProperty"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.InvokeMethod"/> or <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetNamedArgumentValue"/> and <paramref name="ArgumentIndex"/> is not within range of <paramref name="CustomAttributeData"/>.<see cref="P:System.Reflection.CustomAttributeData.NamedArguments">NamedArguments</see>.</exception>
 <version version="1.5.4">Argument names converted tob camelCase</version>
</member>
<member name="F:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs._Stage">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.Stage"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs._Exception">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.Exception"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs._Object">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.Object"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs._CustomAttributeData">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs._ArgumentIndex">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> property</summary>
</member>
<member name="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.Stage">
 <summary>Gest value indicating kind of error that has occured and stage of custom attribute initialization in which it has occured.</summary>
 <returns>Stage when which caused the event has error ocured</returns>
 <remarks>Value of this property also indicates meaning of <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> and <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex"/> properties</remarks>
</member>
<member name="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.Exception">
 <summary>Gets exception that caused the error which caused the event</summary>
 <returns>Exception which caused the error that caused the event</returns>
</member>
<member name="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.Object">
 <summary>Gets metdatata object the attribute that caused the error was applied onto</summary>
 <returns>Metadata object errorneous attribute is applied onto</returns>
</member>
<member name="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData">
 <summary>If vailable gets <see cref="T:System.Reflection.CustomAttributeData"/> the attribute which caused th error have been being created form</summary>
 <returns><see cref="T:System.Reflection.CustomAttributeData"/> or null if <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.Stage"/> is <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetCustomAttributeData"/> or <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetCustomAttributes"/>.</returns>
</member>
<member name="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.ArgumentIndex">
 <summary>In stages where it has meaning gets index to either <see cref="P:System.Reflection.CustomAttributeData.ConstructorArguments"/> or <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> or <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.CustomAttributeData"/> indicating value that caused the exception.</summary>
 <returns>If stage is <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetConstructorArgumentValue"/> returns index to <see cref="P:System.Reflection.CustomAttributeData.ConstructorArguments"/> collection.
 If <see cref="P:Tools.TestsT.AttributeTest.AttributeTestErrorEventArgs.Stage"/> is <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.GetNamedArgumentValue"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetField"/>, <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.SetProperty"/> or <see cref="F:Tools.TestsT.AttributeTest.ErrorStages.InvokeMethod"/> returns index to <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> collection.
 Otherwise return -1.</returns>
</member>
<member name="T:Tools.TestsT.AttributeTest.CancelObjectEventArgs">
 <summary>Cancellable event arguments carrying <see cref="T:System.Reflection.ICustomAttributeProvider"/></summary>
 <seelaso cref="T:System.ComponentModel.CancelEventArgs"/>
</member>
<member name="F:Tools.TestsT.AttributeTest.CancelObjectEventArgs._Object">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.CancelObjectEventArgs.Object"/> property</summary>
</member>
<member name="P:Tools.TestsT.AttributeTest.CancelObjectEventArgs.Object">
 <summary>Gets metadata object associated with the event</summary>
</member>
<member name="M:Tools.TestsT.AttributeTest.CancelObjectEventArgs.#ctor(System.Reflection.ICustomAttributeProvider)">
 <summary>CTor</summary>
 <param name="Object">Metadata object assocuated with the event</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Object"/> is null</exception>
</member>
<member name="T:Tools.TestsT.AttributeTest.WarningKinds">
 <summary>Kinds of warning used by <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Kind"/></summary>
 <seelaso cref="T:Tools.TestsT.AttributeTest.WarningEventArgs"/><seelaso cref="E:Tools.TestsT.AttributeTest.Warning"/>
</member>
<member name="F:Tools.TestsT.AttributeTest.WarningKinds.NamedArgumentMethodInvoke">
 <summary>Type of <see cref="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo"/> from <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> is <see cref="T:System.Reflection.MethodBase"/></summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.WarningKinds.NonAttributeAttribute">
 <summary>Attribute does not inherit from <see cref="T:System.Attribute"/>.</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.WarningKinds.UnknownProvider">
 <summary>Metadata object being tested is not one of thos supported by <see cref="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)"/> overloaded function</summary>
</member>
<member name="T:Tools.TestsT.AttributeTest.WarningEventArgs">
 <summary>Arguments of the <see cref="E:Tools.TestsT.AttributeTest.Warning"/> event</summary>
</member>
<member name="M:Tools.TestsT.AttributeTest.WarningEventArgs.#ctor(System.Reflection.ICustomAttributeProvider)">
 <summary>CTor for <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.UnknownProvider"/></summary>
 <param name="Object">Object being tested</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Object"/> is null</exception>
 <version version="1.5.4">Parameter <c>Object</c> renamed to <c>object</c></version>
</member>
<member name="M:Tools.TestsT.AttributeTest.WarningEventArgs.#ctor(System.Reflection.ICustomAttributeProvider,System.Object,System.Reflection.CustomAttributeData)">
 <summary>CTor for <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.NonAttributeAttribute"/></summary>
 <param name="Object">Object the attribute is applied onto</param>
 <param name="Attribute">The attrbite that does not derive from <see cref="T:System.Attribute"/></param>
 <param name="CustomAttributeData"><see cref="T:System.Reflection.CustomAttributeData"/> the attribute was created from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Object"/>, <paramref name="Attribute"/> por <paramref name="CustomAttributeData"/> is null</exception>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="Attribute"/> is of type <see cref="T:System.Attribute"/></exception>
 <version version="1.5.4">Argument names converted tob camelCase</version>
</member>
<member name="M:Tools.TestsT.AttributeTest.WarningEventArgs.#ctor(System.Reflection.ICustomAttributeProvider,System.Object,System.Reflection.CustomAttributeData,System.Int32)">
 <summary>CTor for <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.NamedArgumentMethodInvoke"/></summary>
 <param name="Object">Object the attribute is applied onto</param>
 <param name="Attribute">Attribute instance being applied. Can be not fully initialized by named arguments.</param>
 <param name="ArgumentIndex">Index into <see cref="P:System.Reflection.CustomAttributeData.NamedArguments"/> pointing to named argument which causd the warning</param>
 <param name="CustomAttributeData"><see cref="T:System.Reflection.CustomAttributeData"/> <paramref name="Attribute"/> is being created from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Object"/> or <paramref name="Attribute"/> or <paramref name="CustomAttributeData"/> is null</exception>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ArgumentIndex"/> is not whthin range of <paramref name="CustomAttributeData"/>.<see cref="P:System.Reflection.CustomAttributeData.NamedArguments">NamedArguments</see></exception>
 <version version="1.5.4">Argument names converted tob camelCase</version>
</member>
<member name="M:Tools.TestsT.AttributeTest.WarningEventArgs.#ctor(Tools.TestsT.AttributeTest.WarningKinds,System.Reflection.ICustomAttributeProvider,System.Object,System.Reflection.CustomAttributeData,System.Int32)">
 <summary>Internal CTor</summary>
 <param name="Kind">Kind of warning</param>
 <param name="Object">Metadata object being tested</param>
 <param name="CustomAttributeData"><see cref="T:System.Reflection.CustomAttributeData"/> attribute is being/was created form (if available)</param>
 <param name="Attribute">Attribute instance (if available) which caused the warning</param>
 <param name="ArgumentIndex">Index of argument of attribute which caused the warning</param>
 <version version="1.5.4">Argument names converted tob camelCase</version>
</member>
<member name="F:Tools.TestsT.AttributeTest.WarningEventArgs._Object">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Object"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.WarningEventArgs._Attribute">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Attribute"/> proeprty</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.WarningEventArgs._CustomAttributeData">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.CustomAttributeData"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.WarningEventArgs._ArgumentIndex">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.ArgumentIndex"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest.WarningEventArgs._Kind">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Kind"/> property</summary>
</member>
<member name="P:Tools.TestsT.AttributeTest.WarningEventArgs.Object">
 <summary>Gets metadata object being tested while the warning was generated</summary>
 <returns>Object being tested</returns>
</member>
<member name="P:Tools.TestsT.AttributeTest.WarningEventArgs.Attribute">
 <summary>Gets attribute that caused the warning (if available)</summary>
 <returns>When <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Kind"/> is <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.NamedArgumentMethodInvoke"/> or <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.NonAttributeAttribute"/> returns arrtibute that caused the warning (Note: For <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.NamedArgumentMethodInvoke"/> the attribute may be not fully initialized by named arguments.). In case of <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.UnknownProvider"/> returns null.</returns>
</member>
<member name="P:Tools.TestsT.AttributeTest.WarningEventArgs.CustomAttributeData">
 <summary>Gets (if applicable) <see cref="T:System.Reflection.CustomAttributeData"/> attributes is ceated form.</summary>
 <returns>If <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Kind"/> is <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.NamedArgumentMethodInvoke"/> or <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.NonAttributeAttribute"/> returns <see cref="T:System.Reflection.CustomAttributeData"/>. For <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Kind"/> = <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.UnknownProvider"/> returns null.</returns>
 <remarks>If <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Kind"/> is <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.NamedArgumentMethodInvoke"/>, <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Attribute"/> may not be fully initialized by named arguments.</remarks>
</member>
<member name="P:Tools.TestsT.AttributeTest.WarningEventArgs.ArgumentIndex">
 <summary>If applicble getsidex of argument that caused the warning.</summary>
 <returns>If <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.Kind"/> is <see cref="F:Tools.TestsT.AttributeTest.WarningKinds.NamedArgumentMethodInvoke"/> returns index of arument into <see cref="P:Tools.TestsT.AttributeTest.WarningEventArgs.CustomAttributeData"/>.<see cref="P:System.Reflection.CustomAttributeData.NamedArguments">NamedArguments</see> which is <see cref="T:System.Reflection.MethodBase"/>. Otherwise returns -1.</returns>
</member>
<member name="P:Tools.TestsT.AttributeTest.WarningEventArgs.Kind">
 <summary>Gets kind of warning</summary>
 <returns>Kind of warning indicatin why the warning was issued.</returns>
</member>
<member name="F:Tools.TestsT.AttributeTest._CreateStatistic">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.CreateStatistic"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest._CountObjectTypes">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.CountObjectTypes"/> property</summary>
</member>
<member name="F:Tools.TestsT.AttributeTest._CountAttributeTypes">
 <summary>Contains value of the <see cref="P:Tools.TestsT.AttributeTest.CountAttributeTypes"/> proeprty</summary>
</member>
<member name="P:Tools.TestsT.AttributeTest.CountObjectTypes">
 <summary>Gets counts of metadata object types tested</summary>
 <remarks>This property is valid only for part of testing when <see cref="P:Tools.TestsT.AttributeTest.CreateStatistic"/> was true and only from last call of <see cref="M:Tools.TestsT.AttributeTest.ResetStatistic"/></remarks>
 <seealso cref="P:Tools.TestsT.AttributeTest.CountAttributeTypes"/><seelaso cref="M:Tools.TestsT.AttributeTest.ResetStatistic"/><seelaso cref="P:Tools.TestsT.AttributeTest.CreateStatistic"/>
</member>
<member name="P:Tools.TestsT.AttributeTest.CountAttributeTypes">
 <summary>Gets counts of attribute types encountered</summary>
 <remarks>This property is valid only for part of testing when <see cref="P:Tools.TestsT.AttributeTest.CreateStatistic"/> was true and only from last call of <see cref="M:Tools.TestsT.AttributeTest.ResetStatistic"/>.</remarks>
 <seealso cref="P:Tools.TestsT.AttributeTest.CountObjectTypes"/><seelaso cref="M:Tools.TestsT.AttributeTest.ResetStatistic"/><seelaso cref="P:Tools.TestsT.AttributeTest.CreateStatistic"/>
</member>
<member name="P:Tools.TestsT.AttributeTest.CreateStatistic">
 <summary>Gets or sets value indicating if statistical data are collected</summary>
 <returns>True when statatistical data are collected; false otherwise</returns>
 <value>Default value is true</value>
 <remarks>This property influenses <see cref="P:Tools.TestsT.AttributeTest.CountObjectTypes"/> and <see cref="P:Tools.TestsT.AttributeTest.CountAttributeTypes"/></remarks>
 <seelaso cref="M:Tools.TestsT.AttributeTest.ResetStatistic"/><seelaso cref="P:Tools.TestsT.AttributeTest.CountAttributeTypes"/><seelaso cref="P:Tools.TestsT.AttributeTest.CountObjectTypes"/>
 <seelaso cref="P:Tools.TestsT.AttributeTest.PreventReTesting"/>
</member>
<member name="M:Tools.TestsT.AttributeTest.ResetStatistic">
 <summary>Resets statistical data collected in <see cref="P:Tools.TestsT.AttributeTest.CountAttributeTypes"/> and <see cref="P:Tools.TestsT.AttributeTest.CountObjectTypes"/></summary>
 <seelaso cref="P:Tools.TestsT.AttributeTest.CreateStatistic"/><seelaso cref="P:Tools.TestsT.AttributeTest.CountAttributeTypes"/><seelaso cref="P:Tools.TestsT.AttributeTest.CountObjectTypes"/>
</member>
<member name="T:Tools.TestsT.CLSComplianceChecker">
 <summary>Allows to check if varios items of compiled code are CLS compliant</summary>
 <remarks><see cref="T:Tools.TestsT.CLSComplianceChecker"/> does not check following CLS rules:
 <list type="table"><listheader><term>Rule</term><description>How it is (not) checked</description></listheader>
 <item><term>1 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.OnlyVisible"/></term><description>Not checked - only informative.</description></item>
 <item><term>3 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoBoxedValueTypes"/></term><description>Not checked - there is nor way how to expose boxed type by name.</description></item>
 <item><term>8 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.Flags"/></term><description>Not checked - only informative.</description></item>
 <item><term>16 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.Arrays"/></term><description>Checked only for 1-dimensional arrays because 2+-deimsional arrays are physicaly same type not depending on if they are 0-based or anything-other-based while 1-dimensional array type is different when it is 0-based and anytheing-else-based.</description></item>
 <item><term>21 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.CallBaseClassCTor"/></term><description>Not checked - requires eaxmining of method body</description></item>
 <item><term>22 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoCallsToCTor"/></term><description>Not checkd - requires examining of method body</description></item>
 <item><term>23 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.GetterAndSetterSameAccess"/></term><description>Not checked - this rule was removed from actual version of CLS</description></item>
 <item><term>38 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.OverloadingDistinction"/></term><description>Reported only for op_Explicit and op_Implicit. Otherwise covered by other rules.</description></item>
 <item><term>39 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.AlternativeToOpImplicitAndOpExplicit"/></term><description>Not checked - almost impossible to check</description></item>
 <item><term>40 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.ThrowOnlyExceptions"/></term><description>Not checked - requires examining of method body and CLS-compliant code is not strictly prohibited from throwing non-exceptions.</description></item>
 <item><term>46 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.GenericInstanceVisibilityAndAccessibility"/></term><description>Not checked - this is guideline for compiler.</description></item>
 <item><term>47 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.GenericAbstractMethodsHaveDefaultImplementation"/></term><description>Not checked - this is guideline for developpers and its hard to avoid false-positives or detect which implementation is default and which is special.</description></item>
 <item><term>48 - <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.GenericMethodsThatBecomeIndistinguishable"/></term><description>Not checked - cannot check semantics</description></item>
 </list>
 When any method has no <see cref="T:System.CLSCompliantAttribute"/> attached and it belong to event or property in same class, declarative CLS-compliance of the method is taken from the event or the property.
 </remarks>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="T:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs">
 <summary>Reports CLS rule viaolation</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs._Message">
 <summary>Contains value of the <see cref="P:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs.Message"/> property</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs._Rule">
 <summary>Contains value of the <see cref="P:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs.Rule"/> property</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs._Member">
 <summary>Contains value of the <see cref="P:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs.Member"/> property</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs._Exception">
 <summary>Contains value of the <see cref="P:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs.Exception"/> property</summary>
</member>
<member name="P:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs.Message">
 <summary>Message describing the violation</summary>
</member>
<member name="P:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs.Rule">
 <summary>Identifies CLS-rule or internal rule that was violated</summary>
</member>
<member name="P:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs.Member">
 <summary>Gets member that caused the violation or error</summary>
</member>
<member name="P:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs.Exception">
 <summary>Gets exception that caused event to be raied</summary>
 <returns>Exception that caused event to be raied (only when event reports error); null for violation of CLS-rule</returns>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.CLSViolationEventArgs.#ctor(System.String,Tools.TestsT.CLSComplianceChecker.CLSRule,System.Reflection.ICustomAttributeProvider,System.Exception)">
 <summary>CTor</summary>
 <param name="Message">Message describing the violation</param>
 <param name="Rule">Identifies rule that was violated</param>
 <param name="Member">Identifies member that caused the violation or error</param>
 <param name="Exception">When event is reaised because of error, exception associated with the error; null otherwise</param>
</member>
<member name="T:Tools.TestsT.CLSComplianceChecker.CLSRule">
 <summary>CLS compatibility rules as defined in ECMA standard of CLS</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.OnlyVisible">
 <summary>1: CLS rules apply only to those parts of a type that are accessible or visible outside of the defining assembly.</summary>
 <remarks>Violation of this rule is never reported</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoCompliantMembersInIncompliantTypes">
 <summary>2: Members of non-CLS compliant types shall not be marked CLS-compliant.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoBoxedValueTypes">
 <summary>3: Boxed value types are not CLS-compliant.</summary>
 <remarks>This rule is not checked because there is no way how to expose boxed type by name.</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.UnicodeIdentifiers">
 <summary>4: Assemblies shall follow Annex 7 of Technical Report 15 of the Unicode Standard 3.0 governing the set of characters permitted to start and be included in identifiers, available on-line at http://www.unicode.org/unicode/reports/tr15/tr15-18.html. Identifiers shall be in the canonical format defined by Unicode Normalization Form C. For CLS purposes, two identifiers are the same if their lowercase mappings (as specified by the Unicode locale-insensitive, one-to-one lowercase mappings) are the same. That is, for two identifiers to be considered different under the CLS they shall differ in more than simply their case. However, in order to override an inherited definition the CLI requires the precise encoding of the original declaration be used.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.DistinctNames">
 <summary>5: All names introduced in a CLS-compliant scope shall be distinct independent of kind, except where the names are identical and resolved via overloading. That is, while the CTS allows a single type to use the same name for a method and a field, the CLS does not.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoOverloadByReturnType">
 <summary>6: Fields and nested types shall be distinct by identifier comparison alone, even though the CTS allows distinct signatures to be distinguished. Methods, properties, and events that have the same name (by identifier comparison) shall differ by more than just the return type, except as specified in CLS Rule 39.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.EnumSructure">
 <summary>7: The underlying type of an enum shall be a built-in CLS integer type, the name of the field shall be "value__", and that field shall be marked RTSpecialName.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.Flags">
 <summary>8: There are two distinct kinds of enums, indicated by the presence or absence of the <see cref="T:System.FlagsAttribute"/> (see Partition IV) custom attribute. One represents named integer values; the other represents named bit flags that can be combined to generate an unnamed value. The value of an enum is not limited to the specified values.</summary>
 <remarks>Violation of this rule is never reported</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.EnumMembers">
 <summary>9: Literal static fields (see §8.6.1) of an enum shall have the type of the enum itself.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoChangeOfAccessWhenOverrideing">
 <summary>10: Accessibility shall not be changed when overriding inherited methods, except when overriding a method inherited from a different assembly with accessibility family-or-assembly. In this case, the override shall have accessibility family.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.Signature">
 <summary>11: All types appearing in a signature shall be CLS-compliant. All types composing an instantiated generic type shall be CLS-compliant.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.Visibility">
 <summary>12: The visibility and accessibility of types and members shall be such that types in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible. For example, a public method that is visible outside its assembly shall not have an argument whose type is visible only within the assembly. The visibility and accessibility of types composing an instantiated generic type used in the signature of any member shall be visible and accessible whenever the member itself is visible and accessible. For example, an instantiated generic type present in the signature of a member that is visible outside its assembly shall not have a generic argument whose type is visible only within the assembly.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.ValueOfLiteral">
 <summary>13: The value of a literal static is specified through the use of field initialization metadata (see Partition II). A CLS-compliant literal must have a value specified in field initialization metadata that is of exactly the same type as the literal (or of the underlying type, if that literal is an enum).</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoTypedReferences">
 <summary>14: Typed references are not CLS-compliant.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.CallingConvention">
 <summary>15: The vararg constraint is not part of the CLS, and the only calling convention supported by the CLS is the standard managed calling convention.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.Arrays">
 <summary>16: Arrays shall have elements with a CLS-compliant type, and all dimensions of the array shall have lower bounds of zero. Only the fact that an item is an array and the element type of the array shall be required to distinguish between overloads. When overloading is based on two or more array types the element types shall be named types.</summary>
 <remarks>This rule is checked only for 1-dimensional arrays</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoUnmanagedPointer">
 <summary>17: Unmanaged pointer types are not CLS-compliant.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoIncompliantMembersInInterfaces">
 <summary>18: CLS-compliant interfaces shall not require the definition of non-CLS compliant methods in order to implement them.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoStaticMembersAndFieldsInInterfaces">
 <summary>19: CLS-compliant interfaces shall not define static methods, nor shall they define fields.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoNeedToImplementIncompliantMember">
 <summary>20: CLS-compliant classes, value types, and interfaces shall not require the implementation of non-CLS-compliant members.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.CallBaseClassCTor">
 <summary>21: An object constructor shall call some class constructor of its base class before any access occurs to inherited instance data. (This does not apply to value types, which need not have constructors.)</summary>
 <remarks>This rule is not checked</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoCallsToCTor">
 <summary>22: An object constructor shall not be called except as part of the creation of an object, and an object shall not be initialized twice.</summary>
 <remarks>This rule is not checked</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoIncompliantBase">
 <summary>23: System.Object is CLS-compliant. Any other CLS-compliant class shall inherit from a CLS-compliant class.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.SpecialNameGetterAndSetter">
 <summary>24: The methods that implement the getter and setter methods of a property shall be marked SpecialName in the metadata.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.GetterAndSetterSameAccess">
 <summary>25: No longer used.</summary>
 <remarks>In an earlier version of this standard, this rule stated “The accessibility of a property and of its accessors shall be identical.” The removal of this rule allows, for example, public access to a getter while restricting access to the setter.
 <para>Violation of this rule is never reported</para></remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.SameKindOfGetterAndSetter">
 <summary>26: A property’s accessors shall all be static, all be virtual, or all be instance.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.PropertyType">
 <summary>27: The type of a property shall be the return type of the getter and the type of the last argument of the setter. The types of the parameters of the property shall be the types of the parameters to the getter and the types of all but the final parameter of the setter. All of these types shall be CLScompliant, and shall not be managed pointers (i.e., shall not be passed by reference).</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.PropertyNaming">
 <summary>28: Properties shall adhere to a specific naming pattern. See §10.4. The SpecialName attribute referred to in CLS rule 24 shall be ignored in appropriate name comparisons and shall adhere to identifier rules. A property shall have a getter method, a setter method, or both.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.SpecialNameEvent">
 <summary>29: The methods that implement an event shall be marked SpecialName in the metadata.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.EventAccessibility">
 <summary>30: The accessibility of an event and of its accessors shall be identical.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.AddAndRemove">
 <summary>31: The add and remove methods for an event shall both either be present or absent.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.AddAndRemoveParameters">
 <summary>32: The add and remove methods for an event shall each take one parameter whose type defines the type of the event and that shall be derived from System.Delegate.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.EventNaming">
 <summary>33: Events shall adhere to a specific naming pattern. See §10.4. The SpecialName attribute referred to in CLS rule 29 shall be ignored in appropriate name comparisons and shall adhere to identifier rules.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.AttributeValues">
 <summary>34: The CLS only allows a subset of the encodings of custom attributes. The only types that shall appear in these encodings are (see Partition IV): <see cref="T:System.Type"/>, <see cref="T:System.String"/>, <see cref="T:System.Char"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, and any enumeration type based on a CLS-compliant base integer type.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoModReq">
 <summary>35: The CLS does not allow publicly visible required modifiers (modreq, see Partition II), but does allow optional modifiers (modopt, see Partition II) it does not understand.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoGlobalMembers">
 <summary>36: Global static fields and methods are not CLS-compliant.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.OverloadOnlyPropertiesAndMethods">
 <summary>37: Only properties and methods can be overloaded.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.OverloadingDistinction">
 <summary>38: Properties and methods can be overloaded based only on the number and types of their parameters, except the conversion operators named op_Implicit and op_Explicit, which can also be overloaded based on their return type.</summary>
 <remarks>Violation of this rule is reported only for op_Implicit and op_Explicit otheriwise <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.DistinctNames"/> (5) or <see cref="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoOverloadByReturnType"/> (6) is reported</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.AlternativeToOpImplicitAndOpExplicit">
 <summary>39: If either op_Implicit or op_Explicit is provided, an alternate means of providing the coercion shall be provided.</summary>
 <remarks>This rule is not checked</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.ThrowOnlyExceptions">
 <summary>40: Objects that are thrown shall be of type System.Exception or a type inheriting from it. Nonetheless, CLS-compliant methods are not required to block the propagation of other types of exceptions.</summary>
 <remarks>This rule is not checked</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.AttributeType">
 <summary>41: Attributes shall be of type System.Attribute, or a type inheriting from it.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NestedGenericTypes">
 <summary>42: Nested types shall have at least as many generic parameters as the enclosing type. Generic parameters in a nested type correspond by position to the generic parameters in its enclosing type.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.GenericTypeName">
 <summary>43: The name of a generic type shall encode the number of type parameters declared on the non-nested type, or newly introduced to the type if nested, according to the rules defined above.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NestedGenricTypeConstraints">
 <summary>44: A generic type shall redeclare sufficient constraints to guarantee that any constraints on the base type, or interfaces would be satisfied by the generic type constraints.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.NoClsIncompliantConstraints">
 <summary>45: Types used as constraints on generic parameters shall themselves be CLS-compliant.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.GenericInstanceVisibilityAndAccessibility">
 <summary>46: The visibility and accessibility of members (including nested types) in an instantiated generic type shall be considered to be scoped to the specific instantiation rather than the generic type declaration as a whole. Assuming this, the visibility and accessibility rules of CLS rule 12 still apply.</summary>
 <remarks>This rule is not checked</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.GenericAbstractMethodsHaveDefaultImplementation">
 <summary>47: For each abstract or virtual generic method, there shall be a default concrete (nonabstract) implementation.</summary>
 <remarks>This rule is not checked</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.GenericMethodsThatBecomeIndistinguishable">
 <summary>48: If two or more CLS-compliant methods declared in a type have the same name and, for a specific set of type instantiations, they have the same parameter and return types, then all these methods shall be semantically equivalent at those type instantiations.</summary>
 <remarks>This rule is not checked</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.AttributeUsageViolation">
 <summary>Attribute usage is violated. This is not CLS rule.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.CLSIncompliantAttribute">
 <summary>CSL-incompliant attribute is used. This is not violation of any CLS rule.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.CannotAccessCustomAttributeData">
 <summary>Custom attribute data cannot be accessed because <see cref="T:System.ICustomFormatter"/> is neither <see cref="T:System.Reflection.Assembly"/> nor <see cref="T:System.Reflection.Module"/> nor <see cref="T:System.Reflection.MemberInfo"/> nor <see cref="T:System.Reflection.ParameterInfo"/>. You will unlikely encounter this warning.</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.CLSRule.Error">
 <summary>An error is encountered when checking certain item. This is not CLS rule.</summary>
</member>
<member name="E:Tools.TestsT.CLSComplianceChecker.Violation">
 <summary>Raised when CLS rules is violated or internal check is violated or error in verified piece of code occurs</summary>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.OnViolation(System.String,Tools.TestsT.CLSComplianceChecker.CLSRule,System.Reflection.ICustomAttributeProvider,System.Exception)">
 <summary>Raises the <see cref="E:Tools.TestsT.CLSComplianceChecker.Violation"/> event</summary>
 <param name="Message">Error message describint the problem</param>
 <param name="Rule">Identifies rule being broken or cause of error condition</param>
 <param name="Item">Item which caused the rule to be broken or error condition to be met</param>
 <param name="Exception">In case of error, contains exception that caused the error condition; null otherwise</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Message"/> or <paramref name="Item"/> is null</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Rule"/> is not member of <see cref="T:Tools.TestsT.CLSComplianceChecker.CLSRule"/></exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.Check(System.Reflection.Assembly)">
 <summary>Checks assemby for CLS compliance</summary>
 <param name="Assembly">Assebly to check</param>
 <returns>Ture if assembly meets CLS rules. Returns tur even when assembly is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Assembly"/> is null</exception>
 <remarks>Actual violations of CLS rules (if any) are reported via the <see cref="E:Tools.TestsT.CLSComplianceChecker.Violation"/> event.</remarks>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.SafeEquals``1(``0,``0)">
 <summary>Calls <see cref="M:System.Object.Equals(System.Object)"/> in exception-safe way</summary>
 <typeparam name="T">Type of objects to compare</typeparam>
 <param name="a">An object</param>
 <param name="b">An object</param>
 <returns><paramref name="a"/>.<see cref="M:System.Object.Equals(System.Object)">Equals</see>(<paramref name="b"/>); false whrn it throws an exception; true when both - <paramref name="a"/> and <paramref name="b"/> are null; false when only <paramref name="a"/> is null.</returns>
 <remarks>When <paramref name="b"/> is null, it is passed to <paramref name="a"/>.<see cref="M:System.Object.Equals(System.Object)">Equals</see></remarks>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.GetItemClsCompliance(System.Reflection.ICustomAttributeProvider)">
 <summary>Test if item is CLS - Compliant</summary>
 <param name="Item">Item to test. Should be <see cref="T:System.Reflection.Assembly"/>, <see cref="T:System.Reflection.Module"/> or <see cref="T:System.Reflection.MemberInfo"/></param>
 <returns>True if <paramref name="Item"/> is declared to be CLS-compliant; false if it is not. It has either attached <see cref="T:System.CLSCompliantAttribute"/> or information is inherited; false is also returned when information cannot be got due to error while obtaining attributes. For <see cref="T:System.TypedReference"/> returns alawys false.</returns>
 <remarks>When more <see cref="T:System.CLSCompliantAttribute">CLSCompliantAttributes</see> are attached to single item they are and-ed.
 <para>In case <paramref name="Item"/> is <see cref="T:System.Type"/> and it is pointer, array or reference, examines its element instead (for pointer to pointer, array of array, array of pointers etc. examines element instead).</para>
 <para>When <paramref name="Item"/> is <see cref="T:System.Reflection.MethodInfo"/>, has no <see cref="T:System.CLSCompliantAttribute"/> attached and belongs to property or event, CLS-compliance of the property or the event is returned.</para>
 </remarks>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.CheckAttributes(System.Reflection.ICustomAttributeProvider)">
 <summary>Checks if attributes applied onto given item are valid for such item</summary>
 <param name="Item">Item to check attributes of</param>
 <returns>True if attribute usage was not violated; false if it was. Also returns true when part of chekc was skipped due to error.</returns>
 <remarks>Detailed informations about rule violations and errors are provided via <see cref="E:Tools.TestsT.CLSComplianceChecker.Violation"/>. This method does not check any CLS rules.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Item"/> is null</exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.Check(System.Reflection.Module)">
 <summary>Checks module for CLS compliance</summary>
 <param name="Module">Assebly to check</param>
 <returns>Ture if module meets CLS rules. Returns tur even when module is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
 <remarks>Actual violations of CLS rules (if any) are reported via the <see cref="E:Tools.TestsT.CLSComplianceChecker.Violation"/> event.</remarks>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.CheckInternal(System.Reflection.Module)">
 <summary>Internally checks module for CLS compliance</summary>
 <param name="Module">Assebly to check</param>
 <returns>Ture if module meets CLS rules. Returns tur even when module is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Module"/> is null</exception>
 <remarks>Dufference from <see cref="M:Tools.TestsT.CLSComplianceChecker.Check(System.Reflection.Assembly)"/> is that this function does not call <see cref="M:Tools.TestsT.CLSComplianceChecker.CheckTypeNames(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)"/>.</remarks>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.Check(System.Type)">
 <summary>Checks type for CLS compliance</summary>
 <param name="Type">TYpe to check</param>
 <returns>Ture if type meets CLS rules. Returns tur even when type is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <remarks>Actual violations of CLS rules (if any) are reported via the <see cref="E:Tools.TestsT.CLSComplianceChecker.Violation"/> event.</remarks>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.GenericConstraintFromParentToNested(System.Type,System.Type,System.Type)">
 <summary>Gets generic type type argument constraint and replaces all references (including <paramref name="ConstraintType"/> itself) to any type parameter of parent type with reference to corresponding type parameter of nested type</summary>
 <param name="ConstraintType">Type constraint to replace. It is constraint specified on <paramref name="ParentType"/></param>
 <param name="ParentType">Parent type of <paramref name="NestedType"/></param>
 <param name="NestedType">Nested type <paramref name="ConstraintType"/> comes from</param>
 <returns><paramref name="ConstraintType"/> transferred form <paramref name="ParentType"/> to <paramref name="NestedType"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="ConstraintType"/>, <paramref name="ParentType"/> or <paramref name="NestedType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="NestedType"/>.<see cref="P:System.Type.DeclaringType">DeclaringType</see> is not <paramref name="ParentType"/>.</exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.TestEnum(System.Type)">
 <summary>Tests if enumeration is CLS-compliant</summary>
 <param name="Type">Enum type to test</param>
 <returns>True if enumeration is CLS-compliant; false otherwise</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Type"/> is not enumeration</exception>
</member>
<member name="T:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature">
 <summary>Stores member singature and allows it comparison (via <see cref="M:System.Object.Equals(System.Object,System.Object)"/>) for CLS-uniqueness purposes</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature.Name">
 <summary>Name of member</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature.Types">
 <summary>Types of atributes</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature.nGpars">
 <summary>Number fo generic parameters</summary>
 <remarks>Only for generic methods</remarks>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature.ReturnType">
 <summary>Type of return type. Only for instance CTor, op_Implicit and op_Explicit</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature.Original">
 <summary>Original meber</summary>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature.#ctor(System.Reflection.MemberInfo)">
 <summary>CTor</summary>
 <param name="Member">Memer to create instance for</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature.AddReturnType">
 <summary>Returns new instance created by adding return type to current instace (if applicable)</summary>
 <returns>Return-type-aware instance</returns>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
 <exception cref="T:System.NullReferenceException">The 
 <paramref name="obj" /> parameter is null.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.MemberCLSSignature.GetHashCode">
 <summary>Serves as a hash function for a particular type.</summary>
 <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.SearchForCompliantMembers(System.Type)">
 <summary>Searches for CLS-compliant members</summary>
 <param name="Type">Type to search for CLS-compliant members in</param>
 <returns>Ture if any CLS-complaint-marked member is found; false otherwise</returns>
 <remarks>USe to search for CLS-compliant memberis in CLS-incompliant types</remarks>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.Check(System.Reflection.MemberInfo)">
 <summary>Checks member for CLS compliance</summary>
 <param name="Member">Member to check</param>
 <returns>Ture if member meets CLS rules. Returns tur even when member is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <remarks>Actual violations of CLS rules (if any) are reported via the <see cref="E:Tools.TestsT.CLSComplianceChecker.Violation"/> event.</remarks>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.CheckInternal(System.Reflection.MemberInfo)">
 <summary>Interbally checks member for CLS compliance</summary>
 <param name="Member">Member to check</param>
 <returns>Ture if member meets CLS rules. Returns true even when member is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> is null</exception>
 <version version="1.5.3">Returns true also when <paramref name="Member"/> is neither of following: <see cref="T:System.Type"/>, <see cref="T:System.Reflection.PropertyInfo"/>, <see cref="T:System.Reflection.EventInfo"/>, <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.MethodInfo"/>.</version>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.Check(System.Reflection.PropertyInfo)">
 <summary>Interbally checks property for CLS compliance</summary>
 <param name="Property">Property to check</param>
 <returns>Ture if property meets CLS rules. Returns tur even when property is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Property"/> is null</exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.Check(System.Reflection.EventInfo)">
 <summary>Interbally checks Event for CLS compliance</summary>
 <param name="Event">Event to check</param>
 <returns>Ture if Event meets CLS rules. Returns tur even when Event is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Event"/> is null</exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.Check(System.Reflection.MethodInfo)">
 <summary>Interbally checks Method for CLS compliance</summary>
 <param name="Method">Method to check</param>
 <returns>Ture if Method meets CLS rules. Returns tur even when Method is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Method"/> is null</exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.CheckGenericInstance(System.Type,System.Reflection.ICustomAttributeProvider,Tools.TestsT.CLSComplianceChecker.CLSRule)">
 <summary>Checks if all types pased to instantiated generic type are declared to be CLS compliant</summary>
 <param name="inst">Type to check generic parameters of</param>
 <param name="On">Element to report violation on</param>
 <param name="Rule">CLS rule to report violation of</param>
 <returns>True if all the generic parameters are declared to be CLS-compliant (including nested type parameters); false otherwise</returns>
 <remarks>If <paramref name="inst"/> is array, pointer or rerefernce, examines its element type instead. For array of arrays, pointer to pointer, pointer to array etc. examines the inner most element instead.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="inst"/> is null or <paramref name="On"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="inst"/>.<see cref="P:System.Type.IsGenericType">IsGenericType</see> is false</exception>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="Rule"/> is not member of <see cref="T:Tools.TestsT.CLSComplianceChecker.CLSRule"/></exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.CheckTypeReference(System.Type,System.Reflection.ICustomAttributeProvider,System.Boolean,Tools.TestsT.CLSComplianceChecker.CLSRule)">
 <summary>Checks if type reference is CLS-compliant</summary>
 <param name="Type">Type being referenced</param>
 <param name="On">Repports violations on</param>
 <param name="ReportGetItemClsCompliance">False not to report violation by <see cref="M:Tools.TestsT.CLSComplianceChecker.GetItemClsCompliance(System.Reflection.ICustomAttributeProvider)"/></param>
 <returns>True if type is CLS-compliant (declarativelly); false if it is not</returns>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.Check(System.Reflection.FieldInfo)">
 <summary>Interbally checks Field for CLS compliance</summary>
 <param name="Field">Field to check</param>
 <returns>Ture if Field meets CLS rules. Returns tur even when Field is marked as CLS-incompliant, because this does not mean CLS-rules violation.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Field"/> is null</exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.CLSAttributeCheck(System.Reflection.ICustomAttributeProvider)">
 <summary>Checks if atributes applied on item are all CLS-compliant</summary>
 <param name="Item">Item to cehck attributes of</param>
 <returns>True if all the attributes are CLS-compliant; false otheriwise. Returns tru if there are no attributes.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Item"/> is null</exception>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.IdentifierRegEx">
 <summary>Regulare expersssion to check if identifier name is valid</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.IdentifierNsRegEx">
 <summary>Regulare expersssion to check if identifier name including namespace is valid</summary>
</member>
<member name="F:Tools.TestsT.CLSComplianceChecker.gTypeNameRegEx">
 <summary>Regular expression if type name seems to encode generic arguments</summary>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.DoCommonTest(System.Reflection.MemberInfo)">
 <summary>Peprforms common CLS-compliance test on member</summary>
 <param name="Item">Member to do tests on</param>
 <returns>True if no CLS-violation was detected; false otherwise.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Item"/> is null</exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.CheckTypeNames(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
 <summary>Checks uniqueness of type names amongs given enumerations</summary>
 <param name="Types">Types to verify uniqueness of names of</param>
 <param name="fullname">True to use <see cref="P:System.Type.FullName"/>, false to use <see cref="P:System.Reflection.MemberInfo.Name"/>. Set true for types in assemblies/modules; false otherwise. When true, but <see cref="P:System.Type.FullName"/> is null, <see cref="P:System.Reflection.MemberInfo.Name"/> is used instead.</param>
 <returns>True if names of all types are unique (in spicte of CLS)</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Types"/> is null</exception>
</member>
<member name="M:Tools.TestsT.CLSComplianceChecker.CheckTypeAcessibility(System.Reflection.MemberInfo,System.Type)">
 <summary>Check if type exposed by member has enough accessibility</summary>
 <param name="Member">Member exposing <paramref name="Type"/></param>
 <param name="Type">Type exposed by <paramref name="Member"/></param>
 <returns>True if <paramref name="Type"/> has enough accessibility to be exposed by <paramref name="Member"/>; false otherwise</returns>
 <remarks>Does not check exporure rules violations inside single assembly. Check array/pointer/reference/generic elements as well.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Member"/> or <paramref name="Type"/> is null</exception>
</member>
<member name="T:Tools.TestsT.StaticPropertiesTest">
 <summary>This class tests if static properties of given type or types in given assembly/module/namespace returns value without throwing an exception.</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly">Class introduced</version>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest._Target">
 <summary>Target of test</summary>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.#ctor(System.Type)">
 <summary>CTor from type</summary>
 <param name="Type">Type to be tested</param>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.#ctor(System.Reflection.Assembly)">
 <summary>CTor from assembly</summary>
 <param name="Assembly">Assembly to test types from</param>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.#ctor(System.Reflection.Module)">
 <summary>CTor from module</summary>
 <param name="Module">Module to test types from</param>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.#ctor(Tools.ReflectionT.NamespaceInfo)">
 <summary>CTor from namespace</summary>
 <param name="Namespace">Namespace to test types from</param>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.RunTest">
 <summary>Performs a test</summary>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.TestAssembly(System.Reflection.Assembly)">
 <summary>Tests modules from assembly</summary>
 <param name="asm">Assembly to test</param>
 <remarks>This implementation simply calls <see cref="M:Tools.TestsT.StaticPropertiesTest.TestModule(System.Reflection.Module)"/> for each module in <paramref name="asm"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="asm"/> is null</exception>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.TestModule(System.Reflection.Module)">
 <summary>Tests types from module</summary>
 <param name="mod">Module to test types from</param>
 <remarks>This implementation takes all typef from module, verifies if type should be tested using <see cref="M:Tools.TestsT.StaticPropertiesTest.ShouldTestType(System.Type)"/> and if so, calls <see cref="M:Tools.TestsT.StaticPropertiesTest.TestType(System.Type)"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="mod"/> is null</exception>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.TestNamespce(Tools.ReflectionT.NamespaceInfo)">
 <summary>Tests types from namespace</summary>
 <param name="ns">Namespace to test types from</param>
 <remarks>This implementation takes all typef from namespace, verifies if type should be tested using <see cref="M:Tools.TestsT.StaticPropertiesTest.ShouldTestType(System.Type)"/> and if so, calls <see cref="M:Tools.TestsT.StaticPropertiesTest.TestType(System.Type)"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="ns"/> is null</exception>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.ShouldTestType(System.Type)">
 <summary>Determines if given type should be tested</summary>
 <param name="t">Type to determiny if it should be tested</param>
 <returns>True when type shoudl be tested; false when it shoudl not be tested; For <see cref="P:System.Type.IsGenericTypeDefinition">generit type definitions</see> returns always false.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="t"/> is null</exception>
 <remarks>This implementation utlizes <see cref="P:Tools.TestsT.StaticPropertiesTest.TypeFlags"/></remarks>
</member>
<member name="T:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes">
 <summary>Specified flags for filtering <see cref="T:System.Type"/> by its <see cref="P:System.Type.Attributes"/></summary>
 <remarks>There are 4 major groups of flags masked by <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllVisibilty"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.VirtualAll"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllClassTypes"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllNameTypes"/>. Setting all flags in group to true has same effect as setting them to zero.</remarks>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.none">
 <summary>Specifies no filter. If specific group (masked by <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllVisibilty"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.VirtualAll"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllClassTypes"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllNameTypes"/>)
 AND-ed with actual value is <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.none"/> (zero), it is ignored when detrmining filter.</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Public">
 <summary>Not nested public types (<see cref="F:System.Reflection.TypeAttributes.Public"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Assembly">
 <summary>Not nested not public types (<see cref="F:System.Reflection.TypeAttributes.NotPublic"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedPublic">
 <summary>Nested public types (<see cref="F:System.Reflection.TypeAttributes.NestedPublic"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamily">
 <summary>Nested family (protected) types (<see cref="F:System.Reflection.TypeAttributes.NestedFamily"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedAssembly">
 <summary>Nested assembly (friend) types (<see cref="F:System.Reflection.TypeAttributes.NestedAssembly"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamilyAndAssembly">
 <summary>Nested family-and-assembly types (<see cref="F:System.Reflection.TypeAttributes.NestedFamANDAssem"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamilyOrAssembly">
 <summary>Nested family-or-assembly (protected friend) types (<see cref="F:System.Reflection.TypeAttributes.NestedFamORAssem"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedPrivate">
 <summary>Nested private types (<see cref="F:System.Reflection.TypeAttributes.NestedPrivate"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NotNested">
 <summary>Not nested types (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Public"/> and <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Assembly"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Nested">
 <summary>All nested types (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedPublic"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamily"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedAssembly"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamilyAndAssembly"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamilyOrAssembly"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedPrivate"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllPublic">
 <summary>All publicly visible types (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Public"/> and <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedPublic"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllAssembly">
 <summary>All assembly(friend)-visible types (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Assembly"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedAssembly"/> and <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamilyOrAssembly"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedAndFamily">
 <summary>All nested falimy(protected)-visible types (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamily"/> and <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamilyOrAssembly"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedAndAssembly">
 <summary>All nested asembly(friend)-visible types (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedAssembly"/> and <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NestedFamilyOrAssembly"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllVisibilty">
 <summary>All possible visibilities (visibility mask). Specifying this has the same effect as leaving visibility group at zero. (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NotNested"/> and <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Nested"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Abstract">
 <summary>Abstract class (<see cref="F:System.Reflection.TypeAttributes.Abstract"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NonAbstract">
 <summary>Non-abstract class</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Sealed">
 <summary>Sealed (NotInheritable in Visual Basic) class (<see cref="F:System.Reflection.TypeAttributes.Sealed"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.VirtualAll">
 <summary>All possible virtualization flags (virtual mask). Specifying this has the same effect as leaving virtual group at zero. (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Abstract"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NonAbstract"/> and <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.VirtualAll"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Class">
 <summary>Class (reference type; <see cref="F:System.Reflection.TypeAttributes.Class"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Structure">
 <summary>Structure (value type; <see cref="P:System.Type.IsValueType"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Interface">
 <summary>Interface (<see cref="F:System.Reflection.TypeAttributes.Interface"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllClassTypes">
 <summary>All possible class types (class type mask). Specifying this has the same efect as leaving type group at zero. (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Class"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Structure"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.Interface"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.SpecialName">
 <summary>Type with special name (<see cref="F:System.Reflection.TypeAttributes.SpecialName"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.RTSpecialName">
 <summary>Type with runtime-special name (<see cref="F:System.Reflection.TypeAttributes.RTSpecialName"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NoSpecialName">
 <summary>Type without special name</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.AllNameTypes">
 <summary>All possible name types (name mask). Specifying this has the same effect as leaving name type group at zero. (or-combination of <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.SpecialName"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.RTSpecialName"/> and <see cref="F:Tools.TestsT.StaticPropertiesTest.TypeBindingAttributes.NoSpecialName"/>)</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest._TypeFlags">
 <summary>Contains value of the <see cref="P:Tools.TestsT.StaticPropertiesTest.TypeFlags"/> property</summary>
</member>
<member name="P:Tools.TestsT.StaticPropertiesTest.TypeFlags">
 <summary>Gets or sets flags indicating which types hsould be tested.</summary>
 <remarks>This property is ignored when this instance tests only single type.</remarks>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest._PropertyBindingFlags">
 <summary>Conzains value of the <see cref="P:Tools.TestsT.StaticPropertiesTest.PropertyBindingFlags"/> property</summary>
</member>
<member name="P:Tools.TestsT.StaticPropertiesTest.PropertyBindingFlags">
 <summary>Gets or sets flags indicating which properties should be tested</summary>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.TestType(System.Type)">
 <summary>Tests all static properties of given type</summary>
 <param name="t">Type to test static properties from</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="t"/> is null</exception>
 <remarks>This implementation gets properties of type utilizing <see cref="P:Tools.TestsT.StaticPropertiesTest.PropertyBindingFlags"/> and passes then to <see cref="M:Tools.TestsT.StaticPropertiesTest.TestProperty(System.Reflection.PropertyInfo)"/>.</remarks>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.TestProperty(System.Reflection.PropertyInfo)">
 <summary>Test single property</summary>
 <param name="prp">Property to be tested</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="prp"/> is null</exception>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.OnError(System.Reflection.PropertyInfo,Tools.TestsT.StaticPropertiesTest.TestStages,System.Exception)">
 <summary>Raises the <see cref="E:Tools.TestsT.StaticPropertiesTest.Error"/> event</summary>
 <param name="Property">Property being tested</param>
 <param name="Stage">Stage of testing</param>
 <param name="ex">Exception thrown</param>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest._SuccessCount">
 <summary>Contains value of the <see cref="P:Tools.TestsT.StaticPropertiesTest.SuccessCount"/> property</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest._ErrorCounts">
 <summary>Count of errors divided by stages</summary>
</member>
<member name="P:Tools.TestsT.StaticPropertiesTest.SuccessCount">
 <summary>Gets count of successfully tested properties</summary>
 <returns>Count of successfully tested properties</returns>
</member>
<member name="P:Tools.TestsT.StaticPropertiesTest.ErrorsCount">
 <summary>Gets count of properties tested with error/warning</summary>
 <returns>Count of properties tested with error/warning</returns>
</member>
<member name="P:Tools.TestsT.StaticPropertiesTest.PropertiesTestedCount">
 <summary>Gets count of tested properties</summary>
 <returns>Count of tested properties</returns>
</member>
<member name="P:Tools.TestsT.StaticPropertiesTest.PropertyErrorsCount">
 <summary>Gets count of errors at <see cref="F:Tools.TestsT.StaticPropertiesTest.TestStages.GetterBeingInvoked"/> stage</summary>
 <returns>Count of errors at <see cref="F:Tools.TestsT.StaticPropertiesTest.TestStages.GetterBeingInvoked"/> stage</returns>
</member>
<member name="P:Tools.TestsT.StaticPropertiesTest.ErrorsCount(Tools.TestsT.StaticPropertiesTest.TestStages)">
 <summary>Gets count of errors by stage</summary>
 <returns>Count of errors in stage <paramref name="Stage"/></returns>
 <param name="Stage">Stage to get count of errors in</param>
</member>
<member name="E:Tools.TestsT.StaticPropertiesTest.Error">
 <summary>Raised when error occurs</summary>
 <remarks>Some only <see cref="F:Tools.TestsT.StaticPropertiesTest.TestStages.GetterBeingInvoked"/> is really serious error. Other errors are rather warnings.</remarks>
</member>
<member name="E:Tools.TestsT.StaticPropertiesTest.Success">
 <summary>Raised when no error (warning) occurs during test of single property</summary>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.OnError(Tools.TestsT.StaticPropertiesTest.TestErrorEventArgs)">
 <summary>Raises the <see cref="E:Tools.TestsT.StaticPropertiesTest.Error"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.OnSuccess(Tools.TestsT.StaticPropertiesTest.TestSuccessEventArgs)">
 <summary>Raises the <see cref="E:Tools.TestsT.StaticPropertiesTest.Success"/> event</summary>
 <param name="e">Event arguments</param>
</member>
<member name="T:Tools.TestsT.StaticPropertiesTest.TestErrorEventArgs">
 <summary>Event arguments of the <see cref="E:Tools.TestsT.StaticPropertiesTest.Error"/> event</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestErrorEventArgs.Exception">
 <summary>Exception being thrown. Can be null. Only <see cref="F:Tools.TestsT.StaticPropertiesTest.TestStages.GetGetMethod"/>, <see cref="F:Tools.TestsT.StaticPropertiesTest.TestStages.InvokeGetter"/> and <see cref="F:Tools.TestsT.StaticPropertiesTest.TestStages.GetterBeingInvoked"/> carrys error.</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestErrorEventArgs.Stage">
 <summary>Stage of testing</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestErrorEventArgs.Property">
 <summary>Property being tested</summary>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.TestErrorEventArgs.#ctor(System.Reflection.PropertyInfo,Tools.TestsT.StaticPropertiesTest.TestStages,System.Exception)">
 <summary>CTor</summary>
 <param name="Property">Property being tested</param>
 <param name="Stage">Stage of testing</param>
 <param name="ex">Exception that caused this error,if any</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Property"/> is null</exception>
</member>
<member name="T:Tools.TestsT.StaticPropertiesTest.TestSuccessEventArgs">
 <summary>Event arguments of the <see cref="E:Tools.TestsT.StaticPropertiesTest.Success"/> event</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestSuccessEventArgs.Property">
 <summary>Property bing tested</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestSuccessEventArgs.Value">
 <summary>Value got from getter</summary>
</member>
<member name="M:Tools.TestsT.StaticPropertiesTest.TestSuccessEventArgs.#ctor(System.Reflection.PropertyInfo,System.Object)">
 <summary>CTor</summary>
 <param name="Property">Propertybeing tested</param>
 <param name="Value">Value got from getter</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Property"/> is null</exception>
</member>
<member name="T:Tools.TestsT.StaticPropertiesTest.TestStages">
 <summary>Identifies statges and error reasons of testing</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestStages.GetGetMethod">
 <summary>Attempt to get property getter failed because of attempt to get non-public getter was unsuccessfull due to <see cref="T:System.Security.SecurityException"/> meaning that caller doe not have right to reflect over non-public method. This does not mean that property is buggy; this means that test cannot be performed.</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestStages.HasGetMethod">
 <summary>Property begin tested has no getter method or getter method is not public and <see cref="P:Tools.TestsT.StaticPropertiesTest.PropertyBindingFlags"/> does not include <see cref="F:System.Reflection.BindingFlags.NonPublic"/>. This is rather warning then error. No exception is carried.</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestStages.IsIndexed">
 <summary>Property getter method has peremeter(s). This is rather warning tha error. Indexted properties canot be tested.</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestStages.InvokeGetter">
 <summary>Attempt to invoke getter failed fro technical reasons. This does not indicate bug in getter. For more reasons see <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])"/>.</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestStages.GetterBeingInvoked">
 <summary>There was an error during getter execution. <see cref="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])"/> has thrown an <see cref="T:System.Reflection.TargetInvocationException"/>. This may indicate bug in property being tested.</summary>
</member>
<member name="F:Tools.TestsT.StaticPropertiesTest.TestStages.ValueIsNull">
 <summary>Value returned from property is null. This is rather warning than error.</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues">
 <summary>Common values used for <see cref="T:System.ComponentModel.CategoryAttribute"/></summary>
 <remarks>
 <para>This class contains values that when used for <see cref="T:System.ComponentModel.CategoryAttribute"/> are recognized by the .NET Framework and localized to current language.</para>
 <para>You can pass these constans either directly into <see cref="T:System.ComponentModel.CategoryAttribute"/> or you can use <see cref="T:Tools.ComponentModelT.KnownCategoryAttribute"/>'s overloaded CTor that have better intellisense support.</para>
 </remarks>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <author www="http://dzonny.cz">Đonny</author>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.#ctor">
 <summary>Private in order not to pe possible to create instance or inherit from this class</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Accessibility">
 <summary>The Accessibility category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Action">
 <summary>The Action category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Appearance">
 <summary>The Appearance category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Asynchronous">
 <summary>The Asynchronous category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Behavior">
 <summary>The Behavior category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Configurations">
 <summary>The Configurations category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Data">
 <summary>The Data category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.DDE">
 <summary>The DDE category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Misc">
 <summary>The Misc category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Design">
 <summary>The Design category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.DragDrop">
 <summary>The DragDrop category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Focus">
 <summary>The Focus category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Font">
 <summary>The Font category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Format">
 <summary>The Format category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Key">
 <summary>The Key category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Layout">
 <summary>The Layout category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.List">
 <summary>The List category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Mouse">
 <summary>The Mouse category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Position">
 <summary>The Position category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Scale">
 <summary>The Scale category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Text">
 <summary>The Text category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.WindowStyle">
 <summary>The Window Style category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Colors">
 <summary>The Colors category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Display">
 <summary>The Display category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.FolderBrowsing">
 <summary>The Folder Browsing category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Items">
 <summary>The Items category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Private">
 <summary>The Private category</summary>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.PropertyChanged">
 <summary>The Property Chenged category</summary>
</member>
<member name="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value">
 <summary>Represents known value of <see cref="T:System.ComponentModel.CategoryAttribute"/> as defined in <see cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues"/></summary>
 <remarks>This structure is only hint for intellisense</remarks>
 <completionlist cref="T:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues"/>
</member>
<member name="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value">
 <summary>Name of category this instance represents</summary>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.op_Implicit(System.String)~Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value">
 <summary>Converts <see cref="T:System.String"/> to <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/></summary>
 <param name="a">A <see cref="T:System.String"/></param>
 <returns>New <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/> whichs <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/> is <paramref name="a"/></returns>
</member>
<member name="M:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.op_Implicit(Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value)~System.String">
 <summary>Converts <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/> to <see cref="T:System.String"/></summary>
 <param name="a">A <see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value"/></param>
 <returns><paramref name="a"/>.<see cref="F:Tools.WindowsT.FormsT.UtilitiesT.CategoryAttributeValues.Value.Value">Value</see></returns>
</member>
<member name="T:Tools.XmlT.LinqT.Extensions">
 <summary>Provides extension methods related to <see cref="N:System.Xml.Linq"/></summary>
 <version version="1.5.3" stage="Nightly">Module made public</version>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.HasSameName(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
 <summary>Retruns value indicating if two <see cref="T:System.Xml.Linq.XElement">XElements</see> has same name (this means <see cref="P:System.Xml.Linq.XName.LocalName"/> are same as well as <see cref="P:System.Xml.Linq.XName.NamespaceName"/>.</summary>
 <param name="el">A <see cref="T:System.Xml.Linq.XElement"/> to test name of</param>
 <param name="other">A <see cref="T:System.Xml.Linq.XElement"/> to compare name with</param>
 <returns>Ture if <paramref name="el"/> and <paramref name="other"/> have same <see cref="P:System.Xml.Linq.XElement.Name"/></returns>
 <seealso cref="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)"/>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.InterpretAsName(System.Xml.Linq.XElement,System.String)">
 <summary>Converts given string to <see cref="T:System.Xml.Linq.XName"/> in context of given <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Element">Element which provides context for namespace prefixes definition</param>
 <param name="Name">Name if form "<c>prefix:local-name</c>" or "<c>local-name</c>" to get <see cref="T:System.Xml.Linq.XName"/> for</param>
 <returns><see cref="T:System.Xml.Linq.XName"/> obtained by interpreting <paramref name="Name"/> as XML qualified name in context of <paramref name="Element"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="Name"/> contains namespace prefix, but it is not known in context of <paramref name="Element"/> (this exception is also thrown when name contains colon (:) and sub-string al left side of it is not valid name for prefix.</exception>
 <exception cref="T:System.Xml.XmlException"><paramref name="Name"/> is invalid XML name.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Element"/> or <paramref name="Name"/> is null</exception>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.AsName(System.Xml.Linq.XAttribute)">
 <summary>Interprets value of given <see cref="T:System.Xml.Linq.XAttribute"/> as <see cref="T:System.Xml.Linq.XName"/></summary>
 <param name="Attr">Attribute to interpret as <see cref="T:System.Xml.Linq.XName"/> value of</param>
 <returns>Value of the <paramref name="Attr"/> attribute interpreted as XML qualified name i context of its parent element</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Attr"/> is null</exception>
 <seelaso cref="M:Tools.XmlT.LinqT.Extensions.InterpretAsName(System.Xml.Linq.XElement,System.String)"/>
 <exception cref="T:System.ArgumentException"><paramref name="Attr"/> has no parent element -or- Value of <paramref name="Attr"/> contains namespace prefix but is is invalid (ill-formed) or unknown in context of its parent element.</exception>
 <exception cref="T:System.Xml.XmlException">Value of <paramref name="Attr"/> is not valid XML name</exception>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.InnerXml(System.Xml.Linq.XElement,System.Xml.Linq.SaveOptions)">
 <summary>Gets inner XML of given XML element</summary>
 <param name="Element">Element to get inner XML of</param>
 <param name="Options">Specifies formatting behavior</param>
 <returns>XML markup as string representing all the nodes inside <paramref name="Element"/></returns>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.SetInnerXml(System.Xml.Linq.XElement,System.String)">
 <summary>Replaces inner XML of given <see cref="T:System.Xml.Linq.XElement"/> with XML loaded from given string</summary>
 <param name="Element"><see cref="T:System.Xml.Linq.XElement"/> to replace content of</param>
 <param name="InnerXML">New inner XML</param>
 <exception cref="T:System.Xml.XmlException"><paramref name="InnerXml"/> is invalid XML fragment</exception>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.CollapseInContext(System.Xml.Linq.XName,System.Xml.Linq.XElement)">
 <summary>Gets string representing given <see cref="T:System.Xml.Linq.XName"/> in XML document in context of given <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Name">Name to be represented</param>
 <param name="Context">Element providing informations about namespace prefixes</param>
 <returns>String representation of <paramref name="Name"/> in form "prefix:local-name" or "local-name" (when it is associated with default namespace and default namespace has no prefix associated)</returns>
 <exception cref="T:System.ArgumentNullException">Namespace of <paramref name="Name"/> is not defined in context of <paramref name="Context"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Context"/> or <paramref name="Name"/> is null</exception>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.CollapseName(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
 <summary>Gets string representing given <see cref="T:System.Xml.Linq.XName"/> in XML document in context of given <see cref="T:System.Xml.Linq.XElement"/></summary>
 <param name="Name">Name to be represented</param>
 <param name="Context">Element providing informations about namespace prefixes</param>
 <returns>String representation of <paramref name="Name"/> in form "prefix:local-name" or "local-name" (when it is associated with default namespace and default namespace has no prefix associated)</returns>
 <exception cref="T:System.ArgumentNullException">Namespace of <paramref name="Name"/> is not defined in context of <paramref name="Context"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="Context"/> or <paramref name="Name"/> is null</exception>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.GetNamespacePrefix(System.Xml.Linq.XElement,System.Xml.Linq.XNamespace)">
 <summary>Gets prefix of given namespace for given element. Makes it easy to disnguish if namespace is default or undefined.</summary>
 <param name="Element">Eleemnt defining scope of validity of prefix</param>
 <param name="ns">Namespace to get prefix of</param>
 <returns>Prefix of namespace <paramref name="ns"/> valid at level of <paramref name="Element"/>. <see cref="T:System.String"/> if <paramref name="ns"/> is default namespace and has no prefix associated. Null when <paramref name="ns"/> is undefined al level of <paramref name="Element"/> or higher.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Element"/> or <paramref name="ns"/> is null</exception>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.FindDefaultNamespace(System.Xml.Linq.XElement)">
 <summary>Gets default namespace valid at level of given <see cref="T:System.Xml.Linq.XElement"/> even in sutuation when <see cref="M:System.Xml.Linq.XElement.GetDefaultNamespace"/> fails.</summary>
 <param name="Element">Element to get default namespace for</param>
 <returns>Default namespace for <paramref name="Element"/></returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Element"/> is null</exception>
 <remarks>
 This function calls <paramref name="Element"/>.<see cref="M:System.Xml.Linq.XElement.GetDefaultNamespace">GetDefaultNamespace</see>.
 When it returns <see cref="P:System.Xml.Linq.XNamespace.None"/> it searches document tree from <paramref name="Element"/> upwards to root and:
 <list type="bullet">
 <item>When xmlns attribute with value of empty string is found, returns <see cref="P:System.Xml.Linq.XNamespace.None"/>.</item>
 <item>When element with name belonging to namespace for which <see cref="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)"/> does not return prefix is found, that namespace is returned.</item>
 <item>If no such condition is fullfiled and root is reached, <see cref="P:System.Xml.Linq.XNamespace.None"/> is returned.</item>
 </list>
 </remarks>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.CollapseExtendedName(System.Xml.Linq.XAttribute)">
 <summary>For attribute which's value is expanded XML name in format "{namespace-uri}local-name" collapses this name to format "prefix:local-name" (or "local-name" when namespace is default namespace and has no prefix associated).</summary>
 <param name="attr">Attribute to collapse value of</param>
 <exception cref="T:System.Xml.XmlException">Value of attribute <paramref name="attr"/> is neither valied expanded name in format "<c>{namespace-uri}local-name</c>" neither valid local name</exception>
 <exception cref="T:System.ArgumentException"><paramref name="attr"/> attribute has no parent element.</exception>
 <remarks>When <paramref name="attr"/> is null, its value is null or its value is an empty string this method exits without doing anything.</remarks>
</member>
<member name="M:Tools.XmlT.LinqT.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchema,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
 <summary>Validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
 <param name="document">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</param>
 <param name="schema">A <see cref="T:System.Xml.Schema.XmlSchema" /> to validate against.</param>
 <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null (default), throws an exception upon validation errors.</param>
 <param name="addSchemaInfo">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
 <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="document"/> or <paramref name="schema"/> is null.</exception>
 <version version="1.5.3">This method is new in version 1.5.3</version>
</member>
<member name="T:Tools.XmlT.XPathT.XPathObjectNavigator">
 <summary>Implements <see cref="T:System.Xml.XPath.XPathNavigator"/> over any object structure</summary>
 <remarks>
 <para>Pass any object to CTor of this class and peudo-XML tree structure that can be navigated using XPath will be created.</para>
 <para>
 The structure alwasy consists of root node and sequence of other nodes.
 For some spcially supported types (like <see cref="T:System.Int32"/> or <see cref="T:System.String"/>; see <seealso cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value"/> for information) the text node is created and nothing else.
 For other types if created element node with three or four attributes and elements named as properties of such type and element named value-of for items of <see cref="T:System.Collections.IEnumerable"/>.
 </para>
 <para>The attributes are:</para>
 <list type="table"><listheader><term>Attribute name</term><description>Description</description></listheader>
 <item><term>type-name</term><description>Short name of type represented by node (see <seealso cref="P:System.Reflection.MemberInfo.Name"/>)</description></item>
 <item><term>full-name</term><description>Full name of type represented by node (see <seealso cref="P:System.Type.FullName"/>)</description></item>
 <item><term>name</term><description>Name of property through which the object have been obtained. For rooth node contains <see cref="T:System.String"/></description></item>
 <item><term>enumerable</term><description>If context object of current node is <see cref="T:System.Collections.IEnumerable"/> and it is not of <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)">supported type</see> contains true; otherwise it is not present.</description></item>
 <item><term>circle-level</term><description>If same (reference equal) object as context object of current node is context object of node somewhere at parent axis of current node this pseudo-attribute contains number of levels upward (on parent axis) to such (at level closest to root) object; otherwise this pseudo-attribute is not present.</description></item>
 </list>
 <para>Example for <see cref="T:System.Collections.Generic.List`1"/></para>
 <example>
 <![CDATA[
 < type-name="List`1" full-name="System.Collections.Generic.List`1[[System.String, mscorlib, Versionb=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]" name="" enumerable="true">
     <Capacity type-name="Int32" full-name="System.Int32" name="Capacity">3</Capacity>
     <Count type-name="Int32" full-name="System.Int32" name="Count">3</Count>
     <item-of type-name="String" full-name="System.String" name="GetEnumerator">Item 1</item>
     <item-of type-name="String" full-name="System.String" name="GetEnumerator">Item 2</item>
     <item-of type-name="String" full-name="System.String" name="GetEnumerator">Item 3</item>
 </ >
 ]]>
 </example>
 Note: Root node is unnamed. Properties can be of complex types (stored as sub-trees). Order of occurence of attributes is as shown. Properties are alwas before enum items. name from enum items is always GetEnumerator. Name of node representing enum item - item-of can never be in conflict with name of property because it contains hyppen.
 <para>Definitions:</para>
 <list>
 <item><term>Current object</term><description>Object contained in <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.[Step].[Object]"/> field of current step</description></item>
 <item><term>Current step</term><description>Last item of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> collection</description></item>
 <item><term>Context object</term><description>Object produced or used by current step. Value depends on type of step
 <list><listheader><term>Type of step</term><description>Context object</description></listheader>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></term><description>Object returned by getter of current property</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></term><description>Object returned by enumerator at its current position</description></item>
 <item><term>Any other defined in <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/></term><description>Same as current object</description></item>
 </list>
 </description></item>
 <item><term>Parent step of another step</term><description>Step that lies on preceding index of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> collection then step which's parent it is.</description></item>
 <item><term>Current property</term><description>For property steps (<seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/>) it is <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Property"/> otherwise it is null</description></item>
 <item><term>Current enumerator</term><description>For enumerable steps (<seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>) it is <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> otherwise it is null</description></item>
 <item><term>Context value</term><description>Same as context object with exception when current step is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> (then it is value of pseudo-attribute)</description></item>
 </list>
 </remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">
 <summary>Common base for step class. Represents one step (level) in pseudo-XML structure exposed by <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/></summary>
 <remarks>You should not create own derived classes from <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> unless you are going to create own <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>-derived class</remarks>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object">
 <summary>Reprecents object associated with this step</summary>
 <remarks><list type="table"><listheader><term>Step type</term><description>Content of this field</description></listheader>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/></term><description>Object value for this step</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></term><description>Object on which the property getter will be invoked</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></term><description><see cref="T:System.Collections.IEnumerable"/> on which the <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">GetEnumerator</see> will be invoked in order to get <see cref="T:System.Collections.IEnumerator"/></description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/></term><description>Object which's pseudo-propertties will be get</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/></term><description>Object which's value will be returned</description></item>
 </list></remarks>
</member>
<member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses">
 <summary>Helper enumeration that allows quicker identification of steps. Contains one value of each class inherited from <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/></summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Root">
 <summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/></summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Property">
 <summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Enumerable">
 <summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Special">
 <summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/></summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Self">
 <summary><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/></summary>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClass">
 <summary>Returns one of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses"/> values according to type of current step</summary>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.#ctor(System.Object)">
 <summary>CTor</summary>
 <param name="Object">Value for the <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/> field</param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</summary>
 <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</param>
 <returns>true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>; otherwise, false. This function always returns false when type of <paramref name="obj"/> is not <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> and is not same as type of current instance.</returns>
 <remarks>This function cannot be overriden. Override overloaded function instead.</remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
 <summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</summary>
 <param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</param>
 <returns>true if the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>. This function should always return false if the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is not of the same type as <paramref name="other"/></returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Clone1">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <remarks>Use type-safe <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Clone"/> instead</remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Step.ToString">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/>.</summary>
 <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/></returns>
</member>
<member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep">
 <summary>Represents root step of pesudo-XML structure. This step can occure only as first step of sequence.</summary>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep.#ctor(System.Object)">
 <summary>CTor</summary>
 <param name="Object">Context object fro new instance</param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
 <summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>.</summary>
 <param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>.</param>
 <returns>true if the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> and <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/>-s of both <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> are the same instance.</returns>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep.StepClass">
 <summary>Type of this instance</summary>
 <returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Root"/></returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep">
 <summary>Represents step that represents property of an object</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Property">
 <summary>Property represented by this step</summary>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.#ctor(System.Object,System.Reflection.PropertyInfo)">
 <summary>CTor</summary>
 <param name="Object">Object the property is invoked on</param>
 <param name="Property">Identification of property to be represented by a new instance</param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
 <summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>.</summary>
 <param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>.</param>
 <returns>true if type of <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> and both, current an specified, <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> has same value of the <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object">Object</see> (reference equals) and <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Property">Property</see> (same <see cref="P:System.Reflection.MemberInfo.Name"/>) fields.</returns>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.StepClass">
 <summary>Type of this instance</summary>
 <returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Property"/></returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep.ToString">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/>.</summary>
 <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></returns>
</member>
<member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep">
 <summary>Represents step that points to item of <see cref="T:System.Collections.IEnumerable"/></summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index">
 <summary>Position of pointed object in <see cref="T:System.Collections.IEnumerable"/></summary>
 <remarks>This field must be kept in sinc with real position of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> manually! Do not change it if you haven't (or are not going to) move <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> into the same position as <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index"/> points to</remarks>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep._Enumerator">
 <summary>Contains value of the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> property</summary>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator">
 <summary><see cref="T:System.Collections.IEnumerator"/> that iterrates through <see cref="T:System.Collections.IEnumerable"/> contained in <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Object"/></summary>
 <remarks>If you use <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator">Enumerator</see>.<see cref="M:System.Collections.IEnumerator.MoveNext">MoveNext</see> (or <see cref="M:System.Collections.IEnumerator.Reset">Reset</see>) set <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index"/> to actual position!</remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.#ctor(System.Collections.IEnumerable,System.Int32)">
 <summary>CTor</summary>
 <param name="Object">Instance of <see cref="T:System.Collections.IEnumerable"/> to iterrate through</param>
 <param name="index">Index to move <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Enumerator"/> initially to</param>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero - or <paramref name="index"/> points to position which exceeds number of items in <paramref name="Object"/></exception>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Object">
 <summary>Shadows <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/> by returning it casted to <see cref="T:System.Collections.IEnumerable"/></summary>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
 <summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>.</summary>
 <param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>.</param>
 <returns>true if type of <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>, both (current and specified) <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> points to the same object (reference equals) and has same <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index"/></returns>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.StepClass">
 <summary>Type of this instance</summary>
 <returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Enumerable"/></returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.ToString">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>.</summary>
 <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></returns>
</member>
<member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep">
 <summary>Step that points to pseudo-CData content of pseudo-node</summary>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep.#ctor(System.Object)">
 <summary>CTor</summary>
 <param name="Object">Object to point to. This object should be of supported type. See <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value"/> for list of supported types for pseudo-text pseudo-nodes.</param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
 <summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/>.</summary>
 <param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/>.</param>
 <returns>true if type of <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/> and <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/> of both (current and specified) <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> equals (is same instance)</returns>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep.StepClass">
 <summary>Type of thsi step</summary>
 <returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Self"/></returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep">
 <summary>Represents special step that points to especially supported property of object</summary>
</member>
<member name="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType">
 <summary>Type of especially supported properties</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.TypeName">
 <summary>Short name of type of context object (<seealso cref="P:System.Reflection.MemberInfo.Name"/>)</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.FullName">
 <summary>Full name of type of context object (<see cref="P:System.Type.FullName"/>)</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.Name">
 <summary>Name of property, current stape will be obtained throught. Supported also for root but returns <see cref="T:System.String"/></summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.Enumerable">
 <summary>Contains true for enumerable objects, otherwise is not present</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.CircleLevel">
 <summary>Contains number of steps upward (in parent axis) needed to reach same context object as is actual <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/>. Present only if non-zero.</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">
 <summary>Sub-type of this step</summary>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.#ctor(System.Object,Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType)">
 <summary>CTor</summary>
 <param name="Object">Object to get information from</param>
 <param name="Type">Type of information to be got</param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Equals(Tools.XmlT.XPathT.XPathObjectNavigator.Step)">
 <summary>Determines whether the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> is equal to the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/>.</summary>
 <param name="other">The <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step"/> to compare with the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/>.</param>
 <returns>True if <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> and both (current and specified) <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step">Steps</see> have same instance in their <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.Object"/> field and are of same sub-type (see also <seealso cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type"/>)</returns>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepClass">
 <summary>Type of this instance</summary>
 <returns><see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses.Special"/></returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.ToString">
 <summary>Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/>.</summary>
 <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/></returns>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator._Location">
 <summary>Contains value of the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> property</summary>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">
 <summary>Sequence of steps alwas starting with <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> and always ahving at least 1 item. This sequence determines current position of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>.</summary>
 <returns>Steps in child or attribute axes from root needed to reproduce navigation</returns>
 <remarks>Avoind clearing this collection and puting anything other than <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> at first index. Consider carefully changing value of items.</remarks>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.ns">
 <summary>Name of namespace for pseudo-document</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrName">
 <summary>Name of attribute name</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrTypeName">
 <summary>Name of attribute type-name</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrFullName">
 <summary>Name of attribute full-name</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrEnumerable">
 <summary>Name of attribute enumerable</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.atrCircleLevel">
 <summary>Name of attribute circele-level</summary>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator.nodItemOf">
 <summary>Name of ode item-of</summary>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.#ctor(System.Boolean)">
 <summary>Private CTor dhat does common construction steps</summary>
 <param name="AllowCircles">Valus for the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> property</param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.#ctor(System.Object,System.Boolean)">
 <summary>CTor from any <see cref="T:System.Object"/></summary>
 <param name="Object">Root for new instance</param>
 <param name="AllowCircles">Indicates if newly created instance will support infinite-depth trees (circle references). See <seealso cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> for more details.</param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.#ctor(Tools.XmlT.XPathT.XPathObjectNavigator)">
 <summary>Copy CTor</summary>
 <param name="Other">Instance which's location new insatnce will point to</param>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.BaseURI">
 <summary>When overridden in a derived class, gets the base URI for the current node.</summary>
 <returns>For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> this property always returns <see cref="T:System.String"/></returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.Clone">
 <summary>When overridden in a derived class, creates a new <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> positioned at the same node as this <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>.</summary>
 <returns>A new <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> positioned at the same node as this <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>.</returns>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.IsEmptyElement">
 <summary>Gets a value indicating whether the current node is an empty element without an end element tag.</summary>
 <returns>True if context object has no public readable properties without mandatory arguments and it is not <see cref="T:System.Collections.IEnumerable"/> or it is <see cref="T:System.Collections.IEnumerable"/> but with no items inside.</returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
 <summary>Determines whether the current <see cref="T:System.Xml.XPath.XPathNavigator"></see> is at the same position as the specified <see cref="T:System.Xml.XPath.XPathNavigator"></see>.</summary>
 <returns>Returns true if <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>, has same count of items in its <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> as current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> and all those steps equals to steps in current <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/></returns>
 <param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator"></see> to compare to this <see cref="T:System.Xml.XPath.XPathNavigator"/>.</param>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.LocalName">
 <summary>Gets the <see cref="P:System.Xml.XPath.XPathNavigator.Name"></see> of the current node without any namespace prefix.</summary>
 <returns>A <see cref="T:System.String"></see> that contains the local name of the current node, or <see cref="F:System.String.Empty"></see> if the current node does not have a name (for example, text or comment nodes).</returns>
 <remarks><list><listheader><term>Current step</term><description>Returned value</description></listheader>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/></term><description>"item-of"</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></term><description><see cref="P:System.Reflection.MemberInfo.Name"/> of current property</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.Enumerable"/></term><description>"enumerable"</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.FullName"/></term><description>"full-name"</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.Name"/></term><description>"name"</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.TypeName"/></term><description>"type-name"</description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type">Type</see> = <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.CircleLevel"/></term><description>"circle-level"</description></item>
 <item><term>Any other</term><description><see cref="T:System.String"/></description></item>
 </list>
 <para>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of some terms.</para>
 </remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.CloneLocation">
 <summary>Clones <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> by clonig all steps in it</summary>
 <returns>Indepemdent copy of actual <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/></returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
 <summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> to the same position as the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>.</summary>
 <returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is successful moving to the same position as the specified <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/>; otherwise, false. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is unchanged.</returns>
 <param name="other">The <see cref="T:System.Xml.XPath.XPathNavigator"/> positioned on the node that you want to move to. </param>
 <remarks>Changing position succeds only if <paramref name="other"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/></remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstAttribute">
 <summary>When overridden in a derived class, moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> to the first attribute of the current node.</summary>
 <returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is successful moving to the first attribute of the current node; otherwise, false. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is unchanged.</returns>
 <remarks>This method is succesfull if current step is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> or <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> or <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>. Firts attribute is always <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.StepType.TypeName"/> and context object becomes current object</remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.GetFirstProperty(System.Object,System.Reflection.PropertyInfo,System.Boolean)">
 <summary>Finds first property of specified object lying after specified property in specified direction</summary>
 <param name="Obj">Object to be sought for property. If ommited <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> is used.</param>
 <param name="After">Property after which the search should start. If ommited first property is returned</param>
 <param name="Reverse">If true the property is being searched from last to first instead of from first to last</param>
 <returns>First usable property of spacified object laying after specified property in specified direction. Usable properties are public instance properties (and not <see cref="P:System.Reflection.PropertyInfo.IsSpecialName"/>) with public get accessor which is callable without parameters. If no such property is found null is returned.</returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstPropertyOrItem(System.Reflection.PropertyInfo,System.Object,System.Boolean)">
 <summary>Helper method for <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstChild"/> and <see cref="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)"/> (when current step is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/>). Moves <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> to first (or next) property or first <see cref="T:System.Collections.IEnumerable"/> item.</summary>
 <param name="After">Property after which start search. If ommited or null first property is used.</param>
 <returns>True if moving was successfull</returns>
 <remarks>This function uses <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.GetFirstProperty(System.Object,System.Reflection.PropertyInfo,System.Boolean)"/> to get first (or next) property in forward direction. If there is no such property and context object is <see cref="T:System.Collections.IEnumerable"/> which has at least one item the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is muved to this first item.</remarks>
 <param name="Obj">Object which's properties should be examined. If not specified or null the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> is used.</param>
 <param name="Replace">Determines if new step is appended after current (false) or replaces current (true)</param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstChild">
 <summary>When overridden in a derived class, moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the first child node of the current node.</summary>
 <returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is successful moving to the first child node of the current node; otherwise, false. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is unchanged.</returns>
 <remarks>
 <para>Only <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>, <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> and <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> can have children.
 In order step-that-can-have-children to have children its context object must not be of supported type (see <seealso cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/>) and it must at least one public instance property with public getter or it must be <see cref="T:System.Collections.IEnumerable"/> with at least one item to enumerate.</para>
 <para>This function uses <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstPropertyOrItem(System.Reflection.PropertyInfo,System.Object,System.Boolean)"/> for unsupported types.</para>
 <para>If type of context object is supported then it has only text child taht contains value of supported type.</para>
 <para>Is <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.IsCircleReferenced"/> returns true than this method retruns false if <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> is set to false</para>
 </remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)">
 <summary>Gets value indicating if cpecified type is supported for in-line (text node) representation.</summary>
 <param name="T">Type to be verified</param>
 <returns>Currently following types are supported:
 <see cref="T:System.String"/>, <see cref="T:System.Char"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Byte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Decimal"/>, <see cref="T:System.Double"/>, <see cref="T:System.Single"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.TimeSpan"/>, <see cref="T:Tools.TimeSpanFormattable"/>, <see cref="T:System.Uri"/>, <see cref="T:System.Text.StringBuilder"/> and any type that has <see cref="P:System.Type.IsEnum"/> true
 </returns>
 <remarks>Note for inheritors: Supported types are sometimes treated specially sometimes is only <see cref="M:System.Object.ToString"/> used. In order to control this behavoir overrides <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/>
 <para>See <seealso cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/> for an example.</para>
 </remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
 <summary>Moves the <see cref="T:System.Xml.XPath.XPathNavigator"></see> to first namespace node of the current node.</summary>
 <returns>Not implemented. always retruns false.</returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToId(System.String)">
 <summary>Moves to the node that has an attribute of type ID whose value matches the specified <see cref="T:System.String"></see>.</summary>
 <returns>Not implemeted. always returns false.</returns>
 <param name="id">A <see cref="T:System.String"></see> representing the ID value of the node to which you want to move.</param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToNext">
 <summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the next sibling node of the current node.</summary>
 <returns>true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is successful moving to the next sibling node; otherwise, false if there are no more siblings or if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is currently positioned on an attribute node. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> is unchanged.</returns>
 <remarks>For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> the <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstPropertyOrItem(System.Reflection.PropertyInfo,System.Object,System.Boolean)"/> is invoked. For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> an attempt to invoke <see cref="M:System.Collections.IEnumerator.MoveNext"/> is done.</remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToNextAttribute">
 <summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the next attribute.</summary>
 <returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is successful moving to the next attribute; false if there are no more attributes. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is unchanged.</returns>
 <remarks>Only <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>, <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> and <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> have attributes. Attributes are ordered type-name, full-name, name, enumerable, circle-level. The enumerable attribute is present only when context object is <see cref="T:System.Collections.IEnumerable"/> (in such case it has value "true"). The name attribute is present always but for <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/> it has value <see cref="T:System.String"/>. The circle-level attribute is present only if it's value is non-zero. Attributes as menitoned are provided also for so-called supported types (<seealso cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/>).</remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
 <summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the next namespace node.</summary>
 <returns>Always false. Not implemented</returns>
 <param name="namespaceScope">An <see cref="T:System.Xml.XPath.XPathNamespaceScope"></see> value describing the namespace scope. </param>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToParent">
 <summary>Moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the parent node of the current node.</summary>
 <returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is successful moving to the parent node of the current node; otherwise, false. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is unchanged.</returns>
 <remarks>Works for all type of steps expect <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/>. Removes current spet, so parent of current step becomes current step.</remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToPrevious">
 <summary>When overridden in a derived class, moves the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> to the previous sibling node of the current node.</summary>
 <returns>Returns true if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is successful moving to the previous sibling node; otherwise, false if there is no previous sibling node or if the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is currently positioned on an attribute node. If false, the position of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see> is unchanged.</returns>
 <remarks>This is valid for <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> and <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/>.
 For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/> moves to previous usable property (if any) using <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.GetFirstProperty(System.Object,System.Reflection.PropertyInfo,System.Boolean)"/>.
 For <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> re-iterates <see cref="T:System.Collections.IEnumerator"/> to position less by 1 than actual position (if actual position is greater than zero; see <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep.Index"/>). If it is zero that last property of current object become surrent step (if there is any usable property).
 </remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Name">
 <summary>When overridden in a derived class, gets the qualified name of the current node.</summary>
 <remarks><see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.LocalName"/></remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.NamespaceURI">
 <summary>When overridden in a derived class, gets the namespace URI of the current node.</summary>
 <returns>Not supported. Gets value from <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable"/> using <see cref="T:System.String"/> as key</returns>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator._NameTable">
 <summary>Contains value of the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable"/> property</summary>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable">
 <summary>Gets the <see cref="T:System.Xml.XmlNameTable"></see> of the <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"></see>.</summary>
 <returns><see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable"/> that contains only item with <see cref="T:System.String"/> as key</returns>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.NodeType">
 <summary>Gets the <see cref="T:System.Xml.XPath.XPathNodeType"/> of the current node.</summary>
 <returns>
 <para>One of the <see cref="T:System.Xml.XPath.XPathNodeType"/> values representing the current node.</para>
 <list type="table"><listheader><term>Type of current step</term><description>Returned value</description></listheader>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.RootStep"/></term><description><see cref="F:System.Xml.XPath.XPathNodeType.Root"/></description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.EnumerableStep"/> or <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.PropertyStep"/></term><term><see cref="F:System.Xml.XPath.XPathNodeType.Element"/></term></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/></term><description><see cref="F:System.Xml.XPath.XPathNodeType.Attribute"/></description></item>
 <item><term><see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SelfStep"/></term><description><see cref="F:System.Xml.XPath.XPathNodeType.Text"/></description></item>
 <item><description>other</description><description>Throws <see cref="T:System.InvalidOperationException"/></description></item>
 </list>
 </returns>
 <exception cref="T:System.InvalidOperationException"><see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep"/>.<see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClass">StepClass</see> is not member of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.Step.StepClasses"/>. This can happne only in derived class when inheritor have created own types of steps buth naven't overrided this property.</exception>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Prefix">
 <summary>When overridden in a derived class, gets the namespace prefix associated with the current node.</summary>
 <returns>Not supported. Returns item from <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.NameTable"/> got by key <see cref="T:System.String"/></returns>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)">
 <summary>Called by <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value"/> for steps which context object is of type for which <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/> returns true</summary>
 <param name="obj">Object to get <see cref="T:System.String"/> value for</param>
 <remarks>This implementation treats supported types in same way as <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value"/> with exception for following types:
 <list type="table"><listheader><term>Type</term><description>Treatement</description></listheader>
 <item><term><see cref="T:System.DateTime"/></term><description>Returned in format YYY-MMddHH:mm:ss.fffzzz (fff part is ommited when <see cref="P:System.DateTime.Millisecond"/> is zero; zzz part is ommited when <see cref="P:System.DateTime.Kind"/> is neither <see cref="F:System.DateTimeKind.Local"/> nor <see cref="F:System.DateTimeKind.Utc"/> and replaced wizh 'Z' when it is <see cref="F:System.DateTimeKind.Utc"/>)</description></item>
 <item><term><see cref="T:System.TimeSpan"/></term><description>Converted to <see cref="T:Tools.TimeSpanFormattable"/> and <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/> is called again</description></item>
 <item><term><see cref="T:Tools.TimeSpanFormattable"/></term><description>Returned ifn format h(0):mm:ss.lll (lll part is ommited when <see cref="P:Tools.TimeSpanFormattable.Milliseconds"/> is zero).</description></item>
 <item><term><see cref="T:System.Boolean"/></term><description>"true" or "false" depending on value </description></item>
 <item><term>Derived from <see cref="T:System.Enum"/></term><description>Returned result of <see cref="M:System.Enum.ToString"/></description></item>
 </list>
 <para>Note for inheritors: You should consider implementing this method for any type added to <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/> if you don't want default behavior for such type.</para>
 <example>
 <para>Following example shows preffered way of adding own supported type. Of course you can use any other way - change <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/>'s behavior for in-this-implementation supported types or make supported type unsuported by returnnig false for it from <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/></para>
 <code>
 <![CDATA[
 Protected Overrides Function IsSupportedType(ByVal T As Type) As Boolean
     Return T.Equals(GetType(MySupportedType)) OrElse T.IsSubclassOf(GetType(MySupportedType)) OrElse MyBase.IsSupportedType(T)
 End Function
 Protected Overrides Function SupportedTypeValue(ByVal obj As Object) As String
     If TypeOf obj Is MySupportedType Then
          Return DirectCast(obj, MySupportedType).GetValueThatIWantToBeGot()
     Else
         Return MyBase.SupportedTypeValue(obj)
     End If
 End Function
 ]]>
 </code>
 </example>
 Note: This function is also called for steps of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> type not depending on if type of pseudo-attribute has <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/> true for itself. So, this function must behave correctly for all types of pseudo-attributes (in this implementation it is only <see cref="T:System.String"/> and <see cref="T:System.Boolean"/>).
 </remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.Value">
 <summary>Gets the string value of the item.</summary>
 <returns>The string value of the item.</returns>
 <remarks>If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> then value of peudo-property depending on <see cref="F:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep.Type"/> is returned (using <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/>) otherwise if context object is <see cref="T:System.IFormattable"/> its value is obtained via <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> with <see cref="T:System.String"/> as format parameter and <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> as culture if it is not <see cref="T:System.IFormattable"/> value is obtained via <see cref="M:System.Object.ToString"/>. But vhen <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.IsSupportedType(System.Type)"/> returns true for type of context object <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.SupportedTypeValue(System.Object)"/> is used instead.</remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsBoolean">
 <summary>Gets the current node's value as an <see cref="T:System.Boolean"></see>.</summary>
 <returns>The current node's value as an <see cref="T:System.Boolean"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
 <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Boolean"></see>.</exception>
 <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Boolean"></see> is not valid.</exception>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsDouble">
 <summary>Gets the current node's value as an <see cref="T:System.Double"></see>.</summary>
 <returns>The current node's value as an <see cref="T:System.Double"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
 <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Double"></see>.</exception>
 <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Double"></see> is not valid.</exception>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsDateTime">
 <summary>Gets the current node's value as an <see cref="T:System.DateTime"></see>.</summary>
 <returns>The current node's value as an <see cref="T:System.DateTime"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
 <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.DateTime"></see>.</exception>
 <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.DateTime"></see> is not valid.</exception>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsInt">
 <summary>Gets the current node's value as an <see cref="T:System.Int32"></see>.</summary>
 <returns>The current node's value as an <see cref="T:System.Int32"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
 <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int32"></see>.</exception>
 <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int32"></see> is not valid.</exception>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong">
 <summary>Gets the current node's value as an <see cref="T:System.Int64"></see>.</summary>
 <returns>The current node's value as an <see cref="T:System.Int64"></see>. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is <see cref="T:System.IConvertible"/> than <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)"/> is used, otherwise <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAsLong"/> is called.</returns>
 <exception cref="T:System.FormatException">The current node's string value cannot be converted to a <see cref="T:System.Int64"></see>.</exception>
 <exception cref="T:System.InvalidCastException">The attempted cast to <see cref="T:System.Int64"></see> is not valid.</exception>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueType">
 <summary>Gets the .NET Framework <see cref="T:System.Type"></see> of the current node.</summary>
 <returns>The .NET Framework <see cref="T:System.Type"></see> of the current node. The default value is <see cref="T:System.String"></see>.</returns>
 <remarks>Returned value depends on actual type of actual context value (see <seealso cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/>). If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is null this returns <see cref="T:System.DBNull"/></remarks>
</member>
<member name="M:Tools.XmlT.XPathT.XPathObjectNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
 <summary>Gets the current node's value as the <see cref="T:System.Type"></see> specified, using the <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object specified to resolve namespace prefixes.</summary>
 <returns>The value of the current node as the <see cref="T:System.Type"></see> requested. If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ValueType"/> is subclass of (or is itself) or implements <paramref name="returnType"/> then <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue"/> is returned. Otherwise <see cref="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)"/> is called</returns>
 <param name="returnType">The <see cref="T:System.Type"></see> to return the current node's value as.</param>
 <param name="nsResolver">The <see cref="T:System.Xml.IXmlNamespaceResolver"></see> object used to resolve namespace prefixes.</param>
 <exception cref="T:System.InvalidCastException">The attempted cast is not valid.</exception>
 <exception cref="T:System.FormatException">The current node's value is not in the correct format for the target type.</exception>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextValue">
 <summary>Gets current context value</summary>
 <remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of context value</remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep">
 <summary>Gets or sets actual current step</summary>
 <value>Setting value of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep"/> replaces actual current step by another one - so, it changes position of <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> inside parent of current step</value>
 <remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of current step</remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentProperty">
 <summary>Gets actual current property</summary>
 <remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of current property</remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentObject">
 <summary>Gets actual current object</summary>
 <remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of current object</remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentEnumerator">
 <summary>Gets actual current enumerator</summary>
 <remarks>See <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of current enumerator</remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject">
 <summary>Gets actual context object</summary>
 <remarks>See <seealso cref="T:Tools.XmlT.XPathT.XPathObjectNavigator"/> for definition of context object</remarks>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.IsCircleReferenced">
 <summary>Gets information if current <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> is context object of any of parent nodes.</summary>
 <returns>True if <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CircleLevel"/> &lt; <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">Location</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see> - 1</returns>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.CircleLevel">
 <summary>Detects circle references. Gets index into the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/> collection where is the first occurence of actual <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> as context object.</summary>
 <returns>If no reference equal context object in location is found returns index of current step (this is <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">Location</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see> - 1).
 If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentStep"/> is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> and returned value should be <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">Location</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see> - 1 then it is <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location">Location</see>.<see cref="P:System.Collections.Generic.List`1.Count">Count</see> - 2 (as if it is in context of pseudo-attribute parent instead of pseudo-attribute itself).
 </returns>
 <remarks>If current step is <see cref="T:Tools.XmlT.XPathT.XPathObjectNavigator.SpecialStep"/> <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.CurrentObject"/> is used instead of <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/></remarks>
</member>
<member name="F:Tools.XmlT.XPathT.XPathObjectNavigator._AllowCircles">
 <summary>Contains value of the <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> property</summary>
</member>
<member name="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles">
 <summary>Gets value indicating if circles in references of objects are allowed.</summary>
 <remarks>This property can be set only via CTor
 <para>Circle is detected when <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstChild"/> is invoked and <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/> reference equals to context object of any of steps in <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.Location"/>.
 If <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.AllowCircles"/> is False in such situation than <see cref="M:Tools.XmlT.XPathT.XPathObjectNavigator.MoveToFirstChild"/> returns false. In XPath you can detect circle references by testing the circle-level pseudo-attribute.
 The circle-level attribute contains number of steps upwards (in parent axis) to reach same context object as is current <see cref="P:Tools.XmlT.XPathT.XPathObjectNavigator.ContextObject"/>.
 </para>
 </remarks>
</member>
<member name="T:Tools.MediaT.Sound">
 <summary>Abstract class that represents short sound to be played</summary>
 <remarks>This class does not provide seeking and stoping capabilities. It is intended to be used with short sounds.
 <para>Provided type editor can convert names of system sounds and any URI to instance of <see cref="T:Tools.MediaT.Sound"/>.</para>
 </remarks>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MediaT.Sound.Play">
 <summary>When overriden in derived class plays sound. Returns when sound is finished</summary>
 <remarks>Note for inheritors: If you do not override <see cref="M:Tools.MediaT.Sound.PlayOnBackground(System.Action{Tools.MediaT.Sound},System.Int32)"/> function this function is called when <see cref="M:Tools.MediaT.Sound.PlayOnBackground(System.Action{Tools.MediaT.Sound},System.Int32)"/> is invoked. In such case this function is called in another thread that object was created in.</remarks>
</member>
<member name="M:Tools.MediaT.Sound.Play(System.Int32)">
 <summary>Plays shound given number of times. Returns after all plays are finished.</summary>
 <param name="times">Defines how many times shound will be played</param>
</member>
<member name="M:Tools.MediaT.Sound.PlayOnBackground(System.Int32)">
 <summary>Plays sound on background</summary>
 <param name="times">Defines how many times shound will be played</param>
</member>
<member name="M:Tools.MediaT.Sound.PlayOnBackground(System.Action{Tools.MediaT.Sound},System.Int32)">
 <summary>Plays sound on background</summary>
 <param name="times">Defines how many times shound will be played</param>
 <param name="Callback">Callback method that will be called after playing is finished. Can be null.</param>
</member>
<member name="M:Tools.MediaT.Sound.PlayOnBackground``1(System.Action{Tools.MediaT.Sound,``0},``0,System.Int32)">
 <summary>Plays sound on background</summary>
 <param name="times">Defines how many times shound will be played</param>
 <param name="Callback">Callback method that will be called after playing is finished. Can be nothing.</param>
 <param name="CustomObject">Custom object passed to <paramref name="Callback"/> method</param>
 <typeparam name="T">Type of custom object passed to <paramref name="Callback"/> method</typeparam>
</member>
<member name="M:Tools.MediaT.Sound.PlayOnBackground(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
 <summary>Called asynchronously when sound is about to be played at background</summary>
 <param name="sender"><see cref="T:System.ComponentModel.BackgroundWorker"/> which realizes background thread</param>
 <param name="e">Event arguments. <paramref name="e"/>.<see cref="P:System.ComponentModel.DoWorkEventArgs.Argument">Argument</see> contains 1D array with callback method, number of times to repeat the sound and custom return object</param>
</member>
<member name="M:Tools.MediaT.Sound.OnPlayed(System.ComponentModel.BackgroundWorker,System.ComponentModel.RunWorkerCompletedEventArgs)">
 <summary>Called when asynchronous sound playing is finished</summary>
 <param name="sender"><see cref="T:System.ComponentModel.BackgroundWorker"/> which realized background thread</param>
 <param name="e">Event arguments. <paramref name="e"/>.<see cref="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">Result</see> contains 1D array with callback method, number of times to repeat the sound and custom return object</param>
</member>
<member name="M:Tools.MediaT.Sound.op_Implicit(System.Media.SystemSound)~Tools.MediaT.Sound">
 <summary>Converts <see cref="T:System.Media.SystemSound"/> to <see cref="T:Tools.MediaT.Sound"/></summary>
 <param name="a">A <see cref="T:System.Media.SystemSound"/></param>
 <returns>New instance of <see cref="T:Tools.MediaT.SystemSoundPlayer"/> initialized with <paramref name="a"/>; returs null if <paramref name="a"/> is null</returns>
</member>
<member name="T:Tools.MediaT.Sound.SoundTypeConverter">
 <summary>Implements type convertor for <see cref="T:Tools.MediaT.Sound"/> and <see cref="T:System.String"/></summary>
</member>
<member name="M:Tools.MediaT.Sound.SoundTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
 <summary>Performs conversion from type <see cref="T:System.String"/> to type <see cref="T:Tools.MediaT.Sound"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <see cref="T:Tools.MediaT.Sound"/></param>
 <returns>Value of type <see cref="T:Tools.MediaT.Sound"/> initialized by <paramref name="value"/>; null if <paramref name="value"/> is null or <see cref="F:System.String.Empty"/></returns>
</member>
<member name="M:Tools.MediaT.Sound.SoundTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.MediaT.Sound)">
 <summary>Performs conversion from type <see cref="T:Tools.MediaT.Sound"/> to type <see cref="T:System.String"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <see cref="T:System.String"/>; null if <paramref name="value"/> is null</returns>
 <exception cref="T:Tools.TypeMismatchException"><paramref name="value"/> is neither <see cref="T:Tools.MediaT.SystemSoundPlayer"/> nor <see cref="T:Tools.MediaT.SoundPlayerWrapper"/></exception>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is <see cref="T:Tools.MediaT.SystemSoundPlayer"/> but it does represent any of <see cref="T:System.Media.SystemSounds"/> =or= <paramref name="value"/> is <see cref="T:Tools.MediaT.SoundPlayerWrapper"/> and <paramref name="value"/>.<see cref="P:Tools.MediaT.SoundPlayerWrapper.Player">Player</see>.<see cref="P:System.Media.SoundPlayer.SoundLocation">SoundLocation</see> is null or <see cref="F:System.String.Empty"/>.</exception>
</member>
<member name="M:Tools.MediaT.Sound.SoundTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.ComponentModel.Design.Serialization.InstanceDescriptor)">
 <summary>Performs conversion from type <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/> to type <see cref="T:Tools.MediaT.Sound"/></summary>
 <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
 <param name="value">Value to be converted to type <see cref="T:Tools.MediaT.Sound"/></param>
 <returns>Value of type <see cref="T:Tools.MediaT.Sound"/> initialized by <paramref name="value"/></returns>
</member>
<member name="M:Tools.MediaT.Sound.SoundTypeConverter.ConvertToInstanceDescriptor(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,Tools.MediaT.Sound)">
 <summary>Performs conversion from type <see cref="T:Tools.MediaT.Sound"/> to type <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/></summary>
 <param name="context"> An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
 <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
 <param name="value">Value to be converted</param>
 <returns>Representation of <paramref name="value"/> in type <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor"/></returns>
</member>
<member name="T:Tools.MediaT.Sound.SoundDropDownList">
 <summary>Implements editing control for editing <see cref="T:Tools.MediaT.Sound"/> in <see cref="T:System.Windows.Forms.PropertyGrid"/></summary>
</member>
<member name="F:Tools.MediaT.Sound.SoundDropDownList._lstList">
 <summary><see cref="T:System.Windows.Forms.ListBox"/> which contains values to chose between</summary>
</member>
<member name="F:Tools.MediaT.Sound.SoundDropDownList._cmdBrowse">
 <summary><see cref="T:System.Windows.Forms.Label"/> to browse for file</summary>
</member>
<member name="F:Tools.MediaT.Sound.SoundDropDownList._cmdPlay">
 <summary>Button which plays the sound</summary>
</member>
<member name="F:Tools.MediaT.Sound.SoundDropDownList.tlbBottom">
 <summary>Layout panel for <see cref="P:Tools.MediaT.Sound.SoundDropDownList.cmdBrowse"/> and <see cref="P:Tools.MediaT.Sound.SoundDropDownList.cmdPlay"/></summary>
</member>
<member name="F:Tools.MediaT.Sound.SoundDropDownList.totToolTip">
 <summary>Tooltip for <see cref="P:Tools.MediaT.Sound.SoundDropDownList.cmdPlay"/></summary>
</member>
<member name="F:Tools.MediaT.Sound.SoundDropDownList._Value">
 <summary>Contains value of the <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Value"/> property</summary>
</member>
<member name="M:Tools.MediaT.Sound.SoundDropDownList.#ctor">
 <summary>CTor</summary>
</member>
<member name="M:Tools.MediaT.Sound.SoundDropDownList.OnBeforeShow">
 <summary>Owner of control informs control that it is about to be shown by calling this methos. It is called just befiore the control is shown.</summary>
</member>
<member name="M:Tools.MediaT.Sound.SoundDropDownList.UpdateValue">
 <summary>If there is any selected system sound passest it to <see cref="P:Tools.DrawingT.DesignT.DropDownUITypeEditorControlBase`1.Value"/>.</summary>
</member>
<member name="M:Tools.MediaT.Sound.SoundDropDownList.OnGotFocus(System.EventArgs)">
 <summary>Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</summary>
 <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data. </param>
</member>
<member name="T:Tools.MediaT.SystemSoundPlayer">
 <summary>Implements <see cref="T:Tools.MediaT.Sound"/> which plays given <see cref="F:Tools.MediaT.SystemSoundPlayer.SystemSound"/></summary>
 <completionlist cref="T:System.Media.SystemSounds"/>
</member>
<member name="F:Tools.MediaT.SystemSoundPlayer.SystemSound">
 <summary><see cref="F:Tools.MediaT.SystemSoundPlayer.SystemSound"/> to be played</summary>
</member>
<member name="M:Tools.MediaT.SystemSoundPlayer.#ctor(System.Media.SystemSound)">
 <summary>CTor</summary>
 <param name="SystemSound">System sound to be played</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="SystemSound"/> is null</exception>
</member>
<member name="M:Tools.MediaT.SystemSoundPlayer.Play">
 <summary>Plays system sound represented by this instance</summary>
</member>
<member name="M:Tools.MediaT.SystemSoundPlayer.op_Implicit(System.Media.SystemSound)~Tools.MediaT.SystemSoundPlayer">
 <summary>Converts <see cref="T:System.Media.SystemSound"/> to <see cref="T:Tools.MediaT.SystemSoundPlayer"/></summary>
 <param name="a">A <see cref="T:System.Media.SystemSound"/></param>
 <returns>New instance of <see cref="T:Tools.MediaT.SystemSoundPlayer"/> initialized with <paramref name="a"/>; returs null if <paramref name="a"/> is null</returns>
</member>
<member name="M:Tools.MediaT.SystemSoundPlayer.op_Implicit(Tools.MediaT.SystemSoundPlayer)~System.Media.SystemSound">
 <summary>Converts <see cref="T:Tools.MediaT.SystemSoundPlayer"/> to <see cref="T:System.Media.SystemSound"/></summary>
 <param name="a">A <see cref="T:Tools.MediaT.SystemSoundPlayer"/></param>
 <returns><see cref="T:System.Media.SystemSound"/> represented by <paramref name="a"/>; returns null if <paramref name="a"/> is null</returns>
</member>
<member name="M:Tools.MediaT.SystemSoundPlayer.ToString">
 <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
 <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds">
 <summary>Represents known system sounds as defined by the <see cref="T:System.Media.SystemSounds"/> class</summary>
</member>
<member name="F:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds.Asterisk">
 <summary>Sound associated with the Asterisk program event in the current Windows sound scheme</summary>
</member>
<member name="F:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds.Beep">
 <summary>Sound associated with the Beep program event in the current Windows sound scheme.</summary>
</member>
<member name="F:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds.Exclamation">
 <summary>Sound associated with the Exclamation program event in the current Windows sound scheme.</summary>
</member>
<member name="F:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds.Hand">
 <summary>Sound associated with the Hand program event in the current Windows sound scheme.</summary>
</member>
<member name="F:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds.Question">
 <summary>Sound associated with the Question program event in the current Windows sound scheme.</summary>
</member>
<member name="M:Tools.MediaT.SystemSoundPlayer.#ctor(Tools.MediaT.SystemSoundPlayer.KnownSystemSounds)">
 <summary>CTor from <see cref="T:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds"/></summary>
 <param name="known">One of <see cref="T:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds"/> values</param>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="known"/> is not one of <see cref="T:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds"/> values</exception>
</member>
<member name="M:Tools.MediaT.SystemSoundPlayer.Equals(System.Object)">
 <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
 <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
 <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
 <exception cref="T:System.NullReferenceException">The 
 <paramref name="obj" /> parameter is null.</exception>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.MediaT.SystemSoundPlayer.op_Implicit(Tools.MediaT.SystemSoundPlayer)~Tools.MediaT.SystemSoundPlayer.KnownSystemSounds">
 <summary>Converts <see cref="T:Tools.MediaT.SystemSoundPlayer"/> to <see cref="T:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds"/></summary>
 <param name="a">A <see cref="T:Tools.MediaT.SystemSoundPlayer"/></param>
 <remarks>A <see cref="T:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds"/> value that represents <paramref name="a"/></remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="a"/> is null</exception>
 <exception cref="T:System.InvalidCastException"><paramref name="a"/> doesn't represent one of <see cref="T:System.Media.SystemSounds"/> values. This situation may hardly ocure.</exception>
</member>
<member name="M:Tools.MediaT.SystemSoundPlayer.op_Explicit(Tools.MediaT.SystemSoundPlayer.KnownSystemSounds)~Tools.MediaT.SystemSoundPlayer">
 <summary>Converts <see cref="T:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds"/> value to <see cref="T:Tools.MediaT.SystemSoundPlayer"/></summary>
 <param name="a">A <see cref="T:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds"/> value</param>
 <returns><see cref="T:Tools.MediaT.SystemSoundPlayer"/> initialized with <paramref name="a"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="a"/> is not member of <see cref="T:Tools.MediaT.SystemSoundPlayer.KnownSystemSounds"/></exception>
</member>
<member name="T:Tools.MediaT.SoundPlayerWrapper">
 <summary>Wraps <see cref="T:System.Media.SoundPlayer"/> as <see cref="T:Tools.MediaT.Sound"/></summary>
</member>
<member name="F:Tools.MediaT.SoundPlayerWrapper._Player">
 <summary>Countains value of the <see cref="P:Tools.MediaT.SoundPlayerWrapper.Player"/> property</summary>
</member>
<member name="M:Tools.MediaT.SoundPlayerWrapper.#ctor(System.Media.SoundPlayer)">
 <summary>CTor from <see cref="T:System.Media.SoundPlayer"/></summary>
 <param name="Player"><see cref="T:System.Media.SoundPlayer"/> to be wrapped</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Player"/> is null</exception>
</member>
<member name="M:Tools.MediaT.SoundPlayerWrapper.#ctor(System.String)">
 <summary>CTor from URI of sound file</summary>
 <param name="Path">The location of a .wav file to load.</param>
 <exception cref="T:System.UriFormatException">The URL value specified by <paramref name="Path"/> cannot be resolved.</exception>
 <exception cref="T:System.ServiceProcess.TimeoutException">The elapsed time during loading exceeds the time, in milliseconds, specified by <see cref="P:Tools.MediaT.SoundPlayerWrapper.Player">Player</see>.<see cref="P:System.Media.SoundPlayer.LoadTimeout">LoadTimeout</see> default value (10s).</exception>
 <exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="Path"/> cannot be found.</exception>
</member>
<member name="M:Tools.MediaT.SoundPlayerWrapper.#ctor(System.IO.Stream)">
 <summary>CTor from wav stream</summary>
 <param name="Stream">A <see cref="T:System.IO.Stream"/> to a .wav file.</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Stream"/> is null</exception>
</member>
<member name="M:Tools.MediaT.SoundPlayerWrapper.ThrowOnNull(System.IO.Stream)">
 <summary>Throws <see cref="T:System.ArgumentNullException"/> if given <see cref="T:System.IO.Stream"/> is null</summary>
 <param name="stream"><see cref="T:System.IO.Stream"/> to check</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null</exception>
 <returns><paramref name="stream"/></returns>
</member>
<member name="P:Tools.MediaT.SoundPlayerWrapper.Player">
 <summary>Gets <see cref="T:System.Media.SoundPlayer"/> wrapped by this instance</summary>
 <returns>Sound player this instance wraps.</returns>
</member>
<member name="M:Tools.MediaT.SoundPlayerWrapper.Play">
 <summary>Plays sound. Returns when sound is finished</summary>
</member>
<member name="M:Tools.MediaT.SoundPlayerWrapper.op_Implicit(System.Media.SoundPlayer)~Tools.MediaT.SoundPlayerWrapper">
 <summary>Converts <see cref="T:System.Media.SoundPlayer"/> to <see cref="T:Tools.MediaT.SoundPlayerWrapper"/></summary>
 <param name="a">A <see cref="T:System.Media.SoundPlayer"/></param> 
 <remarks>New instance of <see cref="T:Tools.MediaT.SoundPlayerWrapper"/> initialized with <paramref name="a"/>; null if <paramref name="a"/> is null</remarks>
</member>
<member name="M:Tools.MediaT.SoundPlayerWrapper.op_Implicit(Tools.MediaT.SoundPlayerWrapper)~System.Media.SoundPlayer">
 <summary>Converts <see cref="T:Tools.MediaT.SoundPlayerWrapper"/> to <see cref="T:System.Media.SoundPlayer"/></summary>
 <param name="a">A <see cref="T:Tools.MediaT.SoundPlayerWrapper"/></param>
 <remarks><paramref name="a"/>.<see cref="P:Tools.MediaT.SoundPlayerWrapper.Player">Player</see>; returns null if <paramref name="a"/> is null.</remarks>
</member>
<member name="T:Tools.InternalT.AuthorAttribute">
 <summary>Marks person defined by instance of this attribute as author of marked part of code.</summary>
 <remarks><para>This attribute is obsolete. Use XML documentation tag &lt;author> instead.</para>
 Use this attribute to mark yourself as author of code you have written.</remarks>
 <author>Đonny</author>
 <version version="1.5.2" stage="Release">Marked as obsolete; use &lt;author> XML Doc tag instead, <see cref="T:Tools.InternalT.AuthorAttribute"/>, <see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.FirstVersionAttribute"/> removed</version>
</member>
<member name="F:Tools.InternalT.AuthorAttribute._Name">
 <summary>Contains value of the <see cref="P:Tools.InternalT.AuthorAttribute.Name"/> property</summary>
</member>
<member name="F:Tools.InternalT.AuthorAttribute._eMail">
 <summary>Contains value of the <see cref="P:Tools.InternalT.AuthorAttribute.eMail"/> property</summary>
</member>
<member name="F:Tools.InternalT.AuthorAttribute._WWW">
 <summary>Contains value of the <see cref="P:Tools.InternalT.AuthorAttribute.WWW"/> property</summary>
</member>
<member name="M:Tools.InternalT.AuthorAttribute.#ctor(System.String,System.String,System.String)">
 <summary>CTor</summary>
 <param name="Name">Name or nick of the author</param>
 <param name="eMail">@-mail to the author</param>
 <param name="WWW">Web pages of the author</param>
</member>
<member name="P:Tools.InternalT.AuthorAttribute.Name">
 <summary>Name or nick of the author</summary>
</member>
<member name="P:Tools.InternalT.AuthorAttribute.eMail">
 <summary>@-mail to the author</summary>
</member>
<member name="P:Tools.InternalT.AuthorAttribute.WWW">
 <summary>Web pages of the author</summary>
</member>
<member name="T:Tools.InternalT.VersionAttribute">
 <summary>Defines a version of component of code</summary>
 <remarks>This tag is obsolete. Use XML docummentation rag &lt;version> instead</remarks>
 <version version="1.5.2">Marked as obsolete - use XML doc tag &lt;version> instead, <see cref="T:Tools.InternalT.AuthorAttribute"/>, <see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.FirstVersionAttribute"/> removed</version>
 <author>Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.InternalT.VersionAttribute._Major">
 <summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Major"/> property</summary>
</member>
<member name="F:Tools.InternalT.VersionAttribute._Minor">
 <summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> property</summary>
</member>
<member name="F:Tools.InternalT.VersionAttribute._Build">
 <summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Build"/> property</summary>
</member>
<member name="F:Tools.InternalT.VersionAttribute._Revision">
 <summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> property</summary>
</member>
<member name="F:Tools.InternalT.VersionAttribute._Note">
 <summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.Note"/> property</summary>
</member>
<member name="M:Tools.InternalT.VersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>CTor - initializes version as <paramref name="Major"/>.<paramref name="MajorRevision"/>.<paramref name="Minor"/>.<paramref name="MinorRevision"/></summary>
 <param name="Major">Major version number</param>
 <param name="Minor">Minor version number</param>
 <param name="Build">Build number</param>
 <param name="Revision">Revision number</param>
 <exception cref="T:System.ArgumentOutOfRangeException">Version component is less than zero</exception> 
</member>
<member name="M:Tools.InternalT.VersionAttribute.#ctor(Tools.InternalT.VersionAttribute.TypeOrInt32,Tools.InternalT.VersionAttribute.TypeOrInt32,Tools.InternalT.VersionAttribute.TypeOrInt32,Tools.InternalT.VersionAttribute.TypeOrInt32)">
 <summary>CTor - initializes new instance of version with each parameter either defined by <see cref="T:System.Int32"/> value or inherited from assembly where passed <see cref="T:System.Type"/> is present.</summary>
 <param name="Major">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Major"/> property</param>
 <param name="Minor">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> property</param>
 <param name="Build">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Build"/> property</param>
 <param name="Revision">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> property</param>
</member>
<member name="M:Tools.InternalT.VersionAttribute.#ctor(System.Type)">
 <summary>CTor - initializes new instance with version fully inherited from assembly where passed <see cref="T:System.Type"/> is present</summary>
 <param name="TypeFromAssembly">Type form which's assembly inherit the version</param>
</member>
<member name="M:Tools.InternalT.VersionAttribute.#ctor(System.Int32,System.Int32,System.Type)">
 <summary>CTor - initializes new instance with concrete <see cref="P:Tools.InternalT.VersionAttribute.Major"/> and <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> numbers and inherits <see cref="P:Tools.InternalT.VersionAttribute.Build"/> and <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> from assembly of passed <see cref="T:System.Type"/></summary>
 <param name="Major">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Major"/> property</param>
 <param name="Minor">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> property</param>
 <param name="BuildAndRevision">Type from which's assembly the <see cref="P:Tools.InternalT.VersionAttribute.Build"/> and <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> properties will be inherited</param>
</member>
<member name="M:Tools.InternalT.VersionAttribute.#ctor(System.Type,System.Int32,System.Int32)">
 <summary>CTor - initializes new instance with concrete <see cref="P:Tools.InternalT.VersionAttribute.Build"/> and <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> numbers and inherits <see cref="P:Tools.InternalT.VersionAttribute.Major"/> and <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> from assembly of passed <see cref="T:System.Type"/></summary>
 <param name="MajorAndMinor">Type from which's assembly the <see cref="P:Tools.InternalT.VersionAttribute.Major"/> and <see cref="P:Tools.InternalT.VersionAttribute.Minor"/> properties will be inherited</param>
 <param name="Build">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Build"/> property</param>
 <param name="Revision">Value to initialize <see cref="P:Tools.InternalT.VersionAttribute.Revision"/> property</param>
</member>
<member name="T:Tools.InternalT.VersionAttribute.TypeOrInt32">
 <summary>Represents something tha can be either <see cref="T:System.Type"/> or <see cref="T:System.Int32"/></summary>
 <remarks>This class is designed to be used only with <see cref="T:Tools.InternalT.VersionAttribute"/>. If you are looking for general-purpose class try <see cref="T:Tools.DataStructuresT.GenericT.T1orT2`2"/> instead.</remarks>
</member>
<member name="F:Tools.InternalT.VersionAttribute.TypeOrInt32.Type">
 <summary>Value when <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> is <see cref="T:System.Type"/></summary>
</member>
<member name="F:Tools.InternalT.VersionAttribute.TypeOrInt32.Int32">
 <summary>Value when <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> is <see cref="T:System.Int32"/></summary>
</member>
<member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.#ctor(System.Type)">
 <summary>CTor - initializes new <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> to represent <see cref="T:System.Type"/></summary>
 <param name="Type"><see cref="T:System.Type"/>To be stored in new instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/></param>
</member>
<member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.#ctor(System.Int32)">
 <summary>CTor - initializes new <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> to represent <see cref="T:System.Int32"/></summary>
 <param name="Int32"><see cref="T:System.Int32"/>To be stored in new instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/></param>
</member>
<member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.op_Implicit(System.Int32)~Tools.InternalT.VersionAttribute.TypeOrInt32">
 <summary>Converts <see cref="T:System.Int32"/> to new instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> containing it</summary>
 <param name="a"><see cref="T:System.Int32"/> to be contained in newly created instance</param>
 <returns>New instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> initialized with <paramref name="a"/></returns>
</member>
<member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.op_Implicit(System.Type)~Tools.InternalT.VersionAttribute.TypeOrInt32">
 <summary>Converts <see cref="T:System.Type"/> to new instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> containing it</summary>
 <param name="a"><see cref="T:System.Type"/> to be contained in newly created instance</param>
 <returns>New instance of <see cref="T:Tools.InternalT.VersionAttribute.TypeOrInt32"/> initialized with <paramref name="a"/></returns>
</member>
<member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.op_Explicit(Tools.InternalT.VersionAttribute.TypeOrInt32)~System.Type">
 <summary>If <paramref name="a"/> contains <see cref="T:System.Type"/> unwrap it</summary>
 <param name="a">Instance that contains value to be unwraped</param>
 <returns>Value of <see cref="T:System.Type"/> stored in <paramref name="a"/> if <paramref name="a"/> contains it</returns>
 <exception cref="T:System.InvalidOperationException"><paramref name="a"/> doesn't contain value of type <see cref="T:System.Type"/></exception>
</member>
<member name="M:Tools.InternalT.VersionAttribute.TypeOrInt32.op_Explicit(Tools.InternalT.VersionAttribute.TypeOrInt32)~System.Int32">
 <summary>If <paramref name="a"/> contains <see cref="T:System.Int32"/> unwrap it</summary>
 <param name="a">Instance that contains value to be unwraped</param>
 <returns>Value of <see cref="T:System.Int32"/> stored in <paramref name="a"/> if <paramref name="a"/> contains it</returns>
 <exception cref="T:System.InvalidOperationException"><paramref name="a"/> doesn't contain value of type <see cref="T:System.Int32"/></exception>
</member>
<member name="P:Tools.InternalT.VersionAttribute.Major">
 <summary>First part of version number</summary>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero</exception>
</member>
<member name="P:Tools.InternalT.VersionAttribute.Minor">
 <summary>Second part of version number</summary>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero</exception>
</member>
<member name="P:Tools.InternalT.VersionAttribute.Build">
 <summary>Third part of version number</summary>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero</exception>
</member>
<member name="P:Tools.InternalT.VersionAttribute.Revision">
 <summary>Fourth part of version number</summary>
 <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> is less than zero</exception>
</member>
<member name="P:Tools.InternalT.VersionAttribute.Note">
 <summary>Version-related note</summary>
</member>
<member name="F:Tools.InternalT.VersionAttribute._LastChange">
 <summary>Contains value of the <see cref="P:Tools.InternalT.VersionAttribute.LastChangeDate"/> property</summary>
</member>
<member name="P:Tools.InternalT.VersionAttribute.LastChange">
 <summary>Date of last modification (date format in invariant culture: MM/DD/YYYY)</summary>
 <remarks>Be carefull when setting this attribute property. If you make mistake if will cause exception when reading it at runtime.</remarks>
 <exception cref="T:System.FormatException">Value being set does not contain a valid string representation of a date and time.</exception>
</member>
<member name="P:Tools.InternalT.VersionAttribute.LastChangeDate">
 <summary>Date of last modification</summary>
</member>
<member name="T:Tools.InternalT.AttributesSpecificDeclarations">
 <summary>Declares things that are spacific for attributes declared in <see cref="N:Tools.InternalT"/> namespace</summary>
 <remarks>As <see cref="T:Tools.InternalT.AuthorAttribute"/> and <see cref="T:Tools.InternalT.VersionAttribute"/> are obsolete, this module is also obsolete</remarks>
 <author>Đonny</author>
 <version stage="Release" version="1.5.2">Marked as obsolete, removed <see cref="T:Tools.InternalT.AuthorAttribute"/>, <see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.FirstVersionAttribute"/></version>
</member>
<member name="F:Tools.InternalT.AttributesSpecificDeclarations.AuthorAndVersionAttributesUsage">
 <summary>Defines value for <see cref="T:System.AttributeUsageAttribute"/> applyed on <see cref="T:Tools.InternalT.AuthorAttribute"/>, <see cref="T:Tools.InternalT.VersionAttribute"/> and realetd attributes.</summary>
 <remarks>DO NOT remove ored constants from this declaration. Add constants only when you really need it. (since version 1.1 there is no need to add constants.</remarks>
</member>
<member name="T:Tools.InternalT.FirstVersionAttribute">
 <summary>Defines date when item was introduced</summary>
 <remarks>This attribute is obsolete, use &lt;version> XML doc tag instead.</remarks>
 <author>Đonny</author>
 <version stage="Release" version="1.5.2">Marked as obsolete, <see cref="T:Tools.InternalT.AuthorAttribute"/>, <see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.FirstVersionAttribute"/> removed, renamed to <see cref="T:Tools.InternalT.FirstVersionAttribute"/> (form FirstVersion).</version>
</member>
<member name="M:Tools.InternalT.FirstVersionAttribute.#ctor(System.DateTime)">
 <summary>CTor from date</summary>
 <param name="Date">Date when item was first introduced</param>
</member>
<member name="M:Tools.InternalT.FirstVersionAttribute.#ctor(System.String)">
 <summary>CTor from string that represents date in invariant culture format MM/DD/YYYY</summary>
 <param name="InvariantDateStr">Invariant culture string representation of date when tool was first introduced (MM/DD/YYYY)</param>
 <remarks>Be carefull when setting this attribute property. If you make mistake if will cause exception when reading it at runtime.</remarks>
 <exception cref="T:System.FormatException"><paramref name="InvariantDateStr"/> not contain a valid string representation of a date and time.</exception>
</member>
<member name="M:Tools.InternalT.FirstVersionAttribute.#ctor(System.UInt16,System.Byte,System.Byte)">
 <summary>CTor from parts of date</summary>
 <param name="Day">Day (number of day in <paramref name="Month"/>, 1-based)</param>
 <param name="Month">Month (number of month in <paramref name="Year"/>, 1-based)</param>
 <param name="Year">Number of eyar</param>
 <remarks>Arguments valid for <see cref="T:System.DateTime"/> constructor are acceptable.</remarks>
 <exception cref="T:System.ArgumentOutOfRangeException">year is less than 1 or greater than 9999.-or- month is less than 1 or greater than 12.-or- day is less than 1 or greater than the number of days in month.</exception>
 <exception cref="T:System.ArgumentException">The specified parameters evaluate to less than <see cref="F:System.DateTime.MinValue" /> or more than <see cref="F:System.DateTime.MaxValue" />.</exception>
</member>
<member name="F:Tools.InternalT.FirstVersionAttribute._FirstVersion">
 <summary>Contains value of the <see cref="P:Tools.InternalT.FirstVersionAttribute.FirstVersionDate"/> property</summary>
</member>
<member name="P:Tools.InternalT.FirstVersionAttribute.FirstVersionDate">
 <summary>Date when first version the item was created</summary>
</member>
<member name="P:Tools.InternalT.FirstVersionAttribute.FirstVerStr">
 <summary>Date when first version of item was created (date format in invariant culture: MM/DD/YYYY)</summary>
 <exception cref="T:System.FormatException">Value being set does not contain a valid string representation of a date and time.</exception>
</member>
<member name="T:Tools.InternalT.AssemblyBuildStageAttribute">
 <summary>Identifies in which stage of development life-cycle current build was done</summary>
 <version stage="Release" version="1.5.2">Version documentation added</version>
</member>
<member name="F:Tools.InternalT.AssemblyBuildStageAttribute._State">
 <summary>Contains value of the <see cref="P:Tools.InternalT.AssemblyBuildStageAttribute.State"/> property</summary>
</member>
<member name="P:Tools.InternalT.AssemblyBuildStageAttribute.State">
 <summary>Identifies stage of life-cycle</summary>
</member>
<member name="M:Tools.InternalT.AssemblyBuildStageAttribute.#ctor(Tools.InternalT.BuildStates)">
 <summary>CTor</summary>
 <param name="State">Identifies stage of life-cycle</param>
</member>
<member name="T:Tools.InternalT.BuildStates">
 <summary>Represents possible stages of life-cycle of assembly used by ĐTools project</summary>
 <version stage="Release" version="1.5.2">Version documentation added</version>
 <remarks>Note for tools developper: Use name of those constants for values of &lt;vesrsion stage=""/> XML doc attribute.</remarks>
</member>
<member name="F:Tools.InternalT.BuildStates.Nightly">
 <summary>Debug build, usually done by developer to debug and test</summary>
</member>
<member name="F:Tools.InternalT.BuildStates.Alpha">
 <summary>Early stagte of development posled to public</summary>
</member>
<member name="F:Tools.InternalT.BuildStates.Beta">
 <summary>More tested and debuged statge of development, but still not final</summary>
</member>
<member name="F:Tools.InternalT.BuildStates.RC">
 <summary>Near-final stage of development</summary>
</member>
<member name="F:Tools.InternalT.BuildStates.Release">
 <summary>Production release</summary>
</member>
<member name="T:Tools.MathT">
 <summary>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</summary>
</member>
<member name="M:Tools.MathT.LCM(System.Int64,System.Int64)">
 <summary>Least Common Multiple</summary>
 <param name="n1">First number</param>
 <param name="n2">Second number</param>
 <returns>Least common multiple (LCM) of <paramref name="n1"/> and <paramref name="n2"/></returns>
 <remarks>Uses Ευκλιδέσ's alghoritm <seealso>http://www.devx.com/vb2themax/Tip/19015</seealso> Thanks to Francesco Balena</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="n1"/> or <paramref name="n2"/> is zero</exception>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.3">Fix: Returns only either 0 or 1.</version>
</member>
<member name="M:Tools.MathT.GCD(System.Int64,System.Int64)">
 <summary>Greatest Common Divisor</summary>
 <param name="n1">First number</param>
 <param name="n2">Second number</param>
 <returns>Greatest common divisor (GCD) of <paramref name="n1"/> and <paramref name="n2"/></returns>
 <remarks>Uses Ευκλιδέσ's alghoritm <seealso>http://www.devx.com/vb2themax/Tip/19014</seealso> Thanks to Francesco Balena</remarks>
 <exception cref="T:System.DivideByZeroException"><paramref name="n1"/> or <paramref name="n2"/> is zero</exception>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MathT.Min``1(``0[])">
 <summary>Finds the smallest of parameters</summary>
 <typeparam name="T">The type of parameters that implements <see cref="T:System.IComparable`1"/></typeparam>
 <param name="Numbers">Objects one of which should be the smallest found</param>
 <returns>The smallest object in <paramref name="Numbers"/> array</returns>
 <exception cref="T:System.ArgumentNullException">If <paramref name="Numbers"/> is Null (Nothing)</exception>
 <exception cref="T:System.ArgumentException">If <paramref name="Numbers"/> contains no item</exception>
 <remarks><seealso cref="M:Tools.MathT.Max``1(System.Collections.Generic.IEnumerable{``0})"/></remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MathT.Min``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Finds the smalles value in givel <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <typeparam name="T">Type of object in <paramref name="Numbers"/>. Must implement <see cref="T:System.IComparable`1"/>.</typeparam>
 <param name="Numbers"><see cref="T:System.Collections.Generic.IEnumerable`1"/> of objects where to search the smallest</param>
 <returns>The smallest value from <paramref name="Numbers"/></returns>
 <exception cref="T:System.ArgumentNullException">If <paramref name="Numbers"/> is Null (Nothing)</exception>
 <exception cref="T:System.ArgumentException">If <paramref name="Numbers"/> contains no item</exception>
 <remarks><seealso cref="M:Tools.MathT.Max``1(System.Collections.Generic.IEnumerable{``0})"/></remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MathT.Max``1(``0[])">
 <summary>Finds the biggest of parameters</summary>
 <typeparam name="T">The type of parameters that implements <see cref="T:System.IComparable`1"/></typeparam>
 <param name="Numbers">Objects one of which should be the biggest found</param>
 <returns>The biggest object in <paramref name="Numbers"/> array</returns>
 <exception cref="T:System.ArgumentNullException">If <paramref name="Numbers"/> is Null (Nothing)</exception>
 <exception cref="T:System.ArgumentException">If <paramref name="Numbers"/> contains no item</exception>
 <remarks><seealso cref="M:Tools.MathT.Min``1(System.Collections.Generic.IEnumerable{``0})"/></remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MathT.Max``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Finds the biggest value in givel <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <typeparam name="T">Type of object in <paramref name="Numbers"/>. Must implement <see cref="T:System.IComparable`1"/>.</typeparam>
 <param name="Numbers"><see cref="T:System.Collections.Generic.IEnumerable`1"/> of objects where to search the biggest</param>
 <returns>The biggest value from <paramref name="Numbers"/></returns>
 <exception cref="T:System.ArgumentNullException">If <paramref name="Numbers"/> is Null (Nothing)</exception>
 <exception cref="T:System.ArgumentException">If <paramref name="Numbers"/> contains no item</exception>
 <remarks><seealso cref="M:Tools.MathT.Min``1(System.Collections.Generic.IEnumerable{``0})"/></remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MathT.LEBE(System.Int16)">
 <summary>Converts <see cref="T:System.Int16"/> from Little Endian to Big Endian or vice versa</summary>
 <param name="value">value to be converted</param>
 <returns><paramref name="value"/> with reversed byte order</returns>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MathT.LEBE(System.UInt16)">
 <summary>Converts <see cref="T:System.UInt16"/> from Little Endian to Big Endian or vice versa</summary>
 <param name="value">value to be converted</param>
 <returns><paramref name="value"/> with reversed byte order</returns>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MathT.LEBE(System.Int32)">
 <summary>Converts <see cref="T:System.Int32"/> from Little Endian to Big Endian or vice versa</summary>
 <param name="value">value to be converted</param>
 <returns><paramref name="value"/> with reversed byte order</returns>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.3">Fix: Does not work correctly for negative values (<see cref="T:System.OverflowException"/> may be thrown).</version>
</member>
<member name="M:Tools.MathT.LEBE(System.UInt32)">
 <summary>Converts <see cref="T:System.UInt32"/> from Little Endian to Big Endian or vice versa</summary>
 <param name="value">value to be converted</param>
 <returns><paramref name="value"/> with reversed byte order</returns>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MathT.LEBE(System.Int64)">
 <summary>Converts <see cref="T:System.Int64"/> from Little Endian to Big Endian or vice versa</summary>
 <param name="value">value to be converted</param>
 <returns><paramref name="value"/> with reversed byte order</returns>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.MathT.LEBE(System.UInt64)">
 <summary>Converts <see cref="T:System.UInt64"/> from Little Endian to Big Endian or vice versa</summary>
 <param name="value">value to be converted</param>
 <returns><paramref name="value"/> with reversed byte order</returns>
 <author www="http://dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="T:Tools.Chars">
 <summary>Contains character constants</summary>
 <version version="1.5.3">Module vas mad public</version>
</member>
<member name="F:Tools.Chars.Cr">
 <summary>Carriage return (CR) character (\r, code 13 = 0xD)</summary>
 <seealso cref="F:Microsoft.VisualBasic.Constants.vbCrLf"/>
</member>
<member name="F:Tools.Chars.Lf">
 <summary>Line feed (LF) caharcter (\n, code 10 = 0xA)</summary>
 <seealso cref="F:Microsoft.VisualBasic.Constants.vbLf"/>
</member>
<member name="F:Tools.Chars.NullChar">
 <summary>Null character (code 0)</summary>
 <seeaso cref="F:Microsoft.VisualBasic.Constants.vbNullChar"/>
</member>
<member name="F:Tools.Chars.Tab">
 <summary>Horizontal tabulator character (\t, code 9)</summary>
 <seeaso cref="F:Microsoft.VisualBasic.Constants.vbTab"/>
</member>
<member name="F:Tools.Chars.VerticalTab">
 <summary>Vertical tabulator character (\v, code 11 = 0xB)</summary>
 <seealso cref="F:Microsoft.VisualBasic.Constants.vbVerticalTab"/>
</member>
<member name="F:Tools.Chars.Back">
 <summary>Backspace character (\b, code 8)</summary>
 <seealso cref="F:Microsoft.VisualBasic.Constants.vbBack"/>
</member>
<member name="F:Tools.Chars.Alert">
 <summary>Alert character (\a, code 7)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.FormFeed">
 <summary>Form Feed character (\f, code 0xC)</summary>
 <seealso cref="F:Microsoft.VisualBasic.Constants.vbFormFeed"/>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.Escape">
 <summary>Escape character (\e, code 0x1B)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.Delete">
 <summary>Delete character (code 0x7F)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.StartOfHeader">
 <summary>Control character Start Of Header (SOH, 0x1)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.StartOfText">
 <summary>Control character Start Of Text (STX, 0x1)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.EndOfText">
 <summary>Control character End Of text (ETX, 0x3)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.EndOfTransmission">
 <summary>Control character End Of Transmission (EOT, 0x4)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.Enquiry">
 <summary>Control character Enquiry (ENQ, 0x5)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.Acknowledge">
 <summary>Control character Acknowledge (ACK, 0x6)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.ShiftOut">
 <summary>Control character Shift Out (SO, 0xE)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.ShiftIn">
 <summary>Control character Shift In (SI, 0xF)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.DataLinkEscape">
 <summary>Control character data Link Escape (DLE, 0x10)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.DeviceControl1">
 <summary>Control character Device Control One (DC1, 0x11)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.DeviceControl2">
 <summary>Control character Device Control Two (DC2, 0x12)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.DeviceControl3">
 <summary>Control character Device Control Three (DC1, 0x13)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.DeviceControl4">
 <summary>Control character Device Control Four (DC4, 0x11)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.NegativeAcknowledge">
 <summary>Control character Negative Acknowledge (NAK, 0x15)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.SynchronousIdle">
 <summary>Control character Synchronous Idle (SYN, 0x16)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.EndOfTransmissionBlock">
 <summary>Control character End of Transmission Block (ETB, 0x17)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.Cancel">
 <summary>Control character Cancel (CAN, 0x18)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.EndOfMedium">
 <summary>Control character End of Medium (EM, 0x19)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.Substitute">
 <summary>Control character Substitute (SUB, 0x1A)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.FileSeparator">
 <summary>Control character FileSeparator (FS, 0x1C)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.GroupSeparator">
 <summary>Control character Group Separator (GS, 0x1D)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.RecordSeparator">
 <summary>Control character Record Separator (RS, 0x1E)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.UnitSeparator">
 <summary>Control character Unit Separator (US, 0x1F)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.NextLine">
 <summary>Unicode character Next Line (NEL, 0x85)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.LineSeparator">
 <summary>Unicode character Line Separator (LS, 0x2028)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.ParagraphSeparator">
 <summary>Unicode character Paragraph Separator (PS, 0x2029)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.NoBreakSpace">
 <summary>Unicode character No-break space (NBSP, 0xA0)</summary>
 <version version="1.5.3">This constant is new in version 1.5.3</version>
</member>
<member name="F:Tools.Chars.LeftToRightEmbedding">
 <summary>Unicode character Left-To-Right Embedding (LRE, 0x202A)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="F:Tools.Chars.RightToLeftEmbedding">
 <summary>Unicode character Right-To-Left Embedding (RLE, 0x202B)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="F:Tools.Chars.PopDirectionalFormatting">
 <summary>Unicode character Pop Directional Formatting (LRE, 0x202C)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="F:Tools.Chars.LeftToRightOverride">
 <summary>Unicode character Left-To-Right Override (LRO, 0x202D)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="F:Tools.Chars.RightToLeftOverride">
 <summary>Unicode character Right-To-Left Override (RLO, 0x202E)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="F:Tools.Chars.LeftToRightMark">
 <summary>Unicode character Left-To-Right Mark (LRM, 0x200E)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="F:Tools.Chars.RightToLeftMark">
 <summary>Unicode character Right-To-Left Mark (RLM, 0x200F)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="F:Tools.Chars.ZeroWidthNonJoiner">
 <summary>Unicode character Zero Width Non-Joiner (ZWNJ, 0x200C)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="F:Tools.Chars.ZeroWidthJoiner">
 <summary>Unicode character Zero Width Joiner (ZWJ, 0x200D)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="F:Tools.Chars.WordJoiner">
 <summary>Unicode character Word Joiner (WJ, 0x2060)</summary>
 <version version="1.5.4">This constant is new in version 1.5.4</version>
</member>
<member name="T:Tools.dSub">
 <summary>Universal delegate of procedure with no argument</summary>
</member>
<member name="T:Tools.dSub`1">
 <summary>Universal delegate of procedure with 1 argument</summary>
 <param name="arg1">First argument</param>
 <typeparam name="T1">Type of first argument</typeparam>
</member>
<member name="T:Tools.dSub`2">
 <summary>Universal delegate of procedure with 2 arguments</summary>
 <param name="arg1">First argument</param>
 <param name="arg2">Second argument</param>
 <typeparam name="T1">Type of first argument</typeparam>
 <typeparam name="T2">Type of second argument</typeparam>
</member>
<member name="T:Tools.dSub`3">
 <summary>Universal delegate of procedure with 3 arguments</summary>
 <param name="arg1">First argument</param>
 <param name="arg2">Second argument</param>
 <param name="arg3">Third argument</param>
 <typeparam name="T1">Type of first argument</typeparam>
 <typeparam name="T2">Type of second argument</typeparam>
 <typeparam name="T3">Type of third argument</typeparam>
</member>
<member name="T:Tools.dSub`4">
 <summary>Universal delegate of procedure with 4 arguments</summary>
 <param name="arg1">First argument</param>
 <param name="arg2">Second argument</param>
 <param name="arg3">Third argument</param>
 <param name="arg4">Fourth argument</param>
 <typeparam name="T1">Type of first argument</typeparam>
 <typeparam name="T2">Type of second argument</typeparam>
 <typeparam name="T3">Type of third argument</typeparam>
 <typeparam name="T4">Type of third argument</typeparam>
</member>
<member name="T:Tools.dFunction`1">
 <summary>Universal delegate of function with no argument</summary>
 <typeparam name="TRet">Type of return value</typeparam>
</member>
<member name="T:Tools.dFunction`2">
 <summary>Universal delegate of function with 1 argument</summary>
 <param name="arg1">First argument</param>
 <typeparam name="TRet">Type of return value</typeparam>
 <typeparam name="T1">Type of first argument</typeparam>
</member>
<member name="T:Tools.dFunction`3">
 <summary>Universal delegate of function with 2 arguments</summary>
 <param name="arg1">First argument</param>
 <param name="arg2">Second argument</param>
 <typeparam name="TRet">Type of return value</typeparam>
 <typeparam name="T1">Type of first argument</typeparam>
 <typeparam name="T2">Type of second argument</typeparam>
</member>
<member name="T:Tools.dFunction`4">
 <summary>Universal delegate of function with 3 arguments</summary>
 <param name="arg1">First argument</param>
 <param name="arg2">Second argument</param>
 <param name="arg3">Third argument</param>
 <typeparam name="TRet">Type of return value</typeparam>
 <typeparam name="T1">Type of first argument</typeparam>
 <typeparam name="T2">Type of second argument</typeparam>
 <typeparam name="T3">Type of third argument</typeparam>
</member>
<member name="T:Tools.dFunction`5">
 <summary>Universal delegate of function with 4 arguments</summary>
 <param name="arg1">First argument</param>
 <param name="arg2">Second argument</param>
 <param name="arg3">Third argument</param>
 <param name="arg4">Fourth argument</param>
 <typeparam name="TRet">Type of return value</typeparam>
 <typeparam name="T1">Type of first argument</typeparam>
 <typeparam name="T2">Type of second argument</typeparam>
 <typeparam name="T3">Type of third argument</typeparam>
 <typeparam name="T4">Type of third argument</typeparam>
</member>
<member name="T:Tools.ControlEventHandler`2">
 <summary>Represents type-safe event handler</summary>
 <typeparam name="TControl">Type of <paramref name="source"/></typeparam>
 <typeparam name=" TEventArgs">Type of <paramref name="e"/></typeparam>
 <param name="source"><see cref="T:System.Windows.Forms.Control"/> that caused the event</param>
 <param name="e">Event arguments</param>
</member>
<member name="T:Tools.EventHandler`2">
 <summary>Generic event handler delegate</summary>
 <typeparam name="TSender">Type of the <paramref name="sender"/> argument</typeparam>
 <typeparam name="TEventArgs">Type of the <paramref name="e"/> argument</typeparam>
 <param name="sender">Source of the event - instance of object which fired the event</param>
 <param name="e">Event arguments</param>
</member>
<member name="T:Tools.ICloneable`1">
 <summary>Type-safe <see cref="T:System.ICloneable"/> interface</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.ICloneable`1.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="T:Tools.Cloenable`1">
 <summary>Simple <see cref="T:Tools.ICloneable`1"/> implementation that implements <see cref="M:System.ICloneable.Clone"/></summary>
 <typeparam name="T">The type that is cloned</typeparam>
 <remarks>
 Inherit from this class instead of implementing <see cref="T:Tools.ICloneable`1"/> and you will have to only implement <see cref="M:Tools.ICloneable`1.Clone"/> because <see cref="M:System.ICloneable.Clone"/> is already implemented.
 <seealso cref="M:Tools.Cloenable`1.Clone1"/>
 </remarks>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.Cloenable`1.Clone1">
 <summary>Implements <see cref="M:System.ICloneable.Clone"/></summary>
 <returns>Returns the result of <see cref="M:Tools.Cloenable`1.Clone"/> function</returns>
</member>
<member name="M:Tools.Cloenable`1.Clone">
 <summary>This is the implementation of <see cref="M:Tools.ICloneable`1.Clone"/>. Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
</member>
<member name="T:Tools.IReportsChange">
 <summary>Represents data type that reports change of values of its members</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="E:Tools.IReportsChange.Changed">
 <summary>Raised when value of member changes</summary>
 <remarks><paramref name="e"/>Should contain additional information that can be used in event-handling code (e.g. use <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> class or <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>)</remarks>
 <version version="1.5.4">Documentation change: Added recomendation to use <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/></version>
</member>
<member name="T:Tools.IReportsChange.ChangedEventHandler">
 <summary>Delegate for the <see cref="E:Tools.IReportsChange.Changed"/> event</summary>
 <param name="sender">The source of the event</param>
 <param name="e">Event information</param>
</member>
<member name="T:Tools.IReportsChange.ValueChangedEventArgsBase">
 <summary>Represents common base for all <see cref="T:Tools.IReportsChange.ValueChangedEventArgs`1"/> generic's instances</summary>
 <version version="1.5.2">Derives <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instead of <see cref="T:System.EventArgs"/></version>
</member>
<member name="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName">
 <summary>Gets name of changed value</summary>
 <returns>Name of changed value</returns>
 <remarks>This property replaces the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.PropertyName"/> property</remarks>
 <version version="1.5.2">This property stores its value in <see cref="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName"/>.</version>
</member>
<member name="P:Tools.IReportsChange.ValueChangedEventArgsBase.PropertyName">
 <summary>Gets the name of the property that changed.</summary>
 <returns>The name of the property that changed.</returns>
 <remarks>This property cannot be overriden, but you can override the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> property, this property gets value from.</remarks>
 <version version="1.5.2">Property added</version>
</member>
<member name="M:Tools.IReportsChange.ValueChangedEventArgsBase.#ctor(System.String)">
 <summary>CTor</summary>
 <param name="ValueName">Value of the <see cref="P:Tools.IReportsChange.ValueChangedEventArgsBase.ValueName"/> property</param>
</member>
<member name="T:Tools.IReportsChange.ValueChangedEventArgs`1">
 <summary>Represents information about change of value</summary>
 <typeparam name="T">Type of value contained in old and new value properties</typeparam>
</member>
<member name="F:Tools.IReportsChange.ValueChangedEventArgs`1._OldValue">
 <summary>Contains value of the<see cref="P:Tools.IReportsChange.ValueChangedEventArgs`1.OldValue"/> property</summary>
</member>
<member name="F:Tools.IReportsChange.ValueChangedEventArgs`1._NewValue">
 <summary>Contains value of the<see cref="P:Tools.IReportsChange.ValueChangedEventArgs`1.NewValue"/> property</summary>
</member>
<member name="M:Tools.IReportsChange.ValueChangedEventArgs`1.#ctor(`0,`0,System.String)">
 <summary>CTor</summary>
 <param name="OldValue">Value of item before change</param>
 <param name="NewValue">Value of item after change</param>
 <param name="ValueName">Name of changed value</param>
</member>
<member name="P:Tools.IReportsChange.ValueChangedEventArgs`1.OldValue">
 <summary>Value of item before change</summary>
</member>
<member name="P:Tools.IReportsChange.ValueChangedEventArgs`1.NewValue">
 <summary>Current value of item (after chenge)</summary>
</member>
<member name="T:Tools.Box`1">
 <summary>This class can wrap everything to be class</summary>
 <remarks>This removes limitation of <see cref="T:System.Nullable`1"/> that limits wrapped object to be structure</remarks>
 <author>Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.Box`1._Item">
 <summary>Contains value of the <see cref="P:Tools.Box`1.Item"/> property</summary>
</member>
<member name="P:Tools.Box`1.Item">
 <summary>The value of boxed type</summary>
 <returns>Current boxed value</returns>
 <value>New boxed value</value>
</member>
<member name="M:Tools.Box`1.#ctor(`0)">
 <summary>CTor</summary>
 <param name="item">Initial value of boxed type</param>
</member>
<member name="M:Tools.Box`1.op_Implicit(Tools.Box{`0})~`0">
 <summary>Unboxes boxed value</summary>
 <param name="a">Boxed value</param>
 <returns>Unboxed value</returns>
 <remarks><seealso cref="P:Tools.Box`1.Item"/></remarks>
</member>
<member name="M:Tools.Box`1.op_Implicit(`0)~Tools.Box{`0}">
 <summary>Boxes value</summary>
 <param name="a">Not boxed value</param>
 <returns>New instance of <see cref="T:Tools.Box`1"/> that boxes value <paramref name="a"/></returns>
</member>
<member name="M:Tools.Box`1.Clone">
 <summary>Creates a new object that is a copy of the current instance.</summary>
 <returns>A new object that is a copy of this instance</returns>
 <remarks>If <typeparamref name="T"/> implements <see cref="T:System.ICloneable"/> then also boxed object is cloned (deep copy), othervise only reference is passed to the new instance.</remarks>
</member>
<member name="M:Tools.Box`1.ToString">
 <summary>String representationm of current instance</summary>
</member>
<member name="T:Tools.misc_">
 <summary>Misc tools</summary>
</member>
<member name="M:Tools.misc_.self``1(``0)">
 <summary>Returns given object</summary>
 <param name="obj">Object to return</param>
 <typeparam name="T">Type of <paramref name="obj"/></typeparam>
 <returns><paramref name="obj"/></returns>
 <remarks>Somebody can think taht function that returns object itsekf in nonsense. But it is usefull with languages as VB which have <c>With</c> construct. Using this function, you can objein object itself via <c>.self</c> inside <c>With</c> conetc</remarks>
</member>
<member name="M:Tools.misc_.Swap``1(``0@,``0@)">
 <summary>Swaps values of given variables</summary>
 <typeparam name="T">Type of variables</typeparam>
 <param name="a">Variable 1</param>
 <param name="b">Variable 2</param>
 <version version="1.5.2">Method moved from <c>Tools.Experimantal.Utils</c> to <see cref="T:Tools.misc_"/>.</version>
</member>
<member name="M:Tools.misc_.Switch``1(System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
 <summary>Returns one of results depending on boolean conditions</summary>
 <param name="conditions">Conditions to test</param>
 <param name="results">Results to swich among</param>
 <param name="ThrowOnError">True to throw an <see cref="T:System.ArgumentException"/> when none of <paramref name="conditions"/> is true</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
 <returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which is true</returns>
 <exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first true condition is found) =or= None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``2(``1,System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0},System.Boolean)">
 <summary>Returns one of results depending on conditions compared to given value</summary>
 <param name="conditions">Conditions to test agains <paramref name="Value"/></param>
 <param name="value">Value to compare <paramref name="conditions"/> with</param>
 <param name="results">Results to swich among</param>
 <param name="ThrowOnError">True to throw an <see cref="T:System.ArgumentException"/> when none of <paramref name="conditions"/> equals to <paramref name="Value"/></param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
 <typeparam name="TC">Type of conditions</typeparam>
 <returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which equals to <paramref name="Value"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which equals to <paramref name="Value"/> (simply: enumeration of <paramref name="results"/> reaches the end of collection before first condition which eqauls to <paramref name="Value"/> is found) =or= None of <paramref name="conditions"/> equals to <paramref name="Value"/> and <paramref name="ThrowOnError"/> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``2(``1,System.Collections.Generic.IEnumerable{``0},``1[])">
 <summary>Returns one of results depending on conditions compared to given value</summary>
 <param name="conditions">Conditions to test agains <paramref name="Value"/></param>
 <param name="value">Value to compare <paramref name="conditions"/> with</param>
 <param name="results">Results to swich among</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
 <returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which equals to <paramref name="Value"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first condition which equals to <paramref name="value"/> is found) =or= None of <paramref name="conditions"/> equals to <paramref name="value"/>.</exception>
</member>
<member name="M:Tools.misc_.Switch``1(System.Collections.Generic.IEnumerable{``0},System.Boolean[])">
 <summary>Returns one of results depending on boolean conditions</summary>
 <param name="conditions">Conditions to test</param>
 <param name="results">Results to swich among</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
 <returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which is true</returns>
 <exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first true condition is found) =or= None of <paramref name="conditions"/> evaluates to true.</exception>
</member>
<member name="M:Tools.misc_.Switch``1(System.Collections.Generic.IEnumerable{System.Boolean},``0[])">
 <summary>Returns one of results depending on boolean conditions</summary>
 <param name="conditions">Conditions to test</param>
 <param name="results">Results to swich among</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
 <returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which is true</returns>
 <exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first true condition is found) =or= None of <paramref name="conditions"/> evaluates to true.</exception>
</member>
<member name="M:Tools.misc_.Switch``2(``1,System.Collections.Generic.IEnumerable{``1},``0[])">
 <summary>Returns one of results depending on conditions compared to given value</summary>
 <param name="conditions">Conditions to test agains <paramref name="Value"/></param>
 <param name="value">Value to compare <paramref name="conditions"/> with</param>
 <param name="results">Results to swich among</param>
 ''' <typeparam name="TC">Type of conditions</typeparam>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
 <returns>Item from <paramref name="results"/> at position of first condition from <paramref name="conditions"/> which equals to <paramref name="Value"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="results"/> contains less items than is orinar number of firts condtition which is true (simply: enumeration of <paramref name="results"/> reaches the end of collection before first condition which equals to <paramref name="value"/> is found) =or= None of <paramref name="conditions"/> equals to <paramref name="value"/>.</exception>
</member>
<member name="M:Tools.misc_.Switch``1(System.Boolean,System.Boolean,``0,``0,System.Boolean)">
 <summary>Returns one of results depending on boolean conditions (2 conditions condition-condition-result-result order of parameters)</summary>
 <param name="c1">Condition 1</param>
 <param name="c2">Condition 2</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``1(System.Boolean,System.Boolean,System.Boolean,``0,``0,``0,System.Boolean)">
 <summary>Returns one of results depending on boolean conditions (3 conditions condition-condition-result-result order of parameters)</summary>
 <param name="c1">Condition 1</param>
 <param name="c2">Condition 2</param>
 <param name="c3">Condition 3</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
 <param name="r3">Result 3 (returned when <paramref name="c3"/> is true)</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``1(System.Boolean,System.Boolean,System.Boolean,System.Boolean,``0,``0,``0,``0,System.Boolean)">
 <summary>Returns one of results depending on boolean conditions (4 conditions condition-condition-result-result order of parameters)</summary>
 <param name="c1">Condition 1</param>
 <param name="c2">Condition 2</param>
 <param name="c3">Condition 3</param>
 <param name="c4">Condition 4</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
 <param name="r3">Result 3 (returned when <paramref name="c3"/> is true)</param>
 <param name="r4">Result 4 (returned when <paramref name="c4"/> is true)</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``1(System.Boolean,``0,System.Boolean,``0,System.Boolean)">
 <summary>Returns one of results depending on boolean conditions (2 conditions condition-result-condition-resul order of parameters)</summary>
 <param name="c1">Condition 1</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
 <param name="c2">Condition 2</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
 <typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``1(System.Boolean,``0,System.Boolean,``0,System.Boolean,``0,System.Boolean)">
 <summary>Returns one of results depending on boolean conditions (3 conditions condition-result-condition-resul order of parameters)</summary>
 <param name="c1">Condition 1</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
 <param name="c2">Condition 2</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
 <param name="c3">Condition 3</param>
 <param name="r3">Result 3 (returned when <paramref name="c3"></paramref> is true)</param>
 <typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``1(System.Boolean,``0,System.Boolean,``0,System.Boolean,``0,System.Boolean,``0,System.Boolean)">
 <summary>Returns one of results depending on boolean conditions (4 conditions condition-result-condition-resul order of parameters)</summary>
 <param name="c1">Condition 1</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
 <param name="c2">Condition 2</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
 <param name="c3">Condition 3</param>
 <param name="r3">Result 3 (returned when <paramref name="c3"></paramref> is true)</param>
 <param name="c4">Condition 4</param>
 <param name="r4">Result 4 (returned when <paramref name="c4"></paramref> is true)</param>
 <typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``2(``1,``1,``1,``0,``0,System.Boolean)">
 <summary>Returns one of results depending on condition compared to given values (2 conditions condition-condition-result-result order of parameters)</summary>
 <param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
 <param name="c2">Condition 2</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``2(``1,``1,``1,``1,``0,``0,``0,System.Boolean)">
 <summary>Returns one of results depending on condition compared to given values (3 conditions condition-condition-result-result order of parameters)</summary>
 <param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
 <param name="c2">Condition 2</param>
 <param name="c3">Condition 3</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
 <param name="r3">Result 3 (returned when <paramref name="c3"/> is true)</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``2(``1,``1,``1,``1,``1,``0,``0,``0,``0,System.Boolean)">
 <summary>Returns one of results depending on condition compared to given values (4 conditions condition-condition-result-result order of parameters)</summary>
 <param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
 <param name="c2">Condition 2</param>
 <param name="c3">Condition 3</param>
 <param name="c4">Condition 4</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"/> is true)</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"/> is true)</param>
 <param name="r3">Result 3 (returned when <paramref name="c3"/> is true)</param>
 <param name="r4">Result 4 (returned when <paramref name="c4"/> is true)</param>
 <typeparam name="T">Type of <paramref name="results"/> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"/> evaluates to true and <paramref name="ThrowOnError"/> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``2(``1,``1,``0,``1,``0,System.Boolean)">
 <summary>Returns one of results depending on condition compared to given values (2 conditions condition-result-condition-resul order of parameters)</summary>
 <param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
 <param name="c2">Condition 2</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
 <typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``2(``1,``1,``0,``1,``0,``1,``0,System.Boolean)">
 <summary>Returns one of results depending on condition compared to given values (3 conditions condition-result-condition-resul order of parameters)</summary>
 <param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
 <param name="c2">Condition 2</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
 <param name="c3">Condition 3</param>
 <param name="r3">Result 3 (returned when <paramref name="c3"></paramref> is true)</param>
 <typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member>
<member name="M:Tools.misc_.Switch``2(``1,``1,``0,``1,``0,``1,``0,``1,``0,System.Boolean)">
 <summary>Returns one of results depending on condition compared to given values (4 conditions condition-result-condition-resul order of parameters)</summary>
 <param name="c1">Condition 1</param><param name="value">Value to compare conditions with</param>
 <param name="r1">Result 1 (returned when <paramref name="c1"></paramref> is true)</param>
 <param name="c2">Condition 2</param>
 <param name="r2">Result 2 (returned when <paramref name="c2"></paramref> is true)</param>
 <param name="c3">Condition 3</param>
 <param name="r3">Result 3 (returned when <paramref name="c3"></paramref> is true)</param>
 <param name="c4">Condition 4</param>
 <param name="r4">Result 4 (returned when <paramref name="c4"></paramref> is true)</param>
 <typeparam name="T">Type of <paramref name="results"></paramref> items and return value</typeparam><typeparam name="TC">Type of condition</typeparam>
 <returns>The one of results with number of first condition which is true</returns>
 <exception cref="T:System.ArgumentException">None of <paramref name="conditions"></paramref> evaluates to true and <paramref name="ThrowOnError"></paramref> is true.</exception>
</member>
<member name="M:Tools.misc_.arr``1(``0[])">
 <summary>Returns given 1D array</summary>
 <param name="items">Array to be returned</param>
 <typeparam name="T">Type of items in array</typeparam>
 <returns><paramref name="items"/></returns>
 <remarks>The aim of this function is to provide syntactically the shortets way of obtaining arrays of given type. For example in visual basic you can obtain array this way:
 <example>Dim arr = New T() {Itme1, Item2, Item3}</example>
 This function shorten this to:
 <example>Dim arr = arr(Item1, Item2, Item3)</example>
 </remarks>
</member>
<member name="M:Tools.misc_.enm``1(``0[])">
 <summary>Returns given 1D array as <see cref="T:System.Collections.Generic.IEnumerable`1"/></summary>
 <param name="items">Array to be returned</param>
 <typeparam name="T">Type of items in array</typeparam>
 <returns><paramref name="items"/></returns>
 <remarks>The aim of this function is to provide syntactically the shortets way of obtaining <see cref="T:System.Collections.Generic.IEnumerable`1"/>. For example in visual basic you can obtain <see cref="T:System.Collections.Generic.IEnumerable`1"/> this way:
 <example>Dim arr = DIrectCast(New T() {Itme1, Item2, Item3}, IEnumerable)</example>
 This function shorten this to:
 <example>Dim arr = enm(Item1, Item2, Item3)</example>
 </remarks>
</member>
<member name="T:Tools.TimeSpanFormattable">
 <summary><see cref="T:System.TimeSpan"/> that implements <see cref="T:System.IFormattable"/></summary>
 <remarks>This class has plenty of formating possibilities which can be used via <see cref="T:System.String"/> or <see cref="M:Tools.TimeSpanFormattable.ToString"/>.</remarks>
 <seealso cref="T:System.TimeSpan"/>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Ðonny</author>
 <version version="1.5.2" stage="RC"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.TimeSpanFormattable.Inner">
 <summary>Internal <see cref="T:System.TimeSpan"/></summary>
</member>
<member name="M:Tools.TimeSpanFormattable.#ctor(Tools.TimeSpanFormattable)">
 <summary>Copy CTor</summary>
 <param name="a">Instance to be used to initialize a new instance</param>
</member>
<member name="M:Tools.TimeSpanFormattable.#ctor(System.Int32,System.Int32,System.Int32)">
 <summary>Initializes a new <see cref="T:Tools.TimeSpanFormattable"/> to a specified number of hours, minutes, and seconds.</summary>
 <param name="seconds">Number of seconds.</param>
 <param name="hours">Number of hours.</param>
 <param name="minutes">Number of minutes.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:Tools.TimeSpanFormattable"/> value less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Initializes a new <see cref="T:Tools.TimeSpanFormattable"/> to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
 <param name="seconds">Number of seconds.</param>
 <param name="hours">Number of hours.</param>
 <param name="minutes">Number of minutes.</param>
 <param name="days">Number of days.</param>
 <param name="milliseconds">Number of milliseconds.</param>
 <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:Tools.TimeSpanFormattable"/> value less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.#ctor(System.Int64)">
 <summary>Initializes a new <see cref="T:Tools.TimeSpanFormattable"/> to the specified number of ticks.</summary>
 <param name="ticks">A time period expressed in 100-nanosecond units.</param>
</member>
<member name="M:Tools.TimeSpanFormattable.FromDays(System.Double)">
 <summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</summary>
 <param name="value">A number of days, accurate to the nearest millisecond.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.FromHours(System.Double)">
 <summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</summary>
 <param name="value">A number of hours, accurate to the nearest millisecond.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.FromMinutes(System.Double)">
 <summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</summary>
 <param name="value">A number of minutes, accurate to the nearest millisecond.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.FromSeconds(System.Double)">
 <summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</summary>
 <param name="value">A number of seconds, accurate to the nearest millisecond.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.FromMillseconds(System.Double)">
 <summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified number of milliseconds.</summary>
 <param name="value">A number of milliseconds.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> that represents <paramref name="value"/>.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="value"/> is equal to <see cref="F:System.Double.NaN"/>.</exception>
 <exception cref="T:System.OverflowException"><paramref name="value"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.FromTicks(System.Int64)">
 <summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> that represents a specified time, where the specification is in units of ticks.</summary>
 <param name="value">A number of ticks that represent a time.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> with a value of <paramref name="value"/>.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.Parse(System.String)">
 <summary>Constructs a new <see cref="T:Tools.TimeSpanFormattable"/> object from a time interval specified in a string.</summary>
 <param name="s">A string that specifies a time interval.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> that corresponds to <paramref name="s"/>.</returns>
 <exception cref="T:System.FormatException"><paramref name="s"/> has an invalid format.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null.</exception>
 <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.-or- At least one of the days, hours, minutes, or seconds components is outside its valid range.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.TryParse(System.String,Tools.TimeSpanFormattable@)">
 <summary>Constructs a new <see cref="T:Tools.TimeSpanFormattable"/> object from a time interval specified in a string. Parameters specify the time interval and the variable where the new <see cref="T:Tools.TimeSpanFormattable"/> object is returned.</summary>
 <param name="s">A string that specifies a time interval.</param>
 <param name="result">When this method returns, contains an object that represents the time interval specified by s, or <see cref="F:System.TimeSpan.Zero"/> if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false. This operation returns false if the s parameter is null, has an invalid format,represents a time interval less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.TryParse(System.String,System.IFormatProvider,Tools.TimeSpanFormattable@)">
 <summary>Constructs a new <see cref="T:Tools.TimeSpanFormattable"/> object from a time interval specified in a string. Parameters specify the time interval and the variable where the new <see cref="T:Tools.TimeSpanFormattable"/> object is returned.</summary>
 <param name="s">A string that specifies a time interval.</param>
 <param name="result">When this method returns, contains an object that represents the time interval specified by s, or <see cref="F:System.TimeSpan.Zero"/> if the conversion failed. This parameter is passed uninitialized.</param>
 <returns>true if s was converted successfully; otherwise, false. This operation returns false if the s parameter is null, has an invalid format,represents a time interval less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
</member>
<member name="P:Tools.TimeSpanFormattable.Ticks">
 <summary>Gets the number of ticks that represent the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.Ticks"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member>
<member name="P:Tools.TimeSpanFormattable.Days">
 <summary>Gets the number of whole days represented by the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.Days"/> of internal <see cref="T:System.TimeSpan"/>. The return value can be positive or negative.</returns>
</member>
<member name="P:Tools.TimeSpanFormattable.Hours">
 <summary>Gets the number of whole hours represented by the current<see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.Hours"/> of internal <see cref="T:System.TimeSpan"/>. The return value ranges from -23 through 23.</returns>
</member>
<member name="P:Tools.TimeSpanFormattable.Milliseconds">
 <summary>Gets the number of whole milliseconds represented by the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.Milliseconds"/> of internal <see cref="T:System.TimeSpan"/>. The return value ranges from -999 through 999.</returns>
</member>
<member name="P:Tools.TimeSpanFormattable.Minutes">
 <summary>Gets the number of whole minutes represented by the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.Minutes"/> of internal <see cref="T:System.TimeSpan"/>. The return value ranges from -59 through 59.</returns>
</member>
<member name="P:Tools.TimeSpanFormattable.Seconds">
 <summary>Gets the number of whole seconds represented by the current <see cref="T:Tools.TimeSpanFormattable"/> structure.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.Seconds"/> of internal <see cref="T:System.TimeSpan"/>. The return value ranges from -59 through 59.</returns>
</member>
<member name="P:Tools.TimeSpanFormattable.TotalDays">
 <summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional days.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.TotalDays"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member>
<member name="P:Tools.TimeSpanFormattable.TotalHours">
 <summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional hours.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.TotalHours"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member>
<member name="P:Tools.TimeSpanFormattable.TotalMilliseconds">
 <summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional milliseconds.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.TotalMilliseconds"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member>
<member name="P:Tools.TimeSpanFormattable.TotalMinutes">
 <summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional minutes.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.TotalMinutes"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member>
<member name="P:Tools.TimeSpanFormattable.TotalSeconds">
 <summary>Gets the value of the current <see cref="T:Tools.TimeSpanFormattable"/> structure expressed in whole and fractional seconds.</summary>
 <returns>Value of <see cref="P:System.TimeSpan.TotalSeconds"/> of internal <see cref="T:System.TimeSpan"/></returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Explicit(System.String)~Tools.TimeSpanFormattable">
 <summary>Constructs a new <see cref="T:Tools.TimeSpanFormattable"/> object from a time interval specified in a string.</summary>
 <param name="s">A string that specifies a time interval.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> that corresponds to <paramref name="s"/>.</returns>
 <exception cref="T:System.FormatException"><paramref name="s"/> has an invalid format.</exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is null.</exception>
 <exception cref="T:System.OverflowException"><paramref name="s"/> represents a number less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.-or- At least one of the days, hours, minutes, or seconds components is outside its valid range.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Implicit(Tools.TimeSpanFormattable)~System.String">
 <summary>Converts <see cref="T:Tools.TimeSpanFormattable"/> to <see cref="T:System.String"/></summary>
 <param name="a">A <see cref="T:Tools.TimeSpanFormattable"/></param>
 <returns><see cref="M:Tools.TimeSpanFormattable.ToString"/></returns>
 <version version="1.5.2">Operator introduced</version>
</member>
<member name="M:Tools.TimeSpanFormattable.Duration">
 <summary>Returns a new <see cref="T:Tools.TimeSpanFormattable"/> object whose value is the absolute value of the current <see cref="T:Tools.TimeSpanFormattable"/> object.</summary>
 <returns>A new <see cref="T:Tools.TimeSpanFormattable"/> whose value is the absolute value of the current <see cref="T:Tools.TimeSpanFormattable"/> object.</returns>
 <exception cref="T:System.OverflowException">The value of this instance is <see cref="F:System.TimeSpan.MinValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.CompareTo(Tools.TimeSpanFormattable)">
 <summary>Compares this instance to a specified <see cref="T:Tools.TimeSpanFormattable"/> object and returns an indication of their relative values.</summary>
 <param name="other">A <see cref="T:Tools.TimeSpanFormattable"/> object to compare to this instance.</param>
 <returns>A signed number indicating the relative values of this instance and <paramref name="other"/>. Value Description: A negative integer This instance is less than <paramref name="other"/>. Zero This instance is equal to <paramref name="other"/>. A positive integer This instance is greater than <paramref name="other"/>.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Implicit(System.TimeSpan)~Tools.TimeSpanFormattable">
 <summary>Converts <see cref="T:System.TimeSpan"/> into <see cref="T:Tools.TimeSpanFormattable"/></summary>
 <param name="a"><see cref="T:System.TimeSpan"/> to be converted</param>
 <returns><see cref="T:Tools.TimeSpanFormattable"/> with the same value as <paramref name="a"/></returns>
</member>
<member name="M:Tools.TimeSpanFormattable.#ctor(System.TimeSpan)">
 <summary>CTor from <see cref="T:System.TimeSpan"/></summary>
 <param name="a"><see cref="T:System.TimeSpan"/> to initialize value of newly created instance with</param>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Implicit(Tools.TimeSpanFormattable)~System.TimeSpan">
 <summary>Converts <see cref="T:Tools.TimeSpanFormattable"/> into <see cref="T:System.TimeSpan"/></summary>
 <param name="a"><see cref="T:Tools.TimeSpanFormattable"/> to be converted</param>
 <returns><see cref="T:System.TimeSpan"/> with same value as <paramref name="a"/></returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_UnaryNegation(Tools.TimeSpanFormattable)">
 <summary>Returns a <see cref="T:Tools.TimeSpanFormattable"/> whose value is the negated value of the specified instance.</summary>
 <param name="t">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> with the same numeric value as this instance, but the opposite sign.</returns>
 <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan"/>; that is, the value of this instance is <see cref="F:System.TimeSpan.MinValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Subtraction(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
 <summary>Subtracts a specified <see cref="T:Tools.TimeSpanFormattable"/> from another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the result of the value of <paramref name="t1"/> minus the value of <paramref name="t2"/>.</returns>
 <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Subtraction(System.TimeSpan,Tools.TimeSpanFormattable)">
 <summary>Subtracts a specified <see cref="T:Tools.TimeSpanFormattable"/> from another specified <see cref="T:System.TimeSpan"/>.</summary>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
 <returns>A <see cref="T:System.TimeSpan"/> whose value is the result of the value of <paramref name="t1"/> minus the value of <paramref name="t2"/>.</returns>
 <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Subtraction(Tools.TimeSpanFormattable,System.TimeSpan)">
 <summary>Subtracts a specified <see cref="T:System.TimeSpan"/> from another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the result of the value of <paramref name="t1"/> minus the value of <paramref name="t2"/>.</returns>
 <exception cref="T:System.OverflowException">The return value is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_UnaryPlus(Tools.TimeSpanFormattable)">
 <summary>Returns the specified instance of <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>Returns <paramref name="t"/>.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Addition(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
 <summary>Adds two specified <see cref="T:Tools.TimeSpanFormattable"/> instances.</summary>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the sum of the values of <paramref name="t1"/> and <paramref name="t2"/>.</returns>
 <exception cref="T:System.OverflowException">The resulting <see cref="T:Tools.TimeSpanFormattable"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Addition(Tools.TimeSpanFormattable,System.TimeSpan)">
 <summary>Adds specified <see cref="T:System.TimeSpan"/> to another <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the sum of the values of <paramref name="t1"/> and <paramref name="t2"/>.</returns>
 <exception cref="T:System.OverflowException">The resulting <see cref="T:Tools.TimeSpanFormattable"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Addition(System.TimeSpan,Tools.TimeSpanFormattable)">
 <summary>Adds specified <see cref="T:Tools.TimeSpanFormattable"/> to another <see cref="T:System.TimeSpan"/>.</summary>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
 <returns>A <see cref="T:Tools.TimeSpanFormattable"/> whose value is the sum of the values of <paramref name="t1"/> and <paramref name="t2"/>.</returns>
 <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan"/> is less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/>.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Equality(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
 <summary>Indicates whether two <see cref="T:Tools.TimeSpanFormattable"/> instances are equal.</summary>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are equal; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Inequality(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
 <summary>Indicates whether two <see cref="T:Tools.TimeSpanFormattable"/> instances are not equal.</summary>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are not equal; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_LessThan(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
 <summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is less than another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is less than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_LessThanOrEqual(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
 <summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is less than or equal to another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is less than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_GreaterThan(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
 <summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is greater than another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is greater than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_GreaterThanOrEqual(Tools.TimeSpanFormattable,Tools.TimeSpanFormattable)">
 <summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is greater than or equal to another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is greater than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Equality(System.TimeSpan,Tools.TimeSpanFormattable)">
 <summary>Indicates whether <see cref="T:System.TimeSpan"/> and <see cref="T:Tools.TimeSpanFormattable"/> instances are equal.</summary>
 <param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are equal; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Inequality(System.TimeSpan,Tools.TimeSpanFormattable)">
 <summary>Indicates whether <see cref="T:System.TimeSpan"/> and <see cref="T:Tools.TimeSpanFormattable"/> instances are not equal.</summary>
 <param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are not equal; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_LessThan(System.TimeSpan,Tools.TimeSpanFormattable)">
 <summary>Indicates whether a specified <see cref="T:System.TimeSpan"/> is less than another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is less than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_LessThanOrEqual(System.TimeSpan,Tools.TimeSpanFormattable)">
 <summary>Indicates whether a specified <see cref="T:System.TimeSpan"/> is less than or equal to another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is less than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_GreaterThan(System.TimeSpan,Tools.TimeSpanFormattable)">
 <summary>Indicates whether a specified <see cref="T:System.TimeSpan"/> is greater than another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is greater than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_GreaterThanOrEqual(System.TimeSpan,Tools.TimeSpanFormattable)">
 <summary>Indicates whether a specified <see cref="T:System.TimeSpan"/> is greater than or equal to another specified <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="t1">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t2">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is greater than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Equality(Tools.TimeSpanFormattable,System.TimeSpan)">
 <summary>Indicates whether <see cref="T:Tools.TimeSpanFormattable"/> and <see cref="T:System.TimeSpan"/> instances are equal.</summary>
 <param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are equal; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Inequality(Tools.TimeSpanFormattable,System.TimeSpan)">
 <summary>Indicates whether  <see cref="T:Tools.TimeSpanFormattable"/> nad <see cref="T:System.TimeSpan"/> instances are not equal.</summary>
 <param name="t2">A <see cref="T:System.TimeSpan"/>"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the values of <paramref name="t1"/> and <paramref name="t2"/> are not equal; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_LessThan(Tools.TimeSpanFormattable,System.TimeSpan)">
 <summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is less than another specified <see cref="T:System.TimeSpan"/>.</summary>
 <param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is less than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_LessThanOrEqual(Tools.TimeSpanFormattable,System.TimeSpan)">
 <summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is less than or equal to another specified <see cref="T:System.TimeSpan"/>.</summary>
 <param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is less than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_GreaterThan(Tools.TimeSpanFormattable,System.TimeSpan)">
 <summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is greater than another specified <see cref="T:System.TimeSpan"/>.</summary>
 <param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is greater than the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_GreaterThanOrEqual(Tools.TimeSpanFormattable,System.TimeSpan)">
 <summary>Indicates whether a specified <see cref="T:Tools.TimeSpanFormattable"/> is greater than or equal to another specified <see cref="T:System.TimeSpan"/>.</summary>
 <param name="t2">A <see cref="T:System.TimeSpan"/>.</param>
 <param name="t1">A <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>true if the value of <paramref name="t1"/> is greater than or equal to the value of <paramref name="t2"/>; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Multiply(System.Int32,Tools.TimeSpanFormattable)">
 <summary>Multiplies given <see cref="T:Tools.TimeSpanFormattable"/> with given multiplier</summary>
 <param name="Time">A <see cref="T:Tools.TimeSpanFormattable"/></param>
 <param name="multiplier">Multiplier</param>
 <returns><paramref name="Time"/> multiplied <paramref name="multiplier"/> times. Accurancy of theis operation is milliseconds</returns>
 <exception cref="T:System.OverflowException">Resulting value is up to be less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/></exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Multiply(Tools.TimeSpanFormattable,System.Int32)">
 <summary>Multiplies given <see cref="T:Tools.TimeSpanFormattable"/> with given multiplier</summary>
 <param name="Time">A <see cref="T:Tools.TimeSpanFormattable"/></param>
 <param name="multiplier">Multiplier</param>
 <returns><paramref name="Time"/> multiplied <paramref name="multiplier"/> times. Accurancy of theis operation is milliseconds</returns>
 <exception cref="T:System.OverflowException">Resulting value is up to be less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/></exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Multiply(System.Double,Tools.TimeSpanFormattable)">
 <summary>Multiplies given <see cref="T:Tools.TimeSpanFormattable"/> with given multiplier</summary>
 <param name="Time">A <see cref="T:Tools.TimeSpanFormattable"/></param>
 <param name="multiplier">Multiplier</param>
 <returns><paramref name="Time"/> multiplied <paramref name="multiplier"/> times. Accurancy of theis operation is milliseconds</returns>
 <exception cref="T:System.OverflowException">Resulting value is up to be less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/></exception>
</member>
<member name="M:Tools.TimeSpanFormattable.op_Multiply(Tools.TimeSpanFormattable,System.Double)">
 <summary>Multiplies given <see cref="T:Tools.TimeSpanFormattable"/> with given multiplier</summary>
 <param name="Time">A <see cref="T:Tools.TimeSpanFormattable"/></param>
 <param name="multiplier">Multiplier</param>
 <returns><paramref name="Time"/> multiplied <paramref name="multiplier"/> times. Accurancy of theis operation is milliseconds</returns>
 <exception cref="T:System.OverflowException">Resulting value is up to be less than <see cref="F:System.TimeSpan.MinValue"/> or greater than <see cref="F:System.TimeSpan.MaxValue"/></exception>
</member>
<member name="M:Tools.TimeSpanFormattable.Equals(Tools.TimeSpanFormattable)">
 <summary>Indicates whether the current <see cref="T:Tools.TimeSpanFormattable"/> is equal to another <see cref="T:Tools.TimeSpanFormattable"/>.</summary>
 <param name="other">A <see cref="T:Tools.TimeSpanFormattable"/> to compare with this object.</param>
 <returns>true if the current <see cref="T:Tools.TimeSpanFormattable"/> is equal to the <paramref name="other"/> parameter; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.Equals(System.Object)">
 <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:Tools.TimeSpanFormattable"/> object.</summary>
 <param name="obj">An <see cref="T:Tools.TimeSpanFormattable"/> or <see cref="T:System.TimeSpan"/> object to compare with this instance.</param>
 <returns>true if obj represents the same time interval as this instance; otherwise, false.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.GetHashCode">
 <summary>Returns a hash code for this instance.</summary>
 <returns>A 32-bit signed integer hash code.</returns>
</member>
<member name="M:Tools.TimeSpanFormattable.ToString">
 <summary>Returns the string representation of the value of this instance.</summary>
 <returns>A string that represents the value of this instance. The return value is of the form: [-][d.]hh:mm:ss[.ff] Items in square brackets ([ and ]) are optional, colons and periods (: and.) are literal characters; and the other items are as follows.Item Description "-" optional minus sign indicating a negative time "d" optional days "hh" hours, ranging from 0 to 23 "mm" minutes, ranging from 0 to 59 "ss" seconds, ranging from 0 to 59 "ff" optional fractional seconds, from 1 to 7 decimal digits For more information about comparing the string representation of <see cref="T:System.TimeSpan"/> and Oracle data types, see article Q324577, "<see cref="T:System.TimeSpan"/> Does Not Match Oracle 9i INTERVAL DAY TO SECOND Data Type," in the Microsoft Knowledge Base at <see>http://support.microsoft.com</see></returns>
</member>
<member name="M:Tools.TimeSpanFormattable.ToString(System.String,System.IFormatProvider)">
 <summary>Formats the value of the current instance using the specified format.</summary>
 <param name="format">The <see cref="T:System.String"/> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.
 <para>If null is pased then <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used. This argument is used to obtain decimal separators, positive and negative signs and time separators in custom format and is also passed to custom subformats in braces. In order this parameter to work it's <see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see> method must return non-null value for <see cref="T:System.Globalization.NumberFormatInfo"/> and/or <see cref="T:System.Globalization.DateTimeFormatInfo"/>. If one of returned values is null <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/> resp. <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo"/> is used.</para>
 </param>
 <returns>A <see cref="T:System.String"/> containing the value of the current instance in the specified format.</returns>
 <remarks>For more information about formating of <see cref="T:Tools.TimeSpanFormattable"/> see documentation of overloaded <seealso cref="M:Tools.TimeSpanFormattable.ToString"/></remarks>
 <exception cref="T:System.FormatException">Unknown predefined format -or- syntax error in format string</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The 'T()' patter is used on negative <see cref="T:Tools.TimeSpanFormattable"/> or value of current <see cref="T:Tools.TimeSpanFormattable"/> added to <see cref="F:System.DateTime.MinValue"/> causes <see cref="F:System.DateTime.MaxValue"/> to be exceeded.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.ToString(System.String)">
 <summary>Formats the value of the current instance using the specified format, numeric format information is obtained from current locale setting of the operating system. If you want to use custom <see cref="T:System.IFormatProvider"/> use overloaded <see cref="M:Tools.TimeSpanFormattable.ToString"/> function.</summary>
 <param name="format">The <see cref="T:System.String"/> specifying the format to use.-or- null to use the default format defined for the type of the <see cref="T:Tools.TimeSpanFormattable"/>.</param>
 <returns>A <see cref="T:System.String"/> containing the value of the current instance in the specified format.</returns>
 <remarks>
 <para><see cref="T:Tools.TimeSpanFormattable"/> provides large pallete of formats that can be used to represent current instance as <see cref="T:System.String"/>. Predefined and custom formats can be used.</para>
 <list type="table">
     <listheader>Predefined fromat strings</listheader>
     <listheader><term>Predefined format string</term><description>Treated as this custom format string</description></listheader>
     <item><term>g (short with full hours)</term><description>-h(00):mm</description></item>
     <item><term>G (long with full hours)</term><description>-h(00):mm:ss (This is default format used when no format string is specified)</description></item>
     <item><term>t (short time pattern)</term><description>-hh:mm</description></item>
     <item><term>T (long time pattern)</term><description>-hh:mm:ss</description></item>
     <item><term>l (shortest possible from hours to milliseconds)</term><description>-((h&lt;>0)h(0):mm:ss|(m&lt;>0)m(0):ss|s(0))((ll&lt;>0).lll)</description></item>
     <item><term>L (shortest possible from days to milliseconds)</term><description>-((d&lt;>0)d.)((h&lt;>0)hh:mm:ss|(m&lt;>0)m(0):ss|s(0))((ll&lt;>0).lll)</description></item>
     <item><term>s (shortest possible from hours to seconds)</term><description>-((h&lt;>0)h(0):mm:ss|(m&lt;>0)m(0):ss|s(0))</description></item>
     <item><term>S (shortest possible from days to seconds)</term><description>-((d&lt;>0)d.)((h&lt;>0)hh:mm:ss|(m&lt;>0)m(0):ss|s(0))</description></item>
 </list>
 <list type="table">
     <listheader>Custom format strings</listheader>
     <listheader><term>Format string</term><description>Description</description></listheader>
     <item><term>d, dd, ddd, ...</term>
         <description>Any number of lowercase ds represents days (value of <see cref="P:Tools.TimeSpanFormattable.Days"/>). Number of ds determines minimal number of digits that will represent number of days.</description>
     </item>
     <item><term>d(), dd()</term>
         <description>Custom-formated days. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalDays"/> which equals to <see cref="P:Tools.TimeSpanFormattable.Days"/> fromated by format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>D()</term>
         <description>Custom-formated fractional days. Value of <see cref="P:Tools.TimeSpanFormattable.TotalDays"/> fromated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>[d], [dd], [ddd], ... or [d()] or [D()]</term>
         <description>Optional days. Same formats as described above but output is ommited when number of whole days (<see cref="P:Tools.TimeSpanFormattable.Days"/>) is zero.</description>
     </item>
     <item><term>h</term>
         <description>Short hours. Value of <see cref="P:Tools.TimeSpanFormattable.Hours"/> in 24 hour format from range 0÷23 as 1 or 2 digits.</description>
     </item>
     <item><term>hh</term>
         <description>Long hours. Value of <see cref="P:Tools.TimeSpanFormattable.Hours"/> in 24 hour format from range 0÷23 always as 2 digits.</description>
     </item>
     <item><term>h()</term>
         <description>Custom-formated hours. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalHours"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>hh()</term>
         <description>Custom-formated hours part. <see cref="P:Tools.TimeSpanFormattable.Hours"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>H()</term>
         <description>Custom-formated fractional hours. Value of <see cref="P:Tools.TimeSpanFormattable.TotalHours"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>H, HH, HHH, ...</term>
         <description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalHours"/>, minimum number of digits same as number of Hs. Note: When multiple Hs are followed by '(' it's not treated as custom formatter for preceding Hs (like in case of 'H(')</description>
     </item>
     <item><term>m</term>
         <description>Short minutes. Value of <see cref="P:Tools.TimeSpanFormattable.Minutes"/> from range 0÷59 as 1 or 2 digits.</description>
     </item>
     <item><term>mm</term>
         <description>Long minutes. Value of <see cref="P:Tools.TimeSpanFormattable.Minutes"/> from range 0÷59 always as 2 digits.</description>
     </item>
     <item><term>m()</term>
         <description>Custom-formated minutes. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalMinutes"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>mm()</term>
         <description>Custom-formated whole minutes. <see cref="P:Tools.TimeSpanFormattable.Minutes"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>M()</term>
         <description>Custom-formated fractional minutes. Value of <see cref="P:Tools.TimeSpanFormattable.TotalMinutes"/> formated with formate specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>s</term>
         <description>Short seconds. Value of <see cref="P:Tools.TimeSpanFormattable.Seconds"/> from range 0÷59 as 1 or 2 digits.</description>
     </item>
     <item><term>ss</term>
         <description>Long seconds. Value of <see cref="P:Tools.TimeSpanFormattable.Seconds"/> from range 0÷59 always as 2 digits.</description>
     </item>
     <item><term>s()</term>
         <description>Custom-formated seconds. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalSeconds"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>ss()</term>
         <description>Custom-formated whole seconds. <see cref="P:Tools.TimeSpanFormattable.Seconds"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>S()</term>
         <description>Custom-formated fractional seconds. Value of <see cref="P:Tools.TimeSpanFormattable.TotalSeconds"/> fromated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>l</term>
         <description>Short milliseconds. Value of <see cref="P:Tools.TimeSpanFormattable.Milliseconds"/> from range 0÷999 as 1, 2 or 3 digits.</description>
     </item>
     <item><term>ll</term>
         <description>Middle milliseconds. Value of <see cref="P:Tools.TimeSpanFormattable.Milliseconds"/> from range 0÷999 as 2 or 3 digits.</description>
     </item>
     <item><term>lll</term>
         <description>Long milliseconds. Value of <see cref="P:Tools.TimeSpanFormattable.Milliseconds"/> from range 0÷999 always as 3 digits.</description>
     </item>
     <item><term>l()</term>
         <description>Custom-formated milliseconds. Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>ll()</term>
         <description>Custom-formated whole milliseconds. <see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>L()</term>
         <description>Custom-formated fractional milliseconds. Value of <see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/> formated with formate specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>t, tt, ttt, ...</term>
         <description>Any number of lowercase ts represents value of <see cref="P:Tools.TimeSpanFormattable.Ticks"/>. The umber of ts determines minimal number of digits copyed to output.</description>
     </item>
     <item><term>t()</term>
         <description>Custom-formated ticks. Value of <see cref="P:Tools.TimeSpanFormattable.Ticks"/> formated with format specified in braces. For more information about formats in braces see below.</description>
     </item>
     <item><term>T()</term>
         <description>
             Custom-formated time. Time part represented as <see cref="T:System.DateTime"/> formated with format specified in braces. For more information about formats in braces see below.
             The <see cref="T:System.DateTime"/> value if made as result of addition of <see cref="F:System.DateTime.MinValue"/> and current value of this <see cref="T:Tools.TimeSpanFormattable"/> and thus this pattern should be used only for positive <see cref="T:Tools.TimeSpanFormattable"/> values otherwise <see cref="T:System.ArgumentOutOfRangeException"/> may be thrown.
         </description>
     </item>
     <item><term>:</term>
         <description>The time separator defined in the current <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator"/> property that is used to differentiate hours, minutes, and seconds.</description>
     </item>
     <item><term>.</term>
         <description>The actual character used as the decimal separator is determined by the <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator"/> property of the <see cref="T:System.Globalization.NumberFormatInfo"/> that controls formatting.</description>
     </item>
     <item><term>"</term>
         <description>Quoted string (quotation mark). Displays the literal value of any string between two quotation marks (").</description>
     </item>
     <item><term>'</term>
         <description>Quoted string (apostrophe). Displays the literal value of any string between two apostrophe (') characters.</description>
     </item>
     <item><term>%c</term>
         <description>Represents the result associated with a custom format specifier "c", when the custom DateTime format string consists solely of that custom format specifier. This is used to determine between predefined and custom format string. Each format string that's length is 1 is treated as predefined format string. If you want to treat 1-character long custom format string as custom format string, precede it with the '%' character (otherwise it will be always treated as predefined format string even when such predefined format string doesn't exist which may lead to unexpected results or exceptions). In any other case ('%' is not first character of 2-characters long custom format string) the '%' is treated as any other unknown character and thus it is copyed to output (or causes <see cref="T:System.FormatException"/> if placed where it is not allowed).</description>
     </item>
     <item><term>\c</term>
         <description>
             <para>The escape character. Displays the character "c" as a literal when that character is preceded by the escape character (\). To insert the backslash character itself in the result string, use two escape characters ("\\").</para>
             <para>This described behavior takes effect in context of quoted literals (" and ') and at root level of pattern. For information how the backslash escape character is treated in format in braces see below.</para>
         </description>
     </item>
     <item><term>-</term>
         <description>Optional sign. The minus sign (defined by current culture) is copyed to output when value of this <see cref="T:Tools.TimeSpanFormattable"/> is negative.</description>
     </item>
     <item><term>+</term>
         <description>Compulsory sign. The minus or plus sign (defined by current culture) is copyed to output if value of this <see cref="T:Tools.TimeSpanFormattable"/> is non-zero.</description>
     </item>
     <item><term>(()|()|)</term>
         <description>
             Conditional formating. See below.
         </description>
     </item>
     <item><term>Any other character</term>
         <description>Any unknown character is copyed to output</description>
     </item>
 </list>
 <para>Formats in braces:</para>
 <para>
     There are several contexts where you can use other nested format string to format part of rendered string. Those nested format strings are also enclosed with braces (). The format string expected in braces depends on value being formated. d,h,m,s,l and t are integral numbers, D,H,M,S and L are floating point numbers and T is <see cref="T:System.DateTime"/>. You can use any format string valied for appropriate data type - predefined or custom or you can leave braces empty to use default format.
     Because you may want to pass closing brace ')' into custom format, you must understand how the closing brace is being esacped. If you want to pass the ')' into custom format instead of using it to close custom format block escape it with '\' (type '\)'). If you want to pass backslash ('\') into nested custom format string escape it with another '\' (type '\\'). Note if you will type any other chracter than ')' or '\' after '\' inside braces-delimited nested custom format string the whole sequence will be passed into underlying nested custom format string.
     For example if you want to use custom format string 'hh"(hours) and "mm"(minutes)"' (which produces something like '13(hours) and 33(minutes)' you should type 
     <example>T(hh"(hours\) and "mm"(minutes\)")</example>(Note: Same effect can be reached with format string 'hh"(hours) and "mm"(minutes)"' directly.
 </para>
 <para>Conditional formating:</para>
 <para>
     Any part of formating string can be surrounded by conditional formating construct. Sub-string in each part of conditional formatting must be valid formating string. Sub-string outside conditional formatting must be valid formating string. Conditional formatings can be nested.
 </para>
 <para>
     Conditional formating has similar structure as if-elseif-else statement. It begins with brace '(' and ends with brace ')'. Conditions are stated in another braces '()' just at start of conditional part. 2nd and next conditional parts are delimited by pipe '|' (followsed by braces with condition). Last conditional part (the else) does not need condition.
     Syntax of conditional segment of formating string is:
 </para>
 <code>((condition1)format1|(condition2)format2|(condition3)format3|format4)</code>
 <para>There can be 1 or more condition-format pairs. There can be or can be not last fall-backl format. Conditions are evaluated from left to right. Format associated with firts condition that evaluates to true is emited to output. False evaluated formats and skipped formats are still parsed and must be valid. But are not emitted to output. Syntax of condition is:</para>
 <code>value operator literal</code>
 <para>Value can be one of following:</para>
 <list type="table"><listheader><term>Value string</term><description>Meaning</description></listheader>
     <item><term>d</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalDays"/></description></item>
     <item><term>D</term><description><see cref="P:Tools.TimeSpanFormattable.TotalDays"/></description></item>
     <item><term>dd</term><description><see cref="P:Tools.TimeSpanFormattable.Days"/></description></item>
     <item><term>h</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalHours"/></description></item>
     <item><term>H</term><description><see cref="P:Tools.TimeSpanFormattable.TotalHours"/></description></item>
     <item><term>hh</term><description><see cref="P:Tools.TimeSpanFormattable.Hours"/></description></item>
     <item><term>m</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalMinutes"/></description></item>
     <item><term>M</term><description><see cref="P:Tools.TimeSpanFormattable.TotalMinutes"/></description></item>
     <item><term>mm</term><description><see cref="P:Tools.TimeSpanFormattable.Minutes"/></description></item>
     <item><term>s</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalSeconds"/></description></item>
     <item><term>S</term><description><see cref="P:Tools.TimeSpanFormattable.TotalSeconds"/></description></item>
     <item><term>ss</term><description><see cref="P:Tools.TimeSpanFormattable.Seconds"/></description></item>
     <item><term>l</term><description>Integral part of <see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/></description></item>
     <item><term>L</term><description><see cref="P:Tools.TimeSpanFormattable.TotalMilliseconds"/></description></item>
     <item><term>ll</term><description><see cref="P:Tools.TimeSpanFormattable.Milliseconds"/></description></item>
     <item><term>T</term><description><see cref="T:System.TimeSpan"/> with same value as current instance of <see cref="T:Tools.TimeSpanFormattable"/></description></item>
     <item><term>t</term><description><see cref="P:Tools.TimeSpanFormattable.Ticks"/></description></item>
 </list>
 <para>Any value can be surronded by pipes (||) in order to make absolute value of it.</para>
 <para>Operator can be one of following comparison operators: &lt;, &lt;=, =, >, >=, &lt;></para>
 <para>Literal is numeric literal in like 123.148. Can be preceded with negative sing (-). Parts on the left and on the right side of decimal dot are optinal. Examples of valid number are: 128, -128, 128., .128, 128.128, -.128, -128., -128, 128. When comparing to T (whole <see cref="T:System.TimeSpan"/>) right operand shall not be number but time value in format D.h:m:s.l.
 Time literal have not to be fully specified. If it is specified as number only, it is treated as hours. Days can be ommited (including first dot). Minutes, seconds and milliseconds can be ommited including leading colons (or dots). Examples of valid times are: 14 (14 hours), 14.3 (14 days, 3 hours), 14.25:10 (14 days, 25 hours, 10 minutes), 10 (10 hours), 10:00:01 (10 hours, 1 second), 0:0:0000001.321 (1.321 seconds)</para>
 <para>Conditions does not allow any spaces in them. Any character that is not understood is treated as error. Technically you can specify multiple fall down conditions and specify |() condition after | condition. Practically no such condition is ever emitted because some of prevous conditions (|) have evaluetad to true. However syntactically it is OK, error oe not thrown. Any formating that can be used outside conditions (including so-called formats in braces) can be used inside conditions.</para>
 <para>Note: Format string is parsed from left to right by finite deterministic state automaton and thus format string like mmm on time span of value 1:14:00 will produce "1414" etc.</para>
 <para>Examples (both have same results):</para>
 <example><code>Time is\: ((M>=60)hh:mm:ss|(S>=60)mm:ss|ss).l</code></example>
 <example><code>Time is\: ((T>=1)hh:mm:ss|(T>=0:1)mm:ss|ss).l</code></example>
 <para>Note: All numbers are rendered as absolute value, you must use +/- to display a sign</para>
 <para>See also: <a href="http://msdn2.microsoft.com/en-us/library/0c899ak8.aspx">Custom numeric formats</a>, <a href="http://msdn2.microsoft.com/en-us/library/dwhawy9k.aspx">Standard numeric formats</a></para>
 </remarks>
 <exception cref="T:System.FormatException">Unknown predefined format -or- syntax error in format string</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The 'T()' patter is used on negative <see cref="T:Tools.TimeSpanFormattable"/> or value of current <see cref="T:Tools.TimeSpanFormattable"/> added to <see cref="F:System.DateTime.MinValue"/> causes <see cref="F:System.DateTime.MaxValue"/> to be exceeded.</exception>
 <version version="1.5.3">Added new formating options capital H without braces, HH, HHH, ...</version>
</member>
<member name="M:Tools.TimeSpanFormattable.Format(System.TimeSpan,System.String,System.IFormatProvider)">
 <summary>Formats given <see cref="T:Tools.TimeSpanFormattable"/> using given format string</summary>
 <param name="TS">A <see cref="T:Tools.TimeSpanFormattable"/> to be formated</param>
 <param name="formatStr">A format string (Can be predefined or custom)</param>
 <param name="formatProvider">The <see cref="T:System.IFormatProvider"/> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.
 <para>If null is pased then <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used. This argument is used to obtain decimal separators, positive and negative signs and time separators in custom format and is also passed to custom subformats in braces. In order this parameter to work it's <see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see> method must return non-null value for <see cref="T:System.Globalization.NumberFormatInfo"/> and/or <see cref="T:System.Globalization.DateTimeFormatInfo"/>. If one of returned values is null <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/> resp. <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo"/> is used.</para></param>
 <returns><paramref name="TS"/> fromated using <paramref name="formatStr"/></returns>
 <exception cref="T:System.FormatException">Unknown predefined format -or- syntax error in format string</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The 'T()' patter is used on negative <see cref="T:Tools.TimeSpanFormattable"/> or value of current <see cref="T:Tools.TimeSpanFormattable"/> added to <see cref="F:System.DateTime.MinValue"/> causes <see cref="F:System.DateTime.MaxValue"/> to be exceeded.</exception>
 <remarks>For more information about formating <see cref="T:Tools.TimeSpanFormattable"/> see <seealso cref="M:Tools.TimeSpanFormattable.ToString"/></remarks>
</member>
<member name="M:Tools.TimeSpanFormattable.ExpandPredefinedFormat(System.Char)">
 <summary>Gets custom formats that represents given predefined format</summary>
 <param name="format">Predefined format</param>
 <returns>Custom format that predefined format <paramref name="format"/> expands to.</returns>
 <exception cref="T:System.FormatException">Given predefined format <paramref name="format"/> is not known. Know predefined formats are G, g, T and t.</exception>
 <remarks>For more information about formating <see cref="T:Tools.TimeSpanFormattable"/> see <seealso cref="M:Tools.TimeSpanFormattable.ToString"/></remarks>
</member>
<member name="F:Tools.TimeSpanFormattable.pfShort">
 <summary>Short code of predefined format g - short with full hours</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.efShort"/>
</member>
<member name="F:Tools.TimeSpanFormattable.pfLong">
 <summary>Short code of predefined format G - long with full hours</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.efLong"/>
</member>
<member name="F:Tools.TimeSpanFormattable.pfShortTime">
 <summary>Short code of predefined format t - short time pattern</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.efShortTime"/>
</member>
<member name="F:Tools.TimeSpanFormattable.pfLongTime">
 <summary>Short code of predefined format T - long time patern</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.efLongTime"/>
</member>
<member name="F:Tools.TimeSpanFormattable.pfShortest_hl">
 <summary>Short code of predefined format l - shortest possible from hours to milliseconds</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.efShortest_hl"/>
</member>
<member name="F:Tools.TimeSpanFormattable.pfShortest_dl">
 <summary>Short code of predefined format L - shortest possible from days to milliseconds</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.efShortest_dl"/>
</member>
<member name="F:Tools.TimeSpanFormattable.pfShortest_hs">
 <summary>Short code of predefined format L - shortest possible hours days to seconds</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.efShortest_hs"/>
</member>
<member name="F:Tools.TimeSpanFormattable.pfShortest_ds">
 <summary>Short code of predefined format L - shortest possible from days to seconds</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.efShortest_ds"/>
</member>
<member name="F:Tools.TimeSpanFormattable.efShort">
 <summary>Expanded pattern of predefined format g - short with full hours</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.pfShort"/>
</member>
<member name="F:Tools.TimeSpanFormattable.efLong">
 <summary>Expanded pattern of predefined format G - long with full hours</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.pfLong"/>
</member>
<member name="F:Tools.TimeSpanFormattable.efShortTime">
 <summary>Expanded pattern of predefined format t - short time pattern</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.pfShortTime"/>
</member>
<member name="F:Tools.TimeSpanFormattable.efLongTime">
 <summary>Expanded pattern of predefined format T - long time patern</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.pfLongTime"/>
</member>
<member name="F:Tools.TimeSpanFormattable.efShortest_hl">
 <summary>Expanded pattern of predefined format l - shortest possible from hours to milliseconds</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.pfShortest_hl"/>
</member>
<member name="F:Tools.TimeSpanFormattable.efShortest_dl">
 <summary>Expanded pattern of predefined format L - shortest possible from days to milliseconds</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.pfShortest_dl"/>
</member>
<member name="F:Tools.TimeSpanFormattable.efShortest_hs">
 <summary>Expanded pattern of predefined format L - shortest possible hours days to seconds</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.pfShortest_hs"/>
</member>
<member name="F:Tools.TimeSpanFormattable.efShortest_ds">
 <summary>Expanded pattern of predefined format L - shortest possible from days to seconds</summary>
 <seealso cref="F:Tools.TimeSpanFormattable.pfShortest_ds"/>
</member>
<member name="P:Tools.TimeSpanFormattable.PredefinedFormats">
 <summary>Gets dictionary of all predefined formats. Keys contain short codes, values contain expanded patterns.</summary>
 <returns>New instance of <see cref="T:System.Collections.Generic.Dictionary`2"/> that contains all the predefined formats</returns>
</member>
<member name="T:Tools.TimeSpanFormattable.FormatAutomatState">
 <summary>States of finite state deterministic automaton used to parse custom format string in <see cref="M:Tools.TimeSpanFormattable.FormatCustomized(System.TimeSpan,System.String,System.IFormatProvider)"/></summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.nth">
 <summary>Normal state</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.d1">
 <summary>After d</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.d2">
 <summary>After dd</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.d3">
 <summary>Ar ddd (and any number of ds)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.dFormat">
 <summary>Afterd d(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.dFormatb">
 <summary>Afterd d(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.D_">
 <summary>After D</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.D_Format">
 <summary>After D(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.D_Formatb">
 <summary>After D(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftB">
 <summary>After [</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBd1">
 <summary>After [d</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBd2">
 <summary>After [dd</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBdFormat">
 <summary>After [d(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBdFormatb">
 <summary>After [d(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBD_">
 <summary>After [D</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBD_Format">
 <summary>After [D(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBD_Formatb">
 <summary>After [D(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.leftBEnd">
 <summary>After [D(...) or [d(...)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.h1">
 <summary>After h</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.H_">
 <summary>After H</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.hFormat">
 <summary>After h(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.hFormatb">
 <summary>After h(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.H_Format">
 <summary>After H(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.H_Formatb">
 <summary>After H(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.h2">
 <summary>After hh</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.h2Format">
 <summary>After hh(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.h2Formatb">
 <summary>After hh(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.H2_">
 <summary>After HH</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.m1">
 <summary>After m</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.M_">
 <summary>After M</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.mFormat">
 <summary>After m(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.mFormatb">
 <summary>After m(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.M_Format">
 <summary>After M(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.M_Formatb">
 <summary>After M(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.m2">
 <summary>After mm</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.m2Format">
 <summary>After mm(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.m2Formatb">
 <summary>After mm(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.s1">
 <summary>After s</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.S_">
 <summary>After S</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.sFormat">
 <summary>After s(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.sFormatb">
 <summary>After s(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.S_Format">
 <summary>After S(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.S_Formatb">
 <summary>After S(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.s2">
 <summary>After ss</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.s2Format">
 <summary>After ss(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.s2Formatb">
 <summary>After ss(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.l1">
 <summary>After l</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.l2">
 <summary>After ll</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.L_">
 <summary>After L</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.lFormat">
 <summary>After l(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.lFormatb">
 <summary>After l(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.L_Format">
 <summary>After L(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.L_Formatb">
 <summary>After L(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.l2Format">
 <summary>After ll(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.l2Formatb">
 <summary>After ll(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.t1">
 <summary>After t</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.t2">
 <summary>After tt</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.T_">
 <summary>After T</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.tFormat">
 <summary>After t(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.tFormatb">
 <summary>After t(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.T_Format">
 <summary>After T(</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.T_Formatb">
 <summary>After T(\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.singleQ">
 <summary>After '</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.singleQb">
 <summary>After '\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.doubleQ">
 <summary>After "</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.doubleQb">
 <summary>After "\</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Back">
 <summary>After \</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Open">
 <summary>After (</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Open2">
 <summary>After (( or |( in condition</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Pipe">
 <summary>In condition body after |</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipe">
 <summary>Condition expression, part 1, after |</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AwaitComparison">
 <summary>Condition expression, after 1st part, expects comparison operator</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AwaitPipe">
 <summary>Condition expression, part 1, expects closing pipe</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Openh">
 <summary>Condition expression, part 1, after h</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Openm">
 <summary>Condition expression, part 1, after m</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Opens">
 <summary>Condition expression, part 1, after s</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Opend">
 <summary>Condition expression, part 1, after d</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Openl">
 <summary>Condition expression, part 1, after l</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipeh">
 <summary>Condition expression, part 1, after h (in pipes)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipem">
 <summary>Condition expression, part 1, after m (in pipes)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipes">
 <summary>Condition expression, part 1, after s (in pipes)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPiped">
 <summary>Condition expression, part 1, after d (in pipes)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipel">
 <summary>Condition expression, part 1, after l (in pipes)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Clt">
 <summary>Condition expression, comparison operator, after &lt;</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Cgt">
 <summary>Condition expression, comparison operator, after ></summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AwaitNumber">
 <summary>Condition expression, after operator &lt; or >=</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AfterMinus">
 <summary>Condition expression, part 2, after minus sign</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.AfterDot">
 <summary>Condition expression, part 2, after dot</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.BeforeDot">
 <summary>Condition expression, part 2, in number before dot</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenT">
 <summary>Condition expression, before oparetor after t or |t|</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.OpenPipeT">
 <summary>Condition expression, part1, after |t</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Tlt">
 <summary>Condition expression, operator, after &lt; or |t|&lt;</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.Tgt">
 <summary>Condition expression, operator, after t> or |t|></summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TMinus">
 <summary>Condition expression, part 2, after -</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwait1">
 <summary>Condition expression, after comparison operator</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TNumber1">
 <summary>Condition expression, part 2, first number of time</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwaitH">
 <summary>Condition expression, part 2, before hour bart</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TH">
 <summary>Condition expression, part2, hour part</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwaitM">
 <summary>Condition expression, part 2, before minute part</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TM">
 <summary>Condition expression, part 2, minute part</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwaitS">
 <summary>Condition expression, part 2, before second part</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TS">
 <summary>Condition expression, part 2, second part</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TAwaitL">
 <summary>Condition expression, part 2, before millisecond part</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.FormatAutomatState.TL">
 <summary>Condition expression, part 2, millisecond part</summary>
</member>
<member name="M:Tools.TimeSpanFormattable.PartCustomFormatBS(System.String,System.String@,System.Int32)">
 <summary>Handles backslash in nested format in braces. Extracted repeatedly used part of <see cref="M:Tools.TimeSpanFormattable.FormatCustomized(System.TimeSpan,System.String,System.IFormatProvider)"/>.</summary>
 <param name="format">Format string</param>
 <param name="InFormat">Nested format string being produced.</param>
 <param name="i">Current position in <paramref name="format"/></param>
</member>
<member name="M:Tools.TimeSpanFormattable.FormatCustomized(System.TimeSpan,System.String,System.IFormatProvider)">
 <summary>Realizes Finite Deterministic State Automaton that parses format string and produces resulting output string</summary>
 <param name="TS">A <see cref="T:Tools.TimeSpanFormattable"/> to be formated</param>
 <param name="format">Format string</param>
 <param name="prov">The <see cref="T:System.IFormatProvider"/> to use to format the value.-or- null to obtain the numeric format information from the current locale setting of the operating system.
 <para>If null is pased then <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used. This argument is used to obtain decimal separators, positive and negative signs and time separators in custom format and is also passed to custom subformats in braces. In order this parameter to work it's <see cref="M:System.IFormatProvider.GetFormat(System.Type)">GetFormat</see> method must return non-null value for <see cref="T:System.Globalization.NumberFormatInfo"/> and/or <see cref="T:System.Globalization.DateTimeFormatInfo"/>. If one of returned values is null <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/> resp. <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo"/> is used.</para>
 </param>
 <returns><paramref name="TS"/> formated using <paramref name="format"/></returns>
 <remarks>For more information about formating <see cref="T:Tools.TimeSpanFormattable"/> see <seealso cref="M:Tools.TimeSpanFormattable.ToString"/></remarks>
 <exception cref="T:System.FormatException">Unknown predefined format -or- syntax error in format string</exception>
 <exception cref="T:System.ArgumentOutOfRangeException">The 'T()' pattern is used on negative <see cref="T:Tools.TimeSpanFormattable"/> or value of current <see cref="T:Tools.TimeSpanFormattable"/> added to <see cref="F:System.DateTime.MinValue"/> causes <see cref="F:System.DateTime.MaxValue"/> to be exceeded.</exception>
</member>
<member name="M:Tools.TimeSpanFormattable.GetCondition(System.TimeSpan,System.TimeSpan,Tools.TimeSpanFormattable.ComparisonOperators)">
 <summary>Creates boolean condition for <see cref="T:System.TimeSpan"/></summary>
 <param name="v">Value to be compared at left side</param>
 <param name="CompareTo">Value to be compared at right side</param>
 <param name="op">Comparizon operator</param>
 <returns>Result of comparison <paramref name="Value"/> <paramref name="op"/> <paramref name="CompareTo"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="op"/> is not memebr of <see cref="T:Tools.TimeSpanFormattable.ComparisonOperators"/></exception>
</member>
<member name="M:Tools.TimeSpanFormattable.GetCondition(System.IConvertible,System.Double,Tools.TimeSpanFormattable.ComparisonOperators)">
 <summary>Creates boolean condition for number</summary>
 <param name="Value">Value to be compared at left side</param>
 <param name="CompareTo">Value to be compared at right side</param>
 <param name="op">Comparizon operator</param>
 <returns>Result of comparison <paramref name="Value"/> <paramref name="op"/> <paramref name="CompareTo"/></returns>
 <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="op"/> is not memebr of <see cref="T:Tools.TimeSpanFormattable.ComparisonOperators"/></exception>
 <exception cref="T:System.ArgumentException"><paramref name="Value"/> is not of one of following types: <see cref="T:System.Int32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/></exception>
</member>
<member name="T:Tools.TimeSpanFormattable.ComparisonOperators">
 <summary>Comparison operators for format string conditions</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.ComparisonOperators.Less">
 <summary>Less than (&lt;)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.ComparisonOperators.Greater">
 <summary>Greater than (>)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.ComparisonOperators.Equal">
 <summary>Equal to (=)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.ComparisonOperators.LessEqual">
 <summary>Less than or equal to (&lt;=)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.ComparisonOperators.GreaterEqual">
 <summary>Greater than or equal to (>=)</summary>
</member>
<member name="F:Tools.TimeSpanFormattable.ComparisonOperators.NotEqual">
 <summary>Not equal to (&lt;)</summary>
</member>
<member name="T:Tools.enmTriBool">
 <summary>Represents tri-state "boolean"</summary>
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.enmTriBool.False">
 <summary>False value</summary>
</member>
<member name="F:Tools.enmTriBool.True">
 <summary>True value</summary>
</member>
<member name="F:Tools.enmTriBool.Unknown">
 <summary>Third value (called Unknowm, Default etc.)</summary>
</member>
<member name="T:Tools.TypeMismatchException">
 <summary>Exception thrown when value of some type is passes where the type is not acceptable</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
 <version version="1.5.3">Added <see cref="T:System.SerializableAttribute"/></version>
 <version version="1.5.3">Added support for multiple expected types</version>
</member>
<member name="M:Tools.TypeMismatchException.#ctor">
 <summary>CTor</summary>
 <filterpriority>0</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.String)">
 <summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException" /> class with a specified error message.</summary>  
 <param name="message">The error message that explains the reason for the exception.</param>
 <version version="1.5.4">Parameter <c>Message</c> renamed to <c>message</c></version>
 <filterpriority>1</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.String,System.Object)">
 <summary>Initializes new instance of the <see cref="T:Tools.TypeMismatchException"/> class with message and actual unacceptable value.</summary>
 <param name="message">The error message that explains the reason for the exception.</param>
 <param name="actualValue">Value of argument which caused the exception to be thrown</param>
 <version version="1.5.4">Parameters renamed to camelCase</version>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.String,System.Exception)">
 <summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
 <param name="message">The error message that explains the reason for the exception.</param>
 <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
 <version version="1.5.4">Parameters renamed to camelCase</version>
 <filterpriority>3</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.String,System.Object,System.Type,System.String,System.Exception)">
 <summary>Initializes a new instance of <see cref="T:Tools.TypeMismatchException"/> class with message, name of parameter, actual value, expected type and optionally reference to the inner exception that is cause of thios exception.</summary>
 <param name="paramName">Name of method argument that cased the exception to be thrown - that violated type constraint.</param>
 <param name="actualValue">Value of argument which caused the exception to be thrown</param>
 <param name="expectedType">Type which is acceptable</param>
 <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
 <param name="message">The error message that explains the reason for the exception.</param>
 <version version="1.5.4">Parameters renamed to camelCase</version>
 <filterpriority>4</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.String,System.Object,System.Type,System.Exception)">
 <summary>Initializes a new instance of <see cref="T:Tools.TypeMismatchException"/> class with name of parameter, actual value, expected type and optionally reference to the inner exception that is cause of thios exception.</summary>
 <param name="ParamName">Name of method argument that cased the exception to be thrown - that violated type constraint.</param>
 <param name="ActualValue">Value of argument which caused the exception to be thrown</param>
 <param name="ExpectedType">Type which is acceptable</param>
 <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
 <version version="1.5.3">Fix: Exception is thrown from <see cref="M:Tools.TypeMismatchException.CreateMessage(System.Object,System.Collections.Generic.IEnumerable{System.Type})"/> when neither <paramref name="ActualValue"/> nor <paramref name="ExpectedType"/> is null</version>
 <version version="1.5.4">Generated message now contains full names of types and shows generic parameters</version>
 <version version="1.5.4">Parameters renamed to camelCase</version>
 <filterpriority>5</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.Object,System.Type,System.String,System.Exception)">
 <summary>Initializes a new instance of <see cref="T:Tools.TypeMismatchException"/> class with message, name of parameter, actual value, expected type and optionally reference to the inner exception that is cause of thios exception.</summary>
 <param name="ActualValue">Value of argument which caused the exception to be thrown</param>
 <param name="ExpectedType">Type which is acceptable</param>
 <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
 <param name="Message">The error message that explains the reason for the exception.</param>
 <version version="1.5.4">Parameters renamed to camelCase</version>
 <filterpriority>6</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.Object,System.Type,System.Exception)">
 <summary>Initializes a new instance of <see cref="T:Tools.TypeMismatchException"/> class with name of parameter, actual value, expected type and optionally reference to the inner exception that is cause of thios exception.</summary>
 <param name="ActualValue">Value of argument which caused the exception to be thrown</param>
 <param name="ExpectedType">Type which is acceptable</param>
 <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
 <version version="1.5.3">Fix: Exception is thrown from <see cref="M:Tools.TypeMismatchException.CreateMessage(System.Object,System.Collections.Generic.IEnumerable{System.Type})"/> when neither <paramref name="ActualValue"/> nor <paramref name="ExpectedType"/> is null</version>
 <version version="1.5.4">Generated message now contains full names of types and shows generic parameters</version>
 <version version="1.5.4">Parameters renamed to camelCase</version>
 <filterpriority>7</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.Object,System.String,System.String,System.Exception,System.Type[])">
 <summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException"/> class with actual parameter value, name of the parameter, exception message, inner exception and expected types</summary>
 <param name="actualValue">Unacceptable value that caused exception to be thrown. Ignored when null.</param>
 <param name="paramName">Name of parameter <paramref name="actualValue"/> was passed to. Ignored when null.</param>
 <param name="message">Exception message</param>
 <param name="innerException">Exception that caused this exception to be thrown</param>
 <param name="expectedTypes">Types acceptable by <paramref name="paramName"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="expectedTypes"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="expectedTypes"/> contains null value -or- <paramref name="expectedTypes"/> is empty</exception>
 <version version="1.5.3">This contructor overload is new in 1.5.3</version>
 <filterpriority>8</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.Object,System.String,System.Exception,System.Type[])">
 <summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException"/> class with actual parameter value, name of the parameter, inner exception and expected types</summary>
 <param name="actualValue">Unacceptable value that caused exception to be thrown. Ignored when null.</param>
 <param name="paramName">Name of parameter <paramref name="actualValue"/> was passed to. Ignored when null.</param>
 <param name="innerException">Exception that caused this exception to be thrown</param>
 <param name="expectedTypes">Types acceptable by <paramref name="paramName"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="expectedTypes"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="expectedTypes"/> contains null value -or- <paramref name="expectedTypes"/> is empty</exception>
 <version version="1.5.3">This contructor overload is new in 1.5.3</version>
 <version version="1.5.4">Generated message now contains full names of types and shows generic parameters</version>
 <filterpriority>9</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.Object,System.Exception,System.Type[])">
 <summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException"/> class with actual parameter value, inner exception and expected types</summary>
 <param name="actualValue">Unacceptable value that caused exception to be thrown. Ignored when null.</param>
 <param name="innerException">Exception that caused this exception to be thrown</param>
 <param name="expectedTypes">Acceptable types</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="expectedTypes"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="expectedTypes"/> contains null value -or- <paramref name="expectedTypes"/> is empty</exception>
 <version version="1.5.3">This contructor overload is new in 1.5.3</version>
 <filterpriority>10</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.Object,System.String,System.Type[])">
 <summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException"/> class with actual parameter value, name of the parameter and expected types</summary>
 <param name="actualValue">Unacceptable value that caused exception to be thrown. Ignored when null.</param>
 <param name="paramName">Name of parameter <paramref name="actualValue"/> was passed to. Ignored when null.</param>
 <param name="expectedTypes">Types acceptable by <paramref name="paramName"/></param>
 <exception cref="T:System.ArgumentNullException"><paramref name="expectedTypes"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="expectedTypes"/> contains null value -or- <paramref name="expectedTypes"/> is empty</exception>
 <version version="1.5.3">This contructor overload is new in 1.5.3</version>
 <filterpriority>11</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.Object,System.Type[])">
 <summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException"/> class with actual parameter value and expected types</summary>
 <param name="actualValue">Unacceptable value that caused exception to be thrown. Ignored when null.</param>
 <param name="expectedTypes">Acceptable types</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="expectedTypes"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="expectedTypes"/> contains null value -or- <paramref name="expectedTypes"/> is empty</exception>
 <version version="1.5.3">This contructor overload is new in 1.5.3</version>
 <filterpriority>12</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.Type[])">
 <summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException"/> class with expected types</summary>
 <param name="expectedTypes">Acceptable types</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="expectedTypes"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="expectedTypes"/> contains null value -or- <paramref name="expectedTypes"/> is empty</exception>
 <version version="1.5.3">This contructor overload is new in 1.5.3</version>
 <filterpriority>13</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.#ctor(System.String,System.Exception,System.Type[])">
 <summary>Initializes a new instance of the <see cref="T:Tools.TypeMismatchException"/> class with exception message, inner exception and expected types</summary>
 <param name="message">Exception message</param>
 <param name="innerException">Exception that caused this exception to be thrown</param>
 <param name="expectedTypes">Acceptable types</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="expectedTypes"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="expectedTypes"/> contains null value -or- <paramref name="expectedTypes"/> is empty</exception>
 <version version="1.5.3">This contructor overload is new in 1.5.3</version>
 <filterpriority>14</filterpriority>
</member>
<member name="M:Tools.TypeMismatchException.CreateMessage(System.Object,System.Type)">
 <summary>Create exception message from actual argument value and expected type</summary>
 <param name="ActualValue">Value of argument which caused the exception to be thrown</param>
 <param name="ExpectedType">Type which is acceptable</param>
 <returns>Exception message</returns>
 <remarks>Either of both arguments can be null and appropriate message will be created</remarks>
 <version version="1.5.3">Fix: Exception is thrown when neither <paramref name="ActualValue"/> nor <paramref name="ExpectedType"/> is null</version>
 <version version="1.5.4">Generated message now contains full names of types and shows generic parameters</version>
 <version version="1.5.4">Parameter <c>ActualValue</c> renamed to <c>actualValue</c>, <c>ExpectedType</c> to <c>expectedType</c></version>
</member>
<member name="M:Tools.TypeMismatchException.CreateMessage(System.Object,System.Collections.Generic.IEnumerable{System.Type})">
 <summary>Creates exception message from actual argument value and expected types</summary>
 <param name="actualValue">Value of argument which caused the exception to be thrown</param>
 <param name="expectedTypes">Types that are acceptable</param>
 <remarks>When <paramref name="actualValue"/> is appropriate message is generated. When <paramref name="expectedTypes"/> has only one item appropriate message is generated.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="expectedTypes"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="expectedTypes"/> contains null value.</exception>
 <version version="1.5.3">This overload is new in version 1.5.3</version>
 <version version="1.5.4">Generated message now contains full names of types and shows generic parameters</version>
</member>
<member name="M:Tools.TypeMismatchException.GetNameOfType(System.Type)">
 <summary>Gets human-readable name of type</summary>
 <param name="type">Type to get name of</param>
 <returns>Name of type consisting of full name without assembly qualification and array/pointer/reference designators and types of generic arguments</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null</exception>
</member>
<member name="F:Tools.TypeMismatchException._ActualValue">
 <summary>Contains value of the <see cref="P:Tools.TypeMismatchException.ActualValue"/> property</summary>
</member>
<member name="P:Tools.TypeMismatchException.ActualValue">
 <summary>Value that was passed</summary>
</member>
<member name="P:Tools.TypeMismatchException.ExpectedType">
 <summary>Gets type of value being expected</summary>
 <remarks>When exception is thrown for more than one expected type contains first of expected types</remarks>
</member>
<member name="P:Tools.TypeMismatchException.ExpectedTypes">
 <summary>Gets collection of types value was expected to be of</summary>
 <version version="1.5.3">This property is new in version 1.5.3</version>
</member>
<member name="T:Tools.TypeTools">
 <author www="http://dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.TypeTools.InEnum``1(``0)">
 <summary>Checks if specified value is member of an enumeration</summary>
 <param name="value">Value to be chcked</param>
 <returns>True if <paramref name="value"/> is member of <paramref name="T"/></returns>
 <typeparam name="T">Enumeration to be tested</typeparam>
 <exception cref="T:System.ArgumentException"><paramref name="T"/> is not <see cref="T:System.Enum"/></exception>
 <seelaso cref="M:Tools.TypeTools.IsDefined(System.Enum)"/>
</member>
<member name="M:Tools.TypeTools.IsFlags(System.Type)">
 <summary>Gets value indicating if given type <see cref="P:System.Type.IsEnum">is enum</see> and has <see cref="T:System.FlagsAttribute"/> applied</summary>
 <param name="enumType">Type to check if it's flags enum or not</param>
 <returns>True if <paramref name="enumType"/> <see cref="P:System.Type.IsEnum">is enum</see> and has <see cref="T:System.FlagsAttribute"/> applied; false otherwise</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> is null</exception>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.TypeTools.IsFlags(System.Enum)">
 <summary>Gets value indicating if given value is of enum type which has <see cref="T:System.FlagsAttribute"/> applied</summary>
 <param name="enumValue">Value of type <see cref="T:System.Enum"/></param>
 <returns>True if type of <paramref name="enumValue"/> has <see cref="T:System.FlagsAttribute"/> applied; false otherwise</returns>
 <version version="1.5.3">This function is new in version 1.5.3</version>
</member>
<member name="M:Tools.TypeTools.GetConstant``1(``0)">
 <summary>Gets <see cref="T:System.Reflection.FieldInfo"/> that represent given constant within an enum</summary>
 <param name="value">Constant to be found</param>
 <returns><see cref="T:System.Reflection.FieldInfo"/> of given <paramref name="value"/> if <paramref name="value"/> is member of <paramref name="T"/></returns>
 <typeparam name="T"><see cref="T:System.Enum"/> to found constant within</typeparam>
 <exception cref="T:System.ArgumentException"><paramref name="T"/> is not <see cref="T:System.Enum"/></exception>
 <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is not member of <paramref name="T"/></exception>
</member>
<member name="M:Tools.TypeTools.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
 <summary>Gets first <see cref="T:System.Attribute"/> of specified type from specified <see cref="T:System.Reflection.ICustomAttributeProvider"/></summary>
 <param name="From"><see cref="T:System.Reflection.ICustomAttributeProvider"/> to get <see cref="T:System.Attribute"/> from</param>
 <param name="Inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
 <returns>First attribute returned by <see cref="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)"/> or null if no attribute is returned</returns>
 <typeparam name="T">Type of <see cref="T:System.Attribute"/> to get</typeparam>
 <version version="1.5.4">Parameter renamed: <c>From</c> to <c>from</c>, <c>Inherit</c> to <c>inherit</c></version>
</member>
<member name="M:Tools.TypeTools.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
 <summary>Gets all <see cref="T:System.Attribute"/>s of specified type from specified <see cref="T:System.Reflection.ICustomAttributeProvider"/></summary>
 <param name="From"><see cref="T:System.Reflection.ICustomAttributeProvider"/> to get <see cref="T:System.Attribute"/> from</param>
 <param name="Inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
 <returns>All attributes returned by <see cref="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)"/> or null if no attribute is returned</returns>
 <typeparam name="T">Type of <see cref="T:System.Attribute"/> to get</typeparam>
 <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
 <version version="1.5.4">Parameter renamed: <c>From</c> to <c>from</c>, <c>Inherit</c> to <c>inherit</c></version>
</member>
<member name="M:Tools.TypeTools.GetValueInEnumBaseType``1(System.IConvertible)">
 <summary>Converts specified value to underlying type of specified enumeration (type-safe)</summary>
 <param name="value"><see cref="T:System.IConvertible"/> to be converted using invariant culture</param>
 <typeparam name="T">Type of enumeration (must derive from <see cref="T:System.Enum"/>)</typeparam>
 <exception cref="T:System.ArgumentException"><paramref name="T"/> is not an <see cref="T:System.Enum"/> -or- Underlying type of <paramref name="Type"/> is neither <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> nor <see cref="T:System.UInt64"/></exception>
</member>
<member name="M:Tools.TypeTools.GetValueInEnumBaseType(System.Type,System.IConvertible)">
 <summary>Converts specified value to underlying type of specified enumeration (type-unsafe)</summary>
 <param name="value"><see cref="T:System.IConvertible"/> to be converted using invariant culture</param>
 <param name="Type">Type of enumeration (must derive from <see cref="T:System.Enum"/>)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Type"/> is not an <see cref="T:System.Enum"/> -or- Underlying type of <paramref name="Type"/> is neither <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> nor <see cref="T:System.UInt64"/></exception>
 <version version="1.5.4">Parameter renamed: <c>Type</c> to <c>type</c></version>
</member>
<member name="M:Tools.TypeTools.GetName(System.Enum)">
 <summary>Gets name of given enumeration value</summary>
 <param name="value">Value to get name of</param>
 <returns>Name of value in enumeration or null if there is no constant with given value</returns>
</member>
<member name="M:Tools.TypeTools.GetConstant(System.Enum)">
 <summary>Gets constant field that represents given enum value</summary>
 <param name="value">Value to get constant of</param>
 <returns><see cref="T:System.Reflection.FieldInfo"/> with constant value equal to <paramref name="value"/> or null if such field does not exist</returns>
</member>
<member name="M:Tools.TypeTools.GetConstant(System.String,System.Type)">
 <summary>Gets <see cref="T:System.Reflection.FieldInfo"/> representing constant of given name from an enumeration</summary>
 <param name="name">Name of constant to get</param>
 <param name="EnumType">Type of enumeration</param>
 <returns><see cref="T:System.Reflection.FieldInfo"/> that represents constant enum member of type <paramref name="EnumType"/> with name <paramref name="name"/>. Null if such constant doesnot exists.</returns>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration</exception>
 <version version="1.5.4">Parameter renamed: <c>EnumType</c> to <c>enumType</c></version>
</member>
<member name="M:Tools.TypeTools.GetConstant``1(System.String)">
 <summary>Gets <see cref="T:System.Reflection.FieldInfo"/> representing constant of given name from an enumeration</summary>
 <param name="name">Name of constant to get</param>
 <typeparam name="T">Type of enumeration</typeparam>
 <returns><see cref="T:System.Reflection.FieldInfo"/> that represents constant enum member of type <paramref name="EnumType"/> with name <paramref name="name"/>. Null if such constant doesnot exists.</returns>
 <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration</exception>
</member>
<member name="M:Tools.TypeTools.GetValue(System.Enum)">
 <summary>Gets value of enum in its unedlying type</summary>
 <param name="value">Enumeration value</param>
 <returns>Value of enum in its underlying type (so it no longer derives from <see cref="T:System.Enum"/>)</returns>
</member>
<member name="M:Tools.TypeTools.GetValue(System.String,System.Type)">
 <summary>Gets value of enum member</summary>
 <param name="name">Name of enumeration memebr</param>
 <param name="EnumType">Type of enumeration</param>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= Constant with name <paramref name="name"/> does not exist in enumeration <paramref name="EnumType"/>.</exception>
 <returns>Value of constant with name <paramref name="name"/> in type <paramref name="EnumType"/></returns>
 <version version="1.5.4">Parameter renamed: <c>EnumType</c> to <c>enumType</c></version>
</member>
<member name="M:Tools.TypeTools.GetValue``1(System.String)">
 <summary>Gets value of enum member</summary>
 <param name="name">Name of enumeration memebr</param>
 <typeparam name="T">Type of enumeration</typeparam>
 <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= Constant with name <paramref name="name"/> does not exist in enumeration <typeparamref name="T"/>.</exception>
 <returns>Value of constant with name <paramref name="name"/> in type <typeparamref name="T"/></returns>
</member>
<member name="M:Tools.TypeTools.GetEnumValue``1(System.IConvertible)">
 <summary>Converts specified <see cref="T:System.IConvertible"/> to specified <see cref="T:System.Enum"/> (type-safe)</summary>
 <param name="value"><see cref="T:System.IConvertible"/> to be converted using invariant culture</param>
 <typeparam name="T">Type of enumeration (must derive from <see cref="T:System.Enum"/>)</typeparam>
 <exception cref="T:System.ArgumentException"><paramref name="T"/> is not an <see cref="T:System.Enum"/> -or- Underlying type of <paramref name="Type"/> is neither <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> nor <see cref="T:System.UInt64"/></exception>
 <version version="1.5.4">Parameter renamed: <c>Value</c> to <c>value</c></version>
</member>
<member name="M:Tools.TypeTools.GetEnumValue(System.Type,System.IConvertible)">
 <summary>Converts specified <see cref="T:System.IConvertible"/> to specified <see cref="T:System.Enum"/> (type-unsafe)</summary>
 <param name="value"><see cref="T:System.IConvertible"/> to be converted using invariant culture</param>
 <param name="Type">Type of enumeration (must derive from <see cref="T:System.Enum"/>)</param>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="Type"/> is not an <see cref="T:System.Enum"/> -or- Underlying type of <paramref name="Type"/> is neither <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/> nor <see cref="T:System.UInt64"/></exception>
 <version version="1.5.4">Parameters renamed: <c>Type</c> to <c>type</c>, <c>Value</c> to <c>value</c></version>
</member>
<member name="M:Tools.TypeTools.IsDefined(System.Enum)">
 <summary>Gets value idicating if given value is defined as constant in enumeration</summary>
 <param name="value">Value to be checked. Value must be to type of enumeration to be checked in</param>
 <returns>True if <paramref name="value"/> is defined as constant in enumeration of type of <paramref name="value"/></returns>
 <remarks>Assembly Tools IL contains more type-safe generic extension function IsDefined. This is comanion function to <see cref="M:Tools.TypeTools.InEnum``1(``0)"/>.</remarks>
</member>
<member name="M:Tools.TypeTools.FlagsFromString(System.String,System.Type,System.String)">
 <summary>Converts set of flags separated by separator to value of given enumeration</summary>
 <param name="Flags">Flags to parse. Each flag can be name or number</param>
 <param name="EnumType">Type fo parse flags into</param>
 <param name="Separator">Separator of flags</param>
 <returns>Returns value of type <paramref name="EnumType"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
 <version version="1.5.4">Parameter renamed: <c>Flags</c> to <c>flags</c>, <c>EnumType</c> to <c>enumType</c>, <c>Separator</c> to <c>separator</c></version>
</member>
<member name="M:Tools.TypeTools.FlagsFromString(System.String,System.Type,System.Globalization.CultureInfo)">
 <summary>Converts set of flags separated by separator to value of given enumeration</summary>
 <param name="Flags">Flags to parse. Each flag can be name or number</param>
 <param name="EnumType">Type fo parse flags into</param>
 <param name="Culture">Culture to obtain separator from</param>
 <returns>Returns value of type <paramref name="EnumType"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
 <version version="1.5.4">Parameter renamed: <c>Flags</c> to <c>flags</c>, <c>EnumType</c> to <c>enumType</c>, <c>Culture</c> to <c>culture</c></version>
</member>
<member name="M:Tools.TypeTools.FlagsFromString(System.String,System.Type,System.Globalization.TextInfo)">
 <summary>Converts set of flags separated by separator to value of given enumeration</summary>
 <param name="Flags">Flags to parse. Each flag can be name or number</param>
 <param name="EnumType">Type fo parse flags into</param>
 <param name="TextInfo"><see cref="T:System.Globalization.TextInfo"/> to obtain separator from</param>
 <returns>Returns value of type <paramref name="EnumType"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
</member>
<member name="M:Tools.TypeTools.FlagsFromString(System.String,System.Type)">
 <summary>Converts set of flags separated by separator to value of given enumeration</summary>
 <param name="Flags">Flags to parse. Each flag can be name or number</param>
 <param name="EnumType">Type fo parse flags into</param>
 <returns>Returns value of type <paramref name="EnumType"/></returns>
 <exception cref="T:System.ArgumentException"><paramref name="EnumType"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
 <remarks>Obtains separator from current culture</remarks>
 <version version="1.5.4">Parameter renamed: <c>Flags</c> to <c>flags</c>, <c>EnumType</c> to <c>enumType</c></version>
</member>
<member name="M:Tools.TypeTools.FlagsFromString``1(System.String,System.String)">
 <summary>Converts set of flags separated by separator to value of given enumeration</summary>
 <param name="Flags">Flags to parse. Each flag can be name or number</param>
 <typeparam name="T">Type fo parse flags into</typeparam>
 <param name="Separator">Separator of flags</param>
 <returns>Returns value of type <paramref name="EnumType"/></returns>
 <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
 <version version="1.5.4">Parameter renamed: <c>Flags</c> to <c>flags</c>, <c>Separator</c> to <c>separator</c></version>
</member>
<member name="M:Tools.TypeTools.FlagsFromString``1(System.String,System.Globalization.CultureInfo)">
 <summary>Converts set of flags separated by separator to value of given enumeration</summary>
 <param name="Flags">Flags to parse. Each flag can be name or number</param>
 <typeparam name="T">Type fo parse flags into</typeparam>
 <param name="Culture">Culture to obtain separator from</param>
 <returns>Returns value of type <paramref name="EnumType"/></returns>
 <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
 <version version="1.5.4">Parameter renamed: <c>Flags</c> to <c>flags</c>, <c>Culture</c> to <c>culture</c></version>
</member>
<member name="M:Tools.TypeTools.FlagsFromString``1(System.String,System.Globalization.TextInfo)">
 <summary>Converts set of flags separated by separator to value of given enumeration</summary>
 <param name="Flags">Flags to parse. Each flag can be name or number</param>
 <typeparam name="T">Type fo parse flags into</typeparam>
 <param name="TextInfo"><see cref="T:System.Globalization.TextInfo"/> to obtain separator from</param>
 <returns>Returns value of type <paramref name="EnumType"/></returns>
 <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
 <version version="1.5.4">Parameter renamed: <c>Flags</c> to <c>flags</c>, <c>TextInfo</c> to <c>textInfo</c></version>
</member>
<member name="M:Tools.TypeTools.FlagsFromString``1(System.String)">
 <summary>Converts set of flags separated by separator to value of given enumeration</summary>
 <param name="Flags">Flags to parse. Each flag can be name or number</param>
 <typeparam name="T">Type fo parse flags into</typeparam>
 <returns>Returns value of type <paramref name="EnumType"/></returns>
 <exception cref="T:System.ArgumentException"><typeparamref name="T"/> is not enumeration =or= any flag cannot be found as member of <paramref name="EnumType"/></exception>
 <remarks>Obtains separator from current culture</remarks>
 <version version="1.5.4">Parameter renamed: <c>Flags</c> to <c>flags</c></version>
</member>
<member name="M:Tools.TypeTools.GetToolBoxBitmap(System.Type,System.Boolean,System.Boolean)">
 <summary>Gets toolbox bitmap assciated with given <see cref="T:System.Type"/></summary>
 <param name="Type">Type to get toolbox bitmap for</param>
 <param name="Large">True to obtain large bitmap (32×32), false to obtain small one (16×16))</param>
 <param name="Inherit">True to allow inheriting of toolbox bitmap from base type of <paramref name="Type"/></param>
 <returns>Bitmap assciated with <see cref="T:System.Type"/> if any</returns>
 <remarks>If <paramref name="Type"/> is decorated with <see cref="T:System.Drawing.ToolboxBitmapAttribute"/> then it is used. If not static method <see cref="M:System.Drawing.ToolboxBitmapAttribute.GetImageFromResource(System.Type,System.String,System.Boolean)"/> is used with <see cref="P:System.Reflection.MemberInfo.Name"/> of <paramref name="Type"/>.</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <version version="1.5.4">Parameters renamed to camelCase</version>
</member>
<member name="M:Tools.TypeTools.GetDefaltCTor(System.Type,System.Reflection.BindingFlags)">
 <summary>Gets default CTor for given type</summary>
 <param name="Type"><see cref="T:System.Type"/> to get default CTor for</param>
 <param name="Attributes">Optionaly specifies aaccesibility attributes for default constructor. Default is <see cref="F:System.Reflection.BindingFlags.Public"/>.</param>
 <returns><see cref="T:System.Reflection.ConstructorInfo"/> refresenting default CTor of type <paramref name="Type"/>. Null if there is no default (parameter-less) CTor</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <seealso cref="M:Tools.TypeTools.HasDefaultCTor(System.Type,System.Reflection.BindingFlags)"/>
 <version stage="Nightly" version="1.5.2">Fixed: Always returns null due to <paramref name="Attributes"/> being and-ed with <see cref="F:System.Reflection.BindingFlags.Instance"/> instead of or-ed</version>
 <version version="1.5.4">Parameters renamed to camelCase</version>
</member>
<member name="M:Tools.TypeTools.HasDefaultCTor(System.Type,System.Reflection.BindingFlags)">
 <summary>Gets value indicationg if given <see cref="T:System.Type"/> has default constructor</summary>
 <param name="Type"><see cref="T:System.Type"/> to check</param>
 <param name="Attributes">Optionaly specifies aaccesibility attributes for default constructor. Default is <see cref="F:System.Reflection.BindingFlags.Public"/>.</param>
 <remarks>True if type has default (parameterless) CTor, fale otherwise.</remarks>
 <seealso cref="M:Tools.TypeTools.GetDefaltCTor(System.Type,System.Reflection.BindingFlags)"/>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <version version="1.5.4">Parameters renamed to camelCase</version>
</member>
<member name="M:Tools.TypeTools.CanAutomaticallyCreateInstance(System.Type)">
 <summary>Gets value indicating if instance of geven type can be easily created using default CTor</summary>
 <param name="Type"><see cref="T:System.Type"/> to check</param>
 <returns>False if type is either interface, abstract or open; true if type has default contructor or is value type</returns>
 <seealso cref="M:Tools.TypeTools.HasDefaultCTor(System.Type,System.Reflection.BindingFlags)"/>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null</exception>
 <version version="1.5.4">Parameter renamed: <c>Type</c> to <c>type</c></version>
</member>
<member name="M:Tools.TypeTools.CreateInstance(System.Type)">
 <summary>Creates an instance of the specified type using that type's default constructor.</summary>
 <param name="type">The type of object to create.</param>
 <returns>A reference to the newly created object.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
 <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a RuntimeType. -or- <paramref name="type"/> is an open generic type (that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns true).</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="type"/> cannot be a <see cref="T:System.Reflection.Emit.TypeBuilder" />.  -or- Creation of <see cref="T:System.TypedReference" />, <see cref="T:System.ArgIterator" />, <see cref="T:System.Void" />, and <see cref="T:System.RuntimeArgumentHandle" /> types, or arrays of those types, is not supported.</exception>
 <exception cref="T:System.Reflection.TargetInvocationException">The constructor being called throws an exception.</exception>
 <exception cref="T:System.MethodAccessException">The caller does not have permission to call this constructor.</exception>
 <exception cref="T:System.MemberAccessException">Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism.</exception>
 <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">The COM type was not obtained through Overload:<see cref="M:System.Type.GetTypeFromProgID(System.String)" /> or Overload:<see cref="M:System.Type.GetTypeFromCLSID(System.Guid)" />.</exception>
 <exception cref="T:System.MissingMethodException">No matching public constructor was found.</exception>
 <exception cref="T:System.Runtime.InteropServices.COMException"><paramref name="type"/> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered.</exception>
 <exception cref="T:System.TypeLoadException"><paramref name="type"/> is not a valid type.</exception>
 <seelaso cref="M:System.Activator.CreateInstance(System.ActivationContext)"/>
</member>
<member name="M:Tools.TypeTools.DynamicCast``1(System.Object,System.Boolean)">
 <summary>Attempts to cast given object to specific type, optionally using also type converter as last resort</summary>
 <param name="obj">Object to cast</param>
 <param name="considerTypeConverter">True to try use <see cref="T:System.ComponentModel.TypeConverter"/> is all other ways of conversion failed</param>
 <typeparam name="T">TYpe to cast <paramref name="obj"/> to</typeparam>
 <returns>Value of <paramref name="obj"/> casted to type <typeparamref name="T"/>. Method uses several ways of casting.</returns>
 <exception cref="T:System.InvalidCastException">No casting method from type of <paramref name="obj"/> to <paramref name="Type"/> was found -or- build in conversion from <see cref="T:System.String"/> to numeric type failed.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators were found, but no one is most specific.</exception>
 <exception cref="T:System.OverflowException">Build in conversion to numeric value (or <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/>) failed because <paramref name="obj"/> cannot be represented in <paramref name="Type"/> -or- Called cast operator have thrown this exception.</exception>
 <exception cref="T:System.FormatException">Conversion of <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/> failed because string has bad format. -or- Operator being caled has thrown this exception.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="considerTypeConverter"/> is true, <see cref="T:System.ComponentModel.TypeConverter"/> was used and it couldn't perform the conversion requested.</exception>
 <remarks>See <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type,System.Boolean)"/> non-generic method fro details on how casting is done.</remarks>
 <seealso cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type,System.Boolean)"/>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="M:Tools.TypeTools.DynamicCast``1(System.Object)">
 <summary>Attempts to cast given object to specific type</summary>
 <param name="obj">Object to cast</param>
 <typeparam name="T">TYpe to cast <paramref name="obj"/> to</typeparam>
 <returns>Value of <paramref name="obj"/> casted to type <typeparamref name="T"/>. Method uses several ways of casting.</returns>
 <exception cref="T:System.InvalidCastException">No casting method from type of <paramref name="obj"/> to <paramref name="Type"/> was found -or- build in conversion from <see cref="T:System.String"/> to numeric type failed.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators were found, but no one is most specific.</exception>
 <exception cref="T:System.OverflowException">Build in conversion to numeric value (or <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/>) failed because <paramref name="obj"/> cannot be represented in <paramref name="Type"/> -or- Called cast operator have thrown this exception.</exception>
 <exception cref="T:System.FormatException">Conversion of <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/> failed because string has bad format. -or- Operator being caled has thrown this exception.</exception>
 <remarks>See <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type,System.Boolean)"/> non-generic method fro details on how casting is done.</remarks>
 <seealso cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.3">The <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute"/> attribute removed. This method is no longe extension method. This change was done because .NET languages does not support extension methods on <see cref="T:System.Object"/>.</version>
 <version version="1.5.4">This function is now backed by call to a new extended overload <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type,System.Boolean)">DynamicCast(obj, type, false)</see></version>
</member>
<member name="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)">
 <summary>Attempts to cast given tobject to given type</summary>
 <param name="obj">Object to cast</param>
 <param name="Type">Type to cast <paramref name="obj"/> to</param>
 <returns>Value of <paramref name="obj"/> casted to type <paramref name="Type"/>. Method uses several ways of casting.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null and <paramref name="obj"/> is not null</exception>
 <exception cref="T:System.InvalidCastException">No casting method from type of <paramref name="obj"/> to <paramref name="Type"/> was found -or- build in conversion from <see cref="T:System.String"/> to numeric type failed.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators were found, but no one is most specific.</exception>
 <exception cref="T:System.OverflowException">Build in conversion to numeric value (or <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/>) failed because <paramref name="obj"/> cannot be represented in <paramref name="Type"/> -or- Called cast operator have thrown this exception.</exception>
 <exception cref="T:System.FormatException">Conversion of <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/> failed because string has bad format. -or- Operator being caled has thrown this exception.</exception>
 <remarks>For details of how the conversion is performed see <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type,System.Boolean)"/></remarks>
 <seealso cref="M:Tools.TypeTools.DynamicCast`1(System.Object)"/>
 <version version="1.5.2">Function introduced</version>
 <version version="1.5.3">The <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute"/> attribute removed. This method is no longer extension method. This change was done because .NET languages does not support extension methods on <see cref="T:System.Object"/>.</version>
 <version version="1.5.4">Parameter renamed: <c>Type</c> to <c>type</c></version>
 <version version="1.5.4">This function is now backed by call to a new extended overload <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type,System.Boolean)">DynamicCast(obj, type, false)</see></version>
</member>
<member name="M:Tools.TypeTools.DynamicCast(System.Object,System.Type,System.Boolean)">
 <summary>Attempts to cast given tobject to given type</summary>
 <param name="obj">Object to cast</param>
 <param name="Type">Type to cast <paramref name="obj"/> to</param>
 <param name="considerTypeConverter">True to try use <see cref="T:System.ComponentModel.TypeConverter"/> is all other ways of conversion failed</param>
 <returns>Value of <paramref name="obj"/> casted to type <paramref name="Type"/>. Method uses several ways of casting.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is null and <paramref name="obj"/> is not null</exception>
 <exception cref="T:System.InvalidCastException">No casting method from type of <paramref name="obj"/> to <paramref name="Type"/> was found -or- build in conversion from <see cref="T:System.String"/> to numeric type failed.</exception>
 <exception cref="T:System.Reflection.AmbiguousMatchException">Cast operators were found, but no one is most specific.</exception>
 <exception cref="T:System.OverflowException">Build in conversion to numeric value (or <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/>) failed because <paramref name="obj"/> cannot be represented in <paramref name="Type"/> -or- Called cast operator have thrown this exception.</exception>
 <exception cref="T:System.FormatException">Conversion of <see cref="T:System.String"/> to <see cref="T:System.TimeSpan"/> failed because string has bad format. -or- Operator being caled has thrown this exception.</exception>
 <exception cref="T:System.NotSupportedException"><paramref name="considerTypeConverter"/> is true, <see cref="T:System.ComponentModel.TypeConverter"/> was used and it couldn't perform the conversion requested.</exception>
 <remarks>Following ways of casting are attempted in given order
 <list type="numbered">
 <item>When <paramref name="obj"/> is null, null is returned (default value for value types)</item>
 <item>When <paramref name="Type"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> <paramref name="obj"/>, <paramref name="obj"/> is returned.</item>
 <item>Attempt to find cast operator using <see cref="M:Tools.ReflectionT.ReflectionTools.FindBestFitCastOperator(System.Type,System.Type)"/> is done. If operator is found, it is used.
 <note>Operator being called can throw an eyception.</note></item>
 <item>If <paramref name="obj"/> is enumeration, has value which is defined for its enumeration type and <paramref name="Type"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> <see cref="T:System.String"/>, result of <see cref="M:System.Enum.ToString"/> is used.</item>
 <item>If <paramref name="Type"/> is enumeration type and <paramref name="obj"/> is string and <paramref name="obj"/> has same value as is one of names of members of <paramref name="Type"/> enumeration, result of <see cref="M:System.Enum.Parse(System.Type,System.String)"/> is returned.</item>
 <item>If <paramref name="obj"/> is enumeration and <paramref name="Type"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> its underlying type, value of <paramref name="obj"/> in enumeration underlying type is returned.</item>
 <item>If <paramref name="Type"/> is enumeration and its underlying type <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from</see> type of <paramref name="obj"/>, value <paramref name="obj"/> is returned as member of <paramref name="Type"/> enumeration.</item>
 <item>If either <paramref name="obj"/> or <paramref name="Type"/> is enumeration, <see cref="M:Tools.TypeTools.DynamicCast(System.Object,System.Type)"/> is called with <paramref name="obj"/> in its undelying type (if it is enumeration; otherwise <paramref name="obj"/> is used) and enum-underlying type of <paramref name="Type"/> (if it is enumeration; otherwise <paramref name="Type"/> is used). If <paramref name="Type"/> is enumeration result of call is converted from underlying type to <paramref name="Type"/> (otherwise it is left as retuned), and returned.</item>
 <item>Build-in conversion is attempted. Build-in conversion is defined for between all combinations of following types: <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt64"/>, <see cref="T:System.Int64"/>, <see cref="T:System.Single"/>, <see cref="T:System.Double"/>, <see cref="T:System.Char"/>, <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>.
 <para>For numeric types, simple interpretation of numeric value in different type, is attempted, with possible loss of precision and <see cref="T:System.OverflowException"/>. Visual Basic C* operators are used. They round x.5 to neares even integer.</para>
 <para>For conversion from numeric type to <see cref="T:System.Char"/> <see cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)"/> is used, for conversion from <see cref="T:System.Char"/> to numeric type <see cref="M:Microsoft.VisualBasic.Strings.AscW(System.Char)"/> is used. <see cref="T:System.OverflowException"/> may occur.</para>
 <para>For conversion from numeric type to <see cref="T:System.String"/> and from <see cref="T:System.String"/> to numeric type, such conversion is culture-sensitive. When string cannot be interpreted as number, <see cref="T:System.InvalidCastException"/> is thrown.</para>
 <para>When <see cref="T:System.String"/> is converted to <see cref="T:System.Char"/>, only firts character is converted, empty string is converted to <see cref="F:Microsoft.VisualBasic.Constants.vbNullChar"/>. <see cref="T:System.Char"/> to <see cref="T:System.String"/> is converted as single-character string.</para>
 <para><see cref="T:System.Boolean"/> to string is converted as either "True" or "False" (culture-independent). </para>
 <para>Any non-zero number to <see cref="T:System.Boolean"/> is converted as true, zero as false. <see cref="T:System.Boolean"/> to numeric values are converted to -1 for signed (including <see cref="T:System.Double"/> and <see cref="T:System.Single"/>) and as max value to unsigned.</para>
 <para><see cref="T:System.Char"/> to <see cref="T:System.Boolean"/> is converted in same was as numbers (numeric code of character is used), <see cref="T:System.Boolean"/> to <see cref="T:System.Char"/> as well.</para></item>
 <item>Special build-in conversions are attempted. Those conversions are difined between <see cref="T:System.String"/> and any of following types: <see cref="T:System.Decimal"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.TimeSpan"/>.
 <para>Values are converted from this type to <see cref="T:System.String"/> if <paramref name="Type"/> equals to <see cref="T:System.String"/> using default format in culture-sensitive way.</para>
 <para>If <paramref name="obj"/> is <see cref="T:System.String"/> it is converted to one of these types when <paramref name="Type"/> <see cref="M:System.Type.IsAssignableFrom(System.Type)">is assignable from it</see> using culture-sensitive parsing in following order without error recovery: <see cref="T:System.DateTime"/>, <see cref="T:System.TimeSpan"/>, <see cref="T:System.Decimal"/>.</para></item>
 <item>Special conversion between <see cref="T:System.Boolean"/> and <see cref="T:System.Decimal"/> is attempted using same rules for <see cref="T:System.Boolean"/> ↔ numeric conversions above.</item>
 <item>(Only when <paramref name="considerTypeConverter"/> is true) <see cref="T:System.ComponentModel.TypeConverter"/> that can convert <paramref name="obj"/> is obtained using <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)"/>. If it <see cref="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">can convert to</see> <paramref name="Type"/> <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> is called.</item>
 <item>(Only when <paramref name="considerTypeConverter"/> is true) <see cref="T:System.ComponentModel.TypeConverter"/> for <paramref name="Type"/> is obtained using <see cref="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)"/>. If it <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">can convert from</see> object of type of <paramref name="obj"/> <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> is called.</item>
 </list>
 <para>Note that following conversion are not defined: <see cref="T:System.DateTime"/>↔<see cref="T:System.Boolean"/>, <see cref="T:System.DateTime"/>↔<see cref="T:System.TimeSpan"/>, <see cref="T:System.DateTime"/>↔<see cref="T:System.Char"/>.
 <see cref="T:Tools.TimeSpanFormattable"/> is treated as any other types using its operators.
 There is no specific support for <see cref="T:System.Nullable`1"/></para></remarks>
 <seealso cref="M:Tools.TypeTools.DynamicCast`1(System.Object)"/>
 <version version="1.5.4">This overload is new in version 1.5.4</version>
</member>
<member name="M:Tools.TypeTools.IsGenericParentOf(System.Type,System.Type)">
 <summary>Gets value indicating if given type is generic type definition from which another given type was created</summary>
 <param name="Parent">Generic type definition to test if <paramref name="Child"/> is created from</param>
 <param name="Child">Generic type to test if it is created from <paramref name="Parent"/></param>
 <returns>True if <paramref name="Parent"/> <see cref="P:System.Type.IsGenericTypeDefinition">is generic type definition</see>, <paramref name="Child"/> <see cref="P:System.Type.IsGenericType">is generic type</see> and <paramref name="Child"/> is created from <paramref name="Parent"/>; false otherwise.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Child"/> or <paramref name="Parent"/> is null.</exception>
 <seelaso cref="M:Tools.TypeTools.IsGenericCreatedFrom(System.Type,System.Type)"/>
 <version version="1.5.2">Function added</version>
 <version version="1.5.4">Parameters renamed: <c>Parent</c> to <c>parent</c>, <c>Child</c> to <c>child</c></version>
</member>
<member name="M:Tools.TypeTools.IsGenericCreatedFrom(System.Type,System.Type)">
 <summary>Gets value indicating if given type is generic type created from another type being generic type definition</summary>
 <param name="Parent">Generic type definition to test if <paramref name="Child"/> is created from</param>
 <param name="Child">Generic type to test if it is created from <paramref name="Parent"/></param>
 <returns>True if <paramref name="Parent"/> <see cref="P:System.Type.IsGenericTypeDefinition">is generic type definition</see>, <paramref name="Child"/> <see cref="P:System.Type.IsGenericType">is generic type</see> and <paramref name="Child"/> is created from <paramref name="Parent"/>; false otherwise.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Child"/> or <paramref name="Parent"/> is null.</exception>
 <seelaso cref="M:Tools.TypeTools.IsGenericParentOf(System.Type,System.Type)"/>
 <version version="1.5.2">Function added</version>
 <version version="1.5.4">Parameters renamed: <c>Parent</c> to <c>parent</c>, <c>Child</c> to <c>child</c></version>
</member>
<member name="M:Tools.TypeTools.IsNullableOf(System.Type,System.Type)">
 <summary>Gets value indicating if given type is <see cref="T:System.Nullable`1"/> and if another given type is its generic argument</summary>
 <param name="NullableType">Type to be tested if its is <see cref="T:System.Nullable`1"/>[<paramref name="InnerType"/>]</param>
 <param name="InnerType">Type to be generic argument of <paramref name="NullableType"/></param>
 <returns>True when <paramref name="NullableType"/> <see cref="M:Tools.TypeTools.IsGenericCreatedFrom(System.Type,System.Type)">is generic type created from</see> <see cref="T:System.Nullable`1"/> and <paramref name="InnerType"/> is its generic argument; false otherwise</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="NullableType"/> or <paramref name="InnerType"/> is null</exception>
 <version version="1.5.2">Function added</version>
 <version version="1.5.4">Parameters renamed: <c>NullableType</c> to <c>nullableType</c>, <c>InnerType</c> to <c>innerType</c></version>
</member>
<member name="M:Tools.TypeTools.IsNullable(System.Type)">
 <summary>Gets value indicating if given type is nullable</summary>
 <param name="NullableType">Type to test</param>
 <returns>True if <paramref name="NullableType"/> <see cref="M:Tools.TypeTools.IsGenericCreatedFrom(System.Type,System.Type)">is generic type created from</see> <see cref="T:System.Nullable`1"/>; false otherwise</returns>
 <remarks>Returns false when generict type definition <see cref="T:System.Nullable`1"/> is passed</remarks>
 <exception cref="T:System.ArgumentNullException"><paramref name="NullableType"/> is null</exception>
 <version version="1.5.2">Function added</version>
 <version version="1.5.4">Parameter renamed: <c>NullableType</c> to <c>nullableType</c></version>
</member>
<member name="M:Tools.TypeTools.IsVector(System.Type)">
 <summary>Gets value indicating if type is vector</summary>
 <param name="Type">Type to test</param>
 <returns>True if type represents vector (SzArray) - that is 1-dimensional array with lower bound zero.</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="Type"/> is nul</exception>
 <version version="1.5.2">Function added</version>
 <version version="1.5.4">Parameter renamed: <c>Type</c> to <c>type</c></version>
</member>
<member name="M:Tools.TypeTools.Is``1(System.Object)">
 <summary>Gets value indicating of given object is of given type</summary>
 <typeparam name="T">Type to test if given object is of that type</typeparam>
 <param name="obj">An object to test if it is of type <typeparamref name="T"/></param>
 <returns>True if <paramref name="obj"/> is of type (is assignable to variable of type) <typeparamref name="T"/>; false otherwise or if <paramref name="obj"/> is null.</returns>
 <remarks>Purpose of this function is to expose functionality of Visual Basic <c>TypeOf ... Is</c> or C# <c>is</c> operator to languages that does not support it (e.g. C++/CLI). From languages with native support for testing if object is of given type, you should use language-native functionality.</remarks>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="M:Tools.TypeTools.TryParseEnum(System.Type,System.String,System.Boolean,System.Enum@)">
 <summary>Attempts to parse enumeration value from string to actual enumeration</summary>
 <param name="enumType">Type of enumeration</param>
 <param name="strValue">String to parse</param>
 <param name="ignoreCase">True to ignore casing of <paramref name="strValue"/>, false to strictly match cassing.</param>
 <param name="enumValue">When parsing succeeds returns enumerated value of type <paramref name="enumType"/></param>
 <returns>True if conversion succeeded and <paramref name="enumValue"/> contains parsed value, false otherwise (<paramref name="enumValue"/> is unchanged in this case)</returns>
 <exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> is null</exception>
 <exception cref="T:System.ArgumentException"><paramref name="enumType"/> ie not enum</exception>
 <version version="1.5.4">This function is new in version 1.5.4</version>
</member>
<member name="T:Tools.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Abort">
<summary>
  Looks up a localized string similar to Abort.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Abort_access">
<summary>
  Looks up a localized resource of type System.Char similar to A.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Cancel">
<summary>
  Looks up a localized string similar to Cancel.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Cancel_access">
<summary>
  Looks up a localized resource of type System.Char similar to C.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Error_">
<summary>
  Looks up a localized string similar to Error.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Help">
<summary>
  Looks up a localized string similar to Help.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Help_access">
<summary>
  Looks up a localized resource of type System.Char similar to H.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Ignore">
<summary>
  Looks up a localized string similar to Ignore.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Ignore_access">
<summary>
  Looks up a localized resource of type System.Char similar to I.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Index0">
<summary>
  Looks up a localized string similar to index {0}.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.No">
<summary>
  Looks up a localized string similar to No.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.No_access">
<summary>
  Looks up a localized resource of type System.Char similar to N.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Object0Type1">
<summary>
  Looks up a localized string similar to Object &quot;{0}&quot; type {1}.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.OK">
<summary>
  Looks up a localized string similar to OK.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.OK_access">
<summary>
  Looks up a localized resource of type System.Char similar to O.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Paste">
<summary>
  Looks up a localized string similar to Paste.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.play">
<summary>
  Looks up a localized resource of type System.Drawing.Bitmap.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Property0">
<summary>
  Looks up a localized string similar to Property {0}.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Retry">
<summary>
  Looks up a localized string similar to Retry.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Retry_access">
<summary>
  Looks up a localized resource of type System.Char similar to R.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Start0End1">
<summary>
  Looks up a localized string similar to start {0}, end {1}.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.ToolsIcon">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Type0">
<summary>
  Looks up a localized string similar to type {0}.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.ValueChanged_cat">
<summary>
  Looks up a localized string similar to Value Changed.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Yes">
<summary>
  Looks up a localized string similar to Yes.
</summary>
</member>
<member name="P:Tools.My.Resources.Resources.Yes_access">
<summary>
  Looks up a localized resource of type System.Char similar to Y.
</summary>
</member>
<member name="T:Tools.VisualBasicT.Interaction">
 <summary>The Interaction module contains procedures used to interact with objects, applications, and systems.</summary>
</member>
<member name="M:Tools.VisualBasicT.Interaction.iif``1(System.Boolean,``0,``0)">
 <summary>Returns one of two objects, depending on the evaluation of an expression.</summary>
 <param name="Expression">The expression you want to evaluate.</param>
 <param name="FalsePart">Returned if <paramref name="Expression">Expression</paramref> evaluates to False.</param>
 <param name="TruePart">Returned if <paramref name="Expression">Expression</paramref> evaluates to True.</param>
 <returns>Returns one of two objects, depending on the evaluation of an <paramref name="Expression"/>.</returns>
 <typeparam name="T">The type of object to return.</typeparam>
 <author www="http://dzonny.cz">Đonny</author>
   <version version="1.5.2" stage="Release"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.VisualBasicT.Interaction.IfNull``1(``0,``0)">
 <summary>Returns item or ist alternative item depending on if item has meaningful value</summary>
 <param name="value">Item to be returned if has meaningful value</param>
 <param name="alternative">Alternative (fallback) item to be returned if <paramref name="value"/> has no meaningful value</param>
 <returns><paramref name="value"/> if it is not null, <paramref name="alternative"/> otherwise</returns>
 <typeparam name="T">Type of item</typeparam>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.VisualBasicT.Interaction.IfNull(System.String,System.String)">
 <summary>Returns item or ist alternative item depending on if item has meaningful value</summary>
 <param name="value">Item to be returned if has meaningful value</param>
 <param name="alternative">Alternative (fallback) item to be returned if <paramref name="value"/> has no meaningful value</param>
 <returns><paramref name="value"/> if it is not null and is not an empty <see cref="T:System.String"/>, <paramref name="alternative"/> otherwise</returns>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.VisualBasicT.Interaction.IfNull``1(System.Nullable{``0},``0)">
 <summary>Returns item or ist alternative item depending on if item has meaningful value</summary>
 <typeparam name="T">Type of structure contained in <paramref name="value"/> and to be returned</typeparam>
 <param name="value">Item to be returned if has meaningful value</param>
 <param name="alternative">Alternative (fallback) item to be returned if <paramref name="value"/> has no meaningful value</param>
 <returns><paramref name="value"/> if it's <see cref="P:System.Nullable`1.HasValue"/> is true, <paramref name="alternative"/> otherwise</returns>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="M:Tools.VisualBasicT.Interaction.IfNull``1(System.Object,``0)">
 <summary>Returns item or ist alternative item depending on if item has meaningful value</summary>
 <typeparam name="T">Type of value to be returned</typeparam>
 <param name="value">Item to be returned if has meaningful value</param>
 <param name="alternative">Alternative (fallback) item to be returned if <paramref name="value"/> has no meaningful value</param>
 <returns><paramref name="value"/> if it is not nothing and is not <see cref="T:System.DBNull"/>, <paramref name="alternative"/> otherwise</returns>
 <exception cref="T:System.InvalidCastException">Casting from <paramref name="value"/> to <paramref name="T"/> failed</exception>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Alpha"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed</version>
</member>
<member name="F:Tools.VisualBasicT.Interaction.Null">
 <summary>If you like to use 'Null' instead of 'Nothing' in Visual Basic you can</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed. Quality changed from Nightly to Release.</version> 
</member>
<member name="F:Tools.VisualBasicT.Interaction.Nothing">
 <summary>If you like to use 'Nothing' instead of 'Null' outside Visual Basic you can</summary>
 <author web="http://dzonny.cz" mail="dzonny@dzonny.cz">Đonny</author>
 <version version="1.5.2" stage="Nightly"><see cref="T:Tools.InternalT.VersionAttribute"/> and <see cref="T:Tools.InternalT.AuthorAttribute"/> removed. Quality changed from Nightly to Release.</version>
</member>
</members>
</doc>
