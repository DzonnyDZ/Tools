<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
    <head>
        <title>Abot ÐTools</title>
    </head>
    <body>
        <h1>
            ÐTools</h1>
        <p>
            ÐTools is set of libraries tha contains IMHO useful tools for programmers. Theese tool can be small classes and modules that provide some functionality missing in the .NET framework.</p>
        <h2>Projects</h2>
        <p>
            ÐTools is one solution (called Tools because the 'Ð' character is hard to type for somebody). The solution consists of several projects. Main programming language of ÐTools is Visual Basic. The core of ÐTools is in the Tools project. Then tere can be several other projects. Decription of projects follows:</p>
        <dl>
            <dt>Tools</dt>
            <dd>
                This project is the core of ÐTools. This project contains main functionality of ÐTools.
                There are several limitiations tha applies to this project:
                <ol>
                    <li>This project can contain only code in Visual Basic. Start new project called e.g. ToolsCS for code in C#.</li>
                    <li>This project can contain only code that uses .NET framework 2.0 or 3.0. References to other assemblies are not allowed. As result this project may be potentially platform independent. This limitation also applies to core projects in other languages e.g. ToolsCS.</li>
                    <li>This project should contain only small tools (that consists of few files - few classes or less).</li>
                </ol>
            </dd>
            <dt>ToolsCS, ToolsJS, ToolsCPP, ToolsPHP, ToolsXXX</dt>
            <dd>
                Core projects in another languages than Visual Basic. C#, J#, C++, PHP, other. If project for your language is not founded feel free to found it!
                If you are founding project in some strange language (like PHP here) please think if this project can be called Tools - this mean it is potentially platform independent. There is no problem with languages that needs no references to other assemblies (like C#, C++, J#), but some languages neeed special references (like PHP). So think if theese references are avaiable at least for major operating systems and platforms.
            </dd>
            <dt>Tools2, Tools2CS, ...</dt>
            <dd>
                Theese projects are almost the same as Tools without 2¨, but tehere can be references to other assemblies. Theese assemblies must be potentially platform independent and code in thesee projects too.
            </dd>
            <dt>ToolsWin32, ToolsWin32CS, ...</dt>
            <dd>
                Theese project contains platform specific code. Replace Win32 with name of platform for which the code is specific. E.g. Win64 (64 bits Windows), WinVista (32 & 64 bits Windows Vista), WinVista32 (32 bits Windows Vista), Win (All Windows 32 and 64 bit Windows), Mono (Mono for Windows and Linux), Linux (All Linuxes), LinGentoo (Gentoo Linux), Mac (All Mac OSes), MacX (Mac OS X), etc.
            </dd>
            <dt>Test projects</dt><dd>Naming of test project is the same as of projects mentioned above, only the worh 'Tools' is replaced by 'Tests'. So, one test project per one normal project. If testing is done somehow else or after testing is finished then test project can be deleted. Test projects should have the same build configurations as mentiöned in Versioning section, but output directory of test projects shouldn't be the same as main bin directory. Testing projects for other projects (see below) should be name as TestsXXX (where XXX is name of project being tested). Root namespace of test projects should be Tools.Tests, but it is not necessary because test projects are not part od ÐTools distribution.</dd><dt>Other projects</dt>
            <dd>These projects are for bigger tools that consists of many classes and contain many files. These projects can have references to other assemblies. These projects must be potentially platform independent or must have platform in name.</dd>
        </dl>
        <h2>Folders</h2>
        <p>
            Each project (except project from section "Other projects") consists of set of folders. (Folder structure of big ptojects depends on its founders.) Each folder contains one tool or set of related tools (depends on size of tool).</p>
        <h2>
            Namespaces</h2>
        <p>
            The root namespace of all projests must be Tools (excepting som special tools that should not appear as standardly accessible). Namespaces structure under the root namespaces should correspond to structure of the System (or Microsoft) in order to easy orientation. So, WinForms relaterd tools will be found under Tools.Windows.Forms namespace etc. Special namespace Tools.Internal is dedicated for tools used by tools internally that must be declared Public but that is not so attractive that it should be considered normal part of ÐTools framework. Another special namespace is Tools.DataStructures which should contain special data structures like trees, heaps, nets pairs etc. If you think tha your tool is so special that it need separate namespace create it.</p>
        <h2>
            Versioning</h2>
        <p>
            In such big and inconsistent project it is hard to make versions in sequentional order. So following state of tolls are defined: Debug, Alpha, Beta, RC, Final. There will be configurations with corresponding names. The constant DEBUG will be defined in all of them except Final. Corresponding constants vDebug, vAlpha, vBeta, vRC and vFinal will be defined in corresponding configurations. Each tool should be surrounded with conditional compilation statements in order to be built only in its development version.</p>
        <p>
            Tools in Debug stage should be surrounded with #If vDebug, tools in Alpha stage should be surrounded with #If vDebug Or vAlpha etc. Possibly you can leave previous version of tool surrounded with e.g. #If vFinal or vRC or vBeta and current with #If vDebug or vAlpha in order to maintain backward compatibility (in order tool not do disapear from vFinal as result of start of developing new version). It's recommended.</p>
        <p>
            Whole project should be set to autoincerementing versioning like 1.0.*. Switch from e.g. 1.0 to 1.1 or 1.0 to 2.0 can be done only after discussion of active authors of tools in project.</p>
        <p>
            Each small tool (within bigger project) can have it's own version. This version is declared by VersionAttribute (Tools.Internal.VersionAttribute). This should be initialized with x, y, gettype(z), where x is major version of tool, y is minor version of tool and z is type from assembly where the tool is located. If tool is class (module, structure, enum) then z should be this class (etc.). See documentation of VersionAttribute and AuthorAttribute for details.</p>
        <h2>
            Cross-tools references</h2>
        <p>
            Normally you shold avoid making references from one tool to another. But there are several exceptions to this rule:</p>
        <ul>
            <li>It's allowed (or even recommended) to use VersionAttribute and AuthorAttribute, so you should reference the main Tools project from other projects.</li>
            <li>Tools of category 'Other projects' can have references to Tools, ToolsCS, ToolsJS etc. If such tool is not declared as being platform independent tha it can have also references to platform dependent tools.</li>
            <li>Potentialy platform dependent tools can have references to Tools, ToolsCS, ToolsJS etc.</li>
        </ul>
        <h2>
            Output directory</h2>
        <p>
            Each project is placed in subfolder of the Tools folder. There is also subfolder bin in the Tools folder. There are subfolders Debug, Alpha etc. in the bin subfolder. This is the output directory. So ..\bin\($Configuration)\ is the right output directory. Project should be built only under Any CPU (if possible).</p>
        <h2>
            Documentation</h2>
        <p>
            Use XML comments as much as possible. XML comments are necessary everywhere when applicable (including private members, excluding event handlers with Handles clausule in VB). Comments in code are wellcame. In languages where XML comments are not supported use language-native documentation or use XML comments. At least in Filanl release you must provide XML file with documentation that must be tested to be usable in the Object Browser and by IntelliSense.</p>
        <p>
            Each project also contains file Tool.txt. which contains list of tools and authors in project. There is also solution item wish-list.txt. This is only simple list of missing tools. Tools are deleted as realized. Use another channels for bigger discussion.</p>
        <h2>
            Licensing</h2>
        <p>
            All code is provided as opensource. You - as ÐTools-non-participating person can include tools as referenced DLL into your project for free (preferred) or you can copy and paste code from tools or copy whole files from tools to you project with no limitation. You - as ÐTools developer are allowed only to write your own code into tools, copy and paste code and files that contains no license restrictions (open source) and in tools where it is allowed reference only assemblies that you are allowed to distribute with your tool for free. ÐTools are provided as-is with no warranty.</p>
    </body>
</html>
