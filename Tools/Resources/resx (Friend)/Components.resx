<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllowClose_d" xml:space="preserve">
    <value>Value indicationg if dialog can be closed without clicking on button. Thi is typically by closing the window that represents the dialog by the "X" button.</value>
  </data>
  <data name="Buttons_d" xml:space="preserve">
    <value>Defines buttons displayed on message box</value>
  </data>
  <data name="DefaultButton_d" xml:space="preserve">
    <value>indicates 0-based index of button that has focus when message box is shown and is default button for message box (usually reported when user presses enter).</value>
  </data>
  <data name="CloseResponse_d" xml:space="preserve">
    <value>Value returned by the Show function / DialogResult property when user closes the dialog by closing dialog window or by pressing escape</value>
  </data>
  <data name="Prompt_d" xml:space="preserve">
    <value>Text of prompt displayed to the user.</value>
  </data>
  <data name="Title_d" xml:space="preserve">
    <value>Title shown in dialog header</value>
  </data>
  <data name="Icon_d" xml:space="preserve">
    <value>Icon shown in left to corner (lrt) of dialog</value>
  </data>
  <data name="Options_d" xml:space="preserve">
    <value>Addtional options controlling how dialog is displayed</value>
  </data>
  <data name="CheckBoxes_d" xml:space="preserve">
    <value>Check boxes displayed for message box. Can be used for example for 'Do not show this message in future' option.</value>
  </data>
  <data name="ComboBox_d" xml:space="preserve">
    <value>Combo box displayed on dialog</value>
  </data>
  <data name="Radios_d" xml:space="preserve">
    <value>Radio buttons (options) displayed on messagebox</value>
  </data>
  <data name="Timer_d" xml:space="preserve">
    <value>Inidcates how long the message box will be show to user before being closed automatically. If zero or less, no count-down takes effect.</value>
  </data>
  <data name="TimeButton_d" xml:space="preserve">
    <value>Indicates 0-based index of button which displays the count-down timer. It aslo defines result of dialog returned when time elapses. -1 chose button automatically acording to CloseResponse, &lt;-1 displays count-down in title, &gt; number of buttons hides count-down indicator.</value>
  </data>
  <data name="MessageBoxButton_Text_d" xml:space="preserve">
    <value>Text displayed on the control</value>
  </data>
  <data name="ToolTip_d" xml:space="preserve">
    <value>Tool tip text (help) for control</value>
  </data>
  <data name="Enabled_d" xml:space="preserve">
    <value>Indicates if control is enabled, so user can interact with it.</value>
  </data>
  <data name="ClickPreview_d" xml:space="preserve">
    <value>Raised when user clicks the button. Can be canceled.</value>
  </data>
  <data name="Result_d" xml:space="preserve">
    <value>Result of message box returned when this button is clicked.</value>
  </data>
  <data name="AccessKey_d" xml:space="preserve">
    <value>Access character for the button. Should be one of characters from button text.</value>
  </data>
  <data name="StateChanged_d" xml:space="preserve">
    <value>Raised ehrn value of the State property changed</value>
  </data>
  <data name="ThreeState_d" xml:space="preserve">
    <value>Indicateis if checkbox has 3rd intermediate state</value>
  </data>
  <data name="State_d" xml:space="preserve">
    <value>Current check state of check box</value>
  </data>
  <data name="Editable_d" xml:space="preserve">
    <value>Indicates if user can change text of combo box (true) or must select only form list of predefined values (false).</value>
  </data>
  <data name="Items_d" xml:space="preserve">
    <value>Items shown to user in drop down. Item can be any Object.</value>
  </data>
  <data name="DisplayMember_d" xml:space="preserve">
    <value>Indicates member (property, field) used to obtain text to be shown to user for each item.</value>
  </data>
  <data name="SelectedIndex_d" xml:space="preserve">
    <value>Indicates 0-based index of selected item in combo box.</value>
  </data>
  <data name="SelectedItemChanged_d" xml:space="preserve">
    <value>Raised when value of the SelectedItem property changes</value>
  </data>
  <data name="SelectedIndexChanged_d" xml:space="preserve">
    <value>Raised when value of the SelectedIndex property changes.</value>
  </data>
  <data name="Checked_d" xml:space="preserve">
    <value>Indicates of option is selected</value>
  </data>
  <data name="CheckedChanged_d" xml:space="preserve">
    <value>Raised when value of the Checked property changes</value>
  </data>
  <data name="CountDown_d" xml:space="preserve">
    <value>Raised when count-down time ticks - once a second.</value>
  </data>
  <data name="Shown_d" xml:space="preserve">
    <value>Raised after dialog is shown</value>
  </data>
  <data name="Closed_d" xml:space="preserve">
    <value>Raised after dialog is closed</value>
  </data>
  <data name="MessageBoxCounDownTimeFormat" xml:space="preserve">
    <value>{0} ({1:s})</value>
  </data>
  <data name="SaveDataAs" xml:space="preserve">
    <value>Save data as...</value>
  </data>
  <data name="LoadFromFile" xml:space="preserve">
    <value>Load from file...</value>
  </data>
  <data name="Clear" xml:space="preserve">
    <value>Clear</value>
  </data>
  <data name="ImagesFilter" xml:space="preserve">
    <value>Images (bmp,jpeg,png,gif,tiff)|*.bmp;*.jpeg;*.jpg;*.gif;*.tif;*.tiff;*.png</value>
  </data>
  <data name="New___" xml:space="preserve">
    <value>New ...</value>
  </data>
  <data name="OnlySOIAndEOIMarkersCanHaveLenghtSetToZeroLength1IsNotAllowed" xml:space="preserve">
    <value>Only SOI and EOI markers can have lenght set to zero, length 1 is not allowed</value>
  </data>
  <data name="PlayOnShow_d" xml:space="preserve">
    <value>Sound to be played when message box is shown</value>
  </data>
  <data name="Asterisk" xml:space="preserve">
    <value>Asterisk</value>
  </data>
  <data name="Beep" xml:space="preserve">
    <value>Beep</value>
  </data>
  <data name="Exclamation" xml:space="preserve">
    <value>Exclamation</value>
  </data>
  <data name="Hand" xml:space="preserve">
    <value>Hand</value>
  </data>
  <data name="Question" xml:space="preserve">
    <value>Question</value>
  </data>
  <data name="Browse" xml:space="preserve">
    <value>Browse...</value>
  </data>
  <data name="SelectWavFile" xml:space="preserve">
    <value>Select wav file</value>
  </data>
  <data name="WavFilter" xml:space="preserve">
    <value>wav files (*.wav)|*.wav</value>
  </data>
  <data name="Play" xml:space="preserve">
    <value>Play</value>
  </data>
</root>