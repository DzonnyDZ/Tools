<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ex_PropertyOrFieldNotFound" xml:space="preserve">
    <value>Neither field nor property named '{0}' was found</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>Usage: {0} assembly1 assembly2 ...</value>
  </data>
  <data name="msg_ItemError" xml:space="preserve">
    <value>Error {0} occured for item {1}: {2}</value>
  </data>
  <data name="msg_InnerException" xml:space="preserve">
    <value>Inner exception:</value>
  </data>
  <data name="msg_Apply" xml:space="preserve">
    <value>Apply {0}</value>
  </data>
  <data name="wrn_AttributeAppliedOnUnsupportedItem" xml:space="preserve">
    <value>WARNING: {0} applied on unsupported item {1}</value>
  </data>
  <data name="msg_Transform" xml:space="preserve">
    <value>{0} -&gt; {1}</value>
  </data>
  <data name="msg_ProcessingAssembly" xml:space="preserve">
    <value>Processing assembly ...</value>
  </data>
  <data name="wrn_TypeNotFound" xml:space="preserve">
    <value>WARNING: Type {0} not found</value>
  </data>
  <data name="GenParsNotSupported" xml:space="preserve">
    <value>Generic parameters on {0} are not supported</value>
    <comment>GenParsNotSupported description</comment>
  </data>
  <data name="MessageProcessorTypeError" xml:space="preserve">
    <value>Message processor must derive from {0}</value>
    <comment>MessageProcessorTypeError description</comment>
  </data>
  <data name="TaskReceiverTypeError" xml:space="preserve">
    <value>Type of Receiver must be {0}</value>
    <comment>TaskReceiverTypeError description</comment>
  </data>
  <data name="ex_UnsupportedGParOwner" xml:space="preserve">
    <value>Equality comparison of types representing generic arguments of something else then type and method is not supported</value>
  </data>
  <data name="ex_TypeDoesNotImplement" xml:space="preserve">
    <value>{0} does not implement {1}</value>
  </data>
  <data name="ex_TypeDoesNotInherit" xml:space="preserve">
    <value>{0} does not derive from {1}</value>
  </data>
  <data name="ex_StaticMethodCannotImplement" xml:space="preserve">
    <value>Static method {0} cannot implement base member</value>
  </data>
  <data name="ex_CannotImplement" xml:space="preserve">
    <value>{0} cannot be implemented</value>
  </data>
  <data name="ex_MethodAmbiguous" xml:space="preserve">
    <value>More than one {0}.{1} method matches criteria</value>
  </data>
  <data name="ex_PropertyAmbiguous" xml:space="preserve">
    <value>More than one {0}.{1} property matches criteria</value>
  </data>
  <data name="ex_PropertyWOGetterSetter" xml:space="preserve">
    <value>Only properties with setter or getter or both are supported.</value>
  </data>
  <data name="ex_PropertyMixedAccessorStaticInstance" xml:space="preserve">
    <value>Only properties with all accessors instance (non-static) are supported.</value>
  </data>
  <data name="ex_PropertyExternalAccessor" xml:space="preserve">
    <value>Only properties where all methods are implemented in the same type as the property itself are supported.</value>
  </data>
  <data name="ex_EventWOAddRemove" xml:space="preserve">
    <value>Only events with added or remover are supported</value>
  </data>
  <data name="ex_EventMixedAccessorStaticInstance" xml:space="preserve">
    <value>Only events with all instance (non-static) methods are supported</value>
  </data>
  <data name="ex_EventExternalAccessor" xml:space="preserve">
    <value>Only events with all accessoers declared in the same type as the event itself are supported.</value>
  </data>
  <data name="ex_EventAmbiguous" xml:space="preserve">
    <value>More than one {0}.{1} event matches criteria</value>
  </data>
  <data name="ex_OnylAssemblyAndModule" xml:space="preserve">
    <value>{0} supports only assemblies and modules</value>
  </data>
  <data name="ex_RemovalNotSupported" xml:space="preserve">
    <value>Removal of {0} is not supported</value>
  </data>
  <data name="ex_UnsupportedGParRemoval" xml:space="preserve">
    <value>Removal of generic parameters of {0} is not supported</value>
  </data>
  <data name="Implements" xml:space="preserve">
    <value>{0} implements {1}</value>
  </data>
  <data name="Removed" xml:space="preserve">
    <value>{0} removed from {1}</value>
  </data>
  <data name="ex_RemoveReturnValue" xml:space="preserve">
    <value>Return value cannot be removed</value>
  </data>
  <data name="ex_AttrIsNotSupportedOnItem" xml:space="preserve">
    <value>{0} is not supported on {1}</value>
  </data>
  <data name="msg_Rename" xml:space="preserve">
    <value>Rename {0} -&gt; {1}</value>
  </data>
  <data name="msg_AddedResource" xml:space="preserve">
    <value>Added {0} resource {1} from {2}.</value>
  </data>
  <data name="resource_embeded" xml:space="preserve">
    <value>embeded</value>
  </data>
  <data name="resource_linked" xml:space="preserve">
    <value>linked</value>
  </data>
  <data name="msg_RemoveReference" xml:space="preserve">
    <value>Remove reference {0} from {1}</value>
  </data>
  <data name="ShouldNotBeSpecifiedWhenIsAppliedOnType" xml:space="preserve">
    <value>{0} should not be specified when {1} is applied on type</value>
  </data>
  <data name="DonTUseXAndYWhenTargetTypeIsNotGeneric" xml:space="preserve">
    <value>Don't use {0} and {1} when target type is not generic</value>
    <comment>DonTUseXAndYWhenTargetTypeIsNotGeneric description</comment>
  </data>
  <data name="MustBeNullEmptyOrItSLengthMustBeSameAsNumberOfGenericParameters" xml:space="preserve">
    <value>{0} must be null, empty or it's length must be same as number of generic parameters of {1}</value>
    <comment>MustBeNullEmptyOrItSLengthMustBeSameAsNumberOfGenericParameters description</comment>
  </data>
  <data name="SubstGParsAndSubstTypesExclusivityCheck" xml:space="preserve">
    <value>When an index of {0} contains non-null value the same index of {1} must be null and vice versa. Index {2} is non-null for both.</value>
    <comment>SubstGParsAndSubstTypesExclusivityCheck description</comment>
  </data>
  <data name="SubstGParsAndSubstTypesNullCheck" xml:space="preserve">
    <value>Same index of {0} and {1} cannot be null in bot arrays. Index {2}</value>
    <comment>SubstGParsAndSubstTypesNullCheck description</comment>
  </data>
  <data name="GenericParameterNotFound" xml:space="preserve">
    <value>Generic parameter {0} not found on type {1}, index {2}</value>
    <comment>GenericParameterNotFound description</comment>
  </data>
</root>