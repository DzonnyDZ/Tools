<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MismatchedResourceName" xml:space="preserve">
    <value>When passing ResXDataNodes as the IDictionary values to StronglyTypedResourceBuilderEx.Create, the keys must match the corresponding values for ResXDataNode.Name.  Key name: '{0}', ResXDataNode.Name: '{1}'.</value>
  </data>
  <data name="StringTruncatedComment" xml:space="preserve">
    <value>{0} [rest of string was truncated]";</value>
  </data>
  <data name="StringPropertyComment" xml:space="preserve">
    <value>Looks up a localized string similar to '{0}'.</value>
  </data>
  <data name="NonStringPropertyComment" xml:space="preserve">
    <value>Looks up a resource '{0}'.</value>
  </data>
  <data name="FormatMethodComment" xml:space="preserve">
    <value>Formats a localized string similar to '{0}'.</value>
  </data>
  <data name="FormatStubMethodComment" xml:space="preserve">
    <value>The stub formatting method returning the {0} property value.</value>
  </data>
  <data name="ClassComments1Format" xml:space="preserve">
    <value>This class was auto-generated by the StronglyTypedResourceBuilderEx class via the {0} custom tool.</value>
  </data>
  <data name="ClassComments2Format" xml:space="preserve">
    <value>To add or remove a member, edit your .ResX file then rerun the {0} custom tool or rebuild your VS.NET project.</value>
  </data>
  <data name="ClassCommentsCopyright" xml:space="preserve">
    <value>Copyright © Dmytro Kryvko 2006-8 (http://dmytro.kryvko.googlepages.com/); Đonny 2008-{0} (http://tools.codeplex.com)</value>
  </data>
  <data name="ResMgrPropertyComment" xml:space="preserve">
    <value>Returns the cached ResourceManager instance used by this class.</value>
  </data>
  <data name="ParamCommentStatement" xml:space="preserve">
    <value>&lt;param name="arg{0}"&gt;An object ({0}) to format.&lt;/param&gt;</value>
  </data>
  <data name="MethodReturnValueComment" xml:space="preserve">
    <value>&lt;returns&gt;A copy of format string in which the format items have been replaced by the String equivalent of the corresponding instances of Object in arguments.&lt;/returns&gt;</value>
  </data>
  <data name="StubMethodReturnValueComment" xml:space="preserve">
    <value>&lt;returns&gt;The {0} property value.&lt;/returns&gt;</value>
  </data>
  <data name="CulturePropertyComment1" xml:space="preserve">
    <value>Overrides the current thread's CurrentUICulture property for all</value>
  </data>
  <data name="CulturePropertyComment2" xml:space="preserve">
    <value>resource lookups using this strongly typed resource class.</value>
  </data>
  <data name="InvalidIdentifier" xml:space="preserve">
    <value>Identifier '{0}' is not valid.</value>
  </data>
  <data name="ClassDocComment" xml:space="preserve">
    <value>A strongly-typed resource class, for looking up localized strings, formatting them, etc.</value>
  </data>
  <data name="CannotCreatePropertyForResource" xml:space="preserve">
    <value>Cannot create property for resource named '{0}'.</value>
  </data>
  <data name="ErrorInFormatPropertyForResource" xml:space="preserve">
    <value>{0} Property name: {1}.</value>
  </data>
  <data name="CannotCreateFormatMethod" xml:space="preserve">
    <value>Cannot create the format method named '{0}' for the resource key '{1}'.</value>
  </data>
  <data name="InternalSyncObjectPropertyComment" xml:space="preserve">
    <value>Thread safe lock object used by this class.</value>
  </data>
</root>