Usage:
{0} <assembly> <parameters>
assembly    A DLL assembly containing plugin definition
parameters:
/out <outdir> Output directory. Optional. Not set = same as assembly directory
/t <type>     Type name. Optional. Multiple.
              If specified at leas once only types specified will be used (otherwise all the types that qaulify to be TC plugin are used).
              Use name for Assembly.GetType().
/-wfx         Excludes wfx plugins
/-wlx         Excludes wlx plugins
/-wcx         Excludes wcx plugins
/-wdx         Excludes wdx plugins
              Plugin exclusions excludes plugins not depending on if /t is specified.
/n <type> <name> Name of plugin for type. Optional. Multiple. Independent of /t. Sets name (without extension) of plugin file.
              For types without /n set, type name is used (may be changed a little when contains characters like <, >, *, |, ?, : etc.).
              Type must be name of type as reported by Type.FullName. Name shan't contain special characters.
              Naming behavior can be changed also by TotalCommanderPluginAttribute. /n takes precedence.
/int <path>   Path to intermediate directory. Optional. When not specified temporary is used.
/keepint      Keep files in intermediate directory after execution. Valid only when /int is set. Optional.              
/templ <path> Project template directory. Optional. Use this template instead of buil-in one.
/pdb          Copy plugin pdb file to outdir. Optional.
/key <path>   Sign wrapper assembly. Optional. Path to snk file.
              You must generate plugin from strongly named assembly if /key is used.
/cou <path>   Copies all the output from outdir to another dir, clearing it first. Optional.
              When starts with %TOTALCMD%, it's replaced with current Total Commander installation diractory as specified in 32-bit registry (HKEY_LOCAL_MACHINE\SOFTWARE\Ghisler\Total Commander\InstallDir)

All the operations can be done programatically as well. Add {0} as reference to your project.
Fore more informations about how to create managed Total Commander plugin see documentation of the Tools.TotalCommanderT.PluginBuilder.Generator class.
