<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotBeRepresented" xml:space="preserve">
    <value>{0} cannot be represented as {1}, use {2} and {3} instead.</value>
  </data>
  <data name="CannotCompare" xml:space="preserve">
    <value>Value of type {0} cannot be compared to {1}.</value>
  </data>
  <data name="ColumnDefinitionStringTooLong" xml:space="preserve">
    <value>Column definition string returned by {0} is too long.</value>
  </data>
  <data name="CryptoAlreadyInitialized" xml:space="preserve">
    <value>Cryptography for this plugin has already been initialized.</value>
  </data>
  <data name="CryptoNotInitialized" xml:space="preserve">
    <value>Crypto was not initialized</value>
  </data>
  <data name="DefaultTextTooLong" xml:space="preserve">
    <value>Default text is too long.</value>
  </data>
  <data name="EncryptDecryptFailed" xml:space="preserve">
    <value>Encrypt/Decrypt failed</value>
  </data>
  <data name="FieldNameTooLong" xml:space="preserve">
    <value>{0} returned fields which's name is longer than {1}</value>
  </data>
  <data name="InvalidCharacter" xml:space="preserve">
    <value>Value "{0}" contains invalid character.</value>
  </data>
  <data name="InvalidFieldIndex" xml:space="preserve">
    <value>{0} returned field at index {1} that has FieldIndex set to {2}</value>
  </data>
  <data name="InvalidFieldNameCharacter" xml:space="preserve">
    <value>Field name contain invalid character.</value>
  </data>
  <data name="InvalidFieldType" xml:space="preserve">
    <value>{0:f} is not valid type of field.</value>
  </data>
  <data name="InvalidMacroName" xml:space="preserve">
    <value>Macor name "{0}" is invalid.</value>
  </data>
  <data name="InvalidPathFormat" xml:space="preserve">
    <value>The path {0} has invalid format.</value>
  </data>
  <data name="InvalidPluginNumberReinitialization" xml:space="preserve">
    <value>Attempt to reinitialize plugin with different number (old {0}, new {1})</value>
  </data>
  <data name="InvalidUnitNameCharacter" xml:space="preserve">
    <value>Unit name contains invalid character.</value>
  </data>
  <data name="NameTooLong" xml:space="preserve">
    <value>Name too long. Mamximum allowed length is {0}</value>
  </data>
  <data name="NoMasterPassword" xml:space="preserve">
    <value>No master password entered yet</value>
  </data>
  <data name="NotInitialized" xml:space="preserve">
    <value>The class was not initialized</value>
  </data>
  <data name="ParamAssignedTooLong" xml:space="preserve">
    <value>The {0} parameter of the {1} method was assigned to long string.</value>
  </data>
  <data name="PathTooLong" xml:space="preserve">
    <value>String returned by plugin is longer than maximal path length alowed.</value>
  </data>
  <data name="PluginInitialized" xml:space="preserve">
    <value>The plugin was already initialized.</value>
  </data>
  <data name="PluginInitializedAnsiUnicode" xml:space="preserve">
    <value>Attempt to re-initialize plugin with different ANSI/Unicode settings.</value>
  </data>
  <data name="PluginInitializedForTC" xml:space="preserve">
    <value>Attempt to re-initialize plugin in managed mode when it was already initialized in Total Commander mode.</value>
  </data>
  <data name="PluginInitializedNotForTC" xml:space="preserve">
    <value>Attempt to re-initialize plugin in Total Commander mode when it was alreay initialized in managed mode.</value>
  </data>
  <data name="PluginNotInitialized" xml:space="preserve">
    <value>Plugin was not initialized.</value>
  </data>
  <data name="PluginNotRegistered" xml:space="preserve">
    <value>Plugin number {0} is not registered.</value>
  </data>
  <data name="PluginTypeNotSupported" xml:space="preserve">
    <value>Plugin type {0} is not supported</value>
  </data>
  <data name="PropertyWasInitialized" xml:space="preserve">
    <value>The {0} property have already been initialized.</value>
  </data>
  <data name="PropertyWasNotInitialized" xml:space="preserve">
    <value>The {0} property have not been initialized yet.</value>
  </data>
  <data name="PropertyWasNull" xml:space="preserve">
    <value>{0} was null.</value>
  </data>
  <data name="ReadPasswordStoreFailed" xml:space="preserve">
    <value>Password not found in password store</value>
  </data>
  <data name="ReturnedArrayToLong" xml:space="preserve">
    <value>Array returned by {0} is too long.</value>
  </data>
  <data name="ReturnedStringTooLongForChoice" xml:space="preserve">
    <value>The string returned by {0} for the {1} type is too long.</value>
  </data>
  <data name="UnexpectedType" xml:space="preserve">
    <value>Unexteced type {0} retunrned by {1}</value>
  </data>
  <data name="UnitNamesTooLong" xml:space="preserve">
    <value>{0} returned unit names sum of which's length plus number of them minus 1 is more than {1}</value>
  </data>
  <data name="UnknownError" xml:space="preserve">
    <value>Unknown error</value>
  </data>
  <data name="ValueNotSupported" xml:space="preserve">
    <value>Value {0} is not supported</value>
  </data>
  <data name="WritePasswordStoreFailed" xml:space="preserve">
    <value>Could not write password to password store</value>
  </data>
</root>