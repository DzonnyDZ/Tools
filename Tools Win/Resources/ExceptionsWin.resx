<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CannotCreateLinkFromFile0" xml:space="preserve">
    <value>Cannot create link from file {0}.</value>
  </data>
  <data name="HotkeyMustIncludeAModifierKey" xml:space="preserve">
    <value>Hotkey must include a modifier key.</value>
  </data>
  <data name="UnableToObtainHandleToSystemMenu" xml:space="preserve">
    <value>Unable to obtain handle to system menu.</value>
  </data>
  <data name="IsInvalidKeyKeysMustBeWithinRangeFrom0To255" xml:space="preserve">
    <value>{0} is invalid key. Keys must be within range from 0 to 255.</value>
  </data>
  <data name="IsUnknownRegistryBaseKey" xml:space="preserve">
    <value>{0} is unknown registry base key</value>
  </data>
  <data name="HookIsAlreadyRegisteredForThisInstance" xml:space="preserve">
    <value>Hook is already registered for this instance.</value>
  </data>
  <data name="HookIsNotRegisteredForThisInstance" xml:space="preserve">
    <value>Hook is not registered for this instance</value>
  </data>
  <data name="UnknownRawInputDeviceType0" xml:space="preserve">
    <value>Unknown raw input device type {0}</value>
  </data>
  <data name="RawDeviceNameHasUnexpectedFormatItMustStartWith0" xml:space="preserve">
    <value>Raw device name has unexpected format. It must start with "{0}".</value>
  </data>
  <data name="RawDeviceNameHasInvalidFormatItShouldConsistOf4Parte" xml:space="preserve">
    <value>Raw device name has invalid format. It should consist of 4 parte separated by #.</value>
  </data>
  <data name="TheCalassGuidPartOfDeviceNameIsInInvalidFormatSeeInnerException" xml:space="preserve">
    <value>The calass guid part of device name is in invalid format. See InnerException for details.</value>
  </data>
  <data name="SourceOfWindowMessageEvntMustBeSameAsOwnerOwThisInstance" xml:space="preserve">
    <value>Source of window message evnt must be same as owner ow this instance</value>
  </data>
  <data name="MessageTargetWindowHandleMustBeSameAsHandleOfWindow" xml:space="preserve">
    <value>Message target window handle must be same as handle of window this instance was created for</value>
  </data>
  <data name="GivenOwnerHasAlreadyAttachedRawInputEventProvider" xml:space="preserve">
    <value>Given owner has already attached RawInputEventProvider</value>
  </data>
  <data name="WhenOnlyOneDeviceIsBeingUnRegisteredItCannotHaveExclude" xml:space="preserve">
    <value>When only one device is being (un)registered, it cannot have Exclude set to true.</value>
  </data>
  <data name="DevicesCanBeExcludedOnlyFromUsagePagesBeingRegistered" xml:space="preserve">
    <value>Devices can be excluded only from usage pages being registered in same batch.</value>
  </data>
  <data name="DeviceWithExcludeSetToTrueMustHaveUsageSetToZero" xml:space="preserve">
    <value>Device with Exclude set to true must have Usage set to zero.</value>
  </data>
  <data name="LegacyMessagesCanBeDisabledOnlyForKeyboardAndMouseDevice" xml:space="preserve">
    <value>Legacy messages can be disabled only for keyboard and mouse device, or when whole generic desktop controls usage page is being registered.</value>
  </data>
  <data name="OwherHandleHasChanged" xml:space="preserve">
    <value>Owher handle has changed.</value>
  </data>
  <data name="CannotConvertRAWINPUTMarshallingToRAWINPUTNonMarshalling" xml:space="preserve">
    <value>Cannot convert RAWINPUT_Marshalling to RAWINPUT_NonMarshalling when it contains HID data</value>
  </data>
  <data name="AdditionalEventsHaveBeenAlreadyCalled" xml:space="preserve">
    <value>Additional events have been already called.</value>
  </data>
  <data name="LenghtOfOriginalRawItemsCountMustBe1AndOriginalRawItemSize" xml:space="preserve">
    <value>Lenght of Original.RawItemsCount must be 1 and Original.RawItemSize must be 2 or 3.</value>
  </data>
  <data name="InstanceAPIMethodsAreNotAllowed" xml:space="preserve">
    <value>Instance API methods are not allowed.</value>
  </data>
</root>