<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SubjectNumber_n" xml:space="preserve">
    <value>Subject Number</value>
  </data>
  <data name="SubjectNumber_d" xml:space="preserve">
    <value>Subject component of Subject Reference Number</value>
  </data>
  <data name="SubjectMatterNumber_n" xml:space="preserve">
    <value>Subject Matter Number</value>
  </data>
  <data name="SubjectMatterNumber_d" xml:space="preserve">
    <value>Matter component of Subject Reference Number</value>
  </data>
  <data name="SubjectDetailNumber_n" xml:space="preserve">
    <value>Subject Detail Number</value>
  </data>
  <data name="SubjectDetailNumber_d" xml:space="preserve">
    <value>Detail component of Subject Reference Number</value>
  </data>
  <data name="SubjectName_n" xml:space="preserve">
    <value>Subject Name</value>
  </data>
  <data name="SubjectName_d" xml:space="preserve">
    <value>A text representation of the Subject Number (maximum 64 octets) consisting of graphic characters plus spaces either in English, as defined in Appendix H, or in the language of the service as indicated in DataSet Language Identifier (2:135)</value>
  </data>
  <data name="SubjectMatterName_n" xml:space="preserve">
    <value>Subject Matter Name</value>
  </data>
  <data name="SubjectMatterName_d" xml:space="preserve">
    <value>A text representation of the Subject Matter Number</value>
  </data>
  <data name="SubjectDetailName_n" xml:space="preserve">
    <value>Subject Detail Name</value>
  </data>
  <data name="SubjectDetailName_d" xml:space="preserve">
    <value>A text representation of the Subject Detail Number</value>
  </data>
  <data name="IPR_d" xml:space="preserve">
    <value>Information Provider Reference A name, registered with the IPTC/NAA, identifying the provider that guarantees the uniqueness of the UNO</value>
  </data>
  <data name="IPR_n" xml:space="preserve">
    <value>IPR</value>
  </data>
  <data name="IPR_d2" xml:space="preserve">
    <value>Information Provider Reference</value>
  </data>
  <data name="UCD_d" xml:space="preserve">
    <value>UNO Creation Date Specifies a 24 hour period in which the further elements of the UNO have to be unique.</value>
  </data>
  <data name="ODE_n" xml:space="preserve">
    <value>ODE</value>
  </data>
  <data name="ODE_d" xml:space="preserve">
    <value>Object Descriptor Element In conjunction with the UCD and the IPR, a string of characters ensuring the uniqueness of the UNO.</value>
  </data>
  <data name="OVI_d" xml:space="preserve">
    <value>Object Variant Indicator A string of characters indicating technical variants of the object such as partial objects, or changes of file formats, and coded character sets.</value>
  </data>
  <data name="Type_d" xml:space="preserve">
    <value>Type of components</value>
  </data>
  <data name="Components_d" xml:space="preserve">
    <value>Number of components</value>
  </data>
  <data name="StringValueOfTheProperty0MustBe1BytesLong" xml:space="preserve">
    <value>String value of the property {0} must be {1} bytes long.</value>
  </data>
  <data name="StringValueOfTheProperty0CanBeMaximally1BytesLong" xml:space="preserve">
    <value>String value of the property {0} can be maximally {1} bytes long.</value>
  </data>
  <data name="ManufacturersUniqueIdentity_d" xml:space="preserve">
    <value>Manufacturer’s Unique Identity (issued by IPTC)</value>
  </data>
  <data name="ManufacturerdUniqueIdentity_n" xml:space="preserve">
    <value>Manufacturer’s Unique Identity</value>
  </data>
  <data name="Equipment_n" xml:space="preserve">
    <value>Equipment</value>
  </data>
  <data name="Equipment_d" xml:space="preserve">
    <value>Used to indicate equipment type and managed by Manufacturer.</value>
  </data>
  <data name="DateIdentifier_n" xml:space="preserve">
    <value>Date Identifier</value>
  </data>
  <data name="DateIdentifier_d" xml:space="preserve">
    <value>Indicates year, month and day the picture number was generated.</value>
  </data>
  <data name="NumericIdentifier_n" xml:space="preserve">
    <value>Numeric Identifier</value>
  </data>
  <data name="NumericIdentifier_d" xml:space="preserve">
    <value>A binary number generated each time a picture number is created and being unique for the same device and for the date contained in this DataSet.</value>
  </data>
</root>